{
  "version": "2",
  "toolVersion": "1.52.1",
  "snippets": {
    "4fd0399b4fd7c1099faf9e898ec1684c3175c16096b3531a6d5d7eb804e583e7": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\n\napi.root.add_method(\"ANY\")\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\")\nbooks.add_method(\"POST\")\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")\nbook.add_method(\"DELETE\")",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\n\napi.Root.AddMethod(\"ANY\");\n\nResource books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\");\nbooks.AddMethod(\"POST\");\n\nResource book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");\nbook.AddMethod(\"DELETE\");",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\n\napi.root.addMethod(\"ANY\");\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\");\nbooks.addMethod(\"POST\");\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");\nbook.addMethod(\"DELETE\");",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\n\napi.root.addMethod('ANY');\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');\nbooks.addMethod('POST');\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\nbook.addMethod('DELETE');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\n\napi.root.addMethod('ANY');\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');\nbooks.addMethod('POST');\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\nbook.addMethod('DELETE');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 21,
        "104": 1,
        "194": 10,
        "196": 7,
        "197": 1,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3
      },
      "fqnsFingerprint": "618e4630b87405d836333805724ebca2717430264a29e756b5c1cd3c0b010506"
    },
    "2eaba6a5e320a4862b6b0f9a08c4279904e44543ef0012f501a75271a1892897": {
      "translations": {
        "python": {
          "source": "# backend: lambda.Function\n\napigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function backend;\n\nnew LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend\n});",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nnew apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 81
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "213d010631550984234129eb2cd58cbc71b4522a67f0bce67ef4d5ee2d923133"
    },
    "a30531d2bf118939ef7f53aa2d06e758bb6e20f346109b41e761c617da8b7fbd": {
      "translations": {
        "python": {
          "source": "# backend: lambda.Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Function backend;\n\nLambdaRestApi api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nResource items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nResource item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 6,
        "197": 2,
        "225": 4,
        "226": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2895404a93ee0a5ed14575a15642f12477e55a520a276e6b1f2416991498cfb8"
    },
    "d819d3b744072040d45e398edfd8f8b6c298adda9d8e9bce08ea2721f0f63117": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a0cf445baae8193d8a1804008cd9b43c84279a87788bb15897c84df03ae4ab45"
    },
    "022fe0db36024bc807d1732719d8146d92334e00bd4346a2dd760d710c62addb": {
      "translations": {
        "python": {
          "source": "apigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    state_machine=machine,\n    headers=True,\n    path=False,\n    querystring=False,\n    request_context=apigateway.RequestContext(\n        caller=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    StateMachine = machine,\n    Headers = true,\n    Path = false,\n    Querystring = false,\n    RequestContext = new RequestContext {\n        Caller = true,\n        User = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "StepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .stateMachine(machine)\n        .headers(true)\n        .path(false)\n        .querystring(false)\n        .requestContext(RequestContext.builder()\n                .caller(true)\n                .user(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 190
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RequestContext",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const machine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n      definition: new stepfunctions.Pass(this, 'PassState'),\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "91": 2,
        "104": 1,
        "106": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "5a637c4bf4e4217db4df1259e9b30dcb4c9d01ae0c7b53ef1d9c4e31a1c455c6"
    },
    "70474cb3b94cee59d0d164f73644b0532c9db664a84020bf93b212f5ee48fdc8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8942be4873aef461f6b185f68d52c2b0fac86a7a317c454b04b99787d1f82256"
    },
    "35085d5dae8ad75ae1c8d2836861b17932e24ba368084fa3f11cabb16fe38d78": {
      "translations": {
        "python": {
          "source": "# get_book_handler: lambda.Function\n# book: apigateway.Resource\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler)\nbook.add_method(\"GET\", get_book_integration)",
          "version": "2"
        },
        "csharp": {
          "source": "Function getBookHandler;\nResource book;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler);\nbook.AddMethod(\"GET\", getBookIntegration);",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nResource book;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler);\nbook.addMethod(\"GET\", getBookIntegration);",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const book: apigateway.Resource;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler);\nbook.addMethod('GET', getBookIntegration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 381
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const book: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler);\nbook.addMethod('GET', getBookIntegration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "892db65a0ba99671b98ccd7e6b80f6872f11c0af0cba67e6dfc7b64a95e7921c"
    },
    "a5e3f0eb9cc1cf4888ce6752ec22d2f93225157b21fdb778d574f347c50ab051": {
      "translations": {
        "python": {
          "source": "# get_book_handler: lambda.Function\n# get_book_integration: apigateway.LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 391
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "387091d30583a53e7f3ab8688e7b8caa240c0e3c3b325d92e7288234e86c234c"
    },
    "316d3f6198788a5c766e4781bf11eb581bde5fea82bf78687eb7e892f31c2b8d": {
      "translations": {
        "python": {
          "source": "# book: apigateway.Resource\n# get_book_integration: apigateway.LambdaIntegration\n\n\nbook.add_method(\"GET\", get_book_integration,\n    authorization_type=apigateway.AuthorizationType.IAM,\n    api_key_required=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource book;\nLambdaIntegration getBookIntegration;\n\n\nbook.AddMethod(\"GET\", getBookIntegration, new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM,\n    ApiKeyRequired = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource book;\nLambdaIntegration getBookIntegration;\n\n\nbook.addMethod(\"GET\", getBookIntegration, MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .apiKeyRequired(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const book: apigateway.Resource;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nbook.addMethod('GET', getBookIntegration, {\n  authorizationType: apigateway.AuthorizationType.IAM,\n  apiKeyRequired: true\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 403
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const book: apigateway.Resource;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nbook.addMethod('GET', getBookIntegration, {\n  authorizationType: apigateway.AuthorizationType.IAM,\n  apiKeyRequired: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "04d0aa43edecd5241197da7e2a6dca1dfa4b6af28ad4abb939e52e3694b5bb5d"
    },
    "3eb9ddc390d2d2751bdba892603ea67c398de0edb5b14c11bbc1be53ff7fbc1e": {
      "translations": {
        "python": {
          "source": "get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AwsIntegration getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 416
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AwsIntegration",
        "@aws-cdk/aws-apigateway.AwsIntegrationProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "500b84814f080d50846465a858310b8dc43ebdd703f7d33e3bee9d2d9e9cb0e6"
    },
    "197265bdcdde35bead095a8d1c7da8e380915ed3b2bec826ad49f29d8635377c": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 432
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6504f562bd9c2afe70f39b7281d90da034c0a570ae0a1853e05708b03fc1e63a"
    },
    "5ea2d245038589a627e01787d0e3167696dac12aae0d9cb6371454240241be73": {
      "translations": {
        "python": {
          "source": "# plan: apigateway.UsagePlan\n# api: apigateway.RestApi\n# echo_method: apigateway.Method\n\n\nplan.add_api_stage(\n    stage=api.deployment_stage,\n    throttle=[apigateway.ThrottlingPerMethod(\n        method=echo_method,\n        throttle=apigateway.ThrottleSettings(\n            rate_limit=10,\n            burst_limit=2\n        )\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.AddApiStage(new UsagePlanPerApiStage {\n    Stage = api.DeploymentStage,\n    Throttle = new [] { new ThrottlingPerMethod {\n        Method = echoMethod,\n        Throttle = new ThrottleSettings {\n            RateLimit = 10,\n            BurstLimit = 2\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.addApiStage(UsagePlanPerApiStage.builder()\n        .stage(api.getDeploymentStage())\n        .throttle(List.of(ThrottlingPerMethod.builder()\n                .method(echoMethod)\n                .throttle(ThrottleSettings.builder()\n                        .rateLimit(10)\n                        .burstLimit(2)\n                        .build())\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 455
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.RestApiBase#deploymentStage",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan#addApiStage",
        "@aws-cdk/aws-apigateway.UsagePlanPerApiStage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 20,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "835295e256d25287dc3894b9d7d1db03e67176388282ae986252156e3ebae0d8"
    },
    "618b1e6d2fe6274f96ac3462f9855eaa8c97cdaa1ec6799269372e4891bca8e2": {
      "translations": {
        "python": {
          "source": "imported_usage_plan = apigateway.UsagePlan.from_usage_plan_id(self, \"imported-usage-plan\", \"<usage-plan-key-id>\")",
          "version": "2"
        },
        "csharp": {
          "source": "IUsagePlan importedUsagePlan = UsagePlan.FromUsagePlanId(this, \"imported-usage-plan\", \"<usage-plan-key-id>\");",
          "version": "1"
        },
        "java": {
          "source": "IUsagePlan importedUsagePlan = UsagePlan.fromUsagePlanId(this, \"imported-usage-plan\", \"<usage-plan-key-id>\");",
          "version": "1"
        },
        "$": {
          "source": "const importedUsagePlan = apigateway.UsagePlan.fromUsagePlanId(this, 'imported-usage-plan', '<usage-plan-key-id>');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 476
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IUsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlan#fromUsagePlanId",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedUsagePlan = apigateway.UsagePlan.fromUsagePlanId(this, 'imported-usage-plan', '<usage-plan-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "5435085967d10f021b5696ea075274bc8a99b88e3d97e72c852cc2d01d3dd380"
    },
    "c28981862422025fdf6ea03211c6af55b84788cba48d3c618d6a5846f7b350cd": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\nkey = api.add_api_key(\"ApiKey\",\n    api_key_name=\"myApiKey1\",\n    value=\"MyApiKeyThatIsAtLeast20Characters\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\nIApiKey key = api.AddApiKey(\"ApiKey\", new ApiKeyOptions {\n    ApiKeyName = \"myApiKey1\",\n    Value = \"MyApiKeyThatIsAtLeast20Characters\"\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\nIApiKey key = api.addApiKey(\"ApiKey\", ApiKeyOptions.builder()\n        .apiKeyName(\"myApiKey1\")\n        .value(\"MyApiKeyThatIsAtLeast20Characters\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 483
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "351245f6c6830e43bd79fa93b813cc982094bbad2e463e09e970bb07438ce6c9"
    },
    "245d9ea723386e50babafe53326ca1cea5fb4c76ea287e4f3db0d7e1e519c12d": {
      "translations": {
        "python": {
          "source": "imported_key = apigateway.ApiKey.from_api_key_id(self, \"imported-key\", \"<api-key-id>\")",
          "version": "2"
        },
        "csharp": {
          "source": "IApiKey importedKey = ApiKey.FromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "java": {
          "source": "IApiKey importedKey = ApiKey.fromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "$": {
          "source": "const importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 493
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKey",
        "@aws-cdk/aws-apigateway.ApiKey#fromApiKeyId",
        "@aws-cdk/aws-apigateway.IApiKey",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "11b2bf37ab67293d4c17686d53aee739a3d8e7208dee782149ef589812ec488d"
    },
    "89940aea7ab63592ca64bce7cd6f2598e9ce25f084d711948143b12436b8df6d": {
      "translations": {
        "python": {
          "source": "# imported_key: apigateway.ApiKey\n# lambda_fn: lambda.Function\n\nimported_key.grant_read(lambda_fn)",
          "version": "2"
        },
        "csharp": {
          "source": "ApiKey importedKey;\nFunction lambdaFn;\n\nimportedKey.GrantRead(lambdaFn);",
          "version": "1"
        },
        "java": {
          "source": "ApiKey importedKey;\nFunction lambdaFn;\n\nimportedKey.grantRead(lambdaFn);",
          "version": "1"
        },
        "$": {
          "source": "declare const importedKey: apigateway.ApiKey;\ndeclare const lambdaFn: lambda.Function;\nimportedKey.grantRead(lambdaFn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 500
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const importedKey: apigateway.ApiKey;\ndeclare const lambdaFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nimportedKey.grantRead(lambdaFn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "916ce623a432bf9ec0a81a5f56bd8766872dc8b5dab729aa045703843057e32d": {
      "translations": {
        "python": {
          "source": "# usageplan: apigateway.UsagePlan\n# api_key: apigateway.ApiKey\n\n\nusageplan.add_api_key(api_key,\n    override_logical_id=\"...\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.AddApiKey(apiKey, new AddApiKeyOptions {\n    OverrideLogicalId = \"...\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.addApiKey(apiKey, AddApiKeyOptions.builder()\n        .overrideLogicalId(\"...\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 518
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AddApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b2c7024f386303be6e2b23fdf6301c0e218b442a95978040d08450a9b691daa2"
    },
    "5d7a97eb79c0c5b95575c110fb43d4d9093e8f83d3390b6abef8db5f7790625a": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 538
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b49be7152b48d9ef0f1a2945b13dcb66fe3dbe2eda5489d9606eee829ca21255"
    },
    "2925616340b65ab93774fdf5de6219be2dcaff6ac370400385b65f28ae804552": {
      "translations": {
        "python": {
          "source": "hello = lambda_.Function(self, \"hello\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"hello.handler\",\n    code=lambda_.Code.from_asset(\"lambda\")\n)\n\napi = apigateway.RestApi(self, \"hello-api\")\nresource = api.root.add_resource(\"v1\")",
          "version": "2"
        },
        "csharp": {
          "source": "Function hello = new Function(this, \"hello\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"hello.handler\",\n    Code = Code.FromAsset(\"lambda\")\n});\n\nRestApi api = new RestApi(this, \"hello-api\", new RestApiProps { });\nResource resource = api.Root.AddResource(\"v1\");",
          "version": "1"
        },
        "java": {
          "source": "Function hello = Function.Builder.create(this, \"hello\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"hello.handler\")\n        .code(Code.fromAsset(\"lambda\"))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"hello-api\").build();\nResource resource = api.root.addResource(\"v1\");",
          "version": "1"
        },
        "$": {
          "source": "const hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 556
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 2,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3
      },
      "fqnsFingerprint": "46570a9f69efdd56ab8be2aa6b814dfa626e3e8003ef3e3cff92f724df0452ea"
    },
    "db6c4f6a6eb35aa883a060075269c67181db729f6c3d0dedd2bc1e3ca462438f": {
      "translations": {
        "python": {
          "source": "# hello: lambda.Function\n\n\nintegration = apigateway.LambdaIntegration(hello,\n    proxy=False,\n    request_parameters={\n        # You can define mapping parameters from your method to your integration\n        # - Destination parameters (the key) are the integration parameters (used in mappings)\n        # - Source parameters (the value) are the source request parameters or expressions\n        # @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n        \"integration.request.querystring.who\": \"method.request.querystring.who\"\n    },\n    allow_test_invoke=True,\n    request_templates={\n        # You can define a mapping that will build a payload for your integration, based\n        #  on the integration parameters that you have specified\n        # Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        \"application/json\": JSON.stringify({\"action\": \"sayHello\", \"poll_id\": \"$util.escapeJavaScript($input.params('who'))\"})\n    },\n    # This parameter defines the behavior of the engine is no suitable response template is found\n    passthrough_behavior=apigateway.PassthroughBehavior.NEVER,\n    integration_responses=[apigateway.IntegrationResponse(\n        # Successful response from the Lambda function, no filter defined\n        #  - the selectionPattern filter only tests the error message\n        # We will set the response status code to 200\n        status_code=\"200\",\n        response_templates={\n            # This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n            # Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n            \"application/json\": JSON.stringify({\"state\": \"ok\", \"greeting\": \"$util.escapeJavaScript($input.body)\"})\n        },\n        response_parameters={\n            # We can map response parameters\n            # - Destination parameters (the key) are the response parameters (used in mappings)\n            # - Source parameters (the value) are the integration response parameters or expressions\n            \"method.response.header._content-_type\": \"'application/json'\",\n            \"method.response.header._access-_control-_allow-_origin\": \"'*'\",\n            \"method.response.header._access-_control-_allow-_credentials\": \"'true'\"\n        }\n    ), apigateway.IntegrationResponse(\n        # For errors, we check if the error message is not empty, get the error data\n        selection_pattern=\"\"\"(\n        |.)+\"\"\",\n        # We will set the response status code to 200\n        status_code=\"400\",\n        response_templates={\n            \"application/json\": JSON.stringify({\"state\": \"error\", \"message\": \"$util.escapeJavaScript($input.path('$.errorMessage'))\"})\n        },\n        response_parameters={\n            \"method.response.header._content-_type\": \"'application/json'\",\n            \"method.response.header._access-_control-_allow-_origin\": \"'*'\",\n            \"method.response.header._access-_control-_allow-_credentials\": \"'true'\"\n        }\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function hello;\n\n\nLambdaIntegration integration = new LambdaIntegration(hello, new LambdaIntegrationOptions {\n    Proxy = false,\n    RequestParameters = new Dictionary<string, string> {\n        // You can define mapping parameters from your method to your integration\n        // - Destination parameters (the key) are the integration parameters (used in mappings)\n        // - Source parameters (the value) are the source request parameters or expressions\n        // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n        { \"integration.request.querystring.who\", \"method.request.querystring.who\" }\n    },\n    AllowTestInvoke = true,\n    RequestTemplates = new Dictionary<string, string> {\n        // You can define a mapping that will build a payload for your integration, based\n        //  on the integration parameters that you have specified\n        // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"action\", \"sayHello\" }, { \"pollId\", \"$util.escapeJavaScript($input.params('who'))\" } }) }\n    },\n    // This parameter defines the behavior of the engine is no suitable response template is found\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    IntegrationResponses = new [] { new IntegrationResponse {\n        // Successful response from the Lambda function, no filter defined\n        //  - the selectionPattern filter only tests the error message\n        // We will set the response status code to 200\n        StatusCode = \"200\",\n        ResponseTemplates = new Dictionary<string, string> {\n            // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n            // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n            { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"state\", \"ok\" }, { \"greeting\", \"$util.escapeJavaScript($input.body)\" } }) }\n        },\n        ResponseParameters = new Dictionary<string, string> {\n            // We can map response parameters\n            // - Destination parameters (the key) are the response parameters (used in mappings)\n            // - Source parameters (the value) are the integration response parameters or expressions\n            { \"method.response.header.Content-Type\", \"'application/json'\" },\n            { \"method.response.header.Access-Control-Allow-Origin\", \"'*'\" },\n            { \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\" }\n        }\n    }, new IntegrationResponse {\n        // For errors, we check if the error message is not empty, get the error data\n        SelectionPattern = @\"(\n        |.)+\",\n        // We will set the response status code to 200\n        StatusCode = \"400\",\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"state\", \"error\" }, { \"message\", \"$util.escapeJavaScript($input.path('$.errorMessage'))\" } }) }\n        },\n        ResponseParameters = new Dictionary<string, string> {\n            { \"method.response.header.Content-Type\", \"'application/json'\" },\n            { \"method.response.header.Access-Control-Allow-Origin\", \"'*'\" },\n            { \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function hello;\n\n\nLambdaIntegration integration = LambdaIntegration.Builder.create(hello)\n        .proxy(false)\n        .requestParameters(Map.of(\n                // You can define mapping parameters from your method to your integration\n                // - Destination parameters (the key) are the integration parameters (used in mappings)\n                // - Source parameters (the value) are the source request parameters or expressions\n                // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n                \"integration.request.querystring.who\", \"method.request.querystring.who\"))\n        .allowTestInvoke(true)\n        .requestTemplates(Map.of(\n                // You can define a mapping that will build a payload for your integration, based\n                //  on the integration parameters that you have specified\n                // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n                \"application/json\", JSON.stringify(Map.of(\"action\", \"sayHello\", \"pollId\", \"$util.escapeJavaScript($input.params('who'))\"))))\n        // This parameter defines the behavior of the engine is no suitable response template is found\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .integrationResponses(List.of(IntegrationResponse.builder()\n                // Successful response from the Lambda function, no filter defined\n                //  - the selectionPattern filter only tests the error message\n                // We will set the response status code to 200\n                .statusCode(\"200\")\n                .responseTemplates(Map.of(\n                        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n                        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n                        \"application/json\", JSON.stringify(Map.of(\"state\", \"ok\", \"greeting\", \"$util.escapeJavaScript($input.body)\"))))\n                .responseParameters(Map.of(\n                        // We can map response parameters\n                        // - Destination parameters (the key) are the response parameters (used in mappings)\n                        // - Source parameters (the value) are the integration response parameters or expressions\n                        \"method.response.header.Content-Type\", \"'application/json'\",\n                        \"method.response.header.Access-Control-Allow-Origin\", \"'*'\",\n                        \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\"))\n                .build(), IntegrationResponse.builder()\n                // For errors, we check if the error message is not empty, get the error data\n                .selectionPattern(\"(\\n|.)+\")\n                // We will set the response status code to 200\n                .statusCode(\"400\")\n                .responseTemplates(Map.of(\n                        \"application/json\", JSON.stringify(Map.of(\"state\", \"error\", \"message\", \"$util.escapeJavaScript($input.path('$.errorMessage'))\"))))\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", \"'application/json'\",\n                        \"method.response.header.Access-Control-Allow-Origin\", \"'*'\",\n                        \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const hello: lambda.Function;\n\nconst integration = new apigateway.LambdaIntegration(hello, {\n  proxy: false,\n  requestParameters: {\n    // You can define mapping parameters from your method to your integration\n    // - Destination parameters (the key) are the integration parameters (used in mappings)\n    // - Source parameters (the value) are the source request parameters or expressions\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n    'integration.request.querystring.who': 'method.request.querystring.who'\n  },\n  allowTestInvoke: true,\n  requestTemplates: {\n    // You can define a mapping that will build a payload for your integration, based\n    //  on the integration parameters that you have specified\n    // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n    'application/json': JSON.stringify({ action: 'sayHello', pollId: \"$util.escapeJavaScript($input.params('who'))\" })\n  },\n  // This parameter defines the behavior of the engine is no suitable response template is found\n  passthroughBehavior: apigateway.PassthroughBehavior.NEVER,\n  integrationResponses: [\n    {\n      // Successful response from the Lambda function, no filter defined\n      //  - the selectionPattern filter only tests the error message\n      // We will set the response status code to 200\n      statusCode: \"200\",\n      responseTemplates: {\n        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        'application/json': JSON.stringify({ state: 'ok', greeting: '$util.escapeJavaScript($input.body)' })\n      },\n      responseParameters: {\n        // We can map response parameters\n        // - Destination parameters (the key) are the response parameters (used in mappings)\n        // - Source parameters (the value) are the integration response parameters or expressions\n        'method.response.header.Content-Type': \"'application/json'\",\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n        'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    },\n    {\n      // For errors, we check if the error message is not empty, get the error data\n      selectionPattern: '(\\n|.)+',\n      // We will set the response status code to 200\n      statusCode: \"400\",\n      responseTemplates: {\n          'application/json': JSON.stringify({ state: 'error', message: \"$util.escapeJavaScript($input.path('$.errorMessage'))\" })\n      },\n      responseParameters: {\n          'method.response.header.Content-Type': \"'application/json'\",\n          'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n          'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 569
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hello: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst integration = new apigateway.LambdaIntegration(hello, {\n  proxy: false,\n  requestParameters: {\n    // You can define mapping parameters from your method to your integration\n    // - Destination parameters (the key) are the integration parameters (used in mappings)\n    // - Source parameters (the value) are the source request parameters or expressions\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n    'integration.request.querystring.who': 'method.request.querystring.who'\n  },\n  allowTestInvoke: true,\n  requestTemplates: {\n    // You can define a mapping that will build a payload for your integration, based\n    //  on the integration parameters that you have specified\n    // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n    'application/json': JSON.stringify({ action: 'sayHello', pollId: \"$util.escapeJavaScript($input.params('who'))\" })\n  },\n  // This parameter defines the behavior of the engine is no suitable response template is found\n  passthroughBehavior: apigateway.PassthroughBehavior.NEVER,\n  integrationResponses: [\n    {\n      // Successful response from the Lambda function, no filter defined\n      //  - the selectionPattern filter only tests the error message\n      // We will set the response status code to 200\n      statusCode: \"200\",\n      responseTemplates: {\n        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        'application/json': JSON.stringify({ state: 'ok', greeting: '$util.escapeJavaScript($input.body)' })\n      },\n      responseParameters: {\n        // We can map response parameters\n        // - Destination parameters (the key) are the response parameters (used in mappings)\n        // - Source parameters (the value) are the integration response parameters or expressions\n        'method.response.header.Content-Type': \"'application/json'\",\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n        'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    },\n    {\n      // For errors, we check if the error message is not empty, get the error data\n      selectionPattern: '(\\n|.)+',\n      // We will set the response status code to 200\n      statusCode: \"400\",\n      responseTemplates: {\n          'application/json': JSON.stringify({ state: 'error', message: \"$util.escapeJavaScript($input.path('$.errorMessage'))\" })\n      },\n      responseParameters: {\n          'method.response.header.Content-Type': \"'application/json'\",\n          'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n          'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 26,
        "75": 35,
        "91": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 12,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 29,
        "290": 1
      },
      "fqnsFingerprint": "15789e09624f6f111aa45f99852a41a4e313f168b8a87a4872ad5e4a1d8ddefd"
    },
    "1770d7e910f52898ed79714cdc0969bf9b4bd9f1cbba70998c3affd645ee2267": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 631
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "c78357dce541cd42e028db5018f83f8da38a24059df2204d45e9d96722c7d4eb"
    },
    "ed589b7a75fd3e1ca230dea114d2eb8779b33df23bf485cb63d629cb66097e3a": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n# resource: apigateway.Resource\n# response_model: apigateway.Model\n# error_response_model: apigateway.Model\n\n\nresource.add_method(\"GET\", integration,\n    # We can mark the parameters as required\n    request_parameters={\n        \"method.request.querystring.who\": True\n    },\n    # we can set request validator options like below\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"test-validator\",\n        validate_request_body=True,\n        validate_request_parameters=False\n    ),\n    method_responses=[apigateway.MethodResponse(\n        # Successful response from the integration\n        status_code=\"200\",\n        # Define what parameters are allowed or not\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        # Validate the schema on the response\n        response_models={\n            \"application/json\": response_model\n        }\n    ), apigateway.MethodResponse(\n        # Same thing for the error responses\n        status_code=\"400\",\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        response_models={\n            \"application/json\": error_response_model\n        }\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.AddMethod(\"GET\", integration, new MethodOptions {\n    // We can mark the parameters as required\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"method.request.querystring.who\", true }\n    },\n    // we can set request validator options like below\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"test-validator\",\n        ValidateRequestBody = true,\n        ValidateRequestParameters = false\n    },\n    MethodResponses = new [] { new MethodResponse {\n        // Successful response from the integration\n        StatusCode = \"200\",\n        // Define what parameters are allowed or not\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        // Validate the schema on the response\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", responseModel }\n        }\n    }, new MethodResponse {\n        // Same thing for the error responses\n        StatusCode = \"400\",\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", errorResponseModel }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.addMethod(\"GET\", integration, MethodOptions.builder()\n        // We can mark the parameters as required\n        .requestParameters(Map.of(\n                \"method.request.querystring.who\", true))\n        // we can set request validator options like below\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"test-validator\")\n                .validateRequestBody(true)\n                .validateRequestParameters(false)\n                .build())\n        .methodResponses(List.of(MethodResponse.builder()\n                // Successful response from the integration\n                .statusCode(\"200\")\n                // Define what parameters are allowed or not\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                // Validate the schema on the response\n                .responseModels(Map.of(\n                        \"application/json\", responseModel))\n                .build(), MethodResponse.builder()\n                // Same thing for the error responses\n                .statusCode(\"400\")\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                .responseModels(Map.of(\n                        \"application/json\", errorResponseModel))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 668
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 29,
        "91": 1,
        "106": 8,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 9,
        "194": 1,
        "196": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "b09f89bdffef56034d1545ba2c585e1e608a51db53caa94f94fc74b14b9f6c56"
    },
    "9ce1fa303b7589f417f7bd27f7c7f8a951cdaf30d2edbdf5c9efe8305d0c0dda": {
      "translations": {
        "python": {
          "source": "# books_backend: apigateway.LambdaIntegration\n\napi = apigateway.RestApi(self, \"books\",\n    default_integration=books_backend\n)\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\") # integrated with `booksBackend`\nbooks.add_method(\"POST\") # integrated with `booksBackend`\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DefaultIntegration = booksBackend\n});\n\nResource books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\"); // integrated with `booksBackend`\nbooks.AddMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .defaultIntegration(booksBackend)\n        .build();\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\"); // integrated with `booksBackend`\nbooks.addMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");",
          "version": "1"
        },
        "$": {
          "source": "declare const booksBackend: apigateway.LambdaIntegration;\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');   // integrated with `booksBackend`",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 733
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const booksBackend: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 7,
        "196": 5,
        "197": 1,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9bbb74b11e69c7e3973c86763f5d0b02a6dce7bd6054cd20ff6d512f771a5d87"
    },
    "0539e3468eec25ab01ad21ea98eb163bc02419369dbb38ceac2ea275728038a4": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\n\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.COGNITO,\n    authorization_scopes=[\"Scope1\", \"Scope2\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\n\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.COGNITO,\n    AuthorizationScopes = new [] { \"Scope1\", \"Scope2\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\n\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.COGNITO)\n        .authorizationScopes(List.of(\"Scope1\", \"Scope2\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n  authorizationScopes: ['Scope1','Scope2']\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 755
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n  authorizationScopes: ['Scope1','Scope2']\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7c4849a7ce111a86bc619b87779d453dc34bd6b10f5e7bae6715ccf8a49b54af"
    },
    "1c543ddf834ffbf0a405f3ffa14df2a8c4cd15ed1ca0f9a9e72c86d8ff7d9f4f": {
      "translations": {
        "python": {
          "source": "# resource: apigateway.Resource\n# handler: lambda.Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 769
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ProxyResource",
        "@aws-cdk/aws-apigateway.ProxyResourceOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addProxy",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d8e724f0608bac42b0be2480f842dc918232459bd86546fb0ee65f75e81e5821"
    },
    "75142646447bd454d2115e268452cb8aa8b85f350168c7b0330782dec7bd17a7": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\n# iam_user: iam.User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 789
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.User#attachInlinePolicy",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f4d01ffc3a7d703cd0a30c96078945afc9acaefdc82ead33724ad432160f90d1"
    },
    "b23bcd6e448ef607bcca3e58e424511be4f6952fee21cb57c03073f9dba70576": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 826
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3d501605bb8170658a7911e28a2baf3e4c30b275257adb40134819e0dc3f1e02"
    },
    "7e171f59842f0ba999d5e75de30ef99a4e9fdb93d68f903daea47630a54cf6ce": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer\n\n#\n# Stack verification steps:\n# * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n#\n\napp = App()\nstack = Stack(app, \"TokenAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.token-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = TokenAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.token-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = new TokenAuthorizer(stack, \"MyAuthorizer\", new TokenAuthorizerProps {\n    Handler = authorizerFn\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.TokenAuthorizer;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.token-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = TokenAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 842
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 50,
        "192": 2,
        "193": 7,
        "194": 9,
        "196": 3,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 2,
        "257": 2,
        "258": 6,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a9398431dcf0e14a66adcb9807ce8bb2f3099c0e4b63b324bbe508d2a0accc0"
    },
    "69697a1a79c30244816c20325c2fedfc5e15af364d8245c836506bbe4d6c8304": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 910
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cc62851041dc2333458806df30e30d540202df9d0cd8f54380f7480cd318bd2"
    },
    "460dd31a9d3076ddca2879de1b83308e30b105198197b7c72236400b1696b4da": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 927
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a66c09eb33b8122ca6b4dd4c78b7ee90639738f28e53f97e1b806a52a81cf444"
    },
    "e892b0a6beca09c212d7c7e80f3cb88249c9a37040ca17a8f3b7b26d265d3d06": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 986
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "482ca140fdde024354755f392f8dca51f3e5fdcda6425ba1ab4e5933ae73dcc1"
    },
    "9b53bee34f3daf385bf407a2159ebd0726976d90ce9e9780fac875a9ea4fc81a": {
      "translations": {
        "python": {
          "source": "# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1004
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14b5edb963b9558536b9abdfdf73b955d0b5f0e038e3ae312b5168a408995b2c"
    },
    "6a07cf508d613278e7a4d6f68cfcab75161a77b4c87cbe9d7f4c9badbfa0fb12": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        logging_level=apigateway.MethodLoggingLevel.INFO,\n        data_trace_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        LoggingLevel = MethodLoggingLevel.INFO,\n        DataTraceEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .loggingLevel(MethodLoggingLevel.INFO)\n                .dataTraceEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1052
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.MethodLoggingLevel",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel#INFO",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a5d5de063790b967f518976ba99175c32544eaa22524e46654b5abb7aca85a86"
    },
    "19c1f947f2fade3f30b809060178b549599bcb5721519af89930694758187e2a": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com: Any\n\n\napi = apigateway.RestApi(self, \"MyDomain\",\n    domain_name=apigateway.DomainNameOptions(\n        domain_name=\"example.com\",\n        certificate=acm_certificate_for_example_com\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nRestApi api = new RestApi(this, \"MyDomain\", new RestApiProps {\n    DomainName = new DomainNameOptions {\n        DomainName = \"example.com\",\n        Certificate = acmCertificateForExampleCom\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nRestApi api = RestApi.Builder.create(this, \"MyDomain\")\n        .domainName(DomainNameOptions.builder()\n                .domainName(\"example.com\")\n                .certificate(acmCertificateForExampleCom)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1085
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainNameOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee8e4a487978bb8c922ed4598f0e4f839856d28ff6e9f03babbd48b5dd6f0529"
    },
    "fc1a0b9e3542f7a902a40408e510a0a338f2120b3772d2fb64d993ae2a50da1a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api: apigateway.RestApi\n# hosted_zone_for_example_com: Any\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1106
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "862766fe00bdf4572a4d1966e3fa5317511172642baead1c7706ee7b26dc1274"
    },
    "50b3e6d728f453b3bf6f3f9c5c8b7e44139e7bc3957c580053f5778e0a54f61b": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com: Any\n\n\napigateway.DomainName(self, \"custom-domain\",\n    domain_name=\"example.com\",\n    certificate=acm_certificate_for_example_com,\n    endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL\n    security_policy=apigateway.SecurityPolicy.TLS_1_2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nnew DomainName(this, \"custom-domain\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acmCertificateForExampleCom,\n    EndpointType = EndpointType.EDGE,  // default is REGIONAL\n    SecurityPolicy = SecurityPolicy.TLS_1_2\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nDomainName.Builder.create(this, \"custom-domain\")\n        .domainName(\"example.com\")\n        .certificate(acmCertificateForExampleCom)\n        .endpointType(EndpointType.EDGE) // default is REGIONAL\n        .securityPolicy(SecurityPolicy.TLS_1_2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1121
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.SecurityPolicy",
        "@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_2",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "1fe1572824be4a5c59b4d662c67d3b5f0564697f9414546160125d8c5f137881"
    },
    "2317c26e330a9b338d0728f02e68983b1f59c93d0fc4450ee62fba35817d2b4d": {
      "translations": {
        "python": {
          "source": "# domain: apigateway.DomainName\n# api1: apigateway.RestApi\n# api2: apigateway.RestApi\n\n\ndomain.add_base_path_mapping(api1, base_path=\"go-to-api1\")\ndomain.add_base_path_mapping(api2, base_path=\"boom\")",
          "version": "2"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.AddBasePathMapping(api1, new BasePathMappingOptions { BasePath = \"go-to-api1\" });\ndomain.AddBasePathMapping(api2, new BasePathMappingOptions { BasePath = \"boom\" });",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.addBasePathMapping(api1, BasePathMappingOptions.builder().basePath(\"go-to-api1\").build());\ndomain.addBasePathMapping(api2, BasePathMappingOptions.builder().basePath(\"boom\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1136
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingOptions",
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8cca9cc640d1e7b30fb049a7761eecf70a342cb4bb35eb35a082e0700e0e3710"
    },
    "4cb5a521e43f3a219dc476ea518ee7e58499626acc5573d938095f8cc5c91ff9": {
      "translations": {
        "python": {
          "source": "# domain: apigateway.DomainName\n# restapi: apigateway.RestApi\n\n\nbeta_deploy = apigateway.Deployment(self, \"beta-deployment\",\n    api=restapi\n)\nbeta_stage = apigateway.Stage(self, \"beta-stage\",\n    deployment=beta_deploy\n)\ndomain.add_base_path_mapping(restapi, base_path=\"api/beta\", stage=beta_stage)",
          "version": "2"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi restapi;\n\n\nDeployment betaDeploy = new Deployment(this, \"beta-deployment\", new DeploymentProps {\n    Api = restapi\n});\nStage betaStage = new Stage(this, \"beta-stage\", new StageProps {\n    Deployment = betaDeploy\n});\ndomain.AddBasePathMapping(restapi, new BasePathMappingOptions { BasePath = \"api/beta\", Stage = betaStage });",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi restapi;\n\n\nDeployment betaDeploy = Deployment.Builder.create(this, \"beta-deployment\")\n        .api(restapi)\n        .build();\nStage betaStage = Stage.Builder.create(this, \"beta-stage\")\n        .deployment(betaDeploy)\n        .build();\ndomain.addBasePathMapping(restapi, BasePathMappingOptions.builder().basePath(\"api/beta\").stage(betaStage).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const restapi: apigateway.RestApi;\n\nconst betaDeploy = new apigateway.Deployment(this, 'beta-deployment', {\n  api: restapi,\n});\nconst betaStage = new apigateway.Stage(this, 'beta-stage', {\n  deployment: betaDeploy,\n});\ndomain.addBasePathMapping(restapi, { basePath: 'api/beta', stage: betaStage });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1148
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingOptions",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const restapi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst betaDeploy = new apigateway.Deployment(this, 'beta-deployment', {\n  api: restapi,\n});\nconst betaStage = new apigateway.Stage(this, 'beta-stage', {\n  deployment: betaDeploy,\n});\ndomain.addBasePathMapping(restapi, { basePath: 'api/beta', stage: betaStage });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4517447f4916684bff60e0f60e34f3fbf8b09fb584dd78405152c6c13dac2c99"
    },
    "5f72c885d458c547240b76fd6b60b7085fb3e1fa1a84827bdacde770ac46d9dc": {
      "translations": {
        "python": {
          "source": "# domain: apigateway.DomainName\n# api: apigateway.RestApi\n\ndomain.add_base_path_mapping(api)",
          "version": "2"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi api;\n\ndomain.AddBasePathMapping(api);",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi api;\n\ndomain.addBasePathMapping(api);",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const api: apigateway.RestApi;\ndomain.addBasePathMapping(api);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1164
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ndomain.addBasePathMapping(api);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "bd1acab1e91ed7f3cf6954dc62b9be952d64e5de11717315da42fd107f8ff6c8"
    },
    "22791ad83af50e8d8e0acb485c9be42618b8541951ee5801f9a644a0ca3fc956": {
      "translations": {
        "python": {
          "source": "# hosted_zone_for_example_com: Any\n# domain_name: apigateway.DomainName\n\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGatewayDomain(domain_name))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var hostedZoneForExampleCom;\nDomainName domainName;\n\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGatewayDomain(domainName))\n});",
          "version": "1"
        },
        "java": {
          "source": "Object hostedZoneForExampleCom;\nDomainName domainName;\n\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGatewayDomain(domainName)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1175
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IDomainName",
        "@aws-cdk/aws-route53-targets.ApiGatewayDomain",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "81589aae3274ab61bd3afdc1e8aab4460c90f2b8a81ad218dd038009dafa6031"
    },
    "a3ce1e514d0100fafa8e55f5fed60e8c4edc73d6065ee5bf970297b8b1e65773": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1200
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "3f95b5b8091a47ca7f459b17d91a5c902c506c75bfe83ab4831956c97c32a0bd"
    },
    "719a940f7e05f4707bf342960f7ca484715a397b138a1c10dce2da53d3741085": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.clf()\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Clf()\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.clf())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1232
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#clf",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "0176f5aefa2ae7089faf2330833a0a36ab8817843804eabd76aa69a53281699b"
    },
    "5c05b53c16a3be10ec5ea50b7f00928889b497b344814bc82704ea85093e2f3c": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1244
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "15": 1,
        "16": 2,
        "17": 1,
        "75": 23,
        "104": 2,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "211": 1,
        "221": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "b4941537ba333ca87c3ea3463536b2d648ea7108b482066819ff92cc80e959da"
    },
    "66a43c754f6e0b6c77fb7a89e1f89086fc1dd640c8d6ef945d02ca8839b18443": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\")\ndeployment = apigateway.Deployment(self, \"my-deployment\", api=api)\nstage = apigateway.Stage(self, \"my-stage\",\n    deployment=deployment,\n    method_options={\n        \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n            throttling_rate_limit=100,\n            throttling_burst_limit=200)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = new Deployment(this, \"my-deployment\", new DeploymentProps { Api = api });\nStage stage = new Stage(this, \"my-stage\", new StageProps {\n    Deployment = deployment,\n    MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n        { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n            ThrottlingRateLimit = 100,\n            ThrottlingBurstLimit = 200 } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = Deployment.Builder.create(this, \"my-deployment\").api(api).build();\nStage stage = Stage.Builder.create(this, \"my-stage\")\n        .deployment(deployment)\n        .methodOptions(Map.of(\n                \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                        .throttlingRateLimit(100)\n                        .throttlingBurstLimit(200).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1261
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 14,
        "104": 3,
        "193": 4,
        "194": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "97e18f9a28e3eea22e33663bd12689850d3b34e471d5460c1b846ce3f17b2857"
    },
    "b51f37227d138d22ee04a2e3f6d5a3396aaf54e32868abcf650eeef08744fa02": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        method_options={\n            \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n                throttling_rate_limit=100,\n                throttling_burst_limit=1000)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n                ThrottlingRateLimit = 100,\n                ThrottlingBurstLimit = 1000 } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .methodOptions(Map.of(\n                        \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                                .throttlingRateLimit(100)\n                                .throttlingBurstLimit(1000).build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    methodOptions: {\n      '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n        throttlingRateLimit: 100,\n        throttlingBurstLimit: 1000\n      }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1278
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    methodOptions: {\n      '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n        throttlingRateLimit: 100,\n        throttlingBurstLimit: 1000\n      }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "5cdaa7a76f81ccd7a3e2235b4463a8fdb914f7b75fccc50b0da85b62d07fadf1"
    },
    "13ef2cf637f6f4bfca217bff83de4935fea5c8cec670bdba0cd475594cff8b1c": {
      "translations": {
        "python": {
          "source": "apigateway.RestApi(self, \"api\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=apigateway.Cors.ALL_ORIGINS,\n        allow_methods=apigateway.Cors.ALL_METHODS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new RestApi(this, \"api\", new RestApiProps {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = Cors.ALL_ORIGINS,\n        AllowMethods = Cors.ALL_METHODS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi.Builder.create(this, \"api\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(Cors.ALL_ORIGINS)\n                .allowMethods(Cors.ALL_METHODS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1304
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Cors",
        "@aws-cdk/aws-apigateway.Cors#ALL_METHODS",
        "@aws-cdk/aws-apigateway.Cors#ALL_ORIGINS",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "45b9b8183e04d307590d50bbfb5ae7cc9e0beb1508d01a1c4775b7a3ccbaec91"
    },
    "b82921d67474b7692473c32bd8baa12f6cf46a5dc7ff5e57534cb1d1a975142e": {
      "translations": {
        "python": {
          "source": "# my_resource: apigateway.Resource\n\n\nmy_resource.add_cors_preflight(\n    allow_origins=[\"https://amazon.com\"],\n    allow_methods=[\"GET\", \"PUT\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource myResource;\n\n\nmyResource.AddCorsPreflight(new CorsOptions {\n    AllowOrigins = new [] { \"https://amazon.com\" },\n    AllowMethods = new [] { \"GET\", \"PUT\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource myResource;\n\n\nmyResource.addCorsPreflight(CorsOptions.builder()\n        .allowOrigins(List.of(\"https://amazon.com\"))\n        .allowMethods(List.of(\"GET\", \"PUT\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myResource: apigateway.Resource;\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1316
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addCorsPreflight"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myResource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "03d368fcb97a4e9b67cd4575364de9f35d434ed3d40d1b3f167f0973dc05d5a9"
    },
    "98880fc385fda4ff10efbab8015cf18addcd8ca91929798b887dd19c85a62a24": {
      "translations": {
        "python": {
          "source": "# resource: apigateway.Resource\n\n\nsubtree = resource.add_resource(\"subtree\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"https://amazon.com\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource resource;\n\n\nResource subtree = resource.AddResource(\"subtree\", new ResourceOptions {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"https://amazon.com\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\n\n\nResource subtree = resource.addResource(\"subtree\", ResourceOptions.builder()\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"https://amazon.com\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1331
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.ResourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4e1e1e324f07d4c74319f1217df1cf77f549cbbe49f399d7c05b3385911493e0"
    },
    "08e6f8fc845119e691f5780a0c475289cb6d85b4a4975f5adf97c4ab432742cd": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.EDGE]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.EDGE }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.EDGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1353
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EndpointConfiguration",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "2c7e2948c9a5cd2fdca3a0541fed0ec60c5e52666086837c35e1680937ca7910"
    },
    "e1523c5826b37470ecb84ea1aab3b9f4d096d64c97a4fd74bd49b157f1ce35e4": {
      "translations": {
        "python": {
          "source": "# some_endpoint: ec2.IVpcEndpoint\n\n\napi = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.PRIVATE],\n        vpc_endpoints=[some_endpoint]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpcEndpoint someEndpoint;\n\n\nRestApi api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.PRIVATE },\n        VpcEndpoints = new [] { someEndpoint }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpcEndpoint someEndpoint;\n\n\nRestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.PRIVATE))\n                .vpcEndpoints(List.of(someEndpoint))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const someEndpoint: ec2.IVpcEndpoint;\n\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.PRIVATE ],\n    vpcEndpoints: [ someEndpoint ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1368
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EndpointConfiguration",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#PRIVATE",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const someEndpoint: ec2.IVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.PRIVATE ],\n    vpcEndpoints: [ someEndpoint ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d37cc8094c088e11738075fd51d18a79ef2080e40270c9b49f71b68761d82a7d"
    },
    "aa848ec0d21251e3de93f6b78355f2c2481e8363f1754520050190685a868421": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1395
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "127542ac7086347afc7a9fff3808efc2afec2a96fe18c4fa6b2b3fadeb40cf67"
    },
    "bce659d86b25aaf66ce03981661cd65602edf55af61bd74c6dbf323e5ab000c7": {
      "translations": {
        "python": {
          "source": "awesome_link = apigateway.VpcLink.from_vpc_link_id(self, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\")",
          "version": "2"
        },
        "csharp": {
          "source": "IVpcLink awesomeLink = VpcLink.FromVpcLinkId(this, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\");",
          "version": "1"
        },
        "java": {
          "source": "IVpcLink awesomeLink = VpcLink.fromVpcLinkId(this, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\");",
          "version": "1"
        },
        "$": {
          "source": "const awesomeLink = apigateway.VpcLink.fromVpcLinkId(this, 'awesome-vpc-link', 'us-east-1_oiuR12Abd');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1422
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLink#fromVpcLinkId",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst awesomeLink = apigateway.VpcLink.fromVpcLinkId(this, 'awesome-vpc-link', 'us-east-1_oiuR12Abd');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "ffaeadc50f37fb7a772154af18ce151819102b0d8117d63e774e9dc558deccb1"
    },
    "56c0be6a8ac0bd2e5f36733d6a115112d3ff959f2e553dac9410c73c0623ae9c": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1437
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseOptions",
        "@aws-cdk/aws-apigateway.ResponseType",
        "@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "d44f831a6c522408ccc6131a10759e3ccf0f37ab943c71595696802064e9ea80"
    },
    "87e475aa3bd736583b83911fa0e3a90389de38be9eca258d5b0b9a03966f3539": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "2"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1460
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "798b8ab1fa4d15e8386354ddc715b525512b179020c136a13fd1230cfab99370"
    },
    "9e49b09450c7bb739e927e94e6cbce4cec43fa5e6b834334094df26377ee5366": {
      "translations": {
        "python": {
          "source": "# api_definition: apigateway.ApiDefinition\n\n\napi = apigateway.SpecRestApi(self, \"ExampleRestApi\",\n    api_definition=api_definition,\n    endpoint_types=[apigateway.EndpointType.PRIVATE]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = new SpecRestApi(this, \"ExampleRestApi\", new SpecRestApiProps {\n    ApiDefinition = apiDefinition,\n    EndpointTypes = new [] { EndpointType.PRIVATE }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"ExampleRestApi\")\n        .apiDefinition(apiDefinition)\n        .endpointTypes(List.of(EndpointType.PRIVATE))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const apiDefinition: apigateway.ApiDefinition;\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1494
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#PRIVATE",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDefinition: apigateway.ApiDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "bf5c464ad7c6d122375d46ba324eba6551b5ce22e7be6a0fca2dc424a563734d"
    },
    "8289857d510360c2ec6afe77fa47d9df4bf44927813b5f95295c5ab853c6bede": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"my-api\")\nclient_error_metric = api.metric_client_error()",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"my-api\");\nMetric clientErrorMetric = api.MetricClientError();",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"my-api\");\nMetric clientErrorMetric = api.metricClientError();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1515
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#metricClientError",
        "@aws-cdk/aws-cloudwatch.Metric",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "2ac1ab21a097cab19de71a3525d2b4cf18b596aa33a1939dcbfd1617190e8274"
    },
    "5c01e5965cd36240f0c5ede6364e60034f0192f18812d4735e2ed175bbaef66a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_destination_config = apigateway.AccessLogDestinationConfig(\n    destination_arn=\"destinationArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nAccessLogDestinationConfig accessLogDestinationConfig = new AccessLogDestinationConfig {\n    DestinationArn = \"destinationArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogDestinationConfig accessLogDestinationConfig = AccessLogDestinationConfig.builder()\n        .destinationArn(\"destinationArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogDestinationConfig: apigateway.AccessLogDestinationConfig = {\n  destinationArn: 'destinationArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogDestinationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogDestinationConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogDestinationConfig: apigateway.AccessLogDestinationConfig = {\n  destinationArn: 'destinationArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "05cd6cb529025c0f05aa2b279901eee018492a5325ba1eb9534778b791304859"
    },
    "fbc9e5debd0d5e84e0ad389271e69062e0238a0fab0f5a189c15574d60fad2bf": {
      "translations": {
        "python": {
          "source": "apigateway.AccessLogFormat.custom(JSON.stringify({\n    \"request_id\": apigateway.AccessLogField.context_request_id(),\n    \"source_ip\": apigateway.AccessLogField.context_identity_source_ip(),\n    \"method\": apigateway.AccessLogField.context_http_method(),\n    \"user_context\": {\n        \"sub\": apigateway.AccessLogField.context_authorizer_claims(\"sub\"),\n        \"email\": apigateway.AccessLogField.context_authorizer_claims(\"email\")\n    }\n}))",
          "version": "2"
        },
        "csharp": {
          "source": "AccessLogFormat.Custom(JSON.Stringify(new Dictionary<string, object> {\n    { \"requestId\", AccessLogField.ContextRequestId() },\n    { \"sourceIp\", AccessLogField.ContextIdentitySourceIp() },\n    { \"method\", AccessLogField.ContextHttpMethod() },\n    { \"userContext\", new Struct {\n        Sub = AccessLogField.ContextAuthorizerClaims(\"sub\"),\n        Email = AccessLogField.ContextAuthorizerClaims(\"email\")\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "AccessLogFormat.custom(JSON.stringify(Map.of(\n        \"requestId\", AccessLogField.contextRequestId(),\n        \"sourceIp\", AccessLogField.contextIdentitySourceIp(),\n        \"method\", AccessLogField.contextHttpMethod(),\n        \"userContext\", Map.of(\n                \"sub\", AccessLogField.contextAuthorizerClaims(\"sub\"),\n                \"email\", AccessLogField.contextAuthorizerClaims(\"email\")))));",
          "version": "1"
        },
        "$": {
          "source": " apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogField"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogField",
        "@aws-cdk/aws-apigateway.AccessLogField#contextAuthorizerClaims",
        "@aws-cdk/aws-apigateway.AccessLogField#contextHttpMethod",
        "@aws-cdk/aws-apigateway.AccessLogField#contextIdentitySourceIp",
        "@aws-cdk/aws-apigateway.AccessLogField#contextRequestId",
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 26,
        "193": 2,
        "194": 13,
        "196": 7,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "7e1601768ddc90f99fdaea524b408af5131de71cdea9aeb7f5753cd688748607"
    },
    "e628493b57549d542d770cca34adae0722640618f11b0acef9f6369e5c3813e0": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogFormat"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "15": 1,
        "16": 2,
        "17": 1,
        "75": 23,
        "104": 2,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "211": 1,
        "221": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "b4941537ba333ca87c3ea3463536b2d648ea7108b482066819ff92cc80e959da"
    },
    "64dcec102ba8b8eff9279c8707c971bc33a21e4b52a145a7dfc6fc1018e381fe": {
      "translations": {
        "python": {
          "source": "apigateway.AccessLogFormat.custom(JSON.stringify({\n    \"request_id\": apigateway.AccessLogField.context_request_id(),\n    \"source_ip\": apigateway.AccessLogField.context_identity_source_ip(),\n    \"method\": apigateway.AccessLogField.context_http_method(),\n    \"user_context\": {\n        \"sub\": apigateway.AccessLogField.context_authorizer_claims(\"sub\"),\n        \"email\": apigateway.AccessLogField.context_authorizer_claims(\"email\")\n    }\n}))",
          "version": "2"
        },
        "csharp": {
          "source": "AccessLogFormat.Custom(JSON.Stringify(new Dictionary<string, object> {\n    { \"requestId\", AccessLogField.ContextRequestId() },\n    { \"sourceIp\", AccessLogField.ContextIdentitySourceIp() },\n    { \"method\", AccessLogField.ContextHttpMethod() },\n    { \"userContext\", new Struct {\n        Sub = AccessLogField.ContextAuthorizerClaims(\"sub\"),\n        Email = AccessLogField.ContextAuthorizerClaims(\"email\")\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "AccessLogFormat.custom(JSON.stringify(Map.of(\n        \"requestId\", AccessLogField.contextRequestId(),\n        \"sourceIp\", AccessLogField.contextIdentitySourceIp(),\n        \"method\", AccessLogField.contextHttpMethod(),\n        \"userContext\", Map.of(\n                \"sub\", AccessLogField.contextAuthorizerClaims(\"sub\"),\n                \"email\", AccessLogField.contextAuthorizerClaims(\"email\")))));",
          "version": "1"
        },
        "$": {
          "source": " apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogFormat",
          "memberName": "custom"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogField",
        "@aws-cdk/aws-apigateway.AccessLogField#contextAuthorizerClaims",
        "@aws-cdk/aws-apigateway.AccessLogField#contextHttpMethod",
        "@aws-cdk/aws-apigateway.AccessLogField#contextIdentitySourceIp",
        "@aws-cdk/aws-apigateway.AccessLogField#contextRequestId",
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 26,
        "193": 2,
        "194": 13,
        "196": 7,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "7e1601768ddc90f99fdaea524b408af5131de71cdea9aeb7f5753cd688748607"
    },
    "67b5dd13dddf57d612034da8eb7db1ada51e07259607cd0c606682d80032bf62": {
      "translations": {
        "python": {
          "source": "# usageplan: apigateway.UsagePlan\n# api_key: apigateway.ApiKey\n\n\nusageplan.add_api_key(api_key,\n    override_logical_id=\"...\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.AddApiKey(apiKey, new AddApiKeyOptions {\n    OverrideLogicalId = \"...\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.addApiKey(apiKey, AddApiKeyOptions.builder()\n        .overrideLogicalId(\"...\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AddApiKeyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AddApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b2c7024f386303be6e2b23fdf6301c0e218b442a95978040d08450a9b691daa2"
    },
    "901c16dcd0fcf9bd0e42822f8d61efbeead957c44765bd052ec31f545e003c9b": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "2"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "798b8ab1fa4d15e8386354ddc715b525512b179020c136a13fd1230cfab99370"
    },
    "391f19836943028f59a3e17128e1c7eea633e6869f3ad02327972d92aaf29271": {
      "translations": {
        "python": {
          "source": "apigateway.ApiDefinition.from_inline({\n    \"openapi\": \"3.0.2\",\n    \"paths\": {\n        \"/pets\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Empty\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-amazon-apigateway-integration\": {\n                    \"responses\": {\n                        \"default\": {\n                            \"status_code\": \"200\"\n                        }\n                    },\n                    \"request_templates\": {\n                        \"application/json\": \"{\\\"statusCode\\\": 200}\"\n                    },\n                    \"passthrough_behavior\": \"when_no_match\",\n                    \"type\": \"mock\"\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Empty\": {\n                \"title\": \"Empty Schema\",\n                \"type\": \"object\"\n            }\n        }\n    }\n})",
          "version": "2"
        },
        "csharp": {
          "source": "ApiDefinition.FromInline(new Dictionary<string, object> {\n    { \"openapi\", \"3.0.2\" },\n    { \"paths\", new Struct {\n        /pets = new Struct {\n            Get = new Struct {\n                Responses = new Struct {\n                    200 = new Struct {\n                        Content = new Struct {\n                            Application/json = new Struct {\n                                Schema = new Struct {\n                                    $ref = \"#/components/schemas/Empty\"\n                                }\n                            }\n                        }\n                    }\n                },\n                X-amazon-apigateway-integration = new Struct {\n                    Responses = new Struct {\n                        Default = new Struct {\n                            StatusCode = \"200\"\n                        }\n                    },\n                    RequestTemplates = new Struct {\n                        Application/json = \"{\\\"statusCode\\\": 200}\"\n                    },\n                    PassthroughBehavior = \"when_no_match\",\n                    Type = \"mock\"\n                }\n            }\n        }\n    } },\n    { \"components\", new Struct {\n        Schemas = new Struct {\n            Empty = new Struct {\n                Title = \"Empty Schema\",\n                Type = \"object\"\n            }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApiDefinition.fromInline(Map.of(\n        \"openapi\", \"3.0.2\",\n        \"paths\", Map.of(\n                \"/pets\", Map.of(\n                        \"get\", Map.of(\n                                \"responses\", Map.of(\n                                        200, Map.of(\n                                                \"content\", Map.of(\n                                                        \"application/json\", Map.of(\n                                                                \"schema\", Map.of(\n                                                                        \"$ref\", \"#/components/schemas/Empty\"))))),\n                                \"x-amazon-apigateway-integration\", Map.of(\n                                        \"responses\", Map.of(\n                                                \"default\", Map.of(\n                                                        \"statusCode\", \"200\")),\n                                        \"requestTemplates\", Map.of(\n                                                \"application/json\", \"{\\\"statusCode\\\": 200}\"),\n                                        \"passthroughBehavior\", \"when_no_match\",\n                                        \"type\", \"mock\")))),\n        \"components\", Map.of(\n                \"schemas\", Map.of(\n                        \"Empty\", Map.of(\n                                \"title\", \"Empty Schema\",\n                                \"type\", \"object\")))));",
          "version": "1"
        },
        "$": {
          "source": "  apigateway.ApiDefinition.fromInline({\n    openapi: '3.0.2',\n    paths: {\n      '/pets': {\n        get: {\n          'responses': {\n            200: {\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/Empty',\n                  },\n                },\n              },\n            },\n          },\n          'x-amazon-apigateway-integration': {\n            responses: {\n              default: {\n                statusCode: '200',\n              },\n            },\n            requestTemplates: {\n              'application/json': '{\"statusCode\": 200}',\n            },\n            passthroughBehavior: 'when_no_match',\n            type: 'mock',\n          },\n        },\n      },\n    },\n    components: {\n      schemas: {\n        Empty: {\n          title: 'Empty Schema',\n          type: 'object',\n        },\n      },\n    },\n  });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.ApiDefinition",
          "memberName": "fromInline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromInline"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n  apigateway.ApiDefinition.fromInline({\n    openapi: '3.0.2',\n    paths: {\n      '/pets': {\n        get: {\n          'responses': {\n            200: {\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/Empty',\n                  },\n                },\n              },\n            },\n          },\n          'x-amazon-apigateway-integration': {\n            responses: {\n              default: {\n                statusCode: '200',\n              },\n            },\n            requestTemplates: {\n              'application/json': '{\"statusCode\": 200}',\n            },\n            passthroughBehavior: 'when_no_match',\n            type: 'mock',\n          },\n        },\n      },\n    },\n    components: {\n      schemas: {\n        Empty: {\n          title: 'Empty Schema',\n          type: 'object',\n        },\n      },\n    },\n  });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 20,
        "193": 16,
        "194": 2,
        "196": 1,
        "226": 1,
        "281": 23
      },
      "fqnsFingerprint": "a930ea867d800919e2596056a016b4c4882d0fdd1d6012ca79664b22b2965687"
    },
    "d9abee2a020927deedf939e655d550957916829aaecd8879f054eaab53286362": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# inline_definition: Any\n\napi_definition_config = apigateway.ApiDefinitionConfig(\n    inline_definition=inline_definition,\n    s3_location=apigateway.ApiDefinitionS3Location(\n        bucket=\"bucket\",\n        key=\"key\",\n\n        # the properties below are optional\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar inlineDefinition;\n\nApiDefinitionConfig apiDefinitionConfig = new ApiDefinitionConfig {\n    InlineDefinition = inlineDefinition,\n    S3Location = new ApiDefinitionS3Location {\n        Bucket = \"bucket\",\n        Key = \"key\",\n\n        // the properties below are optional\n        Version = \"version\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject inlineDefinition;\n\nApiDefinitionConfig apiDefinitionConfig = ApiDefinitionConfig.builder()\n        .inlineDefinition(inlineDefinition)\n        .s3Location(ApiDefinitionS3Location.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n\n                // the properties below are optional\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const inlineDefinition: any;\nconst apiDefinitionConfig: apigateway.ApiDefinitionConfig = {\n  inlineDefinition: inlineDefinition,\n  s3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiDefinitionConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinitionConfig",
        "@aws-cdk/aws-apigateway.ApiDefinitionS3Location"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const inlineDefinition: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiDefinitionConfig: apigateway.ApiDefinitionConfig = {\n  inlineDefinition: inlineDefinition,\n  s3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d8c14ab81df7f610e27824b9273a182fb538971361501d54d6173de9157dd8c9"
    },
    "f2b748e64bfa31393a4153bd0ccd443a8cfc1b85a5862d073edcd9f64d5c0c34": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\napi_definition_s3_location = apigateway.ApiDefinitionS3Location(\n    bucket=\"bucket\",\n    key=\"key\",\n\n    # the properties below are optional\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nApiDefinitionS3Location apiDefinitionS3Location = new ApiDefinitionS3Location {\n    Bucket = \"bucket\",\n    Key = \"key\",\n\n    // the properties below are optional\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nApiDefinitionS3Location apiDefinitionS3Location = ApiDefinitionS3Location.builder()\n        .bucket(\"bucket\")\n        .key(\"key\")\n\n        // the properties below are optional\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst apiDefinitionS3Location: apigateway.ApiDefinitionS3Location = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiDefinitionS3Location"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinitionS3Location"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiDefinitionS3Location: apigateway.ApiDefinitionS3Location = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0ffb13cb5c751aea65a7af399b83cbf57b0c869d9f976335bc48785c2463f9f1"
    },
    "cd323548d73dc404ae4a6dc171e10f1256d523c29fb5626c5b52c6871a6b5591": {
      "translations": {
        "python": {
          "source": "imported_key = apigateway.ApiKey.from_api_key_id(self, \"imported-key\", \"<api-key-id>\")",
          "version": "2"
        },
        "csharp": {
          "source": "IApiKey importedKey = ApiKey.FromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "java": {
          "source": "IApiKey importedKey = ApiKey.fromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "$": {
          "source": "const importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKey",
        "@aws-cdk/aws-apigateway.ApiKey#fromApiKeyId",
        "@aws-cdk/aws-apigateway.IApiKey",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "11b2bf37ab67293d4c17686d53aee739a3d8e7208dee782149ef589812ec488d"
    },
    "33d4bc1a897437a7cf234c6cf7dea8a79a494ad2d049d4236bcedf296bccf542": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\nkey = api.add_api_key(\"ApiKey\",\n    api_key_name=\"myApiKey1\",\n    value=\"MyApiKeyThatIsAtLeast20Characters\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\nIApiKey key = api.AddApiKey(\"ApiKey\", new ApiKeyOptions {\n    ApiKeyName = \"myApiKey1\",\n    Value = \"MyApiKeyThatIsAtLeast20Characters\"\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\nIApiKey key = api.addApiKey(\"ApiKey\", ApiKeyOptions.builder()\n        .apiKeyName(\"myApiKey1\")\n        .value(\"MyApiKeyThatIsAtLeast20Characters\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiKeyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "351245f6c6830e43bd79fa93b813cc982094bbad2e463e09e970bb07438ce6c9"
    },
    "e2ce8f44511152d3b9965aeea08d222a15c6f21ae565cab256bef5aaa2acaac2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.core as cdk\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# rest_api: apigateway.RestApi\n\napi_key_props = apigateway.ApiKeyProps(\n    api_key_name=\"apiKeyName\",\n    customer_id=\"customerId\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    ),\n    description=\"description\",\n    enabled=False,\n    generate_distinct_id=False,\n    resources=[rest_api],\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nRestApi restApi;\nApiKeyProps apiKeyProps = new ApiKeyProps {\n    ApiKeyName = \"apiKeyName\",\n    CustomerId = \"customerId\",\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    },\n    Description = \"description\",\n    Enabled = false,\n    GenerateDistinctId = false,\n    Resources = new [] { restApi },\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.core.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nRestApi restApi;\n\nApiKeyProps apiKeyProps = ApiKeyProps.builder()\n        .apiKeyName(\"apiKeyName\")\n        .customerId(\"customerId\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .description(\"description\")\n        .enabled(false)\n        .generateDistinctId(false)\n        .resources(List.of(restApi))\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const restApi: apigateway.RestApi;\nconst apiKeyProps: apigateway.ApiKeyProps = {\n  apiKeyName: 'apiKeyName',\n  customerId: 'customerId',\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  resources: [restApi],\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKeyProps",
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#NONE",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IRequestValidator",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiKeyProps: apigateway.ApiKeyProps = {\n  apiKeyName: 'apiKeyName',\n  customerId: 'customerId',\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  resources: [restApi],\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 14,
        "75": 70,
        "91": 9,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 7,
        "193": 9,
        "194": 4,
        "196": 1,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 38,
        "290": 1
      },
      "fqnsFingerprint": "72cbd5538c5f4c1de11796d72c94d7b10547f805da2cf0d35a33621e06ca9b83"
    },
    "270217fd00367522b62586a638849646c5cd24aee78eae0ced8c25fe659cb650": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# grantable: iam.IGrantable\n# local_bundling: cdk.ILocalBundling\n\nasset_api_definition = apigateway.AssetApiDefinition(\"path\",\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    readers=[grantable],\n    source_hash=\"sourceHash\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nIGrantable grantable;\nILocalBundling localBundling;\nAssetApiDefinition assetApiDefinition = new AssetApiDefinition(\"path\", new AssetOptions {\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Readers = new [] { grantable },\n    SourceHash = \"sourceHash\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nIGrantable grantable;\nILocalBundling localBundling;\n\nAssetApiDefinition assetApiDefinition = AssetApiDefinition.Builder.create(\"path\")\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .readers(List.of(grantable))\n        .sourceHash(\"sourceHash\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetApiDefinition = new apigateway.AssetApiDefinition('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AssetApiDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-apigateway.AssetApiDefinition",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetApiDefinition = new apigateway.AssetApiDefinition('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 16,
        "75": 60,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 5,
        "193": 4,
        "194": 13,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "369d6515a097ab17e99eead804c974fe7a09c8ec813b0616c7868fa13797823b"
    },
    "86a134e0ba9d06aea7f20c31820c104d19e8b50f54b58bb27f1dde1ce7301a1b": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AuthorizationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "482ca140fdde024354755f392f8dca51f3e5fdcda6425ba1ab4e5933ae73dcc1"
    },
    "b3f88f01b299f38ee9ffa551f7c0ec3474a22c5c1f027921881802d9b847c704": {
      "translations": {
        "python": {
          "source": "get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AwsIntegration getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AwsIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AwsIntegration",
        "@aws-cdk/aws-apigateway.AwsIntegrationProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "500b84814f080d50846465a858310b8dc43ebdd703f7d33e3bee9d2d9e9cb0e6"
    },
    "dd071be1f34b0cf0f605d29b0c9eea62fbcc801d80cab9786d656e4d63efbda5": {
      "translations": {
        "python": {
          "source": "get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AwsIntegration getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AwsIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AwsIntegration",
        "@aws-cdk/aws-apigateway.AwsIntegrationProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "500b84814f080d50846465a858310b8dc43ebdd703f7d33e3bee9d2d9e9cb0e6"
    },
    "26cb46e1bddd79a4002c1a3e788f3ffe523d97db48fa0f285b5e3108bf9b3d70": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# domain_name: apigateway.DomainName\n# rest_api: apigateway.RestApi\n# stage: apigateway.Stage\n\nbase_path_mapping = apigateway.BasePathMapping(self, \"MyBasePathMapping\",\n    domain_name=domain_name,\n    rest_api=rest_api,\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    stage=stage\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nBasePathMapping basePathMapping = new BasePathMapping(this, \"MyBasePathMapping\", new BasePathMappingProps {\n    DomainName = domainName,\n    RestApi = restApi,\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    Stage = stage\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nBasePathMapping basePathMapping = BasePathMapping.Builder.create(this, \"MyBasePathMapping\")\n        .domainName(domainName)\n        .restApi(restApi)\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .stage(stage)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\nconst basePathMapping = new apigateway.BasePathMapping(this, 'MyBasePathMapping', {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.BasePathMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMapping",
        "@aws-cdk/aws-apigateway.BasePathMappingProps",
        "@aws-cdk/aws-apigateway.IDomainName",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basePathMapping = new apigateway.BasePathMapping(this, 'MyBasePathMapping', {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b0da171d3c515110f821b08cb683eca073300be809b78ec9cf2e4ae6fcb5caac"
    },
    "96a8fc350d4551d267e6e6ca19009921ac7a143f29e4ee6c01fcd03c66b916b1": {
      "translations": {
        "python": {
          "source": "# domain: apigateway.DomainName\n# api1: apigateway.RestApi\n# api2: apigateway.RestApi\n\n\ndomain.add_base_path_mapping(api1, base_path=\"go-to-api1\")\ndomain.add_base_path_mapping(api2, base_path=\"boom\")",
          "version": "2"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.AddBasePathMapping(api1, new BasePathMappingOptions { BasePath = \"go-to-api1\" });\ndomain.AddBasePathMapping(api2, new BasePathMappingOptions { BasePath = \"boom\" });",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.addBasePathMapping(api1, BasePathMappingOptions.builder().basePath(\"go-to-api1\").build());\ndomain.addBasePathMapping(api2, BasePathMappingOptions.builder().basePath(\"boom\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.BasePathMappingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingOptions",
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8cca9cc640d1e7b30fb049a7761eecf70a342cb4bb35eb35a082e0700e0e3710"
    },
    "73fdd0a0a99cecb748f5cb8931fe992c500744de0083a9f17cbda498790edc48": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# domain_name: apigateway.DomainName\n# rest_api: apigateway.RestApi\n# stage: apigateway.Stage\n\nbase_path_mapping_props = apigateway.BasePathMappingProps(\n    domain_name=domain_name,\n    rest_api=rest_api,\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    stage=stage\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nBasePathMappingProps basePathMappingProps = new BasePathMappingProps {\n    DomainName = domainName,\n    RestApi = restApi,\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    Stage = stage\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nBasePathMappingProps basePathMappingProps = BasePathMappingProps.builder()\n        .domainName(domainName)\n        .restApi(restApi)\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .stage(stage)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\nconst basePathMappingProps: apigateway.BasePathMappingProps = {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.BasePathMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingProps",
        "@aws-cdk/aws-apigateway.IDomainName",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.Stage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basePathMappingProps: apigateway.BasePathMappingProps = {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "616bdee835663ef2faa0f1491043961fa66f9f762714c2c00098699a6d2ca57b"
    },
    "57b5c8d71ae96e0641a1f1ed840ccfc0c1c630b5255ec860e70ef6ec0bcaa006": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_account = apigateway.CfnAccount(self, \"MyCfnAccount\",\n    cloud_watch_role_arn=\"cloudWatchRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnAccount cfnAccount = new CfnAccount(this, \"MyCfnAccount\", new CfnAccountProps {\n    CloudWatchRoleArn = \"cloudWatchRoleArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAccount cfnAccount = CfnAccount.Builder.create(this, \"MyCfnAccount\")\n        .cloudWatchRoleArn(\"cloudWatchRoleArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAccount = new apigateway.CfnAccount(this, 'MyCfnAccount', /* all optional props */ {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAccount"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAccount",
        "@aws-cdk/aws-apigateway.CfnAccountProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccount = new apigateway.CfnAccount(this, 'MyCfnAccount', /* all optional props */ {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b3542e0e8ddafe0b443124eb259bf1af72ec6c92d96b98b575c88dd2d842365d"
    },
    "87a356c7c2025acabee9d5bbf6ac01f66e69b9242604cd347f98b2c928abea58": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_account_props = apigateway.CfnAccountProps(\n    cloud_watch_role_arn=\"cloudWatchRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnAccountProps cfnAccountProps = new CfnAccountProps {\n    CloudWatchRoleArn = \"cloudWatchRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAccountProps cfnAccountProps = CfnAccountProps.builder()\n        .cloudWatchRoleArn(\"cloudWatchRoleArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAccountProps: apigateway.CfnAccountProps = {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAccountProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAccountProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccountProps: apigateway.CfnAccountProps = {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a282113b2974b50c7067cd5a471cbcbc5ec6a8c10623d33aa12e95222bd0f7e"
    },
    "f46978cb10e14b64594179d6f9aa442ef12f06beb3f4d043f8555f5275cf880f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_key = apigateway.CfnApiKey(self, \"MyCfnApiKey\",\n    customer_id=\"customerId\",\n    description=\"description\",\n    enabled=False,\n    generate_distinct_id=False,\n    name=\"name\",\n    stage_keys=[apigateway.CfnApiKey.StageKeyProperty(\n        rest_api_id=\"restApiId\",\n        stage_name=\"stageName\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnApiKey cfnApiKey = new CfnApiKey(this, \"MyCfnApiKey\", new CfnApiKeyProps {\n    CustomerId = \"customerId\",\n    Description = \"description\",\n    Enabled = false,\n    GenerateDistinctId = false,\n    Name = \"name\",\n    StageKeys = new [] { new StageKeyProperty {\n        RestApiId = \"restApiId\",\n        StageName = \"stageName\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Value = \"value\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiKey cfnApiKey = CfnApiKey.Builder.create(this, \"MyCfnApiKey\")\n        .customerId(\"customerId\")\n        .description(\"description\")\n        .enabled(false)\n        .generateDistinctId(false)\n        .name(\"name\")\n        .stageKeys(List.of(StageKeyProperty.builder()\n                .restApiId(\"restApiId\")\n                .stageName(\"stageName\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiKey = new apigateway.CfnApiKey(this, 'MyCfnApiKey', /* all optional props */ {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiKey",
        "@aws-cdk/aws-apigateway.CfnApiKeyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiKey = new apigateway.CfnApiKey(this, 'MyCfnApiKey', /* all optional props */ {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 16,
        "91": 2,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "b1a942250efc041cc0a712bd2d571803545b396200d7d13caff5277fc65a9611"
    },
    "8bbd3c3e532379b27dc2d39f233f03ad3cc4972a3996dd16cbebe4ed1a962169": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nstage_key_property = apigateway.CfnApiKey.StageKeyProperty(\n    rest_api_id=\"restApiId\",\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nStageKeyProperty stageKeyProperty = new StageKeyProperty {\n    RestApiId = \"restApiId\",\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nStageKeyProperty stageKeyProperty = StageKeyProperty.builder()\n        .restApiId(\"restApiId\")\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst stageKeyProperty: apigateway.CfnApiKey.StageKeyProperty = {\n  restApiId: 'restApiId',\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiKey.StageKeyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiKey.StageKeyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageKeyProperty: apigateway.CfnApiKey.StageKeyProperty = {\n  restApiId: 'restApiId',\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3dc080ef4123ce2c58d14c558fcf1d7732d51b05fa31a5cbd8107b59ca55ff71"
    },
    "95418c9f47a26016d8e400f9f3e5fe973de87e9de65f36297093d915df63a298": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_key_props = apigateway.CfnApiKeyProps(\n    customer_id=\"customerId\",\n    description=\"description\",\n    enabled=False,\n    generate_distinct_id=False,\n    name=\"name\",\n    stage_keys=[apigateway.CfnApiKey.StageKeyProperty(\n        rest_api_id=\"restApiId\",\n        stage_name=\"stageName\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnApiKeyProps cfnApiKeyProps = new CfnApiKeyProps {\n    CustomerId = \"customerId\",\n    Description = \"description\",\n    Enabled = false,\n    GenerateDistinctId = false,\n    Name = \"name\",\n    StageKeys = new [] { new StageKeyProperty {\n        RestApiId = \"restApiId\",\n        StageName = \"stageName\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiKeyProps cfnApiKeyProps = CfnApiKeyProps.builder()\n        .customerId(\"customerId\")\n        .description(\"description\")\n        .enabled(false)\n        .generateDistinctId(false)\n        .name(\"name\")\n        .stageKeys(List.of(StageKeyProperty.builder()\n                .restApiId(\"restApiId\")\n                .stageName(\"stageName\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiKeyProps: apigateway.CfnApiKeyProps = {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiKeyProps: apigateway.CfnApiKeyProps = {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "2120b9bc8210fc949e4cf4620d7c8b9a4dc58982145308b189a49e786b9cc7bc"
    },
    "792e35d491906dd0873e48cf8ce8e094ba746e01b8faba024e00e28e12be6ee4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_mapping_v2 = apigateway.CfnApiMappingV2(self, \"MyCfnApiMappingV2\",\n    api_id=\"apiId\",\n    domain_name=\"domainName\",\n    stage=\"stage\",\n\n    # the properties below are optional\n    api_mapping_key=\"apiMappingKey\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnApiMappingV2 cfnApiMappingV2 = new CfnApiMappingV2(this, \"MyCfnApiMappingV2\", new CfnApiMappingV2Props {\n    ApiId = \"apiId\",\n    DomainName = \"domainName\",\n    Stage = \"stage\",\n\n    // the properties below are optional\n    ApiMappingKey = \"apiMappingKey\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiMappingV2 cfnApiMappingV2 = CfnApiMappingV2.Builder.create(this, \"MyCfnApiMappingV2\")\n        .apiId(\"apiId\")\n        .domainName(\"domainName\")\n        .stage(\"stage\")\n\n        // the properties below are optional\n        .apiMappingKey(\"apiMappingKey\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiMappingV2 = new apigateway.CfnApiMappingV2(this, 'MyCfnApiMappingV2', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiMappingV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiMappingV2",
        "@aws-cdk/aws-apigateway.CfnApiMappingV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiMappingV2 = new apigateway.CfnApiMappingV2(this, 'MyCfnApiMappingV2', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6782a8457ef5707c93f7ed77ffdc91f17ae8b7ff009a70b6acf4230d6daf6a54"
    },
    "77ecf8ac4cf14a148f524aca91cad61635d2107665f86d68b2a7c29b40613242": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_mapping_v2_props = apigateway.CfnApiMappingV2Props(\n    api_id=\"apiId\",\n    domain_name=\"domainName\",\n    stage=\"stage\",\n\n    # the properties below are optional\n    api_mapping_key=\"apiMappingKey\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnApiMappingV2Props cfnApiMappingV2Props = new CfnApiMappingV2Props {\n    ApiId = \"apiId\",\n    DomainName = \"domainName\",\n    Stage = \"stage\",\n\n    // the properties below are optional\n    ApiMappingKey = \"apiMappingKey\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiMappingV2Props cfnApiMappingV2Props = CfnApiMappingV2Props.builder()\n        .apiId(\"apiId\")\n        .domainName(\"domainName\")\n        .stage(\"stage\")\n\n        // the properties below are optional\n        .apiMappingKey(\"apiMappingKey\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiMappingV2Props: apigateway.CfnApiMappingV2Props = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiMappingV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiMappingV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiMappingV2Props: apigateway.CfnApiMappingV2Props = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a192b17a4dd4d51ca31e774ade048b093e25e21bbc95029c2e7a7d2f862fbfda"
    },
    "d8ae14683fcb9707cbf7196dba877604fe14d77ea68fbf3506b47da75cf7f072": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# tags: Any\n\ncfn_api_v2 = apigateway.CfnApiV2(self, \"MyCfnApiV2\",\n    api_key_selection_expression=\"apiKeySelectionExpression\",\n    base_path=\"basePath\",\n    body=body,\n    body_s3_location=apigateway.CfnApiV2.BodyS3LocationProperty(\n        bucket=\"bucket\",\n        etag=\"etag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    cors_configuration=apigateway.CfnApiV2.CorsProperty(\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        allow_origins=[\"allowOrigins\"],\n        expose_headers=[\"exposeHeaders\"],\n        max_age=123\n    ),\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    disable_schema_validation=False,\n    fail_on_warnings=False,\n    name=\"name\",\n    protocol_type=\"protocolType\",\n    route_key=\"routeKey\",\n    route_selection_expression=\"routeSelectionExpression\",\n    tags=tags,\n    target=\"target\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar tags;\n\nCfnApiV2 cfnApiV2 = new CfnApiV2(this, \"MyCfnApiV2\", new CfnApiV2Props {\n    ApiKeySelectionExpression = \"apiKeySelectionExpression\",\n    BasePath = \"basePath\",\n    Body = body,\n    BodyS3Location = new BodyS3LocationProperty {\n        Bucket = \"bucket\",\n        Etag = \"etag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CorsConfiguration = new CorsProperty {\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        AllowOrigins = new [] { \"allowOrigins\" },\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = 123\n    },\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    DisableSchemaValidation = false,\n    FailOnWarnings = false,\n    Name = \"name\",\n    ProtocolType = \"protocolType\",\n    RouteKey = \"routeKey\",\n    RouteSelectionExpression = \"routeSelectionExpression\",\n    Tags = tags,\n    Target = \"target\",\n    Version = \"version\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject tags;\n\nCfnApiV2 cfnApiV2 = CfnApiV2.Builder.create(this, \"MyCfnApiV2\")\n        .apiKeySelectionExpression(\"apiKeySelectionExpression\")\n        .basePath(\"basePath\")\n        .body(body)\n        .bodyS3Location(BodyS3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .etag(\"etag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .corsConfiguration(CorsProperty.builder()\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .allowOrigins(List.of(\"allowOrigins\"))\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(123)\n                .build())\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .disableSchemaValidation(false)\n        .failOnWarnings(false)\n        .name(\"name\")\n        .protocolType(\"protocolType\")\n        .routeKey(\"routeKey\")\n        .routeSelectionExpression(\"routeSelectionExpression\")\n        .tags(tags)\n        .target(\"target\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\nconst cfnApiV2 = new apigateway.CfnApiV2(this, 'MyCfnApiV2', /* all optional props */ {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiV2",
        "@aws-cdk/aws-apigateway.CfnApiV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiV2 = new apigateway.CfnApiV2(this, 'MyCfnApiV2', /* all optional props */ {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 34,
        "91": 3,
        "104": 1,
        "125": 2,
        "130": 2,
        "192": 4,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "4ac4d0d019bfd34a6ae6a676922f90b6721e9675aedfc905f3e5377c426acecf"
    },
    "b5babaecdd9f40ff49e2ac04b9cca821325a2bb9e5d1db6fdeccc50e745c0eb4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nbody_s3_location_property = apigateway.CfnApiV2.BodyS3LocationProperty(\n    bucket=\"bucket\",\n    etag=\"etag\",\n    key=\"key\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nBodyS3LocationProperty bodyS3LocationProperty = new BodyS3LocationProperty {\n    Bucket = \"bucket\",\n    Etag = \"etag\",\n    Key = \"key\",\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nBodyS3LocationProperty bodyS3LocationProperty = BodyS3LocationProperty.builder()\n        .bucket(\"bucket\")\n        .etag(\"etag\")\n        .key(\"key\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst bodyS3LocationProperty: apigateway.CfnApiV2.BodyS3LocationProperty = {\n  bucket: 'bucket',\n  etag: 'etag',\n  key: 'key',\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiV2.BodyS3LocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiV2.BodyS3LocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bodyS3LocationProperty: apigateway.CfnApiV2.BodyS3LocationProperty = {\n  bucket: 'bucket',\n  etag: 'etag',\n  key: 'key',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b3b3a27f40ee02b3a33d9855ec1acbbe2611541ffa1f44c36ab31a0c286b5a24"
    },
    "61b30d520c86c8dd7e71708bb8af6fc3a517c5ed48c26b192c666f596984de8e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncors_property = apigateway.CfnApiV2.CorsProperty(\n    allow_credentials=False,\n    allow_headers=[\"allowHeaders\"],\n    allow_methods=[\"allowMethods\"],\n    allow_origins=[\"allowOrigins\"],\n    expose_headers=[\"exposeHeaders\"],\n    max_age=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCorsProperty corsProperty = new CorsProperty {\n    AllowCredentials = false,\n    AllowHeaders = new [] { \"allowHeaders\" },\n    AllowMethods = new [] { \"allowMethods\" },\n    AllowOrigins = new [] { \"allowOrigins\" },\n    ExposeHeaders = new [] { \"exposeHeaders\" },\n    MaxAge = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCorsProperty corsProperty = CorsProperty.builder()\n        .allowCredentials(false)\n        .allowHeaders(List.of(\"allowHeaders\"))\n        .allowMethods(List.of(\"allowMethods\"))\n        .allowOrigins(List.of(\"allowOrigins\"))\n        .exposeHeaders(List.of(\"exposeHeaders\"))\n        .maxAge(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst corsProperty: apigateway.CfnApiV2.CorsProperty = {\n  allowCredentials: false,\n  allowHeaders: ['allowHeaders'],\n  allowMethods: ['allowMethods'],\n  allowOrigins: ['allowOrigins'],\n  exposeHeaders: ['exposeHeaders'],\n  maxAge: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiV2.CorsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiV2.CorsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst corsProperty: apigateway.CfnApiV2.CorsProperty = {\n  allowCredentials: false,\n  allowHeaders: ['allowHeaders'],\n  allowMethods: ['allowMethods'],\n  allowOrigins: ['allowOrigins'],\n  exposeHeaders: ['exposeHeaders'],\n  maxAge: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 11,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 4,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "16641e30e6292db816ba0fbf692c2e70511f336bce58d9739279320aa7d92e10"
    },
    "a6290da449c6aa7fd25921df026e4a7a8cfadf6cc30b7040de20b9e3eea201a3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# tags: Any\n\ncfn_api_v2_props = apigateway.CfnApiV2Props(\n    api_key_selection_expression=\"apiKeySelectionExpression\",\n    base_path=\"basePath\",\n    body=body,\n    body_s3_location=apigateway.CfnApiV2.BodyS3LocationProperty(\n        bucket=\"bucket\",\n        etag=\"etag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    cors_configuration=apigateway.CfnApiV2.CorsProperty(\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        allow_origins=[\"allowOrigins\"],\n        expose_headers=[\"exposeHeaders\"],\n        max_age=123\n    ),\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    disable_schema_validation=False,\n    fail_on_warnings=False,\n    name=\"name\",\n    protocol_type=\"protocolType\",\n    route_key=\"routeKey\",\n    route_selection_expression=\"routeSelectionExpression\",\n    tags=tags,\n    target=\"target\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar tags;\n\nCfnApiV2Props cfnApiV2Props = new CfnApiV2Props {\n    ApiKeySelectionExpression = \"apiKeySelectionExpression\",\n    BasePath = \"basePath\",\n    Body = body,\n    BodyS3Location = new BodyS3LocationProperty {\n        Bucket = \"bucket\",\n        Etag = \"etag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CorsConfiguration = new CorsProperty {\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        AllowOrigins = new [] { \"allowOrigins\" },\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = 123\n    },\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    DisableSchemaValidation = false,\n    FailOnWarnings = false,\n    Name = \"name\",\n    ProtocolType = \"protocolType\",\n    RouteKey = \"routeKey\",\n    RouteSelectionExpression = \"routeSelectionExpression\",\n    Tags = tags,\n    Target = \"target\",\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject tags;\n\nCfnApiV2Props cfnApiV2Props = CfnApiV2Props.builder()\n        .apiKeySelectionExpression(\"apiKeySelectionExpression\")\n        .basePath(\"basePath\")\n        .body(body)\n        .bodyS3Location(BodyS3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .etag(\"etag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .corsConfiguration(CorsProperty.builder()\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .allowOrigins(List.of(\"allowOrigins\"))\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(123)\n                .build())\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .disableSchemaValidation(false)\n        .failOnWarnings(false)\n        .name(\"name\")\n        .protocolType(\"protocolType\")\n        .routeKey(\"routeKey\")\n        .routeSelectionExpression(\"routeSelectionExpression\")\n        .tags(tags)\n        .target(\"target\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\nconst cfnApiV2Props: apigateway.CfnApiV2Props = {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnApiV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnApiV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiV2Props: apigateway.CfnApiV2Props = {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 19,
        "75": 34,
        "91": 3,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "046e96ed9ce7ce24a456cc47478e0cea151f33b9e2a6e8d4f9c1c7773f38952f"
    },
    "ebf35f54ba4573e644cbb9c48546dc9097703db2c7797cbf22f9806936997a8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer = apigateway.CfnAuthorizer(self, \"MyCfnAuthorizer\",\n    name=\"name\",\n    rest_api_id=\"restApiId\",\n    type=\"type\",\n\n    # the properties below are optional\n    authorizer_credentials=\"authorizerCredentials\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    auth_type=\"authType\",\n    identity_source=\"identitySource\",\n    identity_validation_expression=\"identityValidationExpression\",\n    provider_arns=[\"providerArns\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnAuthorizer cfnAuthorizer = new CfnAuthorizer(this, \"MyCfnAuthorizer\", new CfnAuthorizerProps {\n    Name = \"name\",\n    RestApiId = \"restApiId\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AuthorizerCredentials = \"authorizerCredentials\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    AuthType = \"authType\",\n    IdentitySource = \"identitySource\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    ProviderArns = new [] { \"providerArns\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizer cfnAuthorizer = CfnAuthorizer.Builder.create(this, \"MyCfnAuthorizer\")\n        .name(\"name\")\n        .restApiId(\"restApiId\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .authorizerCredentials(\"authorizerCredentials\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .authType(\"authType\")\n        .identitySource(\"identitySource\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .providerArns(List.of(\"providerArns\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizer = new apigateway.CfnAuthorizer(this, 'MyCfnAuthorizer', {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAuthorizer",
        "@aws-cdk/aws-apigateway.CfnAuthorizerProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizer = new apigateway.CfnAuthorizer(this, 'MyCfnAuthorizer', {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a32cf544214f166d656d26aab0967525ef79370e831c5f39d725614e429df904"
    },
    "6287d0eaf0536cceea7e3f10b96f2f7ce685a0a33db1c4323924262bec14d404": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer_props = apigateway.CfnAuthorizerProps(\n    name=\"name\",\n    rest_api_id=\"restApiId\",\n    type=\"type\",\n\n    # the properties below are optional\n    authorizer_credentials=\"authorizerCredentials\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    auth_type=\"authType\",\n    identity_source=\"identitySource\",\n    identity_validation_expression=\"identityValidationExpression\",\n    provider_arns=[\"providerArns\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnAuthorizerProps cfnAuthorizerProps = new CfnAuthorizerProps {\n    Name = \"name\",\n    RestApiId = \"restApiId\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AuthorizerCredentials = \"authorizerCredentials\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    AuthType = \"authType\",\n    IdentitySource = \"identitySource\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    ProviderArns = new [] { \"providerArns\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizerProps cfnAuthorizerProps = CfnAuthorizerProps.builder()\n        .name(\"name\")\n        .restApiId(\"restApiId\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .authorizerCredentials(\"authorizerCredentials\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .authType(\"authType\")\n        .identitySource(\"identitySource\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .providerArns(List.of(\"providerArns\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizerProps: apigateway.CfnAuthorizerProps = {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAuthorizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizerProps: apigateway.CfnAuthorizerProps = {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "2171094f05dd08a0132199a68928556a927a6caa0520bcf22a829488ddf9cfcd"
    },
    "689e2cdcac358c9df83cc95bbfe43ef030c9021088f2db3f9b807e7baaaf4552": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer_v2 = apigateway.CfnAuthorizerV2(self, \"MyCfnAuthorizerV2\",\n    api_id=\"apiId\",\n    authorizer_type=\"authorizerType\",\n    identity_source=[\"identitySource\"],\n    name=\"name\",\n\n    # the properties below are optional\n    authorizer_credentials_arn=\"authorizerCredentialsArn\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    identity_validation_expression=\"identityValidationExpression\",\n    jwt_configuration=apigateway.CfnAuthorizerV2.JWTConfigurationProperty(\n        audience=[\"audience\"],\n        issuer=\"issuer\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnAuthorizerV2 cfnAuthorizerV2 = new CfnAuthorizerV2(this, \"MyCfnAuthorizerV2\", new CfnAuthorizerV2Props {\n    ApiId = \"apiId\",\n    AuthorizerType = \"authorizerType\",\n    IdentitySource = new [] { \"identitySource\" },\n    Name = \"name\",\n\n    // the properties below are optional\n    AuthorizerCredentialsArn = \"authorizerCredentialsArn\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    JwtConfiguration = new JWTConfigurationProperty {\n        Audience = new [] { \"audience\" },\n        Issuer = \"issuer\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizerV2 cfnAuthorizerV2 = CfnAuthorizerV2.Builder.create(this, \"MyCfnAuthorizerV2\")\n        .apiId(\"apiId\")\n        .authorizerType(\"authorizerType\")\n        .identitySource(List.of(\"identitySource\"))\n        .name(\"name\")\n\n        // the properties below are optional\n        .authorizerCredentialsArn(\"authorizerCredentialsArn\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .jwtConfiguration(JWTConfigurationProperty.builder()\n                .audience(List.of(\"audience\"))\n                .issuer(\"issuer\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizerV2 = new apigateway.CfnAuthorizerV2(this, 'MyCfnAuthorizerV2', {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAuthorizerV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAuthorizerV2",
        "@aws-cdk/aws-apigateway.CfnAuthorizerV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizerV2 = new apigateway.CfnAuthorizerV2(this, 'MyCfnAuthorizerV2', {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 15,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "341ad839befe559b1a2e1e63039f9f0a0dfd05da145347a466fad875331b1d74"
    },
    "8fe7e477b874a6223b281a311869d437acbbaa74351095e8cfe03c39ba040b67": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nj_wTConfiguration_property = apigateway.CfnAuthorizerV2.JWTConfigurationProperty(\n    audience=[\"audience\"],\n    issuer=\"issuer\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nJWTConfigurationProperty jWTConfigurationProperty = new JWTConfigurationProperty {\n    Audience = new [] { \"audience\" },\n    Issuer = \"issuer\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nJWTConfigurationProperty jWTConfigurationProperty = JWTConfigurationProperty.builder()\n        .audience(List.of(\"audience\"))\n        .issuer(\"issuer\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst jWTConfigurationProperty: apigateway.CfnAuthorizerV2.JWTConfigurationProperty = {\n  audience: ['audience'],\n  issuer: 'issuer',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAuthorizerV2.JWTConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAuthorizerV2.JWTConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst jWTConfigurationProperty: apigateway.CfnAuthorizerV2.JWTConfigurationProperty = {\n  audience: ['audience'],\n  issuer: 'issuer',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fbefe051abd1caf55c0754fb0465919c3fb855481420268d50960edc4310d659"
    },
    "b9bf3e6fc973ceb04636f3f7473b7ae55e83b391a6e0d130e39323e7e4a03c02": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer_v2_props = apigateway.CfnAuthorizerV2Props(\n    api_id=\"apiId\",\n    authorizer_type=\"authorizerType\",\n    identity_source=[\"identitySource\"],\n    name=\"name\",\n\n    # the properties below are optional\n    authorizer_credentials_arn=\"authorizerCredentialsArn\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    identity_validation_expression=\"identityValidationExpression\",\n    jwt_configuration=apigateway.CfnAuthorizerV2.JWTConfigurationProperty(\n        audience=[\"audience\"],\n        issuer=\"issuer\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnAuthorizerV2Props cfnAuthorizerV2Props = new CfnAuthorizerV2Props {\n    ApiId = \"apiId\",\n    AuthorizerType = \"authorizerType\",\n    IdentitySource = new [] { \"identitySource\" },\n    Name = \"name\",\n\n    // the properties below are optional\n    AuthorizerCredentialsArn = \"authorizerCredentialsArn\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    JwtConfiguration = new JWTConfigurationProperty {\n        Audience = new [] { \"audience\" },\n        Issuer = \"issuer\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizerV2Props cfnAuthorizerV2Props = CfnAuthorizerV2Props.builder()\n        .apiId(\"apiId\")\n        .authorizerType(\"authorizerType\")\n        .identitySource(List.of(\"identitySource\"))\n        .name(\"name\")\n\n        // the properties below are optional\n        .authorizerCredentialsArn(\"authorizerCredentialsArn\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .jwtConfiguration(JWTConfigurationProperty.builder()\n                .audience(List.of(\"audience\"))\n                .issuer(\"issuer\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizerV2Props: apigateway.CfnAuthorizerV2Props = {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnAuthorizerV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnAuthorizerV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizerV2Props: apigateway.CfnAuthorizerV2Props = {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 15,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "67eee10f9411b4c613cba3dab640728c98440857f1a71b27e6cb969b7f2fa565"
    },
    "70c08c11b8e83cbb6d997c67a9f0809dd4195cc35debe9496821e3e978abba2e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_base_path_mapping = apigateway.CfnBasePathMapping(self, \"MyCfnBasePathMapping\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    rest_api_id=\"restApiId\",\n    stage=\"stage\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnBasePathMapping cfnBasePathMapping = new CfnBasePathMapping(this, \"MyCfnBasePathMapping\", new CfnBasePathMappingProps {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    RestApiId = \"restApiId\",\n    Stage = \"stage\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnBasePathMapping cfnBasePathMapping = CfnBasePathMapping.Builder.create(this, \"MyCfnBasePathMapping\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .restApiId(\"restApiId\")\n        .stage(\"stage\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnBasePathMapping = new apigateway.CfnBasePathMapping(this, 'MyCfnBasePathMapping', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  restApiId: 'restApiId',\n  stage: 'stage',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnBasePathMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnBasePathMapping",
        "@aws-cdk/aws-apigateway.CfnBasePathMappingProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnBasePathMapping = new apigateway.CfnBasePathMapping(this, 'MyCfnBasePathMapping', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  restApiId: 'restApiId',\n  stage: 'stage',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "28df7ccdc384d2d9ee8ae9548d13d0b1b1f680ce91e32c318b6380993e469acf"
    },
    "808a55dee9eeb59eecb1c73cfb2bcf696ceda848abf4b78383cab2c6d4e3e63d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_base_path_mapping_props = apigateway.CfnBasePathMappingProps(\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    rest_api_id=\"restApiId\",\n    stage=\"stage\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnBasePathMappingProps cfnBasePathMappingProps = new CfnBasePathMappingProps {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    RestApiId = \"restApiId\",\n    Stage = \"stage\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnBasePathMappingProps cfnBasePathMappingProps = CfnBasePathMappingProps.builder()\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .restApiId(\"restApiId\")\n        .stage(\"stage\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnBasePathMappingProps: apigateway.CfnBasePathMappingProps = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  restApiId: 'restApiId',\n  stage: 'stage',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnBasePathMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnBasePathMappingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnBasePathMappingProps: apigateway.CfnBasePathMappingProps = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  restApiId: 'restApiId',\n  stage: 'stage',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "abd5f4e9335b4ddbbac743b09d4510146ea74d458f28f23fbb17bb15e46e2f39"
    },
    "57b0b42172d125b5f5fb97c3b9d5725b3c9c5f13e94c40e8c4b21907168ebe4e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_client_certificate = apigateway.CfnClientCertificate(self, \"MyCfnClientCertificate\",\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnClientCertificate cfnClientCertificate = new CfnClientCertificate(this, \"MyCfnClientCertificate\", new CfnClientCertificateProps {\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnClientCertificate cfnClientCertificate = CfnClientCertificate.Builder.create(this, \"MyCfnClientCertificate\")\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnClientCertificate = new apigateway.CfnClientCertificate(this, 'MyCfnClientCertificate', /* all optional props */ {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnClientCertificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnClientCertificate",
        "@aws-cdk/aws-apigateway.CfnClientCertificateProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientCertificate = new apigateway.CfnClientCertificate(this, 'MyCfnClientCertificate', /* all optional props */ {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "693891916a2b02447b0145a0553223cb2c5e2e84c2e19e8789cf3e640ad20dfa"
    },
    "75423abd877843a73aa50b27e566077005c0342cf582675c3105e03ab49d648a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_client_certificate_props = apigateway.CfnClientCertificateProps(\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnClientCertificateProps cfnClientCertificateProps = new CfnClientCertificateProps {\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnClientCertificateProps cfnClientCertificateProps = CfnClientCertificateProps.builder()\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnClientCertificateProps: apigateway.CfnClientCertificateProps = {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnClientCertificateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnClientCertificateProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientCertificateProps: apigateway.CfnClientCertificateProps = {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "878675bfe8469d5483005c3f6b81e264f7c5d20220d84e2415f63c5af7d61a8a"
    },
    "415dd6b488a4bc1ea24d0d65f390f7eadafd45c2e7199a3c3911ad0aad027b96": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment = apigateway.CfnDeployment(self, \"MyCfnDeployment\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    deployment_canary_settings=apigateway.CfnDeployment.DeploymentCanarySettingsProperty(\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    description=\"description\",\n    stage_description=apigateway.CfnDeployment.StageDescriptionProperty(\n        access_log_setting=apigateway.CfnDeployment.AccessLogSettingProperty(\n            destination_arn=\"destinationArn\",\n            format=\"format\"\n        ),\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        canary_setting=apigateway.CfnDeployment.CanarySettingProperty(\n            percent_traffic=123,\n            stage_variable_overrides={\n                \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n            },\n            use_stage_cache=False\n        ),\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=\"loggingLevel\",\n        method_settings=[apigateway.CfnDeployment.MethodSettingProperty(\n            cache_data_encrypted=False,\n            cache_ttl_in_seconds=123,\n            caching_enabled=False,\n            data_trace_enabled=False,\n            http_method=\"httpMethod\",\n            logging_level=\"loggingLevel\",\n            metrics_enabled=False,\n            resource_path=\"resourcePath\",\n            throttling_burst_limit=123,\n            throttling_rate_limit=123\n        )],\n        metrics_enabled=False,\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )],\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDeployment cfnDeployment = new CfnDeployment(this, \"MyCfnDeployment\", new CfnDeploymentProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    DeploymentCanarySettings = new DeploymentCanarySettingsProperty {\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    Description = \"description\",\n    StageDescription = new StageDescriptionProperty {\n        AccessLogSetting = new AccessLogSettingProperty {\n            DestinationArn = \"destinationArn\",\n            Format = \"format\"\n        },\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        CanarySetting = new CanarySettingProperty {\n            PercentTraffic = 123,\n            StageVariableOverrides = new Dictionary<string, string> {\n                { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n            },\n            UseStageCache = false\n        },\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = \"loggingLevel\",\n        MethodSettings = new [] { new MethodSettingProperty {\n            CacheDataEncrypted = false,\n            CacheTtlInSeconds = 123,\n            CachingEnabled = false,\n            DataTraceEnabled = false,\n            HttpMethod = \"httpMethod\",\n            LoggingLevel = \"loggingLevel\",\n            MetricsEnabled = false,\n            ResourcePath = \"resourcePath\",\n            ThrottlingBurstLimit = 123,\n            ThrottlingRateLimit = 123\n        } },\n        MetricsEnabled = false,\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    StageName = \"stageName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeployment cfnDeployment = CfnDeployment.Builder.create(this, \"MyCfnDeployment\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .deploymentCanarySettings(DeploymentCanarySettingsProperty.builder()\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .description(\"description\")\n        .stageDescription(StageDescriptionProperty.builder()\n                .accessLogSetting(AccessLogSettingProperty.builder()\n                        .destinationArn(\"destinationArn\")\n                        .format(\"format\")\n                        .build())\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .canarySetting(CanarySettingProperty.builder()\n                        .percentTraffic(123)\n                        .stageVariableOverrides(Map.of(\n                                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                        .useStageCache(false)\n                        .build())\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(\"loggingLevel\")\n                .methodSettings(List.of(MethodSettingProperty.builder()\n                        .cacheDataEncrypted(false)\n                        .cacheTtlInSeconds(123)\n                        .cachingEnabled(false)\n                        .dataTraceEnabled(false)\n                        .httpMethod(\"httpMethod\")\n                        .loggingLevel(\"loggingLevel\")\n                        .metricsEnabled(false)\n                        .resourcePath(\"resourcePath\")\n                        .throttlingBurstLimit(123)\n                        .throttlingRateLimit(123)\n                        .build()))\n                .metricsEnabled(false)\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeployment = new apigateway.CfnDeployment(this, 'MyCfnDeployment', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeployment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeployment",
        "@aws-cdk/aws-apigateway.CfnDeploymentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeployment = new apigateway.CfnDeployment(this, 'MyCfnDeployment', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 20,
        "75": 51,
        "91": 12,
        "104": 1,
        "192": 2,
        "193": 10,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 47,
        "290": 1
      },
      "fqnsFingerprint": "c426cb9cf3238a35e57f4beb8dabec18d19eee1411c7fc1aa93191cd9c69c694"
    },
    "89c572a54b436ba4c867b7f9337a5c7fdac1e8b6be9d305b3dcba080aa098746": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_setting_property = apigateway.CfnDeployment.AccessLogSettingProperty(\n    destination_arn=\"destinationArn\",\n    format=\"format\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nAccessLogSettingProperty accessLogSettingProperty = new AccessLogSettingProperty {\n    DestinationArn = \"destinationArn\",\n    Format = \"format\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogSettingProperty accessLogSettingProperty = AccessLogSettingProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .format(\"format\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogSettingProperty: apigateway.CfnDeployment.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeployment.AccessLogSettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeployment.AccessLogSettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogSettingProperty: apigateway.CfnDeployment.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bdbc7e0ac9c8ae94c9b7cea087c97b2e54d7102a9b7b6f6787941b7d7f1b9756"
    },
    "3667462c0c0d4b20b3e85e8828fe353a1c370646bff508988e5d2a15e83cec4c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncanary_setting_property = apigateway.CfnDeployment.CanarySettingProperty(\n    percent_traffic=123,\n    stage_variable_overrides={\n        \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n    },\n    use_stage_cache=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCanarySettingProperty canarySettingProperty = new CanarySettingProperty {\n    PercentTraffic = 123,\n    StageVariableOverrides = new Dictionary<string, string> {\n        { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n    },\n    UseStageCache = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCanarySettingProperty canarySettingProperty = CanarySettingProperty.builder()\n        .percentTraffic(123)\n        .stageVariableOverrides(Map.of(\n                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n        .useStageCache(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst canarySettingProperty: apigateway.CfnDeployment.CanarySettingProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeployment.CanarySettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeployment.CanarySettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst canarySettingProperty: apigateway.CfnDeployment.CanarySettingProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 9,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "38e1e1349357288fd3f1db1038c485e0f03f1f613b3d0b991906bb734d9ac80e"
    },
    "719137405fbedc31655d6fadb099bfb6ad1b0e55f72843362fc59792b01b4f00": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ndeployment_canary_settings_property = apigateway.CfnDeployment.DeploymentCanarySettingsProperty(\n    percent_traffic=123,\n    stage_variable_overrides={\n        \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n    },\n    use_stage_cache=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDeploymentCanarySettingsProperty deploymentCanarySettingsProperty = new DeploymentCanarySettingsProperty {\n    PercentTraffic = 123,\n    StageVariableOverrides = new Dictionary<string, string> {\n        { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n    },\n    UseStageCache = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDeploymentCanarySettingsProperty deploymentCanarySettingsProperty = DeploymentCanarySettingsProperty.builder()\n        .percentTraffic(123)\n        .stageVariableOverrides(Map.of(\n                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n        .useStageCache(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst deploymentCanarySettingsProperty: apigateway.CfnDeployment.DeploymentCanarySettingsProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeployment.DeploymentCanarySettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeployment.DeploymentCanarySettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentCanarySettingsProperty: apigateway.CfnDeployment.DeploymentCanarySettingsProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 9,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "dda845820b2f9e9cd53af0db65bc38a4e2036261593e3920e1940a00e43d5dc0"
    },
    "909d2424a6afad912e467a36ba73c57dc8b1016b236324be48a04f76e3242ac2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmethod_setting_property = apigateway.CfnDeployment.MethodSettingProperty(\n    cache_data_encrypted=False,\n    cache_ttl_in_seconds=123,\n    caching_enabled=False,\n    data_trace_enabled=False,\n    http_method=\"httpMethod\",\n    logging_level=\"loggingLevel\",\n    metrics_enabled=False,\n    resource_path=\"resourcePath\",\n    throttling_burst_limit=123,\n    throttling_rate_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nMethodSettingProperty methodSettingProperty = new MethodSettingProperty {\n    CacheDataEncrypted = false,\n    CacheTtlInSeconds = 123,\n    CachingEnabled = false,\n    DataTraceEnabled = false,\n    HttpMethod = \"httpMethod\",\n    LoggingLevel = \"loggingLevel\",\n    MetricsEnabled = false,\n    ResourcePath = \"resourcePath\",\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethodSettingProperty methodSettingProperty = MethodSettingProperty.builder()\n        .cacheDataEncrypted(false)\n        .cacheTtlInSeconds(123)\n        .cachingEnabled(false)\n        .dataTraceEnabled(false)\n        .httpMethod(\"httpMethod\")\n        .loggingLevel(\"loggingLevel\")\n        .metricsEnabled(false)\n        .resourcePath(\"resourcePath\")\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst methodSettingProperty: apigateway.CfnDeployment.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeployment.MethodSettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeployment.MethodSettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodSettingProperty: apigateway.CfnDeployment.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 15,
        "91": 4,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "c21b4b171ed10ac171a40eadf8d6a42d3ead8161413917d3c969725fea916273"
    },
    "f8fc88b77205c9c5b509ff1e453e8d50f3c9317550df2c9ded3dcc0db403bacc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nstage_description_property = apigateway.CfnDeployment.StageDescriptionProperty(\n    access_log_setting=apigateway.CfnDeployment.AccessLogSettingProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    cache_cluster_enabled=False,\n    cache_cluster_size=\"cacheClusterSize\",\n    cache_data_encrypted=False,\n    cache_ttl_in_seconds=123,\n    caching_enabled=False,\n    canary_setting=apigateway.CfnDeployment.CanarySettingProperty(\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    client_certificate_id=\"clientCertificateId\",\n    data_trace_enabled=False,\n    description=\"description\",\n    documentation_version=\"documentationVersion\",\n    logging_level=\"loggingLevel\",\n    method_settings=[apigateway.CfnDeployment.MethodSettingProperty(\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        data_trace_enabled=False,\n        http_method=\"httpMethod\",\n        logging_level=\"loggingLevel\",\n        metrics_enabled=False,\n        resource_path=\"resourcePath\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    )],\n    metrics_enabled=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throttling_burst_limit=123,\n    throttling_rate_limit=123,\n    tracing_enabled=False,\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nStageDescriptionProperty stageDescriptionProperty = new StageDescriptionProperty {\n    AccessLogSetting = new AccessLogSettingProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    CacheClusterEnabled = false,\n    CacheClusterSize = \"cacheClusterSize\",\n    CacheDataEncrypted = false,\n    CacheTtlInSeconds = 123,\n    CachingEnabled = false,\n    CanarySetting = new CanarySettingProperty {\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    ClientCertificateId = \"clientCertificateId\",\n    DataTraceEnabled = false,\n    Description = \"description\",\n    DocumentationVersion = \"documentationVersion\",\n    LoggingLevel = \"loggingLevel\",\n    MethodSettings = new [] { new MethodSettingProperty {\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        DataTraceEnabled = false,\n        HttpMethod = \"httpMethod\",\n        LoggingLevel = \"loggingLevel\",\n        MetricsEnabled = false,\n        ResourcePath = \"resourcePath\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    } },\n    MetricsEnabled = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123,\n    TracingEnabled = false,\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nStageDescriptionProperty stageDescriptionProperty = StageDescriptionProperty.builder()\n        .accessLogSetting(AccessLogSettingProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .cacheClusterEnabled(false)\n        .cacheClusterSize(\"cacheClusterSize\")\n        .cacheDataEncrypted(false)\n        .cacheTtlInSeconds(123)\n        .cachingEnabled(false)\n        .canarySetting(CanarySettingProperty.builder()\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .clientCertificateId(\"clientCertificateId\")\n        .dataTraceEnabled(false)\n        .description(\"description\")\n        .documentationVersion(\"documentationVersion\")\n        .loggingLevel(\"loggingLevel\")\n        .methodSettings(List.of(MethodSettingProperty.builder()\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .dataTraceEnabled(false)\n                .httpMethod(\"httpMethod\")\n                .loggingLevel(\"loggingLevel\")\n                .metricsEnabled(false)\n                .resourcePath(\"resourcePath\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build()))\n        .metricsEnabled(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .tracingEnabled(false)\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst stageDescriptionProperty: apigateway.CfnDeployment.StageDescriptionProperty = {\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  canarySetting: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  dataTraceEnabled: false,\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  loggingLevel: 'loggingLevel',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  metricsEnabled: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeployment.StageDescriptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeployment.StageDescriptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageDescriptionProperty: apigateway.CfnDeployment.StageDescriptionProperty = {\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  canarySetting: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  dataTraceEnabled: false,\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  loggingLevel: 'loggingLevel',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  metricsEnabled: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 15,
        "75": 43,
        "91": 11,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 38,
        "290": 1
      },
      "fqnsFingerprint": "f6a8c3d324259ebf3cb141e1f7e85571755bf7e9eef83df29d14b87a4427deeb"
    },
    "f21bce27087393626f6667a4c3c41ebe658779acd79036f1e51d0f96116e8b7f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment_props = apigateway.CfnDeploymentProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    deployment_canary_settings=apigateway.CfnDeployment.DeploymentCanarySettingsProperty(\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    description=\"description\",\n    stage_description=apigateway.CfnDeployment.StageDescriptionProperty(\n        access_log_setting=apigateway.CfnDeployment.AccessLogSettingProperty(\n            destination_arn=\"destinationArn\",\n            format=\"format\"\n        ),\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        canary_setting=apigateway.CfnDeployment.CanarySettingProperty(\n            percent_traffic=123,\n            stage_variable_overrides={\n                \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n            },\n            use_stage_cache=False\n        ),\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=\"loggingLevel\",\n        method_settings=[apigateway.CfnDeployment.MethodSettingProperty(\n            cache_data_encrypted=False,\n            cache_ttl_in_seconds=123,\n            caching_enabled=False,\n            data_trace_enabled=False,\n            http_method=\"httpMethod\",\n            logging_level=\"loggingLevel\",\n            metrics_enabled=False,\n            resource_path=\"resourcePath\",\n            throttling_burst_limit=123,\n            throttling_rate_limit=123\n        )],\n        metrics_enabled=False,\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )],\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDeploymentProps cfnDeploymentProps = new CfnDeploymentProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    DeploymentCanarySettings = new DeploymentCanarySettingsProperty {\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    Description = \"description\",\n    StageDescription = new StageDescriptionProperty {\n        AccessLogSetting = new AccessLogSettingProperty {\n            DestinationArn = \"destinationArn\",\n            Format = \"format\"\n        },\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        CanarySetting = new CanarySettingProperty {\n            PercentTraffic = 123,\n            StageVariableOverrides = new Dictionary<string, string> {\n                { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n            },\n            UseStageCache = false\n        },\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = \"loggingLevel\",\n        MethodSettings = new [] { new MethodSettingProperty {\n            CacheDataEncrypted = false,\n            CacheTtlInSeconds = 123,\n            CachingEnabled = false,\n            DataTraceEnabled = false,\n            HttpMethod = \"httpMethod\",\n            LoggingLevel = \"loggingLevel\",\n            MetricsEnabled = false,\n            ResourcePath = \"resourcePath\",\n            ThrottlingBurstLimit = 123,\n            ThrottlingRateLimit = 123\n        } },\n        MetricsEnabled = false,\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeploymentProps cfnDeploymentProps = CfnDeploymentProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .deploymentCanarySettings(DeploymentCanarySettingsProperty.builder()\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .description(\"description\")\n        .stageDescription(StageDescriptionProperty.builder()\n                .accessLogSetting(AccessLogSettingProperty.builder()\n                        .destinationArn(\"destinationArn\")\n                        .format(\"format\")\n                        .build())\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .canarySetting(CanarySettingProperty.builder()\n                        .percentTraffic(123)\n                        .stageVariableOverrides(Map.of(\n                                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                        .useStageCache(false)\n                        .build())\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(\"loggingLevel\")\n                .methodSettings(List.of(MethodSettingProperty.builder()\n                        .cacheDataEncrypted(false)\n                        .cacheTtlInSeconds(123)\n                        .cachingEnabled(false)\n                        .dataTraceEnabled(false)\n                        .httpMethod(\"httpMethod\")\n                        .loggingLevel(\"loggingLevel\")\n                        .metricsEnabled(false)\n                        .resourcePath(\"resourcePath\")\n                        .throttlingBurstLimit(123)\n                        .throttlingRateLimit(123)\n                        .build()))\n                .metricsEnabled(false)\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeploymentProps: apigateway.CfnDeploymentProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeploymentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentProps: apigateway.CfnDeploymentProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 19,
        "75": 51,
        "91": 12,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 47,
        "290": 1
      },
      "fqnsFingerprint": "dca28b3445470684eba59a56e3c1d1c40468330a54d0b1fe9308efc968b5800d"
    },
    "80afdba9bab02602f2e99dbf0747c289a5cce64f4fa6d6c4833dd9ae5486c68f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment_v2 = apigateway.CfnDeploymentV2(self, \"MyCfnDeploymentV2\",\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    description=\"description\",\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDeploymentV2 cfnDeploymentV2 = new CfnDeploymentV2(this, \"MyCfnDeploymentV2\", new CfnDeploymentV2Props {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    StageName = \"stageName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeploymentV2 cfnDeploymentV2 = CfnDeploymentV2.Builder.create(this, \"MyCfnDeploymentV2\")\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeploymentV2 = new apigateway.CfnDeploymentV2(this, 'MyCfnDeploymentV2', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeploymentV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeploymentV2",
        "@aws-cdk/aws-apigateway.CfnDeploymentV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentV2 = new apigateway.CfnDeploymentV2(this, 'MyCfnDeploymentV2', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bd1770dcd2465a24ab4dd2f5eaeb81c3f6f58ae282a227f1aab95ed2192e0331"
    },
    "ebbf766d3782c0c7daa07b01d377bc8da7a141f9aee5bc85a46f88f1794defcf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment_v2_props = apigateway.CfnDeploymentV2Props(\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    description=\"description\",\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDeploymentV2Props cfnDeploymentV2Props = new CfnDeploymentV2Props {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeploymentV2Props cfnDeploymentV2Props = CfnDeploymentV2Props.builder()\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeploymentV2Props: apigateway.CfnDeploymentV2Props = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDeploymentV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDeploymentV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentV2Props: apigateway.CfnDeploymentV2Props = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7afe2f2bc6e3f8640951b2c82a68b9025868de564511601831310356308fbcbd"
    },
    "29baa19f7c07fce9ba2357cd11e1d975e8774ae97da3c387348605f26d085550": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_part = apigateway.CfnDocumentationPart(self, \"MyCfnDocumentationPart\",\n    location=apigateway.CfnDocumentationPart.LocationProperty(\n        method=\"method\",\n        name=\"name\",\n        path=\"path\",\n        status_code=\"statusCode\",\n        type=\"type\"\n    ),\n    properties=\"properties\",\n    rest_api_id=\"restApiId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDocumentationPart cfnDocumentationPart = new CfnDocumentationPart(this, \"MyCfnDocumentationPart\", new CfnDocumentationPartProps {\n    Location = new LocationProperty {\n        Method = \"method\",\n        Name = \"name\",\n        Path = \"path\",\n        StatusCode = \"statusCode\",\n        Type = \"type\"\n    },\n    Properties = \"properties\",\n    RestApiId = \"restApiId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationPart cfnDocumentationPart = CfnDocumentationPart.Builder.create(this, \"MyCfnDocumentationPart\")\n        .location(LocationProperty.builder()\n                .method(\"method\")\n                .name(\"name\")\n                .path(\"path\")\n                .statusCode(\"statusCode\")\n                .type(\"type\")\n                .build())\n        .properties(\"properties\")\n        .restApiId(\"restApiId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationPart = new apigateway.CfnDocumentationPart(this, 'MyCfnDocumentationPart', {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDocumentationPart"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDocumentationPart",
        "@aws-cdk/aws-apigateway.CfnDocumentationPartProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationPart = new apigateway.CfnDocumentationPart(this, 'MyCfnDocumentationPart', {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "85a29a068f34ffd4204ac62e79596543006252ec58c963e14f95d1981f485395"
    },
    "354c99552f61a15a15862da2d4128fb7b561e5b169a8ea186777ae9eeac6227a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nlocation_property = apigateway.CfnDocumentationPart.LocationProperty(\n    method=\"method\",\n    name=\"name\",\n    path=\"path\",\n    status_code=\"statusCode\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nLocationProperty locationProperty = new LocationProperty {\n    Method = \"method\",\n    Name = \"name\",\n    Path = \"path\",\n    StatusCode = \"statusCode\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nLocationProperty locationProperty = LocationProperty.builder()\n        .method(\"method\")\n        .name(\"name\")\n        .path(\"path\")\n        .statusCode(\"statusCode\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst locationProperty: apigateway.CfnDocumentationPart.LocationProperty = {\n  method: 'method',\n  name: 'name',\n  path: 'path',\n  statusCode: 'statusCode',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDocumentationPart.LocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDocumentationPart.LocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst locationProperty: apigateway.CfnDocumentationPart.LocationProperty = {\n  method: 'method',\n  name: 'name',\n  path: 'path',\n  statusCode: 'statusCode',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "862211b753eb041e5fcfac4cd18890badb4e71a0114103951140496e2c484831"
    },
    "553f71e61d80d2b14e00e460c05bf77e5297b9ba0abb1457d338ef175cc43d5b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_part_props = apigateway.CfnDocumentationPartProps(\n    location=apigateway.CfnDocumentationPart.LocationProperty(\n        method=\"method\",\n        name=\"name\",\n        path=\"path\",\n        status_code=\"statusCode\",\n        type=\"type\"\n    ),\n    properties=\"properties\",\n    rest_api_id=\"restApiId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDocumentationPartProps cfnDocumentationPartProps = new CfnDocumentationPartProps {\n    Location = new LocationProperty {\n        Method = \"method\",\n        Name = \"name\",\n        Path = \"path\",\n        StatusCode = \"statusCode\",\n        Type = \"type\"\n    },\n    Properties = \"properties\",\n    RestApiId = \"restApiId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationPartProps cfnDocumentationPartProps = CfnDocumentationPartProps.builder()\n        .location(LocationProperty.builder()\n                .method(\"method\")\n                .name(\"name\")\n                .path(\"path\")\n                .statusCode(\"statusCode\")\n                .type(\"type\")\n                .build())\n        .properties(\"properties\")\n        .restApiId(\"restApiId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationPartProps: apigateway.CfnDocumentationPartProps = {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDocumentationPartProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDocumentationPartProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationPartProps: apigateway.CfnDocumentationPartProps = {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 12,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e07a54436012ea00b16170fc85ebb76714f1d6b30100dda2ed89efe35e1d2e85"
    },
    "bc4a249075d9d49bd5ba191adb5d8cf13cd61706fa8729e4a7d2cf907ea115d2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_version = apigateway.CfnDocumentationVersion(self, \"MyCfnDocumentationVersion\",\n    documentation_version=\"documentationVersion\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDocumentationVersion cfnDocumentationVersion = new CfnDocumentationVersion(this, \"MyCfnDocumentationVersion\", new CfnDocumentationVersionProps {\n    DocumentationVersion = \"documentationVersion\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationVersion cfnDocumentationVersion = CfnDocumentationVersion.Builder.create(this, \"MyCfnDocumentationVersion\")\n        .documentationVersion(\"documentationVersion\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationVersion = new apigateway.CfnDocumentationVersion(this, 'MyCfnDocumentationVersion', {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDocumentationVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDocumentationVersion",
        "@aws-cdk/aws-apigateway.CfnDocumentationVersionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationVersion = new apigateway.CfnDocumentationVersion(this, 'MyCfnDocumentationVersion', {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "eddef00be8fb9b2dfa6bcb609a78627b05349a09f5fcbb68561af8c790a3ebbb"
    },
    "bec1e79e83b1260ee242383680c5ec47b430406c49e5e608e03a6fbe773fcdb1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_version_props = apigateway.CfnDocumentationVersionProps(\n    documentation_version=\"documentationVersion\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDocumentationVersionProps cfnDocumentationVersionProps = new CfnDocumentationVersionProps {\n    DocumentationVersion = \"documentationVersion\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationVersionProps cfnDocumentationVersionProps = CfnDocumentationVersionProps.builder()\n        .documentationVersion(\"documentationVersion\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationVersionProps: apigateway.CfnDocumentationVersionProps = {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDocumentationVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDocumentationVersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationVersionProps: apigateway.CfnDocumentationVersionProps = {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "dfe785d85665a6b7ce581deb6b1c928030e75ac93456085e65aeb22de84141d0"
    },
    "f94ed8c99a5dba89883e9e12e58827f7355b63b7ee58e93344cc6b440fa33520": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_domain_name = apigateway.CfnDomainName(self, \"MyCfnDomainName\",\n    certificate_arn=\"certificateArn\",\n    domain_name=\"domainName\",\n    endpoint_configuration=apigateway.CfnDomainName.EndpointConfigurationProperty(\n        types=[\"types\"]\n    ),\n    mutual_tls_authentication=apigateway.CfnDomainName.MutualTlsAuthenticationProperty(\n        truststore_uri=\"truststoreUri\",\n        truststore_version=\"truststoreVersion\"\n    ),\n    ownership_verification_certificate_arn=\"ownershipVerificationCertificateArn\",\n    regional_certificate_arn=\"regionalCertificateArn\",\n    security_policy=\"securityPolicy\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDomainName cfnDomainName = new CfnDomainName(this, \"MyCfnDomainName\", new CfnDomainNameProps {\n    CertificateArn = \"certificateArn\",\n    DomainName = \"domainName\",\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" }\n    },\n    MutualTlsAuthentication = new MutualTlsAuthenticationProperty {\n        TruststoreUri = \"truststoreUri\",\n        TruststoreVersion = \"truststoreVersion\"\n    },\n    OwnershipVerificationCertificateArn = \"ownershipVerificationCertificateArn\",\n    RegionalCertificateArn = \"regionalCertificateArn\",\n    SecurityPolicy = \"securityPolicy\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDomainName cfnDomainName = CfnDomainName.Builder.create(this, \"MyCfnDomainName\")\n        .certificateArn(\"certificateArn\")\n        .domainName(\"domainName\")\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .build())\n        .mutualTlsAuthentication(MutualTlsAuthenticationProperty.builder()\n                .truststoreUri(\"truststoreUri\")\n                .truststoreVersion(\"truststoreVersion\")\n                .build())\n        .ownershipVerificationCertificateArn(\"ownershipVerificationCertificateArn\")\n        .regionalCertificateArn(\"regionalCertificateArn\")\n        .securityPolicy(\"securityPolicy\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDomainName = new apigateway.CfnDomainName(this, 'MyCfnDomainName', /* all optional props */ {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainName",
        "@aws-cdk/aws-apigateway.CfnDomainNameProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainName = new apigateway.CfnDomainName(this, 'MyCfnDomainName', /* all optional props */ {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 12,
        "75": 17,
        "104": 1,
        "192": 2,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "2d833d819f0e09e354898c2c081839894c9a22e183f29b98f4c699c9b9951e65"
    },
    "8b272d3f217d633fff2eb35521c6fac2446da070dfd4a318f0ee37885222982f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nendpoint_configuration_property = apigateway.CfnDomainName.EndpointConfigurationProperty(\n    types=[\"types\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nEndpointConfigurationProperty endpointConfigurationProperty = new EndpointConfigurationProperty {\n    Types = new [] { \"types\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nEndpointConfigurationProperty endpointConfigurationProperty = EndpointConfigurationProperty.builder()\n        .types(List.of(\"types\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst endpointConfigurationProperty: apigateway.CfnDomainName.EndpointConfigurationProperty = {\n  types: ['types'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainName.EndpointConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainName.EndpointConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointConfigurationProperty: apigateway.CfnDomainName.EndpointConfigurationProperty = {\n  types: ['types'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ab51a9e664a74e124c5e2d1e9594526283c4947b9ad1cd8d5ade9259cfbbfb48"
    },
    "ecbbc898e5e855a933a2e1cf8b4c7a314c1e6a3d3725b3db83e3cc0ada7c942c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmutual_tls_authentication_property = apigateway.CfnDomainName.MutualTlsAuthenticationProperty(\n    truststore_uri=\"truststoreUri\",\n    truststore_version=\"truststoreVersion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nMutualTlsAuthenticationProperty mutualTlsAuthenticationProperty = new MutualTlsAuthenticationProperty {\n    TruststoreUri = \"truststoreUri\",\n    TruststoreVersion = \"truststoreVersion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMutualTlsAuthenticationProperty mutualTlsAuthenticationProperty = MutualTlsAuthenticationProperty.builder()\n        .truststoreUri(\"truststoreUri\")\n        .truststoreVersion(\"truststoreVersion\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst mutualTlsAuthenticationProperty: apigateway.CfnDomainName.MutualTlsAuthenticationProperty = {\n  truststoreUri: 'truststoreUri',\n  truststoreVersion: 'truststoreVersion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainName.MutualTlsAuthenticationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainName.MutualTlsAuthenticationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mutualTlsAuthenticationProperty: apigateway.CfnDomainName.MutualTlsAuthenticationProperty = {\n  truststoreUri: 'truststoreUri',\n  truststoreVersion: 'truststoreVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2000944947b5af8fa62a359d8dfa8f13dcdfaa16e12d2811a8cdc341c73a9776"
    },
    "fd3ea502f1eed09cffa2bdbf145f25386591a3b28c69e086ff4267490ee13ed1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_domain_name_props = apigateway.CfnDomainNameProps(\n    certificate_arn=\"certificateArn\",\n    domain_name=\"domainName\",\n    endpoint_configuration=apigateway.CfnDomainName.EndpointConfigurationProperty(\n        types=[\"types\"]\n    ),\n    mutual_tls_authentication=apigateway.CfnDomainName.MutualTlsAuthenticationProperty(\n        truststore_uri=\"truststoreUri\",\n        truststore_version=\"truststoreVersion\"\n    ),\n    ownership_verification_certificate_arn=\"ownershipVerificationCertificateArn\",\n    regional_certificate_arn=\"regionalCertificateArn\",\n    security_policy=\"securityPolicy\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnDomainNameProps cfnDomainNameProps = new CfnDomainNameProps {\n    CertificateArn = \"certificateArn\",\n    DomainName = \"domainName\",\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" }\n    },\n    MutualTlsAuthentication = new MutualTlsAuthenticationProperty {\n        TruststoreUri = \"truststoreUri\",\n        TruststoreVersion = \"truststoreVersion\"\n    },\n    OwnershipVerificationCertificateArn = \"ownershipVerificationCertificateArn\",\n    RegionalCertificateArn = \"regionalCertificateArn\",\n    SecurityPolicy = \"securityPolicy\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDomainNameProps cfnDomainNameProps = CfnDomainNameProps.builder()\n        .certificateArn(\"certificateArn\")\n        .domainName(\"domainName\")\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .build())\n        .mutualTlsAuthentication(MutualTlsAuthenticationProperty.builder()\n                .truststoreUri(\"truststoreUri\")\n                .truststoreVersion(\"truststoreVersion\")\n                .build())\n        .ownershipVerificationCertificateArn(\"ownershipVerificationCertificateArn\")\n        .regionalCertificateArn(\"regionalCertificateArn\")\n        .securityPolicy(\"securityPolicy\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDomainNameProps: apigateway.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainNameProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameProps: apigateway.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 17,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "e760d8b089bc2329fcdf052dec0c243fa43f0587ecac5c9d4469ffef7b68cac1"
    },
    "1f49277153d18a43412cf8e2251d436d90522ce2e11203705f03445b5e1e8dd6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# tags: Any\n\ncfn_domain_name_v2 = apigateway.CfnDomainNameV2(self, \"MyCfnDomainNameV2\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    domain_name_configurations=[apigateway.CfnDomainNameV2.DomainNameConfigurationProperty(\n        certificate_arn=\"certificateArn\",\n        certificate_name=\"certificateName\",\n        endpoint_type=\"endpointType\"\n    )],\n    tags=tags\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar tags;\n\nCfnDomainNameV2 cfnDomainNameV2 = new CfnDomainNameV2(this, \"MyCfnDomainNameV2\", new CfnDomainNameV2Props {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    DomainNameConfigurations = new [] { new DomainNameConfigurationProperty {\n        CertificateArn = \"certificateArn\",\n        CertificateName = \"certificateName\",\n        EndpointType = \"endpointType\"\n    } },\n    Tags = tags\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject tags;\n\nCfnDomainNameV2 cfnDomainNameV2 = CfnDomainNameV2.Builder.create(this, \"MyCfnDomainNameV2\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .domainNameConfigurations(List.of(DomainNameConfigurationProperty.builder()\n                .certificateArn(\"certificateArn\")\n                .certificateName(\"certificateName\")\n                .endpointType(\"endpointType\")\n                .build()))\n        .tags(tags)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\nconst cfnDomainNameV2 = new apigateway.CfnDomainNameV2(this, 'MyCfnDomainNameV2', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainNameV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainNameV2",
        "@aws-cdk/aws-apigateway.CfnDomainNameV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameV2 = new apigateway.CfnDomainNameV2(this, 'MyCfnDomainNameV2', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "055286c4563b19605c9e69e4a92395499926eeb017849ccd78d4deb59c58287d"
    },
    "ddae7ccbb6eb4053951b41164d9f017ecfc790d0f6afb7bbb03cb5128a917457": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ndomain_name_configuration_property = apigateway.CfnDomainNameV2.DomainNameConfigurationProperty(\n    certificate_arn=\"certificateArn\",\n    certificate_name=\"certificateName\",\n    endpoint_type=\"endpointType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDomainNameConfigurationProperty domainNameConfigurationProperty = new DomainNameConfigurationProperty {\n    CertificateArn = \"certificateArn\",\n    CertificateName = \"certificateName\",\n    EndpointType = \"endpointType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainNameConfigurationProperty domainNameConfigurationProperty = DomainNameConfigurationProperty.builder()\n        .certificateArn(\"certificateArn\")\n        .certificateName(\"certificateName\")\n        .endpointType(\"endpointType\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst domainNameConfigurationProperty: apigateway.CfnDomainNameV2.DomainNameConfigurationProperty = {\n  certificateArn: 'certificateArn',\n  certificateName: 'certificateName',\n  endpointType: 'endpointType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainNameV2.DomainNameConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainNameV2.DomainNameConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainNameConfigurationProperty: apigateway.CfnDomainNameV2.DomainNameConfigurationProperty = {\n  certificateArn: 'certificateArn',\n  certificateName: 'certificateName',\n  endpointType: 'endpointType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0ada0559d8402c38e9dff1c155e7bcc1302ca87dc0b17e410ba77da51044589e"
    },
    "2beea1c6eed794b55cbe7ead2f263a0f26b063fa01325db56691293dfdb3431f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# tags: Any\n\ncfn_domain_name_v2_props = apigateway.CfnDomainNameV2Props(\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    domain_name_configurations=[apigateway.CfnDomainNameV2.DomainNameConfigurationProperty(\n        certificate_arn=\"certificateArn\",\n        certificate_name=\"certificateName\",\n        endpoint_type=\"endpointType\"\n    )],\n    tags=tags\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar tags;\n\nCfnDomainNameV2Props cfnDomainNameV2Props = new CfnDomainNameV2Props {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    DomainNameConfigurations = new [] { new DomainNameConfigurationProperty {\n        CertificateArn = \"certificateArn\",\n        CertificateName = \"certificateName\",\n        EndpointType = \"endpointType\"\n    } },\n    Tags = tags\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject tags;\n\nCfnDomainNameV2Props cfnDomainNameV2Props = CfnDomainNameV2Props.builder()\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .domainNameConfigurations(List.of(DomainNameConfigurationProperty.builder()\n                .certificateArn(\"certificateArn\")\n                .certificateName(\"certificateName\")\n                .endpointType(\"endpointType\")\n                .build()))\n        .tags(tags)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\nconst cfnDomainNameV2Props: apigateway.CfnDomainNameV2Props = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnDomainNameV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnDomainNameV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameV2Props: apigateway.CfnDomainNameV2Props = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "93ed0ff2e81227d173d94fef42207c8f7bc04ac2e52d544f41028b9d90f0dc68"
    },
    "bb660e7395120dd4f37fbb018d07e092fe354bbbe73249d6099370658d19a956": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_gateway_response = apigateway.CfnGatewayResponse(self, \"MyCfnGatewayResponse\",\n    response_type=\"responseType\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    status_code=\"statusCode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnGatewayResponse cfnGatewayResponse = new CfnGatewayResponse(this, \"MyCfnGatewayResponse\", new CfnGatewayResponseProps {\n    ResponseType = \"responseType\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    StatusCode = \"statusCode\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnGatewayResponse cfnGatewayResponse = CfnGatewayResponse.Builder.create(this, \"MyCfnGatewayResponse\")\n        .responseType(\"responseType\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .statusCode(\"statusCode\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnGatewayResponse = new apigateway.CfnGatewayResponse(this, 'MyCfnGatewayResponse', {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnGatewayResponse"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnGatewayResponse",
        "@aws-cdk/aws-apigateway.CfnGatewayResponseProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGatewayResponse = new apigateway.CfnGatewayResponse(this, 'MyCfnGatewayResponse', {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "104": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "eb6fbbc02eba7786cddedcd9f3dfe8fe7ede640b74b16895c7e968482cdaa86a"
    },
    "c840049ebc520c830f518904f0acc405fca3ce2ea3000b0e1e559b8372b17417": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_gateway_response_props = apigateway.CfnGatewayResponseProps(\n    response_type=\"responseType\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    status_code=\"statusCode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnGatewayResponseProps cfnGatewayResponseProps = new CfnGatewayResponseProps {\n    ResponseType = \"responseType\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    StatusCode = \"statusCode\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnGatewayResponseProps cfnGatewayResponseProps = CfnGatewayResponseProps.builder()\n        .responseType(\"responseType\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .statusCode(\"statusCode\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnGatewayResponseProps: apigateway.CfnGatewayResponseProps = {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnGatewayResponseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnGatewayResponseProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGatewayResponseProps: apigateway.CfnGatewayResponseProps = {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "db0076f6d66eba866a87b2558452084339440864572f7e1934dfea045fcf1ad5"
    },
    "f434d9c3ebc9d7aacd75351732ac020aa0c50d3535a76df07deca313da59a2ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_parameters: Any\n# response_templates: Any\n\ncfn_integration_response_v2 = apigateway.CfnIntegrationResponseV2(self, \"MyCfnIntegrationResponseV2\",\n    api_id=\"apiId\",\n    integration_id=\"integrationId\",\n    integration_response_key=\"integrationResponseKey\",\n\n    # the properties below are optional\n    content_handling_strategy=\"contentHandlingStrategy\",\n    response_parameters=response_parameters,\n    response_templates=response_templates,\n    template_selection_expression=\"templateSelectionExpression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseParameters;\nvar responseTemplates;\n\nCfnIntegrationResponseV2 cfnIntegrationResponseV2 = new CfnIntegrationResponseV2(this, \"MyCfnIntegrationResponseV2\", new CfnIntegrationResponseV2Props {\n    ApiId = \"apiId\",\n    IntegrationId = \"integrationId\",\n    IntegrationResponseKey = \"integrationResponseKey\",\n\n    // the properties below are optional\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    ResponseParameters = responseParameters,\n    ResponseTemplates = responseTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseParameters;\nObject responseTemplates;\n\nCfnIntegrationResponseV2 cfnIntegrationResponseV2 = CfnIntegrationResponseV2.Builder.create(this, \"MyCfnIntegrationResponseV2\")\n        .apiId(\"apiId\")\n        .integrationId(\"integrationId\")\n        .integrationResponseKey(\"integrationResponseKey\")\n\n        // the properties below are optional\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .responseParameters(responseParameters)\n        .responseTemplates(responseTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\nconst cfnIntegrationResponseV2 = new apigateway.CfnIntegrationResponseV2(this, 'MyCfnIntegrationResponseV2', {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnIntegrationResponseV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnIntegrationResponseV2",
        "@aws-cdk/aws-apigateway.CfnIntegrationResponseV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationResponseV2 = new apigateway.CfnIntegrationResponseV2(this, 'MyCfnIntegrationResponseV2', {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 15,
        "104": 1,
        "125": 2,
        "130": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "a9424b3a0163a705c5d2eab31de0fb339d5cc35b370d20acf2a392b6b287e285"
    },
    "6384e859e07c00045bbf97ec357ad4bd976084c046656ac496366917e7075c51": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_parameters: Any\n# response_templates: Any\n\ncfn_integration_response_v2_props = apigateway.CfnIntegrationResponseV2Props(\n    api_id=\"apiId\",\n    integration_id=\"integrationId\",\n    integration_response_key=\"integrationResponseKey\",\n\n    # the properties below are optional\n    content_handling_strategy=\"contentHandlingStrategy\",\n    response_parameters=response_parameters,\n    response_templates=response_templates,\n    template_selection_expression=\"templateSelectionExpression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseParameters;\nvar responseTemplates;\n\nCfnIntegrationResponseV2Props cfnIntegrationResponseV2Props = new CfnIntegrationResponseV2Props {\n    ApiId = \"apiId\",\n    IntegrationId = \"integrationId\",\n    IntegrationResponseKey = \"integrationResponseKey\",\n\n    // the properties below are optional\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    ResponseParameters = responseParameters,\n    ResponseTemplates = responseTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseParameters;\nObject responseTemplates;\n\nCfnIntegrationResponseV2Props cfnIntegrationResponseV2Props = CfnIntegrationResponseV2Props.builder()\n        .apiId(\"apiId\")\n        .integrationId(\"integrationId\")\n        .integrationResponseKey(\"integrationResponseKey\")\n\n        // the properties below are optional\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .responseParameters(responseParameters)\n        .responseTemplates(responseTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\nconst cfnIntegrationResponseV2Props: apigateway.CfnIntegrationResponseV2Props = {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnIntegrationResponseV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnIntegrationResponseV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationResponseV2Props: apigateway.CfnIntegrationResponseV2Props = {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "8e87cbef1fc8023712f187ce6d9ab088d521e111bb5f2c7227121ecd1684b1c1"
    },
    "c88ef54ee40a91e48884194d5ad8c86fe60e5cdd2ce598626f9e1690050a0d55": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_parameters: Any\n# request_templates: Any\n\ncfn_integration_v2 = apigateway.CfnIntegrationV2(self, \"MyCfnIntegrationV2\",\n    api_id=\"apiId\",\n    integration_type=\"integrationType\",\n\n    # the properties below are optional\n    connection_type=\"connectionType\",\n    content_handling_strategy=\"contentHandlingStrategy\",\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    integration_method=\"integrationMethod\",\n    integration_uri=\"integrationUri\",\n    passthrough_behavior=\"passthroughBehavior\",\n    payload_format_version=\"payloadFormatVersion\",\n    request_parameters=request_parameters,\n    request_templates=request_templates,\n    template_selection_expression=\"templateSelectionExpression\",\n    timeout_in_millis=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestParameters;\nvar requestTemplates;\n\nCfnIntegrationV2 cfnIntegrationV2 = new CfnIntegrationV2(this, \"MyCfnIntegrationV2\", new CfnIntegrationV2Props {\n    ApiId = \"apiId\",\n    IntegrationType = \"integrationType\",\n\n    // the properties below are optional\n    ConnectionType = \"connectionType\",\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    IntegrationMethod = \"integrationMethod\",\n    IntegrationUri = \"integrationUri\",\n    PassthroughBehavior = \"passthroughBehavior\",\n    PayloadFormatVersion = \"payloadFormatVersion\",\n    RequestParameters = requestParameters,\n    RequestTemplates = requestTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\",\n    TimeoutInMillis = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestParameters;\nObject requestTemplates;\n\nCfnIntegrationV2 cfnIntegrationV2 = CfnIntegrationV2.Builder.create(this, \"MyCfnIntegrationV2\")\n        .apiId(\"apiId\")\n        .integrationType(\"integrationType\")\n\n        // the properties below are optional\n        .connectionType(\"connectionType\")\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .integrationMethod(\"integrationMethod\")\n        .integrationUri(\"integrationUri\")\n        .passthroughBehavior(\"passthroughBehavior\")\n        .payloadFormatVersion(\"payloadFormatVersion\")\n        .requestParameters(requestParameters)\n        .requestTemplates(requestTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .timeoutInMillis(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\nconst cfnIntegrationV2 = new apigateway.CfnIntegrationV2(this, 'MyCfnIntegrationV2', {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnIntegrationV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnIntegrationV2",
        "@aws-cdk/aws-apigateway.CfnIntegrationV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationV2 = new apigateway.CfnIntegrationV2(this, 'MyCfnIntegrationV2', {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 22,
        "104": 1,
        "125": 2,
        "130": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "20b704be5cb07cb380e3892b77f1fdeb4506ffb8c5189937d4ba8ed92547218a"
    },
    "a3aa2ff758fda4d639c562337b6aafbe2292dc06179159d74ad2a41e6c616c4c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_parameters: Any\n# request_templates: Any\n\ncfn_integration_v2_props = apigateway.CfnIntegrationV2Props(\n    api_id=\"apiId\",\n    integration_type=\"integrationType\",\n\n    # the properties below are optional\n    connection_type=\"connectionType\",\n    content_handling_strategy=\"contentHandlingStrategy\",\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    integration_method=\"integrationMethod\",\n    integration_uri=\"integrationUri\",\n    passthrough_behavior=\"passthroughBehavior\",\n    payload_format_version=\"payloadFormatVersion\",\n    request_parameters=request_parameters,\n    request_templates=request_templates,\n    template_selection_expression=\"templateSelectionExpression\",\n    timeout_in_millis=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestParameters;\nvar requestTemplates;\n\nCfnIntegrationV2Props cfnIntegrationV2Props = new CfnIntegrationV2Props {\n    ApiId = \"apiId\",\n    IntegrationType = \"integrationType\",\n\n    // the properties below are optional\n    ConnectionType = \"connectionType\",\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    IntegrationMethod = \"integrationMethod\",\n    IntegrationUri = \"integrationUri\",\n    PassthroughBehavior = \"passthroughBehavior\",\n    PayloadFormatVersion = \"payloadFormatVersion\",\n    RequestParameters = requestParameters,\n    RequestTemplates = requestTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\",\n    TimeoutInMillis = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestParameters;\nObject requestTemplates;\n\nCfnIntegrationV2Props cfnIntegrationV2Props = CfnIntegrationV2Props.builder()\n        .apiId(\"apiId\")\n        .integrationType(\"integrationType\")\n\n        // the properties below are optional\n        .connectionType(\"connectionType\")\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .integrationMethod(\"integrationMethod\")\n        .integrationUri(\"integrationUri\")\n        .passthroughBehavior(\"passthroughBehavior\")\n        .payloadFormatVersion(\"payloadFormatVersion\")\n        .requestParameters(requestParameters)\n        .requestTemplates(requestTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .timeoutInMillis(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\nconst cfnIntegrationV2Props: apigateway.CfnIntegrationV2Props = {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnIntegrationV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnIntegrationV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationV2Props: apigateway.CfnIntegrationV2Props = {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 22,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "5fe989e90e73b4e55bfd2cd370551040345e50e48f46dac1285a95c8d4ce35bf"
    },
    "c08bbaa7578d8412113893800fc223d2ad6ba37fe50871b5f8c269b439dde670": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_method = apigateway.CfnMethod(self, \"MyCfnMethod\",\n    http_method=\"httpMethod\",\n    resource_id=\"resourceId\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    integration=apigateway.CfnMethod.IntegrationProperty(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_id=\"connectionId\",\n        connection_type=\"connectionType\",\n        content_handling=\"contentHandling\",\n        credentials=\"credentials\",\n        integration_http_method=\"integrationHttpMethod\",\n        integration_responses=[apigateway.CfnMethod.IntegrationResponseProperty(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=\"contentHandling\",\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=\"passthroughBehavior\",\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout_in_millis=123,\n        type=\"type\",\n        uri=\"uri\"\n    ),\n    method_responses=[apigateway.CfnMethod.MethodResponseProperty(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        response_models={\n            \"response_models_key\": \"responseModels\"\n        },\n        response_parameters={\n            \"response_parameters_key\": False\n        }\n    )],\n    operation_name=\"operationName\",\n    request_models={\n        \"request_models_key\": \"requestModels\"\n    },\n    request_parameters={\n        \"request_parameters_key\": False\n    },\n    request_validator_id=\"requestValidatorId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnMethod cfnMethod = new CfnMethod(this, \"MyCfnMethod\", new CfnMethodProps {\n    HttpMethod = \"httpMethod\",\n    ResourceId = \"resourceId\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    Integration = new IntegrationProperty {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionId = \"connectionId\",\n        ConnectionType = \"connectionType\",\n        ContentHandling = \"contentHandling\",\n        Credentials = \"credentials\",\n        IntegrationHttpMethod = \"integrationHttpMethod\",\n        IntegrationResponses = new [] { new IntegrationResponseProperty {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = \"contentHandling\",\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = \"passthroughBehavior\",\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        TimeoutInMillis = 123,\n        Type = \"type\",\n        Uri = \"uri\"\n    },\n    MethodResponses = new [] { new MethodResponseProperty {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ResponseModels = new Dictionary<string, string> {\n            { \"responseModelsKey\", \"responseModels\" }\n        },\n        ResponseParameters = new Dictionary<string, object> {\n            { \"responseParametersKey\", false }\n        }\n    } },\n    OperationName = \"operationName\",\n    RequestModels = new Dictionary<string, string> {\n        { \"requestModelsKey\", \"requestModels\" }\n    },\n    RequestParameters = new Dictionary<string, object> {\n        { \"requestParametersKey\", false }\n    },\n    RequestValidatorId = \"requestValidatorId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnMethod cfnMethod = CfnMethod.Builder.create(this, \"MyCfnMethod\")\n        .httpMethod(\"httpMethod\")\n        .resourceId(\"resourceId\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .integration(IntegrationProperty.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionId(\"connectionId\")\n                .connectionType(\"connectionType\")\n                .contentHandling(\"contentHandling\")\n                .credentials(\"credentials\")\n                .integrationHttpMethod(\"integrationHttpMethod\")\n                .integrationResponses(List.of(IntegrationResponseProperty.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(\"contentHandling\")\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(\"passthroughBehavior\")\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeoutInMillis(123)\n                .type(\"type\")\n                .uri(\"uri\")\n                .build())\n        .methodResponses(List.of(MethodResponseProperty.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .responseModels(Map.of(\n                        \"responseModelsKey\", \"responseModels\"))\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", false))\n                .build()))\n        .operationName(\"operationName\")\n        .requestModels(Map.of(\n                \"requestModelsKey\", \"requestModels\"))\n        .requestParameters(Map.of(\n                \"requestParametersKey\", false))\n        .requestValidatorId(\"requestValidatorId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnMethod = new apigateway.CfnMethod(this, 'MyCfnMethod', {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnMethod",
        "@aws-cdk/aws-apigateway.CfnMethodProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMethod = new apigateway.CfnMethod(this, 'MyCfnMethod', {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 30,
        "75": 47,
        "91": 3,
        "104": 1,
        "192": 4,
        "193": 12,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 43,
        "290": 1
      },
      "fqnsFingerprint": "e72b2fde567d864d722a946eef51aabd663ec90b85009268116ecbd5e71859fa"
    },
    "ee9cde04d82bf763c44baac2d6d23282397c376f0e76405e218589a95b47a5aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nintegration_property = apigateway.CfnMethod.IntegrationProperty(\n    cache_key_parameters=[\"cacheKeyParameters\"],\n    cache_namespace=\"cacheNamespace\",\n    connection_id=\"connectionId\",\n    connection_type=\"connectionType\",\n    content_handling=\"contentHandling\",\n    credentials=\"credentials\",\n    integration_http_method=\"integrationHttpMethod\",\n    integration_responses=[apigateway.CfnMethod.IntegrationResponseProperty(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        content_handling=\"contentHandling\",\n        response_parameters={\n            \"response_parameters_key\": \"responseParameters\"\n        },\n        response_templates={\n            \"response_templates_key\": \"responseTemplates\"\n        },\n        selection_pattern=\"selectionPattern\"\n    )],\n    passthrough_behavior=\"passthroughBehavior\",\n    request_parameters={\n        \"request_parameters_key\": \"requestParameters\"\n    },\n    request_templates={\n        \"request_templates_key\": \"requestTemplates\"\n    },\n    timeout_in_millis=123,\n    type=\"type\",\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nIntegrationProperty integrationProperty = new IntegrationProperty {\n    CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n    CacheNamespace = \"cacheNamespace\",\n    ConnectionId = \"connectionId\",\n    ConnectionType = \"connectionType\",\n    ContentHandling = \"contentHandling\",\n    Credentials = \"credentials\",\n    IntegrationHttpMethod = \"integrationHttpMethod\",\n    IntegrationResponses = new [] { new IntegrationResponseProperty {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ContentHandling = \"contentHandling\",\n        ResponseParameters = new Dictionary<string, string> {\n            { \"responseParametersKey\", \"responseParameters\" }\n        },\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"responseTemplatesKey\", \"responseTemplates\" }\n        },\n        SelectionPattern = \"selectionPattern\"\n    } },\n    PassthroughBehavior = \"passthroughBehavior\",\n    RequestParameters = new Dictionary<string, string> {\n        { \"requestParametersKey\", \"requestParameters\" }\n    },\n    RequestTemplates = new Dictionary<string, string> {\n        { \"requestTemplatesKey\", \"requestTemplates\" }\n    },\n    TimeoutInMillis = 123,\n    Type = \"type\",\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nIntegrationProperty integrationProperty = IntegrationProperty.builder()\n        .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n        .cacheNamespace(\"cacheNamespace\")\n        .connectionId(\"connectionId\")\n        .connectionType(\"connectionType\")\n        .contentHandling(\"contentHandling\")\n        .credentials(\"credentials\")\n        .integrationHttpMethod(\"integrationHttpMethod\")\n        .integrationResponses(List.of(IntegrationResponseProperty.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .contentHandling(\"contentHandling\")\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", \"responseParameters\"))\n                .responseTemplates(Map.of(\n                        \"responseTemplatesKey\", \"responseTemplates\"))\n                .selectionPattern(\"selectionPattern\")\n                .build()))\n        .passthroughBehavior(\"passthroughBehavior\")\n        .requestParameters(Map.of(\n                \"requestParametersKey\", \"requestParameters\"))\n        .requestTemplates(Map.of(\n                \"requestTemplatesKey\", \"requestTemplates\"))\n        .timeoutInMillis(123)\n        .type(\"type\")\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst integrationProperty: apigateway.CfnMethod.IntegrationProperty = {\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionId: 'connectionId',\n  connectionType: 'connectionType',\n  contentHandling: 'contentHandling',\n  credentials: 'credentials',\n  integrationHttpMethod: 'integrationHttpMethod',\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: 'contentHandling',\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: 'passthroughBehavior',\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeoutInMillis: 123,\n  type: 'type',\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnMethod.IntegrationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnMethod.IntegrationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationProperty: apigateway.CfnMethod.IntegrationProperty = {\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionId: 'connectionId',\n  connectionType: 'connectionType',\n  contentHandling: 'contentHandling',\n  credentials: 'credentials',\n  integrationHttpMethod: 'integrationHttpMethod',\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: 'contentHandling',\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: 'passthroughBehavior',\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeoutInMillis: 123,\n  type: 'type',\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 18,
        "75": 28,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "5df3dba426dbe90b7dee5ddb42fe693f3d032d452e6ece6a900f5d259378827b"
    },
    "a72fedc38c6405685551f3e65d84bb55e0e9dbd7ca639bd8d71eb477df4ad8c5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nintegration_response_property = apigateway.CfnMethod.IntegrationResponseProperty(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    content_handling=\"contentHandling\",\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    selection_pattern=\"selectionPattern\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nIntegrationResponseProperty integrationResponseProperty = new IntegrationResponseProperty {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ContentHandling = \"contentHandling\",\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    SelectionPattern = \"selectionPattern\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nIntegrationResponseProperty integrationResponseProperty = IntegrationResponseProperty.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .contentHandling(\"contentHandling\")\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .selectionPattern(\"selectionPattern\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst integrationResponseProperty: apigateway.CfnMethod.IntegrationResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: 'contentHandling',\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnMethod.IntegrationResponseProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnMethod.IntegrationResponseProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationResponseProperty: apigateway.CfnMethod.IntegrationResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: 'contentHandling',\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "86844aa95832e2e56dbd3a9be456ee938609013d362d3d888174f5997730d888"
    },
    "845ef21258803fb69ebb2c30a73de7ddfed489c3b4b666faed4fae266880afc2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmethod_response_property = apigateway.CfnMethod.MethodResponseProperty(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    response_models={\n        \"response_models_key\": \"responseModels\"\n    },\n    response_parameters={\n        \"response_parameters_key\": False\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nMethodResponseProperty methodResponseProperty = new MethodResponseProperty {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ResponseModels = new Dictionary<string, string> {\n        { \"responseModelsKey\", \"responseModels\" }\n    },\n    ResponseParameters = new Dictionary<string, object> {\n        { \"responseParametersKey\", false }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethodResponseProperty methodResponseProperty = MethodResponseProperty.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .responseModels(Map.of(\n                \"responseModelsKey\", \"responseModels\"))\n        .responseParameters(Map.of(\n                \"responseParametersKey\", false))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst methodResponseProperty: apigateway.CfnMethod.MethodResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: 'responseModels',\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnMethod.MethodResponseProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnMethod.MethodResponseProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodResponseProperty: apigateway.CfnMethod.MethodResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: 'responseModels',\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fb255d747c59a84f0633323e50822150e46115ad1396eb49ad70f8fdb752863a"
    },
    "3dec362f2ff3aa18fe6d70a59eefa3c8f67cd4072a7f8d80438169548b7d64d5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_method_props = apigateway.CfnMethodProps(\n    http_method=\"httpMethod\",\n    resource_id=\"resourceId\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    integration=apigateway.CfnMethod.IntegrationProperty(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_id=\"connectionId\",\n        connection_type=\"connectionType\",\n        content_handling=\"contentHandling\",\n        credentials=\"credentials\",\n        integration_http_method=\"integrationHttpMethod\",\n        integration_responses=[apigateway.CfnMethod.IntegrationResponseProperty(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=\"contentHandling\",\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=\"passthroughBehavior\",\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout_in_millis=123,\n        type=\"type\",\n        uri=\"uri\"\n    ),\n    method_responses=[apigateway.CfnMethod.MethodResponseProperty(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        response_models={\n            \"response_models_key\": \"responseModels\"\n        },\n        response_parameters={\n            \"response_parameters_key\": False\n        }\n    )],\n    operation_name=\"operationName\",\n    request_models={\n        \"request_models_key\": \"requestModels\"\n    },\n    request_parameters={\n        \"request_parameters_key\": False\n    },\n    request_validator_id=\"requestValidatorId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnMethodProps cfnMethodProps = new CfnMethodProps {\n    HttpMethod = \"httpMethod\",\n    ResourceId = \"resourceId\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    Integration = new IntegrationProperty {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionId = \"connectionId\",\n        ConnectionType = \"connectionType\",\n        ContentHandling = \"contentHandling\",\n        Credentials = \"credentials\",\n        IntegrationHttpMethod = \"integrationHttpMethod\",\n        IntegrationResponses = new [] { new IntegrationResponseProperty {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = \"contentHandling\",\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = \"passthroughBehavior\",\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        TimeoutInMillis = 123,\n        Type = \"type\",\n        Uri = \"uri\"\n    },\n    MethodResponses = new [] { new MethodResponseProperty {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ResponseModels = new Dictionary<string, string> {\n            { \"responseModelsKey\", \"responseModels\" }\n        },\n        ResponseParameters = new Dictionary<string, object> {\n            { \"responseParametersKey\", false }\n        }\n    } },\n    OperationName = \"operationName\",\n    RequestModels = new Dictionary<string, string> {\n        { \"requestModelsKey\", \"requestModels\" }\n    },\n    RequestParameters = new Dictionary<string, object> {\n        { \"requestParametersKey\", false }\n    },\n    RequestValidatorId = \"requestValidatorId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnMethodProps cfnMethodProps = CfnMethodProps.builder()\n        .httpMethod(\"httpMethod\")\n        .resourceId(\"resourceId\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .integration(IntegrationProperty.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionId(\"connectionId\")\n                .connectionType(\"connectionType\")\n                .contentHandling(\"contentHandling\")\n                .credentials(\"credentials\")\n                .integrationHttpMethod(\"integrationHttpMethod\")\n                .integrationResponses(List.of(IntegrationResponseProperty.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(\"contentHandling\")\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(\"passthroughBehavior\")\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeoutInMillis(123)\n                .type(\"type\")\n                .uri(\"uri\")\n                .build())\n        .methodResponses(List.of(MethodResponseProperty.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .responseModels(Map.of(\n                        \"responseModelsKey\", \"responseModels\"))\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", false))\n                .build()))\n        .operationName(\"operationName\")\n        .requestModels(Map.of(\n                \"requestModelsKey\", \"requestModels\"))\n        .requestParameters(Map.of(\n                \"requestParametersKey\", false))\n        .requestValidatorId(\"requestValidatorId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnMethodProps: apigateway.CfnMethodProps = {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnMethodProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnMethodProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMethodProps: apigateway.CfnMethodProps = {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 29,
        "75": 47,
        "91": 3,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 12,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 43,
        "290": 1
      },
      "fqnsFingerprint": "c55c2e4ba54d8441fda12f35da1079166de76c25a3000a552b87f2d52a71ac5e"
    },
    "d5f2d0f2101fa0a2858d5e9e3821fd48cd5ebae44ec5f43eecc1b26662c9a373": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model = apigateway.CfnModel(self, \"MyCfnModel\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\",\n    name=\"name\",\n    schema=schema\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nCfnModel cfnModel = new CfnModel(this, \"MyCfnModel\", new CfnModelProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\",\n    Name = \"name\",\n    Schema = schema\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModel cfnModel = CfnModel.Builder.create(this, \"MyCfnModel\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .name(\"name\")\n        .schema(schema)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModel = new apigateway.CfnModel(this, 'MyCfnModel', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnModel",
        "@aws-cdk/aws-apigateway.CfnModelProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModel = new apigateway.CfnModel(this, 'MyCfnModel', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1c985b0b46d84d6d9e8f678d41216e78e1fade351bc422b34a39688a24ae87c5"
    },
    "dbbbd2037b0999353d851a0944b47ac81e0223a3cbb931ec934ce710c66e26ca": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model_props = apigateway.CfnModelProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\",\n    name=\"name\",\n    schema=schema\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nCfnModelProps cfnModelProps = new CfnModelProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\",\n    Name = \"name\",\n    Schema = schema\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModelProps cfnModelProps = CfnModelProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .name(\"name\")\n        .schema(schema)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModelProps: apigateway.CfnModelProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnModelProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnModelProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModelProps: apigateway.CfnModelProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "61fec0d4950b4da4fe73e490a8d969f1522786e7816feab800ee9f60fbaeab1f"
    },
    "5ac138f1ae10288917a86ae227771b34f4199fd93aa56e137e074a1af5105c8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model_v2 = apigateway.CfnModelV2(self, \"MyCfnModelV2\",\n    api_id=\"apiId\",\n    name=\"name\",\n    schema=schema,\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nCfnModelV2 cfnModelV2 = new CfnModelV2(this, \"MyCfnModelV2\", new CfnModelV2Props {\n    ApiId = \"apiId\",\n    Name = \"name\",\n    Schema = schema,\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModelV2 cfnModelV2 = CfnModelV2.Builder.create(this, \"MyCfnModelV2\")\n        .apiId(\"apiId\")\n        .name(\"name\")\n        .schema(schema)\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModelV2 = new apigateway.CfnModelV2(this, 'MyCfnModelV2', {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnModelV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnModelV2",
        "@aws-cdk/aws-apigateway.CfnModelV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModelV2 = new apigateway.CfnModelV2(this, 'MyCfnModelV2', {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6d7271b658845bc730b92152642f98748dba618a9c52b6088eefa6d1c96a5604"
    },
    "2b0d4b04429f49355cf313caafeb6b38fc2e5dad4112b43bab5dbfd7575860fe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model_v2_props = apigateway.CfnModelV2Props(\n    api_id=\"apiId\",\n    name=\"name\",\n    schema=schema,\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nCfnModelV2Props cfnModelV2Props = new CfnModelV2Props {\n    ApiId = \"apiId\",\n    Name = \"name\",\n    Schema = schema,\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModelV2Props cfnModelV2Props = CfnModelV2Props.builder()\n        .apiId(\"apiId\")\n        .name(\"name\")\n        .schema(schema)\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModelV2Props: apigateway.CfnModelV2Props = {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnModelV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnModelV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModelV2Props: apigateway.CfnModelV2Props = {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "068f8095163b178fd19aa77301771867e69721193fbfd1f706252935d169f84c"
    },
    "44ad415e8167973f282d56e34d54f8638e2c9afdbeff5b71411e781bbe6997b7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_request_validator = apigateway.CfnRequestValidator(self, \"MyCfnRequestValidator\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    name=\"name\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnRequestValidator cfnRequestValidator = new CfnRequestValidator(this, \"MyCfnRequestValidator\", new CfnRequestValidatorProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Name = \"name\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnRequestValidator cfnRequestValidator = CfnRequestValidator.Builder.create(this, \"MyCfnRequestValidator\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .name(\"name\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnRequestValidator = new apigateway.CfnRequestValidator(this, 'MyCfnRequestValidator', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRequestValidator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRequestValidator",
        "@aws-cdk/aws-apigateway.CfnRequestValidatorProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRequestValidator = new apigateway.CfnRequestValidator(this, 'MyCfnRequestValidator', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 2,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ab262b22875aec4fa489704a94a8673b165715c84f0596c7e7e6c50f85bace0c"
    },
    "ffb2fe7fc097edb6110b8b6ae2b837e92b1508d896c2c49d6166597ad3e8a1f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_request_validator_props = apigateway.CfnRequestValidatorProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    name=\"name\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnRequestValidatorProps cfnRequestValidatorProps = new CfnRequestValidatorProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Name = \"name\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnRequestValidatorProps cfnRequestValidatorProps = CfnRequestValidatorProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .name(\"name\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnRequestValidatorProps: apigateway.CfnRequestValidatorProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRequestValidatorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRequestValidatorProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRequestValidatorProps: apigateway.CfnRequestValidatorProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "5063635c2c6e0fb15ef106b6a671e3cd95ffaf6fb23badfa60634361b3c14daf"
    },
    "b6e3b13f456ff6b6723f33425b97c4f0f2c777e57611c4f3b73521a3b2dca4c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_resource = apigateway.CfnResource(self, \"MyCfnResource\",\n    parent_id=\"parentId\",\n    path_part=\"pathPart\",\n    rest_api_id=\"restApiId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnResource cfnResource = new CfnResource(this, \"MyCfnResource\", new CfnResourceProps {\n    ParentId = \"parentId\",\n    PathPart = \"pathPart\",\n    RestApiId = \"restApiId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnResource cfnResource = CfnResource.Builder.create(this, \"MyCfnResource\")\n        .parentId(\"parentId\")\n        .pathPart(\"pathPart\")\n        .restApiId(\"restApiId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnResource = new apigateway.CfnResource(this, 'MyCfnResource', {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnResource",
        "@aws-cdk/aws-apigateway.CfnResourceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResource = new apigateway.CfnResource(this, 'MyCfnResource', {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "69462a870576f75661f139a642e1e1a49d37880d5240228bd0c879fc26463a66"
    },
    "c719302e5339b4f504c31051aa4a468fa3e23a22c0cf0039bda8ebd9e7e3b34f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_resource_props = apigateway.CfnResourceProps(\n    parent_id=\"parentId\",\n    path_part=\"pathPart\",\n    rest_api_id=\"restApiId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnResourceProps cfnResourceProps = new CfnResourceProps {\n    ParentId = \"parentId\",\n    PathPart = \"pathPart\",\n    RestApiId = \"restApiId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnResourceProps cfnResourceProps = CfnResourceProps.builder()\n        .parentId(\"parentId\")\n        .pathPart(\"pathPart\")\n        .restApiId(\"restApiId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnResourceProps: apigateway.CfnResourceProps = {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnResourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceProps: apigateway.CfnResourceProps = {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f84b00ad12a2c4cbd62ec19f633e43780c62b280d725a2b5008d7e2b662ead0e"
    },
    "331e53a69ccd41d54ad0669b633bc54495a5915fc84e068730db8e5980fe3a4b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# policy: Any\n\ncfn_rest_api = apigateway.CfnRestApi(self, \"MyCfnRestApi\",\n    api_key_source_type=\"apiKeySourceType\",\n    binary_media_types=[\"binaryMediaTypes\"],\n    body=body,\n    body_s3_location=apigateway.CfnRestApi.S3LocationProperty(\n        bucket=\"bucket\",\n        e_tag=\"eTag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    clone_from=\"cloneFrom\",\n    description=\"description\",\n    disable_execute_api_endpoint=False,\n    endpoint_configuration=apigateway.CfnRestApi.EndpointConfigurationProperty(\n        types=[\"types\"],\n        vpc_endpoint_ids=[\"vpcEndpointIds\"]\n    ),\n    fail_on_warnings=False,\n    minimum_compression_size=123,\n    mode=\"mode\",\n    name=\"name\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar policy;\n\nCfnRestApi cfnRestApi = new CfnRestApi(this, \"MyCfnRestApi\", new CfnRestApiProps {\n    ApiKeySourceType = \"apiKeySourceType\",\n    BinaryMediaTypes = new [] { \"binaryMediaTypes\" },\n    Body = body,\n    BodyS3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        ETag = \"eTag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CloneFrom = \"cloneFrom\",\n    Description = \"description\",\n    DisableExecuteApiEndpoint = false,\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" },\n        VpcEndpointIds = new [] { \"vpcEndpointIds\" }\n    },\n    FailOnWarnings = false,\n    MinimumCompressionSize = 123,\n    Mode = \"mode\",\n    Name = \"name\",\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policy,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject policy;\n\nCfnRestApi cfnRestApi = CfnRestApi.Builder.create(this, \"MyCfnRestApi\")\n        .apiKeySourceType(\"apiKeySourceType\")\n        .binaryMediaTypes(List.of(\"binaryMediaTypes\"))\n        .body(body)\n        .bodyS3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .eTag(\"eTag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .cloneFrom(\"cloneFrom\")\n        .description(\"description\")\n        .disableExecuteApiEndpoint(false)\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .vpcEndpointIds(List.of(\"vpcEndpointIds\"))\n                .build())\n        .failOnWarnings(false)\n        .minimumCompressionSize(123)\n        .mode(\"mode\")\n        .name(\"name\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policy)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\nconst cfnRestApi = new apigateway.CfnRestApi(this, 'MyCfnRestApi', /* all optional props */ {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRestApi",
        "@aws-cdk/aws-apigateway.CfnRestApiProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRestApi = new apigateway.CfnRestApi(this, 'MyCfnRestApi', /* all optional props */ {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 17,
        "75": 32,
        "91": 2,
        "104": 1,
        "125": 2,
        "130": 2,
        "192": 4,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "47c70b80d65dde05a908847d5b3af3c5378347540e4ca9f8d1ca1d09fbc46455"
    },
    "c088bb1496c78f684d7e9ae23e65f619fba95394ef5dcbb2ab5014e2500cbd3d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nendpoint_configuration_property = apigateway.CfnRestApi.EndpointConfigurationProperty(\n    types=[\"types\"],\n    vpc_endpoint_ids=[\"vpcEndpointIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nEndpointConfigurationProperty endpointConfigurationProperty = new EndpointConfigurationProperty {\n    Types = new [] { \"types\" },\n    VpcEndpointIds = new [] { \"vpcEndpointIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nEndpointConfigurationProperty endpointConfigurationProperty = EndpointConfigurationProperty.builder()\n        .types(List.of(\"types\"))\n        .vpcEndpointIds(List.of(\"vpcEndpointIds\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst endpointConfigurationProperty: apigateway.CfnRestApi.EndpointConfigurationProperty = {\n  types: ['types'],\n  vpcEndpointIds: ['vpcEndpointIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRestApi.EndpointConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRestApi.EndpointConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointConfigurationProperty: apigateway.CfnRestApi.EndpointConfigurationProperty = {\n  types: ['types'],\n  vpcEndpointIds: ['vpcEndpointIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cfd836b4a474a11ec185a0078e201b7251c511c3c25f2da5a34014967b5e22c7"
    },
    "69a38222b27a8167b3c67e6baa9b6b02524d050d8358c8c2344d988a2e139b76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ns3_location_property = apigateway.CfnRestApi.S3LocationProperty(\n    bucket=\"bucket\",\n    e_tag=\"eTag\",\n    key=\"key\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nS3LocationProperty s3LocationProperty = new S3LocationProperty {\n    Bucket = \"bucket\",\n    ETag = \"eTag\",\n    Key = \"key\",\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nS3LocationProperty s3LocationProperty = S3LocationProperty.builder()\n        .bucket(\"bucket\")\n        .eTag(\"eTag\")\n        .key(\"key\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst s3LocationProperty: apigateway.CfnRestApi.S3LocationProperty = {\n  bucket: 'bucket',\n  eTag: 'eTag',\n  key: 'key',\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRestApi.S3LocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRestApi.S3LocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LocationProperty: apigateway.CfnRestApi.S3LocationProperty = {\n  bucket: 'bucket',\n  eTag: 'eTag',\n  key: 'key',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "47c865368e8305b07d3689bc88c1f978fce43bfde36cd2529ce05d7e67da3805"
    },
    "43399d152dfc7b3b85bb8deda23b0292ae6a008c3ac7807e01f934b375b763d5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# policy: Any\n\ncfn_rest_api_props = apigateway.CfnRestApiProps(\n    api_key_source_type=\"apiKeySourceType\",\n    binary_media_types=[\"binaryMediaTypes\"],\n    body=body,\n    body_s3_location=apigateway.CfnRestApi.S3LocationProperty(\n        bucket=\"bucket\",\n        e_tag=\"eTag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    clone_from=\"cloneFrom\",\n    description=\"description\",\n    disable_execute_api_endpoint=False,\n    endpoint_configuration=apigateway.CfnRestApi.EndpointConfigurationProperty(\n        types=[\"types\"],\n        vpc_endpoint_ids=[\"vpcEndpointIds\"]\n    ),\n    fail_on_warnings=False,\n    minimum_compression_size=123,\n    mode=\"mode\",\n    name=\"name\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar policy;\n\nCfnRestApiProps cfnRestApiProps = new CfnRestApiProps {\n    ApiKeySourceType = \"apiKeySourceType\",\n    BinaryMediaTypes = new [] { \"binaryMediaTypes\" },\n    Body = body,\n    BodyS3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        ETag = \"eTag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CloneFrom = \"cloneFrom\",\n    Description = \"description\",\n    DisableExecuteApiEndpoint = false,\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" },\n        VpcEndpointIds = new [] { \"vpcEndpointIds\" }\n    },\n    FailOnWarnings = false,\n    MinimumCompressionSize = 123,\n    Mode = \"mode\",\n    Name = \"name\",\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policy,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject policy;\n\nCfnRestApiProps cfnRestApiProps = CfnRestApiProps.builder()\n        .apiKeySourceType(\"apiKeySourceType\")\n        .binaryMediaTypes(List.of(\"binaryMediaTypes\"))\n        .body(body)\n        .bodyS3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .eTag(\"eTag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .cloneFrom(\"cloneFrom\")\n        .description(\"description\")\n        .disableExecuteApiEndpoint(false)\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .vpcEndpointIds(List.of(\"vpcEndpointIds\"))\n                .build())\n        .failOnWarnings(false)\n        .minimumCompressionSize(123)\n        .mode(\"mode\")\n        .name(\"name\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policy)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\nconst cfnRestApiProps: apigateway.CfnRestApiProps = {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRestApiProps: apigateway.CfnRestApiProps = {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 16,
        "75": 32,
        "91": 2,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 5,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "fcca66f511274468c3ba0cd49039f12f2cb79954a6fb8f6fa3fbda593c01efa3"
    },
    "f2e829d4b97ec6ae8b977a1b33803e754c917534c57bcb2f8bea37b64d136808": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_models: Any\n# response_parameters: Any\n\ncfn_route_response_v2 = apigateway.CfnRouteResponseV2(self, \"MyCfnRouteResponseV2\",\n    api_id=\"apiId\",\n    route_id=\"routeId\",\n    route_response_key=\"routeResponseKey\",\n\n    # the properties below are optional\n    model_selection_expression=\"modelSelectionExpression\",\n    response_models=response_models,\n    response_parameters=response_parameters\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseModels;\nvar responseParameters;\n\nCfnRouteResponseV2 cfnRouteResponseV2 = new CfnRouteResponseV2(this, \"MyCfnRouteResponseV2\", new CfnRouteResponseV2Props {\n    ApiId = \"apiId\",\n    RouteId = \"routeId\",\n    RouteResponseKey = \"routeResponseKey\",\n\n    // the properties below are optional\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    ResponseModels = responseModels,\n    ResponseParameters = responseParameters\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseModels;\nObject responseParameters;\n\nCfnRouteResponseV2 cfnRouteResponseV2 = CfnRouteResponseV2.Builder.create(this, \"MyCfnRouteResponseV2\")\n        .apiId(\"apiId\")\n        .routeId(\"routeId\")\n        .routeResponseKey(\"routeResponseKey\")\n\n        // the properties below are optional\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .responseModels(responseModels)\n        .responseParameters(responseParameters)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\nconst cfnRouteResponseV2 = new apigateway.CfnRouteResponseV2(this, 'MyCfnRouteResponseV2', {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRouteResponseV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRouteResponseV2",
        "@aws-cdk/aws-apigateway.CfnRouteResponseV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteResponseV2 = new apigateway.CfnRouteResponseV2(this, 'MyCfnRouteResponseV2', {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "125": 2,
        "130": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "66f1f35eddb763479b53ce6ff54cd68354b492312a159eacfa8a37dc15acc9bc"
    },
    "61bb569a759345f4a793a715e046642d1894116c19ca50cb5701b1e9cf093eb7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nparameter_constraints_property = apigateway.CfnRouteResponseV2.ParameterConstraintsProperty(\n    required=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nParameterConstraintsProperty parameterConstraintsProperty = new ParameterConstraintsProperty {\n    Required = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nParameterConstraintsProperty parameterConstraintsProperty = ParameterConstraintsProperty.builder()\n        .required(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst parameterConstraintsProperty: apigateway.CfnRouteResponseV2.ParameterConstraintsProperty = {\n  required: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRouteResponseV2.ParameterConstraintsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRouteResponseV2.ParameterConstraintsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterConstraintsProperty: apigateway.CfnRouteResponseV2.ParameterConstraintsProperty = {\n  required: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c6211440f0923f2d81bee35cdf69f838151f5aee6dbc516e875c6ffb2c6ba52e"
    },
    "75548fb54899727edad053e364b41f45b40ecd434db051cb47c6500cfe489250": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_models: Any\n# response_parameters: Any\n\ncfn_route_response_v2_props = apigateway.CfnRouteResponseV2Props(\n    api_id=\"apiId\",\n    route_id=\"routeId\",\n    route_response_key=\"routeResponseKey\",\n\n    # the properties below are optional\n    model_selection_expression=\"modelSelectionExpression\",\n    response_models=response_models,\n    response_parameters=response_parameters\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseModels;\nvar responseParameters;\n\nCfnRouteResponseV2Props cfnRouteResponseV2Props = new CfnRouteResponseV2Props {\n    ApiId = \"apiId\",\n    RouteId = \"routeId\",\n    RouteResponseKey = \"routeResponseKey\",\n\n    // the properties below are optional\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    ResponseModels = responseModels,\n    ResponseParameters = responseParameters\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseModels;\nObject responseParameters;\n\nCfnRouteResponseV2Props cfnRouteResponseV2Props = CfnRouteResponseV2Props.builder()\n        .apiId(\"apiId\")\n        .routeId(\"routeId\")\n        .routeResponseKey(\"routeResponseKey\")\n\n        // the properties below are optional\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .responseModels(responseModels)\n        .responseParameters(responseParameters)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\nconst cfnRouteResponseV2Props: apigateway.CfnRouteResponseV2Props = {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRouteResponseV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRouteResponseV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteResponseV2Props: apigateway.CfnRouteResponseV2Props = {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "024d59836e2aa69db10728fa415394c0e91f03366281b3f58edc05bf421d352a"
    },
    "1942c743178d77513627e8dbc9281908567787854a88657262c35f37bcc027ad": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_models: Any\n# request_parameters: Any\n\ncfn_route_v2 = apigateway.CfnRouteV2(self, \"MyCfnRouteV2\",\n    api_id=\"apiId\",\n    route_key=\"routeKey\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    model_selection_expression=\"modelSelectionExpression\",\n    operation_name=\"operationName\",\n    request_models=request_models,\n    request_parameters=request_parameters,\n    route_response_selection_expression=\"routeResponseSelectionExpression\",\n    target=\"target\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestModels;\nvar requestParameters;\n\nCfnRouteV2 cfnRouteV2 = new CfnRouteV2(this, \"MyCfnRouteV2\", new CfnRouteV2Props {\n    ApiId = \"apiId\",\n    RouteKey = \"routeKey\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    OperationName = \"operationName\",\n    RequestModels = requestModels,\n    RequestParameters = requestParameters,\n    RouteResponseSelectionExpression = \"routeResponseSelectionExpression\",\n    Target = \"target\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestModels;\nObject requestParameters;\n\nCfnRouteV2 cfnRouteV2 = CfnRouteV2.Builder.create(this, \"MyCfnRouteV2\")\n        .apiId(\"apiId\")\n        .routeKey(\"routeKey\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .operationName(\"operationName\")\n        .requestModels(requestModels)\n        .requestParameters(requestParameters)\n        .routeResponseSelectionExpression(\"routeResponseSelectionExpression\")\n        .target(\"target\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\nconst cfnRouteV2 = new apigateway.CfnRouteV2(this, 'MyCfnRouteV2', {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRouteV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRouteV2",
        "@aws-cdk/aws-apigateway.CfnRouteV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteV2 = new apigateway.CfnRouteV2(this, 'MyCfnRouteV2', {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 20,
        "91": 1,
        "104": 1,
        "125": 2,
        "130": 2,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3fee0b3bb89aa5385b68aa5a48e183cacf8fd45a24d1378fac62314e7a52fc46"
    },
    "5513d3b06325d17c287f8efd78b8f49407e646afd42cad18b4935f0f25f31eae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nparameter_constraints_property = apigateway.CfnRouteV2.ParameterConstraintsProperty(\n    required=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nParameterConstraintsProperty parameterConstraintsProperty = new ParameterConstraintsProperty {\n    Required = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nParameterConstraintsProperty parameterConstraintsProperty = ParameterConstraintsProperty.builder()\n        .required(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst parameterConstraintsProperty: apigateway.CfnRouteV2.ParameterConstraintsProperty = {\n  required: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRouteV2.ParameterConstraintsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRouteV2.ParameterConstraintsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterConstraintsProperty: apigateway.CfnRouteV2.ParameterConstraintsProperty = {\n  required: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ed9b48261ca1b21558f6654666c4dd69921326190d2717813257c6b894f08dbe"
    },
    "3bc5486744c44a1fe9d909ea05396e2f4c6ab07f28dbcbb10e3bc144657fdb30": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_models: Any\n# request_parameters: Any\n\ncfn_route_v2_props = apigateway.CfnRouteV2Props(\n    api_id=\"apiId\",\n    route_key=\"routeKey\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    model_selection_expression=\"modelSelectionExpression\",\n    operation_name=\"operationName\",\n    request_models=request_models,\n    request_parameters=request_parameters,\n    route_response_selection_expression=\"routeResponseSelectionExpression\",\n    target=\"target\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestModels;\nvar requestParameters;\n\nCfnRouteV2Props cfnRouteV2Props = new CfnRouteV2Props {\n    ApiId = \"apiId\",\n    RouteKey = \"routeKey\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    OperationName = \"operationName\",\n    RequestModels = requestModels,\n    RequestParameters = requestParameters,\n    RouteResponseSelectionExpression = \"routeResponseSelectionExpression\",\n    Target = \"target\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestModels;\nObject requestParameters;\n\nCfnRouteV2Props cfnRouteV2Props = CfnRouteV2Props.builder()\n        .apiId(\"apiId\")\n        .routeKey(\"routeKey\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .operationName(\"operationName\")\n        .requestModels(requestModels)\n        .requestParameters(requestParameters)\n        .routeResponseSelectionExpression(\"routeResponseSelectionExpression\")\n        .target(\"target\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\nconst cfnRouteV2Props: apigateway.CfnRouteV2Props = {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnRouteV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnRouteV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteV2Props: apigateway.CfnRouteV2Props = {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 20,
        "91": 1,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "c4e7f243908115a096e3ebb785d8ea14c3cde34971bc0ac4514ce6889b6c8dec"
    },
    "5e28006b7bed0808f89ef751f643afb335de19b8d7ace86763707b4e451127f6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_stage = apigateway.CfnStage(self, \"MyCfnStage\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    access_log_setting=apigateway.CfnStage.AccessLogSettingProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    cache_cluster_enabled=False,\n    cache_cluster_size=\"cacheClusterSize\",\n    canary_setting=apigateway.CfnStage.CanarySettingProperty(\n        deployment_id=\"deploymentId\",\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    client_certificate_id=\"clientCertificateId\",\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    documentation_version=\"documentationVersion\",\n    method_settings=[apigateway.CfnStage.MethodSettingProperty(\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        data_trace_enabled=False,\n        http_method=\"httpMethod\",\n        logging_level=\"loggingLevel\",\n        metrics_enabled=False,\n        resource_path=\"resourcePath\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    )],\n    stage_name=\"stageName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tracing_enabled=False,\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnStage cfnStage = new CfnStage(this, \"MyCfnStage\", new CfnStageProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    AccessLogSetting = new AccessLogSettingProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    CacheClusterEnabled = false,\n    CacheClusterSize = \"cacheClusterSize\",\n    CanarySetting = new CanarySettingProperty {\n        DeploymentId = \"deploymentId\",\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    ClientCertificateId = \"clientCertificateId\",\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    DocumentationVersion = \"documentationVersion\",\n    MethodSettings = new [] { new MethodSettingProperty {\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        DataTraceEnabled = false,\n        HttpMethod = \"httpMethod\",\n        LoggingLevel = \"loggingLevel\",\n        MetricsEnabled = false,\n        ResourcePath = \"resourcePath\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    } },\n    StageName = \"stageName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TracingEnabled = false,\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnStage cfnStage = CfnStage.Builder.create(this, \"MyCfnStage\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .accessLogSetting(AccessLogSettingProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .cacheClusterEnabled(false)\n        .cacheClusterSize(\"cacheClusterSize\")\n        .canarySetting(CanarySettingProperty.builder()\n                .deploymentId(\"deploymentId\")\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .clientCertificateId(\"clientCertificateId\")\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .documentationVersion(\"documentationVersion\")\n        .methodSettings(List.of(MethodSettingProperty.builder()\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .dataTraceEnabled(false)\n                .httpMethod(\"httpMethod\")\n                .loggingLevel(\"loggingLevel\")\n                .metricsEnabled(false)\n                .resourcePath(\"resourcePath\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build()))\n        .stageName(\"stageName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tracingEnabled(false)\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnStage = new apigateway.CfnStage(this, 'MyCfnStage', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStage",
        "@aws-cdk/aws-apigateway.CfnStageProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStage = new apigateway.CfnStage(this, 'MyCfnStage', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 19,
        "75": 38,
        "91": 7,
        "104": 1,
        "192": 2,
        "193": 7,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 34,
        "290": 1
      },
      "fqnsFingerprint": "fa1b31dab36bca53ca978034b9fc75218d03391f85e7490b30f2a5212e827bc2"
    },
    "41cbc4dd90a6d793d976f17cf62a602693fa2bef0d988ff2049794881d2657a6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_setting_property = apigateway.CfnStage.AccessLogSettingProperty(\n    destination_arn=\"destinationArn\",\n    format=\"format\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nAccessLogSettingProperty accessLogSettingProperty = new AccessLogSettingProperty {\n    DestinationArn = \"destinationArn\",\n    Format = \"format\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogSettingProperty accessLogSettingProperty = AccessLogSettingProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .format(\"format\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogSettingProperty: apigateway.CfnStage.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStage.AccessLogSettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStage.AccessLogSettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogSettingProperty: apigateway.CfnStage.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "eaf04cf83b5fc0deb7bcdd945ef19a8bdc33159a40088c826de42b862e464eed"
    },
    "0ec4aa5134bbad7ae333f12ba92731a1f320dd74cb6e26190cb30a0e505c50b3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncanary_setting_property = apigateway.CfnStage.CanarySettingProperty(\n    deployment_id=\"deploymentId\",\n    percent_traffic=123,\n    stage_variable_overrides={\n        \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n    },\n    use_stage_cache=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCanarySettingProperty canarySettingProperty = new CanarySettingProperty {\n    DeploymentId = \"deploymentId\",\n    PercentTraffic = 123,\n    StageVariableOverrides = new Dictionary<string, string> {\n        { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n    },\n    UseStageCache = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCanarySettingProperty canarySettingProperty = CanarySettingProperty.builder()\n        .deploymentId(\"deploymentId\")\n        .percentTraffic(123)\n        .stageVariableOverrides(Map.of(\n                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n        .useStageCache(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst canarySettingProperty: apigateway.CfnStage.CanarySettingProperty = {\n  deploymentId: 'deploymentId',\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStage.CanarySettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStage.CanarySettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst canarySettingProperty: apigateway.CfnStage.CanarySettingProperty = {\n  deploymentId: 'deploymentId',\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fd6d25cc6d2bb57a6fe049d30ebed3da163d5b00559c30b3854ea5165c07f046"
    },
    "ddff2cb37701ebaf128f319c9bbbd25619be5171fca6e3d4da1cb26f157cb1ec": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmethod_setting_property = apigateway.CfnStage.MethodSettingProperty(\n    cache_data_encrypted=False,\n    cache_ttl_in_seconds=123,\n    caching_enabled=False,\n    data_trace_enabled=False,\n    http_method=\"httpMethod\",\n    logging_level=\"loggingLevel\",\n    metrics_enabled=False,\n    resource_path=\"resourcePath\",\n    throttling_burst_limit=123,\n    throttling_rate_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nMethodSettingProperty methodSettingProperty = new MethodSettingProperty {\n    CacheDataEncrypted = false,\n    CacheTtlInSeconds = 123,\n    CachingEnabled = false,\n    DataTraceEnabled = false,\n    HttpMethod = \"httpMethod\",\n    LoggingLevel = \"loggingLevel\",\n    MetricsEnabled = false,\n    ResourcePath = \"resourcePath\",\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethodSettingProperty methodSettingProperty = MethodSettingProperty.builder()\n        .cacheDataEncrypted(false)\n        .cacheTtlInSeconds(123)\n        .cachingEnabled(false)\n        .dataTraceEnabled(false)\n        .httpMethod(\"httpMethod\")\n        .loggingLevel(\"loggingLevel\")\n        .metricsEnabled(false)\n        .resourcePath(\"resourcePath\")\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst methodSettingProperty: apigateway.CfnStage.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStage.MethodSettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStage.MethodSettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodSettingProperty: apigateway.CfnStage.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 15,
        "91": 4,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "80522c3d590a77bfe534036856cfa584d4e49aa1055ccd09c87264702a5e31cd"
    },
    "7b46a9999d70a71ad7d6c1ec8daea148e70a1c603aeb2e3b6fabae08d355a5db": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_stage_props = apigateway.CfnStageProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    access_log_setting=apigateway.CfnStage.AccessLogSettingProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    cache_cluster_enabled=False,\n    cache_cluster_size=\"cacheClusterSize\",\n    canary_setting=apigateway.CfnStage.CanarySettingProperty(\n        deployment_id=\"deploymentId\",\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    client_certificate_id=\"clientCertificateId\",\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    documentation_version=\"documentationVersion\",\n    method_settings=[apigateway.CfnStage.MethodSettingProperty(\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        data_trace_enabled=False,\n        http_method=\"httpMethod\",\n        logging_level=\"loggingLevel\",\n        metrics_enabled=False,\n        resource_path=\"resourcePath\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    )],\n    stage_name=\"stageName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tracing_enabled=False,\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnStageProps cfnStageProps = new CfnStageProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    AccessLogSetting = new AccessLogSettingProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    CacheClusterEnabled = false,\n    CacheClusterSize = \"cacheClusterSize\",\n    CanarySetting = new CanarySettingProperty {\n        DeploymentId = \"deploymentId\",\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    ClientCertificateId = \"clientCertificateId\",\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    DocumentationVersion = \"documentationVersion\",\n    MethodSettings = new [] { new MethodSettingProperty {\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        DataTraceEnabled = false,\n        HttpMethod = \"httpMethod\",\n        LoggingLevel = \"loggingLevel\",\n        MetricsEnabled = false,\n        ResourcePath = \"resourcePath\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    } },\n    StageName = \"stageName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TracingEnabled = false,\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnStageProps cfnStageProps = CfnStageProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .accessLogSetting(AccessLogSettingProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .cacheClusterEnabled(false)\n        .cacheClusterSize(\"cacheClusterSize\")\n        .canarySetting(CanarySettingProperty.builder()\n                .deploymentId(\"deploymentId\")\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .clientCertificateId(\"clientCertificateId\")\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .documentationVersion(\"documentationVersion\")\n        .methodSettings(List.of(MethodSettingProperty.builder()\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .dataTraceEnabled(false)\n                .httpMethod(\"httpMethod\")\n                .loggingLevel(\"loggingLevel\")\n                .metricsEnabled(false)\n                .resourcePath(\"resourcePath\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build()))\n        .stageName(\"stageName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tracingEnabled(false)\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnStageProps: apigateway.CfnStageProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStageProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStageProps: apigateway.CfnStageProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 18,
        "75": 38,
        "91": 7,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 34,
        "290": 1
      },
      "fqnsFingerprint": "418c75a4303c26b237ad8f1d11f7028ef13d37d0bbf96ad342488737588c6526"
    },
    "53ae99ddd09f1cf5accf4cdf38060fdb31d67cd7602b035e4110d89d0134176a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# route_settings: Any\n# stage_variables: Any\n# tags: Any\n\ncfn_stage_v2 = apigateway.CfnStageV2(self, \"MyCfnStageV2\",\n    api_id=\"apiId\",\n    stage_name=\"stageName\",\n\n    # the properties below are optional\n    access_log_settings=apigateway.CfnStageV2.AccessLogSettingsProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    auto_deploy=False,\n    client_certificate_id=\"clientCertificateId\",\n    default_route_settings=apigateway.CfnStageV2.RouteSettingsProperty(\n        data_trace_enabled=False,\n        detailed_metrics_enabled=False,\n        logging_level=\"loggingLevel\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    ),\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    route_settings=route_settings,\n    stage_variables=stage_variables,\n    tags=tags\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar routeSettings;\nvar stageVariables;\nvar tags;\n\nCfnStageV2 cfnStageV2 = new CfnStageV2(this, \"MyCfnStageV2\", new CfnStageV2Props {\n    ApiId = \"apiId\",\n    StageName = \"stageName\",\n\n    // the properties below are optional\n    AccessLogSettings = new AccessLogSettingsProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    AutoDeploy = false,\n    ClientCertificateId = \"clientCertificateId\",\n    DefaultRouteSettings = new RouteSettingsProperty {\n        DataTraceEnabled = false,\n        DetailedMetricsEnabled = false,\n        LoggingLevel = \"loggingLevel\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    },\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    RouteSettings = routeSettings,\n    StageVariables = stageVariables,\n    Tags = tags\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject routeSettings;\nObject stageVariables;\nObject tags;\n\nCfnStageV2 cfnStageV2 = CfnStageV2.Builder.create(this, \"MyCfnStageV2\")\n        .apiId(\"apiId\")\n        .stageName(\"stageName\")\n\n        // the properties below are optional\n        .accessLogSettings(AccessLogSettingsProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .autoDeploy(false)\n        .clientCertificateId(\"clientCertificateId\")\n        .defaultRouteSettings(RouteSettingsProperty.builder()\n                .dataTraceEnabled(false)\n                .detailedMetricsEnabled(false)\n                .loggingLevel(\"loggingLevel\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build())\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .routeSettings(routeSettings)\n        .stageVariables(stageVariables)\n        .tags(tags)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\nconst cfnStageV2 = new apigateway.CfnStageV2(this, 'MyCfnStageV2', {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStageV2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStageV2",
        "@aws-cdk/aws-apigateway.CfnStageV2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStageV2 = new apigateway.CfnStageV2(this, 'MyCfnStageV2', {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 28,
        "91": 3,
        "104": 1,
        "125": 3,
        "130": 3,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "e2f3a95248955e6036425c2aefbe60b3d2a8158be983b0992f45e4af93098bac"
    },
    "ca21c35e4324a2fb2a33592211257aa97df061ae477cc7644dbd92ff00cd3418": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_settings_property = apigateway.CfnStageV2.AccessLogSettingsProperty(\n    destination_arn=\"destinationArn\",\n    format=\"format\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nAccessLogSettingsProperty accessLogSettingsProperty = new AccessLogSettingsProperty {\n    DestinationArn = \"destinationArn\",\n    Format = \"format\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogSettingsProperty accessLogSettingsProperty = AccessLogSettingsProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .format(\"format\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogSettingsProperty: apigateway.CfnStageV2.AccessLogSettingsProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStageV2.AccessLogSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStageV2.AccessLogSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogSettingsProperty: apigateway.CfnStageV2.AccessLogSettingsProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fd27004566bcaa64b726b725025faa328063655e6fe1ff90258ae596855acb95"
    },
    "c93e28fe7361ad1b59e258286cb05baf220730fae49f9d3b28072a10197f7745": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nroute_settings_property = apigateway.CfnStageV2.RouteSettingsProperty(\n    data_trace_enabled=False,\n    detailed_metrics_enabled=False,\n    logging_level=\"loggingLevel\",\n    throttling_burst_limit=123,\n    throttling_rate_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRouteSettingsProperty routeSettingsProperty = new RouteSettingsProperty {\n    DataTraceEnabled = false,\n    DetailedMetricsEnabled = false,\n    LoggingLevel = \"loggingLevel\",\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRouteSettingsProperty routeSettingsProperty = RouteSettingsProperty.builder()\n        .dataTraceEnabled(false)\n        .detailedMetricsEnabled(false)\n        .loggingLevel(\"loggingLevel\")\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst routeSettingsProperty: apigateway.CfnStageV2.RouteSettingsProperty = {\n  dataTraceEnabled: false,\n  detailedMetricsEnabled: false,\n  loggingLevel: 'loggingLevel',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStageV2.RouteSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStageV2.RouteSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst routeSettingsProperty: apigateway.CfnStageV2.RouteSettingsProperty = {\n  dataTraceEnabled: false,\n  detailedMetricsEnabled: false,\n  loggingLevel: 'loggingLevel',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 10,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "67cf1d13b590e1c78aa4a335908ab7bc259555893cf76f835b05905d2b70f18b"
    },
    "f250f9813b76f588f2f5316975b6cc4bf5c286a8c68d051c18ea13c42e34c14a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# route_settings: Any\n# stage_variables: Any\n# tags: Any\n\ncfn_stage_v2_props = apigateway.CfnStageV2Props(\n    api_id=\"apiId\",\n    stage_name=\"stageName\",\n\n    # the properties below are optional\n    access_log_settings=apigateway.CfnStageV2.AccessLogSettingsProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    auto_deploy=False,\n    client_certificate_id=\"clientCertificateId\",\n    default_route_settings=apigateway.CfnStageV2.RouteSettingsProperty(\n        data_trace_enabled=False,\n        detailed_metrics_enabled=False,\n        logging_level=\"loggingLevel\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    ),\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    route_settings=route_settings,\n    stage_variables=stage_variables,\n    tags=tags\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar routeSettings;\nvar stageVariables;\nvar tags;\n\nCfnStageV2Props cfnStageV2Props = new CfnStageV2Props {\n    ApiId = \"apiId\",\n    StageName = \"stageName\",\n\n    // the properties below are optional\n    AccessLogSettings = new AccessLogSettingsProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    AutoDeploy = false,\n    ClientCertificateId = \"clientCertificateId\",\n    DefaultRouteSettings = new RouteSettingsProperty {\n        DataTraceEnabled = false,\n        DetailedMetricsEnabled = false,\n        LoggingLevel = \"loggingLevel\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    },\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    RouteSettings = routeSettings,\n    StageVariables = stageVariables,\n    Tags = tags\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject routeSettings;\nObject stageVariables;\nObject tags;\n\nCfnStageV2Props cfnStageV2Props = CfnStageV2Props.builder()\n        .apiId(\"apiId\")\n        .stageName(\"stageName\")\n\n        // the properties below are optional\n        .accessLogSettings(AccessLogSettingsProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .autoDeploy(false)\n        .clientCertificateId(\"clientCertificateId\")\n        .defaultRouteSettings(RouteSettingsProperty.builder()\n                .dataTraceEnabled(false)\n                .detailedMetricsEnabled(false)\n                .loggingLevel(\"loggingLevel\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build())\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .routeSettings(routeSettings)\n        .stageVariables(stageVariables)\n        .tags(tags)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\nconst cfnStageV2Props: apigateway.CfnStageV2Props = {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnStageV2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnStageV2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStageV2Props: apigateway.CfnStageV2Props = {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 28,
        "91": 3,
        "125": 3,
        "130": 3,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "427d6217e35d8d0de34e11444fdb33a3166e5a1d4686ca072393cdc2b4df0930"
    },
    "763f7df1f662b3a7b0e92eccc918fd0c6bb63e60ec0220234f77cf1d74e1dc94": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan = apigateway.CfnUsagePlan(self, \"MyCfnUsagePlan\",\n    api_stages=[apigateway.CfnUsagePlan.ApiStageProperty(\n        api_id=\"apiId\",\n        stage=\"stage\",\n        throttle={\n            \"throttle_key\": apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n                burst_limit=123,\n                rate_limit=123\n            )\n        }\n    )],\n    description=\"description\",\n    quota=apigateway.CfnUsagePlan.QuotaSettingsProperty(\n        limit=123,\n        offset=123,\n        period=\"period\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throttle=apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n        burst_limit=123,\n        rate_limit=123\n    ),\n    usage_plan_name=\"usagePlanName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnUsagePlan cfnUsagePlan = new CfnUsagePlan(this, \"MyCfnUsagePlan\", new CfnUsagePlanProps {\n    ApiStages = new [] { new ApiStageProperty {\n        ApiId = \"apiId\",\n        Stage = \"stage\",\n        Throttle = new Dictionary<string, object> {\n            { \"throttleKey\", new ThrottleSettingsProperty {\n                BurstLimit = 123,\n                RateLimit = 123\n            } }\n        }\n    } },\n    Description = \"description\",\n    Quota = new QuotaSettingsProperty {\n        Limit = 123,\n        Offset = 123,\n        Period = \"period\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Throttle = new ThrottleSettingsProperty {\n        BurstLimit = 123,\n        RateLimit = 123\n    },\n    UsagePlanName = \"usagePlanName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlan cfnUsagePlan = CfnUsagePlan.Builder.create(this, \"MyCfnUsagePlan\")\n        .apiStages(List.of(ApiStageProperty.builder()\n                .apiId(\"apiId\")\n                .stage(\"stage\")\n                .throttle(Map.of(\n                        \"throttleKey\", ThrottleSettingsProperty.builder()\n                                .burstLimit(123)\n                                .rateLimit(123)\n                                .build()))\n                .build()))\n        .description(\"description\")\n        .quota(QuotaSettingsProperty.builder()\n                .limit(123)\n                .offset(123)\n                .period(\"period\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throttle(ThrottleSettingsProperty.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .usagePlanName(\"usagePlanName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlan = new apigateway.CfnUsagePlan(this, 'MyCfnUsagePlan', /* all optional props */ {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlan"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlan",
        "@aws-cdk/aws-apigateway.CfnUsagePlanProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlan = new apigateway.CfnUsagePlan(this, 'MyCfnUsagePlan', /* all optional props */ {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 9,
        "75": 23,
        "104": 1,
        "192": 2,
        "193": 7,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "fb792d3da735a0015f10a4ab4d76877789997a62fae7f544f721da34657b3a0d"
    },
    "56d648d8feeea84fad3883c98c7731c1dd0cf514c647192e43bf1f092e560146": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\napi_stage_property = apigateway.CfnUsagePlan.ApiStageProperty(\n    api_id=\"apiId\",\n    stage=\"stage\",\n    throttle={\n        \"throttle_key\": apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n            burst_limit=123,\n            rate_limit=123\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nApiStageProperty apiStageProperty = new ApiStageProperty {\n    ApiId = \"apiId\",\n    Stage = \"stage\",\n    Throttle = new Dictionary<string, object> {\n        { \"throttleKey\", new ThrottleSettingsProperty {\n            BurstLimit = 123,\n            RateLimit = 123\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nApiStageProperty apiStageProperty = ApiStageProperty.builder()\n        .apiId(\"apiId\")\n        .stage(\"stage\")\n        .throttle(Map.of(\n                \"throttleKey\", ThrottleSettingsProperty.builder()\n                        .burstLimit(123)\n                        .rateLimit(123)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst apiStageProperty: apigateway.CfnUsagePlan.ApiStageProperty = {\n  apiId: 'apiId',\n  stage: 'stage',\n  throttle: {\n    throttleKey: {\n      burstLimit: 123,\n      rateLimit: 123,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlan.ApiStageProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlan.ApiStageProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiStageProperty: apigateway.CfnUsagePlan.ApiStageProperty = {\n  apiId: 'apiId',\n  stage: 'stage',\n  throttle: {\n    throttleKey: {\n      burstLimit: 123,\n      rateLimit: 123,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "2c07f335743673257ebf90a03244690f73c0dfafb5591f213b8d564226a7b459"
    },
    "021da9eec76e79626f2fc5e0159e3b90ec1eb447d43941300e64cb39d25211cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nquota_settings_property = apigateway.CfnUsagePlan.QuotaSettingsProperty(\n    limit=123,\n    offset=123,\n    period=\"period\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nQuotaSettingsProperty quotaSettingsProperty = new QuotaSettingsProperty {\n    Limit = 123,\n    Offset = 123,\n    Period = \"period\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nQuotaSettingsProperty quotaSettingsProperty = QuotaSettingsProperty.builder()\n        .limit(123)\n        .offset(123)\n        .period(\"period\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst quotaSettingsProperty: apigateway.CfnUsagePlan.QuotaSettingsProperty = {\n  limit: 123,\n  offset: 123,\n  period: 'period',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlan.QuotaSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlan.QuotaSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst quotaSettingsProperty: apigateway.CfnUsagePlan.QuotaSettingsProperty = {\n  limit: 123,\n  offset: 123,\n  period: 'period',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "38cbc95986601407854e148cfbf9160a0ed7702f3b48468f3f9417cce6d07b3e"
    },
    "1b2aa917d9bc4cf5d42d465f32443aae9bd6da3ee319d27330925bd94b74d82e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nthrottle_settings_property = apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n    burst_limit=123,\n    rate_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nThrottleSettingsProperty throttleSettingsProperty = new ThrottleSettingsProperty {\n    BurstLimit = 123,\n    RateLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nThrottleSettingsProperty throttleSettingsProperty = ThrottleSettingsProperty.builder()\n        .burstLimit(123)\n        .rateLimit(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst throttleSettingsProperty: apigateway.CfnUsagePlan.ThrottleSettingsProperty = {\n  burstLimit: 123,\n  rateLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlan.ThrottleSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlan.ThrottleSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst throttleSettingsProperty: apigateway.CfnUsagePlan.ThrottleSettingsProperty = {\n  burstLimit: 123,\n  rateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d822040f73ac8b563b9fe4c034eda8a83a153ee7666f5e3e9e91c23ccc7bc6ea"
    },
    "dc10e3beab3c954582c2a55d20e5fa58deff5990ccb41664f2416e0794853698": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan_key = apigateway.CfnUsagePlanKey(self, \"MyCfnUsagePlanKey\",\n    key_id=\"keyId\",\n    key_type=\"keyType\",\n    usage_plan_id=\"usagePlanId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnUsagePlanKey cfnUsagePlanKey = new CfnUsagePlanKey(this, \"MyCfnUsagePlanKey\", new CfnUsagePlanKeyProps {\n    KeyId = \"keyId\",\n    KeyType = \"keyType\",\n    UsagePlanId = \"usagePlanId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlanKey cfnUsagePlanKey = CfnUsagePlanKey.Builder.create(this, \"MyCfnUsagePlanKey\")\n        .keyId(\"keyId\")\n        .keyType(\"keyType\")\n        .usagePlanId(\"usagePlanId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlanKey = new apigateway.CfnUsagePlanKey(this, 'MyCfnUsagePlanKey', {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlanKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlanKey",
        "@aws-cdk/aws-apigateway.CfnUsagePlanKeyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlanKey = new apigateway.CfnUsagePlanKey(this, 'MyCfnUsagePlanKey', {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d90167c6d3dcebaa7926de433e90d99fcb4a459ef658c4178cf8990adee9cccd"
    },
    "42b723f30e4417a22b0aad194538fbcc11d62c0ca088ee0d71e8520c49b27677": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan_key_props = apigateway.CfnUsagePlanKeyProps(\n    key_id=\"keyId\",\n    key_type=\"keyType\",\n    usage_plan_id=\"usagePlanId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnUsagePlanKeyProps cfnUsagePlanKeyProps = new CfnUsagePlanKeyProps {\n    KeyId = \"keyId\",\n    KeyType = \"keyType\",\n    UsagePlanId = \"usagePlanId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlanKeyProps cfnUsagePlanKeyProps = CfnUsagePlanKeyProps.builder()\n        .keyId(\"keyId\")\n        .keyType(\"keyType\")\n        .usagePlanId(\"usagePlanId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlanKeyProps: apigateway.CfnUsagePlanKeyProps = {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlanKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlanKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlanKeyProps: apigateway.CfnUsagePlanKeyProps = {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "fab3815f399dfd4b1054666c0dd0cf2057a94ffb708a5eeb8d53826deee8dcef"
    },
    "f8d249c0466f7c291944e74495dc14f82e1d37f485d6a5859de3293e92abb68b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan_props = apigateway.CfnUsagePlanProps(\n    api_stages=[apigateway.CfnUsagePlan.ApiStageProperty(\n        api_id=\"apiId\",\n        stage=\"stage\",\n        throttle={\n            \"throttle_key\": apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n                burst_limit=123,\n                rate_limit=123\n            )\n        }\n    )],\n    description=\"description\",\n    quota=apigateway.CfnUsagePlan.QuotaSettingsProperty(\n        limit=123,\n        offset=123,\n        period=\"period\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throttle=apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n        burst_limit=123,\n        rate_limit=123\n    ),\n    usage_plan_name=\"usagePlanName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnUsagePlanProps cfnUsagePlanProps = new CfnUsagePlanProps {\n    ApiStages = new [] { new ApiStageProperty {\n        ApiId = \"apiId\",\n        Stage = \"stage\",\n        Throttle = new Dictionary<string, object> {\n            { \"throttleKey\", new ThrottleSettingsProperty {\n                BurstLimit = 123,\n                RateLimit = 123\n            } }\n        }\n    } },\n    Description = \"description\",\n    Quota = new QuotaSettingsProperty {\n        Limit = 123,\n        Offset = 123,\n        Period = \"period\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Throttle = new ThrottleSettingsProperty {\n        BurstLimit = 123,\n        RateLimit = 123\n    },\n    UsagePlanName = \"usagePlanName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlanProps cfnUsagePlanProps = CfnUsagePlanProps.builder()\n        .apiStages(List.of(ApiStageProperty.builder()\n                .apiId(\"apiId\")\n                .stage(\"stage\")\n                .throttle(Map.of(\n                        \"throttleKey\", ThrottleSettingsProperty.builder()\n                                .burstLimit(123)\n                                .rateLimit(123)\n                                .build()))\n                .build()))\n        .description(\"description\")\n        .quota(QuotaSettingsProperty.builder()\n                .limit(123)\n                .offset(123)\n                .period(\"period\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throttle(ThrottleSettingsProperty.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .usagePlanName(\"usagePlanName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlanProps: apigateway.CfnUsagePlanProps = {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnUsagePlanProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnUsagePlanProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlanProps: apigateway.CfnUsagePlanProps = {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 8,
        "75": 23,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "ffb051d3f65712f27fadd8fdf645effd9b2c4e50d5d6b05ac9e39c098196a645"
    },
    "2efc3f1ea69a5791acf8168871d48f49d704ec8c22aacdd02dbb28f9dbf8ec54": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_vpc_link = apigateway.CfnVpcLink(self, \"MyCfnVpcLink\",\n    name=\"name\",\n    target_arns=[\"targetArns\"],\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnVpcLink cfnVpcLink = new CfnVpcLink(this, \"MyCfnVpcLink\", new CfnVpcLinkProps {\n    Name = \"name\",\n    TargetArns = new [] { \"targetArns\" },\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnVpcLink cfnVpcLink = CfnVpcLink.Builder.create(this, \"MyCfnVpcLink\")\n        .name(\"name\")\n        .targetArns(List.of(\"targetArns\"))\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnVpcLink = new apigateway.CfnVpcLink(this, 'MyCfnVpcLink', {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnVpcLink"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnVpcLink",
        "@aws-cdk/aws-apigateway.CfnVpcLinkProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVpcLink = new apigateway.CfnVpcLink(this, 'MyCfnVpcLink', {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "34bb2579a837e7c637a4698eee3af0c6acd63fdc0acacdf748b5a5114559ac69"
    },
    "c0c75ba5917e126d26bfc402967973c7ddc6a6f0176c0a322d153aa15b091a6d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_vpc_link_props = apigateway.CfnVpcLinkProps(\n    name=\"name\",\n    target_arns=[\"targetArns\"],\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nCfnVpcLinkProps cfnVpcLinkProps = new CfnVpcLinkProps {\n    Name = \"name\",\n    TargetArns = new [] { \"targetArns\" },\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnVpcLinkProps cfnVpcLinkProps = CfnVpcLinkProps.builder()\n        .name(\"name\")\n        .targetArns(List.of(\"targetArns\"))\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnVpcLinkProps: apigateway.CfnVpcLinkProps = {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CfnVpcLinkProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CfnVpcLinkProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVpcLinkProps: apigateway.CfnVpcLinkProps = {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "3ee6e277b8e9829f5282c318ff26ac6832b4433db936adf4b43869fdbc03ea5e"
    },
    "d73fc0e20e76314d7b0fe38b45bdea2e2394253bb291b2af35c775ff1bd39f4e": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "482ca140fdde024354755f392f8dca51f3e5fdcda6425ba1ab4e5933ae73dcc1"
    },
    "b1d85685fc34a8f01b4c27420dda33f728294cb4c9ee2805580e07d7491667c4": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "482ca140fdde024354755f392f8dca51f3e5fdcda6425ba1ab4e5933ae73dcc1"
    },
    "119e57157e0efa1b9623e1c0db0cce9381ea5317e1433c0bf7ca4be4a5d5718a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ConnectionType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "127542ac7086347afc7a9fff3808efc2afec2a96fe18c4fa6b2b3fadeb40cf67"
    },
    "fa668ade48035ced59548cbba2d64008b4b452aad0e00a741a94246445fb7a84": {
      "translations": {
        "python": {
          "source": "# get_book_handler: lambda.Function\n# get_book_integration: apigateway.LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ContentHandling"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "387091d30583a53e7f3ab8688e7b8caa240c0e3c3b325d92e7288234e86c234c"
    },
    "cc4847886860c06c0bb24ae45782f5a353ba97ad7ead73a9d4d8bc2d9bbeba43": {
      "translations": {
        "python": {
          "source": "apigateway.RestApi(self, \"api\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=apigateway.Cors.ALL_ORIGINS,\n        allow_methods=apigateway.Cors.ALL_METHODS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new RestApi(this, \"api\", new RestApiProps {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = Cors.ALL_ORIGINS,\n        AllowMethods = Cors.ALL_METHODS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi.Builder.create(this, \"api\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(Cors.ALL_ORIGINS)\n                .allowMethods(Cors.ALL_METHODS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Cors"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Cors",
        "@aws-cdk/aws-apigateway.Cors#ALL_METHODS",
        "@aws-cdk/aws-apigateway.Cors#ALL_ORIGINS",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "45b9b8183e04d307590d50bbfb5ae7cc9e0beb1508d01a1c4775b7a3ccbaec91"
    },
    "b8b473831ecffa3816682650f03479780d116f750f3b256d9365e205873b1521": {
      "translations": {
        "python": {
          "source": "# my_resource: apigateway.Resource\n\n\nmy_resource.add_cors_preflight(\n    allow_origins=[\"https://amazon.com\"],\n    allow_methods=[\"GET\", \"PUT\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource myResource;\n\n\nmyResource.AddCorsPreflight(new CorsOptions {\n    AllowOrigins = new [] { \"https://amazon.com\" },\n    AllowMethods = new [] { \"GET\", \"PUT\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource myResource;\n\n\nmyResource.addCorsPreflight(CorsOptions.builder()\n        .allowOrigins(List.of(\"https://amazon.com\"))\n        .allowMethods(List.of(\"GET\", \"PUT\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myResource: apigateway.Resource;\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CorsOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addCorsPreflight"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myResource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "03d368fcb97a4e9b67cd4575364de9f35d434ed3d40d1b3f167f0973dc05d5a9"
    },
    "982f4673255df7895703893d5a00f8805683e22af3fc280c0dcbd9db5b3d03a2": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Deployment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "3f95b5b8091a47ca7f459b17d91a5c902c506c75bfe83ab4831956c97c32a0bd"
    },
    "b601ac6caa83f15d45a7e2c0de2b12a34c0b7671264df5700705d1c47a80c806": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "3f95b5b8091a47ca7f459b17d91a5c902c506c75bfe83ab4831956c97c32a0bd"
    },
    "61feee2fe6f303fe07dfe5c0a697c8215ff87fee861648db06340b04d7597163": {
      "translations": {
        "python": {
          "source": "# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14b5edb963b9558536b9abdfdf73b955d0b5f0e038e3ae312b5168a408995b2c"
    },
    "59f95fae42f5080ff7d1084de6913990b5cd731f608a35ca76ad200fd8fe2721": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ndomain_name_attributes = apigateway.DomainNameAttributes(\n    domain_name=\"domainName\",\n    domain_name_alias_hosted_zone_id=\"domainNameAliasHostedZoneId\",\n    domain_name_alias_target=\"domainNameAliasTarget\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDomainNameAttributes domainNameAttributes = new DomainNameAttributes {\n    DomainName = \"domainName\",\n    DomainNameAliasHostedZoneId = \"domainNameAliasHostedZoneId\",\n    DomainNameAliasTarget = \"domainNameAliasTarget\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainNameAttributes domainNameAttributes = DomainNameAttributes.builder()\n        .domainName(\"domainName\")\n        .domainNameAliasHostedZoneId(\"domainNameAliasHostedZoneId\")\n        .domainNameAliasTarget(\"domainNameAliasTarget\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst domainNameAttributes: apigateway.DomainNameAttributes = {\n  domainName: 'domainName',\n  domainNameAliasHostedZoneId: 'domainNameAliasHostedZoneId',\n  domainNameAliasTarget: 'domainNameAliasTarget',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainNameAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainNameAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainNameAttributes: apigateway.DomainNameAttributes = {\n  domainName: 'domainName',\n  domainNameAliasHostedZoneId: 'domainNameAliasHostedZoneId',\n  domainNameAliasTarget: 'domainNameAliasTarget',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cd77bcbb0b10e87ed66a4a22c83362c4b68425090bc1240709f952926d216842"
    },
    "e748f71a2fcb59985735f2f0576c35644ded962a84f579661841d59d02e437ba": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com: Any\n\n\napi = apigateway.RestApi(self, \"MyDomain\",\n    domain_name=apigateway.DomainNameOptions(\n        domain_name=\"example.com\",\n        certificate=acm_certificate_for_example_com\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nRestApi api = new RestApi(this, \"MyDomain\", new RestApiProps {\n    DomainName = new DomainNameOptions {\n        DomainName = \"example.com\",\n        Certificate = acmCertificateForExampleCom\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nRestApi api = RestApi.Builder.create(this, \"MyDomain\")\n        .domainName(DomainNameOptions.builder()\n                .domainName(\"example.com\")\n                .certificate(acmCertificateForExampleCom)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainNameOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainNameOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee8e4a487978bb8c922ed4598f0e4f839856d28ff6e9f03babbd48b5dd6f0529"
    },
    "8959deca8b2a7bff7509fb1169b6d5ca0e7f8f0bc24499935be314a6953c6ba9": {
      "translations": {
        "python": {
          "source": "# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14b5edb963b9558536b9abdfdf73b955d0b5f0e038e3ae312b5168a408995b2c"
    },
    "6d25fe1b8fab480d20ebb19bb44d095e42a56a3c53856ebd5c0b245c5e005b71": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nempty_model = apigateway.EmptyModel()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nEmptyModel emptyModel = new EmptyModel();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nEmptyModel emptyModel = new EmptyModel();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst emptyModel = new apigateway.EmptyModel();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.EmptyModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EmptyModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst emptyModel = new apigateway.EmptyModel();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "c90bb3c62fdfefd69b10087b2d743e23e58f932694c68a54be4f0e600184b41a"
    },
    "df373a627eea39c84a6a7a81ef92541b314ebe854f1279ec44dd33320087e1e2": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.EDGE]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.EDGE }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.EDGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.EndpointConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EndpointConfiguration",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "2c7e2948c9a5cd2fdca3a0541fed0ec60c5e52666086837c35e1680937ca7910"
    },
    "d53cbc8a78ff6cea28b66c588941fffadd429f4306f8889fc64461eef109a29f": {
      "translations": {
        "python": {
          "source": "# api_definition: apigateway.ApiDefinition\n\n\napi = apigateway.SpecRestApi(self, \"ExampleRestApi\",\n    api_definition=api_definition,\n    endpoint_types=[apigateway.EndpointType.PRIVATE]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = new SpecRestApi(this, \"ExampleRestApi\", new SpecRestApiProps {\n    ApiDefinition = apiDefinition,\n    EndpointTypes = new [] { EndpointType.PRIVATE }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"ExampleRestApi\")\n        .apiDefinition(apiDefinition)\n        .endpointTypes(List.of(EndpointType.PRIVATE))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const apiDefinition: apigateway.ApiDefinition;\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.EndpointType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#PRIVATE",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDefinition: apigateway.ApiDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "bf5c464ad7c6d122375d46ba324eba6551b5ce22e7be6a0fca2dc424a563734d"
    },
    "f12dde4ec4bcb9749bfd7edc8a4026eaf7fc6f87fc3ee95ae5820a76bc7060ca": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nerror_model = apigateway.ErrorModel()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nErrorModel errorModel = new ErrorModel();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nErrorModel errorModel = new ErrorModel();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst errorModel = new apigateway.ErrorModel();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ErrorModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ErrorModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst errorModel = new apigateway.ErrorModel();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "f83c711721553433e19b9fdff6af419b67ad39b608634d94ba7d658f9a5d79ee"
    },
    "6867492cfac69e230dfff141acbbe797f72b49c9954aceb717c58ae1fb4470ed": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_type: apigateway.ResponseType\n# rest_api: apigateway.RestApi\n\ngateway_response = apigateway.GatewayResponse(self, \"MyGatewayResponse\",\n    rest_api=rest_api,\n    type=response_type,\n\n    # the properties below are optional\n    response_headers={\n        \"response_headers_key\": \"responseHeaders\"\n    },\n    status_code=\"statusCode\",\n    templates={\n        \"templates_key\": \"templates\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nResponseType responseType;\nRestApi restApi;\n\nGatewayResponse gatewayResponse = new GatewayResponse(this, \"MyGatewayResponse\", new GatewayResponseProps {\n    RestApi = restApi,\n    Type = responseType,\n\n    // the properties below are optional\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"responseHeadersKey\", \"responseHeaders\" }\n    },\n    StatusCode = \"statusCode\",\n    Templates = new Dictionary<string, string> {\n        { \"templatesKey\", \"templates\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nResponseType responseType;\nRestApi restApi;\n\nGatewayResponse gatewayResponse = GatewayResponse.Builder.create(this, \"MyGatewayResponse\")\n        .restApi(restApi)\n        .type(responseType)\n\n        // the properties below are optional\n        .responseHeaders(Map.of(\n                \"responseHeadersKey\", \"responseHeaders\"))\n        .statusCode(\"statusCode\")\n        .templates(Map.of(\n                \"templatesKey\", \"templates\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\nconst gatewayResponse = new apigateway.GatewayResponse(this, 'MyGatewayResponse', {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.GatewayResponse"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponse",
        "@aws-cdk/aws-apigateway.GatewayResponseProps",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.ResponseType",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gatewayResponse = new apigateway.GatewayResponse(this, 'MyGatewayResponse', {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "147f001387bcd68f03f772093f1320809a55afa69c1851402ee322732a4eaf19"
    },
    "7b172229469aface363a6f4b8b3794c351d8a5e3ec2db039423a2afb8f852111": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.GatewayResponseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseOptions",
        "@aws-cdk/aws-apigateway.ResponseType",
        "@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "d44f831a6c522408ccc6131a10759e3ccf0f37ab943c71595696802064e9ea80"
    },
    "c285a6a5457990717d09f1049c53a13852ff896b79beb0b0e5dd92bbdedc5ef6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_type: apigateway.ResponseType\n# rest_api: apigateway.RestApi\n\ngateway_response_props = apigateway.GatewayResponseProps(\n    rest_api=rest_api,\n    type=response_type,\n\n    # the properties below are optional\n    response_headers={\n        \"response_headers_key\": \"responseHeaders\"\n    },\n    status_code=\"statusCode\",\n    templates={\n        \"templates_key\": \"templates\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nResponseType responseType;\nRestApi restApi;\n\nGatewayResponseProps gatewayResponseProps = new GatewayResponseProps {\n    RestApi = restApi,\n    Type = responseType,\n\n    // the properties below are optional\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"responseHeadersKey\", \"responseHeaders\" }\n    },\n    StatusCode = \"statusCode\",\n    Templates = new Dictionary<string, string> {\n        { \"templatesKey\", \"templates\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nResponseType responseType;\nRestApi restApi;\n\nGatewayResponseProps gatewayResponseProps = GatewayResponseProps.builder()\n        .restApi(restApi)\n        .type(responseType)\n\n        // the properties below are optional\n        .responseHeaders(Map.of(\n                \"responseHeadersKey\", \"responseHeaders\"))\n        .statusCode(\"statusCode\")\n        .templates(Map.of(\n                \"templatesKey\", \"templates\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\nconst gatewayResponseProps: apigateway.GatewayResponseProps = {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.GatewayResponseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseProps",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.ResponseType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gatewayResponseProps: apigateway.GatewayResponseProps = {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "adf127c6b28478be2fce8f81956d49b92b7865fdc8df43aab9a2ce2fb3b3f5e0"
    },
    "91fa7128ae8cb030ec582672a404d0feef42cc1f6c9138ed37d3a8ff0af404e9": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.HttpIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cc62851041dc2333458806df30e30d540202df9d0cd8f54380f7480cd318bd2"
    },
    "f6c953c70c85e05b3e7a65b552f3350e5d4b529b0de296a7df20fc40b18cfc4c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n# vpc_link: apigateway.VpcLink\n\nhttp_integration_props = apigateway.HttpIntegrationProps(\n    http_method=\"httpMethod\",\n    options=apigateway.IntegrationOptions(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_type=apigateway.ConnectionType.INTERNET,\n        content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n        credentials_passthrough=False,\n        credentials_role=role,\n        integration_responses=[apigateway.IntegrationResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout=cdk.Duration.minutes(30),\n        vpc_link=vpc_link\n    ),\n    proxy=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nRole role;\nVpcLink vpcLink;\nHttpIntegrationProps httpIntegrationProps = new HttpIntegrationProps {\n    HttpMethod = \"httpMethod\",\n    Options = new IntegrationOptions {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionType = ConnectionType.INTERNET,\n        ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n        CredentialsPassthrough = false,\n        CredentialsRole = role,\n        IntegrationResponses = new [] { new IntegrationResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = PassthroughBehavior.WHEN_NO_MATCH,\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        Timeout = Duration.Minutes(30),\n        VpcLink = vpcLink\n    },\n    Proxy = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\nVpcLink vpcLink;\n\nHttpIntegrationProps httpIntegrationProps = HttpIntegrationProps.builder()\n        .httpMethod(\"httpMethod\")\n        .options(IntegrationOptions.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionType(ConnectionType.INTERNET)\n                .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                .credentialsPassthrough(false)\n                .credentialsRole(role)\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.WHEN_NO_MATCH)\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeout(Duration.minutes(30))\n                .vpcLink(vpcLink)\n                .build())\n        .proxy(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\nconst httpIntegrationProps: apigateway.HttpIntegrationProps = {\n  httpMethod: 'httpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  proxy: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.HttpIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#INTERNET",
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY",
        "@aws-cdk/aws-apigateway.HttpIntegrationProps",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#WHEN_NO_MATCH",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpIntegrationProps: apigateway.HttpIntegrationProps = {\n  httpMethod: 'httpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  proxy: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 53,
        "91": 2,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 7,
        "194": 10,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "8cc92d2ae439c875f4f108d765732630bd899fc7650d6f172ae46cd594f20a2c"
    },
    "5f83b0be83ec75b43eb18466df101a4ae15ce0bd65408a825df9db372951494a": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IdentitySource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cc62851041dc2333458806df30e30d540202df9d0cd8f54380f7480cd318bd2"
    },
    "29489b426cbfc285cb909324efef20bae21a14baaffaf71a1da89019c4e845f6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# definition: Any\n\ninline_api_definition = apigateway.InlineApiDefinition(definition)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar definition;\n\nInlineApiDefinition inlineApiDefinition = new InlineApiDefinition(definition);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject definition;\n\nInlineApiDefinition inlineApiDefinition = new InlineApiDefinition(definition);",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const definition: any;\nconst inlineApiDefinition = new apigateway.InlineApiDefinition(definition);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.InlineApiDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.InlineApiDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const definition: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst inlineApiDefinition = new apigateway.InlineApiDefinition(definition);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "125": 1,
        "130": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a9f8f5f08f2a0d7a5a757cbea708897b7137148b63605a00eec3f3202fb4bb3f"
    },
    "de1258e93fd8259c85b48c1630963bf0430c7dfc2967a71ef4d71482a9255df2": {
      "translations": {
        "python": {
          "source": "# books: apigateway.Resource\n# iam_user: iam.User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Integration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.User#attachInlinePolicy",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f4d01ffc3a7d703cd0a30c96078945afc9acaefdc82ead33724ad432160f90d1"
    },
    "ad0528929121d67b4762809d74b36e277c6860deddcb15d3487a6507c06f146b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n# vpc_link: apigateway.VpcLink\n\nintegration_config = apigateway.IntegrationConfig(\n    type=apigateway.IntegrationType.AWS,\n\n    # the properties below are optional\n    deployment_token=\"deploymentToken\",\n    integration_http_method=\"integrationHttpMethod\",\n    options=apigateway.IntegrationOptions(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_type=apigateway.ConnectionType.INTERNET,\n        content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n        credentials_passthrough=False,\n        credentials_role=role,\n        integration_responses=[apigateway.IntegrationResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout=cdk.Duration.minutes(30),\n        vpc_link=vpc_link\n    ),\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nRole role;\nVpcLink vpcLink;\nIntegrationConfig integrationConfig = new IntegrationConfig {\n    Type = IntegrationType.AWS,\n\n    // the properties below are optional\n    DeploymentToken = \"deploymentToken\",\n    IntegrationHttpMethod = \"integrationHttpMethod\",\n    Options = new IntegrationOptions {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionType = ConnectionType.INTERNET,\n        ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n        CredentialsPassthrough = false,\n        CredentialsRole = role,\n        IntegrationResponses = new [] { new IntegrationResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = PassthroughBehavior.WHEN_NO_MATCH,\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        Timeout = Duration.Minutes(30),\n        VpcLink = vpcLink\n    },\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\nVpcLink vpcLink;\n\nIntegrationConfig integrationConfig = IntegrationConfig.builder()\n        .type(IntegrationType.AWS)\n\n        // the properties below are optional\n        .deploymentToken(\"deploymentToken\")\n        .integrationHttpMethod(\"integrationHttpMethod\")\n        .options(IntegrationOptions.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionType(ConnectionType.INTERNET)\n                .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                .credentialsPassthrough(false)\n                .credentialsRole(role)\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.WHEN_NO_MATCH)\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeout(Duration.minutes(30))\n                .vpcLink(vpcLink)\n                .build())\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\nconst integrationConfig: apigateway.IntegrationConfig = {\n  type: apigateway.IntegrationType.AWS,\n\n  // the properties below are optional\n  deploymentToken: 'deploymentToken',\n  integrationHttpMethod: 'integrationHttpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#INTERNET",
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.IntegrationConfig",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#AWS",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#WHEN_NO_MATCH",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationConfig: apigateway.IntegrationConfig = {\n  type: apigateway.IntegrationType.AWS,\n\n  // the properties below are optional\n  deploymentToken: 'deploymentToken',\n  integrationHttpMethod: 'integrationHttpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 58,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 7,
        "194": 12,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "40337a834eeb226bd6df1ebb65aba9ab95b23f32793986e8d12a34301e0ebfde"
    },
    "0c72c35ee2e0e2794c7934cf82a295ff6713494ba8860ae1086ca42cd005be07": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a66c09eb33b8122ca6b4dd4c78b7ee90639738f28e53f97e1b806a52a81cf444"
    },
    "82ab37307cd316e237643fac024bceb792a510ce2747af1eaeafb5308e8939f2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "127542ac7086347afc7a9fff3808efc2afec2a96fe18c4fa6b2b3fadeb40cf67"
    },
    "6befc9bc803f12ef597e46d3191bf9dfee26815443aa21ebb2b91a620a522d8c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nintegration_response = apigateway.IntegrationResponse(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    selection_pattern=\"selectionPattern\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nIntegrationResponse integrationResponse = new IntegrationResponse {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    SelectionPattern = \"selectionPattern\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nIntegrationResponse integrationResponse = IntegrationResponse.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .selectionPattern(\"selectionPattern\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst integrationResponse: apigateway.IntegrationResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationResponse"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY",
        "@aws-cdk/aws-apigateway.IntegrationResponse"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationResponse: apigateway.IntegrationResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "90700203a8a9eee93ba815f1736267e6ccbb8dda724dcbfb50dda27803717c18"
    },
    "13b4f88e62b7732df11016e75b4c70d8d06b7e63bb1097a824c8c77242c0ab83": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "127542ac7086347afc7a9fff3808efc2afec2a96fe18c4fa6b2b3fadeb40cf67"
    },
    "82d15f03520da4e56864310985d1dd83bdff9ccdfd84bb702c4791fda1a3aed7": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonSchema"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "c78357dce541cd42e028db5018f83f8da38a24059df2204d45e9d96722c7d4eb"
    },
    "52277df4eca10a66e169dd752d300835fe2717eccee3f72ffe9c26a86b5b7a5d": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonSchemaType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "c78357dce541cd42e028db5018f83f8da38a24059df2204d45e9d96722c7d4eb"
    },
    "31e240e18d9a48d8e2f25b0651bd1e52ac6d5ce42360f4922c873d8d3be5b314": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonSchemaVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "c78357dce541cd42e028db5018f83f8da38a24059df2204d45e9d96722c7d4eb"
    },
    "d3764085ac9d5168d552100a9a418f9b9f257961786db1fff6ed54072861b024": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "3f95b5b8091a47ca7f459b17d91a5c902c506c75bfe83ab4831956c97c32a0bd"
    },
    "f05c19167180e36c4a17a857f1ddcf469064ff0234df1b8e1367ca43aca95eb9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# function_: lambda.Function\n# role: iam.Role\n\nlambda_authorizer_props = apigateway.LambdaAuthorizerProps(\n    handler=function_,\n\n    # the properties below are optional\n    assume_role=role,\n    authorizer_name=\"authorizerName\",\n    results_cache_ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nFunction function_;\nRole role;\nLambdaAuthorizerProps lambdaAuthorizerProps = new LambdaAuthorizerProps {\n    Handler = function_,\n\n    // the properties below are optional\n    AssumeRole = role,\n    AuthorizerName = \"authorizerName\",\n    ResultsCacheTtl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nFunction function_;\nRole role;\n\nLambdaAuthorizerProps lambdaAuthorizerProps = LambdaAuthorizerProps.builder()\n        .handler(function_)\n\n        // the properties below are optional\n        .assumeRole(role)\n        .authorizerName(\"authorizerName\")\n        .resultsCacheTtl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const role: iam.Role;\nconst lambdaAuthorizerProps: apigateway.LambdaAuthorizerProps = {\n  handler: function_,\n\n  // the properties below are optional\n  assumeRole: role,\n  authorizerName: 'authorizerName',\n  resultsCacheTtl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaAuthorizerProps",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaAuthorizerProps: apigateway.LambdaAuthorizerProps = {\n  handler: function_,\n\n  // the properties below are optional\n  assumeRole: role,\n  authorizerName: 'authorizerName',\n  resultsCacheTtl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 22,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c6157073ec5260ed78849f498c3f08086176e7b3fa48bf5e634c8aa2bd6f47ef"
    },
    "719d9af1810f936230d7f03d2faea03667cd9818de3651aea5874208b80cd65d": {
      "translations": {
        "python": {
          "source": "# resource: apigateway.Resource\n# handler: lambda.Function\n\nresource.add_method(\"GET\", apigateway.LambdaIntegration(handler))",
          "version": "2"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nresource.AddMethod(\"GET\", new LambdaIntegration(handler));",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nresource.addMethod(\"GET\", new LambdaIntegration(handler));",
          "version": "1"
        },
        "$": {
          "source": "   declare const resource: apigateway.Resource;\n   declare const handler: lambda.Function;\n   resource.addMethod('GET', new apigateway.LambdaIntegration(handler));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n   declare const resource: apigateway.Resource;\n   declare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n   resource.addMethod('GET', new apigateway.LambdaIntegration(handler));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "892db65a0ba99671b98ccd7e6b80f6872f11c0af0cba67e6dfc7b64a95e7921c"
    },
    "0f577520710fdc1b706e7c2ffaf7a3bdc6b975973f144854df0d43af7d93c753": {
      "translations": {
        "python": {
          "source": "# get_book_handler: lambda.Function\n# get_book_integration: apigateway.LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaIntegrationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "387091d30583a53e7f3ab8688e7b8caa240c0e3c3b325d92e7288234e86c234c"
    },
    "e659a8ae22d9d799945c3bc6d0eaf442d55a3eed8041bd8862e0104ae731f725": {
      "translations": {
        "python": {
          "source": "# backend: lambda.Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Function backend;\n\nLambdaRestApi api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nResource items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nResource item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 6,
        "197": 2,
        "225": 4,
        "226": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2895404a93ee0a5ed14575a15642f12477e55a520a276e6b1f2416991498cfb8"
    },
    "7f38565073340f1ad668f744f4e19fd7e929564835bbbba7e1f6d566c93d166b": {
      "translations": {
        "python": {
          "source": "# backend: lambda.Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Function backend;\n\nLambdaRestApi api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nResource items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nResource item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 6,
        "197": 2,
        "225": 4,
        "226": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2895404a93ee0a5ed14575a15642f12477e55a520a276e6b1f2416991498cfb8"
    },
    "a87e3a2583b8ced0f40aca4194ecf0caa3ec9d41419b227a125450ab1d5514e7": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LogGroupLogDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "15": 1,
        "16": 2,
        "17": 1,
        "75": 23,
        "104": 2,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "211": 1,
        "221": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "b4941537ba333ca87c3ea3463536b2d648ea7108b482066819ff92cc80e959da"
    },
    "47477d7f0526bf0371ab6464c5446fef4c6b1ea07fd80ac9f22b2c0a480b3886": {
      "translations": {
        "python": {
          "source": "# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MTLSConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14b5edb963b9558536b9abdfdf73b955d0b5f0e038e3ae312b5168a408995b2c"
    },
    "9d72f083c60fa79e8acd20e13625b6b0fbbef6d6780be2ae916060d52b94ae2d": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Method"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6504f562bd9c2afe70f39b7281d90da034c0a570ae0a1853e05708b03fc1e63a"
    },
    "efbad89941b47c00c1486986148281930c00f341df6ed37266f6d45527182818": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\")\ndeployment = apigateway.Deployment(self, \"my-deployment\", api=api)\nstage = apigateway.Stage(self, \"my-stage\",\n    deployment=deployment,\n    method_options={\n        \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n            throttling_rate_limit=100,\n            throttling_burst_limit=200)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = new Deployment(this, \"my-deployment\", new DeploymentProps { Api = api });\nStage stage = new Stage(this, \"my-stage\", new StageProps {\n    Deployment = deployment,\n    MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n        { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n            ThrottlingRateLimit = 100,\n            ThrottlingBurstLimit = 200 } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = Deployment.Builder.create(this, \"my-deployment\").api(api).build();\nStage stage = Stage.Builder.create(this, \"my-stage\")\n        .deployment(deployment)\n        .methodOptions(Map.of(\n                \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                        .throttlingRateLimit(100)\n                        .throttlingBurstLimit(200).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodDeploymentOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 14,
        "104": 3,
        "193": 4,
        "194": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "97e18f9a28e3eea22e33663bd12689850d3b34e471d5460c1b846ce3f17b2857"
    },
    "a6c16c26c37f2c798c6029848246421810e3ea0d555ed6d637849c57fa3b0356": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        logging_level=apigateway.MethodLoggingLevel.INFO,\n        data_trace_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        LoggingLevel = MethodLoggingLevel.INFO,\n        DataTraceEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .loggingLevel(MethodLoggingLevel.INFO)\n                .dataTraceEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodLoggingLevel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.MethodLoggingLevel",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel#INFO",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a5d5de063790b967f518976ba99175c32544eaa22524e46654b5abb7aca85a86"
    },
    "fd2c4667764954cd23868dbb95585e4658fcd30d298bf3b7c66e294b479b0c37": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n# user_lambda: lambda.Function\n\n\nuser_model = api.add_model(\"UserModel\",\n    schema=apigateway.JsonSchema(\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"user_id\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            ),\n            \"name\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            )\n        },\n        required=[\"userId\"]\n    )\n)\napi.root.add_resource(\"user\").add_method(\"POST\",\n    apigateway.LambdaIntegration(user_lambda),\n        request_models={\n            \"application/json\": user_model\n        }\n    )",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.AddModel(\"UserModel\", new ModelOptions {\n    Schema = new JsonSchema {\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"userId\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } },\n            { \"name\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } }\n        },\n        Required = new [] { \"userId\" }\n    }\n});\napi.Root.AddResource(\"user\").AddMethod(\"POST\",\nnew LambdaIntegration(userLambda), new MethodOptions {\n    RequestModels = new Dictionary<string, IModel> {\n        { \"application/json\", userModel }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.addModel(\"UserModel\", ModelOptions.builder()\n        .schema(JsonSchema.builder()\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"userId\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build(),\n                        \"name\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build()))\n                .required(List.of(\"userId\"))\n                .build())\n        .build());\napi.root.addResource(\"user\").addMethod(\"POST\",\nnew LambdaIntegration(userLambda), MethodOptions.builder()\n        .requestModels(Map.of(\n                \"application/json\", userModel))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi#addModel",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 37,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 7,
        "194": 11,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "d70f74ccda05a1c2a2f8da760fe66cb2dcadcd2c635686d84f6d700f98182d42"
    },
    "942e9aafe432b880714083f905eb96a1d7a318250e0af15fdeb2202645b6af91": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n# user_lambda: lambda.Function\n\n\nuser_model = api.add_model(\"UserModel\",\n    schema=apigateway.JsonSchema(\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"user_id\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            ),\n            \"name\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            )\n        },\n        required=[\"userId\"]\n    )\n)\napi.root.add_resource(\"user\").add_method(\"POST\",\n    apigateway.LambdaIntegration(user_lambda),\n        request_models={\n            \"application/json\": user_model\n        }\n    )",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.AddModel(\"UserModel\", new ModelOptions {\n    Schema = new JsonSchema {\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"userId\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } },\n            { \"name\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } }\n        },\n        Required = new [] { \"userId\" }\n    }\n});\napi.Root.AddResource(\"user\").AddMethod(\"POST\",\nnew LambdaIntegration(userLambda), new MethodOptions {\n    RequestModels = new Dictionary<string, IModel> {\n        { \"application/json\", userModel }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.addModel(\"UserModel\", ModelOptions.builder()\n        .schema(JsonSchema.builder()\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"userId\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build(),\n                        \"name\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build()))\n                .required(List.of(\"userId\"))\n                .build())\n        .build());\napi.root.addResource(\"user\").addMethod(\"POST\",\nnew LambdaIntegration(userLambda), MethodOptions.builder()\n        .requestModels(Map.of(\n                \"application/json\", userModel))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.MethodOptions",
          "memberName": "requestModels"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi#addModel",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 37,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 7,
        "194": 11,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "d70f74ccda05a1c2a2f8da760fe66cb2dcadcd2c635686d84f6d700f98182d42"
    },
    "0f7d8cbeb16b97c1fafd149fb50c48c3f244d85e4ff80c984fd79212533d3108": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# resource: apigateway.Resource\n\nmethod_props = apigateway.MethodProps(\n    http_method=\"httpMethod\",\n    resource=resource,\n\n    # the properties below are optional\n    integration=integration,\n    options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nMethodProps methodProps = new MethodProps {\n    HttpMethod = \"httpMethod\",\n    Resource = resource,\n\n    // the properties below are optional\n    Integration = integration,\n    Options = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nMethodProps methodProps = MethodProps.builder()\n        .httpMethod(\"httpMethod\")\n        .resource(resource)\n\n        // the properties below are optional\n        .integration(integration)\n        .options(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\nconst methodProps: apigateway.MethodProps = {\n  httpMethod: 'httpMethod',\n  resource: resource,\n\n  // the properties below are optional\n  integration: integration,\n  options: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#NONE",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IRequestValidator",
        "@aws-cdk/aws-apigateway.IResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MethodProps",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodProps: apigateway.MethodProps = {\n  httpMethod: 'httpMethod',\n  resource: resource,\n\n  // the properties below are optional\n  integration: integration,\n  options: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 52,
        "91": 5,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 2,
        "193": 8,
        "194": 2,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "0b53445e10da4b70fbeff732bfe4b7664e9f92e43307aaa085475f3c497bae75"
    },
    "d8339b82625ac04d35d90c552b193a41f754cabf682ec4064f40693025ff3d50": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# model: apigateway.Model\n\nmethod_response = apigateway.MethodResponse(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    response_models={\n        \"response_models_key\": model\n    },\n    response_parameters={\n        \"response_parameters_key\": False\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nModel model;\n\nMethodResponse methodResponse = new MethodResponse {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ResponseModels = new Dictionary<string, IModel> {\n        { \"responseModelsKey\", model }\n    },\n    ResponseParameters = new Dictionary<string, boolean> {\n        { \"responseParametersKey\", false }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nModel model;\n\nMethodResponse methodResponse = MethodResponse.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .responseModels(Map.of(\n                \"responseModelsKey\", model))\n        .responseParameters(Map.of(\n                \"responseParametersKey\", false))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const model: apigateway.Model;\nconst methodResponse: apigateway.MethodResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: model,\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodResponse"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.MethodResponse"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const model: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodResponse: apigateway.MethodResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: model,\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ada7e92dc1840b6a7f0792d7ab0c41bbca3f3cbf94502330b0362a6aaefd3b88"
    },
    "3f7d371fe759afc5f8c95277870f2cabcc18571bf3fa9ec943cdaf9cbf040b8c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MockIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a66c09eb33b8122ca6b4dd4c78b7ee90639738f28e53f97e1b806a52a81cf444"
    },
    "4c5ea291cefcfe1c4f31c5d47774dcd54cf511cafd8188840b26eaa39c85f464": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Model"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "c78357dce541cd42e028db5018f83f8da38a24059df2204d45e9d96722c7d4eb"
    },
    "e6735a31f958984220f7e6c4bdf43d78f3a7393f137472a3f5b494406c878874": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ModelOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "c78357dce541cd42e028db5018f83f8da38a24059df2204d45e9d96722c7d4eb"
    },
    "b517db4a0d3d9724129f66f1c949ea7b6462abbd170c6e1c38f7b545fcd5686e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# default_: Any\n# enum_: Any\n# json_schema_: apigateway.JsonSchema\n# rest_api: apigateway.RestApi\n\nmodel_props = apigateway.ModelProps(\n    rest_api=rest_api,\n    schema=apigateway.JsonSchema(\n        additional_items=[json_schema_],\n        additional_properties=False,\n        all_of=[json_schema_],\n        any_of=[json_schema_],\n        contains=json_schema_,\n        default=default_,\n        definitions={\n            \"definitions_key\": json_schema_\n        },\n        dependencies={\n            \"dependencies_key\": json_schema_\n        },\n        description=\"description\",\n        enum=[enum_],\n        exclusive_maximum=False,\n        exclusive_minimum=False,\n        format=\"format\",\n        id=\"id\",\n        items=json_schema_,\n        maximum=123,\n        max_items=123,\n        max_length=123,\n        max_properties=123,\n        minimum=123,\n        min_items=123,\n        min_length=123,\n        min_properties=123,\n        multiple_of=123,\n        not=json_schema_,\n        one_of=[json_schema_],\n        pattern=\"pattern\",\n        pattern_properties={\n            \"pattern_properties_key\": json_schema_\n        },\n        properties={\n            \"properties_key\": json_schema_\n        },\n        property_names=json_schema_,\n        ref=\"ref\",\n        required=[\"required\"],\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"title\",\n        type=apigateway.JsonSchemaType.NULL,\n        unique_items=False\n    ),\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\",\n    model_name=\"modelName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar default_;\nvar enum_;\nJsonSchema jsonSchema_;\nRestApi restApi;\n\nModelProps modelProps = new ModelProps {\n    RestApi = restApi,\n    Schema = new JsonSchema {\n        AdditionalItems = new [] { jsonSchema_ },\n        AdditionalProperties = false,\n        AllOf = new [] { jsonSchema_ },\n        AnyOf = new [] { jsonSchema_ },\n        Contains = jsonSchema_,\n        Default = default_,\n        Definitions = new Dictionary<string, JsonSchema> {\n            { \"definitionsKey\", jsonSchema_ }\n        },\n        Dependencies = new Dictionary<string, object> {\n            { \"dependenciesKey\", jsonSchema_ }\n        },\n        Description = \"description\",\n        Enum = new [] { enum_ },\n        ExclusiveMaximum = false,\n        ExclusiveMinimum = false,\n        Format = \"format\",\n        Id = \"id\",\n        Items = jsonSchema_,\n        Maximum = 123,\n        MaxItems = 123,\n        MaxLength = 123,\n        MaxProperties = 123,\n        Minimum = 123,\n        MinItems = 123,\n        MinLength = 123,\n        MinProperties = 123,\n        MultipleOf = 123,\n        Not = jsonSchema_,\n        OneOf = new [] { jsonSchema_ },\n        Pattern = \"pattern\",\n        PatternProperties = new Dictionary<string, JsonSchema> {\n            { \"patternPropertiesKey\", jsonSchema_ }\n        },\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"propertiesKey\", jsonSchema_ }\n        },\n        PropertyNames = jsonSchema_,\n        Ref = \"ref\",\n        Required = new [] { \"required\" },\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"title\",\n        Type = JsonSchemaType.NULL,\n        UniqueItems = false\n    },\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\",\n    ModelName = \"modelName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject default_;\nObject enum_;\nJsonSchema jsonSchema_;\nRestApi restApi;\n\nModelProps modelProps = ModelProps.builder()\n        .restApi(restApi)\n        .schema(JsonSchema.builder()\n                .additionalItems(List.of(jsonSchema_))\n                .additionalProperties(false)\n                .allOf(List.of(jsonSchema_))\n                .anyOf(List.of(jsonSchema_))\n                .contains(jsonSchema_)\n                .default(default_)\n                .definitions(Map.of(\n                        \"definitionsKey\", jsonSchema_))\n                .dependencies(Map.of(\n                        \"dependenciesKey\", jsonSchema_))\n                .description(\"description\")\n                .enum(List.of(enum_))\n                .exclusiveMaximum(false)\n                .exclusiveMinimum(false)\n                .format(\"format\")\n                .id(\"id\")\n                .items(jsonSchema_)\n                .maximum(123)\n                .maxItems(123)\n                .maxLength(123)\n                .maxProperties(123)\n                .minimum(123)\n                .minItems(123)\n                .minLength(123)\n                .minProperties(123)\n                .multipleOf(123)\n                .not(jsonSchema_)\n                .oneOf(List.of(jsonSchema_))\n                .pattern(\"pattern\")\n                .patternProperties(Map.of(\n                        \"patternPropertiesKey\", jsonSchema_))\n                .properties(Map.of(\n                        \"propertiesKey\", jsonSchema_))\n                .propertyNames(jsonSchema_)\n                .ref(\"ref\")\n                .required(List.of(\"required\"))\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"title\")\n                .type(JsonSchemaType.NULL)\n                .uniqueItems(false)\n                .build())\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .modelName(\"modelName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const default_: any;\ndeclare const enum_: any;\ndeclare const jsonSchema_: apigateway.JsonSchema;\ndeclare const restApi: apigateway.RestApi;\nconst modelProps: apigateway.ModelProps = {\n  restApi: restApi,\n  schema: {\n    additionalItems: [jsonSchema_],\n    additionalProperties: false,\n    allOf: [jsonSchema_],\n    anyOf: [jsonSchema_],\n    contains: jsonSchema_,\n    default: default_,\n    definitions: {\n      definitionsKey: jsonSchema_,\n    },\n    dependencies: {\n      dependenciesKey: jsonSchema_,\n    },\n    description: 'description',\n    enum: [enum_],\n    exclusiveMaximum: false,\n    exclusiveMinimum: false,\n    format: 'format',\n    id: 'id',\n    items: jsonSchema_,\n    maximum: 123,\n    maxItems: 123,\n    maxLength: 123,\n    maxProperties: 123,\n    minimum: 123,\n    minItems: 123,\n    minLength: 123,\n    minProperties: 123,\n    multipleOf: 123,\n    not: jsonSchema_,\n    oneOf: [jsonSchema_],\n    pattern: 'pattern',\n    patternProperties: {\n      patternPropertiesKey: jsonSchema_,\n    },\n    properties: {\n      propertiesKey: jsonSchema_,\n    },\n    propertyNames: jsonSchema_,\n    ref: 'ref',\n    required: ['required'],\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'title',\n    type: apigateway.JsonSchemaType.NULL,\n    uniqueItems: false,\n  },\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  modelName: 'modelName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ModelProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#NULL",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.ModelProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const default_: any;\ndeclare const enum_: any;\ndeclare const jsonSchema_: apigateway.JsonSchema;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst modelProps: apigateway.ModelProps = {\n  restApi: restApi,\n  schema: {\n    additionalItems: [jsonSchema_],\n    additionalProperties: false,\n    allOf: [jsonSchema_],\n    anyOf: [jsonSchema_],\n    contains: jsonSchema_,\n    default: default_,\n    definitions: {\n      definitionsKey: jsonSchema_,\n    },\n    dependencies: {\n      dependenciesKey: jsonSchema_,\n    },\n    description: 'description',\n    enum: [enum_],\n    exclusiveMaximum: false,\n    exclusiveMinimum: false,\n    format: 'format',\n    id: 'id',\n    items: jsonSchema_,\n    maximum: 123,\n    maxItems: 123,\n    maxLength: 123,\n    maxProperties: 123,\n    minimum: 123,\n    minItems: 123,\n    minLength: 123,\n    minProperties: 123,\n    multipleOf: 123,\n    not: jsonSchema_,\n    oneOf: [jsonSchema_],\n    pattern: 'pattern',\n    patternProperties: {\n      patternPropertiesKey: jsonSchema_,\n    },\n    properties: {\n      propertiesKey: jsonSchema_,\n    },\n    propertyNames: jsonSchema_,\n    ref: 'ref',\n    required: ['required'],\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'title',\n    type: apigateway.JsonSchemaType.NULL,\n    uniqueItems: false,\n  },\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  modelName: 'modelName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 9,
        "10": 11,
        "75": 78,
        "91": 4,
        "125": 2,
        "130": 4,
        "153": 3,
        "169": 3,
        "192": 6,
        "193": 6,
        "194": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "31426a34badd77e1ea062842e23ea18a2e318400d044c9e9268bad985df4d92f"
    },
    "7380491354bf13610bbcb2c16fd2e8f6c4193bd7ede4a42144cb00c9e66af72c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.PassthroughBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a66c09eb33b8122ca6b4dd4c78b7ee90639738f28e53f97e1b806a52a81cf444"
    },
    "0fcb397fca532e43ed27fb8f51f793e651c511c74fee7dc7b960872b15d8e8d5": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Period"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b49be7152b48d9ef0f1a2945b13dcb66fe3dbe2eda5489d9606eee829ca21255"
    },
    "b792db63fb671270e4b4031d74b79a900c25574c00aa99c7627acbb98238341b": {
      "translations": {
        "python": {
          "source": "# resource: apigateway.Resource\n# handler: lambda.Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ProxyResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ProxyResource",
        "@aws-cdk/aws-apigateway.ProxyResourceOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addProxy",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d8e724f0608bac42b0be2480f842dc918232459bd86546fb0ee65f75e81e5821"
    },
    "97b7cabb219f3472be85660971dc3f8a35239913575872daf0658b31faa22aea": {
      "translations": {
        "python": {
          "source": "# resource: apigateway.Resource\n# handler: lambda.Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ProxyResourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ProxyResource",
        "@aws-cdk/aws-apigateway.ProxyResourceOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addProxy",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d8e724f0608bac42b0be2480f842dc918232459bd86546fb0ee65f75e81e5821"
    },
    "e3403155507ae79953252ff61114c7df1190c635230e7e05e2a2610ef7ccfdd5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.core as cdk\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# resource: apigateway.Resource\n\nproxy_resource_props = apigateway.ProxyResourceProps(\n    parent=resource,\n\n    # the properties below are optional\n    any_method=False,\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\nProxyResourceProps proxyResourceProps = new ProxyResourceProps {\n    Parent = resource,\n\n    // the properties below are optional\n    AnyMethod = false,\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.core.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nProxyResourceProps proxyResourceProps = ProxyResourceProps.builder()\n        .parent(resource)\n\n        // the properties below are optional\n        .anyMethod(false)\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\nconst proxyResourceProps: apigateway.ProxyResourceProps = {\n  parent: resource,\n\n  // the properties below are optional\n  anyMethod: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ProxyResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#NONE",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IRequestValidator",
        "@aws-cdk/aws-apigateway.IResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ProxyResourceProps",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst proxyResourceProps: apigateway.ProxyResourceProps = {\n  parent: resource,\n\n  // the properties below are optional\n  anyMethod: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 65,
        "91": 8,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 6,
        "193": 9,
        "194": 4,
        "196": 1,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "02b6ea3710de684555e9f9d22d32f773237ff0dcc7d2b070e9dff73bcc85acc9"
    },
    "7ab2ef2542229a6236e527541dfded252231c0101eb27bd12fa7612e73629562": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.QuotaSettings"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b49be7152b48d9ef0f1a2945b13dcb66fe3dbe2eda5489d9606eee829ca21255"
    },
    "437d45321f494f04c631e447d80fda31d7202039af49a1b3e6398000dbbf49a3": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RateLimitedApiKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b49be7152b48d9ef0f1a2945b13dcb66fe3dbe2eda5489d9606eee829ca21255"
    },
    "3d4e500801040a66cc030559c38ff487b6da002b768a719f4f7a65f73c38bd78": {
      "translations": {
        "python": {
          "source": "# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b49be7152b48d9ef0f1a2945b13dcb66fe3dbe2eda5489d9606eee829ca21255"
    },
    "4e106cdc5dd169658306092a00006e3e6ae96da99a550ad30ce763e45b2d1796": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cc62851041dc2333458806df30e30d540202df9d0cd8f54380f7480cd318bd2"
    },
    "8f899e115af5fa88df7429e49aa9466858a7f8f159bc0c8c2de63ef23ca5252a": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cc62851041dc2333458806df30e30d540202df9d0cd8f54380f7480cd318bd2"
    },
    "1bc620a6f7ea1d224f1d7a1f805a49f20fcea5ae38185ebe4aa094172b80c0dc": {
      "translations": {
        "python": {
          "source": "apigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    state_machine=machine,\n    headers=True,\n    path=False,\n    querystring=False,\n    request_context=apigateway.RequestContext(\n        caller=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    StateMachine = machine,\n    Headers = true,\n    Path = false,\n    Querystring = false,\n    RequestContext = new RequestContext {\n        Caller = true,\n        User = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "StepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .stateMachine(machine)\n        .headers(true)\n        .path(false)\n        .querystring(false)\n        .requestContext(RequestContext.builder()\n                .caller(true)\n                .user(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestContext"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RequestContext",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const machine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n      definition: new stepfunctions.Pass(this, 'PassState'),\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "91": 2,
        "104": 1,
        "106": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "5a637c4bf4e4217db4df1259e9b30dcb4c9d01ae0c7b53ef1d9c4e31a1c455c6"
    },
    "2c539bf9aa5e68cbf18c6258d73b0a56f57d6e676e989ecdaf89e08f04221d28": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# rest_api: apigateway.RestApi\n\nrequest_validator = apigateway.RequestValidator(self, \"MyRequestValidator\",\n    rest_api=rest_api,\n\n    # the properties below are optional\n    request_validator_name=\"requestValidatorName\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi;\n\nRequestValidator requestValidator = new RequestValidator(this, \"MyRequestValidator\", new RequestValidatorProps {\n    RestApi = restApi,\n\n    // the properties below are optional\n    RequestValidatorName = \"requestValidatorName\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi;\n\nRequestValidator requestValidator = RequestValidator.Builder.create(this, \"MyRequestValidator\")\n        .restApi(restApi)\n\n        // the properties below are optional\n        .requestValidatorName(\"requestValidatorName\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\nconst requestValidator = new apigateway.RequestValidator(this, 'MyRequestValidator', {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestValidator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.RequestValidator",
        "@aws-cdk/aws-apigateway.RequestValidatorProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst requestValidator = new apigateway.RequestValidator(this, 'MyRequestValidator', {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "91": 2,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c8d31f63a901adb692d4b9dec814d18bd36520930fec5a0bd4a3d789811870b0"
    },
    "0feb6d576890b3ea755f50cf1a527a99db21ef112e790cb8288f004245a47638": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n# resource: apigateway.Resource\n# response_model: apigateway.Model\n# error_response_model: apigateway.Model\n\n\nresource.add_method(\"GET\", integration,\n    # We can mark the parameters as required\n    request_parameters={\n        \"method.request.querystring.who\": True\n    },\n    # we can set request validator options like below\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"test-validator\",\n        validate_request_body=True,\n        validate_request_parameters=False\n    ),\n    method_responses=[apigateway.MethodResponse(\n        # Successful response from the integration\n        status_code=\"200\",\n        # Define what parameters are allowed or not\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        # Validate the schema on the response\n        response_models={\n            \"application/json\": response_model\n        }\n    ), apigateway.MethodResponse(\n        # Same thing for the error responses\n        status_code=\"400\",\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        response_models={\n            \"application/json\": error_response_model\n        }\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.AddMethod(\"GET\", integration, new MethodOptions {\n    // We can mark the parameters as required\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"method.request.querystring.who\", true }\n    },\n    // we can set request validator options like below\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"test-validator\",\n        ValidateRequestBody = true,\n        ValidateRequestParameters = false\n    },\n    MethodResponses = new [] { new MethodResponse {\n        // Successful response from the integration\n        StatusCode = \"200\",\n        // Define what parameters are allowed or not\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        // Validate the schema on the response\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", responseModel }\n        }\n    }, new MethodResponse {\n        // Same thing for the error responses\n        StatusCode = \"400\",\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", errorResponseModel }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.addMethod(\"GET\", integration, MethodOptions.builder()\n        // We can mark the parameters as required\n        .requestParameters(Map.of(\n                \"method.request.querystring.who\", true))\n        // we can set request validator options like below\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"test-validator\")\n                .validateRequestBody(true)\n                .validateRequestParameters(false)\n                .build())\n        .methodResponses(List.of(MethodResponse.builder()\n                // Successful response from the integration\n                .statusCode(\"200\")\n                // Define what parameters are allowed or not\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                // Validate the schema on the response\n                .responseModels(Map.of(\n                        \"application/json\", responseModel))\n                .build(), MethodResponse.builder()\n                // Same thing for the error responses\n                .statusCode(\"400\")\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                .responseModels(Map.of(\n                        \"application/json\", errorResponseModel))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestValidatorOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 29,
        "91": 1,
        "106": 8,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 9,
        "194": 1,
        "196": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "b09f89bdffef56034d1545ba2c585e1e608a51db53caa94f94fc74b14b9f6c56"
    },
    "7281c74ca27f15cfb47cc1d61996ed9fdd60aefe9efa39b7f3a18b10e61eb394": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# rest_api: apigateway.RestApi\n\nrequest_validator_props = apigateway.RequestValidatorProps(\n    rest_api=rest_api,\n\n    # the properties below are optional\n    request_validator_name=\"requestValidatorName\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi;\n\nRequestValidatorProps requestValidatorProps = new RequestValidatorProps {\n    RestApi = restApi,\n\n    // the properties below are optional\n    RequestValidatorName = \"requestValidatorName\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi;\n\nRequestValidatorProps requestValidatorProps = RequestValidatorProps.builder()\n        .restApi(restApi)\n\n        // the properties below are optional\n        .requestValidatorName(\"requestValidatorName\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\nconst requestValidatorProps: apigateway.RequestValidatorProps = {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestValidatorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.RequestValidatorProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst requestValidatorProps: apigateway.RequestValidatorProps = {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "91": 2,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "73660c5162ae8de30491855c4d733eb6a4dce45e229f576b30c94a3b09c41739"
    },
    "bbeb2ab494c5bbcd5c9fd80a6ccf14164b8c552b8db27cd9658f9c3f749d95b4": {
      "translations": {
        "python": {
          "source": "# books_backend: apigateway.LambdaIntegration\n\napi = apigateway.RestApi(self, \"books\",\n    default_integration=books_backend\n)\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\") # integrated with `booksBackend`\nbooks.add_method(\"POST\") # integrated with `booksBackend`\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DefaultIntegration = booksBackend\n});\n\nResource books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\"); // integrated with `booksBackend`\nbooks.AddMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .defaultIntegration(booksBackend)\n        .build();\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\"); // integrated with `booksBackend`\nbooks.addMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");",
          "version": "1"
        },
        "$": {
          "source": "declare const booksBackend: apigateway.LambdaIntegration;\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');   // integrated with `booksBackend`",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Resource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const booksBackend: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 7,
        "196": 5,
        "197": 1,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9bbb74b11e69c7e3973c86763f5d0b02a6dce7bd6054cd20ff6d512f771a5d87"
    },
    "c1bdb93f60ad698d1fc44b16b55985a17c45f378b2c86bf2ba1f7956fea5acf8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# rest_api: apigateway.RestApi\n\nresource_attributes = apigateway.ResourceAttributes(\n    path=\"path\",\n    resource_id=\"resourceId\",\n    rest_api=rest_api\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi;\n\nResourceAttributes resourceAttributes = new ResourceAttributes {\n    Path = \"path\",\n    ResourceId = \"resourceId\",\n    RestApi = restApi\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi;\n\nResourceAttributes resourceAttributes = ResourceAttributes.builder()\n        .path(\"path\")\n        .resourceId(\"resourceId\")\n        .restApi(restApi)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\nconst resourceAttributes: apigateway.ResourceAttributes = {\n  path: 'path',\n  resourceId: 'resourceId',\n  restApi: restApi,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ResourceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.ResourceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceAttributes: apigateway.ResourceAttributes = {\n  path: 'path',\n  resourceId: 'resourceId',\n  restApi: restApi,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4d824fef89cc7ac4cafd13c92938e98d75e0af5d7f3efb4a944460cb18c1b768"
    },
    "41355a11c52571e06b17eede05c7d8624254531883f85fb47e5e90f5bc6d2519": {
      "translations": {
        "python": {
          "source": "# resource: apigateway.Resource\n\n\nsubtree = resource.add_resource(\"subtree\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"https://amazon.com\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Resource resource;\n\n\nResource subtree = resource.AddResource(\"subtree\", new ResourceOptions {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"https://amazon.com\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\n\n\nResource subtree = resource.addResource(\"subtree\", ResourceOptions.builder()\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"https://amazon.com\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ResourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.ResourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4e1e1e324f07d4c74319f1217df1cf77f549cbbe49f399d7c05b3385911493e0"
    },
    "f239d49075c8a35dadd291b74461c78cbbcdf7a76d5aac06a6577c52475334b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.core as cdk\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# resource: apigateway.Resource\n\nresource_props = apigateway.ResourceProps(\n    parent=resource,\n    path_part=\"pathPart\",\n\n    # the properties below are optional\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\nResourceProps resourceProps = new ResourceProps {\n    Parent = resource,\n    PathPart = \"pathPart\",\n\n    // the properties below are optional\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.core.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nResourceProps resourceProps = ResourceProps.builder()\n        .parent(resource)\n        .pathPart(\"pathPart\")\n\n        // the properties below are optional\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\nconst resourceProps: apigateway.ResourceProps = {\n  parent: resource,\n  pathPart: 'pathPart',\n\n  // the properties below are optional\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#NONE",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IRequestValidator",
        "@aws-cdk/aws-apigateway.IResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/aws-apigateway.ResourceProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceProps: apigateway.ResourceProps = {\n  parent: resource,\n  pathPart: 'pathPart',\n\n  // the properties below are optional\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 65,
        "91": 7,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 6,
        "193": 9,
        "194": 4,
        "196": 1,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "cd8846f44a2137495792b0fef88d11dd68523e75434fda557026e815d506d909"
    },
    "2af8c7d9d8f15c0e73eed1acdf23693ae890822ce467823bd2f33638f941431a": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ResponseType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseOptions",
        "@aws-cdk/aws-apigateway.ResponseType",
        "@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "d44f831a6c522408ccc6131a10759e3ccf0f37ab943c71595696802064e9ea80"
    },
    "b92d3ca4e040e8ec0da18c968d3dae1c1b597e7028217db978758c8569b2dfd2": {
      "translations": {
        "python": {
          "source": "hello = lambda_.Function(self, \"hello\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"hello.handler\",\n    code=lambda_.Code.from_asset(\"lambda\")\n)\n\napi = apigateway.RestApi(self, \"hello-api\")\nresource = api.root.add_resource(\"v1\")",
          "version": "2"
        },
        "csharp": {
          "source": "Function hello = new Function(this, \"hello\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"hello.handler\",\n    Code = Code.FromAsset(\"lambda\")\n});\n\nRestApi api = new RestApi(this, \"hello-api\", new RestApiProps { });\nResource resource = api.Root.AddResource(\"v1\");",
          "version": "1"
        },
        "java": {
          "source": "Function hello = Function.Builder.create(this, \"hello\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"hello.handler\")\n        .code(Code.fromAsset(\"lambda\"))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"hello-api\").build();\nResource resource = api.root.addResource(\"v1\");",
          "version": "1"
        },
        "$": {
          "source": "const hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 2,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3
      },
      "fqnsFingerprint": "46570a9f69efdd56ab8be2aa6b814dfa626e3e8003ef3e3cff92f724df0452ea"
    },
    "f33e9f5d7fa21bced6b4dcbf86d828af67f35f7607f5b2153972afb1a0eb50bf": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8942be4873aef461f6b185f68d52c2b0fac86a7a317c454b04b99787d1f82256"
    },
    "1107602ebe6ff9f4c97bc7e221cb2553c23227f2cb532753912b5087743f8945": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api: apigateway.RestApi\n# hosted_zone_for_example_com: Any\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiBase"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "862766fe00bdf4572a4d1966e3fa5317511172642baead1c7706ee7b26dc1274"
    },
    "09cd00081771fb7f88e5b506771d13f920d5d0abc7a4863856f03fb01e464cce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# access_log_destination: apigateway.IAccessLogDestination\n# access_log_format: apigateway.AccessLogFormat\n# bucket: s3.Bucket\n# certificate: certificatemanager.Certificate\n# policy_document: iam.PolicyDocument\n\nrest_api_base_props = apigateway.RestApiBaseProps(\n    cloud_watch_role=False,\n    deploy=False,\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=access_log_destination,\n        access_log_format=access_log_format,\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl=cdk.Duration.minutes(30),\n        caching_enabled=False,\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=apigateway.MethodLoggingLevel.OFF,\n        method_options={\n            \"method_options_key\": apigateway.MethodDeploymentOptions(\n                cache_data_encrypted=False,\n                cache_ttl=cdk.Duration.minutes(30),\n                caching_enabled=False,\n                data_trace_enabled=False,\n                logging_level=apigateway.MethodLoggingLevel.OFF,\n                metrics_enabled=False,\n                throttling_burst_limit=123,\n                throttling_rate_limit=123\n            )\n        },\n        metrics_enabled=False,\n        stage_name=\"stageName\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    disable_execute_api_endpoint=False,\n    domain_name=apigateway.DomainNameOptions(\n        certificate=certificate,\n        domain_name=\"domainName\",\n\n        # the properties below are optional\n        base_path=\"basePath\",\n        endpoint_type=apigateway.EndpointType.EDGE,\n        mtls=apigateway.MTLSConfig(\n            bucket=bucket,\n            key=\"key\",\n\n            # the properties below are optional\n            version=\"version\"\n        ),\n        security_policy=apigateway.SecurityPolicy.TLS_1_0\n    ),\n    endpoint_export_name=\"endpointExportName\",\n    endpoint_types=[apigateway.EndpointType.EDGE],\n    fail_on_warnings=False,\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy_document,\n    rest_api_name=\"restApiName\",\n    retain_deployments=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nBucket bucket;\nCertificate certificate;\nPolicyDocument policyDocument;\nRestApiBaseProps restApiBaseProps = new RestApiBaseProps {\n    CloudWatchRole = false,\n    Deploy = false,\n    DeployOptions = new StageOptions {\n        AccessLogDestination = accessLogDestination,\n        AccessLogFormat = accessLogFormat,\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtl = Duration.Minutes(30),\n        CachingEnabled = false,\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = MethodLoggingLevel.OFF,\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"methodOptionsKey\", new MethodDeploymentOptions {\n                CacheDataEncrypted = false,\n                CacheTtl = Duration.Minutes(30),\n                CachingEnabled = false,\n                DataTraceEnabled = false,\n                LoggingLevel = MethodLoggingLevel.OFF,\n                MetricsEnabled = false,\n                ThrottlingBurstLimit = 123,\n                ThrottlingRateLimit = 123\n            } }\n        },\n        MetricsEnabled = false,\n        StageName = \"stageName\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    DisableExecuteApiEndpoint = false,\n    DomainName = new DomainNameOptions {\n        Certificate = certificate,\n        DomainName = \"domainName\",\n\n        // the properties below are optional\n        BasePath = \"basePath\",\n        EndpointType = EndpointType.EDGE,\n        Mtls = new MTLSConfig {\n            Bucket = bucket,\n            Key = \"key\",\n\n            // the properties below are optional\n            Version = \"version\"\n        },\n        SecurityPolicy = SecurityPolicy.TLS_1_0\n    },\n    EndpointExportName = \"endpointExportName\",\n    EndpointTypes = new [] { EndpointType.EDGE },\n    FailOnWarnings = false,\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policyDocument,\n    RestApiName = \"restApiName\",\n    RetainDeployments = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nBucket bucket;\nCertificate certificate;\nPolicyDocument policyDocument;\n\nRestApiBaseProps restApiBaseProps = RestApiBaseProps.builder()\n        .cloudWatchRole(false)\n        .deploy(false)\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(accessLogDestination)\n                .accessLogFormat(accessLogFormat)\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtl(Duration.minutes(30))\n                .cachingEnabled(false)\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(MethodLoggingLevel.OFF)\n                .methodOptions(Map.of(\n                        \"methodOptionsKey\", MethodDeploymentOptions.builder()\n                                .cacheDataEncrypted(false)\n                                .cacheTtl(Duration.minutes(30))\n                                .cachingEnabled(false)\n                                .dataTraceEnabled(false)\n                                .loggingLevel(MethodLoggingLevel.OFF)\n                                .metricsEnabled(false)\n                                .throttlingBurstLimit(123)\n                                .throttlingRateLimit(123)\n                                .build()))\n                .metricsEnabled(false)\n                .stageName(\"stageName\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .disableExecuteApiEndpoint(false)\n        .domainName(DomainNameOptions.builder()\n                .certificate(certificate)\n                .domainName(\"domainName\")\n\n                // the properties below are optional\n                .basePath(\"basePath\")\n                .endpointType(EndpointType.EDGE)\n                .mtls(MTLSConfig.builder()\n                        .bucket(bucket)\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .version(\"version\")\n                        .build())\n                .securityPolicy(SecurityPolicy.TLS_1_0)\n                .build())\n        .endpointExportName(\"endpointExportName\")\n        .endpointTypes(List.of(EndpointType.EDGE))\n        .failOnWarnings(false)\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policyDocument)\n        .restApiName(\"restApiName\")\n        .retainDeployments(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const policyDocument: iam.PolicyDocument;\nconst restApiBaseProps: apigateway.RestApiBaseProps = {\n  cloudWatchRole: false,\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.DomainNameOptions",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel#OFF",
        "@aws-cdk/aws-apigateway.RestApiBaseProps",
        "@aws-cdk/aws-apigateway.SecurityPolicy",
        "@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_0",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const policyDocument: iam.PolicyDocument;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst restApiBaseProps: apigateway.RestApiBaseProps = {\n  cloudWatchRole: false,\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 18,
        "75": 100,
        "91": 15,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 1,
        "193": 8,
        "194": 14,
        "196": 2,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 5,
        "255": 5,
        "256": 5,
        "281": 51,
        "290": 1
      },
      "fqnsFingerprint": "8ef57dbcd2d0e691ac6f6559d8c85a31ee05e7ef76d60be5b119d8347dfee015"
    },
    "7e6199360fc0d9ea58387ebcc373bfe1e7b702999777b7d40cc559251f0bd12d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# access_log_destination: apigateway.IAccessLogDestination\n# access_log_format: apigateway.AccessLogFormat\n# authorizer: apigateway.Authorizer\n# bucket: s3.Bucket\n# certificate: certificatemanager.Certificate\n# integration: apigateway.Integration\n# model: apigateway.Model\n# policy_document: iam.PolicyDocument\n# request_validator: apigateway.RequestValidator\n\nrest_api_options = apigateway.RestApiOptions(\n    cloud_watch_role=False,\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    ),\n    deploy=False,\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=access_log_destination,\n        access_log_format=access_log_format,\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl=cdk.Duration.minutes(30),\n        caching_enabled=False,\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=apigateway.MethodLoggingLevel.OFF,\n        method_options={\n            \"method_options_key\": apigateway.MethodDeploymentOptions(\n                cache_data_encrypted=False,\n                cache_ttl=cdk.Duration.minutes(30),\n                caching_enabled=False,\n                data_trace_enabled=False,\n                logging_level=apigateway.MethodLoggingLevel.OFF,\n                metrics_enabled=False,\n                throttling_burst_limit=123,\n                throttling_rate_limit=123\n            )\n        },\n        metrics_enabled=False,\n        stage_name=\"stageName\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    disable_execute_api_endpoint=False,\n    domain_name=apigateway.DomainNameOptions(\n        certificate=certificate,\n        domain_name=\"domainName\",\n\n        # the properties below are optional\n        base_path=\"basePath\",\n        endpoint_type=apigateway.EndpointType.EDGE,\n        mtls=apigateway.MTLSConfig(\n            bucket=bucket,\n            key=\"key\",\n\n            # the properties below are optional\n            version=\"version\"\n        ),\n        security_policy=apigateway.SecurityPolicy.TLS_1_0\n    ),\n    endpoint_export_name=\"endpointExportName\",\n    endpoint_types=[apigateway.EndpointType.EDGE],\n    fail_on_warnings=False,\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy_document,\n    rest_api_name=\"restApiName\",\n    retain_deployments=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nAuthorizer authorizer;\nBucket bucket;\nCertificate certificate;\nIntegration integration;\nModel model;\nPolicyDocument policyDocument;\nRequestValidator requestValidator;\nRestApiOptions restApiOptions = new RestApiOptions {\n    CloudWatchRole = false,\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    },\n    Deploy = false,\n    DeployOptions = new StageOptions {\n        AccessLogDestination = accessLogDestination,\n        AccessLogFormat = accessLogFormat,\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtl = Duration.Minutes(30),\n        CachingEnabled = false,\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = MethodLoggingLevel.OFF,\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"methodOptionsKey\", new MethodDeploymentOptions {\n                CacheDataEncrypted = false,\n                CacheTtl = Duration.Minutes(30),\n                CachingEnabled = false,\n                DataTraceEnabled = false,\n                LoggingLevel = MethodLoggingLevel.OFF,\n                MetricsEnabled = false,\n                ThrottlingBurstLimit = 123,\n                ThrottlingRateLimit = 123\n            } }\n        },\n        MetricsEnabled = false,\n        StageName = \"stageName\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    DisableExecuteApiEndpoint = false,\n    DomainName = new DomainNameOptions {\n        Certificate = certificate,\n        DomainName = \"domainName\",\n\n        // the properties below are optional\n        BasePath = \"basePath\",\n        EndpointType = EndpointType.EDGE,\n        Mtls = new MTLSConfig {\n            Bucket = bucket,\n            Key = \"key\",\n\n            // the properties below are optional\n            Version = \"version\"\n        },\n        SecurityPolicy = SecurityPolicy.TLS_1_0\n    },\n    EndpointExportName = \"endpointExportName\",\n    EndpointTypes = new [] { EndpointType.EDGE },\n    FailOnWarnings = false,\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policyDocument,\n    RestApiName = \"restApiName\",\n    RetainDeployments = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nAuthorizer authorizer;\nBucket bucket;\nCertificate certificate;\nIntegration integration;\nModel model;\nPolicyDocument policyDocument;\nRequestValidator requestValidator;\n\nRestApiOptions restApiOptions = RestApiOptions.builder()\n        .cloudWatchRole(false)\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .deploy(false)\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(accessLogDestination)\n                .accessLogFormat(accessLogFormat)\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtl(Duration.minutes(30))\n                .cachingEnabled(false)\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(MethodLoggingLevel.OFF)\n                .methodOptions(Map.of(\n                        \"methodOptionsKey\", MethodDeploymentOptions.builder()\n                                .cacheDataEncrypted(false)\n                                .cacheTtl(Duration.minutes(30))\n                                .cachingEnabled(false)\n                                .dataTraceEnabled(false)\n                                .loggingLevel(MethodLoggingLevel.OFF)\n                                .metricsEnabled(false)\n                                .throttlingBurstLimit(123)\n                                .throttlingRateLimit(123)\n                                .build()))\n                .metricsEnabled(false)\n                .stageName(\"stageName\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .disableExecuteApiEndpoint(false)\n        .domainName(DomainNameOptions.builder()\n                .certificate(certificate)\n                .domainName(\"domainName\")\n\n                // the properties below are optional\n                .basePath(\"basePath\")\n                .endpointType(EndpointType.EDGE)\n                .mtls(MTLSConfig.builder()\n                        .bucket(bucket)\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .version(\"version\")\n                        .build())\n                .securityPolicy(SecurityPolicy.TLS_1_0)\n                .build())\n        .endpointExportName(\"endpointExportName\")\n        .endpointTypes(List.of(EndpointType.EDGE))\n        .failOnWarnings(false)\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policyDocument)\n        .restApiName(\"restApiName\")\n        .retainDeployments(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const policyDocument: iam.PolicyDocument;\ndeclare const requestValidator: apigateway.RequestValidator;\nconst restApiOptions: apigateway.RestApiOptions = {\n  cloudWatchRole: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#NONE",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.DomainNameOptions",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IRequestValidator",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel#OFF",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/aws-apigateway.RestApiOptions",
        "@aws-cdk/aws-apigateway.SecurityPolicy",
        "@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_0",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const policyDocument: iam.PolicyDocument;\ndeclare const requestValidator: apigateway.RequestValidator;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst restApiOptions: apigateway.RestApiOptions = {\n  cloudWatchRole: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 26,
        "75": 154,
        "91": 22,
        "130": 9,
        "153": 10,
        "169": 10,
        "192": 7,
        "193": 16,
        "194": 18,
        "196": 3,
        "225": 10,
        "242": 10,
        "243": 10,
        "254": 5,
        "255": 5,
        "256": 5,
        "281": 82,
        "290": 1
      },
      "fqnsFingerprint": "a5f7781b93d53621d4701f6d9517e53048b01a22cc2e23887ed83d916d0f9f25"
    },
    "6752e60d1e9e387be63db402d934918664219352d8f8e7461cb7ee6b4451320c": {
      "translations": {
        "python": {
          "source": "state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))",
          "version": "2"
        },
        "csharp": {
          "source": "StateMachine stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nRestApi api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "1"
        },
        "$": {
          "source": "   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "a41d7a799e68c938a9fbbeb773c65db3f678326e0cf79b2f3a41b2a4e75d3845"
    },
    "959d906e83fc9a360698ba9073ac861db2fcf8aec367952da02bb4e3cafd016a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_s3 as s3\n\n# bucket: s3.Bucket\n\ns3_api_definition = apigateway.S3ApiDefinition(bucket, \"key\", \"objectVersion\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.S3;\n\nBucket bucket;\n\nS3ApiDefinition s3ApiDefinition = new S3ApiDefinition(bucket, \"key\", \"objectVersion\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.s3.*;\n\nBucket bucket;\n\nS3ApiDefinition s3ApiDefinition = new S3ApiDefinition(bucket, \"key\", \"objectVersion\");",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\nconst s3ApiDefinition = new apigateway.S3ApiDefinition(bucket, 'key', /* all optional props */ 'objectVersion');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.S3ApiDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.S3ApiDefinition",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3ApiDefinition = new apigateway.S3ApiDefinition(bucket, 'key', /* all optional props */ 'objectVersion');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "395ea3e60392430110eb3fc71ce1bd95d5c7dc1836af9f0e89d4ff92ccf79974"
    },
    "bae159868bb68bb3c2e976e0ce805b3e65d0be925e689feadf9d28f19eac63a0": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com: Any\n\n\napigateway.DomainName(self, \"custom-domain\",\n    domain_name=\"example.com\",\n    certificate=acm_certificate_for_example_com,\n    endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL\n    security_policy=apigateway.SecurityPolicy.TLS_1_2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nnew DomainName(this, \"custom-domain\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acmCertificateForExampleCom,\n    EndpointType = EndpointType.EDGE,  // default is REGIONAL\n    SecurityPolicy = SecurityPolicy.TLS_1_2\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nDomainName.Builder.create(this, \"custom-domain\")\n        .domainName(\"example.com\")\n        .certificate(acmCertificateForExampleCom)\n        .endpointType(EndpointType.EDGE) // default is REGIONAL\n        .securityPolicy(SecurityPolicy.TLS_1_2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.SecurityPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.SecurityPolicy",
        "@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_2",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "1fe1572824be4a5c59b4d662c67d3b5f0564697f9414546160125d8c5f137881"
    },
    "7bca4c087ee2b4b147ad066ba7b9c1477dc8ce15c3cc546afbd15bcedc2df7c9": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "2"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.SpecRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "798b8ab1fa4d15e8386354ddc715b525512b179020c136a13fd1230cfab99370"
    },
    "a5377509139877dd8941ec48e6b6a449c42d82d716e9defb513d85c791a9d45c": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "2"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.SpecRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "798b8ab1fa4d15e8386354ddc715b525512b179020c136a13fd1230cfab99370"
    },
    "6ab98a29ef356da11431465f89e48580f488584b961296d163ff0c05f195cc46": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Stage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "3f95b5b8091a47ca7f459b17d91a5c902c506c75bfe83ab4831956c97c32a0bd"
    },
    "b66004d18581dffbef74f16743e261b727d7aff66f5a421baec270bd60330846": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.clf()\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Clf()\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.clf())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#clf",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "0176f5aefa2ae7089faf2330833a0a36ab8817843804eabd76aa69a53281699b"
    },
    "63f6bbdda6761293f6d601a58b9dfcc77a534034938bdac9298e706f790ee8c2": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "3f95b5b8091a47ca7f459b17d91a5c902c506c75bfe83ab4831956c97c32a0bd"
    },
    "5fc06d5ee6e9b75ef0eb22ecd9df402fbbb0996c372bcbaffa1967d2fc20835f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n# vpc_link: apigateway.VpcLink\n\nstep_functions_execution_integration_options = apigateway.StepFunctionsExecutionIntegrationOptions(\n    cache_key_parameters=[\"cacheKeyParameters\"],\n    cache_namespace=\"cacheNamespace\",\n    connection_type=apigateway.ConnectionType.INTERNET,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentials_passthrough=False,\n    credentials_role=role,\n    headers=False,\n    integration_responses=[apigateway.IntegrationResponse(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n        response_parameters={\n            \"response_parameters_key\": \"responseParameters\"\n        },\n        response_templates={\n            \"response_templates_key\": \"responseTemplates\"\n        },\n        selection_pattern=\"selectionPattern\"\n    )],\n    passthrough_behavior=apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    path=False,\n    querystring=False,\n    request_context=apigateway.RequestContext(\n        account_id=False,\n        api_id=False,\n        api_key=False,\n        authorizer_principal_id=False,\n        caller=False,\n        cognito_authentication_provider=False,\n        cognito_authentication_type=False,\n        cognito_identity_id=False,\n        cognito_identity_pool_id=False,\n        http_method=False,\n        request_id=False,\n        resource_id=False,\n        resource_path=False,\n        source_ip=False,\n        stage=False,\n        user=False,\n        user_agent=False,\n        user_arn=False\n    ),\n    request_parameters={\n        \"request_parameters_key\": \"requestParameters\"\n    },\n    request_templates={\n        \"request_templates_key\": \"requestTemplates\"\n    },\n    timeout=cdk.Duration.minutes(30),\n    vpc_link=vpc_link\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nRole role;\nVpcLink vpcLink;\nStepFunctionsExecutionIntegrationOptions stepFunctionsExecutionIntegrationOptions = new StepFunctionsExecutionIntegrationOptions {\n    CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n    CacheNamespace = \"cacheNamespace\",\n    ConnectionType = ConnectionType.INTERNET,\n    ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n    CredentialsPassthrough = false,\n    CredentialsRole = role,\n    Headers = false,\n    IntegrationResponses = new [] { new IntegrationResponse {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n        ResponseParameters = new Dictionary<string, string> {\n            { \"responseParametersKey\", \"responseParameters\" }\n        },\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"responseTemplatesKey\", \"responseTemplates\" }\n        },\n        SelectionPattern = \"selectionPattern\"\n    } },\n    PassthroughBehavior = PassthroughBehavior.WHEN_NO_MATCH,\n    Path = false,\n    Querystring = false,\n    RequestContext = new RequestContext {\n        AccountId = false,\n        ApiId = false,\n        ApiKey = false,\n        AuthorizerPrincipalId = false,\n        Caller = false,\n        CognitoAuthenticationProvider = false,\n        CognitoAuthenticationType = false,\n        CognitoIdentityId = false,\n        CognitoIdentityPoolId = false,\n        HttpMethod = false,\n        RequestId = false,\n        ResourceId = false,\n        ResourcePath = false,\n        SourceIp = false,\n        Stage = false,\n        User = false,\n        UserAgent = false,\n        UserArn = false\n    },\n    RequestParameters = new Dictionary<string, string> {\n        { \"requestParametersKey\", \"requestParameters\" }\n    },\n    RequestTemplates = new Dictionary<string, string> {\n        { \"requestTemplatesKey\", \"requestTemplates\" }\n    },\n    Timeout = Duration.Minutes(30),\n    VpcLink = vpcLink\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\nVpcLink vpcLink;\n\nStepFunctionsExecutionIntegrationOptions stepFunctionsExecutionIntegrationOptions = StepFunctionsExecutionIntegrationOptions.builder()\n        .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n        .cacheNamespace(\"cacheNamespace\")\n        .connectionType(ConnectionType.INTERNET)\n        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n        .credentialsPassthrough(false)\n        .credentialsRole(role)\n        .headers(false)\n        .integrationResponses(List.of(IntegrationResponse.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", \"responseParameters\"))\n                .responseTemplates(Map.of(\n                        \"responseTemplatesKey\", \"responseTemplates\"))\n                .selectionPattern(\"selectionPattern\")\n                .build()))\n        .passthroughBehavior(PassthroughBehavior.WHEN_NO_MATCH)\n        .path(false)\n        .querystring(false)\n        .requestContext(RequestContext.builder()\n                .accountId(false)\n                .apiId(false)\n                .apiKey(false)\n                .authorizerPrincipalId(false)\n                .caller(false)\n                .cognitoAuthenticationProvider(false)\n                .cognitoAuthenticationType(false)\n                .cognitoIdentityId(false)\n                .cognitoIdentityPoolId(false)\n                .httpMethod(false)\n                .requestId(false)\n                .resourceId(false)\n                .resourcePath(false)\n                .sourceIp(false)\n                .stage(false)\n                .user(false)\n                .userAgent(false)\n                .userArn(false)\n                .build())\n        .requestParameters(Map.of(\n                \"requestParametersKey\", \"requestParameters\"))\n        .requestTemplates(Map.of(\n                \"requestTemplatesKey\", \"requestTemplates\"))\n        .timeout(Duration.minutes(30))\n        .vpcLink(vpcLink)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\nconst stepFunctionsExecutionIntegrationOptions: apigateway.StepFunctionsExecutionIntegrationOptions = {\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionType: apigateway.ConnectionType.INTERNET,\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  credentialsPassthrough: false,\n  credentialsRole: role,\n  headers: false,\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n  path: false,\n  querystring: false,\n  requestContext: {\n    accountId: false,\n    apiId: false,\n    apiKey: false,\n    authorizerPrincipalId: false,\n    caller: false,\n    cognitoAuthenticationProvider: false,\n    cognitoAuthenticationType: false,\n    cognitoIdentityId: false,\n    cognitoIdentityPoolId: false,\n    httpMethod: false,\n    requestId: false,\n    resourceId: false,\n    resourcePath: false,\n    sourceIp: false,\n    stage: false,\n    user: false,\n    userAgent: false,\n    userArn: false,\n  },\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeout: cdk.Duration.minutes(30),\n  vpcLink: vpcLink,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsExecutionIntegrationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#INTERNET",
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#WHEN_NO_MATCH",
        "@aws-cdk/aws-apigateway.RequestContext",
        "@aws-cdk/aws-apigateway.StepFunctionsExecutionIntegrationOptions",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stepFunctionsExecutionIntegrationOptions: apigateway.StepFunctionsExecutionIntegrationOptions = {\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionType: apigateway.ConnectionType.INTERNET,\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  credentialsPassthrough: false,\n  credentialsRole: role,\n  headers: false,\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n  path: false,\n  querystring: false,\n  requestContext: {\n    accountId: false,\n    apiId: false,\n    apiKey: false,\n    authorizerPrincipalId: false,\n    caller: false,\n    cognitoAuthenticationProvider: false,\n    cognitoAuthenticationType: false,\n    cognitoIdentityId: false,\n    cognitoIdentityPoolId: false,\n    httpMethod: false,\n    requestId: false,\n    resourceId: false,\n    resourcePath: false,\n    sourceIp: false,\n    stage: false,\n    user: false,\n    userAgent: false,\n    userArn: false,\n  },\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeout: cdk.Duration.minutes(30),\n  vpcLink: vpcLink,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 72,
        "91": 22,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 7,
        "194": 10,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 43,
        "290": 1
      },
      "fqnsFingerprint": "a8975b940f88169acb318a107b2c17d8480e57edc43c7322e59cc5701595b4ed"
    },
    "504c8e750caf8d116650d23368f5891da7138da4cccb44fd6ea6f1229b76a353": {
      "translations": {
        "python": {
          "source": "state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))",
          "version": "2"
        },
        "csharp": {
          "source": "StateMachine stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nRestApi api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "1"
        },
        "$": {
          "source": "   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "a41d7a799e68c938a9fbbeb773c65db3f678326e0cf79b2f3a41b2a4e75d3845"
    },
    "e8f6551f9aedee844205d01c7fc53ff5366e133f25dcf1d78b18000740ef68ab": {
      "translations": {
        "python": {
          "source": "state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))",
          "version": "2"
        },
        "csharp": {
          "source": "StateMachine stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nRestApi api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "1"
        },
        "$": {
          "source": "   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
          "memberName": "startExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "a41d7a799e68c938a9fbbeb773c65db3f678326e0cf79b2f3a41b2a4e75d3845"
    },
    "3af5e9cb25557c8a25345785b022f733e1a0585c2bbb7c80b812278d61f98bed": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a0cf445baae8193d8a1804008cd9b43c84279a87788bb15897c84df03ae4ab45"
    },
    "ef287ed8dd4953dce2bd0b7d15ad5590b3200b24c6bc9ca2b673db2efd111bbb": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a0cf445baae8193d8a1804008cd9b43c84279a87788bb15897c84df03ae4ab45"
    },
    "926997ad9016b8244db93f09e23663d985897208c52a3132dcadcf9eb4c38030": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ThrottleSettings"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6504f562bd9c2afe70f39b7281d90da034c0a570ae0a1853e05708b03fc1e63a"
    },
    "424d9c3eab519a836e9114968980eaff1433f9a818045c3a2767a0a1e3e72a4f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# method: apigateway.Method\n\nthrottling_per_method = apigateway.ThrottlingPerMethod(\n    method=method,\n    throttle=apigateway.ThrottleSettings(\n        burst_limit=123,\n        rate_limit=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nMethod method;\n\nThrottlingPerMethod throttlingPerMethod = new ThrottlingPerMethod {\n    Method = method,\n    Throttle = new ThrottleSettings {\n        BurstLimit = 123,\n        RateLimit = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethod method;\n\nThrottlingPerMethod throttlingPerMethod = ThrottlingPerMethod.builder()\n        .method(method)\n        .throttle(ThrottleSettings.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const method: apigateway.Method;\nconst throttlingPerMethod: apigateway.ThrottlingPerMethod = {\n  method: method,\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ThrottlingPerMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.ThrottlingPerMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const method: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst throttlingPerMethod: apigateway.ThrottlingPerMethod = {\n  method: method,\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "083451c0f4eba46ca1899207b1fd0af87892553d2821b1cce4e500ab5a926f12"
    },
    "2e5877fc79981238745809cfb8b7d899b16a3b0a897b07010744e3fa3fa73d1c": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.TokenAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3d501605bb8170658a7911e28a2baf3e4c30b275257adb40134819e0dc3f1e02"
    },
    "6256f69d6f0d1acd02f709b99b64782d57e62d746699e2d75de054e778119102": {
      "translations": {
        "python": {
          "source": "# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.TokenAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3d501605bb8170658a7911e28a2baf3e4c30b275257adb40134819e0dc3f1e02"
    },
    "02a22f2b10f6a848b5cee6646b7970c33a9b18c659f34d5eb247ae7100ccf5e2": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.UsagePlan"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6504f562bd9c2afe70f39b7281d90da034c0a570ae0a1853e05708b03fc1e63a"
    },
    "6e1c6762209b1a775d7b9a19397853278f9e0f78e90de7094667c6e8048f8331": {
      "translations": {
        "python": {
          "source": "# plan: apigateway.UsagePlan\n# api: apigateway.RestApi\n# echo_method: apigateway.Method\n\n\nplan.add_api_stage(\n    stage=api.deployment_stage,\n    throttle=[apigateway.ThrottlingPerMethod(\n        method=echo_method,\n        throttle=apigateway.ThrottleSettings(\n            rate_limit=10,\n            burst_limit=2\n        )\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.AddApiStage(new UsagePlanPerApiStage {\n    Stage = api.DeploymentStage,\n    Throttle = new [] { new ThrottlingPerMethod {\n        Method = echoMethod,\n        Throttle = new ThrottleSettings {\n            RateLimit = 10,\n            BurstLimit = 2\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.addApiStage(UsagePlanPerApiStage.builder()\n        .stage(api.getDeploymentStage())\n        .throttle(List.of(ThrottlingPerMethod.builder()\n                .method(echoMethod)\n                .throttle(ThrottleSettings.builder()\n                        .rateLimit(10)\n                        .burstLimit(2)\n                        .build())\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.UsagePlanPerApiStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.RestApiBase#deploymentStage",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan#addApiStage",
        "@aws-cdk/aws-apigateway.UsagePlanPerApiStage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 20,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "835295e256d25287dc3894b9d7d1db03e67176388282ae986252156e3ebae0d8"
    },
    "730bb784f82e2a82e9b4231e983591ce3993b5ab72a787d746ae21ecc62e4b62": {
      "translations": {
        "python": {
          "source": "# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.UsagePlanProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6504f562bd9c2afe70f39b7281d90da034c0a570ae0a1853e05708b03fc1e63a"
    },
    "b932fae1f0d5cfcd091b51372e407cdce1fff0079ec4d808b34b22b98bb84c4b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.VpcLink"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "127542ac7086347afc7a9fff3808efc2afec2a96fe18c4fa6b2b3fadeb40cf67"
    },
    "2bee19bb48189227aa793b17a134808a0a604d46aee1c7e0b2ea43ae8dbf4a69": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.VpcLinkProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "127542ac7086347afc7a9fff3808efc2afec2a96fe18c4fa6b2b3fadeb40cf67"
    }
  }
}
