{
  "version": "2",
  "toolVersion": "1.52.1",
  "snippets": {
    "59de3f29276699716966954464d5d541f50ecc96424793d9e62a92a9253649ff": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 33
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as codebuild from '@aws-cdk/aws-codebuild';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "3970ad5bd47707446409ba245638da5596c2b45f360633ea7af617726920f3bb": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 52
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    /// !show\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              'echo \"Hello, CodeBuild!\"',\n            ],\n          },\n        },\n      }),\n    });\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'codebuild-default-project');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "f380326204757dea25578087a41079e7736fd055e509f584491c526a9a20eef3"
    },
    "5d79ef20e7ffe45d90b05d1de72bb6bb228a9a5c4db298c44179a59a2fb323c4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n\nrepository = codecommit.Repository(self, \"MyRepo\", repository_name=\"foo\")\ncodebuild.Project(self, \"MyFirstCodeCommitProject\",\n    source=codebuild.Source.code_commit(repository=repository)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repository = new Repository(this, \"MyRepo\", new RepositoryProps { RepositoryName = \"foo\" });\nnew Project(this, \"MyFirstCodeCommitProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repository })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repository = Repository.Builder.create(this, \"MyRepo\").repositoryName(\"foo\").build();\nProject.Builder.create(this, \"MyFirstCodeCommitProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repository).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repository = new codecommit.Repository(this, 'MyRepo', { repositoryName: 'foo' });\nnew codebuild.Project(this, 'MyFirstCodeCommitProject', {\n  source: codebuild.Source.codeCommit({ repository }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 71
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repository = new codecommit.Repository(this, 'MyRepo', { repositoryName: 'foo' });\nnew codebuild.Project(this, 'MyFirstCodeCommitProject', {\n  source: codebuild.Source.codeCommit({ repository }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 2,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9d9e3b7e89c511d349f58613e72fcd169a3723e4db47e414a6475e76815922b"
    },
    "8187801863c4733be74d82111cdfad1bfbde8c5920dc2fa622ecc347337f2531": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\n\ncodebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.s3(\n        bucket=bucket,\n        path=\"path/to/file.zip\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nnew Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.S3(new S3SourceProps {\n        Bucket = bucket,\n        Path = \"path/to/file.zip\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nProject.Builder.create(this, \"MyProject\")\n        .source(Source.s3(S3SourceProps.builder()\n                .bucket(bucket)\n                .path(\"path/to/file.zip\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 84
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3SourceProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#s3",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "1b00f72afe977d545327b5367decfee0ad4d8d39da16baf5f9aaefd9a15369da"
    },
    "e2da1a73c78678cc6f5af77c56de51a4abccd13a5293e8e263bf7da2fb18ed2d": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 102
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "8bdcaaaa7811814340ff88c5d831f92c1adbd7ed76eb9c0bdf3e09c9f982a44b"
    },
    "472459439f1eb9ec3fe2c925771012d81b6316028d6f18953d33fa0ba0e005fa": {
      "translations": {
        "python": {
          "source": "bb_source = codebuild.Source.bit_bucket(\n    owner=\"owner\",\n    repo=\"repo\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource bbSource = Source.BitBucket(new BitBucketSourceProps {\n    Owner = \"owner\",\n    Repo = \"repo\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource bbSource = Source.bitBucket(BitBucketSourceProps.builder()\n        .owner(\"owner\")\n        .repo(\"repo\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "0d5f93ec272f9fdaff68d9502f2d427cbf928e3ff8b8091e4c885d66d81c8e67"
    },
    "050d470b4e7dff1a04d98e73687df3fe6ef11f3a89c615aa368f19954ad6cba9": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    fetch_submodules=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    FetchSubmodules = true\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .fetchSubmodules(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  fetchSubmodules: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 140
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  fetchSubmodules: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "dbe5e3fd6ddb4d5f84df429ef807293ca64d6360b70afa9120e41a4ff0150f6e"
    },
    "085bab3997a9782fe5d20d3896437ac8b3d8ecaeecc743c2f6569b035e0baca9": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7b8d430c6c6206ef0b40361479d97e2f3e492ddd6f37e935021e95d62ca6923"
    },
    "9ee1cc80c888172237de1bf978384fb3c090dbb8fb656f7ee27a2ee51207e075": {
      "translations": {
        "python": {
          "source": "project = codebuild.PipelineProject(self, \"Project\")",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project = new PipelineProject(this, \"Project\", new PipelineProjectProps { });",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project = PipelineProject.Builder.create(this, \"Project\").build();",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.PipelineProject(this, 'Project', {\n  // properties as above...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 186
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.PipelineProject(this, 'Project', {\n  // properties as above...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "59f30669581c04471c3261e98fdb518737816f855e1a31da1f75c92217bcbbae"
    },
    "c081d3235425908f1614a405543c91f4d49a9b98c80a24d50488156deea0bfac": {
      "translations": {
        "python": {
          "source": "# my_caching_bucket: s3.Bucket\n\n\ncodebuild.Project(self, \"Project\",\n    source=codebuild.Source.bit_bucket(\n        owner=\"awslabs\",\n        repo=\"aws-cdk\"\n    ),\n\n    cache=codebuild.Cache.bucket(my_caching_bucket),\n\n    # BuildSpec with a 'cache' section necessary for S3 caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myCachingBucket;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Source = Source.BitBucket(new BitBucketSourceProps {\n        Owner = \"awslabs\",\n        Repo = \"aws-cdk\"\n    }),\n\n    Cache = Cache.Bucket(myCachingBucket),\n\n    // BuildSpec with a 'cache' section necessary for S3 caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myCachingBucket;\n\n\nProject.Builder.create(this, \"Project\")\n        .source(Source.bitBucket(BitBucketSourceProps.builder()\n                .owner(\"awslabs\")\n                .repo(\"aws-cdk\")\n                .build()))\n\n        .cache(Cache.bucket(myCachingBucket))\n\n        // BuildSpec with a 'cache' section necessary for S3 caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myCachingBucket: s3.Bucket;\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 205
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#bucket",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myCachingBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "8755ad81e03dfcdc3cbf9122540a5e91d425f5cb688834599a66c4634bd87276"
    },
    "49ba5fc28107f7c5b9111da310b960dafb8432ec94240e6fb1ace9f78a8e0f41": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    source=codebuild.Source.git_hub_enterprise(\n        https_clone_url=\"https://my-github-enterprise.com/owner/repo\"\n    ),\n\n    # Enable Docker AND custom caching\n    cache=codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n    # BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Source = Source.GitHubEnterprise(new GitHubEnterpriseSourceProps {\n        HttpsCloneUrl = \"https://my-github-enterprise.com/owner/repo\"\n    }),\n\n    // Enable Docker AND custom caching\n    Cache = Cache.Local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM),\n\n    // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .source(Source.gitHubEnterprise(GitHubEnterpriseSourceProps.builder()\n                .httpsCloneUrl(\"https://my-github-enterprise.com/owner/repo\")\n                .build()))\n\n        // Enable Docker AND custom caching\n        .cache(Cache.local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM))\n\n        // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 252
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#local",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.LocalCacheMode",
        "@aws-cdk/aws-codebuild.LocalCacheMode#CUSTOM",
        "@aws-cdk/aws-codebuild.LocalCacheMode#DOCKER_LAYER",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHubEnterprise",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 11,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "bfb7eb368f5a75220bb8dbebeb8022c28815b83a7e7c296116fe05ffbefb3775"
    },
    "2fde47a725abd4b31e5e7b55933be824ea191a7ff58774802cb539b3f5fc63f1": {
      "translations": {
        "python": {
          "source": "# ecr_repository: ecr.Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 321
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6342616eeabbee4e2fcb1d68a1ec3450d2df019df354ee23da20306214ccc511"
    },
    "06821509fd03f9107ebbb67c99e6a3ddddafacd047771212a5b941ef1fd59d48": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_asset(self, \"MyImage\",\n        directory=path.join(__dirname, \"demo-image\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromAsset(this, \"MyImage\", new DockerImageAssetProps {\n        Directory = Join(__dirname, \"demo-image\")\n    })\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromAsset(this, \"MyImage\", DockerImageAssetProps.builder()\n                .directory(join(__dirname, \"demo-image\"))\n                .build()))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'MyImage', {\n    directory: path.join(__dirname, 'demo-image'),\n  }),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 339
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'MyImage', {\n          directory: path.join(__dirname, 'demo-image'),\n        }),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "281": 3
      },
      "fqnsFingerprint": "52c8f83b96aaefc4017f035923a86288aacfa29462d7358b3fa22eb823ab70bd"
    },
    "e57c6d976be31743cd46e9669624bbbd14740e4c68e0fe43bc23801cbdefbd96": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_ecr_repository(ecr_repository, \"v1.0\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromEcrRepository(ecrRepository, \"v1.0\")\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromEcrRepository(ecrRepository, \"v1.0\"))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromEcrRepository(ecrRepository, 'v1.0'),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 349
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromEcrRepository",
        "@aws-cdk/aws-ecr.IRepository"
      ],
      "fullSource": "import * as ecr from '@aws-cdk/aws-ecr';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const ecrRepository = new ecr.Repository(this, 'MyRepo');\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromEcrRepository(ecrRepository, 'v1.0'),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "281": 2
      },
      "fqnsFingerprint": "d17ffc2f9648a97e8abea0a9db6dc46db8eeac5d158d913a64e0142e21e09674"
    },
    "d1afbafd1cc338ff445fddd0059e5a8d247c54859ca21811bf512d0a788b530c": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_docker_registry(\"my-registry/my-repo\",\n        secrets_manager_credentials=secrets\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromDockerRegistry(\"my-registry/my-repo\", new DockerImageOptions {\n        SecretsManagerCredentials = secrets\n    })\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromDockerRegistry(\"my-registry/my-repo\", DockerImageOptions.builder()\n                .secretsManagerCredentials(secrets)\n                .build()))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n    secretsManagerCredentials: secrets,\n  }),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 357
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.DockerImageOptions",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromDockerRegistry",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const secrets = secretsmanager.Secret.fromSecretCompleteArn(this, 'MySecrets',\n      `arn:aws:secretsmanager:${this.region}:${this.account}:secret:my-secrets-123456`);\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n          secretsManagerCredentials: secrets,\n        }),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "193": 2,
        "194": 2,
        "196": 1,
        "281": 3
      },
      "fqnsFingerprint": "44036f610e5d14790f8827a7d6c92f8a2aa2d9b77c31bfe9be0619dd21645081"
    },
    "3f255c63368b24d3bcbd2d199834fd4c949a237fb6dde82c5561a8aeed3c8130": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage#DLC_TENSORFLOW_2_1_0_INFERENCE",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "81d669815e87a50f2460425d69485f7690c2320d03c04e9959119d82ea13b021"
    },
    "833eff6ac33a175bd6707454a69471a1e43cc98a0e1b684b7cba4b7cc4126a52": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxGpuBuildImage.aws_deep_learning_containers_image(\"tensorflow-inference\", \"2.1.0-gpu-py36-cu101-ubuntu18.04\", \"123456789012\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxGpuBuildImage.AwsDeepLearningContainersImage(\"tensorflow-inference\", \"2.1.0-gpu-py36-cu101-ubuntu18.04\", \"123456789012\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxGpuBuildImage.awsDeepLearningContainersImage(\"tensorflow-inference\", \"2.1.0-gpu-py36-cu101-ubuntu18.04\", \"123456789012\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.awsDeepLearningContainersImage(\n      'tensorflow-inference', '2.1.0-gpu-py36-cu101-ubuntu18.04', '123456789012'),\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 389
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage#awsDeepLearningContainersImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.awsDeepLearningContainersImage(\n      'tensorflow-inference', '2.1.0-gpu-py36-cu101-ubuntu18.04', '123456789012'),\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "0fd3f32ca28cc86443459d67ead1da448dcbd276dc48c0d18f3aa180f95df48e"
    },
    "163a307da121f9d7cb4f6c31d5f2f1ac24e6d31c4cc09e5dda11c934bc553b33": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            log_group=logs.LogGroup(self, \"MyLogGroup\")\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            LogGroup = new LogGroup(this, \"MyLogGroup\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .logGroup(new LogGroup(this, \"MyLogGroup\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 409
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "384f1e60aef306882cd3df18712bf979764e9a065e4971a1599d4bc336312f35"
    },
    "736f0029ef7cfa66bc584036a3b38aa5d9a6d70341cf8b03b53ed1c149268030": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        s3=codebuild.S3LoggingOptions(\n            bucket=s3.Bucket(self, \"LogBucket\")\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        S3 = new S3LoggingOptions {\n            Bucket = new Bucket(this, \"LogBucket\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .s3(S3LoggingOptions.builder()\n                        .bucket(new Bucket(this, \"LogBucket\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 421
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3LoggingOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "ad19390ed5a557488df8dc7e295a6aee676687e53176faf1569017f145a82531"
    },
    "d411d130a5b4901592d76f497d6357da07f1adfd2808907d36d55f7f131313d3": {
      "translations": {
        "python": {
          "source": "codebuild.GitHubSourceCredentials(self, \"CodeBuildGitHubCreds\",\n    access_token=SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GitHubSourceCredentials(this, \"CodeBuildGitHubCreds\", new GitHubSourceCredentialsProps {\n    AccessToken = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GitHubSourceCredentials.Builder.create(this, \"CodeBuildGitHubCreds\")\n        .accessToken(SecretValue.secretsManager(\"my-token\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n// GitHub Enterprise is almost the same,\n// except the class is called GitHubEnterpriseSourceCredentials",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 436
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7d62b3da3f8988b84ede71520d35bf12fb7a5e365dfdcc30df01d90e4d04b7e1"
    },
    "f6adcbe526fd67c217a995246719eec8325f47a0c4d17e7a664257c2a1ed94a0": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 446
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "10ee79a7069e78ca0686f6af0c097b5cef4d9213406b516b3f08bb831d411d75"
    },
    "cba200dd9eb0e992c71e49b7ad86c6496cef63542e6a889d50808b6aa64412f0": {
      "translations": {
        "python": {
          "source": "project = codebuild.Project(self, \"Project\",\n    build_spec=codebuild.BuildSpec.from_object({\n        # ...\n        \"reports\": {\n            \"my_report\": {\n                \"files\": \"**/*\",\n                \"base-directory\": \"build/test-results\"\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Project project = new Project(this, \"Project\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        // ...\n        { \"reports\", new Dictionary<string, IDictionary<string, string>> {\n            { \"myReport\", new Struct {\n                Files = \"**/*\",\n                Base-directory = \"build/test-results\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project project = Project.Builder.create(this, \"Project\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                // ...\n                \"reports\", Map.of(\n                        \"myReport\", Map.of(\n                                \"files\", \"**/*\",\n                                \"base-directory\", \"build/test-results\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.Project(this, 'Project', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      myReport: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 466
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.Project(this, 'Project', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      myReport: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "104": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "f380326204757dea25578087a41079e7736fd055e509f584491c526a9a20eef3"
    },
    "81547318bd3357e78b52a37cafe918a84b941e1073d1454ebfa2cba51b1b0138": {
      "translations": {
        "python": {
          "source": "# source: codebuild.Source\n\n\nproject = codebuild.Project(self, \"Project\",\n    source=source,\n    grant_report_group_permissions=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Source source;\n\n\nProject project = new Project(this, \"Project\", new ProjectProps {\n    Source = source,\n    GrantReportGroupPermissions = false\n});",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\nProject project = Project.Builder.create(this, \"Project\")\n        .source(source)\n        .grantReportGroupPermissions(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  grantReportGroupPermissions: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 488
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  grantReportGroupPermissions: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a736d120dad873c49baa63c6d4263d54c45607b79394ec66dcbce980d57cf246"
    },
    "f537b87fb19b5980a2103d9913b54390545ea623899ba2941ebac2c5dd57605c": {
      "translations": {
        "python": {
          "source": "# source: codebuild.Source\n\n\n# create a new ReportGroup\nreport_group = codebuild.ReportGroup(self, \"ReportGroup\")\n\nproject = codebuild.Project(self, \"Project\",\n    source=source,\n    build_spec=codebuild.BuildSpec.from_object({\n        # ...\n        \"reports\": {\n            report_group.report_group_arn: {\n                \"files\": \"**/*\",\n                \"base-directory\": \"build/test-results\"\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = new Project(this, \"Project\", new ProjectProps {\n    Source = source,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        // ...\n        { \"reports\", new Dictionary<string, IDictionary<string, string>> {\n            { reportGroup.ReportGroupArn, new Struct {\n                Files = \"**/*\",\n                Base-directory = \"build/test-results\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = Project.Builder.create(this, \"Project\")\n        .source(source)\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                // ...\n                \"reports\", Map.of(\n                        reportGroup.getReportGroupArn(), Map.of(\n                                \"files\", \"**/*\",\n                                \"base-directory\", \"build/test-results\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 500
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.ReportGroup",
        "@aws-cdk/aws-codebuild.ReportGroup#reportGroupArn",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "130": 1,
        "153": 1,
        "154": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b76a761311ed8fd751f63219486e89eddcc4d7ce90d59c9150862cc2014a2b00"
    },
    "2ee1c7e1f3c1a77aac68711b946df53e22d080e0da2bf4463a9a84fa0f82b66a": {
      "translations": {
        "python": {
          "source": "# project: codebuild.Project\n# report_group: codebuild.ReportGroup\n\n\nreport_group.grant_write(project)",
          "version": "2"
        },
        "csharp": {
          "source": "Project project;\nReportGroup reportGroup;\n\n\nreportGroup.GrantWrite(project);",
          "version": "1"
        },
        "java": {
          "source": "Project project;\nReportGroup reportGroup;\n\n\nreportGroup.grantWrite(project);",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.Project;\ndeclare const reportGroup: codebuild.ReportGroup;\n\nreportGroup.grantWrite(project);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 522
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.Project;\ndeclare const reportGroup: codebuild.ReportGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nreportGroup.grantWrite(project);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "04a525ba5e65d544d0e149f4a81a425d5520b317ab51095d98b612e377acb280": {
      "translations": {
        "python": {
          "source": "# start build when a commit is pushed\nimport aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\n# code_commit_repository: codecommit.Repository\n# project: codebuild.Project\n\n\ncode_commit_repository.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// start build when a commit is pushed\nusing Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository codeCommitRepository;\nProject project;\n\n\ncodeCommitRepository.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project)\n});",
          "version": "1"
        },
        "java": {
          "source": "// start build when a commit is pushed\nimport software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository codeCommitRepository;\nProject project;\n\n\ncodeCommitRepository.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// start build when a commit is pushed\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const codeCommitRepository: codecommit.Repository;\ndeclare const project: codebuild.Project;\n\ncodeCommitRepository.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 542
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events.IRuleTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// start build when a commit is pushed\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const codeCommitRepository: codecommit.Repository;\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncodeCommitRepository.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "34c2ced1741156292b9184e4371aa5818d3bef99aabe015021689c85ce6b9a85"
    },
    "f4a4e7d1ef4ed8abd44f7f87802fc4831ca1f3e92c694a028c560c27f708564d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events_targets as targets\n# fn: lambda.Function\n# project: codebuild.Project\n\n\nrule = project.on_state_change(\"BuildStateChange\",\n    target=targets.LambdaFunction(fn)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events.Targets;\nFunction fn;\nProject project;\n\n\nRule rule = project.OnStateChange(\"BuildStateChange\", new OnEventOptions {\n    Target = new LambdaFunction(fn)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.targets.*;\nFunction fn;\nProject project;\n\n\nRule rule = project.onStateChange(\"BuildStateChange\", OnEventOptions.builder()\n        .target(new LambdaFunction(fn))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as targets from '@aws-cdk/aws-events-targets';\ndeclare const fn: lambda.Function;\ndeclare const project: codebuild.Project;\n\nconst rule = project.onStateChange('BuildStateChange', {\n  target: new targets.LambdaFunction(fn)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 560
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as targets from '@aws-cdk/aws-events-targets';\ndeclare const fn: lambda.Function;\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = project.onStateChange('BuildStateChange', {\n  target: new targets.LambdaFunction(fn)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ffefc538b92269f6d5e723cd64007ea4a680936e00286dfce03ffabb709375cf"
    },
    "8c011e77ea0214c9491ac66ffee9b433aed38dcfa390f3788fe395438fe2985d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_chatbot as chatbot\n\n# project: codebuild.Project\n\n\ntarget = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = project.notify_on_build_succeeded(\"NotifyOnBuildSucceeded\", target)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Chatbot;\n\nProject project;\n\n\nSlackChannelConfiguration target = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nINotificationRule rule = project.NotifyOnBuildSucceeded(\"NotifyOnBuildSucceeded\", target);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.chatbot.*;\n\nProject project;\n\n\nSlackChannelConfiguration target = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nINotificationRule rule = project.notifyOnBuildSucceeded(\"NotifyOnBuildSucceeded\", target);",
          "version": "1"
        },
        "$": {
          "source": "import * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const project: codebuild.Project;\n\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = project.notifyOnBuildSucceeded('NotifyOnBuildSucceeded', target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 575
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codestarnotifications.INotificationRule",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = project.notifyOnBuildSucceeded('NotifyOnBuildSucceeded', target);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "751a85fa8eeb9dc3396abed42a23acde81355e53b539013adf1b9579827da5f9"
    },
    "b745341d13424305a35d2de64aee7a8b1d9bb7da284ba24c771a3c45dc89b41d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n# repo: codecommit.Repository\n# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    secondary_sources=[\n        codebuild.Source.code_commit(\n            identifier=\"source2\",\n            repository=repo\n        )\n    ],\n    secondary_artifacts=[\n        codebuild.Artifacts.s3(\n            identifier=\"artifact2\",\n            bucket=bucket,\n            path=\"some/path\",\n            name=\"file.zip\"\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nRepository repo;\nBucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    SecondarySources = new [] { Source.CodeCommit(new CodeCommitSourceProps {\n        Identifier = \"source2\",\n        Repository = repo\n    }) },\n    SecondaryArtifacts = new [] { Artifacts.S3(new S3ArtifactsProps {\n        Identifier = \"artifact2\",\n        Bucket = bucket,\n        Path = \"some/path\",\n        Name = \"file.zip\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nRepository repo;\nBucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .secondarySources(List.of(Source.codeCommit(CodeCommitSourceProps.builder()\n                .identifier(\"source2\")\n                .repository(repo)\n                .build())))\n        .secondaryArtifacts(List.of(Artifacts.s3(S3ArtifactsProps.builder()\n                .identifier(\"artifact2\")\n                .bucket(bucket)\n                .path(\"some/path\")\n                .name(\"file.zip\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 594
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "1ee14e7dd006f3ba77d51f4ce61f54a844870b6508e095c96fd5a83249da4030"
    },
    "c2572beccfc7b923471a8200c7564cec0a713c4454429f0a4287e243dd6b05d1": {
      "translations": {
        "python": {
          "source": "project = codebuild.Project(self, \"MyProject\",\n    # secondary sources and artifacts as above...\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"cd $CODEBUILD_SRC_DIR_source2\", \"touch output2.txt\"\n                ]\n            }\n        },\n        \"artifacts\": {\n            \"secondary-artifacts\": {\n                \"artifact2\": {\n                    \"base-directory\": \"$CODEBUILD_SRC_DIR_source2\",\n                    \"files\": [\"output2.txt\"\n                    ]\n                }\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Project project = new Project(this, \"MyProject\", new ProjectProps {\n    // secondary sources and artifacts as above...\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"cd $CODEBUILD_SRC_DIR_source2\", \"touch output2.txt\" }\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n            { \"secondary-artifacts\", new Struct {\n                Artifact2 = new Struct {\n                    Base-directory = \"$CODEBUILD_SRC_DIR_source2\",\n                    Files = new [] { \"output2.txt\" }\n                }\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project project = Project.Builder.create(this, \"MyProject\")\n        // secondary sources and artifacts as above...\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"cd $CODEBUILD_SRC_DIR_source2\", \"touch output2.txt\"))),\n                \"artifacts\", Map.of(\n                        \"secondary-artifacts\", Map.of(\n                                \"artifact2\", Map.of(\n                                        \"base-directory\", \"$CODEBUILD_SRC_DIR_source2\",\n                                        \"files\", List.of(\"output2.txt\")))))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.Project(this, 'MyProject', {\n  // secondary sources and artifacts as above...\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'cd $CODEBUILD_SRC_DIR_source2',\n          'touch output2.txt',\n        ],\n      },\n    },\n    artifacts: {\n      'secondary-artifacts': {\n        'artifact2': {\n          'base-directory': '$CODEBUILD_SRC_DIR_source2',\n          'files': [\n            'output2.txt',\n          ],\n        },\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 631
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.Project(this, 'MyProject', {\n  // secondary sources and artifacts as above...\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'cd $CODEBUILD_SRC_DIR_source2',\n          'touch output2.txt',\n        ],\n      },\n    },\n    artifacts: {\n      'secondary-artifacts': {\n        'artifact2': {\n          'base-directory': '$CODEBUILD_SRC_DIR_source2',\n          'files': [\n            'output2.txt',\n          ],\n        },\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 12,
        "104": 1,
        "192": 2,
        "193": 7,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "f380326204757dea25578087a41079e7736fd055e509f584491c526a9a20eef3"
    },
    "a07d3a675edcd24b3a0e8da92b80eac50dc094ddf39c6e1ce256522305f26fc0": {
      "translations": {
        "python": {
          "source": "# load_balancer: elbv2.ApplicationLoadBalancer\n\n\nvpc = ec2.Vpc(self, \"MyVPC\")\nproject = codebuild.Project(self, \"MyProject\",\n    vpc=vpc,\n    build_spec=codebuild.BuildSpec.from_object({})\n)\n\nproject.connections.allow_to(load_balancer, ec2.Port.tcp(443))",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer loadBalancer;\n\n\nVpc vpc = new Vpc(this, \"MyVPC\");\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Vpc = vpc,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> { })\n});\n\nproject.Connections.AllowTo(loadBalancer, Port.Tcp(443));",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer loadBalancer;\n\n\nVpc vpc = new Vpc(this, \"MyVPC\");\nProject project = Project.Builder.create(this, \"MyProject\")\n        .vpc(vpc)\n        .buildSpec(BuildSpec.fromObject(Map.of()))\n        .build();\n\nproject.connections.allowTo(loadBalancer, Port.tcp(443));",
          "version": "1"
        },
        "$": {
          "source": "declare const loadBalancer: elbv2.ApplicationLoadBalancer;\n\nconst vpc = new ec2.Vpc(this, 'MyVPC');\nconst project = new codebuild.Project(this, 'MyProject', {\n  vpc: vpc,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n  }),\n});\n\nproject.connections.allowTo(loadBalancer, ec2.Port.tcp(443));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 689
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const loadBalancer: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'MyVPC');\nconst project = new codebuild.Project(this, 'MyProject', {\n  vpc: vpc,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n  }),\n});\n\nproject.connections.allowTo(loadBalancer, ec2.Port.tcp(443));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f79758565935908a17fcac319c964df806b77b838a1f5c7ba7f959ee8ec99149"
    },
    "d4d9387c7776d058afd51fa2dd6a33b5085d4ed8d7eb2bfe7f183775aca46936": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    file_system_locations=[\n        codebuild.FileSystemLocation.efs(\n            identifier=\"myidentifier2\",\n            location=\"myclodation.mydnsroot.com:/loc\",\n            mount_point=\"/media\",\n            mount_options=\"opts\"\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    FileSystemLocations = new [] { FileSystemLocation.Efs(new EfsFileSystemLocationProps {\n        Identifier = \"myidentifier2\",\n        Location = \"myclodation.mydnsroot.com:/loc\",\n        MountPoint = \"/media\",\n        MountOptions = \"opts\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .fileSystemLocations(List.of(FileSystemLocation.efs(EfsFileSystemLocationProps.builder()\n                .identifier(\"myidentifier2\")\n                .location(\"myclodation.mydnsroot.com:/loc\")\n                .mountPoint(\"/media\")\n                .mountOptions(\"opts\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 713
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps",
        "@aws-cdk/aws-codebuild.FileSystemLocation",
        "@aws-cdk/aws-codebuild.FileSystemLocation#efs",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "93c44fa161f6c24c65705471b7ab40d9717f1e37d5db9c86c7d2847058c0eb9f"
    },
    "84efef45c8e3ccf3d367228ccca1c0f7190039137d7966cea1adc2e59850c14e": {
      "translations": {
        "python": {
          "source": "# source: codebuild.Source\n\n\nproject = codebuild.Project(self, \"MyProject\", source=source)\n\nif project.enable_batch_builds():\n    print(\"Batch builds were enabled\")",
          "version": "2"
        },
        "csharp": {
          "source": "Source source;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps { Source = source });\n\nif (project.EnableBatchBuilds())\n{\n    Console.WriteLine(\"Batch builds were enabled\");\n}",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\nProject project = Project.Builder.create(this, \"MyProject\").source(source).build();\n\nif (project.enableBatchBuilds()) {\n    System.out.println(\"Batch builds were enabled\");\n}",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\nconst project = new codebuild.Project(this, 'MyProject', { source, });\n\nif (project.enableBatchBuilds()) {\n  console.log('Batch builds were enabled');\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 740
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.Project#enableBatchBuilds",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', { source, });\n\nif (project.enableBatchBuilds()) {\n  console.log('Batch builds were enabled');\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "223": 1,
        "225": 2,
        "226": 1,
        "227": 1,
        "242": 2,
        "243": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5a4eefbedce9c8a00e39b2e219d4d7f8d19ffae826ce2515c38fd1e0128798fc"
    },
    "f69eaf8ad81bb214d4ad3090f768ad86f23d09cca3aa9be2a81398f4f3483e02": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    timeout=Duration.minutes(90)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    Timeout = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .timeout(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  timeout: Duration.minutes(90)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 757
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  timeout: Duration.minutes(90)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "82f405b314e615deec4093a838308ddc5139ec5a5faeb9c183fe54eb2572e8b0"
    },
    "70aaab82e5c2f22abf413efbc6ebc9192a4d8b333735f9db16b7bcb71d8fa06b": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    queued_timeout=Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    QueuedTimeout = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .queuedTimeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  queuedTimeout: Duration.minutes(30)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 768
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  queuedTimeout: Duration.minutes(30)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "82f405b314e615deec4093a838308ddc5139ec5a5faeb9c183fe54eb2572e8b0"
    },
    "a2ed46d800d2e4f9861f0f2cedac3a02cd2ba6a2ea69a3de891db1b40b0a5eb6": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    concurrent_build_limit=1\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    ConcurrentBuildLimit = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .concurrentBuildLimit(1)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  concurrentBuildLimit: 1\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 780
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  concurrentBuildLimit: 1\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "ca419b2c4dcd2373091d23318c4b842caab744832b1213023b26974250815748"
    },
    "36eedea6217d174af1419c798bc1214efac26819ac83f983d3b175cd990aa02f": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Artifacts"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7b8d430c6c6206ef0b40361479d97e2f3e492ddd6f37e935021e95d62ca6923"
    },
    "93d7db2973b924fa62cc6302db6d568ff546c9c895264a28c389ae940b92bc39": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nartifacts_config = codebuild.ArtifactsConfig(\n    artifacts_property=codebuild.CfnProject.ArtifactsProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        artifact_identifier=\"artifactIdentifier\",\n        encryption_disabled=False,\n        location=\"location\",\n        name=\"name\",\n        namespace_type=\"namespaceType\",\n        override_artifact_name=False,\n        packaging=\"packaging\",\n        path=\"path\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nArtifactsConfig artifactsConfig = new ArtifactsConfig {\n    ArtifactsProperty = new ArtifactsProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ArtifactIdentifier = \"artifactIdentifier\",\n        EncryptionDisabled = false,\n        Location = \"location\",\n        Name = \"name\",\n        NamespaceType = \"namespaceType\",\n        OverrideArtifactName = false,\n        Packaging = \"packaging\",\n        Path = \"path\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nArtifactsConfig artifactsConfig = ArtifactsConfig.builder()\n        .artifactsProperty(ArtifactsProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .artifactIdentifier(\"artifactIdentifier\")\n                .encryptionDisabled(false)\n                .location(\"location\")\n                .name(\"name\")\n                .namespaceType(\"namespaceType\")\n                .overrideArtifactName(false)\n                .packaging(\"packaging\")\n                .path(\"path\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst artifactsConfig: codebuild.ArtifactsConfig = {\n  artifactsProperty: {\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ArtifactsConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ArtifactsConfig",
        "@aws-cdk/aws-codebuild.CfnProject.ArtifactsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst artifactsConfig: codebuild.ArtifactsConfig = {\n  artifactsProperty: {\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a94cc3680d1e89f0195e533fc4fb8c7943dd9cf758bab4eefe2df26f0d47538d"
    },
    "fec888d12b9efda769b3df8b32adc84b00e4148f0df029e303ddbec25d4bc3b9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nartifacts_props = codebuild.ArtifactsProps(\n    identifier=\"identifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nArtifactsProps artifactsProps = new ArtifactsProps {\n    Identifier = \"identifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nArtifactsProps artifactsProps = ArtifactsProps.builder()\n        .identifier(\"identifier\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst artifactsProps: codebuild.ArtifactsProps = {\n  identifier: 'identifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ArtifactsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ArtifactsProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst artifactsProps: codebuild.ArtifactsProps = {\n  identifier: 'identifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3936cb4f753102cac21122d28cb91a6af57b41a5b408c6763aaa8e53026dd05f"
    },
    "75769773ae643d12883fb8b24046342004a16436df4d9afee60de7806b78cb1d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nbatch_build_config = codebuild.BatchBuildConfig(\n    role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nBatchBuildConfig batchBuildConfig = new BatchBuildConfig {\n    Role = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nBatchBuildConfig batchBuildConfig = BatchBuildConfig.builder()\n        .role(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst batchBuildConfig: codebuild.BatchBuildConfig = {\n  role: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BatchBuildConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BatchBuildConfig",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchBuildConfig: codebuild.BatchBuildConfig = {\n  role: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "28aee76cec02d9ce33d03fc11b64f3ef8c623b1c14150da291f1554a283c38c1"
    },
    "a848681d4e68721fb6bca30013f76876a44fceac1743880f8896cff8ad51563e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_s3 as s3\n\n# bucket: s3.Bucket\n\nbind_to_code_pipeline_options = codebuild.BindToCodePipelineOptions(\n    artifact_bucket=bucket\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.S3;\n\nBucket bucket;\n\nBindToCodePipelineOptions bindToCodePipelineOptions = new BindToCodePipelineOptions {\n    ArtifactBucket = bucket\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.s3.*;\n\nBucket bucket;\n\nBindToCodePipelineOptions bindToCodePipelineOptions = BindToCodePipelineOptions.builder()\n        .artifactBucket(bucket)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\nconst bindToCodePipelineOptions: codebuild.BindToCodePipelineOptions = {\n  artifactBucket: bucket,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BindToCodePipelineOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BindToCodePipelineOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bindToCodePipelineOptions: codebuild.BindToCodePipelineOptions = {\n  artifactBucket: bucket,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0cfb7c8c295aba20ddf88f124b6962f0dfdb5142dde849b9ec11a1611b4509c2"
    },
    "74a20c38a4d56164a5e46818b7bc2bc1ad5b1e095114cdde8cf1969b1b0b8bb5": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "10ee79a7069e78ca0686f6af0c097b5cef4d9213406b516b3f08bb831d411d75"
    },
    "98c452bf9c64ba2f221d78bd78045b7d7f8237c7470f03b3dbb41cf577875b11": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "10ee79a7069e78ca0686f6af0c097b5cef4d9213406b516b3f08bb831d411d75"
    },
    "5a9f49b2527e750da70e7261d5d95a32fad5d4ff6320cb504ac68b4da4d1297a": {
      "translations": {
        "python": {
          "source": "bb_source = codebuild.Source.bit_bucket(\n    owner=\"owner\",\n    repo=\"repo\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource bbSource = Source.BitBucket(new BitBucketSourceProps {\n    Owner = \"owner\",\n    Repo = \"repo\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource bbSource = Source.bitBucket(BitBucketSourceProps.builder()\n        .owner(\"owner\")\n        .repo(\"repo\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "0d5f93ec272f9fdaff68d9502f2d427cbf928e3ff8b8091e4c885d66d81c8e67"
    },
    "62f962f4ccef0389e69bd90eb89aab0dc4b1e8c2291f90fa6e461713643363c7": {
      "translations": {
        "python": {
          "source": "\"awslabs\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "java": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "$": {
          "source": "'awslabs'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps",
          "memberName": "owner"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'awslabs'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7eb1938d4f55ac9346ea67b8831c2609fe3559830953c0f2c23ccd83ed1db0b2": {
      "translations": {
        "python": {
          "source": "\"aws-cdk\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "$": {
          "source": "'aws-cdk'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps",
          "memberName": "repo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'aws-cdk'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c300fb2cb9185abc00d7b80fc1587c147178bae66ce4041587d618e71d0c8d51": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "8a4f8ac9e76dc3495b1b8df2479a82e315b0a9cd9f1722a8eba3f0f5e9a18c3b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nbucket_cache_options = codebuild.BucketCacheOptions(\n    prefix=\"prefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nBucketCacheOptions bucketCacheOptions = new BucketCacheOptions {\n    Prefix = \"prefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nBucketCacheOptions bucketCacheOptions = BucketCacheOptions.builder()\n        .prefix(\"prefix\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst bucketCacheOptions: codebuild.BucketCacheOptions = {\n  prefix: 'prefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BucketCacheOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BucketCacheOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bucketCacheOptions: codebuild.BucketCacheOptions = {\n  prefix: 'prefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e6fe5712fcfc491f67682550e9a5e5075e2957910914a5e10fd9968f76693c9c"
    },
    "2c623026499b4ffcb9bae6287fc18112192e89a38ed9fa446bc65305514be441": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# my_security_group: ec2.SecurityGroup\n\npipelines.CodePipeline(self, \"Pipeline\",\n    # Standard CodePipeline properties\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    ),\n\n    # Defaults for all CodeBuild projects\n    code_build_defaults=pipelines.CodeBuildOptions(\n        # Prepend commands and configuration to all projects\n        partial_build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\"\n        }),\n\n        # Control the build environment\n        build_environment=codebuild.BuildEnvironment(\n            compute_type=codebuild.ComputeType.LARGE\n        ),\n\n        # Control Elastic Network Interface creation\n        vpc=vpc,\n        subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n        security_groups=[my_security_group],\n\n        # Additional policy statements for the execution role\n        role_policy=[\n            iam.PolicyStatement()\n        ]\n    ),\n\n    synth_code_build_defaults=pipelines.CodeBuildOptions(),\n    asset_publishing_code_build_defaults=pipelines.CodeBuildOptions(),\n    self_mutation_code_build_defaults=pipelines.CodeBuildOptions()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    // Standard CodePipeline properties\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Defaults for all CodeBuild projects\n    CodeBuildDefaults = new CodeBuildOptions {\n        // Prepend commands and configuration to all projects\n        PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" }\n        }),\n\n        // Control the build environment\n        BuildEnvironment = new BuildEnvironment {\n            ComputeType = ComputeType.LARGE\n        },\n\n        // Control Elastic Network Interface creation\n        Vpc = vpc,\n        SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n        SecurityGroups = new [] { mySecurityGroup },\n\n        // Additional policy statements for the execution role\n        RolePolicy = new [] {\n            new PolicyStatement(new PolicyStatementProps { }) }\n    },\n\n    SynthCodeBuildDefaults = new CodeBuildOptions { },\n    AssetPublishingCodeBuildDefaults = new CodeBuildOptions { },\n    SelfMutationCodeBuildDefaults = new CodeBuildOptions { }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodePipeline.Builder.create(this, \"Pipeline\")\n        // Standard CodePipeline properties\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Defaults for all CodeBuild projects\n        .codeBuildDefaults(CodeBuildOptions.builder()\n                // Prepend commands and configuration to all projects\n                .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\")))\n\n                // Control the build environment\n                .buildEnvironment(BuildEnvironment.builder()\n                        .computeType(ComputeType.LARGE)\n                        .build())\n\n                // Control Elastic Network Interface creation\n                .vpc(vpc)\n                .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n                .securityGroups(List.of(mySecurityGroup))\n\n                // Additional policy statements for the execution role\n                .rolePolicy(List.of(\n                    PolicyStatement.Builder.create().build()))\n                .build())\n\n        .synthCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .assetPublishingCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .selfMutationCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildOptions",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 43,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 11,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "d007b292703a2b1ae39e2419cdd9331d4235176e1f0add8e16aa1e2bf710dddf"
    },
    "d1fb29a93b3425657dfce4f7de7e253c630e86b5137438dfa358d732948d2bd6": {
      "translations": {
        "python": {
          "source": "# ecr_repository: ecr.Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6342616eeabbee4e2fcb1d68a1ec3450d2df019df354ee23da20306214ccc511"
    },
    "417e6f273ce8fa87b27ceacd4ddc2465561b86eaf1a81ed63ace1e1c5990e94e": {
      "translations": {
        "python": {
          "source": "# later:\n# project: codebuild.PipelineProject\nsource_output = codepipeline.Artifact()\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Build1\",\n    input=source_output,\n    project=codebuild.PipelineProject(self, \"Project\",\n        build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\",\n            \"env\": {\n                \"exported-variables\": [\"MY_VAR\"\n                ]\n            },\n            \"phases\": {\n                \"build\": {\n                    \"commands\": \"export MY_VAR=\\\"some value\\\"\"\n                }\n            }\n        })\n    ),\n    variables_namespace=\"MyNamespace\"\n)\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"MyVar\": codebuild.BuildEnvironmentVariable(\n            value=build_action.variable(\"MY_VAR\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Build1\",\n    Input = sourceOutput,\n    Project = new PipelineProject(this, \"Project\", new PipelineProjectProps {\n        BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" },\n            { \"env\", new Dictionary<string, string[]> {\n                { \"exported-variables\", new [] { \"MY_VAR\" } }\n            } },\n            { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n                { \"build\", new Struct {\n                    Commands = \"export MY_VAR=\\\"some value\\\"\"\n                } }\n            } }\n        })\n    }),\n    VariablesNamespace = \"MyNamespace\"\n});\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"MyVar\", new BuildEnvironmentVariable {\n            Value = buildAction.Variable(\"MY_VAR\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Build1\")\n        .input(sourceOutput)\n        .project(PipelineProject.Builder.create(this, \"Project\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"env\", Map.of(\n                                \"exported-variables\", List.of(\"MY_VAR\")),\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", \"export MY_VAR=\\\"some value\\\"\")))))\n                .build())\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"MyVar\", BuildEnvironmentVariable.builder()\n                        .value(buildAction.variable(\"MY_VAR\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 9,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2a493c7719ea6e8797a45f3e374a99a6096b5caf87d7db55a9ee2941777e7f72"
    },
    "0a0a3f5623acc3438226dc4afa5cada0b31dcb71a415c9acc25b7d8d7ed71612": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\n\n\ncodebuild_project = codebuild.Project(self, \"Project\",\n    project_name=\"MyTestProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)\n\ntask = tasks.CodeBuildStartBuild(self, \"Task\",\n    project=codebuild_project,\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    environment_variables_override={\n        \"ZONE\": codebuild.BuildEnvironmentVariable(\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n            value=sfn.JsonPath.string_at(\"$.envVariables.zone\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\n\n\nProject codebuildProject = new Project(this, \"Project\", new ProjectProps {\n    ProjectName = \"MyTestProject\",\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});\n\nCodeBuildStartBuild task = new CodeBuildStartBuild(this, \"Task\", new CodeBuildStartBuildProps {\n    Project = codebuildProject,\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    EnvironmentVariablesOverride = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"ZONE\", new BuildEnvironmentVariable {\n            Type = BuildEnvironmentVariableType.PLAINTEXT,\n            Value = JsonPath.StringAt(\"$.envVariables.zone\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\n\n\nProject codebuildProject = Project.Builder.create(this, \"Project\")\n        .projectName(\"MyTestProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();\n\nCodeBuildStartBuild task = CodeBuildStartBuild.Builder.create(this, \"Task\")\n        .project(codebuildProject)\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .environmentVariablesOverride(Map.of(\n                \"ZONE\", BuildEnvironmentVariable.builder()\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .value(JsonPath.stringAt(\"$.envVariables.zone\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuild",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuildProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 2,
        "192": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "f4925ddc8ec4d48e1bebbe8ad1ac1539b4aa9e5f7b08e79f1f2c88aa20bfdf33"
    },
    "1da696c55320d0ade46f67ff44fe87c925db75c3a9b8c5220dcc43e51775c1f6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nbuild_image_bind_options = codebuild.BuildImageBindOptions()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nBuildImageBindOptions buildImageBindOptions = new BuildImageBindOptions { };",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nBuildImageBindOptions buildImageBindOptions = BuildImageBindOptions.builder().build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst buildImageBindOptions: codebuild.BuildImageBindOptions = { };",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildImageBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildImageBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst buildImageBindOptions: codebuild.BuildImageBindOptions = { };\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "40901ed7b69388c8080ac800bdf528f362e8d6a749caa1c90fe4ba0f941fbbf3"
    },
    "54b471d45f1328b92a8a9ac518d3611f1d791f06a7bd1be028f225f85b7a815b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nbuild_image_config = codebuild.BuildImageConfig()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nBuildImageConfig buildImageConfig = new BuildImageConfig { };",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nBuildImageConfig buildImageConfig = BuildImageConfig.builder().build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst buildImageConfig: codebuild.BuildImageConfig = { };",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildImageConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildImageConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst buildImageConfig: codebuild.BuildImageConfig = { };\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "951c4dacd1cf8fb5c7e537f6e2433b1103c9383028f6a55f8079f5b70bf0064d"
    },
    "e83bd0ff1b37490bcfc493934b211d43b530bd81c763a4c9e4150a91b04ae7a6": {
      "translations": {
        "python": {
          "source": "# later:\n# project: codebuild.PipelineProject\nsource_output = codepipeline.Artifact()\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Build1\",\n    input=source_output,\n    project=codebuild.PipelineProject(self, \"Project\",\n        build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\",\n            \"env\": {\n                \"exported-variables\": [\"MY_VAR\"\n                ]\n            },\n            \"phases\": {\n                \"build\": {\n                    \"commands\": \"export MY_VAR=\\\"some value\\\"\"\n                }\n            }\n        })\n    ),\n    variables_namespace=\"MyNamespace\"\n)\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"MyVar\": codebuild.BuildEnvironmentVariable(\n            value=build_action.variable(\"MY_VAR\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Build1\",\n    Input = sourceOutput,\n    Project = new PipelineProject(this, \"Project\", new PipelineProjectProps {\n        BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" },\n            { \"env\", new Dictionary<string, string[]> {\n                { \"exported-variables\", new [] { \"MY_VAR\" } }\n            } },\n            { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n                { \"build\", new Struct {\n                    Commands = \"export MY_VAR=\\\"some value\\\"\"\n                } }\n            } }\n        })\n    }),\n    VariablesNamespace = \"MyNamespace\"\n});\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"MyVar\", new BuildEnvironmentVariable {\n            Value = buildAction.Variable(\"MY_VAR\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Build1\")\n        .input(sourceOutput)\n        .project(PipelineProject.Builder.create(this, \"Project\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"env\", Map.of(\n                                \"exported-variables\", List.of(\"MY_VAR\")),\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", \"export MY_VAR=\\\"some value\\\"\")))))\n                .build())\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"MyVar\", BuildEnvironmentVariable.builder()\n                        .value(buildAction.variable(\"MY_VAR\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 9,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2a493c7719ea6e8797a45f3e374a99a6096b5caf87d7db55a9ee2941777e7f72"
    },
    "b4c5b3d24caf5fc844bf3e20a8a5c136501dbde4798ae52c9364d454f1ffc08c": {
      "translations": {
        "python": {
          "source": "# my_caching_bucket: s3.Bucket\n\n\ncodebuild.Project(self, \"Project\",\n    source=codebuild.Source.bit_bucket(\n        owner=\"awslabs\",\n        repo=\"aws-cdk\"\n    ),\n\n    cache=codebuild.Cache.bucket(my_caching_bucket),\n\n    # BuildSpec with a 'cache' section necessary for S3 caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myCachingBucket;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Source = Source.BitBucket(new BitBucketSourceProps {\n        Owner = \"awslabs\",\n        Repo = \"aws-cdk\"\n    }),\n\n    Cache = Cache.Bucket(myCachingBucket),\n\n    // BuildSpec with a 'cache' section necessary for S3 caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myCachingBucket;\n\n\nProject.Builder.create(this, \"Project\")\n        .source(Source.bitBucket(BitBucketSourceProps.builder()\n                .owner(\"awslabs\")\n                .repo(\"aws-cdk\")\n                .build()))\n\n        .cache(Cache.bucket(myCachingBucket))\n\n        // BuildSpec with a 'cache' section necessary for S3 caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myCachingBucket: s3.Bucket;\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Cache"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#bucket",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myCachingBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "8755ad81e03dfcdc3cbf9122540a5e91d425f5cb688834599a66c4634bd87276"
    },
    "925725e423f81c884346a9bffe6307a7b72e096e427bccf73453f224a48b9e43": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncfn_project = codebuild.CfnProject(self, \"MyCfnProject\",\n    artifacts=codebuild.CfnProject.ArtifactsProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        artifact_identifier=\"artifactIdentifier\",\n        encryption_disabled=False,\n        location=\"location\",\n        name=\"name\",\n        namespace_type=\"namespaceType\",\n        override_artifact_name=False,\n        packaging=\"packaging\",\n        path=\"path\"\n    ),\n    environment=codebuild.CfnProject.EnvironmentProperty(\n        compute_type=\"computeType\",\n        image=\"image\",\n        type=\"type\",\n\n        # the properties below are optional\n        certificate=\"certificate\",\n        environment_variables=[codebuild.CfnProject.EnvironmentVariableProperty(\n            name=\"name\",\n            value=\"value\",\n\n            # the properties below are optional\n            type=\"type\"\n        )],\n        image_pull_credentials_type=\"imagePullCredentialsType\",\n        privileged_mode=False,\n        registry_credential=codebuild.CfnProject.RegistryCredentialProperty(\n            credential=\"credential\",\n            credential_provider=\"credentialProvider\"\n        )\n    ),\n    service_role=\"serviceRole\",\n    source=codebuild.CfnProject.SourceProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        auth=codebuild.CfnProject.SourceAuthProperty(\n            type=\"type\",\n\n            # the properties below are optional\n            resource=\"resource\"\n        ),\n        build_spec=\"buildSpec\",\n        build_status_config=codebuild.CfnProject.BuildStatusConfigProperty(\n            context=\"context\",\n            target_url=\"targetUrl\"\n        ),\n        git_clone_depth=123,\n        git_submodules_config=codebuild.CfnProject.GitSubmodulesConfigProperty(\n            fetch_submodules=False\n        ),\n        insecure_ssl=False,\n        location=\"location\",\n        report_build_status=False,\n        source_identifier=\"sourceIdentifier\"\n    ),\n\n    # the properties below are optional\n    badge_enabled=False,\n    build_batch_config=codebuild.CfnProject.ProjectBuildBatchConfigProperty(\n        batch_report_mode=\"batchReportMode\",\n        combine_artifacts=False,\n        restrictions=codebuild.CfnProject.BatchRestrictionsProperty(\n            compute_types_allowed=[\"computeTypesAllowed\"],\n            maximum_builds_allowed=123\n        ),\n        service_role=\"serviceRole\",\n        timeout_in_mins=123\n    ),\n    cache=codebuild.CfnProject.ProjectCacheProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        location=\"location\",\n        modes=[\"modes\"]\n    ),\n    concurrent_build_limit=123,\n    description=\"description\",\n    encryption_key=\"encryptionKey\",\n    file_system_locations=[codebuild.CfnProject.ProjectFileSystemLocationProperty(\n        identifier=\"identifier\",\n        location=\"location\",\n        mount_point=\"mountPoint\",\n        type=\"type\",\n\n        # the properties below are optional\n        mount_options=\"mountOptions\"\n    )],\n    logs_config=codebuild.CfnProject.LogsConfigProperty(\n        cloud_watch_logs=codebuild.CfnProject.CloudWatchLogsConfigProperty(\n            status=\"status\",\n\n            # the properties below are optional\n            group_name=\"groupName\",\n            stream_name=\"streamName\"\n        ),\n        s3_logs=codebuild.CfnProject.S3LogsConfigProperty(\n            status=\"status\",\n\n            # the properties below are optional\n            encryption_disabled=False,\n            location=\"location\"\n        )\n    ),\n    name=\"name\",\n    queued_timeout_in_minutes=123,\n    resource_access_role=\"resourceAccessRole\",\n    secondary_artifacts=[codebuild.CfnProject.ArtifactsProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        artifact_identifier=\"artifactIdentifier\",\n        encryption_disabled=False,\n        location=\"location\",\n        name=\"name\",\n        namespace_type=\"namespaceType\",\n        override_artifact_name=False,\n        packaging=\"packaging\",\n        path=\"path\"\n    )],\n    secondary_sources=[codebuild.CfnProject.SourceProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        auth=codebuild.CfnProject.SourceAuthProperty(\n            type=\"type\",\n\n            # the properties below are optional\n            resource=\"resource\"\n        ),\n        build_spec=\"buildSpec\",\n        build_status_config=codebuild.CfnProject.BuildStatusConfigProperty(\n            context=\"context\",\n            target_url=\"targetUrl\"\n        ),\n        git_clone_depth=123,\n        git_submodules_config=codebuild.CfnProject.GitSubmodulesConfigProperty(\n            fetch_submodules=False\n        ),\n        insecure_ssl=False,\n        location=\"location\",\n        report_build_status=False,\n        source_identifier=\"sourceIdentifier\"\n    )],\n    secondary_source_versions=[codebuild.CfnProject.ProjectSourceVersionProperty(\n        source_identifier=\"sourceIdentifier\",\n\n        # the properties below are optional\n        source_version=\"sourceVersion\"\n    )],\n    source_version=\"sourceVersion\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timeout_in_minutes=123,\n    triggers=codebuild.CfnProject.ProjectTriggersProperty(\n        build_type=\"buildType\",\n        filter_groups=[[codebuild.CfnProject.WebhookFilterProperty(\n            pattern=\"pattern\",\n            type=\"type\",\n\n            # the properties below are optional\n            exclude_matched_pattern=False\n        )]],\n        webhook=False\n    ),\n    visibility=\"visibility\",\n    vpc_config=codebuild.CfnProject.VpcConfigProperty(\n        security_group_ids=[\"securityGroupIds\"],\n        subnets=[\"subnets\"],\n        vpc_id=\"vpcId\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCfnProject cfnProject = new CfnProject(this, \"MyCfnProject\", new CfnProjectProps {\n    Artifacts = new ArtifactsProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ArtifactIdentifier = \"artifactIdentifier\",\n        EncryptionDisabled = false,\n        Location = \"location\",\n        Name = \"name\",\n        NamespaceType = \"namespaceType\",\n        OverrideArtifactName = false,\n        Packaging = \"packaging\",\n        Path = \"path\"\n    },\n    Environment = new EnvironmentProperty {\n        ComputeType = \"computeType\",\n        Image = \"image\",\n        Type = \"type\",\n\n        // the properties below are optional\n        Certificate = \"certificate\",\n        EnvironmentVariables = new [] { new EnvironmentVariableProperty {\n            Name = \"name\",\n            Value = \"value\",\n\n            // the properties below are optional\n            Type = \"type\"\n        } },\n        ImagePullCredentialsType = \"imagePullCredentialsType\",\n        PrivilegedMode = false,\n        RegistryCredential = new RegistryCredentialProperty {\n            Credential = \"credential\",\n            CredentialProvider = \"credentialProvider\"\n        }\n    },\n    ServiceRole = \"serviceRole\",\n    Source = new SourceProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Auth = new SourceAuthProperty {\n            Type = \"type\",\n\n            // the properties below are optional\n            Resource = \"resource\"\n        },\n        BuildSpec = \"buildSpec\",\n        BuildStatusConfig = new BuildStatusConfigProperty {\n            Context = \"context\",\n            TargetUrl = \"targetUrl\"\n        },\n        GitCloneDepth = 123,\n        GitSubmodulesConfig = new GitSubmodulesConfigProperty {\n            FetchSubmodules = false\n        },\n        InsecureSsl = false,\n        Location = \"location\",\n        ReportBuildStatus = false,\n        SourceIdentifier = \"sourceIdentifier\"\n    },\n\n    // the properties below are optional\n    BadgeEnabled = false,\n    BuildBatchConfig = new ProjectBuildBatchConfigProperty {\n        BatchReportMode = \"batchReportMode\",\n        CombineArtifacts = false,\n        Restrictions = new BatchRestrictionsProperty {\n            ComputeTypesAllowed = new [] { \"computeTypesAllowed\" },\n            MaximumBuildsAllowed = 123\n        },\n        ServiceRole = \"serviceRole\",\n        TimeoutInMins = 123\n    },\n    Cache = new ProjectCacheProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Location = \"location\",\n        Modes = new [] { \"modes\" }\n    },\n    ConcurrentBuildLimit = 123,\n    Description = \"description\",\n    EncryptionKey = \"encryptionKey\",\n    FileSystemLocations = new [] { new ProjectFileSystemLocationProperty {\n        Identifier = \"identifier\",\n        Location = \"location\",\n        MountPoint = \"mountPoint\",\n        Type = \"type\",\n\n        // the properties below are optional\n        MountOptions = \"mountOptions\"\n    } },\n    LogsConfig = new LogsConfigProperty {\n        CloudWatchLogs = new CloudWatchLogsConfigProperty {\n            Status = \"status\",\n\n            // the properties below are optional\n            GroupName = \"groupName\",\n            StreamName = \"streamName\"\n        },\n        S3Logs = new S3LogsConfigProperty {\n            Status = \"status\",\n\n            // the properties below are optional\n            EncryptionDisabled = false,\n            Location = \"location\"\n        }\n    },\n    Name = \"name\",\n    QueuedTimeoutInMinutes = 123,\n    ResourceAccessRole = \"resourceAccessRole\",\n    SecondaryArtifacts = new [] { new ArtifactsProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ArtifactIdentifier = \"artifactIdentifier\",\n        EncryptionDisabled = false,\n        Location = \"location\",\n        Name = \"name\",\n        NamespaceType = \"namespaceType\",\n        OverrideArtifactName = false,\n        Packaging = \"packaging\",\n        Path = \"path\"\n    } },\n    SecondarySources = new [] { new SourceProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Auth = new SourceAuthProperty {\n            Type = \"type\",\n\n            // the properties below are optional\n            Resource = \"resource\"\n        },\n        BuildSpec = \"buildSpec\",\n        BuildStatusConfig = new BuildStatusConfigProperty {\n            Context = \"context\",\n            TargetUrl = \"targetUrl\"\n        },\n        GitCloneDepth = 123,\n        GitSubmodulesConfig = new GitSubmodulesConfigProperty {\n            FetchSubmodules = false\n        },\n        InsecureSsl = false,\n        Location = \"location\",\n        ReportBuildStatus = false,\n        SourceIdentifier = \"sourceIdentifier\"\n    } },\n    SecondarySourceVersions = new [] { new ProjectSourceVersionProperty {\n        SourceIdentifier = \"sourceIdentifier\",\n\n        // the properties below are optional\n        SourceVersion = \"sourceVersion\"\n    } },\n    SourceVersion = \"sourceVersion\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TimeoutInMinutes = 123,\n    Triggers = new ProjectTriggersProperty {\n        BuildType = \"buildType\",\n        FilterGroups = new [] { new [] { new WebhookFilterProperty {\n            Pattern = \"pattern\",\n            Type = \"type\",\n\n            // the properties below are optional\n            ExcludeMatchedPattern = false\n        } } },\n        Webhook = false\n    },\n    Visibility = \"visibility\",\n    VpcConfig = new VpcConfigProperty {\n        SecurityGroupIds = new [] { \"securityGroupIds\" },\n        Subnets = new [] { \"subnets\" },\n        VpcId = \"vpcId\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCfnProject cfnProject = CfnProject.Builder.create(this, \"MyCfnProject\")\n        .artifacts(ArtifactsProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .artifactIdentifier(\"artifactIdentifier\")\n                .encryptionDisabled(false)\n                .location(\"location\")\n                .name(\"name\")\n                .namespaceType(\"namespaceType\")\n                .overrideArtifactName(false)\n                .packaging(\"packaging\")\n                .path(\"path\")\n                .build())\n        .environment(EnvironmentProperty.builder()\n                .computeType(\"computeType\")\n                .image(\"image\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .certificate(\"certificate\")\n                .environmentVariables(List.of(EnvironmentVariableProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .type(\"type\")\n                        .build()))\n                .imagePullCredentialsType(\"imagePullCredentialsType\")\n                .privilegedMode(false)\n                .registryCredential(RegistryCredentialProperty.builder()\n                        .credential(\"credential\")\n                        .credentialProvider(\"credentialProvider\")\n                        .build())\n                .build())\n        .serviceRole(\"serviceRole\")\n        .source(SourceProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .auth(SourceAuthProperty.builder()\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .resource(\"resource\")\n                        .build())\n                .buildSpec(\"buildSpec\")\n                .buildStatusConfig(BuildStatusConfigProperty.builder()\n                        .context(\"context\")\n                        .targetUrl(\"targetUrl\")\n                        .build())\n                .gitCloneDepth(123)\n                .gitSubmodulesConfig(GitSubmodulesConfigProperty.builder()\n                        .fetchSubmodules(false)\n                        .build())\n                .insecureSsl(false)\n                .location(\"location\")\n                .reportBuildStatus(false)\n                .sourceIdentifier(\"sourceIdentifier\")\n                .build())\n\n        // the properties below are optional\n        .badgeEnabled(false)\n        .buildBatchConfig(ProjectBuildBatchConfigProperty.builder()\n                .batchReportMode(\"batchReportMode\")\n                .combineArtifacts(false)\n                .restrictions(BatchRestrictionsProperty.builder()\n                        .computeTypesAllowed(List.of(\"computeTypesAllowed\"))\n                        .maximumBuildsAllowed(123)\n                        .build())\n                .serviceRole(\"serviceRole\")\n                .timeoutInMins(123)\n                .build())\n        .cache(ProjectCacheProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .location(\"location\")\n                .modes(List.of(\"modes\"))\n                .build())\n        .concurrentBuildLimit(123)\n        .description(\"description\")\n        .encryptionKey(\"encryptionKey\")\n        .fileSystemLocations(List.of(ProjectFileSystemLocationProperty.builder()\n                .identifier(\"identifier\")\n                .location(\"location\")\n                .mountPoint(\"mountPoint\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .mountOptions(\"mountOptions\")\n                .build()))\n        .logsConfig(LogsConfigProperty.builder()\n                .cloudWatchLogs(CloudWatchLogsConfigProperty.builder()\n                        .status(\"status\")\n\n                        // the properties below are optional\n                        .groupName(\"groupName\")\n                        .streamName(\"streamName\")\n                        .build())\n                .s3Logs(S3LogsConfigProperty.builder()\n                        .status(\"status\")\n\n                        // the properties below are optional\n                        .encryptionDisabled(false)\n                        .location(\"location\")\n                        .build())\n                .build())\n        .name(\"name\")\n        .queuedTimeoutInMinutes(123)\n        .resourceAccessRole(\"resourceAccessRole\")\n        .secondaryArtifacts(List.of(ArtifactsProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .artifactIdentifier(\"artifactIdentifier\")\n                .encryptionDisabled(false)\n                .location(\"location\")\n                .name(\"name\")\n                .namespaceType(\"namespaceType\")\n                .overrideArtifactName(false)\n                .packaging(\"packaging\")\n                .path(\"path\")\n                .build()))\n        .secondarySources(List.of(SourceProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .auth(SourceAuthProperty.builder()\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .resource(\"resource\")\n                        .build())\n                .buildSpec(\"buildSpec\")\n                .buildStatusConfig(BuildStatusConfigProperty.builder()\n                        .context(\"context\")\n                        .targetUrl(\"targetUrl\")\n                        .build())\n                .gitCloneDepth(123)\n                .gitSubmodulesConfig(GitSubmodulesConfigProperty.builder()\n                        .fetchSubmodules(false)\n                        .build())\n                .insecureSsl(false)\n                .location(\"location\")\n                .reportBuildStatus(false)\n                .sourceIdentifier(\"sourceIdentifier\")\n                .build()))\n        .secondarySourceVersions(List.of(ProjectSourceVersionProperty.builder()\n                .sourceIdentifier(\"sourceIdentifier\")\n\n                // the properties below are optional\n                .sourceVersion(\"sourceVersion\")\n                .build()))\n        .sourceVersion(\"sourceVersion\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timeoutInMinutes(123)\n        .triggers(ProjectTriggersProperty.builder()\n                .buildType(\"buildType\")\n                .filterGroups(List.of(List.of(WebhookFilterProperty.builder()\n                        .pattern(\"pattern\")\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .excludeMatchedPattern(false)\n                        .build())))\n                .webhook(false)\n                .build())\n        .visibility(\"visibility\")\n        .vpcConfig(VpcConfigProperty.builder()\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .subnets(List.of(\"subnets\"))\n                .vpcId(\"vpcId\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cfnProject = new codebuild.CfnProject(this, 'MyCfnProject', {\n  artifacts: {\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  },\n  environment: {\n    computeType: 'computeType',\n    image: 'image',\n    type: 'type',\n\n    // the properties below are optional\n    certificate: 'certificate',\n    environmentVariables: [{\n      name: 'name',\n      value: 'value',\n\n      // the properties below are optional\n      type: 'type',\n    }],\n    imagePullCredentialsType: 'imagePullCredentialsType',\n    privilegedMode: false,\n    registryCredential: {\n      credential: 'credential',\n      credentialProvider: 'credentialProvider',\n    },\n  },\n  serviceRole: 'serviceRole',\n  source: {\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  },\n\n  // the properties below are optional\n  badgeEnabled: false,\n  buildBatchConfig: {\n    batchReportMode: 'batchReportMode',\n    combineArtifacts: false,\n    restrictions: {\n      computeTypesAllowed: ['computeTypesAllowed'],\n      maximumBuildsAllowed: 123,\n    },\n    serviceRole: 'serviceRole',\n    timeoutInMins: 123,\n  },\n  cache: {\n    type: 'type',\n\n    // the properties below are optional\n    location: 'location',\n    modes: ['modes'],\n  },\n  concurrentBuildLimit: 123,\n  description: 'description',\n  encryptionKey: 'encryptionKey',\n  fileSystemLocations: [{\n    identifier: 'identifier',\n    location: 'location',\n    mountPoint: 'mountPoint',\n    type: 'type',\n\n    // the properties below are optional\n    mountOptions: 'mountOptions',\n  }],\n  logsConfig: {\n    cloudWatchLogs: {\n      status: 'status',\n\n      // the properties below are optional\n      groupName: 'groupName',\n      streamName: 'streamName',\n    },\n    s3Logs: {\n      status: 'status',\n\n      // the properties below are optional\n      encryptionDisabled: false,\n      location: 'location',\n    },\n  },\n  name: 'name',\n  queuedTimeoutInMinutes: 123,\n  resourceAccessRole: 'resourceAccessRole',\n  secondaryArtifacts: [{\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  }],\n  secondarySources: [{\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  }],\n  secondarySourceVersions: [{\n    sourceIdentifier: 'sourceIdentifier',\n\n    // the properties below are optional\n    sourceVersion: 'sourceVersion',\n  }],\n  sourceVersion: 'sourceVersion',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n  triggers: {\n    buildType: 'buildType',\n    filterGroups: [[{\n      pattern: 'pattern',\n      type: 'type',\n\n      // the properties below are optional\n      excludeMatchedPattern: false,\n    }]],\n    webhook: false,\n  },\n  visibility: 'visibility',\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnets: ['subnets'],\n    vpcId: 'vpcId',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject",
        "@aws-cdk/aws-codebuild.CfnProjectProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnProject = new codebuild.CfnProject(this, 'MyCfnProject', {\n  artifacts: {\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  },\n  environment: {\n    computeType: 'computeType',\n    image: 'image',\n    type: 'type',\n\n    // the properties below are optional\n    certificate: 'certificate',\n    environmentVariables: [{\n      name: 'name',\n      value: 'value',\n\n      // the properties below are optional\n      type: 'type',\n    }],\n    imagePullCredentialsType: 'imagePullCredentialsType',\n    privilegedMode: false,\n    registryCredential: {\n      credential: 'credential',\n      credentialProvider: 'credentialProvider',\n    },\n  },\n  serviceRole: 'serviceRole',\n  source: {\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  },\n\n  // the properties below are optional\n  badgeEnabled: false,\n  buildBatchConfig: {\n    batchReportMode: 'batchReportMode',\n    combineArtifacts: false,\n    restrictions: {\n      computeTypesAllowed: ['computeTypesAllowed'],\n      maximumBuildsAllowed: 123,\n    },\n    serviceRole: 'serviceRole',\n    timeoutInMins: 123,\n  },\n  cache: {\n    type: 'type',\n\n    // the properties below are optional\n    location: 'location',\n    modes: ['modes'],\n  },\n  concurrentBuildLimit: 123,\n  description: 'description',\n  encryptionKey: 'encryptionKey',\n  fileSystemLocations: [{\n    identifier: 'identifier',\n    location: 'location',\n    mountPoint: 'mountPoint',\n    type: 'type',\n\n    // the properties below are optional\n    mountOptions: 'mountOptions',\n  }],\n  logsConfig: {\n    cloudWatchLogs: {\n      status: 'status',\n\n      // the properties below are optional\n      groupName: 'groupName',\n      streamName: 'streamName',\n    },\n    s3Logs: {\n      status: 'status',\n\n      // the properties below are optional\n      encryptionDisabled: false,\n      location: 'location',\n    },\n  },\n  name: 'name',\n  queuedTimeoutInMinutes: 123,\n  resourceAccessRole: 'resourceAccessRole',\n  secondaryArtifacts: [{\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  }],\n  secondarySources: [{\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  }],\n  secondarySourceVersions: [{\n    sourceIdentifier: 'sourceIdentifier',\n\n    // the properties below are optional\n    sourceVersion: 'sourceVersion',\n  }],\n  sourceVersion: 'sourceVersion',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n  triggers: {\n    buildType: 'buildType',\n    filterGroups: [[{\n      pattern: 'pattern',\n      type: 'type',\n\n      // the properties below are optional\n      excludeMatchedPattern: false,\n    }]],\n    webhook: false,\n  },\n  visibility: 'visibility',\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnets: ['subnets'],\n    vpcId: 'vpcId',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 75,
        "75": 125,
        "91": 16,
        "104": 1,
        "192": 12,
        "193": 26,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 121,
        "290": 1
      },
      "fqnsFingerprint": "6bcb259046f4fe5872e8bc17578b928df8e840a673d41fa4e04d03e6d2e9e4ea"
    },
    "e89ae5b05141a74600930b581f032abd4b0e0936451e4dd709a95b7f2af2b95d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nartifacts_property = codebuild.CfnProject.ArtifactsProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    artifact_identifier=\"artifactIdentifier\",\n    encryption_disabled=False,\n    location=\"location\",\n    name=\"name\",\n    namespace_type=\"namespaceType\",\n    override_artifact_name=False,\n    packaging=\"packaging\",\n    path=\"path\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nArtifactsProperty artifactsProperty = new ArtifactsProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    ArtifactIdentifier = \"artifactIdentifier\",\n    EncryptionDisabled = false,\n    Location = \"location\",\n    Name = \"name\",\n    NamespaceType = \"namespaceType\",\n    OverrideArtifactName = false,\n    Packaging = \"packaging\",\n    Path = \"path\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nArtifactsProperty artifactsProperty = ArtifactsProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .artifactIdentifier(\"artifactIdentifier\")\n        .encryptionDisabled(false)\n        .location(\"location\")\n        .name(\"name\")\n        .namespaceType(\"namespaceType\")\n        .overrideArtifactName(false)\n        .packaging(\"packaging\")\n        .path(\"path\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst artifactsProperty: codebuild.CfnProject.ArtifactsProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  artifactIdentifier: 'artifactIdentifier',\n  encryptionDisabled: false,\n  location: 'location',\n  name: 'name',\n  namespaceType: 'namespaceType',\n  overrideArtifactName: false,\n  packaging: 'packaging',\n  path: 'path',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.ArtifactsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ArtifactsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst artifactsProperty: codebuild.CfnProject.ArtifactsProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  artifactIdentifier: 'artifactIdentifier',\n  encryptionDisabled: false,\n  location: 'location',\n  name: 'name',\n  namespaceType: 'namespaceType',\n  overrideArtifactName: false,\n  packaging: 'packaging',\n  path: 'path',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "5263846088673492625f9125cbbc3ce58715a93266fe8065717bc9b4e1fa06ae"
    },
    "e7246e462ba5525710427ebe76424a50c88c37f0730d4a291cc1af90839fa087": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nbatch_restrictions_property = codebuild.CfnProject.BatchRestrictionsProperty(\n    compute_types_allowed=[\"computeTypesAllowed\"],\n    maximum_builds_allowed=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nBatchRestrictionsProperty batchRestrictionsProperty = new BatchRestrictionsProperty {\n    ComputeTypesAllowed = new [] { \"computeTypesAllowed\" },\n    MaximumBuildsAllowed = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nBatchRestrictionsProperty batchRestrictionsProperty = BatchRestrictionsProperty.builder()\n        .computeTypesAllowed(List.of(\"computeTypesAllowed\"))\n        .maximumBuildsAllowed(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst batchRestrictionsProperty: codebuild.CfnProject.BatchRestrictionsProperty = {\n  computeTypesAllowed: ['computeTypesAllowed'],\n  maximumBuildsAllowed: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.BatchRestrictionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.BatchRestrictionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchRestrictionsProperty: codebuild.CfnProject.BatchRestrictionsProperty = {\n  computeTypesAllowed: ['computeTypesAllowed'],\n  maximumBuildsAllowed: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9492c3f53a1142d6f5ba3bff2b4e0d64d83333c12cc36990e3f8ffd84854d942"
    },
    "8ad8819b5296ef594b5259364260d7c9f76dcf2aa68f81d07b6e54d3db1555fa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nbuild_status_config_property = codebuild.CfnProject.BuildStatusConfigProperty(\n    context=\"context\",\n    target_url=\"targetUrl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nBuildStatusConfigProperty buildStatusConfigProperty = new BuildStatusConfigProperty {\n    Context = \"context\",\n    TargetUrl = \"targetUrl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nBuildStatusConfigProperty buildStatusConfigProperty = BuildStatusConfigProperty.builder()\n        .context(\"context\")\n        .targetUrl(\"targetUrl\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst buildStatusConfigProperty: codebuild.CfnProject.BuildStatusConfigProperty = {\n  context: 'context',\n  targetUrl: 'targetUrl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.BuildStatusConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.BuildStatusConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst buildStatusConfigProperty: codebuild.CfnProject.BuildStatusConfigProperty = {\n  context: 'context',\n  targetUrl: 'targetUrl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a7c488a79b373af0280ae0fde929e3ab9319b72de8bebb59139c90d9ce6b9ed3"
    },
    "ce93f6a3a8a7bce65a975ba2b97ba90379d46e7b48fabd88e8a2487bd3abe58d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncloud_watch_logs_config_property = codebuild.CfnProject.CloudWatchLogsConfigProperty(\n    status=\"status\",\n\n    # the properties below are optional\n    group_name=\"groupName\",\n    stream_name=\"streamName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCloudWatchLogsConfigProperty cloudWatchLogsConfigProperty = new CloudWatchLogsConfigProperty {\n    Status = \"status\",\n\n    // the properties below are optional\n    GroupName = \"groupName\",\n    StreamName = \"streamName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCloudWatchLogsConfigProperty cloudWatchLogsConfigProperty = CloudWatchLogsConfigProperty.builder()\n        .status(\"status\")\n\n        // the properties below are optional\n        .groupName(\"groupName\")\n        .streamName(\"streamName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cloudWatchLogsConfigProperty: codebuild.CfnProject.CloudWatchLogsConfigProperty = {\n  status: 'status',\n\n  // the properties below are optional\n  groupName: 'groupName',\n  streamName: 'streamName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.CloudWatchLogsConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.CloudWatchLogsConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cloudWatchLogsConfigProperty: codebuild.CfnProject.CloudWatchLogsConfigProperty = {\n  status: 'status',\n\n  // the properties below are optional\n  groupName: 'groupName',\n  streamName: 'streamName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2c7ed9217714715a38166c910edcc1e80861966322c2643672e87923319b55b6"
    },
    "ef8afb3307c596b2ff5ac4feb7e396a757dd0e4efc6bb7815a1c492d65361b76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nenvironment_property = codebuild.CfnProject.EnvironmentProperty(\n    compute_type=\"computeType\",\n    image=\"image\",\n    type=\"type\",\n\n    # the properties below are optional\n    certificate=\"certificate\",\n    environment_variables=[codebuild.CfnProject.EnvironmentVariableProperty(\n        name=\"name\",\n        value=\"value\",\n\n        # the properties below are optional\n        type=\"type\"\n    )],\n    image_pull_credentials_type=\"imagePullCredentialsType\",\n    privileged_mode=False,\n    registry_credential=codebuild.CfnProject.RegistryCredentialProperty(\n        credential=\"credential\",\n        credential_provider=\"credentialProvider\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nEnvironmentProperty environmentProperty = new EnvironmentProperty {\n    ComputeType = \"computeType\",\n    Image = \"image\",\n    Type = \"type\",\n\n    // the properties below are optional\n    Certificate = \"certificate\",\n    EnvironmentVariables = new [] { new EnvironmentVariableProperty {\n        Name = \"name\",\n        Value = \"value\",\n\n        // the properties below are optional\n        Type = \"type\"\n    } },\n    ImagePullCredentialsType = \"imagePullCredentialsType\",\n    PrivilegedMode = false,\n    RegistryCredential = new RegistryCredentialProperty {\n        Credential = \"credential\",\n        CredentialProvider = \"credentialProvider\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nEnvironmentProperty environmentProperty = EnvironmentProperty.builder()\n        .computeType(\"computeType\")\n        .image(\"image\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .certificate(\"certificate\")\n        .environmentVariables(List.of(EnvironmentVariableProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n\n                // the properties below are optional\n                .type(\"type\")\n                .build()))\n        .imagePullCredentialsType(\"imagePullCredentialsType\")\n        .privilegedMode(false)\n        .registryCredential(RegistryCredentialProperty.builder()\n                .credential(\"credential\")\n                .credentialProvider(\"credentialProvider\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst environmentProperty: codebuild.CfnProject.EnvironmentProperty = {\n  computeType: 'computeType',\n  image: 'image',\n  type: 'type',\n\n  // the properties below are optional\n  certificate: 'certificate',\n  environmentVariables: [{\n    name: 'name',\n    value: 'value',\n\n    // the properties below are optional\n    type: 'type',\n  }],\n  imagePullCredentialsType: 'imagePullCredentialsType',\n  privilegedMode: false,\n  registryCredential: {\n    credential: 'credential',\n    credentialProvider: 'credentialProvider',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.EnvironmentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.EnvironmentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst environmentProperty: codebuild.CfnProject.EnvironmentProperty = {\n  computeType: 'computeType',\n  image: 'image',\n  type: 'type',\n\n  // the properties below are optional\n  certificate: 'certificate',\n  environmentVariables: [{\n    name: 'name',\n    value: 'value',\n\n    // the properties below are optional\n    type: 'type',\n  }],\n  imagePullCredentialsType: 'imagePullCredentialsType',\n  privilegedMode: false,\n  registryCredential: {\n    credential: 'credential',\n    credentialProvider: 'credentialProvider',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 18,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "05275bf3004d578ba6221ff26604addd69a385745629f09c92064a795fa2413e"
    },
    "2609a0fdc5210b593f19e6783077c2d246558791ca5b1b9409590f80ac230e58": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nenvironment_variable_property = codebuild.CfnProject.EnvironmentVariableProperty(\n    name=\"name\",\n    value=\"value\",\n\n    # the properties below are optional\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nEnvironmentVariableProperty environmentVariableProperty = new EnvironmentVariableProperty {\n    Name = \"name\",\n    Value = \"value\",\n\n    // the properties below are optional\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nEnvironmentVariableProperty environmentVariableProperty = EnvironmentVariableProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n\n        // the properties below are optional\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst environmentVariableProperty: codebuild.CfnProject.EnvironmentVariableProperty = {\n  name: 'name',\n  value: 'value',\n\n  // the properties below are optional\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.EnvironmentVariableProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.EnvironmentVariableProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst environmentVariableProperty: codebuild.CfnProject.EnvironmentVariableProperty = {\n  name: 'name',\n  value: 'value',\n\n  // the properties below are optional\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e673aa2f18f442d8f41dac1a87c1a2df03783825fb151ff69db713e84440514f"
    },
    "60776dea1ea8d2d018d0b6470bbb6d341311f7eb99dcb4e3271541bdb1e2cecb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ngit_submodules_config_property = codebuild.CfnProject.GitSubmodulesConfigProperty(\n    fetch_submodules=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nGitSubmodulesConfigProperty gitSubmodulesConfigProperty = new GitSubmodulesConfigProperty {\n    FetchSubmodules = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nGitSubmodulesConfigProperty gitSubmodulesConfigProperty = GitSubmodulesConfigProperty.builder()\n        .fetchSubmodules(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst gitSubmodulesConfigProperty: codebuild.CfnProject.GitSubmodulesConfigProperty = {\n  fetchSubmodules: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.GitSubmodulesConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.GitSubmodulesConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gitSubmodulesConfigProperty: codebuild.CfnProject.GitSubmodulesConfigProperty = {\n  fetchSubmodules: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d5106d9d1e1625c871fd39a13000250ca80da5fb2270fee13875f27fde95edbf"
    },
    "c441435527a4e70f2785eed2a19a7637824fe8f0c5b62dc4c584e4bd3d038d3d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nlogs_config_property = codebuild.CfnProject.LogsConfigProperty(\n    cloud_watch_logs=codebuild.CfnProject.CloudWatchLogsConfigProperty(\n        status=\"status\",\n\n        # the properties below are optional\n        group_name=\"groupName\",\n        stream_name=\"streamName\"\n    ),\n    s3_logs=codebuild.CfnProject.S3LogsConfigProperty(\n        status=\"status\",\n\n        # the properties below are optional\n        encryption_disabled=False,\n        location=\"location\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nLogsConfigProperty logsConfigProperty = new LogsConfigProperty {\n    CloudWatchLogs = new CloudWatchLogsConfigProperty {\n        Status = \"status\",\n\n        // the properties below are optional\n        GroupName = \"groupName\",\n        StreamName = \"streamName\"\n    },\n    S3Logs = new S3LogsConfigProperty {\n        Status = \"status\",\n\n        // the properties below are optional\n        EncryptionDisabled = false,\n        Location = \"location\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nLogsConfigProperty logsConfigProperty = LogsConfigProperty.builder()\n        .cloudWatchLogs(CloudWatchLogsConfigProperty.builder()\n                .status(\"status\")\n\n                // the properties below are optional\n                .groupName(\"groupName\")\n                .streamName(\"streamName\")\n                .build())\n        .s3Logs(S3LogsConfigProperty.builder()\n                .status(\"status\")\n\n                // the properties below are optional\n                .encryptionDisabled(false)\n                .location(\"location\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst logsConfigProperty: codebuild.CfnProject.LogsConfigProperty = {\n  cloudWatchLogs: {\n    status: 'status',\n\n    // the properties below are optional\n    groupName: 'groupName',\n    streamName: 'streamName',\n  },\n  s3Logs: {\n    status: 'status',\n\n    // the properties below are optional\n    encryptionDisabled: false,\n    location: 'location',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.LogsConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.LogsConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logsConfigProperty: codebuild.CfnProject.LogsConfigProperty = {\n  cloudWatchLogs: {\n    status: 'status',\n\n    // the properties below are optional\n    groupName: 'groupName',\n    streamName: 'streamName',\n  },\n  s3Logs: {\n    status: 'status',\n\n    // the properties below are optional\n    encryptionDisabled: false,\n    location: 'location',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "871e4f8eba30b9f4bd4e5e5933c4a3cdefc804638584ee5884f511c6027e974d"
    },
    "d194fd6d492c4a199bd721c0ca03780693961ab001321ede34d96530e6b7824d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nproject_build_batch_config_property = codebuild.CfnProject.ProjectBuildBatchConfigProperty(\n    batch_report_mode=\"batchReportMode\",\n    combine_artifacts=False,\n    restrictions=codebuild.CfnProject.BatchRestrictionsProperty(\n        compute_types_allowed=[\"computeTypesAllowed\"],\n        maximum_builds_allowed=123\n    ),\n    service_role=\"serviceRole\",\n    timeout_in_mins=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nProjectBuildBatchConfigProperty projectBuildBatchConfigProperty = new ProjectBuildBatchConfigProperty {\n    BatchReportMode = \"batchReportMode\",\n    CombineArtifacts = false,\n    Restrictions = new BatchRestrictionsProperty {\n        ComputeTypesAllowed = new [] { \"computeTypesAllowed\" },\n        MaximumBuildsAllowed = 123\n    },\n    ServiceRole = \"serviceRole\",\n    TimeoutInMins = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nProjectBuildBatchConfigProperty projectBuildBatchConfigProperty = ProjectBuildBatchConfigProperty.builder()\n        .batchReportMode(\"batchReportMode\")\n        .combineArtifacts(false)\n        .restrictions(BatchRestrictionsProperty.builder()\n                .computeTypesAllowed(List.of(\"computeTypesAllowed\"))\n                .maximumBuildsAllowed(123)\n                .build())\n        .serviceRole(\"serviceRole\")\n        .timeoutInMins(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst projectBuildBatchConfigProperty: codebuild.CfnProject.ProjectBuildBatchConfigProperty = {\n  batchReportMode: 'batchReportMode',\n  combineArtifacts: false,\n  restrictions: {\n    computeTypesAllowed: ['computeTypesAllowed'],\n    maximumBuildsAllowed: 123,\n  },\n  serviceRole: 'serviceRole',\n  timeoutInMins: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.ProjectBuildBatchConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectBuildBatchConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectBuildBatchConfigProperty: codebuild.CfnProject.ProjectBuildBatchConfigProperty = {\n  batchReportMode: 'batchReportMode',\n  combineArtifacts: false,\n  restrictions: {\n    computeTypesAllowed: ['computeTypesAllowed'],\n    maximumBuildsAllowed: 123,\n  },\n  serviceRole: 'serviceRole',\n  timeoutInMins: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 12,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6cc20f00b0c2cbc1c0922a51a0e7e2b3ee8fec1472940a37ae47f956a3e46a55"
    },
    "7a0194c609d436126dc0388035e95f472ff4e3884b0fd2d03fc5cdab84939853": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nproject_cache_property = codebuild.CfnProject.ProjectCacheProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    location=\"location\",\n    modes=[\"modes\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nProjectCacheProperty projectCacheProperty = new ProjectCacheProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Location = \"location\",\n    Modes = new [] { \"modes\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nProjectCacheProperty projectCacheProperty = ProjectCacheProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .location(\"location\")\n        .modes(List.of(\"modes\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst projectCacheProperty: codebuild.CfnProject.ProjectCacheProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  location: 'location',\n  modes: ['modes'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.ProjectCacheProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectCacheProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectCacheProperty: codebuild.CfnProject.ProjectCacheProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  location: 'location',\n  modes: ['modes'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a8fecb12efe7456deacee01dcf6963b848824f0a67146d0324647af6dad41cdb"
    },
    "3e060901a3c90ea7020e1b31ce0174f30202bf4669b0530e6414c27086496282": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nproject_file_system_location_property = codebuild.CfnProject.ProjectFileSystemLocationProperty(\n    identifier=\"identifier\",\n    location=\"location\",\n    mount_point=\"mountPoint\",\n    type=\"type\",\n\n    # the properties below are optional\n    mount_options=\"mountOptions\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nProjectFileSystemLocationProperty projectFileSystemLocationProperty = new ProjectFileSystemLocationProperty {\n    Identifier = \"identifier\",\n    Location = \"location\",\n    MountPoint = \"mountPoint\",\n    Type = \"type\",\n\n    // the properties below are optional\n    MountOptions = \"mountOptions\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nProjectFileSystemLocationProperty projectFileSystemLocationProperty = ProjectFileSystemLocationProperty.builder()\n        .identifier(\"identifier\")\n        .location(\"location\")\n        .mountPoint(\"mountPoint\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .mountOptions(\"mountOptions\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst projectFileSystemLocationProperty: codebuild.CfnProject.ProjectFileSystemLocationProperty = {\n  identifier: 'identifier',\n  location: 'location',\n  mountPoint: 'mountPoint',\n  type: 'type',\n\n  // the properties below are optional\n  mountOptions: 'mountOptions',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.ProjectFileSystemLocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectFileSystemLocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectFileSystemLocationProperty: codebuild.CfnProject.ProjectFileSystemLocationProperty = {\n  identifier: 'identifier',\n  location: 'location',\n  mountPoint: 'mountPoint',\n  type: 'type',\n\n  // the properties below are optional\n  mountOptions: 'mountOptions',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a33756dc1d21c0921cec4196950bb678ea27def669cd5a709bbc72e865e96db4"
    },
    "3a117fb001367cb41ce4fa19db476d9f35ef983b93fcc7b3717aebc1a6c39ec0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nproject_source_version_property = codebuild.CfnProject.ProjectSourceVersionProperty(\n    source_identifier=\"sourceIdentifier\",\n\n    # the properties below are optional\n    source_version=\"sourceVersion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nProjectSourceVersionProperty projectSourceVersionProperty = new ProjectSourceVersionProperty {\n    SourceIdentifier = \"sourceIdentifier\",\n\n    // the properties below are optional\n    SourceVersion = \"sourceVersion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nProjectSourceVersionProperty projectSourceVersionProperty = ProjectSourceVersionProperty.builder()\n        .sourceIdentifier(\"sourceIdentifier\")\n\n        // the properties below are optional\n        .sourceVersion(\"sourceVersion\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst projectSourceVersionProperty: codebuild.CfnProject.ProjectSourceVersionProperty = {\n  sourceIdentifier: 'sourceIdentifier',\n\n  // the properties below are optional\n  sourceVersion: 'sourceVersion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.ProjectSourceVersionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectSourceVersionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectSourceVersionProperty: codebuild.CfnProject.ProjectSourceVersionProperty = {\n  sourceIdentifier: 'sourceIdentifier',\n\n  // the properties below are optional\n  sourceVersion: 'sourceVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2da9e785f6a7df2b2afc6b5ff1f3b0b67b24ca36e096d09bf7a31c2d9c7c3500"
    },
    "75aef29da250c3cc87d3b2971fe0cc3bb6cf8f6f03867e138ef36e6db4d5727e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nproject_triggers_property = codebuild.CfnProject.ProjectTriggersProperty(\n    build_type=\"buildType\",\n    filter_groups=[[codebuild.CfnProject.WebhookFilterProperty(\n        pattern=\"pattern\",\n        type=\"type\",\n\n        # the properties below are optional\n        exclude_matched_pattern=False\n    )]],\n    webhook=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nProjectTriggersProperty projectTriggersProperty = new ProjectTriggersProperty {\n    BuildType = \"buildType\",\n    FilterGroups = new [] { new [] { new WebhookFilterProperty {\n        Pattern = \"pattern\",\n        Type = \"type\",\n\n        // the properties below are optional\n        ExcludeMatchedPattern = false\n    } } },\n    Webhook = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nProjectTriggersProperty projectTriggersProperty = ProjectTriggersProperty.builder()\n        .buildType(\"buildType\")\n        .filterGroups(List.of(List.of(WebhookFilterProperty.builder()\n                .pattern(\"pattern\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .excludeMatchedPattern(false)\n                .build())))\n        .webhook(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst projectTriggersProperty: codebuild.CfnProject.ProjectTriggersProperty = {\n  buildType: 'buildType',\n  filterGroups: [[{\n    pattern: 'pattern',\n    type: 'type',\n\n    // the properties below are optional\n    excludeMatchedPattern: false,\n  }]],\n  webhook: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.ProjectTriggersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectTriggersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectTriggersProperty: codebuild.CfnProject.ProjectTriggersProperty = {\n  buildType: 'buildType',\n  filterGroups: [[{\n    pattern: 'pattern',\n    type: 'type',\n\n    // the properties below are optional\n    excludeMatchedPattern: false,\n  }]],\n  webhook: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c21e68e88c916676930cfed18982174580a0053e7b3cf76c089a87f6aa265fde"
    },
    "d29235eda1aba93618ce1aac1da854b386bb4d08e1812b7fa63f0509d9c33427": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nregistry_credential_property = codebuild.CfnProject.RegistryCredentialProperty(\n    credential=\"credential\",\n    credential_provider=\"credentialProvider\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nRegistryCredentialProperty registryCredentialProperty = new RegistryCredentialProperty {\n    Credential = \"credential\",\n    CredentialProvider = \"credentialProvider\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nRegistryCredentialProperty registryCredentialProperty = RegistryCredentialProperty.builder()\n        .credential(\"credential\")\n        .credentialProvider(\"credentialProvider\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst registryCredentialProperty: codebuild.CfnProject.RegistryCredentialProperty = {\n  credential: 'credential',\n  credentialProvider: 'credentialProvider',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.RegistryCredentialProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.RegistryCredentialProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst registryCredentialProperty: codebuild.CfnProject.RegistryCredentialProperty = {\n  credential: 'credential',\n  credentialProvider: 'credentialProvider',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8beb92f78dfaf4fcd8f93d443e727960bb5e640fcbf45089a155b19452444c51"
    },
    "560327c21e4c3f6c0e81141dfec9c9843fd7aa17c62bcdcffb8b58e4be4e224a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ns3_logs_config_property = codebuild.CfnProject.S3LogsConfigProperty(\n    status=\"status\",\n\n    # the properties below are optional\n    encryption_disabled=False,\n    location=\"location\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nS3LogsConfigProperty s3LogsConfigProperty = new S3LogsConfigProperty {\n    Status = \"status\",\n\n    // the properties below are optional\n    EncryptionDisabled = false,\n    Location = \"location\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nS3LogsConfigProperty s3LogsConfigProperty = S3LogsConfigProperty.builder()\n        .status(\"status\")\n\n        // the properties below are optional\n        .encryptionDisabled(false)\n        .location(\"location\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst s3LogsConfigProperty: codebuild.CfnProject.S3LogsConfigProperty = {\n  status: 'status',\n\n  // the properties below are optional\n  encryptionDisabled: false,\n  location: 'location',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.S3LogsConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.S3LogsConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LogsConfigProperty: codebuild.CfnProject.S3LogsConfigProperty = {\n  status: 'status',\n\n  // the properties below are optional\n  encryptionDisabled: false,\n  location: 'location',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9b3f3b50632ffad948767c1b6ba24bc8197d5719066953eeee3669a4b72dd7ae"
    },
    "86d5683222442b513382c7fa7cf557806dce29937a13dc3207d39880478d88d2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nsource_auth_property = codebuild.CfnProject.SourceAuthProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    resource=\"resource\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nSourceAuthProperty sourceAuthProperty = new SourceAuthProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Resource = \"resource\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nSourceAuthProperty sourceAuthProperty = SourceAuthProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .resource(\"resource\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst sourceAuthProperty: codebuild.CfnProject.SourceAuthProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  resource: 'resource',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.SourceAuthProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.SourceAuthProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceAuthProperty: codebuild.CfnProject.SourceAuthProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  resource: 'resource',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4eb922954a9883677d27f77408a69de506a3d4a5427695180484c35ffe304392"
    },
    "d37e9ec50108827b294a64d465fb4e3a892a73b784246a9b53351c34d11eac83": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nsource_property = codebuild.CfnProject.SourceProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    auth=codebuild.CfnProject.SourceAuthProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        resource=\"resource\"\n    ),\n    build_spec=\"buildSpec\",\n    build_status_config=codebuild.CfnProject.BuildStatusConfigProperty(\n        context=\"context\",\n        target_url=\"targetUrl\"\n    ),\n    git_clone_depth=123,\n    git_submodules_config=codebuild.CfnProject.GitSubmodulesConfigProperty(\n        fetch_submodules=False\n    ),\n    insecure_ssl=False,\n    location=\"location\",\n    report_build_status=False,\n    source_identifier=\"sourceIdentifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nSourceProperty sourceProperty = new SourceProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Auth = new SourceAuthProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Resource = \"resource\"\n    },\n    BuildSpec = \"buildSpec\",\n    BuildStatusConfig = new BuildStatusConfigProperty {\n        Context = \"context\",\n        TargetUrl = \"targetUrl\"\n    },\n    GitCloneDepth = 123,\n    GitSubmodulesConfig = new GitSubmodulesConfigProperty {\n        FetchSubmodules = false\n    },\n    InsecureSsl = false,\n    Location = \"location\",\n    ReportBuildStatus = false,\n    SourceIdentifier = \"sourceIdentifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nSourceProperty sourceProperty = SourceProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .auth(SourceAuthProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .resource(\"resource\")\n                .build())\n        .buildSpec(\"buildSpec\")\n        .buildStatusConfig(BuildStatusConfigProperty.builder()\n                .context(\"context\")\n                .targetUrl(\"targetUrl\")\n                .build())\n        .gitCloneDepth(123)\n        .gitSubmodulesConfig(GitSubmodulesConfigProperty.builder()\n                .fetchSubmodules(false)\n                .build())\n        .insecureSsl(false)\n        .location(\"location\")\n        .reportBuildStatus(false)\n        .sourceIdentifier(\"sourceIdentifier\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst sourceProperty: codebuild.CfnProject.SourceProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  auth: {\n    type: 'type',\n\n    // the properties below are optional\n    resource: 'resource',\n  },\n  buildSpec: 'buildSpec',\n  buildStatusConfig: {\n    context: 'context',\n    targetUrl: 'targetUrl',\n  },\n  gitCloneDepth: 123,\n  gitSubmodulesConfig: {\n    fetchSubmodules: false,\n  },\n  insecureSsl: false,\n  location: 'location',\n  reportBuildStatus: false,\n  sourceIdentifier: 'sourceIdentifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.SourceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.SourceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceProperty: codebuild.CfnProject.SourceProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  auth: {\n    type: 'type',\n\n    // the properties below are optional\n    resource: 'resource',\n  },\n  buildSpec: 'buildSpec',\n  buildStatusConfig: {\n    context: 'context',\n    targetUrl: 'targetUrl',\n  },\n  gitCloneDepth: 123,\n  gitSubmodulesConfig: {\n    fetchSubmodules: false,\n  },\n  insecureSsl: false,\n  location: 'location',\n  reportBuildStatus: false,\n  sourceIdentifier: 'sourceIdentifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 20,
        "91": 3,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "1b3c76488d917fadfbf9b4080d778be20279f8642e0236907b1d13cbac4b8618"
    },
    "73589aaaf11698da9f2cf03e55112ed420536f92072edd4b23adb8c93dd4fa44": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nvpc_config_property = codebuild.CfnProject.VpcConfigProperty(\n    security_group_ids=[\"securityGroupIds\"],\n    subnets=[\"subnets\"],\n    vpc_id=\"vpcId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nVpcConfigProperty vpcConfigProperty = new VpcConfigProperty {\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    Subnets = new [] { \"subnets\" },\n    VpcId = \"vpcId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nVpcConfigProperty vpcConfigProperty = VpcConfigProperty.builder()\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .subnets(List.of(\"subnets\"))\n        .vpcId(\"vpcId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst vpcConfigProperty: codebuild.CfnProject.VpcConfigProperty = {\n  securityGroupIds: ['securityGroupIds'],\n  subnets: ['subnets'],\n  vpcId: 'vpcId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.VpcConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.VpcConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpcConfigProperty: codebuild.CfnProject.VpcConfigProperty = {\n  securityGroupIds: ['securityGroupIds'],\n  subnets: ['subnets'],\n  vpcId: 'vpcId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "575502af6c26a09ec364aa5c7178109d964b0605d6483ac6dcbcf4d213b0325c"
    },
    "046ec6fc810fde2601ed1c8b4807720776cc5351f6de839b3f215c95dd05a31b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nwebhook_filter_property = codebuild.CfnProject.WebhookFilterProperty(\n    pattern=\"pattern\",\n    type=\"type\",\n\n    # the properties below are optional\n    exclude_matched_pattern=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nWebhookFilterProperty webhookFilterProperty = new WebhookFilterProperty {\n    Pattern = \"pattern\",\n    Type = \"type\",\n\n    // the properties below are optional\n    ExcludeMatchedPattern = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nWebhookFilterProperty webhookFilterProperty = WebhookFilterProperty.builder()\n        .pattern(\"pattern\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .excludeMatchedPattern(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst webhookFilterProperty: codebuild.CfnProject.WebhookFilterProperty = {\n  pattern: 'pattern',\n  type: 'type',\n\n  // the properties below are optional\n  excludeMatchedPattern: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProject.WebhookFilterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.WebhookFilterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webhookFilterProperty: codebuild.CfnProject.WebhookFilterProperty = {\n  pattern: 'pattern',\n  type: 'type',\n\n  // the properties below are optional\n  excludeMatchedPattern: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7ad21215495d9c49264f00acc628cdf3471e05373f103250c3556d579893a05c"
    },
    "9fd90e2bdcbdb39a4189bed9e74bc44309c0ddf98e9f4e06af6942f8e876539c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncfn_project_props = codebuild.CfnProjectProps(\n    artifacts=codebuild.CfnProject.ArtifactsProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        artifact_identifier=\"artifactIdentifier\",\n        encryption_disabled=False,\n        location=\"location\",\n        name=\"name\",\n        namespace_type=\"namespaceType\",\n        override_artifact_name=False,\n        packaging=\"packaging\",\n        path=\"path\"\n    ),\n    environment=codebuild.CfnProject.EnvironmentProperty(\n        compute_type=\"computeType\",\n        image=\"image\",\n        type=\"type\",\n\n        # the properties below are optional\n        certificate=\"certificate\",\n        environment_variables=[codebuild.CfnProject.EnvironmentVariableProperty(\n            name=\"name\",\n            value=\"value\",\n\n            # the properties below are optional\n            type=\"type\"\n        )],\n        image_pull_credentials_type=\"imagePullCredentialsType\",\n        privileged_mode=False,\n        registry_credential=codebuild.CfnProject.RegistryCredentialProperty(\n            credential=\"credential\",\n            credential_provider=\"credentialProvider\"\n        )\n    ),\n    service_role=\"serviceRole\",\n    source=codebuild.CfnProject.SourceProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        auth=codebuild.CfnProject.SourceAuthProperty(\n            type=\"type\",\n\n            # the properties below are optional\n            resource=\"resource\"\n        ),\n        build_spec=\"buildSpec\",\n        build_status_config=codebuild.CfnProject.BuildStatusConfigProperty(\n            context=\"context\",\n            target_url=\"targetUrl\"\n        ),\n        git_clone_depth=123,\n        git_submodules_config=codebuild.CfnProject.GitSubmodulesConfigProperty(\n            fetch_submodules=False\n        ),\n        insecure_ssl=False,\n        location=\"location\",\n        report_build_status=False,\n        source_identifier=\"sourceIdentifier\"\n    ),\n\n    # the properties below are optional\n    badge_enabled=False,\n    build_batch_config=codebuild.CfnProject.ProjectBuildBatchConfigProperty(\n        batch_report_mode=\"batchReportMode\",\n        combine_artifacts=False,\n        restrictions=codebuild.CfnProject.BatchRestrictionsProperty(\n            compute_types_allowed=[\"computeTypesAllowed\"],\n            maximum_builds_allowed=123\n        ),\n        service_role=\"serviceRole\",\n        timeout_in_mins=123\n    ),\n    cache=codebuild.CfnProject.ProjectCacheProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        location=\"location\",\n        modes=[\"modes\"]\n    ),\n    concurrent_build_limit=123,\n    description=\"description\",\n    encryption_key=\"encryptionKey\",\n    file_system_locations=[codebuild.CfnProject.ProjectFileSystemLocationProperty(\n        identifier=\"identifier\",\n        location=\"location\",\n        mount_point=\"mountPoint\",\n        type=\"type\",\n\n        # the properties below are optional\n        mount_options=\"mountOptions\"\n    )],\n    logs_config=codebuild.CfnProject.LogsConfigProperty(\n        cloud_watch_logs=codebuild.CfnProject.CloudWatchLogsConfigProperty(\n            status=\"status\",\n\n            # the properties below are optional\n            group_name=\"groupName\",\n            stream_name=\"streamName\"\n        ),\n        s3_logs=codebuild.CfnProject.S3LogsConfigProperty(\n            status=\"status\",\n\n            # the properties below are optional\n            encryption_disabled=False,\n            location=\"location\"\n        )\n    ),\n    name=\"name\",\n    queued_timeout_in_minutes=123,\n    resource_access_role=\"resourceAccessRole\",\n    secondary_artifacts=[codebuild.CfnProject.ArtifactsProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        artifact_identifier=\"artifactIdentifier\",\n        encryption_disabled=False,\n        location=\"location\",\n        name=\"name\",\n        namespace_type=\"namespaceType\",\n        override_artifact_name=False,\n        packaging=\"packaging\",\n        path=\"path\"\n    )],\n    secondary_sources=[codebuild.CfnProject.SourceProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        auth=codebuild.CfnProject.SourceAuthProperty(\n            type=\"type\",\n\n            # the properties below are optional\n            resource=\"resource\"\n        ),\n        build_spec=\"buildSpec\",\n        build_status_config=codebuild.CfnProject.BuildStatusConfigProperty(\n            context=\"context\",\n            target_url=\"targetUrl\"\n        ),\n        git_clone_depth=123,\n        git_submodules_config=codebuild.CfnProject.GitSubmodulesConfigProperty(\n            fetch_submodules=False\n        ),\n        insecure_ssl=False,\n        location=\"location\",\n        report_build_status=False,\n        source_identifier=\"sourceIdentifier\"\n    )],\n    secondary_source_versions=[codebuild.CfnProject.ProjectSourceVersionProperty(\n        source_identifier=\"sourceIdentifier\",\n\n        # the properties below are optional\n        source_version=\"sourceVersion\"\n    )],\n    source_version=\"sourceVersion\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timeout_in_minutes=123,\n    triggers=codebuild.CfnProject.ProjectTriggersProperty(\n        build_type=\"buildType\",\n        filter_groups=[[codebuild.CfnProject.WebhookFilterProperty(\n            pattern=\"pattern\",\n            type=\"type\",\n\n            # the properties below are optional\n            exclude_matched_pattern=False\n        )]],\n        webhook=False\n    ),\n    visibility=\"visibility\",\n    vpc_config=codebuild.CfnProject.VpcConfigProperty(\n        security_group_ids=[\"securityGroupIds\"],\n        subnets=[\"subnets\"],\n        vpc_id=\"vpcId\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCfnProjectProps cfnProjectProps = new CfnProjectProps {\n    Artifacts = new ArtifactsProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ArtifactIdentifier = \"artifactIdentifier\",\n        EncryptionDisabled = false,\n        Location = \"location\",\n        Name = \"name\",\n        NamespaceType = \"namespaceType\",\n        OverrideArtifactName = false,\n        Packaging = \"packaging\",\n        Path = \"path\"\n    },\n    Environment = new EnvironmentProperty {\n        ComputeType = \"computeType\",\n        Image = \"image\",\n        Type = \"type\",\n\n        // the properties below are optional\n        Certificate = \"certificate\",\n        EnvironmentVariables = new [] { new EnvironmentVariableProperty {\n            Name = \"name\",\n            Value = \"value\",\n\n            // the properties below are optional\n            Type = \"type\"\n        } },\n        ImagePullCredentialsType = \"imagePullCredentialsType\",\n        PrivilegedMode = false,\n        RegistryCredential = new RegistryCredentialProperty {\n            Credential = \"credential\",\n            CredentialProvider = \"credentialProvider\"\n        }\n    },\n    ServiceRole = \"serviceRole\",\n    Source = new SourceProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Auth = new SourceAuthProperty {\n            Type = \"type\",\n\n            // the properties below are optional\n            Resource = \"resource\"\n        },\n        BuildSpec = \"buildSpec\",\n        BuildStatusConfig = new BuildStatusConfigProperty {\n            Context = \"context\",\n            TargetUrl = \"targetUrl\"\n        },\n        GitCloneDepth = 123,\n        GitSubmodulesConfig = new GitSubmodulesConfigProperty {\n            FetchSubmodules = false\n        },\n        InsecureSsl = false,\n        Location = \"location\",\n        ReportBuildStatus = false,\n        SourceIdentifier = \"sourceIdentifier\"\n    },\n\n    // the properties below are optional\n    BadgeEnabled = false,\n    BuildBatchConfig = new ProjectBuildBatchConfigProperty {\n        BatchReportMode = \"batchReportMode\",\n        CombineArtifacts = false,\n        Restrictions = new BatchRestrictionsProperty {\n            ComputeTypesAllowed = new [] { \"computeTypesAllowed\" },\n            MaximumBuildsAllowed = 123\n        },\n        ServiceRole = \"serviceRole\",\n        TimeoutInMins = 123\n    },\n    Cache = new ProjectCacheProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Location = \"location\",\n        Modes = new [] { \"modes\" }\n    },\n    ConcurrentBuildLimit = 123,\n    Description = \"description\",\n    EncryptionKey = \"encryptionKey\",\n    FileSystemLocations = new [] { new ProjectFileSystemLocationProperty {\n        Identifier = \"identifier\",\n        Location = \"location\",\n        MountPoint = \"mountPoint\",\n        Type = \"type\",\n\n        // the properties below are optional\n        MountOptions = \"mountOptions\"\n    } },\n    LogsConfig = new LogsConfigProperty {\n        CloudWatchLogs = new CloudWatchLogsConfigProperty {\n            Status = \"status\",\n\n            // the properties below are optional\n            GroupName = \"groupName\",\n            StreamName = \"streamName\"\n        },\n        S3Logs = new S3LogsConfigProperty {\n            Status = \"status\",\n\n            // the properties below are optional\n            EncryptionDisabled = false,\n            Location = \"location\"\n        }\n    },\n    Name = \"name\",\n    QueuedTimeoutInMinutes = 123,\n    ResourceAccessRole = \"resourceAccessRole\",\n    SecondaryArtifacts = new [] { new ArtifactsProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        ArtifactIdentifier = \"artifactIdentifier\",\n        EncryptionDisabled = false,\n        Location = \"location\",\n        Name = \"name\",\n        NamespaceType = \"namespaceType\",\n        OverrideArtifactName = false,\n        Packaging = \"packaging\",\n        Path = \"path\"\n    } },\n    SecondarySources = new [] { new SourceProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Auth = new SourceAuthProperty {\n            Type = \"type\",\n\n            // the properties below are optional\n            Resource = \"resource\"\n        },\n        BuildSpec = \"buildSpec\",\n        BuildStatusConfig = new BuildStatusConfigProperty {\n            Context = \"context\",\n            TargetUrl = \"targetUrl\"\n        },\n        GitCloneDepth = 123,\n        GitSubmodulesConfig = new GitSubmodulesConfigProperty {\n            FetchSubmodules = false\n        },\n        InsecureSsl = false,\n        Location = \"location\",\n        ReportBuildStatus = false,\n        SourceIdentifier = \"sourceIdentifier\"\n    } },\n    SecondarySourceVersions = new [] { new ProjectSourceVersionProperty {\n        SourceIdentifier = \"sourceIdentifier\",\n\n        // the properties below are optional\n        SourceVersion = \"sourceVersion\"\n    } },\n    SourceVersion = \"sourceVersion\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TimeoutInMinutes = 123,\n    Triggers = new ProjectTriggersProperty {\n        BuildType = \"buildType\",\n        FilterGroups = new [] { new [] { new WebhookFilterProperty {\n            Pattern = \"pattern\",\n            Type = \"type\",\n\n            // the properties below are optional\n            ExcludeMatchedPattern = false\n        } } },\n        Webhook = false\n    },\n    Visibility = \"visibility\",\n    VpcConfig = new VpcConfigProperty {\n        SecurityGroupIds = new [] { \"securityGroupIds\" },\n        Subnets = new [] { \"subnets\" },\n        VpcId = \"vpcId\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCfnProjectProps cfnProjectProps = CfnProjectProps.builder()\n        .artifacts(ArtifactsProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .artifactIdentifier(\"artifactIdentifier\")\n                .encryptionDisabled(false)\n                .location(\"location\")\n                .name(\"name\")\n                .namespaceType(\"namespaceType\")\n                .overrideArtifactName(false)\n                .packaging(\"packaging\")\n                .path(\"path\")\n                .build())\n        .environment(EnvironmentProperty.builder()\n                .computeType(\"computeType\")\n                .image(\"image\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .certificate(\"certificate\")\n                .environmentVariables(List.of(EnvironmentVariableProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n\n                        // the properties below are optional\n                        .type(\"type\")\n                        .build()))\n                .imagePullCredentialsType(\"imagePullCredentialsType\")\n                .privilegedMode(false)\n                .registryCredential(RegistryCredentialProperty.builder()\n                        .credential(\"credential\")\n                        .credentialProvider(\"credentialProvider\")\n                        .build())\n                .build())\n        .serviceRole(\"serviceRole\")\n        .source(SourceProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .auth(SourceAuthProperty.builder()\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .resource(\"resource\")\n                        .build())\n                .buildSpec(\"buildSpec\")\n                .buildStatusConfig(BuildStatusConfigProperty.builder()\n                        .context(\"context\")\n                        .targetUrl(\"targetUrl\")\n                        .build())\n                .gitCloneDepth(123)\n                .gitSubmodulesConfig(GitSubmodulesConfigProperty.builder()\n                        .fetchSubmodules(false)\n                        .build())\n                .insecureSsl(false)\n                .location(\"location\")\n                .reportBuildStatus(false)\n                .sourceIdentifier(\"sourceIdentifier\")\n                .build())\n\n        // the properties below are optional\n        .badgeEnabled(false)\n        .buildBatchConfig(ProjectBuildBatchConfigProperty.builder()\n                .batchReportMode(\"batchReportMode\")\n                .combineArtifacts(false)\n                .restrictions(BatchRestrictionsProperty.builder()\n                        .computeTypesAllowed(List.of(\"computeTypesAllowed\"))\n                        .maximumBuildsAllowed(123)\n                        .build())\n                .serviceRole(\"serviceRole\")\n                .timeoutInMins(123)\n                .build())\n        .cache(ProjectCacheProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .location(\"location\")\n                .modes(List.of(\"modes\"))\n                .build())\n        .concurrentBuildLimit(123)\n        .description(\"description\")\n        .encryptionKey(\"encryptionKey\")\n        .fileSystemLocations(List.of(ProjectFileSystemLocationProperty.builder()\n                .identifier(\"identifier\")\n                .location(\"location\")\n                .mountPoint(\"mountPoint\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .mountOptions(\"mountOptions\")\n                .build()))\n        .logsConfig(LogsConfigProperty.builder()\n                .cloudWatchLogs(CloudWatchLogsConfigProperty.builder()\n                        .status(\"status\")\n\n                        // the properties below are optional\n                        .groupName(\"groupName\")\n                        .streamName(\"streamName\")\n                        .build())\n                .s3Logs(S3LogsConfigProperty.builder()\n                        .status(\"status\")\n\n                        // the properties below are optional\n                        .encryptionDisabled(false)\n                        .location(\"location\")\n                        .build())\n                .build())\n        .name(\"name\")\n        .queuedTimeoutInMinutes(123)\n        .resourceAccessRole(\"resourceAccessRole\")\n        .secondaryArtifacts(List.of(ArtifactsProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .artifactIdentifier(\"artifactIdentifier\")\n                .encryptionDisabled(false)\n                .location(\"location\")\n                .name(\"name\")\n                .namespaceType(\"namespaceType\")\n                .overrideArtifactName(false)\n                .packaging(\"packaging\")\n                .path(\"path\")\n                .build()))\n        .secondarySources(List.of(SourceProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .auth(SourceAuthProperty.builder()\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .resource(\"resource\")\n                        .build())\n                .buildSpec(\"buildSpec\")\n                .buildStatusConfig(BuildStatusConfigProperty.builder()\n                        .context(\"context\")\n                        .targetUrl(\"targetUrl\")\n                        .build())\n                .gitCloneDepth(123)\n                .gitSubmodulesConfig(GitSubmodulesConfigProperty.builder()\n                        .fetchSubmodules(false)\n                        .build())\n                .insecureSsl(false)\n                .location(\"location\")\n                .reportBuildStatus(false)\n                .sourceIdentifier(\"sourceIdentifier\")\n                .build()))\n        .secondarySourceVersions(List.of(ProjectSourceVersionProperty.builder()\n                .sourceIdentifier(\"sourceIdentifier\")\n\n                // the properties below are optional\n                .sourceVersion(\"sourceVersion\")\n                .build()))\n        .sourceVersion(\"sourceVersion\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timeoutInMinutes(123)\n        .triggers(ProjectTriggersProperty.builder()\n                .buildType(\"buildType\")\n                .filterGroups(List.of(List.of(WebhookFilterProperty.builder()\n                        .pattern(\"pattern\")\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .excludeMatchedPattern(false)\n                        .build())))\n                .webhook(false)\n                .build())\n        .visibility(\"visibility\")\n        .vpcConfig(VpcConfigProperty.builder()\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .subnets(List.of(\"subnets\"))\n                .vpcId(\"vpcId\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cfnProjectProps: codebuild.CfnProjectProps = {\n  artifacts: {\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  },\n  environment: {\n    computeType: 'computeType',\n    image: 'image',\n    type: 'type',\n\n    // the properties below are optional\n    certificate: 'certificate',\n    environmentVariables: [{\n      name: 'name',\n      value: 'value',\n\n      // the properties below are optional\n      type: 'type',\n    }],\n    imagePullCredentialsType: 'imagePullCredentialsType',\n    privilegedMode: false,\n    registryCredential: {\n      credential: 'credential',\n      credentialProvider: 'credentialProvider',\n    },\n  },\n  serviceRole: 'serviceRole',\n  source: {\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  },\n\n  // the properties below are optional\n  badgeEnabled: false,\n  buildBatchConfig: {\n    batchReportMode: 'batchReportMode',\n    combineArtifacts: false,\n    restrictions: {\n      computeTypesAllowed: ['computeTypesAllowed'],\n      maximumBuildsAllowed: 123,\n    },\n    serviceRole: 'serviceRole',\n    timeoutInMins: 123,\n  },\n  cache: {\n    type: 'type',\n\n    // the properties below are optional\n    location: 'location',\n    modes: ['modes'],\n  },\n  concurrentBuildLimit: 123,\n  description: 'description',\n  encryptionKey: 'encryptionKey',\n  fileSystemLocations: [{\n    identifier: 'identifier',\n    location: 'location',\n    mountPoint: 'mountPoint',\n    type: 'type',\n\n    // the properties below are optional\n    mountOptions: 'mountOptions',\n  }],\n  logsConfig: {\n    cloudWatchLogs: {\n      status: 'status',\n\n      // the properties below are optional\n      groupName: 'groupName',\n      streamName: 'streamName',\n    },\n    s3Logs: {\n      status: 'status',\n\n      // the properties below are optional\n      encryptionDisabled: false,\n      location: 'location',\n    },\n  },\n  name: 'name',\n  queuedTimeoutInMinutes: 123,\n  resourceAccessRole: 'resourceAccessRole',\n  secondaryArtifacts: [{\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  }],\n  secondarySources: [{\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  }],\n  secondarySourceVersions: [{\n    sourceIdentifier: 'sourceIdentifier',\n\n    // the properties below are optional\n    sourceVersion: 'sourceVersion',\n  }],\n  sourceVersion: 'sourceVersion',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n  triggers: {\n    buildType: 'buildType',\n    filterGroups: [[{\n      pattern: 'pattern',\n      type: 'type',\n\n      // the properties below are optional\n      excludeMatchedPattern: false,\n    }]],\n    webhook: false,\n  },\n  visibility: 'visibility',\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnets: ['subnets'],\n    vpcId: 'vpcId',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProjectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnProjectProps: codebuild.CfnProjectProps = {\n  artifacts: {\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  },\n  environment: {\n    computeType: 'computeType',\n    image: 'image',\n    type: 'type',\n\n    // the properties below are optional\n    certificate: 'certificate',\n    environmentVariables: [{\n      name: 'name',\n      value: 'value',\n\n      // the properties below are optional\n      type: 'type',\n    }],\n    imagePullCredentialsType: 'imagePullCredentialsType',\n    privilegedMode: false,\n    registryCredential: {\n      credential: 'credential',\n      credentialProvider: 'credentialProvider',\n    },\n  },\n  serviceRole: 'serviceRole',\n  source: {\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  },\n\n  // the properties below are optional\n  badgeEnabled: false,\n  buildBatchConfig: {\n    batchReportMode: 'batchReportMode',\n    combineArtifacts: false,\n    restrictions: {\n      computeTypesAllowed: ['computeTypesAllowed'],\n      maximumBuildsAllowed: 123,\n    },\n    serviceRole: 'serviceRole',\n    timeoutInMins: 123,\n  },\n  cache: {\n    type: 'type',\n\n    // the properties below are optional\n    location: 'location',\n    modes: ['modes'],\n  },\n  concurrentBuildLimit: 123,\n  description: 'description',\n  encryptionKey: 'encryptionKey',\n  fileSystemLocations: [{\n    identifier: 'identifier',\n    location: 'location',\n    mountPoint: 'mountPoint',\n    type: 'type',\n\n    // the properties below are optional\n    mountOptions: 'mountOptions',\n  }],\n  logsConfig: {\n    cloudWatchLogs: {\n      status: 'status',\n\n      // the properties below are optional\n      groupName: 'groupName',\n      streamName: 'streamName',\n    },\n    s3Logs: {\n      status: 'status',\n\n      // the properties below are optional\n      encryptionDisabled: false,\n      location: 'location',\n    },\n  },\n  name: 'name',\n  queuedTimeoutInMinutes: 123,\n  resourceAccessRole: 'resourceAccessRole',\n  secondaryArtifacts: [{\n    type: 'type',\n\n    // the properties below are optional\n    artifactIdentifier: 'artifactIdentifier',\n    encryptionDisabled: false,\n    location: 'location',\n    name: 'name',\n    namespaceType: 'namespaceType',\n    overrideArtifactName: false,\n    packaging: 'packaging',\n    path: 'path',\n  }],\n  secondarySources: [{\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  }],\n  secondarySourceVersions: [{\n    sourceIdentifier: 'sourceIdentifier',\n\n    // the properties below are optional\n    sourceVersion: 'sourceVersion',\n  }],\n  sourceVersion: 'sourceVersion',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timeoutInMinutes: 123,\n  triggers: {\n    buildType: 'buildType',\n    filterGroups: [[{\n      pattern: 'pattern',\n      type: 'type',\n\n      // the properties below are optional\n      excludeMatchedPattern: false,\n    }]],\n    webhook: false,\n  },\n  visibility: 'visibility',\n  vpcConfig: {\n    securityGroupIds: ['securityGroupIds'],\n    subnets: ['subnets'],\n    vpcId: 'vpcId',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 74,
        "75": 125,
        "91": 16,
        "153": 1,
        "169": 1,
        "192": 12,
        "193": 26,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 121,
        "290": 1
      },
      "fqnsFingerprint": "c736763636a15a897a1fefd8fb974ff42db85286834eede9ed9079a6f2ccaef2"
    },
    "5b1c2f5e01ace15aa01c99d5989717c648035b49d082ceb46031b2aa47d22ffe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncfn_report_group = codebuild.CfnReportGroup(self, \"MyCfnReportGroup\",\n    export_config=codebuild.CfnReportGroup.ReportExportConfigProperty(\n        export_config_type=\"exportConfigType\",\n\n        # the properties below are optional\n        s3_destination=codebuild.CfnReportGroup.S3ReportExportConfigProperty(\n            bucket=\"bucket\",\n\n            # the properties below are optional\n            bucket_owner=\"bucketOwner\",\n            encryption_disabled=False,\n            encryption_key=\"encryptionKey\",\n            packaging=\"packaging\",\n            path=\"path\"\n        )\n    ),\n    type=\"type\",\n\n    # the properties below are optional\n    delete_reports=False,\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCfnReportGroup cfnReportGroup = new CfnReportGroup(this, \"MyCfnReportGroup\", new CfnReportGroupProps {\n    ExportConfig = new ReportExportConfigProperty {\n        ExportConfigType = \"exportConfigType\",\n\n        // the properties below are optional\n        S3Destination = new S3ReportExportConfigProperty {\n            Bucket = \"bucket\",\n\n            // the properties below are optional\n            BucketOwner = \"bucketOwner\",\n            EncryptionDisabled = false,\n            EncryptionKey = \"encryptionKey\",\n            Packaging = \"packaging\",\n            Path = \"path\"\n        }\n    },\n    Type = \"type\",\n\n    // the properties below are optional\n    DeleteReports = false,\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCfnReportGroup cfnReportGroup = CfnReportGroup.Builder.create(this, \"MyCfnReportGroup\")\n        .exportConfig(ReportExportConfigProperty.builder()\n                .exportConfigType(\"exportConfigType\")\n\n                // the properties below are optional\n                .s3Destination(S3ReportExportConfigProperty.builder()\n                        .bucket(\"bucket\")\n\n                        // the properties below are optional\n                        .bucketOwner(\"bucketOwner\")\n                        .encryptionDisabled(false)\n                        .encryptionKey(\"encryptionKey\")\n                        .packaging(\"packaging\")\n                        .path(\"path\")\n                        .build())\n                .build())\n        .type(\"type\")\n\n        // the properties below are optional\n        .deleteReports(false)\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cfnReportGroup = new codebuild.CfnReportGroup(this, 'MyCfnReportGroup', {\n  exportConfig: {\n    exportConfigType: 'exportConfigType',\n\n    // the properties below are optional\n    s3Destination: {\n      bucket: 'bucket',\n\n      // the properties below are optional\n      bucketOwner: 'bucketOwner',\n      encryptionDisabled: false,\n      encryptionKey: 'encryptionKey',\n      packaging: 'packaging',\n      path: 'path',\n    },\n  },\n  type: 'type',\n\n  // the properties below are optional\n  deleteReports: false,\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnReportGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnReportGroup",
        "@aws-cdk/aws-codebuild.CfnReportGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnReportGroup = new codebuild.CfnReportGroup(this, 'MyCfnReportGroup', {\n  exportConfig: {\n    exportConfigType: 'exportConfigType',\n\n    // the properties below are optional\n    s3Destination: {\n      bucket: 'bucket',\n\n      // the properties below are optional\n      bucketOwner: 'bucketOwner',\n      encryptionDisabled: false,\n      encryptionKey: 'encryptionKey',\n      packaging: 'packaging',\n      path: 'path',\n    },\n  },\n  type: 'type',\n\n  // the properties below are optional\n  deleteReports: false,\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 12,
        "75": 19,
        "91": 2,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "1ae806bf3d69e6d12f2968d682f78885295637426186f08f9a7c4f8dace3100d"
    },
    "b747393e587b5b49224657b0c01ad29036a5dbee5797d0067f9d61241c2015f0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nreport_export_config_property = codebuild.CfnReportGroup.ReportExportConfigProperty(\n    export_config_type=\"exportConfigType\",\n\n    # the properties below are optional\n    s3_destination=codebuild.CfnReportGroup.S3ReportExportConfigProperty(\n        bucket=\"bucket\",\n\n        # the properties below are optional\n        bucket_owner=\"bucketOwner\",\n        encryption_disabled=False,\n        encryption_key=\"encryptionKey\",\n        packaging=\"packaging\",\n        path=\"path\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nReportExportConfigProperty reportExportConfigProperty = new ReportExportConfigProperty {\n    ExportConfigType = \"exportConfigType\",\n\n    // the properties below are optional\n    S3Destination = new S3ReportExportConfigProperty {\n        Bucket = \"bucket\",\n\n        // the properties below are optional\n        BucketOwner = \"bucketOwner\",\n        EncryptionDisabled = false,\n        EncryptionKey = \"encryptionKey\",\n        Packaging = \"packaging\",\n        Path = \"path\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nReportExportConfigProperty reportExportConfigProperty = ReportExportConfigProperty.builder()\n        .exportConfigType(\"exportConfigType\")\n\n        // the properties below are optional\n        .s3Destination(S3ReportExportConfigProperty.builder()\n                .bucket(\"bucket\")\n\n                // the properties below are optional\n                .bucketOwner(\"bucketOwner\")\n                .encryptionDisabled(false)\n                .encryptionKey(\"encryptionKey\")\n                .packaging(\"packaging\")\n                .path(\"path\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst reportExportConfigProperty: codebuild.CfnReportGroup.ReportExportConfigProperty = {\n  exportConfigType: 'exportConfigType',\n\n  // the properties below are optional\n  s3Destination: {\n    bucket: 'bucket',\n\n    // the properties below are optional\n    bucketOwner: 'bucketOwner',\n    encryptionDisabled: false,\n    encryptionKey: 'encryptionKey',\n    packaging: 'packaging',\n    path: 'path',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnReportGroup.ReportExportConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnReportGroup.ReportExportConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst reportExportConfigProperty: codebuild.CfnReportGroup.ReportExportConfigProperty = {\n  exportConfigType: 'exportConfigType',\n\n  // the properties below are optional\n  s3Destination: {\n    bucket: 'bucket',\n\n    // the properties below are optional\n    bucketOwner: 'bucketOwner',\n    encryptionDisabled: false,\n    encryptionKey: 'encryptionKey',\n    packaging: 'packaging',\n    path: 'path',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 13,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "68f243d8f6c8f0804104b2b1222efa037e2e8101dba76fe8ca67dcf7669e1f5e"
    },
    "0862a7ce9c26ce83a91c04cf70bb0d80fb0af6fd6243075dab34712133ebf768": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ns3_report_export_config_property = codebuild.CfnReportGroup.S3ReportExportConfigProperty(\n    bucket=\"bucket\",\n\n    # the properties below are optional\n    bucket_owner=\"bucketOwner\",\n    encryption_disabled=False,\n    encryption_key=\"encryptionKey\",\n    packaging=\"packaging\",\n    path=\"path\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nS3ReportExportConfigProperty s3ReportExportConfigProperty = new S3ReportExportConfigProperty {\n    Bucket = \"bucket\",\n\n    // the properties below are optional\n    BucketOwner = \"bucketOwner\",\n    EncryptionDisabled = false,\n    EncryptionKey = \"encryptionKey\",\n    Packaging = \"packaging\",\n    Path = \"path\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nS3ReportExportConfigProperty s3ReportExportConfigProperty = S3ReportExportConfigProperty.builder()\n        .bucket(\"bucket\")\n\n        // the properties below are optional\n        .bucketOwner(\"bucketOwner\")\n        .encryptionDisabled(false)\n        .encryptionKey(\"encryptionKey\")\n        .packaging(\"packaging\")\n        .path(\"path\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst s3ReportExportConfigProperty: codebuild.CfnReportGroup.S3ReportExportConfigProperty = {\n  bucket: 'bucket',\n\n  // the properties below are optional\n  bucketOwner: 'bucketOwner',\n  encryptionDisabled: false,\n  encryptionKey: 'encryptionKey',\n  packaging: 'packaging',\n  path: 'path',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnReportGroup.S3ReportExportConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnReportGroup.S3ReportExportConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3ReportExportConfigProperty: codebuild.CfnReportGroup.S3ReportExportConfigProperty = {\n  bucket: 'bucket',\n\n  // the properties below are optional\n  bucketOwner: 'bucketOwner',\n  encryptionDisabled: false,\n  encryptionKey: 'encryptionKey',\n  packaging: 'packaging',\n  path: 'path',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "aa4a3993eefbfdf53944b9f3aaf80611c4edf80a2c3e540c4986d091567010d9"
    },
    "481c07f88d336e35555f6e8e22ca65b712a87af0ddb47970b8df0dcc371679cb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncfn_report_group_props = codebuild.CfnReportGroupProps(\n    export_config=codebuild.CfnReportGroup.ReportExportConfigProperty(\n        export_config_type=\"exportConfigType\",\n\n        # the properties below are optional\n        s3_destination=codebuild.CfnReportGroup.S3ReportExportConfigProperty(\n            bucket=\"bucket\",\n\n            # the properties below are optional\n            bucket_owner=\"bucketOwner\",\n            encryption_disabled=False,\n            encryption_key=\"encryptionKey\",\n            packaging=\"packaging\",\n            path=\"path\"\n        )\n    ),\n    type=\"type\",\n\n    # the properties below are optional\n    delete_reports=False,\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCfnReportGroupProps cfnReportGroupProps = new CfnReportGroupProps {\n    ExportConfig = new ReportExportConfigProperty {\n        ExportConfigType = \"exportConfigType\",\n\n        // the properties below are optional\n        S3Destination = new S3ReportExportConfigProperty {\n            Bucket = \"bucket\",\n\n            // the properties below are optional\n            BucketOwner = \"bucketOwner\",\n            EncryptionDisabled = false,\n            EncryptionKey = \"encryptionKey\",\n            Packaging = \"packaging\",\n            Path = \"path\"\n        }\n    },\n    Type = \"type\",\n\n    // the properties below are optional\n    DeleteReports = false,\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCfnReportGroupProps cfnReportGroupProps = CfnReportGroupProps.builder()\n        .exportConfig(ReportExportConfigProperty.builder()\n                .exportConfigType(\"exportConfigType\")\n\n                // the properties below are optional\n                .s3Destination(S3ReportExportConfigProperty.builder()\n                        .bucket(\"bucket\")\n\n                        // the properties below are optional\n                        .bucketOwner(\"bucketOwner\")\n                        .encryptionDisabled(false)\n                        .encryptionKey(\"encryptionKey\")\n                        .packaging(\"packaging\")\n                        .path(\"path\")\n                        .build())\n                .build())\n        .type(\"type\")\n\n        // the properties below are optional\n        .deleteReports(false)\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cfnReportGroupProps: codebuild.CfnReportGroupProps = {\n  exportConfig: {\n    exportConfigType: 'exportConfigType',\n\n    // the properties below are optional\n    s3Destination: {\n      bucket: 'bucket',\n\n      // the properties below are optional\n      bucketOwner: 'bucketOwner',\n      encryptionDisabled: false,\n      encryptionKey: 'encryptionKey',\n      packaging: 'packaging',\n      path: 'path',\n    },\n  },\n  type: 'type',\n\n  // the properties below are optional\n  deleteReports: false,\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnReportGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnReportGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnReportGroupProps: codebuild.CfnReportGroupProps = {\n  exportConfig: {\n    exportConfigType: 'exportConfigType',\n\n    // the properties below are optional\n    s3Destination: {\n      bucket: 'bucket',\n\n      // the properties below are optional\n      bucketOwner: 'bucketOwner',\n      encryptionDisabled: false,\n      encryptionKey: 'encryptionKey',\n      packaging: 'packaging',\n      path: 'path',\n    },\n  },\n  type: 'type',\n\n  // the properties below are optional\n  deleteReports: false,\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 19,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "f8d38e87352b8e76c76bf8431f43df4a5c45ea0f871b1ebf3da9bb68f56b4ed1"
    },
    "00ecd4caf2a88d073a1264a53cb4547556707fe32e3adb0fb5a94a4fb4b0a8ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncfn_source_credential = codebuild.CfnSourceCredential(self, \"MyCfnSourceCredential\",\n    auth_type=\"authType\",\n    server_type=\"serverType\",\n    token=\"token\",\n\n    # the properties below are optional\n    username=\"username\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCfnSourceCredential cfnSourceCredential = new CfnSourceCredential(this, \"MyCfnSourceCredential\", new CfnSourceCredentialProps {\n    AuthType = \"authType\",\n    ServerType = \"serverType\",\n    Token = \"token\",\n\n    // the properties below are optional\n    Username = \"username\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCfnSourceCredential cfnSourceCredential = CfnSourceCredential.Builder.create(this, \"MyCfnSourceCredential\")\n        .authType(\"authType\")\n        .serverType(\"serverType\")\n        .token(\"token\")\n\n        // the properties below are optional\n        .username(\"username\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cfnSourceCredential = new codebuild.CfnSourceCredential(this, 'MyCfnSourceCredential', {\n  authType: 'authType',\n  serverType: 'serverType',\n  token: 'token',\n\n  // the properties below are optional\n  username: 'username',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnSourceCredential"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnSourceCredential",
        "@aws-cdk/aws-codebuild.CfnSourceCredentialProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSourceCredential = new codebuild.CfnSourceCredential(this, 'MyCfnSourceCredential', {\n  authType: 'authType',\n  serverType: 'serverType',\n  token: 'token',\n\n  // the properties below are optional\n  username: 'username',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3d6d5feb9618e0e63066fbe8db697273b0d5e5003935473f64187a7aabf20541"
    },
    "fd66a79b2a44a98cb6cb8e4b72c4379cda8675d8076c78bd09abcca85db13fcf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\ncfn_source_credential_props = codebuild.CfnSourceCredentialProps(\n    auth_type=\"authType\",\n    server_type=\"serverType\",\n    token=\"token\",\n\n    # the properties below are optional\n    username=\"username\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nCfnSourceCredentialProps cfnSourceCredentialProps = new CfnSourceCredentialProps {\n    AuthType = \"authType\",\n    ServerType = \"serverType\",\n    Token = \"token\",\n\n    // the properties below are optional\n    Username = \"username\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nCfnSourceCredentialProps cfnSourceCredentialProps = CfnSourceCredentialProps.builder()\n        .authType(\"authType\")\n        .serverType(\"serverType\")\n        .token(\"token\")\n\n        // the properties below are optional\n        .username(\"username\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst cfnSourceCredentialProps: codebuild.CfnSourceCredentialProps = {\n  authType: 'authType',\n  serverType: 'serverType',\n  token: 'token',\n\n  // the properties below are optional\n  username: 'username',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CfnSourceCredentialProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnSourceCredentialProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSourceCredentialProps: codebuild.CfnSourceCredentialProps = {\n  authType: 'authType',\n  serverType: 'serverType',\n  token: 'token',\n\n  // the properties below are optional\n  username: 'username',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "bc721d2c12c761ca4bf74cce8703be5e3008595a390533c4f516384589d8e9e8"
    },
    "86fb495089074b6da289bcd5def47cc70077c65aae568d5e4a48dfb7455536c2": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            log_group=logs.LogGroup(self, \"MyLogGroup\")\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            LogGroup = new LogGroup(this, \"MyLogGroup\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .logGroup(new LogGroup(this, \"MyLogGroup\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "384f1e60aef306882cd3df18712bf979764e9a065e4971a1599d4bc336312f35"
    },
    "22c08f9e98db04a9b7924599a024ba73bf17c74c393456121bc3915e6ad277bd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n# repo: codecommit.Repository\n# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    secondary_sources=[\n        codebuild.Source.code_commit(\n            identifier=\"source2\",\n            repository=repo\n        )\n    ],\n    secondary_artifacts=[\n        codebuild.Artifacts.s3(\n            identifier=\"artifact2\",\n            bucket=bucket,\n            path=\"some/path\",\n            name=\"file.zip\"\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nRepository repo;\nBucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    SecondarySources = new [] { Source.CodeCommit(new CodeCommitSourceProps {\n        Identifier = \"source2\",\n        Repository = repo\n    }) },\n    SecondaryArtifacts = new [] { Artifacts.S3(new S3ArtifactsProps {\n        Identifier = \"artifact2\",\n        Bucket = bucket,\n        Path = \"some/path\",\n        Name = \"file.zip\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nRepository repo;\nBucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .secondarySources(List.of(Source.codeCommit(CodeCommitSourceProps.builder()\n                .identifier(\"source2\")\n                .repository(repo)\n                .build())))\n        .secondaryArtifacts(List.of(Artifacts.s3(S3ArtifactsProps.builder()\n                .identifier(\"artifact2\")\n                .bucket(bucket)\n                .path(\"some/path\")\n                .name(\"file.zip\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CodeCommitSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "1ee14e7dd006f3ba77d51f4ce61f54a844870b6508e095c96fd5a83249da4030"
    },
    "630b45a60f0c51f1bd4bd2cb73c6ccb4dc7c0fc25b0d59b45cea8993e03d1ce3": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "fb8b8490a16d205d53ef5334f069c70b21b82b520b897dd5ec11e449923d8341": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# build_spec: codebuild.BuildSpec\n# cache: codebuild.Cache\n# file_system_location: codebuild.IFileSystemLocation\n# key: kms.Key\n# log_group: logs.LogGroup\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\ncommon_project_props = codebuild.CommonProjectProps(\n    allow_all_outbound=False,\n    badge=False,\n    build_spec=build_spec,\n    cache=cache,\n    check_secrets_in_plain_text_env_variables=False,\n    concurrent_build_limit=123,\n    description=\"description\",\n    encryption_key=key,\n    environment=codebuild.BuildEnvironment(\n        build_image=build_image,\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=bucket,\n            object_key=\"objectKey\"\n        ),\n        compute_type=codebuild.ComputeType.SMALL,\n        environment_variables={\n            \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                value=value,\n\n                # the properties below are optional\n                type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n            )\n        },\n        privileged=False\n    ),\n    environment_variables={\n        \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n            value=value,\n\n            # the properties below are optional\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n        )\n    },\n    file_system_locations=[file_system_location],\n    grant_report_group_permissions=False,\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            enabled=False,\n            log_group=log_group,\n            prefix=\"prefix\"\n        ),\n        s3=codebuild.S3LoggingOptions(\n            bucket=bucket,\n\n            # the properties below are optional\n            enabled=False,\n            encrypted=False,\n            prefix=\"prefix\"\n        )\n    ),\n    project_name=\"projectName\",\n    queued_timeout=cdk.Duration.minutes(30),\n    role=role,\n    security_groups=[security_group],\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    timeout=cdk.Duration.minutes(30),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nCache cache;\nIFileSystemLocation fileSystemLocation;\nKey key;\nLogGroup logGroup;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\nCommonProjectProps commonProjectProps = new CommonProjectProps {\n    AllowAllOutbound = false,\n    Badge = false,\n    BuildSpec = buildSpec,\n    Cache = cache,\n    CheckSecretsInPlainTextEnvVariables = false,\n    ConcurrentBuildLimit = 123,\n    Description = \"description\",\n    EncryptionKey = key,\n    Environment = new BuildEnvironment {\n        BuildImage = buildImage,\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = bucket,\n            ObjectKey = \"objectKey\"\n        },\n        ComputeType = ComputeType.SMALL,\n        EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n            { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                Value = value,\n\n                // the properties below are optional\n                Type = BuildEnvironmentVariableType.PLAINTEXT\n            } }\n        },\n        Privileged = false\n    },\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n            Value = value,\n\n            // the properties below are optional\n            Type = BuildEnvironmentVariableType.PLAINTEXT\n        } }\n    },\n    FileSystemLocations = new [] { fileSystemLocation },\n    GrantReportGroupPermissions = false,\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            Enabled = false,\n            LogGroup = logGroup,\n            Prefix = \"prefix\"\n        },\n        S3 = new S3LoggingOptions {\n            Bucket = bucket,\n\n            // the properties below are optional\n            Enabled = false,\n            Encrypted = false,\n            Prefix = \"prefix\"\n        }\n    },\n    ProjectName = \"projectName\",\n    QueuedTimeout = Duration.Minutes(30),\n    Role = role,\n    SecurityGroups = new [] { securityGroup },\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Timeout = Duration.Minutes(30),\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nCache cache;\nIFileSystemLocation fileSystemLocation;\nKey key;\nLogGroup logGroup;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nCommonProjectProps commonProjectProps = CommonProjectProps.builder()\n        .allowAllOutbound(false)\n        .badge(false)\n        .buildSpec(buildSpec)\n        .cache(cache)\n        .checkSecretsInPlainTextEnvVariables(false)\n        .concurrentBuildLimit(123)\n        .description(\"description\")\n        .encryptionKey(key)\n        .environment(BuildEnvironment.builder()\n                .buildImage(buildImage)\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(bucket)\n                        .objectKey(\"objectKey\")\n                        .build())\n                .computeType(ComputeType.SMALL)\n                .environmentVariables(Map.of(\n                        \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                .value(value)\n\n                                // the properties below are optional\n                                .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                .build()))\n                .privileged(false)\n                .build())\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                        .value(value)\n\n                        // the properties below are optional\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .build()))\n        .fileSystemLocations(List.of(fileSystemLocation))\n        .grantReportGroupPermissions(false)\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .enabled(false)\n                        .logGroup(logGroup)\n                        .prefix(\"prefix\")\n                        .build())\n                .s3(S3LoggingOptions.builder()\n                        .bucket(bucket)\n\n                        // the properties below are optional\n                        .enabled(false)\n                        .encrypted(false)\n                        .prefix(\"prefix\")\n                        .build())\n                .build())\n        .projectName(\"projectName\")\n        .queuedTimeout(Duration.minutes(30))\n        .role(role)\n        .securityGroups(List.of(securityGroup))\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .timeout(Duration.minutes(30))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const cache: codebuild.Cache;\ndeclare const fileSystemLocation: codebuild.IFileSystemLocation;\ndeclare const key: kms.Key;\ndeclare const logGroup: logs.LogGroup;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst commonProjectProps: codebuild.CommonProjectProps = {\n  allowAllOutbound: false,\n  badge: false,\n  buildSpec: buildSpec,\n  cache: cache,\n  checkSecretsInPlainTextEnvVariables: false,\n  concurrentBuildLimit: 123,\n  description: 'description',\n  encryptionKey: key,\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  fileSystemLocations: [fileSystemLocation],\n  grantReportGroupPermissions: false,\n  logging: {\n    cloudWatch: {\n      enabled: false,\n      logGroup: logGroup,\n      prefix: 'prefix',\n    },\n    s3: {\n      bucket: bucket,\n\n      // the properties below are optional\n      enabled: false,\n      encrypted: false,\n      prefix: 'prefix',\n    },\n  },\n  projectName: 'projectName',\n  queuedTimeout: cdk.Duration.minutes(30),\n  role: role,\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  timeout: cdk.Duration.minutes(30),\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CommonProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.CommonProjectProps",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.S3LoggingOptions",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const cache: codebuild.Cache;\ndeclare const fileSystemLocation: codebuild.IFileSystemLocation;\ndeclare const key: kms.Key;\ndeclare const logGroup: logs.LogGroup;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonProjectProps: codebuild.CommonProjectProps = {\n  allowAllOutbound: false,\n  badge: false,\n  buildSpec: buildSpec,\n  cache: cache,\n  checkSecretsInPlainTextEnvVariables: false,\n  concurrentBuildLimit: 123,\n  description: 'description',\n  encryptionKey: key,\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  fileSystemLocations: [fileSystemLocation],\n  grantReportGroupPermissions: false,\n  logging: {\n    cloudWatch: {\n      enabled: false,\n      logGroup: logGroup,\n      prefix: 'prefix',\n    },\n    s3: {\n      bucket: bucket,\n\n      // the properties below are optional\n      enabled: false,\n      encrypted: false,\n      prefix: 'prefix',\n    },\n  },\n  projectName: 'projectName',\n  queuedTimeout: cdk.Duration.minutes(30),\n  role: role,\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  timeout: cdk.Duration.minutes(30),\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 15,
        "75": 129,
        "91": 9,
        "125": 1,
        "130": 13,
        "153": 13,
        "169": 13,
        "192": 5,
        "193": 11,
        "194": 12,
        "196": 2,
        "225": 14,
        "242": 14,
        "243": 14,
        "254": 7,
        "255": 7,
        "256": 7,
        "281": 49,
        "290": 1
      },
      "fqnsFingerprint": "787a9d8ff01fe855d64f9daef43b52ec9e0188ee4fb7492ee6259e79b7ffc3fd"
    },
    "c6c72223c89b8ff61c24809b00d1b2662d4c5402eb15b8e7a6b0cb7f189526c3": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# my_security_group: ec2.SecurityGroup\n\npipelines.CodeBuildStep(\"Synth\",\n    # ...standard ShellStep props...\n    commands=[],\n    env={},\n\n    # If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n    # to be the synth step's output.\n    primary_output_directory=\"cdk.out\",\n\n    # Control the name of the project\n    project_name=\"MyProject\",\n\n    # Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n    partial_build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n\n    # Control the build environment\n    build_environment=codebuild.BuildEnvironment(\n        compute_type=codebuild.ComputeType.LARGE\n    ),\n    timeout=Duration.minutes(90),\n\n    # Control Elastic Network Interface creation\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n    security_groups=[my_security_group],\n\n    # Additional policy statements for the execution role\n    role_policy_statements=[\n        iam.PolicyStatement()\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n    // ...standard ShellStep props...\n    Commands = new [] {  },\n    Env = new Dictionary<string, object> { },\n\n    // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n    // to be the synth step's output.\n    PrimaryOutputDirectory = \"cdk.out\",\n\n    // Control the name of the project\n    ProjectName = \"MyProject\",\n\n    // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n    PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n\n    // Control the build environment\n    BuildEnvironment = new BuildEnvironment {\n        ComputeType = ComputeType.LARGE\n    },\n    Timeout = Duration.Minutes(90),\n\n    // Control Elastic Network Interface creation\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n    SecurityGroups = new [] { mySecurityGroup },\n\n    // Additional policy statements for the execution role\n    RolePolicyStatements = new [] {\n        new PolicyStatement(new PolicyStatementProps { }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodeBuildStep.Builder.create(\"Synth\")\n        // ...standard ShellStep props...\n        .commands(List.of())\n        .env(Map.of())\n\n        // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n        // to be the synth step's output.\n        .primaryOutputDirectory(\"cdk.out\")\n\n        // Control the name of the project\n        .projectName(\"MyProject\")\n\n        // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n        .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n\n        // Control the build environment\n        .buildEnvironment(BuildEnvironment.builder()\n                .computeType(ComputeType.LARGE)\n                .build())\n        .timeout(Duration.minutes(90))\n\n        // Control Elastic Network Interface creation\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n        .securityGroups(List.of(mySecurityGroup))\n\n        // Additional policy statements for the execution role\n        .rolePolicyStatements(List.of(\n            PolicyStatement.Builder.create().build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n  timeout: Duration.minutes(90),\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicyStatements: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ComputeType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n  timeout: Duration.minutes(90),\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicyStatements: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 37,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 6,
        "194": 9,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "675d638dddff82b3212be8a16e366c02d8b94f774eb2f9b9a4c4f7423358be4b"
    },
    "18acf8b4e5f782f066a01fb40d5f45a8e42eccd355e783bc9ee182e92dc78d6f": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_docker_registry(\"my-registry/my-repo\",\n        secrets_manager_credentials=secrets\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromDockerRegistry(\"my-registry/my-repo\", new DockerImageOptions {\n        SecretsManagerCredentials = secrets\n    })\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromDockerRegistry(\"my-registry/my-repo\", DockerImageOptions.builder()\n                .secretsManagerCredentials(secrets)\n                .build()))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n    secretsManagerCredentials: secrets,\n  }),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.DockerImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.DockerImageOptions",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromDockerRegistry",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const secrets = secretsmanager.Secret.fromSecretCompleteArn(this, 'MySecrets',\n      `arn:aws:secretsmanager:${this.region}:${this.account}:secret:my-secrets-123456`);\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n          secretsManagerCredentials: secrets,\n        }),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "193": 2,
        "194": 2,
        "196": 1,
        "281": 3
      },
      "fqnsFingerprint": "44036f610e5d14790f8827a7d6c92f8a2aa2d9b77c31bfe9be0619dd21645081"
    },
    "2884707b14332cb4216e0a18e50519097333598d159a2328243278e67e7904ae": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    file_system_locations=[\n        codebuild.FileSystemLocation.efs(\n            identifier=\"myidentifier2\",\n            location=\"myclodation.mydnsroot.com:/loc\",\n            mount_point=\"/media\",\n            mount_options=\"opts\"\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    FileSystemLocations = new [] { FileSystemLocation.Efs(new EfsFileSystemLocationProps {\n        Identifier = \"myidentifier2\",\n        Location = \"myclodation.mydnsroot.com:/loc\",\n        MountPoint = \"/media\",\n        MountOptions = \"opts\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .fileSystemLocations(List.of(FileSystemLocation.efs(EfsFileSystemLocationProps.builder()\n                .identifier(\"myidentifier2\")\n                .location(\"myclodation.mydnsroot.com:/loc\")\n                .mountPoint(\"/media\")\n                .mountOptions(\"opts\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps",
        "@aws-cdk/aws-codebuild.FileSystemLocation",
        "@aws-cdk/aws-codebuild.FileSystemLocation#efs",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "93c44fa161f6c24c65705471b7ab40d9717f1e37d5db9c86c7d2847058c0eb9f"
    },
    "5777b8becfb33de861c6ca35cd8474622936784493a2a10f009397f053d69c10": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.EventAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "8bdcaaaa7811814340ff88c5d831f92c1adbd7ed76eb9c0bdf3e09c9f982a44b"
    },
    "7545771402ae21c234b356db001f464e3d156c3f5466531f384d5a47642684bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nfile_system_config = codebuild.FileSystemConfig(\n    location=codebuild.CfnProject.ProjectFileSystemLocationProperty(\n        identifier=\"identifier\",\n        location=\"location\",\n        mount_point=\"mountPoint\",\n        type=\"type\",\n\n        # the properties below are optional\n        mount_options=\"mountOptions\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nFileSystemConfig fileSystemConfig = new FileSystemConfig {\n    Location = new ProjectFileSystemLocationProperty {\n        Identifier = \"identifier\",\n        Location = \"location\",\n        MountPoint = \"mountPoint\",\n        Type = \"type\",\n\n        // the properties below are optional\n        MountOptions = \"mountOptions\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nFileSystemConfig fileSystemConfig = FileSystemConfig.builder()\n        .location(ProjectFileSystemLocationProperty.builder()\n                .identifier(\"identifier\")\n                .location(\"location\")\n                .mountPoint(\"mountPoint\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .mountOptions(\"mountOptions\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst fileSystemConfig: codebuild.FileSystemConfig = {\n  location: {\n    identifier: 'identifier',\n    location: 'location',\n    mountPoint: 'mountPoint',\n    type: 'type',\n\n    // the properties below are optional\n    mountOptions: 'mountOptions',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.FileSystemConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectFileSystemLocationProperty",
        "@aws-cdk/aws-codebuild.FileSystemConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileSystemConfig: codebuild.FileSystemConfig = {\n  location: {\n    identifier: 'identifier',\n    location: 'location',\n    mountPoint: 'mountPoint',\n    type: 'type',\n\n    // the properties below are optional\n    mountOptions: 'mountOptions',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "4e4e316f657460e5035e55598a47fb6bc858a1cd5f45c7de721e82d337d5b3ed"
    },
    "ca9bebe35945dfb5fbb90230d0ce25deec911036a8ebf74daf5a48a3798ae57c": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    file_system_locations=[\n        codebuild.FileSystemLocation.efs(\n            identifier=\"myidentifier2\",\n            location=\"myclodation.mydnsroot.com:/loc\",\n            mount_point=\"/media\",\n            mount_options=\"opts\"\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    FileSystemLocations = new [] { FileSystemLocation.Efs(new EfsFileSystemLocationProps {\n        Identifier = \"myidentifier2\",\n        Location = \"myclodation.mydnsroot.com:/loc\",\n        MountPoint = \"/media\",\n        MountOptions = \"opts\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .fileSystemLocations(List.of(FileSystemLocation.efs(EfsFileSystemLocationProps.builder()\n                .identifier(\"myidentifier2\")\n                .location(\"myclodation.mydnsroot.com:/loc\")\n                .mountPoint(\"/media\")\n                .mountOptions(\"opts\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.FileSystemLocation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps",
        "@aws-cdk/aws-codebuild.FileSystemLocation",
        "@aws-cdk/aws-codebuild.FileSystemLocation#efs",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "93c44fa161f6c24c65705471b7ab40d9717f1e37d5db9c86c7d2847058c0eb9f"
    },
    "96360de23965e68479554fd5985a0a4ddf971b4880ac5f4843aa54f1baebb0bc": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.FilterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "8bdcaaaa7811814340ff88c5d831f92c1adbd7ed76eb9c0bdf3e09c9f982a44b"
    },
    "a6b70c9e346961e2b697a9d7b6e12a096c592bab8d1771c2bd7882b4f2956bd4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.core as cdk\n\n# secret_value: cdk.SecretValue\n\ngit_hub_enterprise_source_credentials = codebuild.GitHubEnterpriseSourceCredentials(self, \"MyGitHubEnterpriseSourceCredentials\",\n    access_token=secret_value\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK;\n\nSecretValue secretValue;\nGitHubEnterpriseSourceCredentials gitHubEnterpriseSourceCredentials = new GitHubEnterpriseSourceCredentials(this, \"MyGitHubEnterpriseSourceCredentials\", new GitHubEnterpriseSourceCredentialsProps {\n    AccessToken = secretValue\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.core.*;\n\nSecretValue secretValue;\n\nGitHubEnterpriseSourceCredentials gitHubEnterpriseSourceCredentials = GitHubEnterpriseSourceCredentials.Builder.create(this, \"MyGitHubEnterpriseSourceCredentials\")\n        .accessToken(secretValue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\nconst gitHubEnterpriseSourceCredentials = new codebuild.GitHubEnterpriseSourceCredentials(this, 'MyGitHubEnterpriseSourceCredentials', {\n  accessToken: secretValue,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gitHubEnterpriseSourceCredentials = new codebuild.GitHubEnterpriseSourceCredentials(this, 'MyGitHubEnterpriseSourceCredentials', {\n  accessToken: secretValue,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b52f245722cac905b6c8bc12a4f868729080edeeeae80babb5243ab538e1d3c7"
    },
    "4fbdf32dece3ce7e411ceb64e7736180768f3b6338b00ec26d26f2f774d1e8aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.core as cdk\n\n# secret_value: cdk.SecretValue\n\ngit_hub_enterprise_source_credentials_props = codebuild.GitHubEnterpriseSourceCredentialsProps(\n    access_token=secret_value\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK;\n\nSecretValue secretValue;\nGitHubEnterpriseSourceCredentialsProps gitHubEnterpriseSourceCredentialsProps = new GitHubEnterpriseSourceCredentialsProps {\n    AccessToken = secretValue\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.core.*;\n\nSecretValue secretValue;\n\nGitHubEnterpriseSourceCredentialsProps gitHubEnterpriseSourceCredentialsProps = GitHubEnterpriseSourceCredentialsProps.builder()\n        .accessToken(secretValue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\nconst gitHubEnterpriseSourceCredentialsProps: codebuild.GitHubEnterpriseSourceCredentialsProps = {\n  accessToken: secretValue,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceCredentialsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceCredentialsProps",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gitHubEnterpriseSourceCredentialsProps: codebuild.GitHubEnterpriseSourceCredentialsProps = {\n  accessToken: secretValue,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "27a89aa11e6e1756ade4e059227a065b50085d5542e9e3a3490f47437e919952"
    },
    "ed143761e6d8d84888af4bd53e1ee6758eebf11ec7db83a10fac8eb95f0bf98d": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    source=codebuild.Source.git_hub_enterprise(\n        https_clone_url=\"https://my-github-enterprise.com/owner/repo\"\n    ),\n\n    # Enable Docker AND custom caching\n    cache=codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n    # BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Source = Source.GitHubEnterprise(new GitHubEnterpriseSourceProps {\n        HttpsCloneUrl = \"https://my-github-enterprise.com/owner/repo\"\n    }),\n\n    // Enable Docker AND custom caching\n    Cache = Cache.Local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM),\n\n    // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .source(Source.gitHubEnterprise(GitHubEnterpriseSourceProps.builder()\n                .httpsCloneUrl(\"https://my-github-enterprise.com/owner/repo\")\n                .build()))\n\n        // Enable Docker AND custom caching\n        .cache(Cache.local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM))\n\n        // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#local",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.LocalCacheMode",
        "@aws-cdk/aws-codebuild.LocalCacheMode#CUSTOM",
        "@aws-cdk/aws-codebuild.LocalCacheMode#DOCKER_LAYER",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHubEnterprise",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 11,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "bfb7eb368f5a75220bb8dbebeb8022c28815b83a7e7c296116fe05ffbefb3775"
    },
    "09b71c3bd2b9a88f6d645ea70552fdfb3d5713a4275da75849d914c84b3dcc44": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "200ace3c239c5438fe8693860b91dd66bda2d4bc766844a876b8fef26c90ab08": {
      "translations": {
        "python": {
          "source": "codebuild.GitHubSourceCredentials(self, \"CodeBuildGitHubCreds\",\n    access_token=SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GitHubSourceCredentials(this, \"CodeBuildGitHubCreds\", new GitHubSourceCredentialsProps {\n    AccessToken = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GitHubSourceCredentials.Builder.create(this, \"CodeBuildGitHubCreds\")\n        .accessToken(SecretValue.secretsManager(\"my-token\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n// GitHub Enterprise is almost the same,\n// except the class is called GitHubEnterpriseSourceCredentials",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7d62b3da3f8988b84ede71520d35bf12fb7a5e365dfdcc30df01d90e4d04b7e1"
    },
    "3080fca91a720582aadbe4b43f83262942bb6a84d7a7f366e001992059a25888": {
      "translations": {
        "python": {
          "source": "codebuild.GitHubSourceCredentials(self, \"CodeBuildGitHubCreds\",\n    access_token=SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GitHubSourceCredentials(this, \"CodeBuildGitHubCreds\", new GitHubSourceCredentialsProps {\n    AccessToken = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GitHubSourceCredentials.Builder.create(this, \"CodeBuildGitHubCreds\")\n        .accessToken(SecretValue.secretsManager(\"my-token\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n// GitHub Enterprise is almost the same,\n// except the class is called GitHubEnterpriseSourceCredentials",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7d62b3da3f8988b84ede71520d35bf12fb7a5e365dfdcc30df01d90e4d04b7e1"
    },
    "89bdc44abe7e98788b883256a2dd65582c56a502ba6a3f9ba4bd1f991e4a420a": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "8bdcaaaa7811814340ff88c5d831f92c1adbd7ed76eb9c0bdf3e09c9f982a44b"
    },
    "a15d3be37f55c41466cc4f559696c801ff1965c9ce61a88e15b318c60415b219": {
      "translations": {
        "python": {
          "source": "\"awslabs\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "java": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "$": {
          "source": "'awslabs'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps",
          "memberName": "owner"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'awslabs'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c327722c61aab900cfec6c01cf2e971ad96d1096be15c59ba6e5508483325afa": {
      "translations": {
        "python": {
          "source": "\"aws-cdk\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "$": {
          "source": "'aws-cdk'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps",
          "memberName": "repo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'aws-cdk'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "1f576f6e52e44b7129bda7fd4b9aca7a5d28a4685866ce526af4d8ce5bd96548": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9825227c4276b22dcac0360fcf34bd1f50278d874009fab73a5e608957f503dc": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    ),\n\n    # Turn this on because the pipeline uses Docker image assets\n    docker_enabled_for_self_mutation=True\n)\n\npipeline.add_wave(\"MyWave\",\n    post=[\n        pipelines.CodeBuildStep(\"RunApproval\",\n            commands=[\"command-from-image\"],\n            build_environment=codebuild.BuildEnvironment(\n                # The user of a Docker image asset in the pipeline requires turning on\n                # 'dockerEnabledForSelfMutation'.\n                build_image=codebuild.LinuxBuildImage.from_asset(self, \"Image\",\n                    directory=\"./docker-image\"\n                )\n            )\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Turn this on because the pipeline uses Docker image assets\n    DockerEnabledForSelfMutation = true\n});\n\npipeline.AddWave(\"MyWave\", new WaveOptions {\n    Post = new [] {\n        new CodeBuildStep(\"RunApproval\", new CodeBuildStepProps {\n            Commands = new [] { \"command-from-image\" },\n            BuildEnvironment = new BuildEnvironment {\n                // The user of a Docker image asset in the pipeline requires turning on\n                // 'dockerEnabledForSelfMutation'.\n                BuildImage = LinuxBuildImage.FromAsset(this, \"Image\", new DockerImageAssetProps {\n                    Directory = \"./docker-image\"\n                })\n            }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Turn this on because the pipeline uses Docker image assets\n        .dockerEnabledForSelfMutation(true)\n        .build();\n\npipeline.addWave(\"MyWave\", WaveOptions.builder()\n        .post(List.of(\n            CodeBuildStep.Builder.create(\"RunApproval\")\n                    .commands(List.of(\"command-from-image\"))\n                    .buildEnvironment(BuildEnvironment.builder()\n                            // The user of a Docker image asset in the pipeline requires turning on\n                            // 'dockerEnabledForSelfMutation'.\n                            .buildImage(LinuxBuildImage.fromAsset(this, \"Image\", DockerImageAssetProps.builder()\n                                    .directory(\"./docker-image\")\n                                    .build()))\n                            .build())\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LinuxBuildImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "@aws-cdk/pipelines.WaveOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "2cd08867101875b47ce72fe7b457f99aeed0da431250d51f64544387c792e04c"
    },
    "626080556d4abd8d1763413ad515e08d9cba67ef7b7f678f2e4b52deb983c3c3": {
      "translations": {
        "python": {
          "source": "\"aws/codebuild/standard:4.0\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"aws/codebuild/standard:4.0\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws/codebuild/standard:4.0\";",
          "version": "1"
        },
        "$": {
          "source": "'aws/codebuild/standard:4.0'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.LinuxBuildImage",
          "memberName": "fromCodeBuildImageId"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'aws/codebuild/standard:4.0'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7071c4e2c7719bb499bfab37e78b8d236b37bf36778e192b35d54d3be6f93e06": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LinuxGpuBuildImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage#DLC_TENSORFLOW_2_1_0_INFERENCE",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "81d669815e87a50f2460425d69485f7690c2320d03c04e9959119d82ea13b021"
    },
    "2d590b961e78355682c91488c194a03a1bed0b38f18234c609a5d81cee2ced87": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    source=codebuild.Source.git_hub_enterprise(\n        https_clone_url=\"https://my-github-enterprise.com/owner/repo\"\n    ),\n\n    # Enable Docker AND custom caching\n    cache=codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n    # BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Source = Source.GitHubEnterprise(new GitHubEnterpriseSourceProps {\n        HttpsCloneUrl = \"https://my-github-enterprise.com/owner/repo\"\n    }),\n\n    // Enable Docker AND custom caching\n    Cache = Cache.Local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM),\n\n    // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .source(Source.gitHubEnterprise(GitHubEnterpriseSourceProps.builder()\n                .httpsCloneUrl(\"https://my-github-enterprise.com/owner/repo\")\n                .build()))\n\n        // Enable Docker AND custom caching\n        .cache(Cache.local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM))\n\n        // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LocalCacheMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#local",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.LocalCacheMode",
        "@aws-cdk/aws-codebuild.LocalCacheMode#CUSTOM",
        "@aws-cdk/aws-codebuild.LocalCacheMode#DOCKER_LAYER",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHubEnterprise",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 11,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "bfb7eb368f5a75220bb8dbebeb8022c28815b83a7e7c296116fe05ffbefb3775"
    },
    "3e30c10e7c7b1d84d10caa9b0e6248e0815982654679f70ee25fc44909de69bc": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            log_group=logs.LogGroup(self, \"MyLogGroup\")\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            LogGroup = new LogGroup(this, \"MyLogGroup\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .logGroup(new LogGroup(this, \"MyLogGroup\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "384f1e60aef306882cd3df18712bf979764e9a065e4971a1599d4bc336312f35"
    },
    "bcdc90c261155ee4c696ad209e01cc21178a3a27798250604049bb86e9268ca4": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution: cloudfront.Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.PipelineProject"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "4c50776b2b8a029d0e1f0a43e7df9db8431ff8c666da60ce5aa7b9be263351dd"
    },
    "fe67243d1fd6c692f5fca71bcdb30809f7b21aebb073e2e4f3ed41180c0b5f96": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution: cloudfront.Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.PipelineProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "4c50776b2b8a029d0e1f0a43e7df9db8431ff8c666da60ce5aa7b9be263351dd"
    },
    "40a75377090a436bbb91899554738126b0375c7cc3f21880126afd6ade2029f2": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Project"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7b8d430c6c6206ef0b40361479d97e2f3e492ddd6f37e935021e95d62ca6923"
    },
    "5a59d130f733e6e2f0a008233ceaad2371b3658715e976fef15ceb2a7da4b3c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\nproject_notify_on_options = codebuild.ProjectNotifyOnOptions(\n    events=[codebuild.ProjectNotificationEvents.BUILD_FAILED],\n\n    # the properties below are optional\n    detail_type=codestarnotifications.DetailType.BASIC,\n    enabled=False,\n    notification_rule_name=\"notificationRuleName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nProjectNotifyOnOptions projectNotifyOnOptions = new ProjectNotifyOnOptions {\n    Events = new [] { ProjectNotificationEvents.BUILD_FAILED },\n\n    // the properties below are optional\n    DetailType = DetailType.BASIC,\n    Enabled = false,\n    NotificationRuleName = \"notificationRuleName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nProjectNotifyOnOptions projectNotifyOnOptions = ProjectNotifyOnOptions.builder()\n        .events(List.of(ProjectNotificationEvents.BUILD_FAILED))\n\n        // the properties below are optional\n        .detailType(DetailType.BASIC)\n        .enabled(false)\n        .notificationRuleName(\"notificationRuleName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst projectNotifyOnOptions: codebuild.ProjectNotifyOnOptions = {\n  events: [codebuild.ProjectNotificationEvents.BUILD_FAILED],\n\n  // the properties below are optional\n  detailType: codestarnotifications.DetailType.BASIC,\n  enabled: false,\n  notificationRuleName: 'notificationRuleName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ProjectNotifyOnOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ProjectNotificationEvents",
        "@aws-cdk/aws-codebuild.ProjectNotificationEvents#BUILD_FAILED",
        "@aws-cdk/aws-codebuild.ProjectNotifyOnOptions",
        "@aws-cdk/aws-codestarnotifications.DetailType",
        "@aws-cdk/aws-codestarnotifications.DetailType#BASIC"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectNotifyOnOptions: codebuild.ProjectNotifyOnOptions = {\n  events: [codebuild.ProjectNotificationEvents.BUILD_FAILED],\n\n  // the properties below are optional\n  detailType: codestarnotifications.DetailType.BASIC,\n  enabled: false,\n  notificationRuleName: 'notificationRuleName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "2e569d301999a6b5376150d4089d828380d1770a67078f01d55ead964b098256"
    },
    "41d3d3c017e451967a878e04156362cae86e4d1af9665bb7407873fa060caa54": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7b8d430c6c6206ef0b40361479d97e2f3e492ddd6f37e935021e95d62ca6923"
    },
    "939953e2f2ffb1ffc68312e08925d831b47f8b510bab928d0eedcf6803b4e3ba": {
      "translations": {
        "python": {
          "source": "# source: codebuild.Source\n\n\n# create a new ReportGroup\nreport_group = codebuild.ReportGroup(self, \"ReportGroup\")\n\nproject = codebuild.Project(self, \"Project\",\n    source=source,\n    build_spec=codebuild.BuildSpec.from_object({\n        # ...\n        \"reports\": {\n            report_group.report_group_arn: {\n                \"files\": \"**/*\",\n                \"base-directory\": \"build/test-results\"\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = new Project(this, \"Project\", new ProjectProps {\n    Source = source,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        // ...\n        { \"reports\", new Dictionary<string, IDictionary<string, string>> {\n            { reportGroup.ReportGroupArn, new Struct {\n                Files = \"**/*\",\n                Base-directory = \"build/test-results\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = Project.Builder.create(this, \"Project\")\n        .source(source)\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                // ...\n                \"reports\", Map.of(\n                        reportGroup.getReportGroupArn(), Map.of(\n                                \"files\", \"**/*\",\n                                \"base-directory\", \"build/test-results\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ReportGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.ReportGroup",
        "@aws-cdk/aws-codebuild.ReportGroup#reportGroupArn",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "130": 1,
        "153": 1,
        "154": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b76a761311ed8fd751f63219486e89eddcc4d7ce90d59c9150862cc2014a2b00"
    },
    "04778932811d8bda297de8f4e822acd8f39855c02f51bd8b356d10013769c911": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# bucket: s3.Bucket\n\nreport_group_props = codebuild.ReportGroupProps(\n    export_bucket=bucket,\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    report_group_name=\"reportGroupName\",\n    zip_export=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nBucket bucket;\nReportGroupProps reportGroupProps = new ReportGroupProps {\n    ExportBucket = bucket,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    ReportGroupName = \"reportGroupName\",\n    ZipExport = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nBucket bucket;\n\nReportGroupProps reportGroupProps = ReportGroupProps.builder()\n        .exportBucket(bucket)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .reportGroupName(\"reportGroupName\")\n        .zipExport(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\nconst reportGroupProps: codebuild.ReportGroupProps = {\n  exportBucket: bucket,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  reportGroupName: 'reportGroupName',\n  zipExport: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ReportGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ReportGroupProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst reportGroupProps: codebuild.ReportGroupProps = {\n  exportBucket: bucket,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  reportGroupName: 'reportGroupName',\n  zipExport: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3607ce0ec815445318606bb6c9acec4a35cce318bab4d6775b0b6d294eb40cc8"
    },
    "6428292198afbec28f5e8a455c9033f34f7a770a16a1667e8585e5a842948bc5": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.S3ArtifactsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7b8d430c6c6206ef0b40361479d97e2f3e492ddd6f37e935021e95d62ca6923"
    },
    "4be538ea75c1428ae9ea2380ca42c85c8741d74da1ec15cfce6c1bfa80417f8b": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        s3=codebuild.S3LoggingOptions(\n            bucket=s3.Bucket(self, \"LogBucket\")\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        S3 = new S3LoggingOptions {\n            Bucket = new Bucket(this, \"LogBucket\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .s3(S3LoggingOptions.builder()\n                        .bucket(new Bucket(this, \"LogBucket\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.S3LoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3LoggingOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "ad19390ed5a557488df8dc7e295a6aee676687e53176faf1569017f145a82531"
    },
    "f2ad5c99f0143e9b4eb842b779f78562469af045ccd611a2bb40a1cdc9c134e7": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\n\ncodebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.s3(\n        bucket=bucket,\n        path=\"path/to/file.zip\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nnew Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.S3(new S3SourceProps {\n        Bucket = bucket,\n        Path = \"path/to/file.zip\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nProject.Builder.create(this, \"MyProject\")\n        .source(Source.s3(S3SourceProps.builder()\n                .bucket(bucket)\n                .path(\"path/to/file.zip\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.S3SourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3SourceProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#s3",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "1b00f72afe977d545327b5367decfee0ad4d8d39da16baf5f9aaefd9a15369da"
    },
    "89370d2ec947c944fb40f097910ba8136ff47ccebf874925ac4c2fe62be9b571": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Source"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "8bdcaaaa7811814340ff88c5d831f92c1adbd7ed76eb9c0bdf3e09c9f982a44b"
    },
    "e8360b99b52f3f82e33eeb63479415e3dc7a3a2e8505890c55ab41f862d6977e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nsource_config = codebuild.SourceConfig(\n    source_property=codebuild.CfnProject.SourceProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        auth=codebuild.CfnProject.SourceAuthProperty(\n            type=\"type\",\n\n            # the properties below are optional\n            resource=\"resource\"\n        ),\n        build_spec=\"buildSpec\",\n        build_status_config=codebuild.CfnProject.BuildStatusConfigProperty(\n            context=\"context\",\n            target_url=\"targetUrl\"\n        ),\n        git_clone_depth=123,\n        git_submodules_config=codebuild.CfnProject.GitSubmodulesConfigProperty(\n            fetch_submodules=False\n        ),\n        insecure_ssl=False,\n        location=\"location\",\n        report_build_status=False,\n        source_identifier=\"sourceIdentifier\"\n    ),\n\n    # the properties below are optional\n    build_triggers=codebuild.CfnProject.ProjectTriggersProperty(\n        build_type=\"buildType\",\n        filter_groups=[[codebuild.CfnProject.WebhookFilterProperty(\n            pattern=\"pattern\",\n            type=\"type\",\n\n            # the properties below are optional\n            exclude_matched_pattern=False\n        )]],\n        webhook=False\n    ),\n    source_version=\"sourceVersion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nSourceConfig sourceConfig = new SourceConfig {\n    SourceProperty = new SourceProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Auth = new SourceAuthProperty {\n            Type = \"type\",\n\n            // the properties below are optional\n            Resource = \"resource\"\n        },\n        BuildSpec = \"buildSpec\",\n        BuildStatusConfig = new BuildStatusConfigProperty {\n            Context = \"context\",\n            TargetUrl = \"targetUrl\"\n        },\n        GitCloneDepth = 123,\n        GitSubmodulesConfig = new GitSubmodulesConfigProperty {\n            FetchSubmodules = false\n        },\n        InsecureSsl = false,\n        Location = \"location\",\n        ReportBuildStatus = false,\n        SourceIdentifier = \"sourceIdentifier\"\n    },\n\n    // the properties below are optional\n    BuildTriggers = new ProjectTriggersProperty {\n        BuildType = \"buildType\",\n        FilterGroups = new [] { new [] { new WebhookFilterProperty {\n            Pattern = \"pattern\",\n            Type = \"type\",\n\n            // the properties below are optional\n            ExcludeMatchedPattern = false\n        } } },\n        Webhook = false\n    },\n    SourceVersion = \"sourceVersion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nSourceConfig sourceConfig = SourceConfig.builder()\n        .sourceProperty(SourceProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .auth(SourceAuthProperty.builder()\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .resource(\"resource\")\n                        .build())\n                .buildSpec(\"buildSpec\")\n                .buildStatusConfig(BuildStatusConfigProperty.builder()\n                        .context(\"context\")\n                        .targetUrl(\"targetUrl\")\n                        .build())\n                .gitCloneDepth(123)\n                .gitSubmodulesConfig(GitSubmodulesConfigProperty.builder()\n                        .fetchSubmodules(false)\n                        .build())\n                .insecureSsl(false)\n                .location(\"location\")\n                .reportBuildStatus(false)\n                .sourceIdentifier(\"sourceIdentifier\")\n                .build())\n\n        // the properties below are optional\n        .buildTriggers(ProjectTriggersProperty.builder()\n                .buildType(\"buildType\")\n                .filterGroups(List.of(List.of(WebhookFilterProperty.builder()\n                        .pattern(\"pattern\")\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .excludeMatchedPattern(false)\n                        .build())))\n                .webhook(false)\n                .build())\n        .sourceVersion(\"sourceVersion\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst sourceConfig: codebuild.SourceConfig = {\n  sourceProperty: {\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  },\n\n  // the properties below are optional\n  buildTriggers: {\n    buildType: 'buildType',\n    filterGroups: [[{\n      pattern: 'pattern',\n      type: 'type',\n\n      // the properties below are optional\n      excludeMatchedPattern: false,\n    }]],\n    webhook: false,\n  },\n  sourceVersion: 'sourceVersion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.SourceConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CfnProject.ProjectTriggersProperty",
        "@aws-cdk/aws-codebuild.CfnProject.SourceProperty",
        "@aws-cdk/aws-codebuild.SourceConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceConfig: codebuild.SourceConfig = {\n  sourceProperty: {\n    type: 'type',\n\n    // the properties below are optional\n    auth: {\n      type: 'type',\n\n      // the properties below are optional\n      resource: 'resource',\n    },\n    buildSpec: 'buildSpec',\n    buildStatusConfig: {\n      context: 'context',\n      targetUrl: 'targetUrl',\n    },\n    gitCloneDepth: 123,\n    gitSubmodulesConfig: {\n      fetchSubmodules: false,\n    },\n    insecureSsl: false,\n    location: 'location',\n    reportBuildStatus: false,\n    sourceIdentifier: 'sourceIdentifier',\n  },\n\n  // the properties below are optional\n  buildTriggers: {\n    buildType: 'buildType',\n    filterGroups: [[{\n      pattern: 'pattern',\n      type: 'type',\n\n      // the properties below are optional\n      excludeMatchedPattern: false,\n    }]],\n    webhook: false,\n  },\n  sourceVersion: 'sourceVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 28,
        "91": 5,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "097843b674f474b784a21d37071f5ae5850ac468310f354fb3de6d90c88a8858"
    },
    "e70ef809a6994d41a22ccd8239591625ba8cf52eac0ce8eb9745286611e850f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\n\nsource_props = codebuild.SourceProps(\n    identifier=\"identifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\n\nSourceProps sourceProps = new SourceProps {\n    Identifier = \"identifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\n\nSourceProps sourceProps = SourceProps.builder()\n        .identifier(\"identifier\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nconst sourceProps: codebuild.SourceProps = {\n  identifier: 'identifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.SourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.SourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceProps: codebuild.SourceProps = {\n  identifier: 'identifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "95e189bcf46c5d89c3f6f6932299cc4dbe3575e4a07666cde47974bb33b47356"
    },
    "b89337cd317ad525ae7940d93d21103525a290ea94f4262febe86b26f471f412": {
      "translations": {
        "python": {
          "source": "# project: codebuild.Project\n\niam.PermissionsBoundary.of(project).apply(codebuild.UntrustedCodeBoundaryPolicy(self, \"Boundary\"))",
          "version": "2"
        },
        "csharp": {
          "source": "Project project;\n\nPermissionsBoundary.Of(project).Apply(new UntrustedCodeBoundaryPolicy(this, \"Boundary\"));",
          "version": "1"
        },
        "java": {
          "source": "Project project;\n\nPermissionsBoundary.of(project).apply(new UntrustedCodeBoundaryPolicy(this, \"Boundary\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.Project;\niam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicy",
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.PermissionsBoundary",
        "@aws-cdk/aws-iam.PermissionsBoundary#apply",
        "@aws-cdk/aws-iam.PermissionsBoundary#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\niam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "1189dbf7bca50653d8d288c56d30491b718a35c9ddb852293207de73ce9325bc"
    },
    "b72474b8b44f968fffebe1a7c0c50a309fdd56c1e2b4b068c9408183bc56b8ec": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_iam as iam\n\n# policy_statement: iam.PolicyStatement\n\nuntrusted_code_boundary_policy_props = codebuild.UntrustedCodeBoundaryPolicyProps(\n    additional_statements=[policy_statement],\n    managed_policy_name=\"managedPolicyName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.IAM;\n\nPolicyStatement policyStatement;\n\nUntrustedCodeBoundaryPolicyProps untrustedCodeBoundaryPolicyProps = new UntrustedCodeBoundaryPolicyProps {\n    AdditionalStatements = new [] { policyStatement },\n    ManagedPolicyName = \"managedPolicyName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.iam.*;\n\nPolicyStatement policyStatement;\n\nUntrustedCodeBoundaryPolicyProps untrustedCodeBoundaryPolicyProps = UntrustedCodeBoundaryPolicyProps.builder()\n        .additionalStatements(List.of(policyStatement))\n        .managedPolicyName(\"managedPolicyName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const policyStatement: iam.PolicyStatement;\nconst untrustedCodeBoundaryPolicyProps: codebuild.UntrustedCodeBoundaryPolicyProps = {\n  additionalStatements: [policyStatement],\n  managedPolicyName: 'managedPolicyName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const policyStatement: iam.PolicyStatement;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst untrustedCodeBoundaryPolicyProps: codebuild.UntrustedCodeBoundaryPolicyProps = {\n  additionalStatements: [policyStatement],\n  managedPolicyName: 'managedPolicyName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "74e9472f893190a20061024533054d962e17985a7916acee725be19cbc400c67"
    },
    "a1f02cfc253beb6a8c7d21034bceced0fd0ec32d8cbcc6a993290fe9a1614892": {
      "translations": {
        "python": {
          "source": "# ecr_repository: ecr.Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.WindowsBuildImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6342616eeabbee4e2fcb1d68a1ec3450d2df019df354ee23da20306214ccc511"
    },
    "c2dc8c60a9e1614473ea8b65730dfc9dca1e369ee49e4be6d0e400516b6afcbc": {
      "translations": {
        "python": {
          "source": "# ecr_repository: ecr.Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.WindowsImageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6342616eeabbee4e2fcb1d68a1ec3450d2df019df354ee23da20306214ccc511"
    }
  }
}
