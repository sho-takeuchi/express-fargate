{
  "version": "2",
  "toolVersion": "1.52.1",
  "snippets": {
    "f6ea0048a366623c2e752257843f3884180c6a15cc1ad99027f6dc44282da348": {
      "translations": {
        "python": {
          "source": "repo = codecommit.Repository(self, \"Repository\",\n    repository_name=\"MyRepositoryName\",\n    description=\"Some description.\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo = new Repository(this, \"Repository\", new RepositoryProps {\n    RepositoryName = \"MyRepositoryName\",\n    Description = \"Some description.\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo = Repository.Builder.create(this, \"Repository\")\n        .repositoryName(\"MyRepositoryName\")\n        .description(\"Some description.\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const repo = new codecommit.Repository(this, 'Repository', {\n  repositoryName: 'MyRepositoryName',\n  description: 'Some description.', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 21
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst repo = new codecommit.Repository(this, 'Repository', {\n  repositoryName: 'MyRepositoryName',\n  description: 'Some description.', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b833de88b81d27b7eee792c461fbf4fed9ad59bde64ad34cc1c5c701af883999"
    },
    "d5f53f6efcd1ee183906ed4d30d4e9abc3421fd6c380f37effe8200dd536d1b4": {
      "translations": {
        "python": {
          "source": "# repo: codecommit.Repository\n\n\n# trigger is established for all repository actions on all branches by default.\nrepo.notify(\"arn:aws:sns:*:123456789012:my_topic\")",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo;\n\n\n// trigger is established for all repository actions on all branches by default.\nrepo.Notify(\"arn:aws:sns:*:123456789012:my_topic\");",
          "version": "1"
        },
        "java": {
          "source": "Repository repo;\n\n\n// trigger is established for all repository actions on all branches by default.\nrepo.notify(\"arn:aws:sns:*:123456789012:my_topic\");",
          "version": "1"
        },
        "$": {
          "source": "declare const repo: codecommit.Repository;\n\n// trigger is established for all repository actions on all branches by default.\nrepo.notify('arn:aws:sns:*:123456789012:my_topic');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 33
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Repository#notify"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// trigger is established for all repository actions on all branches by default.\nrepo.notify('arn:aws:sns:*:123456789012:my_topic');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "2eb245b7215d036ee48b8d62812d5ba0fe54497c858e43eaba14d5282e79534e"
    },
    "1670b01b02899ca623003bae0655750ace8ca329ea65ee8f75694c8511653db7": {
      "translations": {
        "python": {
          "source": "repo = codecommit.Repository(self, \"Repository\",\n    repository_name=\"MyRepositoryName\",\n    code=codecommit.Code.from_directory(path.join(__dirname, \"directory/\"), \"develop\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo = new Repository(this, \"Repository\", new RepositoryProps {\n    RepositoryName = \"MyRepositoryName\",\n    Code = Code.FromDirectory(Join(__dirname, \"directory/\"), \"develop\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo = Repository.Builder.create(this, \"Repository\")\n        .repositoryName(\"MyRepositoryName\")\n        .code(Code.fromDirectory(join(__dirname, \"directory/\"), \"develop\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const repo = new codecommit.Repository(this, 'Repository', {\n  repositoryName: 'MyRepositoryName',\n  code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 47
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Code",
        "@aws-cdk/aws-codecommit.Code#fromDirectory",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst repo = new codecommit.Repository(this, 'Repository', {\n  repositoryName: 'MyRepositoryName',\n  code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5e28e6addf330c4e9a3b6353d4426d93e10c5a8428c860166138b2143583342e"
    },
    "dee3450f9274a71d07f0fc1c90ef5de83d4b87eb65cda33bb0ce27098bc601e1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_sns as sns\nimport aws_cdk.aws_events_targets as targets\n\n# repo: codecommit.Repository\n# project: codebuild.PipelineProject\n# my_topic: sns.Topic\n\n\n# starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.on_commit(\"CommitToMaster\",\n    target=targets.CodeBuildProject(project),\n    branches=[\"master\"]\n)\n\n# publishes a message to an Amazon SNS topic when a comment is made on a pull request\nrule = repo.on_comment_on_pull_request(\"CommentOnPullRequest\",\n    target=targets.SnsTopic(my_topic)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository repo;\nPipelineProject project;\nTopic myTopic;\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.OnCommit(\"CommitToMaster\", new OnCommitOptions {\n    Target = new CodeBuildProject(project),\n    Branches = new [] { \"master\" }\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nRule rule = repo.OnCommentOnPullRequest(\"CommentOnPullRequest\", new OnEventOptions {\n    Target = new SnsTopic(myTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository repo;\nPipelineProject project;\nTopic myTopic;\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit(\"CommitToMaster\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .branches(List.of(\"master\"))\n        .build());\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nRule rule = repo.onCommentOnPullRequest(\"CommentOnPullRequest\", OnEventOptions.builder()\n        .target(new SnsTopic(myTopic))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as sns from '@aws-cdk/aws-sns';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\ndeclare const project: codebuild.PipelineProject;\ndeclare const myTopic: sns.Topic;\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit('CommitToMaster', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master'],\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nconst rule = repo.onCommentOnPullRequest('CommentOnPullRequest', {\n  target: new targets.SnsTopic(myTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 60
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\ndeclare const project: codebuild.PipelineProject;\ndeclare const myTopic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit('CommitToMaster', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master'],\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nconst rule = repo.onCommentOnPullRequest('CommentOnPullRequest', {\n  target: new targets.SnsTopic(myTopic),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "602826fea5fc5d244af856bec18187dc405db1a79791f27780ffe39d8f2a17df"
    },
    "467253dcd32fbc9b86c42f10ef9b0134a5de52a57b10b9cbcbc6be9a506de2a9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_chatbot as chatbot\n\n# repository: codecommit.Repository\n\ntarget = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\nrule = repository.notify_on_pull_request_created(\"NotifyOnPullRequestCreated\", target)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Chatbot;\n\nRepository repository;\n\nSlackChannelConfiguration target = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\nINotificationRule rule = repository.NotifyOnPullRequestCreated(\"NotifyOnPullRequestCreated\", target);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.chatbot.*;\n\nRepository repository;\n\nSlackChannelConfiguration target = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\nINotificationRule rule = repository.notifyOnPullRequestCreated(\"NotifyOnPullRequestCreated\", target);",
          "version": "1"
        },
        "$": {
          "source": "import * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const repository: codecommit.Repository;\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\nconst rule = repository.notifyOnPullRequestCreated('NotifyOnPullRequestCreated', target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 85
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codestarnotifications.INotificationRule",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const repository: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\nconst rule = repository.notifyOnPullRequestCreated('NotifyOnPullRequestCreated', target);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "751a85fa8eeb9dc3396abed42a23acde81355e53b539013adf1b9579827da5f9"
    },
    "f0646789fa4e5715e9f905ed10cd6807159e3ddb1cd0aeb3770d1e53d48adb95": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\ncfn_repository = codecommit.CfnRepository(self, \"MyCfnRepository\",\n    repository_name=\"repositoryName\",\n\n    # the properties below are optional\n    code=codecommit.CfnRepository.CodeProperty(\n        s3=codecommit.CfnRepository.S3Property(\n            bucket=\"bucket\",\n            key=\"key\",\n\n            # the properties below are optional\n            object_version=\"objectVersion\"\n        ),\n\n        # the properties below are optional\n        branch_name=\"branchName\"\n    ),\n    repository_description=\"repositoryDescription\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    triggers=[codecommit.CfnRepository.RepositoryTriggerProperty(\n        destination_arn=\"destinationArn\",\n        events=[\"events\"],\n        name=\"name\",\n\n        # the properties below are optional\n        branches=[\"branches\"],\n        custom_data=\"customData\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nCfnRepository cfnRepository = new CfnRepository(this, \"MyCfnRepository\", new CfnRepositoryProps {\n    RepositoryName = \"repositoryName\",\n\n    // the properties below are optional\n    Code = new CodeProperty {\n        S3 = new S3Property {\n            Bucket = \"bucket\",\n            Key = \"key\",\n\n            // the properties below are optional\n            ObjectVersion = \"objectVersion\"\n        },\n\n        // the properties below are optional\n        BranchName = \"branchName\"\n    },\n    RepositoryDescription = \"repositoryDescription\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Triggers = new [] { new RepositoryTriggerProperty {\n        DestinationArn = \"destinationArn\",\n        Events = new [] { \"events\" },\n        Name = \"name\",\n\n        // the properties below are optional\n        Branches = new [] { \"branches\" },\n        CustomData = \"customData\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nCfnRepository cfnRepository = CfnRepository.Builder.create(this, \"MyCfnRepository\")\n        .repositoryName(\"repositoryName\")\n\n        // the properties below are optional\n        .code(CodeProperty.builder()\n                .s3(S3Property.builder()\n                        .bucket(\"bucket\")\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .objectVersion(\"objectVersion\")\n                        .build())\n\n                // the properties below are optional\n                .branchName(\"branchName\")\n                .build())\n        .repositoryDescription(\"repositoryDescription\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .triggers(List.of(RepositoryTriggerProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .events(List.of(\"events\"))\n                .name(\"name\")\n\n                // the properties below are optional\n                .branches(List.of(\"branches\"))\n                .customData(\"customData\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst cfnRepository = new codecommit.CfnRepository(this, 'MyCfnRepository', {\n  repositoryName: 'repositoryName',\n\n  // the properties below are optional\n  code: {\n    s3: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      objectVersion: 'objectVersion',\n    },\n\n    // the properties below are optional\n    branchName: 'branchName',\n  },\n  repositoryDescription: 'repositoryDescription',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  triggers: [{\n    destinationArn: 'destinationArn',\n    events: ['events'],\n    name: 'name',\n\n    // the properties below are optional\n    branches: ['branches'],\n    customData: 'customData',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.CfnRepository"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.CfnRepository",
        "@aws-cdk/aws-codecommit.CfnRepositoryProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRepository = new codecommit.CfnRepository(this, 'MyCfnRepository', {\n  repositoryName: 'repositoryName',\n\n  // the properties below are optional\n  code: {\n    s3: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      objectVersion: 'objectVersion',\n    },\n\n    // the properties below are optional\n    branchName: 'branchName',\n  },\n  repositoryDescription: 'repositoryDescription',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  triggers: [{\n    destinationArn: 'destinationArn',\n    events: ['events'],\n    name: 'name',\n\n    // the properties below are optional\n    branches: ['branches'],\n    customData: 'customData',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 21,
        "104": 1,
        "192": 4,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "f612dd36de9a87e0218090aafbfbb731a3c2c1a3d4804619892068b85531fc90"
    },
    "86931f672f93a75340e7fe11e96aa4c0f9d655abb2aa7f713525f0982d0f80f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\ncode_property = codecommit.CfnRepository.CodeProperty(\n    s3=codecommit.CfnRepository.S3Property(\n        bucket=\"bucket\",\n        key=\"key\",\n\n        # the properties below are optional\n        object_version=\"objectVersion\"\n    ),\n\n    # the properties below are optional\n    branch_name=\"branchName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nCodeProperty codeProperty = new CodeProperty {\n    S3 = new S3Property {\n        Bucket = \"bucket\",\n        Key = \"key\",\n\n        // the properties below are optional\n        ObjectVersion = \"objectVersion\"\n    },\n\n    // the properties below are optional\n    BranchName = \"branchName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nCodeProperty codeProperty = CodeProperty.builder()\n        .s3(S3Property.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n\n                // the properties below are optional\n                .objectVersion(\"objectVersion\")\n                .build())\n\n        // the properties below are optional\n        .branchName(\"branchName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst codeProperty: codecommit.CfnRepository.CodeProperty = {\n  s3: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n\n  // the properties below are optional\n  branchName: 'branchName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.CfnRepository.CodeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.CfnRepository.CodeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeProperty: codecommit.CfnRepository.CodeProperty = {\n  s3: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n\n  // the properties below are optional\n  branchName: 'branchName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d28e29802e3f0064660d398f5cbd43f5a77b9f7a25fb0f39ef3a0279b7ca7602"
    },
    "09d32d63ab451eb6482eaac9ccd7785f434fc8b14c10ae47a58ad08b89d312c9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\nrepository_trigger_property = codecommit.CfnRepository.RepositoryTriggerProperty(\n    destination_arn=\"destinationArn\",\n    events=[\"events\"],\n    name=\"name\",\n\n    # the properties below are optional\n    branches=[\"branches\"],\n    custom_data=\"customData\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nRepositoryTriggerProperty repositoryTriggerProperty = new RepositoryTriggerProperty {\n    DestinationArn = \"destinationArn\",\n    Events = new [] { \"events\" },\n    Name = \"name\",\n\n    // the properties below are optional\n    Branches = new [] { \"branches\" },\n    CustomData = \"customData\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nRepositoryTriggerProperty repositoryTriggerProperty = RepositoryTriggerProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .events(List.of(\"events\"))\n        .name(\"name\")\n\n        // the properties below are optional\n        .branches(List.of(\"branches\"))\n        .customData(\"customData\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst repositoryTriggerProperty: codecommit.CfnRepository.RepositoryTriggerProperty = {\n  destinationArn: 'destinationArn',\n  events: ['events'],\n  name: 'name',\n\n  // the properties below are optional\n  branches: ['branches'],\n  customData: 'customData',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.CfnRepository.RepositoryTriggerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.CfnRepository.RepositoryTriggerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryTriggerProperty: codecommit.CfnRepository.RepositoryTriggerProperty = {\n  destinationArn: 'destinationArn',\n  events: ['events'],\n  name: 'name',\n\n  // the properties below are optional\n  branches: ['branches'],\n  customData: 'customData',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fc3a30172752e531a45d03c83702b3624ff422f19ed0a46b38cb8a8dd71ec62c"
    },
    "47a29036dd0ed2f359778427ac73f2af8cff268543bd3e2a32788e28289f84ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\ns3_property = codecommit.CfnRepository.S3Property(\n    bucket=\"bucket\",\n    key=\"key\",\n\n    # the properties below are optional\n    object_version=\"objectVersion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nS3Property s3Property = new S3Property {\n    Bucket = \"bucket\",\n    Key = \"key\",\n\n    // the properties below are optional\n    ObjectVersion = \"objectVersion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nS3Property s3Property = S3Property.builder()\n        .bucket(\"bucket\")\n        .key(\"key\")\n\n        // the properties below are optional\n        .objectVersion(\"objectVersion\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst s3Property: codecommit.CfnRepository.S3Property = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  objectVersion: 'objectVersion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.CfnRepository.S3Property"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.CfnRepository.S3Property"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3Property: codecommit.CfnRepository.S3Property = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  objectVersion: 'objectVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7b784c1f45229c553fcf05b2787c234e9db77f70e0e923fec2c023fdce172580"
    },
    "624064bae5632353098c6ac079a0ab63b23aa27d63bc665776a8ab2f515ca5ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\ncfn_repository_props = codecommit.CfnRepositoryProps(\n    repository_name=\"repositoryName\",\n\n    # the properties below are optional\n    code=codecommit.CfnRepository.CodeProperty(\n        s3=codecommit.CfnRepository.S3Property(\n            bucket=\"bucket\",\n            key=\"key\",\n\n            # the properties below are optional\n            object_version=\"objectVersion\"\n        ),\n\n        # the properties below are optional\n        branch_name=\"branchName\"\n    ),\n    repository_description=\"repositoryDescription\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    triggers=[codecommit.CfnRepository.RepositoryTriggerProperty(\n        destination_arn=\"destinationArn\",\n        events=[\"events\"],\n        name=\"name\",\n\n        # the properties below are optional\n        branches=[\"branches\"],\n        custom_data=\"customData\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nCfnRepositoryProps cfnRepositoryProps = new CfnRepositoryProps {\n    RepositoryName = \"repositoryName\",\n\n    // the properties below are optional\n    Code = new CodeProperty {\n        S3 = new S3Property {\n            Bucket = \"bucket\",\n            Key = \"key\",\n\n            // the properties below are optional\n            ObjectVersion = \"objectVersion\"\n        },\n\n        // the properties below are optional\n        BranchName = \"branchName\"\n    },\n    RepositoryDescription = \"repositoryDescription\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Triggers = new [] { new RepositoryTriggerProperty {\n        DestinationArn = \"destinationArn\",\n        Events = new [] { \"events\" },\n        Name = \"name\",\n\n        // the properties below are optional\n        Branches = new [] { \"branches\" },\n        CustomData = \"customData\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nCfnRepositoryProps cfnRepositoryProps = CfnRepositoryProps.builder()\n        .repositoryName(\"repositoryName\")\n\n        // the properties below are optional\n        .code(CodeProperty.builder()\n                .s3(S3Property.builder()\n                        .bucket(\"bucket\")\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .objectVersion(\"objectVersion\")\n                        .build())\n\n                // the properties below are optional\n                .branchName(\"branchName\")\n                .build())\n        .repositoryDescription(\"repositoryDescription\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .triggers(List.of(RepositoryTriggerProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .events(List.of(\"events\"))\n                .name(\"name\")\n\n                // the properties below are optional\n                .branches(List.of(\"branches\"))\n                .customData(\"customData\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst cfnRepositoryProps: codecommit.CfnRepositoryProps = {\n  repositoryName: 'repositoryName',\n\n  // the properties below are optional\n  code: {\n    s3: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      objectVersion: 'objectVersion',\n    },\n\n    // the properties below are optional\n    branchName: 'branchName',\n  },\n  repositoryDescription: 'repositoryDescription',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  triggers: [{\n    destinationArn: 'destinationArn',\n    events: ['events'],\n    name: 'name',\n\n    // the properties below are optional\n    branches: ['branches'],\n    customData: 'customData',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.CfnRepositoryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.CfnRepositoryProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRepositoryProps: codecommit.CfnRepositoryProps = {\n  repositoryName: 'repositoryName',\n\n  // the properties below are optional\n  code: {\n    s3: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      objectVersion: 'objectVersion',\n    },\n\n    // the properties below are optional\n    branchName: 'branchName',\n  },\n  repositoryDescription: 'repositoryDescription',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  triggers: [{\n    destinationArn: 'destinationArn',\n    events: ['events'],\n    name: 'name',\n\n    // the properties below are optional\n    branches: ['branches'],\n    customData: 'customData',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 21,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "916ba0c9da1dbacff21992ecabcc492a74e78dffd131ca01e041154216ce898a"
    },
    "24504d4ee329b8fe79e9c46ea5b7e534780ff02ebb3dbfcd7174daf142f4b102": {
      "translations": {
        "python": {
          "source": "repo = codecommit.Repository(self, \"Repository\",\n    repository_name=\"MyRepositoryName\",\n    code=codecommit.Code.from_directory(path.join(__dirname, \"directory/\"), \"develop\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo = new Repository(this, \"Repository\", new RepositoryProps {\n    RepositoryName = \"MyRepositoryName\",\n    Code = Code.FromDirectory(Join(__dirname, \"directory/\"), \"develop\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo = Repository.Builder.create(this, \"Repository\")\n        .repositoryName(\"MyRepositoryName\")\n        .code(Code.fromDirectory(join(__dirname, \"directory/\"), \"develop\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const repo = new codecommit.Repository(this, 'Repository', {\n  repositoryName: 'MyRepositoryName',\n  code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.Code"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Code",
        "@aws-cdk/aws-codecommit.Code#fromDirectory",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst repo = new codecommit.Repository(this, 'Repository', {\n  repositoryName: 'MyRepositoryName',\n  code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5e28e6addf330c4e9a3b6353d4426d93e10c5a8428c860166138b2143583342e"
    },
    "2ec8598c70c8b02ecdef594d10eabf09accea679260a9cffe5d80f81377b0f85": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\ncode_config = codecommit.CodeConfig(\n    code=codecommit.CfnRepository.CodeProperty(\n        s3=codecommit.CfnRepository.S3Property(\n            bucket=\"bucket\",\n            key=\"key\",\n\n            # the properties below are optional\n            object_version=\"objectVersion\"\n        ),\n\n        # the properties below are optional\n        branch_name=\"branchName\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nCodeConfig codeConfig = new CodeConfig {\n    Code = new CodeProperty {\n        S3 = new S3Property {\n            Bucket = \"bucket\",\n            Key = \"key\",\n\n            // the properties below are optional\n            ObjectVersion = \"objectVersion\"\n        },\n\n        // the properties below are optional\n        BranchName = \"branchName\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nCodeConfig codeConfig = CodeConfig.builder()\n        .code(CodeProperty.builder()\n                .s3(S3Property.builder()\n                        .bucket(\"bucket\")\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .objectVersion(\"objectVersion\")\n                        .build())\n\n                // the properties below are optional\n                .branchName(\"branchName\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst codeConfig: codecommit.CodeConfig = {\n  code: {\n    s3: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      objectVersion: 'objectVersion',\n    },\n\n    // the properties below are optional\n    branchName: 'branchName',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.CodeConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.CfnRepository.CodeProperty",
        "@aws-cdk/aws-codecommit.CodeConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeConfig: codecommit.CodeConfig = {\n  code: {\n    s3: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      objectVersion: 'objectVersion',\n    },\n\n    // the properties below are optional\n    branchName: 'branchName',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "53c39f6a4a80fa367e64abe824ed706335aecadecaf9df1f210a844a9b56921e"
    },
    "03c9fcf61c96128516f5cd9f70e4fec218888ba32ff20b2690ccf6bdfc623969": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\n# repo: codecommit.Repository\n\nmy_topic = sns.Topic(self, \"Topic\")\n\nrepo.on_commit(\"OnCommit\",\n    target=targets.SnsTopic(my_topic)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository repo;\n\nTopic myTopic = new Topic(this, \"Topic\");\n\nrepo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new SnsTopic(myTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository repo;\n\nTopic myTopic = new Topic(this, \"Topic\");\n\nrepo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new SnsTopic(myTopic))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\nconst myTopic = new sns.Topic(this, 'Topic');\n\nrepo.onCommit('OnCommit', {\n  target: new targets.SnsTopic(myTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.OnCommitOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myTopic = new sns.Topic(this, 'Topic');\n\nrepo.onCommit('OnCommit', {\n  target: new targets.SnsTopic(myTopic),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7370e93d3c02054021aef1f75b82e7bb5f4199ae672c4044a9b3d21203b2954e"
    },
    "dae5de66e11ed08ce334d2b9b85d8b3ee6fa58278004eeacbfa679350b50ecb5": {
      "translations": {
        "python": {
          "source": "# project: codebuild.PipelineProject\n\nrepository = codecommit.Repository(self, \"MyRepository\",\n    repository_name=\"MyRepository\"\n)\nproject = codebuild.PipelineProject(self, \"MyProject\")\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repository,\n    output=source_output\n)\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    outputs=[codepipeline.Artifact()],  # optional\n    execute_batch_build=True,  # optional, defaults to false\n    combine_batch_build_artifacts=True\n)\n\ncodepipeline.Pipeline(self, \"MyPipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Source\",\n        actions=[source_action]\n    ), codepipeline.StageProps(\n        stage_name=\"Build\",\n        actions=[build_action]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project;\n\nRepository repository = new Repository(this, \"MyRepository\", new RepositoryProps {\n    RepositoryName = \"MyRepository\"\n});\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repository,\n    Output = sourceOutput\n});\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    Outputs = new [] { new Artifact() },  // optional\n    ExecuteBatchBuild = true,  // optional, defaults to false\n    CombineBatchBuildArtifacts = true\n});\n\nnew Pipeline(this, \"MyPipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Source\",\n        Actions = new [] { sourceAction }\n    }, new StageProps {\n        StageName = \"Build\",\n        Actions = new [] { buildAction }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\n\nRepository repository = Repository.Builder.create(this, \"MyRepository\")\n        .repositoryName(\"MyRepository\")\n        .build();\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repository)\n        .output(sourceOutput)\n        .build();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .outputs(List.of(new Artifact())) // optional\n        .executeBatchBuild(true) // optional, defaults to false\n        .combineBatchBuildArtifacts(true)\n        .build();\n\nPipeline.Builder.create(this, \"MyPipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Source\")\n                .actions(List.of(sourceAction))\n                .build(), StageProps.builder()\n                .stageName(\"Build\")\n                .actions(List.of(buildAction))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\nconst repository = new codecommit.Repository(this, 'MyRepository', {\n  repositoryName: 'MyRepository',\n});\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository,\n  output: sourceOutput,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  outputs: [new codepipeline.Artifact()], // optional\n  executeBatchBuild: true, // optional, defaults to false\n  combineBatchBuildArtifacts: true, // optional, defaults to false\n});\n\nnew codepipeline.Pipeline(this, 'MyPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [sourceAction],\n    },\n    {\n      stageName: 'Build',\n      actions: [buildAction],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.Repository"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst repository = new codecommit.Repository(this, 'MyRepository', {\n  repositoryName: 'MyRepository',\n});\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository,\n  output: sourceOutput,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  outputs: [new codepipeline.Artifact()], // optional\n  executeBatchBuild: true, // optional, defaults to false\n  combineBatchBuildArtifacts: true, // optional, defaults to false\n});\n\nnew codepipeline.Pipeline(this, 'MyPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [sourceAction],\n    },\n    {\n      stageName: 'Build',\n      actions: [buildAction],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 41,
        "104": 3,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 6,
        "194": 7,
        "197": 7,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 13,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "8ff560d68c8dcd28f283b3a4f3f39c72382248ae5016bf4b94eab7424e740262"
    },
    "9942b967d380c435a5ee3de1bd8a29d47ebf507d0359a809f42410228d85981a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\nrepository_notify_on_options = codecommit.RepositoryNotifyOnOptions(\n    events=[codecommit.RepositoryNotificationEvents.COMMIT_COMMENT],\n\n    # the properties below are optional\n    detail_type=codestarnotifications.DetailType.BASIC,\n    enabled=False,\n    notification_rule_name=\"notificationRuleName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nRepositoryNotifyOnOptions repositoryNotifyOnOptions = new RepositoryNotifyOnOptions {\n    Events = new [] { RepositoryNotificationEvents.COMMIT_COMMENT },\n\n    // the properties below are optional\n    DetailType = DetailType.BASIC,\n    Enabled = false,\n    NotificationRuleName = \"notificationRuleName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nRepositoryNotifyOnOptions repositoryNotifyOnOptions = RepositoryNotifyOnOptions.builder()\n        .events(List.of(RepositoryNotificationEvents.COMMIT_COMMENT))\n\n        // the properties below are optional\n        .detailType(DetailType.BASIC)\n        .enabled(false)\n        .notificationRuleName(\"notificationRuleName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst repositoryNotifyOnOptions: codecommit.RepositoryNotifyOnOptions = {\n  events: [codecommit.RepositoryNotificationEvents.COMMIT_COMMENT],\n\n  // the properties below are optional\n  detailType: codestarnotifications.DetailType.BASIC,\n  enabled: false,\n  notificationRuleName: 'notificationRuleName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.RepositoryNotifyOnOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.RepositoryNotificationEvents",
        "@aws-cdk/aws-codecommit.RepositoryNotificationEvents#COMMIT_COMMENT",
        "@aws-cdk/aws-codecommit.RepositoryNotifyOnOptions",
        "@aws-cdk/aws-codestarnotifications.DetailType",
        "@aws-cdk/aws-codestarnotifications.DetailType#BASIC"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryNotifyOnOptions: codecommit.RepositoryNotifyOnOptions = {\n  events: [codecommit.RepositoryNotificationEvents.COMMIT_COMMENT],\n\n  // the properties below are optional\n  detailType: codestarnotifications.DetailType.BASIC,\n  enabled: false,\n  notificationRuleName: 'notificationRuleName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "55be59c06a808ffb7af2cd09289e62fdc59385a2452fe6b28fde6ef0ae2e8dad"
    },
    "27a5dad99daaed042a5f2c73b76ec91ee203bc49c0998f52ad1efb20cc10bbb5": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.RepositoryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "afc817865ed5175278fcb5a07311fc38cb1074752371649844c850516dc6ca19"
    },
    "a25f757e3f3a2c1913087b6ebf0a02a0ea758e6b34480d11ac71c611881f32b5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codecommit as codecommit\n\nrepository_trigger_options = codecommit.RepositoryTriggerOptions(\n    branches=[\"branches\"],\n    custom_data=\"customData\",\n    events=[codecommit.RepositoryEventTrigger.ALL],\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeCommit;\n\nRepositoryTriggerOptions repositoryTriggerOptions = new RepositoryTriggerOptions {\n    Branches = new [] { \"branches\" },\n    CustomData = \"customData\",\n    Events = new [] { RepositoryEventTrigger.ALL },\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codecommit.*;\n\nRepositoryTriggerOptions repositoryTriggerOptions = RepositoryTriggerOptions.builder()\n        .branches(List.of(\"branches\"))\n        .customData(\"customData\")\n        .events(List.of(RepositoryEventTrigger.ALL))\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nconst repositoryTriggerOptions: codecommit.RepositoryTriggerOptions = {\n  branches: ['branches'],\n  customData: 'customData',\n  events: [codecommit.RepositoryEventTrigger.ALL],\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.RepositoryTriggerOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.RepositoryEventTrigger",
        "@aws-cdk/aws-codecommit.RepositoryEventTrigger#ALL",
        "@aws-cdk/aws-codecommit.RepositoryTriggerOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryTriggerOptions: codecommit.RepositoryTriggerOptions = {\n  branches: ['branches'],\n  customData: 'customData',\n  events: [codecommit.RepositoryEventTrigger.ALL],\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ca14dfab491ffc4951965169d32b9e52b2f5aeab4a36770970b6e913e3d0c13b"
    }
  }
}
