{
  "version": "2",
  "toolVersion": "1.52.1",
  "snippets": {
    "6e1c9eb280219f1a4b21dd7ad1e78c28e52c220040110bfeb61020f0f38d3ecd": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.ApplicationLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedEc2Service loadBalancedEcsService = new ApplicationLoadBalancedEc2Service(this, \"Service\", new ApplicationLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedEc2Service loadBalancedEcsService = ApplicationLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 26
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "152a4787f8f826f02c63d608fab3e40712f7dbb7b93b4b43ca7220dde74b46d8"
    },
    "1866c43683a953b462d06a2ebc4c96591675ef84d6905da699e925c99917801c": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nload_balanced_fargate_service.target_group.configure_health_check(\n    path=\"/custom-health-path\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nloadBalancedFargateService.TargetGroup.ConfigureHealthCheck(new HealthCheck {\n    Path = \"/custom-health-path\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nloadBalancedFargateService.targetGroup.configureHealthCheck(HealthCheck.builder()\n        .path(\"/custom-health-path\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nloadBalancedFargateService.targetGroup.configureHealthCheck({\n  path: \"/custom-health-path\",\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 44
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBase#targetGroup",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetGroupBase#configureHealthCheck",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nloadBalancedFargateService.targetGroup.configureHealthCheck({\n  path: \"/custom-health-path\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ab8cf572c7bf83cca27233b623002ffd4d31e6f996c13158bd69a2039f814ff"
    },
    "afea3800479e31eb9ce7d9410df9b547504936a2c8a1d05fe6bb5a5b85f4d54c": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.ApplicationMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = new ApplicationMultipleTargetGroupsEc2Service(this, \"Service\", new ApplicationMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = ApplicationMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 81
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9d4b8c30332b128d432dd55135c3bfca5ecefa37d29c1108ee701549f82ae3d4"
    },
    "6b343790a077486bd3b1e4672fdf78745d7b784b1c5d7a45a39d6888c2ae71fc": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationMultipleTargetGroupsFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsFargateService loadBalancedFargateService = new ApplicationMultipleTargetGroupsFargateService(this, \"Service\", new ApplicationMultipleTargetGroupsFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsFargateService loadBalancedFargateService = ApplicationMultipleTargetGroupsFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 3,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "92b28a42495a35abdbd78ee3a31cb96e137db05e980ff756197e0173e1ab18ad"
    },
    "60d5eef05c72e362e52b8382cc8f935fea9302187a9fbee0df81c1fcd0e7a35a": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.NetworkLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = new NetworkLoadBalancedEc2Service(this, \"Service\", new NetworkLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = NetworkLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 134
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "93af421ddab775e7565289e42074d8d99ef48ec203e44d05996745b500169e63"
    },
    "f4803733f89ac9f5823ddd1cca4796a1af745a703909504df2bc585f9adc009f": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.NetworkLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedFargateService loadBalancedFargateService = new NetworkLoadBalancedFargateService(this, \"Service\", new NetworkLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedFargateService loadBalancedFargateService = NetworkLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "bf655357e393858283cd108a03901e08b759accb707d421459242b9545c29980"
    },
    "c570cb291cb81c5a064c11eed33f30d4669349eaf7a4cf8d0e21b96bf0bc3f78": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.NetworkMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = new NetworkMultipleTargetGroupsEc2Service(this, \"Service\", new NetworkMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = NetworkMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 174
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "69b9c9aa3d72621966942b639b7a15ab445fd83c267c4fec426c23409c7de504"
    },
    "93110f6a6a96ce30a7978c9b728d57e0453b41f885148f78b9ceb74b2613ffe8": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.NetworkMultipleTargetGroupsFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsFargateService loadBalancedFargateService = new NetworkMultipleTargetGroupsFargateService(this, \"Service\", new NetworkMultipleTargetGroupsFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsFargateService loadBalancedFargateService = NetworkMultipleTargetGroupsFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 216
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateService",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e7e93cf0cc69c11bc0af8e0727cf3204ae9b3dd719ee11126f8d63fc91143dcb"
    },
    "29ff3b632be9e3c9ae029ff5d5c81ca7c9ee5a19074029d2f9ae2decb1d86388": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nqueue_processing_ec2_service = ecs_patterns.QueueProcessingEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    command=[\"-c\", \"4\", \"amazon.com\"],\n    enable_logging=False,\n    desired_task_count=2,\n    environment={\n        \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n        \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n    },\n    max_scaling_capacity=5,\n    container_name=\"test\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nQueueProcessingEc2Service queueProcessingEc2Service = new QueueProcessingEc2Service(this, \"Service\", new QueueProcessingEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    Command = new [] { \"-c\", \"4\", \"amazon.com\" },\n    EnableLogging = false,\n    DesiredTaskCount = 2,\n    Environment = new Dictionary<string, string> {\n        { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n        { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n    },\n    MaxScalingCapacity = 5,\n    ContainerName = \"test\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nQueueProcessingEc2Service queueProcessingEc2Service = QueueProcessingEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .command(List.of(\"-c\", \"4\", \"amazon.com\"))\n        .enableLogging(false)\n        .desiredTaskCount(2)\n        .environment(Map.of(\n                \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n        .maxScalingCapacity(5)\n        .containerName(\"test\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 262
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2Service",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 20,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fe8656ce673d5abd1cd94f499cfc93707b46bef4750e9f4c8ae85f2220966a2"
    },
    "ade78fda30bd04f3e7fcad5043724fb22073616d72b01dfe563be14375bd19f3": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    command=[\"-c\", \"4\", \"amazon.com\"],\n    enable_logging=False,\n    desired_task_count=2,\n    environment={\n        \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n        \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n    },\n    max_scaling_capacity=5,\n    container_name=\"test\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    Command = new [] { \"-c\", \"4\", \"amazon.com\" },\n    EnableLogging = false,\n    DesiredTaskCount = 2,\n    Environment = new Dictionary<string, string> {\n        { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n        { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n    },\n    MaxScalingCapacity = 5,\n    ContainerName = \"test\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .command(List.of(\"-c\", \"4\", \"amazon.com\"))\n        .enableLogging(false)\n        .desiredTaskCount(2)\n        .environment(Map.of(\n                \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n        .maxScalingCapacity(5)\n        .containerName(\"test\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 282
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 20,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9428d312dfb9bd38d943e0b7f5176d00122e7f8b9e221f7e34e45148d71dc103"
    },
    "580112aaa8c08e261fe761a071a6905746313835a8b40510f0247e9bc870ac36": {
      "translations": {
        "python": {
          "source": "# Instantiate an Amazon EC2 Task to run at a scheduled interval\n# cluster: ecs.Cluster\n\necs_scheduled_task = ecs_patterns.ScheduledEc2Task(self, \"ScheduledTask\",\n    cluster=cluster,\n    scheduled_ec2_task_image_options=ecsPatterns.ScheduledEc2TaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=256,\n        environment={\"name\": \"TRIGGER\", \"value\": \"CloudWatch Events\"}\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    enabled=True,\n    rule_name=\"sample-scheduled-task-rule\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = new ScheduledEc2Task(this, \"ScheduledTask\", new ScheduledEc2TaskProps {\n    Cluster = cluster,\n    ScheduledEc2TaskImageOptions = new ScheduledEc2TaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 256,\n        Environment = new Dictionary<string, string> { { \"name\", \"TRIGGER\" }, { \"value\", \"CloudWatch Events\" } }\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    Enabled = true,\n    RuleName = \"sample-scheduled-task-rule\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = ScheduledEc2Task.Builder.create(this, \"ScheduledTask\")\n        .cluster(cluster)\n        .scheduledEc2TaskImageOptions(ScheduledEc2TaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(256)\n                .environment(Map.of(\"name\", \"TRIGGER\", \"value\", \"CloudWatch Events\"))\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .enabled(true)\n        .ruleName(\"sample-scheduled-task-rule\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 308
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 22,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b52d9b1bf5968ab37b0842a5266b0ccf14a26310d5362d556d7cfe3486ef51b8"
    },
    "ab18f858225572a3e96ecf10e3aa2d5bb63b84ae37b7f7d554ffe4c4cc7226fb": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 326
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "133f19a7c58c0f8b9b7c08c1bae8b73bc7a3b5eccc7c000892275fe8a58220e7"
    },
    "021ff6e4fc21cd734d40283075e9f92a6751d504c0e23dda845366bc8173b1c2": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone\nfrom aws_cdk.aws_certificatemanager import Certificate\nfrom aws_cdk.aws_elasticloadbalancingv2 import SslPolicy\n\n# vpc: ec2.Vpc\n# cluster: ecs.Cluster\n\n\ndomain_zone = HostedZone.from_lookup(self, \"Zone\", domain_name=\"example.com\")\ncertificate = Certificate.from_certificate_arn(self, \"Cert\", \"arn:aws:acm:us-east-1:123456:certificate/abcdefg\")\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    vpc=vpc,\n    cluster=cluster,\n    certificate=certificate,\n    ssl_policy=SslPolicy.RECOMMENDED,\n    domain_name=\"api.example.com\",\n    domain_zone=domain_zone,\n    redirect_hTTP=True,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nVpc vpc;\nCluster cluster;\n\n\nIHostedZone domainZone = HostedZone.FromLookup(this, \"Zone\", new HostedZoneProviderProps { DomainName = \"example.com\" });\nICertificate certificate = Certificate.FromCertificateArn(this, \"Cert\", \"arn:aws:acm:us-east-1:123456:certificate/abcdefg\");\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Vpc = vpc,\n    Cluster = cluster,\n    Certificate = certificate,\n    SslPolicy = SslPolicy.RECOMMENDED,\n    DomainName = \"api.example.com\",\n    DomainZone = domainZone,\n    RedirectHTTP = true,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.certificatemanager.Certificate;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.SslPolicy;\n\nVpc vpc;\nCluster cluster;\n\n\nIHostedZone domainZone = HostedZone.fromLookup(this, \"Zone\", HostedZoneProviderProps.builder().domainName(\"example.com\").build());\nICertificate certificate = Certificate.fromCertificateArn(this, \"Cert\", \"arn:aws:acm:us-east-1:123456:certificate/abcdefg\");\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .cluster(cluster)\n        .certificate(certificate)\n        .sslPolicy(SslPolicy.RECOMMENDED)\n        .domainName(\"api.example.com\")\n        .domainZone(domainZone)\n        .redirectHTTP(true)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone } from '@aws-cdk/aws-route53';\nimport { Certificate } from '@aws-cdk/aws-certificatemanager';\nimport { SslPolicy } from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst domainZone = HostedZone.fromLookup(this, 'Zone', { domainName: 'example.com' });\nconst certificate = Certificate.fromCertificateArn(this, 'Cert', 'arn:aws:acm:us-east-1:123456:certificate/abcdefg');\n\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  cluster,\n  certificate,\n  sslPolicy: SslPolicy.RECOMMENDED,\n  domainName: 'api.example.com',\n  domainZone,\n  redirectHTTP: true,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 345
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy#RECOMMENDED",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone } from '@aws-cdk/aws-route53';\nimport { Certificate } from '@aws-cdk/aws-certificatemanager';\nimport { SslPolicy } from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst domainZone = HostedZone.fromLookup(this, 'Zone', { domainName: 'example.com' });\nconst certificate = Certificate.fromCertificateArn(this, 'Cert', 'arn:aws:acm:us-east-1:123456:certificate/abcdefg');\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  cluster,\n  certificate,\n  sslPolicy: SslPolicy.RECOMMENDED,\n  domainName: 'api.example.com',\n  domainZone,\n  redirectHTTP: true,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 33,
        "104": 3,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 3,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "23e76b28a50f9e8e7ef90af98f46b6f7ddc8b546cce884da6e8844fadfc821cd"
    },
    "0cb21c3a8659b5db091782b4021a99058fa61bccf9690b31b7172faec7818b5c": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=5,\n    max_capacity=20\n)\n\nscalable_target.scale_on_schedule(\"DaytimeScaleDown\",\n    schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=1\n)\n\nscalable_target.scale_on_schedule(\"EveningRushScaleUp\",\n    schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    min_capacity=10\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 5,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnSchedule(\"DaytimeScaleDown\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 1\n});\n\nscalableTarget.ScaleOnSchedule(\"EveningRushScaleUp\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MinCapacity = 10\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(5)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnSchedule(\"DaytimeScaleDown\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(1)\n        .build());\n\nscalableTarget.scaleOnSchedule(\"EveningRushScaleUp\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .minCapacity(10)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnSchedule",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 8,
        "75": 39,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 7,
        "194": 11,
        "196": 6,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1986590fcd588c26c7eeccc2fcc7a29684cacbe5c47a510e100691379b9a6813"
    },
    "5127240dffae62f37068cacfa4840d2df63bd0f15b6145ea7e3652cb3b1c9a57": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "75554f50e57c79caa0034a5b007518fd9d18bbcbb7ac3651397bb331694bfd76"
    },
    "d229e0b48d9c874d2093f2c6c5aac3f0e76f8be451b827a35ef720735ec7d727": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.CODE_DEPLOY\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.CODE_DEPLOY\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.CODE_DEPLOY)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 429
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#CODE_DEPLOY",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "46f7bae8b8f04902f47b0cdaf31d712e3c80c3afa96969d4780884240b3030c0"
    },
    "3a2f8a5f972967dcb4f27b7f3d0e2f960d0cd7835368811cd104c84f919155a1": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nservice = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    circuit_breaker=ecs.DeploymentCircuitBreaker(rollback=True)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService service = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    CircuitBreaker = new DeploymentCircuitBreaker { Rollback = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService service = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .circuitBreaker(DeploymentCircuitBreaker.builder().rollback(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst service = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  circuitBreaker: { rollback: true },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 452
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  circuitBreaker: { rollback: true },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 17,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "de7bd1edd9ef0566e157ffeb2acdf87197750c55f2d242dbb6aeb173a6f86d21"
    },
    "60e7e196f24f7e35c7e729484d289d1e5f6eeb6020ecf7a11e9a712c2bffdc30": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    command=[\"-c\", \"4\", \"amazon.com\"],\n    enable_logging=False,\n    desired_task_count=2,\n    environment={},\n    max_scaling_capacity=5,\n    max_healthy_percent=200,\n    min_healthy_percent=66\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    Command = new [] { \"-c\", \"4\", \"amazon.com\" },\n    EnableLogging = false,\n    DesiredTaskCount = 2,\n    Environment = new Dictionary<string, object> { },\n    MaxScalingCapacity = 5,\n    MaxHealthyPercent = 200,\n    MinHealthyPercent = 66\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .command(List.of(\"-c\", \"4\", \"amazon.com\"))\n        .enableLogging(false)\n        .desiredTaskCount(2)\n        .environment(Map.of())\n        .maxScalingCapacity(5)\n        .maxHealthyPercent(200)\n        .minHealthyPercent(66)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {},\n  maxScalingCapacity: 5,\n  maxHealthyPercent: 200,\n  minHealthyPercent: 66,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 468
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {},\n  maxScalingCapacity: 5,\n  maxHealthyPercent: 200,\n  minHealthyPercent: 66,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 5,
        "75": 19,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9428d312dfb9bd38d943e0b7f5176d00122e7f8b9e221f7e34e45148d71dc103"
    },
    "c334a5de3a24682350eeb94ca92e108721f52402bfe31de890c97ed8ca470080": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# security_group: ec2.SecurityGroup\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    security_groups=[security_group],\n    task_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.ISOLATED)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    SecurityGroups = new [] { securityGroup },\n    TaskSubnets = new SubnetSelection { SubnetType = SubnetType.ISOLATED }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .securityGroups(List.of(securityGroup))\n        .taskSubnets(SubnetSelection.builder().subnetType(SubnetType.ISOLATED).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  securityGroups: [securityGroup],\n  taskSubnets: { subnetType: ec2.SubnetType.ISOLATED },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 486
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  securityGroups: [securityGroup],\n  taskSubnets: { subnetType: ec2.SubnetType.ISOLATED },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5f6bbb6b7808c77c35f329e7aba6b371c091152c629faf2f24378ed5c5f9e1aa"
    },
    "f25e925532117e67306dae2536e486c7815d4693666abbc7e1663d9dfd16ec4e": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    assign_public_ip=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    AssignPublicIp = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .assignPublicIp(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  assignPublicIp: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 500
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  assignPublicIp: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9dcec81f5c47665852c2dc7ca8a8853915ad951d3705b97e007e540a45113418"
    },
    "a9a4d34a8f17d7a65d1af756011f2a8a542417f0e935d9d00e4967add28f0e09": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    max_receive_count=42,\n    retention_period=Duration.days(7),\n    visibility_timeout=Duration.minutes(5)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    MaxReceiveCount = 42,\n    RetentionPeriod = Duration.Days(7),\n    VisibilityTimeout = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .maxReceiveCount(42)\n        .retentionPeriod(Duration.days(7))\n        .visibilityTimeout(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  maxReceiveCount: 42,\n  retentionPeriod: Duration.days(7),\n  visibilityTimeout: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 512
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  maxReceiveCount: 42,\n  retentionPeriod: Duration.days(7),\n  visibilityTimeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "345c04224ea045896f23ab0673e7660ee9ca62368c509c2776242f862e1c78ec"
    },
    "b6dcdfd2fc34cbafaa5bf169b320127d43c9e1c80f5f8b7357df38f5398e6581": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\ncluster.enable_fargate_capacity_providers()\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.EnableFargateCapacityProviders();\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.enableFargateCapacityProviders();\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 526
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.Cluster#enableFargateCapacityProviders",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "03c4fddc147ae932e2d6599ac331acccefa07c72134b10eca7fd91cc45d398cc"
    },
    "bb5b205cee0f71c379620dec112a8236ac16e1c5ba1233ce72a7811acc595f05": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# security_group: ec2.SecurityGroup\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    health_check=ecs.HealthCheck(\n        command=[\"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\"],\n        # the properties below are optional\n        interval=Duration.minutes(30),\n        retries=123,\n        start_period=Duration.minutes(30),\n        timeout=Duration.minutes(30)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    HealthCheck = new HealthCheck {\n        Command = new [] { \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" },\n        // the properties below are optional\n        Interval = Duration.Minutes(30),\n        Retries = 123,\n        StartPeriod = Duration.Minutes(30),\n        Timeout = Duration.Minutes(30)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .healthCheck(HealthCheck.builder()\n                .command(List.of(\"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\"))\n                // the properties below are optional\n                .interval(Duration.minutes(30))\n                .retries(123)\n                .startPeriod(Duration.minutes(30))\n                .timeout(Duration.minutes(30))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  healthCheck: {\n    command: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ],\n    // the properties below are optional\n    interval: Duration.minutes(30),\n    retries: 123,\n    startPeriod: Duration.minutes(30),\n    timeout: Duration.minutes(30),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 549
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.HealthCheck",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  healthCheck: {\n    command: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ],\n    // the properties below are optional\n    interval: Duration.minutes(30),\n    retries: 123,\n    startPeriod: Duration.minutes(30),\n    timeout: Duration.minutes(30),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 4,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "df9a2982156174b2a03326f63a8ef64d0dd0a3b50f5782dbfae092f5c2cbcb8c"
    },
    "03dbd39bcf393f5d909b180bbd7853e5e8c78883f11a95e0174d005d23645b3a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n\nvpc = ec2.Vpc(self, \"Vpc\", max_azs=1)\ncluster = ecs.Cluster(self, \"EcsCluster\", vpc=vpc)\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"asg\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2()\n)\ncapacity_provider = ecs.AsgCapacityProvider(self, \"provider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\n\nVpc vpc = new Vpc(this, \"Vpc\", new VpcProps { MaxAzs = 1 });\nCluster cluster = new Cluster(this, \"EcsCluster\", new ClusterProps { Vpc = vpc });\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"asg\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = EcsOptimizedImage.AmazonLinux2()\n});\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"provider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\n\nVpc vpc = Vpc.Builder.create(this, \"Vpc\").maxAzs(1).build();\nCluster cluster = Cluster.Builder.create(this, \"EcsCluster\").vpc(vpc).build();\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"asg\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .build();\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"provider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'asg', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n});\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'provider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 569
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'asg', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n});\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'provider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 47,
        "104": 5,
        "192": 1,
        "193": 6,
        "194": 17,
        "196": 4,
        "197": 5,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "9a82a2e1ab6ffe2b52c8ec97662d89fcca31dc643e2478b3450908037b45bd60"
    },
    "1c7c5fbcf77c0138c653fde3b83529ff2ab1572d40de8c966881dee06ddc892f": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    task_subnets=ec2.SubnetSelection(\n        subnets=[ec2.Subnet.from_subnet_id(self, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TaskSubnets = new SubnetSelection {\n        Subnets = new [] { Subnet.FromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .taskSubnets(SubnetSelection.builder()\n                .subnets(List.of(Subnet.fromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 598
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5cd57b23a77d8f929872cd94659196f9150798e162252069cba660db079fa0fd"
    },
    "49b2deff4589084ae7e3ed6237350369554a9f6672c3ce4f11e1bbd619d2b6f7": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.VERSION1_4\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.VERSION1_4\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.VERSION1_4)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.VERSION1_4,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 616
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#VERSION1_4",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.VERSION1_4,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5329e932fca9766bd02f552ce30084a7785b6423cd343c9cff6b39eaa90ca396"
    },
    "bc578f9fc1ecbe9c1d1c8e05fadb187eb03bd95c1678491a482f4d21dabd996c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\", max_azs=1)\ncluster = ecs.Cluster(self, \"EcsCluster\", vpc=vpc)\nsecurity_group = ec2.SecurityGroup(self, \"SG\", vpc=vpc)\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\", new VpcProps { MaxAzs = 1 });\nCluster cluster = new Cluster(this, \"EcsCluster\", new ClusterProps { Vpc = vpc });\nSecurityGroup securityGroup = new SecurityGroup(this, \"SG\", new SecurityGroupProps { Vpc = vpc });\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    SecurityGroups = new [] { securityGroup }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"Vpc\").maxAzs(1).build();\nCluster cluster = Cluster.Builder.create(this, \"EcsCluster\").vpc(vpc).build();\nSecurityGroup securityGroup = SecurityGroup.Builder.create(this, \"SG\").vpc(vpc).build();\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 631
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 28,
        "104": 4,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 6,
        "282": 3
      },
      "fqnsFingerprint": "ca0efd4a2a703f11bf9cca8dd71473b14c01e7469b5033618b521cc36b06a4f6"
    },
    "5cc84db7e8795cac06af9fe11e350b8320b04fe33a7e7790b52e0c5a2ea1bb72": {
      "translations": {
        "python": {
          "source": "# stack: Stack\n\nstack.node.set_context(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, True)",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack;\n\nstack.Node.SetContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\nstack.node.setContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 662
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#setContext"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "75": 7,
        "106": 1,
        "130": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ab8dea1941fdf8549918b32ae69a03bf3bcc3d563292c5943ef986ddc93dba6"
    },
    "4e1fce661fc6a8de9e5253d7a122f880be70aea3b2e8b5526a1fa43ab0e075b8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import App, Stack\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.cx_api as cxapi\nimport path as path\n\napp = App()\n\nstack = Stack(app, \"aws-ecs-patterns-queue\")\nstack.node.set_context(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, True)\n\nvpc = ec2.Vpc(stack, \"VPC\",\n    max_azs=2\n)\n\necs_patterns.QueueProcessingFargateService(stack, \"QueueProcessingService\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.AssetImage(path.join(__dirname, \"..\", \"sqs-reader\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.CXAPI;\nusing Path;\n\nApp app = new App();\n\nStack stack = new Stack(app, \"aws-ecs-patterns-queue\");\nstack.Node.SetContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nVpc vpc = new Vpc(stack, \"VPC\", new VpcProps {\n    MaxAzs = 2\n});\n\nnew QueueProcessingFargateService(stack, \"QueueProcessingService\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = new AssetImage(Join(__dirname, \"..\", \"sqs-reader\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.cxapi.*;\nimport path.*;\n\nApp app = new App();\n\nStack stack = new Stack(app, \"aws-ecs-patterns-queue\");\nstack.node.setContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nVpc vpc = Vpc.Builder.create(stack, \"VPC\")\n        .maxAzs(2)\n        .build();\n\nQueueProcessingFargateService.Builder.create(stack, \"QueueProcessingService\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(new AssetImage(join(__dirname, \"..\", \"sqs-reader\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 669
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.AssetImage",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#setContext",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 33,
        "106": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 5,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 6,
        "255": 6,
        "256": 5,
        "257": 1,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "62dc890541c70f91259253f6b37361b803662209ea884984f063f997578c38e8"
    },
    "44a8b0b8616c84f6b9d5eeea7f815a4e4f4dd2df1150abb7f7897e25b365b9ff": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# vpc: ec2.Vpc\n\nservice = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    vpc=vpc,\n    desired_count=1,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        docker_labels={\n            \"application.label.one\": \"first_label\",\n            \"application.label.two\": \"second_label\"\n        }\n    )\n)\n\nservice.task_definition.add_container(\"Sidecar\",\n    image=ecs.ContainerImage.from_registry(\"example/metrics-sidecar\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nVpc vpc;\n\nApplicationLoadBalancedFargateService service = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    Vpc = vpc,\n    DesiredCount = 1,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        DockerLabels = new Dictionary<string, string> {\n            { \"application.label.one\", \"first_label\" },\n            { \"application.label.two\", \"second_label\" }\n        }\n    }\n});\n\nservice.TaskDefinition.AddContainer(\"Sidecar\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example/metrics-sidecar\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nVpc vpc;\n\nApplicationLoadBalancedFargateService service = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .vpc(vpc)\n        .desiredCount(1)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .dockerLabels(Map.of(\n                        \"application.label.one\", \"first_label\",\n                        \"application.label.two\", \"second_label\"))\n                .build())\n        .build();\n\nservice.taskDefinition.addContainer(\"Sidecar\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example/metrics-sidecar\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  vpc,\n  desiredCount: 1,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n    dockerLabels: {\n      'application.label.one': 'first_label',\n      'application.label.two': 'second_label',\n    },\n  },\n});\n\nservice.taskDefinition.addContainer('Sidecar', {\n  image: ecs.ContainerImage.fromRegistry('example/metrics-sidecar'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 697
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#taskDefinition",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  vpc,\n  desiredCount: 1,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n    dockerLabels: {\n      'application.label.one': 'first_label',\n      'application.label.two': 'second_label',\n    },\n  },\n});\n\nservice.taskDefinition.addContainer('Sidecar', {\n  image: ecs.ContainerImage.fromRegistry('example/metrics-sidecar'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "016a901f4ee6942cbc51513e6c3cbaaf2466d54e0619ed6b49548c00f394fabc"
    },
    "0534a19a317883a7cee35802266b97f3003559000a44192d19cb28e2e4acde92": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    task_subnets=ec2.SubnetSelection(\n        subnets=[ec2.Subnet.from_subnet_id(self, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")]\n    ),\n    load_balancer_name=\"application-lb-name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TaskSubnets = new SubnetSelection {\n        Subnets = new [] { Subnet.FromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\") }\n    },\n    LoadBalancerName = \"application-lb-name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .taskSubnets(SubnetSelection.builder()\n                .subnets(List.of(Subnet.fromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")))\n                .build())\n        .loadBalancerName(\"application-lb-name\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n  loadBalancerName: 'application-lb-name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs-patterns"
        },
        "field": {
          "field": "markdown",
          "line": 720
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n  loadBalancerName: 'application-lb-name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5cd57b23a77d8f929872cd94659196f9150798e162252069cba660db079fa0fd"
    },
    "bd73b686eb2f6bd81380511621017df47d35e20e8aa8eaf61fb692e38884f088": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# certificate: certificatemanager.Certificate\n\napplication_listener_props = ecs_patterns.ApplicationListenerProps(\n    name=\"name\",\n\n    # the properties below are optional\n    certificate=certificate,\n    port=123,\n    protocol=elbv2.ApplicationProtocol.HTTP,\n    ssl_policy=elbv2.SslPolicy.RECOMMENDED\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nCertificate certificate;\n\nApplicationListenerProps applicationListenerProps = new ApplicationListenerProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Certificate = certificate,\n    Port = 123,\n    Protocol = ApplicationProtocol.HTTP,\n    SslPolicy = SslPolicy.RECOMMENDED\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\nCertificate certificate;\n\nApplicationListenerProps applicationListenerProps = ApplicationListenerProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .certificate(certificate)\n        .port(123)\n        .protocol(ApplicationProtocol.HTTP)\n        .sslPolicy(SslPolicy.RECOMMENDED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const certificate: certificatemanager.Certificate;\nconst applicationListenerProps: ecs_patterns.ApplicationListenerProps = {\n  name: 'name',\n\n  // the properties below are optional\n  certificate: certificate,\n  port: 123,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationListenerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-ecs-patterns.ApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy#RECOMMENDED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const certificate: certificatemanager.Certificate;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationListenerProps: ecs_patterns.ApplicationListenerProps = {\n  name: 'name',\n\n  // the properties below are optional\n  certificate: certificate,\n  port: 123,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 21,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "20b603e7124af03d7ceb719fcc988a31e6bbbe7827f0fef7c746105a93a06655"
    },
    "fb353a50622c0b36aca7c904350d98a1bc20dcfb1396fbb34e50aa6c7ab8caa7": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.ApplicationLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedEc2Service loadBalancedEcsService = new ApplicationLoadBalancedEc2Service(this, \"Service\", new ApplicationLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedEc2Service loadBalancedEcsService = ApplicationLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "152a4787f8f826f02c63d608fab3e40712f7dbb7b93b4b43ca7220dde74b46d8"
    },
    "0c325fb42072cf5eea967706c82b31f949b00fcb2442512c6dc38eedcfb50ecc": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.ApplicationLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedEc2Service loadBalancedEcsService = new ApplicationLoadBalancedEc2Service(this, \"Service\", new ApplicationLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedEc2Service loadBalancedEcsService = ApplicationLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "152a4787f8f826f02c63d608fab3e40712f7dbb7b93b4b43ca7220dde74b46d8"
    },
    "8765aa226497e5b5d24f468d47299ff704942c5c164078b34cdcb06f7bc1b0cd": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "75554f50e57c79caa0034a5b007518fd9d18bbcbb7ac3651397bb331694bfd76"
    },
    "a608e1c5b51a85f690791a36e44937b631323e22c02f5b86cc39e89eb5123d66": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "75554f50e57c79caa0034a5b007518fd9d18bbcbb7ac3651397bb331694bfd76"
    },
    "61b7e1c0e54873cde72bcff1590ee0d47d384263ee62870bd7f868361b3a7d55": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# application_load_balancer: elbv2.ApplicationLoadBalancer\n# certificate: certificatemanager.Certificate\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# container_image: ecs.ContainerImage\n# hosted_zone: route53.HostedZone\n# log_driver: ecs.LogDriver\n# namespace: servicediscovery.INamespace\n# role: iam.Role\n# secret: ecs.Secret\n# vpc: ec2.Vpc\n\napplication_load_balanced_service_base_props = ecs_patterns.ApplicationLoadBalancedServiceBaseProps(\n    certificate=certificate,\n    circuit_breaker=ecs.DeploymentCircuitBreaker(\n        rollback=False\n    ),\n    cloud_map_options=ecs.CloudMapOptions(\n        cloud_map_namespace=namespace,\n        container=container_definition,\n        container_port=123,\n        dns_record_type=servicediscovery.DnsRecordType.A,\n        dns_ttl=cdk.Duration.minutes(30),\n        failure_threshold=123,\n        name=\"name\"\n    ),\n    cluster=cluster,\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.ECS\n    ),\n    desired_count=123,\n    domain_name=\"domainName\",\n    domain_zone=hosted_zone,\n    enable_eCSManaged_tags=False,\n    health_check_grace_period=cdk.Duration.minutes(30),\n    listener_port=123,\n    load_balancer=application_load_balancer,\n    load_balancer_name=\"loadBalancerName\",\n    max_healthy_percent=123,\n    min_healthy_percent=123,\n    open_listener=False,\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    protocol=elbv2.ApplicationProtocol.HTTP,\n    protocol_version=elbv2.ApplicationProtocolVersion.GRPC,\n    public_load_balancer=False,\n    record_type=ecs_patterns.ApplicationLoadBalancedServiceRecordType.ALIAS,\n    redirect_hTTP=False,\n    service_name=\"serviceName\",\n    ssl_policy=elbv2.SslPolicy.RECOMMENDED,\n    target_protocol=elbv2.ApplicationProtocol.HTTP,\n    task_image_options=ecs_patterns.ApplicationLoadBalancedTaskImageOptions(\n        image=container_image,\n\n        # the properties below are optional\n        container_name=\"containerName\",\n        container_port=123,\n        docker_labels={\n            \"docker_labels_key\": \"dockerLabels\"\n        },\n        enable_logging=False,\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        execution_role=role,\n        family=\"family\",\n        log_driver=log_driver,\n        secrets={\n            \"secrets_key\": secret\n        },\n        task_role=role\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nApplicationLoadBalancer applicationLoadBalancer;\nCertificate certificate;\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nRole role;\nSecret secret;\nVpc vpc;\nApplicationLoadBalancedServiceBaseProps applicationLoadBalancedServiceBaseProps = new ApplicationLoadBalancedServiceBaseProps {\n    Certificate = certificate,\n    CircuitBreaker = new DeploymentCircuitBreaker {\n        Rollback = false\n    },\n    CloudMapOptions = new CloudMapOptions {\n        CloudMapNamespace = namespace,\n        Container = containerDefinition,\n        ContainerPort = 123,\n        DnsRecordType = DnsRecordType.A,\n        DnsTtl = Duration.Minutes(30),\n        FailureThreshold = 123,\n        Name = \"name\"\n    },\n    Cluster = cluster,\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.ECS\n    },\n    DesiredCount = 123,\n    DomainName = \"domainName\",\n    DomainZone = hostedZone,\n    EnableECSManagedTags = false,\n    HealthCheckGracePeriod = Duration.Minutes(30),\n    ListenerPort = 123,\n    LoadBalancer = applicationLoadBalancer,\n    LoadBalancerName = \"loadBalancerName\",\n    MaxHealthyPercent = 123,\n    MinHealthyPercent = 123,\n    OpenListener = false,\n    PropagateTags = PropagatedTagSource.SERVICE,\n    Protocol = ApplicationProtocol.HTTP,\n    ProtocolVersion = ApplicationProtocolVersion.GRPC,\n    PublicLoadBalancer = false,\n    RecordType = ApplicationLoadBalancedServiceRecordType.ALIAS,\n    RedirectHTTP = false,\n    ServiceName = \"serviceName\",\n    SslPolicy = SslPolicy.RECOMMENDED,\n    TargetProtocol = ApplicationProtocol.HTTP,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = containerImage,\n\n        // the properties below are optional\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        DockerLabels = new Dictionary<string, string> {\n            { \"dockerLabelsKey\", \"dockerLabels\" }\n        },\n        EnableLogging = false,\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        ExecutionRole = role,\n        Family = \"family\",\n        LogDriver = logDriver,\n        Secrets = new Dictionary<string, Secret> {\n            { \"secretsKey\", secret }\n        },\n        TaskRole = role\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nApplicationLoadBalancer applicationLoadBalancer;\nCertificate certificate;\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nRole role;\nSecret secret;\nVpc vpc;\n\nApplicationLoadBalancedServiceBaseProps applicationLoadBalancedServiceBaseProps = ApplicationLoadBalancedServiceBaseProps.builder()\n        .certificate(certificate)\n        .circuitBreaker(DeploymentCircuitBreaker.builder()\n                .rollback(false)\n                .build())\n        .cloudMapOptions(CloudMapOptions.builder()\n                .cloudMapNamespace(namespace)\n                .container(containerDefinition)\n                .containerPort(123)\n                .dnsRecordType(DnsRecordType.A)\n                .dnsTtl(Duration.minutes(30))\n                .failureThreshold(123)\n                .name(\"name\")\n                .build())\n        .cluster(cluster)\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.ECS)\n                .build())\n        .desiredCount(123)\n        .domainName(\"domainName\")\n        .domainZone(hostedZone)\n        .enableECSManagedTags(false)\n        .healthCheckGracePeriod(Duration.minutes(30))\n        .listenerPort(123)\n        .loadBalancer(applicationLoadBalancer)\n        .loadBalancerName(\"loadBalancerName\")\n        .maxHealthyPercent(123)\n        .minHealthyPercent(123)\n        .openListener(false)\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .protocol(ApplicationProtocol.HTTP)\n        .protocolVersion(ApplicationProtocolVersion.GRPC)\n        .publicLoadBalancer(false)\n        .recordType(ApplicationLoadBalancedServiceRecordType.ALIAS)\n        .redirectHTTP(false)\n        .serviceName(\"serviceName\")\n        .sslPolicy(SslPolicy.RECOMMENDED)\n        .targetProtocol(ApplicationProtocol.HTTP)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(containerImage)\n\n                // the properties below are optional\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .dockerLabels(Map.of(\n                        \"dockerLabelsKey\", \"dockerLabels\"))\n                .enableLogging(false)\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .executionRole(role)\n                .family(\"family\")\n                .logDriver(logDriver)\n                .secrets(Map.of(\n                        \"secretsKey\", secret))\n                .taskRole(role)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const applicationLoadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\nconst applicationLoadBalancedServiceBaseProps: ecs_patterns.ApplicationLoadBalancedServiceBaseProps = {\n  certificate: certificate,\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  listenerPort: 123,\n  loadBalancer: applicationLoadBalancer,\n  loadBalancerName: 'loadBalancerName',\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  openListener: false,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  publicLoadBalancer: false,\n  recordType: ecs_patterns.ApplicationLoadBalancedServiceRecordType.ALIAS,\n  redirectHTTP: false,\n  serviceName: 'serviceName',\n  sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPort: 123,\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceRecordType",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceRecordType#ALIAS",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#ECS",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion#GRPC",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy#RECOMMENDED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const applicationLoadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationLoadBalancedServiceBaseProps: ecs_patterns.ApplicationLoadBalancedServiceBaseProps = {\n  certificate: certificate,\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  listenerPort: 123,\n  loadBalancer: applicationLoadBalancer,\n  loadBalancerName: 'loadBalancerName',\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  openListener: false,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  publicLoadBalancer: false,\n  recordType: ecs_patterns.ApplicationLoadBalancedServiceRecordType.ALIAS,\n  redirectHTTP: false,\n  serviceName: 'serviceName',\n  sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPort: 123,\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 9,
        "10": 17,
        "75": 137,
        "91": 6,
        "130": 11,
        "153": 12,
        "169": 12,
        "193": 8,
        "194": 20,
        "196": 2,
        "225": 12,
        "242": 12,
        "243": 12,
        "254": 9,
        "255": 9,
        "256": 9,
        "281": 50,
        "290": 1
      },
      "fqnsFingerprint": "94fdb616c177b06735b01204ea6de457d2ea533166d19f7b728b66a1b4da172e"
    },
    "1f533071725521775f7f44e324fb9571ec3ac24314c37aab639b97507e5704b3": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    task_subnets=ec2.SubnetSelection(\n        subnets=[ec2.Subnet.from_subnet_id(self, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")]\n    ),\n    load_balancer_name=\"application-lb-name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TaskSubnets = new SubnetSelection {\n        Subnets = new [] { Subnet.FromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\") }\n    },\n    LoadBalancerName = \"application-lb-name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .taskSubnets(SubnetSelection.builder()\n                .subnets(List.of(Subnet.fromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")))\n                .build())\n        .loadBalancerName(\"application-lb-name\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n  loadBalancerName: 'application-lb-name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n  loadBalancerName: 'application-lb-name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5cd57b23a77d8f929872cd94659196f9150798e162252069cba660db079fa0fd"
    },
    "a6bfa4ec8488d5ad51ed6091c39efb78ad37b1539437c1b2265ad8a8bc2b6b53": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.ApplicationMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = new ApplicationMultipleTargetGroupsEc2Service(this, \"Service\", new ApplicationMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = ApplicationMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9d4b8c30332b128d432dd55135c3bfca5ecefa37d29c1108ee701549f82ae3d4"
    },
    "deeefa55ab7d3fee39402e85c2538b282816f87a7483c56806747c38d80d3782": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nimport aws_cdk.aws_route53 as route53\n\n# certificate: certificatemanager.Certificate\n# hosted_zone: route53.HostedZone\n\napplication_load_balancer_props = ecs_patterns.ApplicationLoadBalancerProps(\n    listeners=[ecs_patterns.ApplicationListenerProps(\n        name=\"name\",\n\n        # the properties below are optional\n        certificate=certificate,\n        port=123,\n        protocol=elbv2.ApplicationProtocol.HTTP,\n        ssl_policy=elbv2.SslPolicy.RECOMMENDED\n    )],\n    name=\"name\",\n\n    # the properties below are optional\n    domain_name=\"domainName\",\n    domain_zone=hosted_zone,\n    public_load_balancer=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK.AWS.Route53;\n\nCertificate certificate;\nHostedZone hostedZone;\n\nApplicationLoadBalancerProps applicationLoadBalancerProps = new ApplicationLoadBalancerProps {\n    Listeners = new [] { new ApplicationListenerProps {\n        Name = \"name\",\n\n        // the properties below are optional\n        Certificate = certificate,\n        Port = 123,\n        Protocol = ApplicationProtocol.HTTP,\n        SslPolicy = SslPolicy.RECOMMENDED\n    } },\n    Name = \"name\",\n\n    // the properties below are optional\n    DomainName = \"domainName\",\n    DomainZone = hostedZone,\n    PublicLoadBalancer = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.services.route53.*;\n\nCertificate certificate;\nHostedZone hostedZone;\n\nApplicationLoadBalancerProps applicationLoadBalancerProps = ApplicationLoadBalancerProps.builder()\n        .listeners(List.of(ApplicationListenerProps.builder()\n                .name(\"name\")\n\n                // the properties below are optional\n                .certificate(certificate)\n                .port(123)\n                .protocol(ApplicationProtocol.HTTP)\n                .sslPolicy(SslPolicy.RECOMMENDED)\n                .build()))\n        .name(\"name\")\n\n        // the properties below are optional\n        .domainName(\"domainName\")\n        .domainZone(hostedZone)\n        .publicLoadBalancer(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const hostedZone: route53.HostedZone;\nconst applicationLoadBalancerProps: ecs_patterns.ApplicationLoadBalancerProps = {\n  listeners: [{\n    name: 'name',\n\n    // the properties below are optional\n    certificate: certificate,\n    port: 123,\n    protocol: elbv2.ApplicationProtocol.HTTP,\n    sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  publicLoadBalancer: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy#RECOMMENDED",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationLoadBalancerProps: ecs_patterns.ApplicationLoadBalancerProps = {\n  listeners: [{\n    name: 'name',\n\n    // the properties below are optional\n    certificate: certificate,\n    port: 123,\n    protocol: elbv2.ApplicationProtocol.HTTP,\n    sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  publicLoadBalancer: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 31,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "f6383649e045498d0eaf87f5cb264e5b454ac5b26a9361d4c055dba6da70ad04"
    },
    "a688d4da9a75d9685705c8f25bd27096d06b5d8d26d3b09d158d74038e1e94c6": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.ApplicationMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = new ApplicationMultipleTargetGroupsEc2Service(this, \"Service\", new ApplicationMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = ApplicationMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9d4b8c30332b128d432dd55135c3bfca5ecefa37d29c1108ee701549f82ae3d4"
    },
    "2a540c3584e68b22f132d99d4bcf43f76b55bac249d4c0e23d254f4f8c18407d": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.ApplicationMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = new ApplicationMultipleTargetGroupsEc2Service(this, \"Service\", new ApplicationMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsEc2Service loadBalancedEc2Service = ApplicationMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9d4b8c30332b128d432dd55135c3bfca5ecefa37d29c1108ee701549f82ae3d4"
    },
    "698900f6b18191ec8a953e3057e062b5b31ffa1bd4ff5b773ee70b9e1ff89ae3": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationMultipleTargetGroupsFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsFargateService loadBalancedFargateService = new ApplicationMultipleTargetGroupsFargateService(this, \"Service\", new ApplicationMultipleTargetGroupsFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsFargateService loadBalancedFargateService = ApplicationMultipleTargetGroupsFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 3,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "92b28a42495a35abdbd78ee3a31cb96e137db05e980ff756197e0173e1ab18ad"
    },
    "cf18840196dce11425d62d7873036763cd1dd9e98d185165adfd274a3b844dc4": {
      "translations": {
        "python": {
          "source": "# One application load balancer with one listener and two target groups.\n# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationMultipleTargetGroupsFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    target_groups=[ecsPatterns.ApplicationTargetProps(\n        container_port=80\n    ), ecsPatterns.ApplicationTargetProps(\n        container_port=90,\n        path_pattern=\"a/b/c\",\n        priority=10\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsFargateService loadBalancedFargateService = new ApplicationMultipleTargetGroupsFargateService(this, \"Service\", new ApplicationMultipleTargetGroupsFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 80\n    }, new ApplicationTargetProps {\n        ContainerPort = 90,\n        PathPattern = \"a/b/c\",\n        Priority = 10\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// One application load balancer with one listener and two target groups.\nCluster cluster;\n\nApplicationMultipleTargetGroupsFargateService loadBalancedFargateService = ApplicationMultipleTargetGroupsFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(80)\n                .build(), ApplicationTargetProps.builder()\n                .containerPort(90)\n                .pathPattern(\"a/b/c\")\n                .priority(10)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 3,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "92b28a42495a35abdbd78ee3a31cb96e137db05e980ff756197e0173e1ab18ad"
    },
    "e7e003cd1f1b2f6fcb835585a4783803ea1e58e3c2ffdfdb50b7dddcd25c4d1c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# certificate: certificatemanager.Certificate\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# container_image: ecs.ContainerImage\n# hosted_zone: route53.HostedZone\n# log_driver: ecs.LogDriver\n# namespace: servicediscovery.INamespace\n# role: iam.Role\n# secret: ecs.Secret\n# vpc: ec2.Vpc\n\napplication_multiple_target_groups_service_base_props = ecs_patterns.ApplicationMultipleTargetGroupsServiceBaseProps(\n    cloud_map_options=ecs.CloudMapOptions(\n        cloud_map_namespace=namespace,\n        container=container_definition,\n        container_port=123,\n        dns_record_type=servicediscovery.DnsRecordType.A,\n        dns_ttl=cdk.Duration.minutes(30),\n        failure_threshold=123,\n        name=\"name\"\n    ),\n    cluster=cluster,\n    desired_count=123,\n    enable_eCSManaged_tags=False,\n    health_check_grace_period=cdk.Duration.minutes(30),\n    load_balancers=[ecs_patterns.ApplicationLoadBalancerProps(\n        listeners=[ecs_patterns.ApplicationListenerProps(\n            name=\"name\",\n\n            # the properties below are optional\n            certificate=certificate,\n            port=123,\n            protocol=elbv2.ApplicationProtocol.HTTP,\n            ssl_policy=elbv2.SslPolicy.RECOMMENDED\n        )],\n        name=\"name\",\n\n        # the properties below are optional\n        domain_name=\"domainName\",\n        domain_zone=hosted_zone,\n        public_load_balancer=False\n    )],\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    service_name=\"serviceName\",\n    target_groups=[ecs_patterns.ApplicationTargetProps(\n        container_port=123,\n\n        # the properties below are optional\n        host_header=\"hostHeader\",\n        listener=\"listener\",\n        path_pattern=\"pathPattern\",\n        priority=123,\n        protocol=ecs.Protocol.TCP\n    )],\n    task_image_options=ecs_patterns.ApplicationLoadBalancedTaskImageProps(\n        image=container_image,\n\n        # the properties below are optional\n        container_name=\"containerName\",\n        container_ports=[123],\n        docker_labels={\n            \"docker_labels_key\": \"dockerLabels\"\n        },\n        enable_logging=False,\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        execution_role=role,\n        family=\"family\",\n        log_driver=log_driver,\n        secrets={\n            \"secrets_key\": secret\n        },\n        task_role=role\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nCertificate certificate;\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nRole role;\nSecret secret;\nVpc vpc;\nApplicationMultipleTargetGroupsServiceBaseProps applicationMultipleTargetGroupsServiceBaseProps = new ApplicationMultipleTargetGroupsServiceBaseProps {\n    CloudMapOptions = new CloudMapOptions {\n        CloudMapNamespace = namespace,\n        Container = containerDefinition,\n        ContainerPort = 123,\n        DnsRecordType = DnsRecordType.A,\n        DnsTtl = Duration.Minutes(30),\n        FailureThreshold = 123,\n        Name = \"name\"\n    },\n    Cluster = cluster,\n    DesiredCount = 123,\n    EnableECSManagedTags = false,\n    HealthCheckGracePeriod = Duration.Minutes(30),\n    LoadBalancers = new [] { new ApplicationLoadBalancerProps {\n        Listeners = new [] { new ApplicationListenerProps {\n            Name = \"name\",\n\n            // the properties below are optional\n            Certificate = certificate,\n            Port = 123,\n            Protocol = ApplicationProtocol.HTTP,\n            SslPolicy = SslPolicy.RECOMMENDED\n        } },\n        Name = \"name\",\n\n        // the properties below are optional\n        DomainName = \"domainName\",\n        DomainZone = hostedZone,\n        PublicLoadBalancer = false\n    } },\n    PropagateTags = PropagatedTagSource.SERVICE,\n    ServiceName = \"serviceName\",\n    TargetGroups = new [] { new ApplicationTargetProps {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        HostHeader = \"hostHeader\",\n        Listener = \"listener\",\n        PathPattern = \"pathPattern\",\n        Priority = 123,\n        Protocol = Protocol.TCP\n    } },\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageProps {\n        Image = containerImage,\n\n        // the properties below are optional\n        ContainerName = \"containerName\",\n        ContainerPorts = new [] { 123 },\n        DockerLabels = new Dictionary<string, string> {\n            { \"dockerLabelsKey\", \"dockerLabels\" }\n        },\n        EnableLogging = false,\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        ExecutionRole = role,\n        Family = \"family\",\n        LogDriver = logDriver,\n        Secrets = new Dictionary<string, Secret> {\n            { \"secretsKey\", secret }\n        },\n        TaskRole = role\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nCertificate certificate;\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nRole role;\nSecret secret;\nVpc vpc;\n\nApplicationMultipleTargetGroupsServiceBaseProps applicationMultipleTargetGroupsServiceBaseProps = ApplicationMultipleTargetGroupsServiceBaseProps.builder()\n        .cloudMapOptions(CloudMapOptions.builder()\n                .cloudMapNamespace(namespace)\n                .container(containerDefinition)\n                .containerPort(123)\n                .dnsRecordType(DnsRecordType.A)\n                .dnsTtl(Duration.minutes(30))\n                .failureThreshold(123)\n                .name(\"name\")\n                .build())\n        .cluster(cluster)\n        .desiredCount(123)\n        .enableECSManagedTags(false)\n        .healthCheckGracePeriod(Duration.minutes(30))\n        .loadBalancers(List.of(ApplicationLoadBalancerProps.builder()\n                .listeners(List.of(ApplicationListenerProps.builder()\n                        .name(\"name\")\n\n                        // the properties below are optional\n                        .certificate(certificate)\n                        .port(123)\n                        .protocol(ApplicationProtocol.HTTP)\n                        .sslPolicy(SslPolicy.RECOMMENDED)\n                        .build()))\n                .name(\"name\")\n\n                // the properties below are optional\n                .domainName(\"domainName\")\n                .domainZone(hostedZone)\n                .publicLoadBalancer(false)\n                .build()))\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .serviceName(\"serviceName\")\n        .targetGroups(List.of(ApplicationTargetProps.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .hostHeader(\"hostHeader\")\n                .listener(\"listener\")\n                .pathPattern(\"pathPattern\")\n                .priority(123)\n                .protocol(Protocol.TCP)\n                .build()))\n        .taskImageOptions(ApplicationLoadBalancedTaskImageProps.builder()\n                .image(containerImage)\n\n                // the properties below are optional\n                .containerName(\"containerName\")\n                .containerPorts(List.of(123))\n                .dockerLabels(Map.of(\n                        \"dockerLabelsKey\", \"dockerLabels\"))\n                .enableLogging(false)\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .executionRole(role)\n                .family(\"family\")\n                .logDriver(logDriver)\n                .secrets(Map.of(\n                        \"secretsKey\", secret))\n                .taskRole(role)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\nconst applicationMultipleTargetGroupsServiceBaseProps: ecs_patterns.ApplicationMultipleTargetGroupsServiceBaseProps = {\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  loadBalancers: [{\n    listeners: [{\n      name: 'name',\n\n      // the properties below are optional\n      certificate: certificate,\n      port: 123,\n      protocol: elbv2.ApplicationProtocol.HTTP,\n      sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    domainName: 'domainName',\n    domainZone: hostedZone,\n    publicLoadBalancer: false,\n  }],\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n  targetGroups: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostHeader: 'hostHeader',\n    listener: 'listener',\n    pathPattern: 'pathPattern',\n    priority: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPorts: [123],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps",
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy#RECOMMENDED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationMultipleTargetGroupsServiceBaseProps: ecs_patterns.ApplicationMultipleTargetGroupsServiceBaseProps = {\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  loadBalancers: [{\n    listeners: [{\n      name: 'name',\n\n      // the properties below are optional\n      certificate: certificate,\n      port: 123,\n      protocol: elbv2.ApplicationProtocol.HTTP,\n      sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    domainName: 'domainName',\n    domainZone: hostedZone,\n    publicLoadBalancer: false,\n  }],\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n  targetGroups: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostHeader: 'hostHeader',\n    listener: 'listener',\n    pathPattern: 'pathPattern',\n    priority: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPorts: [123],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 9,
        "10": 21,
        "75": 122,
        "91": 3,
        "130": 10,
        "153": 11,
        "169": 11,
        "192": 4,
        "193": 9,
        "194": 14,
        "196": 2,
        "225": 11,
        "242": 11,
        "243": 11,
        "254": 9,
        "255": 9,
        "256": 9,
        "281": 48,
        "290": 1
      },
      "fqnsFingerprint": "8beb108a8cb3469f793f3e0eb7834fdf9ff44c6b3fa989039c6c065225f6521f"
    },
    "838e2385b9279fff45ee61f7ab0194e7f9d2d4c1b31bd7132bb6613ad9a05f91": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\napplication_target_props = ecs_patterns.ApplicationTargetProps(\n    container_port=123,\n\n    # the properties below are optional\n    host_header=\"hostHeader\",\n    listener=\"listener\",\n    path_pattern=\"pathPattern\",\n    priority=123,\n    protocol=ecs.Protocol.TCP\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nApplicationTargetProps applicationTargetProps = new ApplicationTargetProps {\n    ContainerPort = 123,\n\n    // the properties below are optional\n    HostHeader = \"hostHeader\",\n    Listener = \"listener\",\n    PathPattern = \"pathPattern\",\n    Priority = 123,\n    Protocol = Protocol.TCP\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nApplicationTargetProps applicationTargetProps = ApplicationTargetProps.builder()\n        .containerPort(123)\n\n        // the properties below are optional\n        .hostHeader(\"hostHeader\")\n        .listener(\"listener\")\n        .pathPattern(\"pathPattern\")\n        .priority(123)\n        .protocol(Protocol.TCP)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nconst applicationTargetProps: ecs_patterns.ApplicationTargetProps = {\n  containerPort: 123,\n\n  // the properties below are optional\n  hostHeader: 'hostHeader',\n  listener: 'listener',\n  pathPattern: 'pathPattern',\n  priority: 123,\n  protocol: ecs.Protocol.TCP,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationTargetProps: ecs_patterns.ApplicationTargetProps = {\n  containerPort: 123,\n\n  // the properties below are optional\n  hostHeader: 'hostHeader',\n  listener: 'listener',\n  pathPattern: 'pathPattern',\n  priority: 123,\n  protocol: ecs.Protocol.TCP,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 14,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0cb2018e156b70c8c1a70a6ef4cdb63cbd56de560b9242df496d12a9113edc33"
    },
    "ccb34229c6e698d028886c2486bf632d24caacabc58a5cae06881f73e5dff166": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\nnetwork_listener_props = ecs_patterns.NetworkListenerProps(\n    name=\"name\",\n\n    # the properties below are optional\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nNetworkListenerProps networkListenerProps = new NetworkListenerProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nNetworkListenerProps networkListenerProps = NetworkListenerProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .port(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nconst networkListenerProps: ecs_patterns.NetworkListenerProps = {\n  name: 'name',\n\n  // the properties below are optional\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkListenerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkListenerProps: ecs_patterns.NetworkListenerProps = {\n  name: 'name',\n\n  // the properties below are optional\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d6c2892caef2396254adee0294712ac7037062e6675f6f22e0b053d7ff00b611"
    },
    "c94d1f4d044d19e6064caab923572d3b5ffd5ec8397b86990fe634d8903cfa3e": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.NetworkLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = new NetworkLoadBalancedEc2Service(this, \"Service\", new NetworkLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = NetworkLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "93af421ddab775e7565289e42074d8d99ef48ec203e44d05996745b500169e63"
    },
    "eb903a4d0c0519ed596fc07bd5b10030abdef7d2f60c903df22eae82273a9db8": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.NetworkLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = new NetworkLoadBalancedEc2Service(this, \"Service\", new NetworkLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = NetworkLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "93af421ddab775e7565289e42074d8d99ef48ec203e44d05996745b500169e63"
    },
    "40c1f51e5eeed3d6d155a4c1c51afa22ebca4df2e52f94cd2b858f4de96b8ba1": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.NetworkLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedFargateService loadBalancedFargateService = new NetworkLoadBalancedFargateService(this, \"Service\", new NetworkLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedFargateService loadBalancedFargateService = NetworkLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "bf655357e393858283cd108a03901e08b759accb707d421459242b9545c29980"
    },
    "b7d716cb6353d060437ee2b36224116a59e70baa2153cd10e82361226bbc75b0": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.NetworkLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedFargateService loadBalancedFargateService = new NetworkLoadBalancedFargateService(this, \"Service\", new NetworkLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedFargateService loadBalancedFargateService = NetworkLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "bf655357e393858283cd108a03901e08b759accb707d421459242b9545c29980"
    },
    "84023592d489e40df3f28e6602609d636e07e3eb2555ac0fad2285aa25e49cd9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# container_image: ecs.ContainerImage\n# hosted_zone: route53.HostedZone\n# log_driver: ecs.LogDriver\n# namespace: servicediscovery.INamespace\n# network_load_balancer: elbv2.NetworkLoadBalancer\n# role: iam.Role\n# secret: ecs.Secret\n# vpc: ec2.Vpc\n\nnetwork_load_balanced_service_base_props = ecs_patterns.NetworkLoadBalancedServiceBaseProps(\n    circuit_breaker=ecs.DeploymentCircuitBreaker(\n        rollback=False\n    ),\n    cloud_map_options=ecs.CloudMapOptions(\n        cloud_map_namespace=namespace,\n        container=container_definition,\n        container_port=123,\n        dns_record_type=servicediscovery.DnsRecordType.A,\n        dns_ttl=cdk.Duration.minutes(30),\n        failure_threshold=123,\n        name=\"name\"\n    ),\n    cluster=cluster,\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.ECS\n    ),\n    desired_count=123,\n    domain_name=\"domainName\",\n    domain_zone=hosted_zone,\n    enable_eCSManaged_tags=False,\n    health_check_grace_period=cdk.Duration.minutes(30),\n    listener_port=123,\n    load_balancer=network_load_balancer,\n    max_healthy_percent=123,\n    min_healthy_percent=123,\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    public_load_balancer=False,\n    record_type=ecs_patterns.NetworkLoadBalancedServiceRecordType.ALIAS,\n    service_name=\"serviceName\",\n    task_image_options=ecs_patterns.NetworkLoadBalancedTaskImageOptions(\n        image=container_image,\n\n        # the properties below are optional\n        container_name=\"containerName\",\n        container_port=123,\n        docker_labels={\n            \"docker_labels_key\": \"dockerLabels\"\n        },\n        enable_logging=False,\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        execution_role=role,\n        family=\"family\",\n        log_driver=log_driver,\n        secrets={\n            \"secrets_key\": secret\n        },\n        task_role=role\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nNetworkLoadBalancer networkLoadBalancer;\nRole role;\nSecret secret;\nVpc vpc;\nNetworkLoadBalancedServiceBaseProps networkLoadBalancedServiceBaseProps = new NetworkLoadBalancedServiceBaseProps {\n    CircuitBreaker = new DeploymentCircuitBreaker {\n        Rollback = false\n    },\n    CloudMapOptions = new CloudMapOptions {\n        CloudMapNamespace = namespace,\n        Container = containerDefinition,\n        ContainerPort = 123,\n        DnsRecordType = DnsRecordType.A,\n        DnsTtl = Duration.Minutes(30),\n        FailureThreshold = 123,\n        Name = \"name\"\n    },\n    Cluster = cluster,\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.ECS\n    },\n    DesiredCount = 123,\n    DomainName = \"domainName\",\n    DomainZone = hostedZone,\n    EnableECSManagedTags = false,\n    HealthCheckGracePeriod = Duration.Minutes(30),\n    ListenerPort = 123,\n    LoadBalancer = networkLoadBalancer,\n    MaxHealthyPercent = 123,\n    MinHealthyPercent = 123,\n    PropagateTags = PropagatedTagSource.SERVICE,\n    PublicLoadBalancer = false,\n    RecordType = NetworkLoadBalancedServiceRecordType.ALIAS,\n    ServiceName = \"serviceName\",\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = containerImage,\n\n        // the properties below are optional\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        DockerLabels = new Dictionary<string, string> {\n            { \"dockerLabelsKey\", \"dockerLabels\" }\n        },\n        EnableLogging = false,\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        ExecutionRole = role,\n        Family = \"family\",\n        LogDriver = logDriver,\n        Secrets = new Dictionary<string, Secret> {\n            { \"secretsKey\", secret }\n        },\n        TaskRole = role\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nNetworkLoadBalancer networkLoadBalancer;\nRole role;\nSecret secret;\nVpc vpc;\n\nNetworkLoadBalancedServiceBaseProps networkLoadBalancedServiceBaseProps = NetworkLoadBalancedServiceBaseProps.builder()\n        .circuitBreaker(DeploymentCircuitBreaker.builder()\n                .rollback(false)\n                .build())\n        .cloudMapOptions(CloudMapOptions.builder()\n                .cloudMapNamespace(namespace)\n                .container(containerDefinition)\n                .containerPort(123)\n                .dnsRecordType(DnsRecordType.A)\n                .dnsTtl(Duration.minutes(30))\n                .failureThreshold(123)\n                .name(\"name\")\n                .build())\n        .cluster(cluster)\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.ECS)\n                .build())\n        .desiredCount(123)\n        .domainName(\"domainName\")\n        .domainZone(hostedZone)\n        .enableECSManagedTags(false)\n        .healthCheckGracePeriod(Duration.minutes(30))\n        .listenerPort(123)\n        .loadBalancer(networkLoadBalancer)\n        .maxHealthyPercent(123)\n        .minHealthyPercent(123)\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .publicLoadBalancer(false)\n        .recordType(NetworkLoadBalancedServiceRecordType.ALIAS)\n        .serviceName(\"serviceName\")\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(containerImage)\n\n                // the properties below are optional\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .dockerLabels(Map.of(\n                        \"dockerLabelsKey\", \"dockerLabels\"))\n                .enableLogging(false)\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .executionRole(role)\n                .family(\"family\")\n                .logDriver(logDriver)\n                .secrets(Map.of(\n                        \"secretsKey\", secret))\n                .taskRole(role)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const networkLoadBalancer: elbv2.NetworkLoadBalancer;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\nconst networkLoadBalancedServiceBaseProps: ecs_patterns.NetworkLoadBalancedServiceBaseProps = {\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  listenerPort: 123,\n  loadBalancer: networkLoadBalancer,\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  publicLoadBalancer: false,\n  recordType: ecs_patterns.NetworkLoadBalancedServiceRecordType.ALIAS,\n  serviceName: 'serviceName',\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPort: 123,\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceRecordType",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceRecordType#ALIAS",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#ECS",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const networkLoadBalancer: elbv2.NetworkLoadBalancer;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkLoadBalancedServiceBaseProps: ecs_patterns.NetworkLoadBalancedServiceBaseProps = {\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  listenerPort: 123,\n  loadBalancer: networkLoadBalancer,\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  publicLoadBalancer: false,\n  recordType: ecs_patterns.NetworkLoadBalancedServiceRecordType.ALIAS,\n  serviceName: 'serviceName',\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPort: 123,\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 9,
        "10": 15,
        "75": 112,
        "91": 4,
        "130": 10,
        "153": 11,
        "169": 11,
        "193": 8,
        "194": 12,
        "196": 2,
        "225": 11,
        "242": 11,
        "243": 11,
        "254": 8,
        "255": 8,
        "256": 8,
        "281": 42,
        "290": 1
      },
      "fqnsFingerprint": "9de62a52a80b27779bf7172ba8e7a5e2d015f37ec4d30058f57c0bf643b05452"
    },
    "cce8866260acec8de9a2620084ab4c94a1f331dcdcf6163b045395178baf6909": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_ecs_service = ecs_patterns.NetworkLoadBalancedEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"test\"),\n        environment={\n            \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n            \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n        }\n    ),\n    desired_count=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = new NetworkLoadBalancedEc2Service(this, \"Service\", new NetworkLoadBalancedEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"test\"),\n        Environment = new Dictionary<string, string> {\n            { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n            { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n        }\n    },\n    DesiredCount = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nNetworkLoadBalancedEc2Service loadBalancedEcsService = NetworkLoadBalancedEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .taskImageOptions(NetworkLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"test\"))\n                .environment(Map.of(\n                        \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                        \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n                .build())\n        .desiredCount(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "93af421ddab775e7565289e42074d8d99ef48ec203e44d05996745b500169e63"
    },
    "388fa58c33b67e9d1353b8c62c414e79ff8adbdcce20fb20df54962b099e03e3": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.NetworkMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = new NetworkMultipleTargetGroupsEc2Service(this, \"Service\", new NetworkMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = NetworkMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "69b9c9aa3d72621966942b639b7a15ab445fd83c267c4fec426c23409c7de504"
    },
    "8ac95c36b49910ddec62288e20cc02c732565d617344499856fb39854728e448": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_route53 as route53\n\n# hosted_zone: route53.HostedZone\n\nnetwork_load_balancer_props = ecs_patterns.NetworkLoadBalancerProps(\n    listeners=[ecs_patterns.NetworkListenerProps(\n        name=\"name\",\n\n        # the properties below are optional\n        port=123\n    )],\n    name=\"name\",\n\n    # the properties below are optional\n    domain_name=\"domainName\",\n    domain_zone=hosted_zone,\n    public_load_balancer=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone hostedZone;\n\nNetworkLoadBalancerProps networkLoadBalancerProps = new NetworkLoadBalancerProps {\n    Listeners = new [] { new NetworkListenerProps {\n        Name = \"name\",\n\n        // the properties below are optional\n        Port = 123\n    } },\n    Name = \"name\",\n\n    // the properties below are optional\n    DomainName = \"domainName\",\n    DomainZone = hostedZone,\n    PublicLoadBalancer = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone hostedZone;\n\nNetworkLoadBalancerProps networkLoadBalancerProps = NetworkLoadBalancerProps.builder()\n        .listeners(List.of(NetworkListenerProps.builder()\n                .name(\"name\")\n\n                // the properties below are optional\n                .port(123)\n                .build()))\n        .name(\"name\")\n\n        // the properties below are optional\n        .domainName(\"domainName\")\n        .domainZone(hostedZone)\n        .publicLoadBalancer(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\nconst networkLoadBalancerProps: ecs_patterns.NetworkLoadBalancerProps = {\n  listeners: [{\n    name: 'name',\n\n    // the properties below are optional\n    port: 123,\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  publicLoadBalancer: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancerProps",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkLoadBalancerProps: ecs_patterns.NetworkLoadBalancerProps = {\n  listeners: [{\n    name: 'name',\n\n    // the properties below are optional\n    port: 123,\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  publicLoadBalancer: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "07f82dcf7db34a6a6c5b2ed5705a5b8d0041fd21b281bd91a533878dd2651bf8"
    },
    "6ec92738fe0727ccce2c114c20f55e7dd14948f0f9e649f585ece7849ad4c503": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.NetworkMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = new NetworkMultipleTargetGroupsEc2Service(this, \"Service\", new NetworkMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = NetworkMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "69b9c9aa3d72621966942b639b7a15ab445fd83c267c4fec426c23409c7de504"
    },
    "c19f86526fa37803b53b19a49fcbf85acf0e97361ce83dfb40705cbdf301008b": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_ec2_service = ecs_patterns.NetworkMultipleTargetGroupsEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=256,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = new NetworkMultipleTargetGroupsEc2Service(this, \"Service\", new NetworkMultipleTargetGroupsEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 256,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsEc2Service loadBalancedEc2Service = NetworkMultipleTargetGroupsEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(256)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "69b9c9aa3d72621966942b639b7a15ab445fd83c267c4fec426c23409c7de504"
    },
    "bbad21fa913c9ce034b3d609eef2256cea274486a5fe6557b253d82141910538": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.NetworkMultipleTargetGroupsFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsFargateService loadBalancedFargateService = new NetworkMultipleTargetGroupsFargateService(this, \"Service\", new NetworkMultipleTargetGroupsFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsFargateService loadBalancedFargateService = NetworkMultipleTargetGroupsFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateService",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e7e93cf0cc69c11bc0af8e0727cf3204ae9b3dd719ee11126f8d63fc91143dcb"
    },
    "c2957be627fd764885328e4abb3c1982047c344acaa5ee55d509ff411e15b90b": {
      "translations": {
        "python": {
          "source": "# Two network load balancers, each with their own listener and target group.\n# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.NetworkMultipleTargetGroupsFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    task_image_options=ecsPatterns.NetworkLoadBalancedTaskImageProps(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    load_balancers=[ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb1\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener1\"\n        )\n        ]\n    ), ecsPatterns.NetworkLoadBalancerProps(\n        name=\"lb2\",\n        listeners=[ecsPatterns.NetworkListenerProps(\n            name=\"listener2\"\n        )\n        ]\n    )\n    ],\n    target_groups=[ecsPatterns.NetworkTargetProps(\n        container_port=80,\n        listener=\"listener1\"\n    ), ecsPatterns.NetworkTargetProps(\n        container_port=90,\n        listener=\"listener2\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsFargateService loadBalancedFargateService = new NetworkMultipleTargetGroupsFargateService(this, \"Service\", new NetworkMultipleTargetGroupsFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Name = \"lb1\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener1\"\n        } }\n    }, new NetworkLoadBalancerProps {\n        Name = \"lb2\",\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"listener2\"\n        } }\n    } },\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 80,\n        Listener = \"listener1\"\n    }, new NetworkTargetProps {\n        ContainerPort = 90,\n        Listener = \"listener2\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Two network load balancers, each with their own listener and target group.\nCluster cluster;\n\nNetworkMultipleTargetGroupsFargateService loadBalancedFargateService = NetworkMultipleTargetGroupsFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .name(\"lb1\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener1\")\n                        .build()))\n                .build(), NetworkLoadBalancerProps.builder()\n                .name(\"lb2\")\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"listener2\")\n                        .build()))\n                .build()))\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(80)\n                .listener(\"listener1\")\n                .build(), NetworkTargetProps.builder()\n                .containerPort(90)\n                .listener(\"listener2\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateService",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e7e93cf0cc69c11bc0af8e0727cf3204ae9b3dd719ee11126f8d63fc91143dcb"
    },
    "7571ba531b2418bdb9405a1a539a3b250c2bf2209d5beda4243d0c62c1bf350e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# container_image: ecs.ContainerImage\n# hosted_zone: route53.HostedZone\n# log_driver: ecs.LogDriver\n# namespace: servicediscovery.INamespace\n# role: iam.Role\n# secret: ecs.Secret\n# vpc: ec2.Vpc\n\nnetwork_multiple_target_groups_service_base_props = ecs_patterns.NetworkMultipleTargetGroupsServiceBaseProps(\n    cloud_map_options=ecs.CloudMapOptions(\n        cloud_map_namespace=namespace,\n        container=container_definition,\n        container_port=123,\n        dns_record_type=servicediscovery.DnsRecordType.A,\n        dns_ttl=cdk.Duration.minutes(30),\n        failure_threshold=123,\n        name=\"name\"\n    ),\n    cluster=cluster,\n    desired_count=123,\n    enable_eCSManaged_tags=False,\n    health_check_grace_period=cdk.Duration.minutes(30),\n    load_balancers=[ecs_patterns.NetworkLoadBalancerProps(\n        listeners=[ecs_patterns.NetworkListenerProps(\n            name=\"name\",\n\n            # the properties below are optional\n            port=123\n        )],\n        name=\"name\",\n\n        # the properties below are optional\n        domain_name=\"domainName\",\n        domain_zone=hosted_zone,\n        public_load_balancer=False\n    )],\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    service_name=\"serviceName\",\n    target_groups=[ecs_patterns.NetworkTargetProps(\n        container_port=123,\n\n        # the properties below are optional\n        listener=\"listener\"\n    )],\n    task_image_options=ecs_patterns.NetworkLoadBalancedTaskImageProps(\n        image=container_image,\n\n        # the properties below are optional\n        container_name=\"containerName\",\n        container_ports=[123],\n        docker_labels={\n            \"docker_labels_key\": \"dockerLabels\"\n        },\n        enable_logging=False,\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        execution_role=role,\n        family=\"family\",\n        log_driver=log_driver,\n        secrets={\n            \"secrets_key\": secret\n        },\n        task_role=role\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nRole role;\nSecret secret;\nVpc vpc;\nNetworkMultipleTargetGroupsServiceBaseProps networkMultipleTargetGroupsServiceBaseProps = new NetworkMultipleTargetGroupsServiceBaseProps {\n    CloudMapOptions = new CloudMapOptions {\n        CloudMapNamespace = namespace,\n        Container = containerDefinition,\n        ContainerPort = 123,\n        DnsRecordType = DnsRecordType.A,\n        DnsTtl = Duration.Minutes(30),\n        FailureThreshold = 123,\n        Name = \"name\"\n    },\n    Cluster = cluster,\n    DesiredCount = 123,\n    EnableECSManagedTags = false,\n    HealthCheckGracePeriod = Duration.Minutes(30),\n    LoadBalancers = new [] { new NetworkLoadBalancerProps {\n        Listeners = new [] { new NetworkListenerProps {\n            Name = \"name\",\n\n            // the properties below are optional\n            Port = 123\n        } },\n        Name = \"name\",\n\n        // the properties below are optional\n        DomainName = \"domainName\",\n        DomainZone = hostedZone,\n        PublicLoadBalancer = false\n    } },\n    PropagateTags = PropagatedTagSource.SERVICE,\n    ServiceName = \"serviceName\",\n    TargetGroups = new [] { new NetworkTargetProps {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        Listener = \"listener\"\n    } },\n    TaskImageOptions = new NetworkLoadBalancedTaskImageProps {\n        Image = containerImage,\n\n        // the properties below are optional\n        ContainerName = \"containerName\",\n        ContainerPorts = new [] { 123 },\n        DockerLabels = new Dictionary<string, string> {\n            { \"dockerLabelsKey\", \"dockerLabels\" }\n        },\n        EnableLogging = false,\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        ExecutionRole = role,\n        Family = \"family\",\n        LogDriver = logDriver,\n        Secrets = new Dictionary<string, Secret> {\n            { \"secretsKey\", secret }\n        },\n        TaskRole = role\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nContainerImage containerImage;\nHostedZone hostedZone;\nLogDriver logDriver;\nINamespace namespace;\nRole role;\nSecret secret;\nVpc vpc;\n\nNetworkMultipleTargetGroupsServiceBaseProps networkMultipleTargetGroupsServiceBaseProps = NetworkMultipleTargetGroupsServiceBaseProps.builder()\n        .cloudMapOptions(CloudMapOptions.builder()\n                .cloudMapNamespace(namespace)\n                .container(containerDefinition)\n                .containerPort(123)\n                .dnsRecordType(DnsRecordType.A)\n                .dnsTtl(Duration.minutes(30))\n                .failureThreshold(123)\n                .name(\"name\")\n                .build())\n        .cluster(cluster)\n        .desiredCount(123)\n        .enableECSManagedTags(false)\n        .healthCheckGracePeriod(Duration.minutes(30))\n        .loadBalancers(List.of(NetworkLoadBalancerProps.builder()\n                .listeners(List.of(NetworkListenerProps.builder()\n                        .name(\"name\")\n\n                        // the properties below are optional\n                        .port(123)\n                        .build()))\n                .name(\"name\")\n\n                // the properties below are optional\n                .domainName(\"domainName\")\n                .domainZone(hostedZone)\n                .publicLoadBalancer(false)\n                .build()))\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .serviceName(\"serviceName\")\n        .targetGroups(List.of(NetworkTargetProps.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .listener(\"listener\")\n                .build()))\n        .taskImageOptions(NetworkLoadBalancedTaskImageProps.builder()\n                .image(containerImage)\n\n                // the properties below are optional\n                .containerName(\"containerName\")\n                .containerPorts(List.of(123))\n                .dockerLabels(Map.of(\n                        \"dockerLabelsKey\", \"dockerLabels\"))\n                .enableLogging(false)\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .executionRole(role)\n                .family(\"family\")\n                .logDriver(logDriver)\n                .secrets(Map.of(\n                        \"secretsKey\", secret))\n                .taskRole(role)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\nconst networkMultipleTargetGroupsServiceBaseProps: ecs_patterns.NetworkMultipleTargetGroupsServiceBaseProps = {\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  loadBalancers: [{\n    listeners: [{\n      name: 'name',\n\n      // the properties below are optional\n      port: 123,\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    domainName: 'domainName',\n    domainZone: hostedZone,\n    publicLoadBalancer: false,\n  }],\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n  targetGroups: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    listener: 'listener',\n  }],\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPorts: [123],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps",
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkMultipleTargetGroupsServiceBaseProps: ecs_patterns.NetworkMultipleTargetGroupsServiceBaseProps = {\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  loadBalancers: [{\n    listeners: [{\n      name: 'name',\n\n      // the properties below are optional\n      port: 123,\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    domainName: 'domainName',\n    domainZone: hostedZone,\n    publicLoadBalancer: false,\n  }],\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n  targetGroups: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    listener: 'listener',\n  }],\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPorts: [123],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 17,
        "75": 100,
        "91": 3,
        "130": 9,
        "153": 10,
        "169": 10,
        "192": 4,
        "193": 9,
        "194": 8,
        "196": 2,
        "225": 10,
        "242": 10,
        "243": 10,
        "254": 7,
        "255": 7,
        "256": 7,
        "281": 41,
        "290": 1
      },
      "fqnsFingerprint": "d61ccdda6addb97c01a8d2c38995fdf8650133694d25cd9461f6a9dc9bfcd985"
    },
    "94e7b346e77c2b4bf20651bcbe620c5c575a6b367def827eb36cc46b50f5592f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\nnetwork_target_props = ecs_patterns.NetworkTargetProps(\n    container_port=123,\n\n    # the properties below are optional\n    listener=\"listener\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nNetworkTargetProps networkTargetProps = new NetworkTargetProps {\n    ContainerPort = 123,\n\n    // the properties below are optional\n    Listener = \"listener\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nNetworkTargetProps networkTargetProps = NetworkTargetProps.builder()\n        .containerPort(123)\n\n        // the properties below are optional\n        .listener(\"listener\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nconst networkTargetProps: ecs_patterns.NetworkTargetProps = {\n  containerPort: 123,\n\n  // the properties below are optional\n  listener: 'listener',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.NetworkTargetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.NetworkTargetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkTargetProps: ecs_patterns.NetworkTargetProps = {\n  containerPort: 123,\n\n  // the properties below are optional\n  listener: 'listener',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2ee165c47835b1daac31a3ff5e80226bb3e834f1d4edebd7281b87926cba47bc"
    },
    "7f7db9b4b70b205063adfe9912c7b16c388c65906af329ef84e84c9097cfdad5": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nqueue_processing_ec2_service = ecs_patterns.QueueProcessingEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    command=[\"-c\", \"4\", \"amazon.com\"],\n    enable_logging=False,\n    desired_task_count=2,\n    environment={\n        \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n        \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n    },\n    max_scaling_capacity=5,\n    container_name=\"test\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nQueueProcessingEc2Service queueProcessingEc2Service = new QueueProcessingEc2Service(this, \"Service\", new QueueProcessingEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    Command = new [] { \"-c\", \"4\", \"amazon.com\" },\n    EnableLogging = false,\n    DesiredTaskCount = 2,\n    Environment = new Dictionary<string, string> {\n        { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n        { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n    },\n    MaxScalingCapacity = 5,\n    ContainerName = \"test\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nQueueProcessingEc2Service queueProcessingEc2Service = QueueProcessingEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .command(List.of(\"-c\", \"4\", \"amazon.com\"))\n        .enableLogging(false)\n        .desiredTaskCount(2)\n        .environment(Map.of(\n                \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n        .maxScalingCapacity(5)\n        .containerName(\"test\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2Service",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 20,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fe8656ce673d5abd1cd94f499cfc93707b46bef4750e9f4c8ae85f2220966a2"
    },
    "4f2278f8bc5feecbee4c9abeec2d70934211de0d7876ac69dee85270a8d109ca": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nqueue_processing_ec2_service = ecs_patterns.QueueProcessingEc2Service(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    command=[\"-c\", \"4\", \"amazon.com\"],\n    enable_logging=False,\n    desired_task_count=2,\n    environment={\n        \"TEST_ENVIRONMENT_VARIABLE1\": \"test environment variable 1 value\",\n        \"TEST_ENVIRONMENT_VARIABLE2\": \"test environment variable 2 value\"\n    },\n    max_scaling_capacity=5,\n    container_name=\"test\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nQueueProcessingEc2Service queueProcessingEc2Service = new QueueProcessingEc2Service(this, \"Service\", new QueueProcessingEc2ServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    Command = new [] { \"-c\", \"4\", \"amazon.com\" },\n    EnableLogging = false,\n    DesiredTaskCount = 2,\n    Environment = new Dictionary<string, string> {\n        { \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\" },\n        { \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\" }\n    },\n    MaxScalingCapacity = 5,\n    ContainerName = \"test\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nQueueProcessingEc2Service queueProcessingEc2Service = QueueProcessingEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .command(List.of(\"-c\", \"4\", \"amazon.com\"))\n        .enableLogging(false)\n        .desiredTaskCount(2)\n        .environment(Map.of(\n                \"TEST_ENVIRONMENT_VARIABLE1\", \"test environment variable 1 value\",\n                \"TEST_ENVIRONMENT_VARIABLE2\", \"test environment variable 2 value\"))\n        .maxScalingCapacity(5)\n        .containerName(\"test\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2Service",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 20,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7fe8656ce673d5abd1cd94f499cfc93707b46bef4750e9f4c8ae85f2220966a2"
    },
    "c64a115364c3e8d53a411fa9db3deb7bb42844a4f15b7c68336b2ebc8d0a8d69": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\ncluster.enable_fargate_capacity_providers()\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.EnableFargateCapacityProviders();\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.enableFargateCapacityProviders();\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.Cluster#enableFargateCapacityProviders",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "03c4fddc147ae932e2d6599ac331acccefa07c72134b10eca7fd91cc45d398cc"
    },
    "7ee612449a4dddd483c2caa4dbe9cc238a01e28b6ddaed30b6de15137fdbe02d": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\ncluster.enable_fargate_capacity_providers()\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.EnableFargateCapacityProviders();\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.enableFargateCapacityProviders();\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.Cluster#enableFargateCapacityProviders",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "03c4fddc147ae932e2d6599ac331acccefa07c72134b10eca7fd91cc45d398cc"
    },
    "c379adf1196feba094d8149c909e88e300191644b83ebbedc434fc4150d6eaae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# cluster: ecs.Cluster\n# container_image: ecs.ContainerImage\n# log_driver: ecs.LogDriver\n# queue: sqs.Queue\n# secret: ecs.Secret\n# vpc: ec2.Vpc\n\nqueue_processing_service_base_props = ecs_patterns.QueueProcessingServiceBaseProps(\n    image=container_image,\n\n    # the properties below are optional\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"capacityProvider\",\n\n        # the properties below are optional\n        base=123,\n        weight=123\n    )],\n    circuit_breaker=ecs.DeploymentCircuitBreaker(\n        rollback=False\n    ),\n    cluster=cluster,\n    command=[\"command\"],\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.ECS\n    ),\n    desired_task_count=123,\n    enable_eCSManaged_tags=False,\n    enable_logging=False,\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    family=\"family\",\n    log_driver=log_driver,\n    max_healthy_percent=123,\n    max_receive_count=123,\n    max_scaling_capacity=123,\n    min_healthy_percent=123,\n    min_scaling_capacity=123,\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    queue=queue,\n    retention_period=cdk.Duration.minutes(30),\n    scaling_steps=[ScalingInterval(\n        change=123,\n\n        # the properties below are optional\n        lower=123,\n        upper=123\n    )],\n    secrets={\n        \"secrets_key\": secret\n    },\n    service_name=\"serviceName\",\n    visibility_timeout=cdk.Duration.minutes(30),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nCluster cluster;\nContainerImage containerImage;\nLogDriver logDriver;\nQueue queue;\nSecret secret;\nVpc vpc;\nQueueProcessingServiceBaseProps queueProcessingServiceBaseProps = new QueueProcessingServiceBaseProps {\n    Image = containerImage,\n\n    // the properties below are optional\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"capacityProvider\",\n\n        // the properties below are optional\n        Base = 123,\n        Weight = 123\n    } },\n    CircuitBreaker = new DeploymentCircuitBreaker {\n        Rollback = false\n    },\n    Cluster = cluster,\n    Command = new [] { \"command\" },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.ECS\n    },\n    DesiredTaskCount = 123,\n    EnableECSManagedTags = false,\n    EnableLogging = false,\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    Family = \"family\",\n    LogDriver = logDriver,\n    MaxHealthyPercent = 123,\n    MaxReceiveCount = 123,\n    MaxScalingCapacity = 123,\n    MinHealthyPercent = 123,\n    MinScalingCapacity = 123,\n    PropagateTags = PropagatedTagSource.SERVICE,\n    Queue = queue,\n    RetentionPeriod = Duration.Minutes(30),\n    ScalingSteps = new [] { new ScalingInterval {\n        Change = 123,\n\n        // the properties below are optional\n        Lower = 123,\n        Upper = 123\n    } },\n    Secrets = new Dictionary<string, Secret> {\n        { \"secretsKey\", secret }\n    },\n    ServiceName = \"serviceName\",\n    VisibilityTimeout = Duration.Minutes(30),\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nCluster cluster;\nContainerImage containerImage;\nLogDriver logDriver;\nQueue queue;\nSecret secret;\nVpc vpc;\n\nQueueProcessingServiceBaseProps queueProcessingServiceBaseProps = QueueProcessingServiceBaseProps.builder()\n        .image(containerImage)\n\n        // the properties below are optional\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"capacityProvider\")\n\n                // the properties below are optional\n                .base(123)\n                .weight(123)\n                .build()))\n        .circuitBreaker(DeploymentCircuitBreaker.builder()\n                .rollback(false)\n                .build())\n        .cluster(cluster)\n        .command(List.of(\"command\"))\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.ECS)\n                .build())\n        .desiredTaskCount(123)\n        .enableECSManagedTags(false)\n        .enableLogging(false)\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .family(\"family\")\n        .logDriver(logDriver)\n        .maxHealthyPercent(123)\n        .maxReceiveCount(123)\n        .maxScalingCapacity(123)\n        .minHealthyPercent(123)\n        .minScalingCapacity(123)\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .queue(queue)\n        .retentionPeriod(Duration.minutes(30))\n        .scalingSteps(List.of(ScalingInterval.builder()\n                .change(123)\n\n                // the properties below are optional\n                .lower(123)\n                .upper(123)\n                .build()))\n        .secrets(Map.of(\n                \"secretsKey\", secret))\n        .serviceName(\"serviceName\")\n        .visibilityTimeout(Duration.minutes(30))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const queue: sqs.Queue;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\nconst queueProcessingServiceBaseProps: ecs_patterns.QueueProcessingServiceBaseProps = {\n  image: containerImage,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cluster: cluster,\n  command: ['command'],\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredTaskCount: 123,\n  enableECSManagedTags: false,\n  enableLogging: false,\n  environment: {\n    environmentKey: 'environment',\n  },\n  family: 'family',\n  logDriver: logDriver,\n  maxHealthyPercent: 123,\n  maxReceiveCount: 123,\n  maxScalingCapacity: 123,\n  minHealthyPercent: 123,\n  minScalingCapacity: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  queue: queue,\n  retentionPeriod: cdk.Duration.minutes(30),\n  scalingSteps: [{\n    change: 123,\n\n    // the properties below are optional\n    lower: 123,\n    upper: 123,\n  }],\n  secrets: {\n    secretsKey: secret,\n  },\n  serviceName: 'serviceName',\n  visibilityTimeout: cdk.Duration.minutes(30),\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#ECS",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const queue: sqs.Queue;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingServiceBaseProps: ecs_patterns.QueueProcessingServiceBaseProps = {\n  image: containerImage,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cluster: cluster,\n  command: ['command'],\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredTaskCount: 123,\n  enableECSManagedTags: false,\n  enableLogging: false,\n  environment: {\n    environmentKey: 'environment',\n  },\n  family: 'family',\n  logDriver: logDriver,\n  maxHealthyPercent: 123,\n  maxReceiveCount: 123,\n  maxScalingCapacity: 123,\n  minHealthyPercent: 123,\n  minScalingCapacity: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  queue: queue,\n  retentionPeriod: cdk.Duration.minutes(30),\n  scalingSteps: [{\n    change: 123,\n\n    // the properties below are optional\n    lower: 123,\n    upper: 123,\n  }],\n  secrets: {\n    secretsKey: secret,\n  },\n  serviceName: 'serviceName',\n  visibilityTimeout: cdk.Duration.minutes(30),\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 13,
        "10": 10,
        "75": 79,
        "91": 3,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 3,
        "193": 7,
        "194": 8,
        "196": 2,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 5,
        "255": 5,
        "256": 5,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "a859b4b7b3c784537997bfa1d78002e561b84a12d0541057f426ec305d2b1188"
    },
    "c86c9d3bceca837f54a769a96f2d202fe046f8579f948764daad8b343317b6a4": {
      "translations": {
        "python": {
          "source": "# Instantiate an Amazon EC2 Task to run at a scheduled interval\n# cluster: ecs.Cluster\n\necs_scheduled_task = ecs_patterns.ScheduledEc2Task(self, \"ScheduledTask\",\n    cluster=cluster,\n    scheduled_ec2_task_image_options=ecsPatterns.ScheduledEc2TaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=256,\n        environment={\"name\": \"TRIGGER\", \"value\": \"CloudWatch Events\"}\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    enabled=True,\n    rule_name=\"sample-scheduled-task-rule\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = new ScheduledEc2Task(this, \"ScheduledTask\", new ScheduledEc2TaskProps {\n    Cluster = cluster,\n    ScheduledEc2TaskImageOptions = new ScheduledEc2TaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 256,\n        Environment = new Dictionary<string, string> { { \"name\", \"TRIGGER\" }, { \"value\", \"CloudWatch Events\" } }\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    Enabled = true,\n    RuleName = \"sample-scheduled-task-rule\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = ScheduledEc2Task.Builder.create(this, \"ScheduledTask\")\n        .cluster(cluster)\n        .scheduledEc2TaskImageOptions(ScheduledEc2TaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(256)\n                .environment(Map.of(\"name\", \"TRIGGER\", \"value\", \"CloudWatch Events\"))\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .enabled(true)\n        .ruleName(\"sample-scheduled-task-rule\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 22,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b52d9b1bf5968ab37b0842a5266b0ccf14a26310d5362d556d7cfe3486ef51b8"
    },
    "c161ef6f621ccbe6d9047be61b39ae2ecca1a683655100e9b35798716b2c9eac": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\n# ec2_task_definition: ecs.Ec2TaskDefinition\n\nscheduled_ec2_task_definition_options = ecs_patterns.ScheduledEc2TaskDefinitionOptions(\n    task_definition=ec2_task_definition\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nEc2TaskDefinition ec2TaskDefinition;\n\nScheduledEc2TaskDefinitionOptions scheduledEc2TaskDefinitionOptions = new ScheduledEc2TaskDefinitionOptions {\n    TaskDefinition = ec2TaskDefinition\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nEc2TaskDefinition ec2TaskDefinition;\n\nScheduledEc2TaskDefinitionOptions scheduledEc2TaskDefinitionOptions = ScheduledEc2TaskDefinitionOptions.builder()\n        .taskDefinition(ec2TaskDefinition)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const ec2TaskDefinition: ecs.Ec2TaskDefinition;\nconst scheduledEc2TaskDefinitionOptions: ecs_patterns.ScheduledEc2TaskDefinitionOptions = {\n  taskDefinition: ec2TaskDefinition,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskDefinitionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskDefinitionOptions",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const ec2TaskDefinition: ecs.Ec2TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scheduledEc2TaskDefinitionOptions: ecs_patterns.ScheduledEc2TaskDefinitionOptions = {\n  taskDefinition: ec2TaskDefinition,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5b81e0f760350b7fcb30f4393c56ec6edd52b545c1b7890fb48d842aceaa6afd"
    },
    "14f1f624da6a81d8f3df741b65b13a2a3d10295ead19f9d962548591d3c7670d": {
      "translations": {
        "python": {
          "source": "# Instantiate an Amazon EC2 Task to run at a scheduled interval\n# cluster: ecs.Cluster\n\necs_scheduled_task = ecs_patterns.ScheduledEc2Task(self, \"ScheduledTask\",\n    cluster=cluster,\n    scheduled_ec2_task_image_options=ecsPatterns.ScheduledEc2TaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=256,\n        environment={\"name\": \"TRIGGER\", \"value\": \"CloudWatch Events\"}\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    enabled=True,\n    rule_name=\"sample-scheduled-task-rule\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = new ScheduledEc2Task(this, \"ScheduledTask\", new ScheduledEc2TaskProps {\n    Cluster = cluster,\n    ScheduledEc2TaskImageOptions = new ScheduledEc2TaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 256,\n        Environment = new Dictionary<string, string> { { \"name\", \"TRIGGER\" }, { \"value\", \"CloudWatch Events\" } }\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    Enabled = true,\n    RuleName = \"sample-scheduled-task-rule\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = ScheduledEc2Task.Builder.create(this, \"ScheduledTask\")\n        .cluster(cluster)\n        .scheduledEc2TaskImageOptions(ScheduledEc2TaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(256)\n                .environment(Map.of(\"name\", \"TRIGGER\", \"value\", \"CloudWatch Events\"))\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .enabled(true)\n        .ruleName(\"sample-scheduled-task-rule\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 22,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b52d9b1bf5968ab37b0842a5266b0ccf14a26310d5362d556d7cfe3486ef51b8"
    },
    "c26198caf3de0bd0481101706678754cf3fafc904c7308a18bbb2c52dd081935": {
      "translations": {
        "python": {
          "source": "# Instantiate an Amazon EC2 Task to run at a scheduled interval\n# cluster: ecs.Cluster\n\necs_scheduled_task = ecs_patterns.ScheduledEc2Task(self, \"ScheduledTask\",\n    cluster=cluster,\n    scheduled_ec2_task_image_options=ecsPatterns.ScheduledEc2TaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=256,\n        environment={\"name\": \"TRIGGER\", \"value\": \"CloudWatch Events\"}\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    enabled=True,\n    rule_name=\"sample-scheduled-task-rule\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = new ScheduledEc2Task(this, \"ScheduledTask\", new ScheduledEc2TaskProps {\n    Cluster = cluster,\n    ScheduledEc2TaskImageOptions = new ScheduledEc2TaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 256,\n        Environment = new Dictionary<string, string> { { \"name\", \"TRIGGER\" }, { \"value\", \"CloudWatch Events\" } }\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    Enabled = true,\n    RuleName = \"sample-scheduled-task-rule\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\nCluster cluster;\n\nScheduledEc2Task ecsScheduledTask = ScheduledEc2Task.Builder.create(this, \"ScheduledTask\")\n        .cluster(cluster)\n        .scheduledEc2TaskImageOptions(ScheduledEc2TaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(256)\n                .environment(Map.of(\"name\", \"TRIGGER\", \"value\", \"CloudWatch Events\"))\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .enabled(true)\n        .ruleName(\"sample-scheduled-task-rule\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 22,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b52d9b1bf5968ab37b0842a5266b0ccf14a26310d5362d556d7cfe3486ef51b8"
    },
    "8776bbb98775c903207cb79cab09674f1db0505b207b80ce1050f27de62dec2c": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "133f19a7c58c0f8b9b7c08c1bae8b73bc7a3b5eccc7c000892275fe8a58220e7"
    },
    "c37826f14c20864d2ef4ebdfdc63f568aa0b990c1ed5c78ce07d1fd6a17a4911": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\n# fargate_task_definition: ecs.FargateTaskDefinition\n\nscheduled_fargate_task_definition_options = ecs_patterns.ScheduledFargateTaskDefinitionOptions(\n    task_definition=fargate_task_definition\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nFargateTaskDefinition fargateTaskDefinition;\n\nScheduledFargateTaskDefinitionOptions scheduledFargateTaskDefinitionOptions = new ScheduledFargateTaskDefinitionOptions {\n    TaskDefinition = fargateTaskDefinition\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nFargateTaskDefinition fargateTaskDefinition;\n\nScheduledFargateTaskDefinitionOptions scheduledFargateTaskDefinitionOptions = ScheduledFargateTaskDefinitionOptions.builder()\n        .taskDefinition(fargateTaskDefinition)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const fargateTaskDefinition: ecs.FargateTaskDefinition;\nconst scheduledFargateTaskDefinitionOptions: ecs_patterns.ScheduledFargateTaskDefinitionOptions = {\n  taskDefinition: fargateTaskDefinition,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskDefinitionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskDefinitionOptions",
        "@aws-cdk/aws-ecs.FargateTaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const fargateTaskDefinition: ecs.FargateTaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTaskDefinitionOptions: ecs_patterns.ScheduledFargateTaskDefinitionOptions = {\n  taskDefinition: fargateTaskDefinition,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8980f4aec3bfc8b536725992650c35ab6d798f356e0506145c28f56896753c3a"
    },
    "19a45f784aa39d7a53eb1dbc7b61277dc5ae393ea6963a990ce0e69d6975b4e7": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "133f19a7c58c0f8b9b7c08c1bae8b73bc7a3b5eccc7c000892275fe8a58220e7"
    },
    "8947219633dc11014feb2939b7e649a7982578d9d63be4f197cc7042822faf37": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "133f19a7c58c0f8b9b7c08c1bae8b73bc7a3b5eccc7c000892275fe8a58220e7"
    },
    "29554ec9853fac63e7b4ae0996f8644d9bfe4ad6af9d292041ee2b8a9340f119": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_applicationautoscaling as appscaling\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\n# cluster: ecs.Cluster\n# schedule: appscaling.Schedule\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nscheduled_task_base_props = ecs_patterns.ScheduledTaskBaseProps(\n    schedule=schedule,\n\n    # the properties below are optional\n    cluster=cluster,\n    desired_task_count=123,\n    enabled=False,\n    rule_name=\"ruleName\",\n    security_groups=[security_group],\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ApplicationAutoScaling;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nCluster cluster;\nSchedule schedule;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nScheduledTaskBaseProps scheduledTaskBaseProps = new ScheduledTaskBaseProps {\n    Schedule = schedule,\n\n    // the properties below are optional\n    Cluster = cluster,\n    DesiredTaskCount = 123,\n    Enabled = false,\n    RuleName = \"ruleName\",\n    SecurityGroups = new [] { securityGroup },\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.applicationautoscaling.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nCluster cluster;\nSchedule schedule;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nScheduledTaskBaseProps scheduledTaskBaseProps = ScheduledTaskBaseProps.builder()\n        .schedule(schedule)\n\n        // the properties below are optional\n        .cluster(cluster)\n        .desiredTaskCount(123)\n        .enabled(false)\n        .ruleName(\"ruleName\")\n        .securityGroups(List.of(securityGroup))\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const schedule: appscaling.Schedule;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst scheduledTaskBaseProps: ecs_patterns.ScheduledTaskBaseProps = {\n  schedule: schedule,\n\n  // the properties below are optional\n  cluster: cluster,\n  desiredTaskCount: 123,\n  enabled: false,\n  ruleName: 'ruleName',\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const schedule: appscaling.Schedule;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scheduledTaskBaseProps: ecs_patterns.ScheduledTaskBaseProps = {\n  schedule: schedule,\n\n  // the properties below are optional\n  cluster: cluster,\n  desiredTaskCount: 123,\n  enabled: false,\n  ruleName: 'ruleName',\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 49,
        "91": 2,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 4,
        "193": 2,
        "194": 2,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "50c7dc5e7e7d2565cdc269ef057c99c70ef74428e93a573cbaf23367ac98c6ca"
    },
    "d59f64c0dbc30350763e1e61fce09a30bd074174aeb1b784d44b4eeb3ef331ce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\n\n# container_image: ecs.ContainerImage\n# log_driver: ecs.LogDriver\n# secret: ecs.Secret\n\nscheduled_task_image_props = ecs_patterns.ScheduledTaskImageProps(\n    image=container_image,\n\n    # the properties below are optional\n    command=[\"command\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    log_driver=log_driver,\n    secrets={\n        \"secrets_key\": secret\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nContainerImage containerImage;\nLogDriver logDriver;\nSecret secret;\n\nScheduledTaskImageProps scheduledTaskImageProps = new ScheduledTaskImageProps {\n    Image = containerImage,\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    LogDriver = logDriver,\n    Secrets = new Dictionary<string, Secret> {\n        { \"secretsKey\", secret }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nContainerImage containerImage;\nLogDriver logDriver;\nSecret secret;\n\nScheduledTaskImageProps scheduledTaskImageProps = ScheduledTaskImageProps.builder()\n        .image(containerImage)\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .logDriver(logDriver)\n        .secrets(Map.of(\n                \"secretsKey\", secret))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\nconst scheduledTaskImageProps: ecs_patterns.ScheduledTaskImageProps = {\n  image: containerImage,\n\n  // the properties below are optional\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  logDriver: logDriver,\n  secrets: {\n    secretsKey: secret,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledTaskImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ScheduledTaskImageProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.Secret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scheduledTaskImageProps: ecs_patterns.ScheduledTaskImageProps = {\n  image: containerImage,\n\n  // the properties below are optional\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  logDriver: logDriver,\n  secrets: {\n    secretsKey: secret,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 24,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "dc7ddf23f2edd8e97b2f6c56021c06e9f9ff854b853a36d11c79a63ab6b3d401"
    }
  }
}
