{
  "version": "2",
  "toolVersion": "1.52.1",
  "snippets": {
    "981ab0b752dc643ef7a6d0735e47fd1a5937787d40186716130a66177c659af7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigw\n\n# zone: route53.HostedZone\n# rest_api: apigw.LambdaRestApi\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(rest_api))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGateway(restApi))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGateway(restApi)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "862766fe00bdf4572a4d1966e3fa5317511172642baead1c7706ee7b26dc1274"
    },
    "25dce2843af8510dda2a33832cce79e6bbe661de94c6ef537223f202b1f39603": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigatewayv2 as apigwv2\n\n# zone: route53.HostedZone\n# domain_name: apigwv2.DomainName\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGatewayv2DomainProperties(domain_name.regional_domain_name, domain_name.regional_hosted_zone_id))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2;\n\nHostedZone zone;\nDomainName domainName;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGatewayv2DomainProperties(domainName.RegionalDomainName, domainName.RegionalHostedZoneId))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.*;\n\nHostedZone zone;\nDomainName domainName;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGatewayv2DomainProperties(domainName.getRegionalDomainName(), domainName.getRegionalHostedZoneId())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domainName: apigwv2.DomainName;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayv2DomainProperties(domainName.regionalDomainName, domainName.regionalHostedZoneId)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 31
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.DomainName#regionalDomainName",
        "@aws-cdk/aws-apigatewayv2.DomainName#regionalHostedZoneId",
        "@aws-cdk/aws-route53-targets.ApiGatewayv2DomainProperties",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domainName: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayv2DomainProperties(domainName.regionalDomainName, domainName.regionalHostedZoneId)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8587a29d26f81682691129712cd25a4791a53ef7d104a62c630f420899421e47"
    },
    "4410ac632ae81ff102579bf23af3fa70ba2161539980e8364d55c4348120e451": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# zone: route53.HostedZone\n# distribution: cloudfront.CloudFrontWebDistribution\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone zone;\nCloudFrontWebDistribution distribution;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone zone;\nCloudFrontWebDistribution distribution;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const zone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 45
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const zone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a29189ecf0e8adb1bb8fef422dd8010e71f2fe2459ffb85906d552ae0c050992"
    },
    "76cbdbd0d6ee0e2643f66c6a78051e888d731e24f30b64f07a87d52a4fcac21f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# zone: route53.HostedZone\n# lb: elbv2.ApplicationLoadBalancer\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.LoadBalancerTarget(lb))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nHostedZone zone;\nApplicationLoadBalancer lb;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new LoadBalancerTarget(lb))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\nHostedZone zone;\nApplicationLoadBalancer lb;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new LoadBalancerTarget(lb)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.LoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ILoadBalancerV2",
        "@aws-cdk/aws-route53-targets.LoadBalancerTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.LoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1312e9a5822a38db9cf638d0a867b17527545634734ff1746987d97b4e998d50"
    },
    "e059329b223b8e2ff0124ab1b3d2dd848ff632a6d7f1f35f05bb1423704b1e4b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancing as elb\n\n# zone: route53.HostedZone\n# lb: elb.LoadBalancer\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ClassicLoadBalancerTarget(lb))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancing;\n\nHostedZone zone;\nLoadBalancer lb;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ClassicLoadBalancerTarget(lb))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancing.*;\n\nHostedZone zone;\nLoadBalancer lb;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ClassicLoadBalancerTarget(lb)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elb.LoadBalancer;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ClassicLoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 74
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-route53-targets.ClassicLoadBalancerTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elb.LoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ClassicLoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "eb4b00981ada3b035db5626a59e70e066724587890cecdb193159007cfe74e56"
    },
    "e68b967969739536db372680e61ca4b0cae19e075f0eefd701203cff1f52e1bb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\n\n# zone: route53.HostedZone\n# accelerator: globalaccelerator.Accelerator\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.GlobalAcceleratorTarget(accelerator))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\n\nHostedZone zone;\nAccelerator accelerator;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new GlobalAcceleratorTarget(accelerator))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\n\nHostedZone zone;\nAccelerator accelerator;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new GlobalAcceleratorTarget(accelerator)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n\ndeclare const zone: route53.HostedZone;\ndeclare const accelerator: globalaccelerator.Accelerator;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorTarget(accelerator)),\n  // or - route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorDomainTarget('xyz.awsglobalaccelerator.com')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 93
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.IAccelerator",
        "@aws-cdk/aws-route53-targets.GlobalAcceleratorTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n\ndeclare const zone: route53.HostedZone;\ndeclare const accelerator: globalaccelerator.Accelerator;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorTarget(accelerator)),\n  // or - route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorDomainTarget('xyz.awsglobalaccelerator.com')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3fbf03624868f615dcb8102bc1d8b363fa1d2b2869cf6d030d8372f162cf763e"
    },
    "a32ff42e381e61a0955d380db4c81c2757810aa7b2407032d731a9dea9b1a610": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n# zone: route53.HostedZone\n# interface_vpc_endpoint: ec2.InterfaceVpcEndpoint\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.InterfaceVpcEndpointTarget(interface_vpc_endpoint))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\nHostedZone zone;\nInterfaceVpcEndpoint interfaceVpcEndpoint;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new InterfaceVpcEndpointTarget(interfaceVpcEndpoint))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\nHostedZone zone;\nInterfaceVpcEndpoint interfaceVpcEndpoint;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new InterfaceVpcEndpointTarget(interfaceVpcEndpoint)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const interfaceVpcEndpoint: ec2.InterfaceVpcEndpoint;\n\nnew route53.ARecord(this, \"AliasRecord\", {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.InterfaceVpcEndpointTarget(interfaceVpcEndpoint)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 113
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpoint",
        "@aws-cdk/aws-route53-targets.InterfaceVpcEndpointTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const interfaceVpcEndpoint: ec2.InterfaceVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, \"AliasRecord\", {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.InterfaceVpcEndpointTarget(interfaceVpcEndpoint)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "71880ebc8013b474bff7dcd2851eba89d3ca5b1fdf5a6b762e54a72c8ae0ef2a"
    },
    "24b8141b49001ff168bce57e3266b6d4a875511a4115619b24afa6590379b4a0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\n\nrecord_name = \"www\"\ndomain_name = \"example.com\"\n\nbucket_website = s3.Bucket(self, \"BucketWebsite\",\n    bucket_name=[record_name, domain_name].join(\".\"),  # www.example.com\n    public_read_access=True,\n    website_index_document=\"index.html\"\n)\n\nzone = route53.HostedZone.from_lookup(self, \"Zone\", domain_name=domain_name) # example.com\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    record_name=record_name,  # www\n    target=route53.RecordTarget.from_alias(targets.BucketWebsiteTarget(bucket_website))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\n\nstring recordName = \"www\";\nstring domainName = \"example.com\";\n\nBucket bucketWebsite = new Bucket(this, \"BucketWebsite\", new BucketProps {\n    BucketName = new [] { recordName, domainName }.Join(\".\"),  // www.example.com\n    PublicReadAccess = true,\n    WebsiteIndexDocument = \"index.html\"\n});\n\nIHostedZone zone = HostedZone.FromLookup(this, \"Zone\", new HostedZoneProviderProps { DomainName = domainName }); // example.com\n\n // example.com\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    RecordName = recordName,  // www\n    Target = RecordTarget.FromAlias(new BucketWebsiteTarget(bucketWebsite))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\n\nString recordName = \"www\";\nString domainName = \"example.com\";\n\nBucket bucketWebsite = Bucket.Builder.create(this, \"BucketWebsite\")\n        .bucketName(List.of(recordName, domainName).join(\".\")) // www.example.com\n        .publicReadAccess(true)\n        .websiteIndexDocument(\"index.html\")\n        .build();\n\nIHostedZone zone = HostedZone.fromLookup(this, \"Zone\", HostedZoneProviderProps.builder().domainName(domainName).build()); // example.com\n\n // example.com\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .recordName(recordName) // www\n        .target(RecordTarget.fromAlias(new BucketWebsiteTarget(bucketWebsite)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 130
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.BucketWebsiteTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "87e4c940b5af60a465fd341e22d91aef6363fdf9b34f748166ecfa6d62c1e647"
    },
    "8e96062bf82cc9567901fb9961bd982a5395e46e42bd1c39d27d22b69b87299d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\n\n# zone: route53.HostedZone\n# domain: cognito.UserPoolDomain\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.UserPoolDomainTarget(domain))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\n\nHostedZone zone;\nUserPoolDomain domain;\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new UserPoolDomainTarget(domain))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\n\nHostedZone zone;\nUserPoolDomain domain;\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new UserPoolDomainTarget(domain)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domain: cognito.UserPoolDomain;\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.UserPoolDomainTarget(domain)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 153
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-route53-targets.UserPoolDomainTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domain: cognito.UserPoolDomain;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.UserPoolDomainTarget(domain)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89b22831acba7ad82064d24ec429b9bee0fc1a354281195ab1c8dab9cf74bd2f"
    },
    "3370482fcf77c3bff9591e0d58dfe3aaf060c72e5046eaf72d93bea2a13ce56a": {
      "translations": {
        "python": {
          "source": "# zone: route53.HostedZone\n# record: route53.ARecord\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.Route53RecordTarget(record))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone zone;\nARecord record;\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new Route53RecordTarget(record))\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone zone;\nARecord record;\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new Route53RecordTarget(record)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const zone: route53.HostedZone;\ndeclare const record: route53.ARecord;\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.Route53RecordTarget(record)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 166
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.Route53RecordTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.IRecordSet",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const zone: route53.HostedZone;\ndeclare const record: route53.ARecord;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.Route53RecordTarget(record)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2e171fa35fdb4672cf720546b873b39452767ca8b685cf1d7eac677e64db8fad"
    },
    "8c49d7110bcc7a0bdecd7683341d315960a8038bee94d3ef42efbe03ac9e7b88": {
      "translations": {
        "python": {
          "source": "# zone: route53.HostedZone\n# ebs_environment_url: str\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ElasticBeanstalkEnvironmentEndpointTarget(ebs_environment_url))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone zone;\nstring ebsEnvironmentUrl;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl))\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone zone;\nString ebsEnvironmentUrl;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const zone: route53.HostedZone;\ndeclare const ebsEnvironmentUrl: string;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53-targets"
        },
        "field": {
          "field": "markdown",
          "line": 179
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.ElasticBeanstalkEnvironmentEndpointTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const zone: route53.HostedZone;\ndeclare const ebsEnvironmentUrl: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "104": 1,
        "130": 2,
        "143": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5d17cd508b55b3eb36ed0826756660527b31c24f30ec628c9538ee29527b871e"
    },
    "863181cae3d34796c200578826358a96814433a55eb64770f1d027f139368f8d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api: apigateway.RestApi\n# hosted_zone_for_example_com: Any\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.ApiGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "862766fe00bdf4572a4d1966e3fa5317511172642baead1c7706ee7b26dc1274"
    },
    "18e819575c3572c553449b45c464dd6f62d54ac7bafa3668776e89ae2de4f277": {
      "translations": {
        "python": {
          "source": "# hosted_zone_for_example_com: Any\n# domain_name: apigateway.DomainName\n\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGatewayDomain(domain_name))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "var hostedZoneForExampleCom;\nDomainName domainName;\n\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGatewayDomain(domainName))\n});",
          "version": "1"
        },
        "java": {
          "source": "Object hostedZoneForExampleCom;\nDomainName domainName;\n\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGatewayDomain(domainName)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.ApiGatewayDomain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IDomainName",
        "@aws-cdk/aws-route53-targets.ApiGatewayDomain",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "81589aae3274ab61bd3afdc1e8aab4460c90f2b8a81ad218dd038009dafa6031"
    },
    "80ddb6b3be29b2757187230605d031373fc76f6488fa4a4080cfebbbdeca3050": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigatewayv2 as apigwv2\n\n# zone: route53.HostedZone\n# domain_name: apigwv2.DomainName\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGatewayv2DomainProperties(domain_name.regional_domain_name, domain_name.regional_hosted_zone_id))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2;\n\nHostedZone zone;\nDomainName domainName;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGatewayv2DomainProperties(domainName.RegionalDomainName, domainName.RegionalHostedZoneId))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.*;\n\nHostedZone zone;\nDomainName domainName;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGatewayv2DomainProperties(domainName.getRegionalDomainName(), domainName.getRegionalHostedZoneId())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domainName: apigwv2.DomainName;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayv2DomainProperties(domainName.regionalDomainName, domainName.regionalHostedZoneId)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.ApiGatewayv2DomainProperties"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.DomainName#regionalDomainName",
        "@aws-cdk/aws-apigatewayv2.DomainName#regionalHostedZoneId",
        "@aws-cdk/aws-route53-targets.ApiGatewayv2DomainProperties",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domainName: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayv2DomainProperties(domainName.regionalDomainName, domainName.regionalHostedZoneId)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8587a29d26f81682691129712cd25a4791a53ef7d104a62c630f420899421e47"
    },
    "7785214bba78f84cb763aff47b47b057a4a80dbc70d04c22a2347d942b97fe6c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\n\nrecord_name = \"www\"\ndomain_name = \"example.com\"\n\nbucket_website = s3.Bucket(self, \"BucketWebsite\",\n    bucket_name=[record_name, domain_name].join(\".\"),  # www.example.com\n    public_read_access=True,\n    website_index_document=\"index.html\"\n)\n\nzone = route53.HostedZone.from_lookup(self, \"Zone\", domain_name=domain_name) # example.com\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    record_name=record_name,  # www\n    target=route53.RecordTarget.from_alias(targets.BucketWebsiteTarget(bucket_website))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\n\nstring recordName = \"www\";\nstring domainName = \"example.com\";\n\nBucket bucketWebsite = new Bucket(this, \"BucketWebsite\", new BucketProps {\n    BucketName = new [] { recordName, domainName }.Join(\".\"),  // www.example.com\n    PublicReadAccess = true,\n    WebsiteIndexDocument = \"index.html\"\n});\n\nIHostedZone zone = HostedZone.FromLookup(this, \"Zone\", new HostedZoneProviderProps { DomainName = domainName }); // example.com\n\n // example.com\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    RecordName = recordName,  // www\n    Target = RecordTarget.FromAlias(new BucketWebsiteTarget(bucketWebsite))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\n\nString recordName = \"www\";\nString domainName = \"example.com\";\n\nBucket bucketWebsite = Bucket.Builder.create(this, \"BucketWebsite\")\n        .bucketName(List.of(recordName, domainName).join(\".\")) // www.example.com\n        .publicReadAccess(true)\n        .websiteIndexDocument(\"index.html\")\n        .build();\n\nIHostedZone zone = HostedZone.fromLookup(this, \"Zone\", HostedZoneProviderProps.builder().domainName(domainName).build()); // example.com\n\n // example.com\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .recordName(recordName) // www\n        .target(RecordTarget.fromAlias(new BucketWebsiteTarget(bucketWebsite)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.BucketWebsiteTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.BucketWebsiteTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "87e4c940b5af60a465fd341e22d91aef6363fdf9b34f748166ecfa6d62c1e647"
    },
    "9b47d04a1c7625af217399270f6468f2cf1957de0d41a44831ab2189138b9d4d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancing as elb\n\n# zone: route53.HostedZone\n# lb: elb.LoadBalancer\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ClassicLoadBalancerTarget(lb))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancing;\n\nHostedZone zone;\nLoadBalancer lb;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ClassicLoadBalancerTarget(lb))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancing.*;\n\nHostedZone zone;\nLoadBalancer lb;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ClassicLoadBalancerTarget(lb)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elb.LoadBalancer;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ClassicLoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.ClassicLoadBalancerTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-route53-targets.ClassicLoadBalancerTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elb.LoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ClassicLoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "eb4b00981ada3b035db5626a59e70e066724587890cecdb193159007cfe74e56"
    },
    "f31b6a53383a4f8c615c937b723593f74f0b10ddf5104cda1009252d9e384849": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone: route53.HostedZone\n# distribution: cloudfront.CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.CloudFrontTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1d8a62b522f94ab61ffd63234e40be6f5fe437194db0a95484d3ce7f8967a5ea"
    },
    "7d5148de87f61f035269b7076201d59b8b5a11e3742902222767f90c5be72092": {
      "translations": {
        "python": {
          "source": "# zone: route53.HostedZone\n# ebs_environment_url: str\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ElasticBeanstalkEnvironmentEndpointTarget(ebs_environment_url))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone zone;\nstring ebsEnvironmentUrl;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl))\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone zone;\nString ebsEnvironmentUrl;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const zone: route53.HostedZone;\ndeclare const ebsEnvironmentUrl: string;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.ElasticBeanstalkEnvironmentEndpointTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.ElasticBeanstalkEnvironmentEndpointTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const zone: route53.HostedZone;\ndeclare const ebsEnvironmentUrl: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ElasticBeanstalkEnvironmentEndpointTarget(ebsEnvironmentUrl)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "104": 1,
        "130": 2,
        "143": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5d17cd508b55b3eb36ed0826756660527b31c24f30ec628c9538ee29527b871e"
    },
    "37848ea02556207f3627c6b65102512d02242fc34fdb048721376b474d23967d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_route53_targets as route53_targets\n\nglobal_accelerator_domain_target = route53_targets.GlobalAcceleratorDomainTarget(\"acceleratorDomainName\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Route53.Targets;\n\nGlobalAcceleratorDomainTarget globalAcceleratorDomainTarget = new GlobalAcceleratorDomainTarget(\"acceleratorDomainName\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.route53.targets.*;\n\nGlobalAcceleratorDomainTarget globalAcceleratorDomainTarget = new GlobalAcceleratorDomainTarget(\"acceleratorDomainName\");",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53_targets from '@aws-cdk/aws-route53-targets';\nconst globalAcceleratorDomainTarget = new route53_targets.GlobalAcceleratorDomainTarget('acceleratorDomainName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.GlobalAcceleratorDomainTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.GlobalAcceleratorDomainTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as route53_targets from '@aws-cdk/aws-route53-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst globalAcceleratorDomainTarget = new route53_targets.GlobalAcceleratorDomainTarget('acceleratorDomainName');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "0435514ea23b50f7513ab370c2838002ca52bee100e44a5ebee74ade9d49be06"
    },
    "e187849ca5ae975cc82293f0c9f2e4304c06e78cad64cf3109e321665e9c0d3b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\n\n# zone: route53.HostedZone\n# accelerator: globalaccelerator.Accelerator\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.GlobalAcceleratorTarget(accelerator))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\n\nHostedZone zone;\nAccelerator accelerator;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new GlobalAcceleratorTarget(accelerator))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\n\nHostedZone zone;\nAccelerator accelerator;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new GlobalAcceleratorTarget(accelerator)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n\ndeclare const zone: route53.HostedZone;\ndeclare const accelerator: globalaccelerator.Accelerator;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorTarget(accelerator)),\n  // or - route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorDomainTarget('xyz.awsglobalaccelerator.com')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.GlobalAcceleratorTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.IAccelerator",
        "@aws-cdk/aws-route53-targets.GlobalAcceleratorTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n\ndeclare const zone: route53.HostedZone;\ndeclare const accelerator: globalaccelerator.Accelerator;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorTarget(accelerator)),\n  // or - route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorDomainTarget('xyz.awsglobalaccelerator.com')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3fbf03624868f615dcb8102bc1d8b363fa1d2b2869cf6d030d8372f162cf763e"
    },
    "115bd783e4ebfe92df04a78128bc87efaf5bd76b8b1224795dcf91b2ccdc8b6c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n# zone: route53.HostedZone\n# interface_vpc_endpoint: ec2.InterfaceVpcEndpoint\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.InterfaceVpcEndpointTarget(interface_vpc_endpoint))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\nHostedZone zone;\nInterfaceVpcEndpoint interfaceVpcEndpoint;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new InterfaceVpcEndpointTarget(interfaceVpcEndpoint))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\nHostedZone zone;\nInterfaceVpcEndpoint interfaceVpcEndpoint;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new InterfaceVpcEndpointTarget(interfaceVpcEndpoint)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const interfaceVpcEndpoint: ec2.InterfaceVpcEndpoint;\n\nnew route53.ARecord(this, \"AliasRecord\", {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.InterfaceVpcEndpointTarget(interfaceVpcEndpoint)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.InterfaceVpcEndpointTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpoint",
        "@aws-cdk/aws-route53-targets.InterfaceVpcEndpointTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const interfaceVpcEndpoint: ec2.InterfaceVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, \"AliasRecord\", {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.InterfaceVpcEndpointTarget(interfaceVpcEndpoint)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "71880ebc8013b474bff7dcd2851eba89d3ca5b1fdf5a6b762e54a72c8ae0ef2a"
    },
    "e9082e4951698ae7d2c44f7f74dfcb375c0a068d10b8376f02b369b653ab5c0f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# zone: route53.HostedZone\n# lb: elbv2.ApplicationLoadBalancer\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.LoadBalancerTarget(lb))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nHostedZone zone;\nApplicationLoadBalancer lb;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new LoadBalancerTarget(lb))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\nHostedZone zone;\nApplicationLoadBalancer lb;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new LoadBalancerTarget(lb)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.LoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.LoadBalancerTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ILoadBalancerV2",
        "@aws-cdk/aws-route53-targets.LoadBalancerTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const zone: route53.HostedZone;\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.LoadBalancerTarget(lb)),\n  // or - route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1312e9a5822a38db9cf638d0a867b17527545634734ff1746987d97b4e998d50"
    },
    "283dd070e8cdf7f6d22bef92dd62fdbd29f1de06f59833e77c3e77e7b7b89591": {
      "translations": {
        "python": {
          "source": "# zone: route53.HostedZone\n# record: route53.ARecord\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.Route53RecordTarget(record))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HostedZone zone;\nARecord record;\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new Route53RecordTarget(record))\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone zone;\nARecord record;\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new Route53RecordTarget(record)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const zone: route53.HostedZone;\ndeclare const record: route53.ARecord;\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.Route53RecordTarget(record)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.Route53RecordTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.Route53RecordTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.IRecordSet",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const zone: route53.HostedZone;\ndeclare const record: route53.ARecord;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.Route53RecordTarget(record)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2e171fa35fdb4672cf720546b873b39452767ca8b685cf1d7eac677e64db8fad"
    },
    "e11550e2dbbfcb7d611aff31463ffb12ca1c48f1df3ca6e5e99c8501ace72060": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\n\n# zone: route53.HostedZone\n# domain: cognito.UserPoolDomain\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.UserPoolDomainTarget(domain))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\n\nHostedZone zone;\nUserPoolDomain domain;\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new UserPoolDomainTarget(domain))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\n\nHostedZone zone;\nUserPoolDomain domain;\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new UserPoolDomainTarget(domain)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domain: cognito.UserPoolDomain;\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.UserPoolDomainTarget(domain)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53-targets.UserPoolDomainTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-route53-targets.UserPoolDomainTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const zone: route53.HostedZone;\ndeclare const domain: cognito.UserPoolDomain;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.UserPoolDomainTarget(domain)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89b22831acba7ad82064d24ec429b9bee0fc1a354281195ab1c8dab9cf74bd2f"
    }
  }
}
