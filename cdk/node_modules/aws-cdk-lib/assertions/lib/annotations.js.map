{
  "version": 3,
  "sources": ["annotations.ts"],
  "sourcesContent": ["import { Stack, Stage } from '../../core';\nimport { SynthesisMessage } from '../../cx-api';\nimport { Messages } from './private/message';\nimport { findMessage, hasMessage } from './private/messages';\n\n                                                                                                   \nexport class Annotations {\n                                                                                                                                                 \n  public static fromStack(stack: Stack): Annotations {\n    return new Annotations(toMessages(stack));\n  }\n\n  private readonly _messages: Messages;\n\n  private constructor(messages: SynthesisMessage[]) {\n    this._messages = convertArrayToMessagesType(messages);\n  }\n\n                                                                                                                                                                                                                                                                                                                              \n  public hasError(constructPath: string, message: any): void {\n    const matchError = hasMessage(this._messages, constructPath, constructMessage('error', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                 \n  public findError(constructPath: string, message: any): SynthesisMessage[] {\n    return convertMessagesTypeToArray(findMessage(this._messages, constructPath, constructMessage('error', message)) as Messages);\n  }\n\n                                                                                                                                                                                                                                                                                                                                      \n  public hasWarning(constructPath: string, message: any): void {\n    const matchError = hasMessage(this._messages, constructPath, constructMessage('warning', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                        \n  public findWarning(constructPath: string, message: any): SynthesisMessage[] {\n    return convertMessagesTypeToArray(findMessage(this._messages, constructPath, constructMessage('warning', message)) as Messages);\n  }\n\n                                                                                                                                                                                                                                                                                                                         \n  public hasInfo(constructPath: string, message: any): void {\n    const matchError = hasMessage(this._messages, constructPath, constructMessage('info', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                             \n  public findInfo(constructPath: string, message: any): SynthesisMessage[] {\n    return convertMessagesTypeToArray(findMessage(this._messages, constructPath, constructMessage('info', message)) as Messages);\n  }\n}\n\nfunction constructMessage(type: 'info' | 'warning' | 'error', message: any): {[key:string]: any } {\n  return {\n    level: type,\n    entry: {\n      data: message,\n    },\n  };\n}\n\nfunction convertArrayToMessagesType(messages: SynthesisMessage[]): Messages {\n  return messages.reduce((obj, item) => {\n    return {\n      ...obj,\n      [item.id]: item,\n    };\n  }, {}) as Messages;\n}\n\nfunction convertMessagesTypeToArray(messages: Messages): SynthesisMessage[] {\n  return Object.values(messages) as SynthesisMessage[];\n}\n\nfunction toMessages(stack: Stack): any {\n  const root = stack.node.root;\n  if (!Stage.isStage(root)) {\n    throw new Error('unexpected: all stacks must be part of a Stage or an App');\n  }\n\n  // to support incremental assertions (i.e. \"expect(stack).toNotContainSomething(); doSomething(); expect(stack).toContainSomthing()\")\n  const force = true;\n\n  const assembly = root.synth({ force });\n\n  return assembly.getStackArtifact(stack.artifactId).messages;\n}\n"],
  "mappings": "kNAAA,OAAA,QAAA,cAGA,WAAA,QAAA,sBAGA,iBAAwB,CAQtB,YAAoB,SAA4B,CAC9C,KAAK,UAAY,2BAA2B,gBAPhC,WAAU,MAAY,yDAC3B,GAAI,aAAY,WAAW,QAU7B,SAAS,cAAuB,QAAY,CACjD,KAAM,YAAa,WAAA,WAAW,KAAK,UAAW,cAAe,iBAAiB,QAAS,UACvF,GAAI,WACF,KAAM,IAAI,OAAM,YAKb,UAAU,cAAuB,QAAY,CAClD,MAAO,4BAA2B,WAAA,YAAY,KAAK,UAAW,cAAe,iBAAiB,QAAS,WAIlG,WAAW,cAAuB,QAAY,CACnD,KAAM,YAAa,WAAA,WAAW,KAAK,UAAW,cAAe,iBAAiB,UAAW,UACzF,GAAI,WACF,KAAM,IAAI,OAAM,YAKb,YAAY,cAAuB,QAAY,CACpD,MAAO,4BAA2B,WAAA,YAAY,KAAK,UAAW,cAAe,iBAAiB,UAAW,WAIpG,QAAQ,cAAuB,QAAY,CAChD,KAAM,YAAa,WAAA,WAAW,KAAK,UAAW,cAAe,iBAAiB,OAAQ,UACtF,GAAI,WACF,KAAM,IAAI,OAAM,YAKb,SAAS,cAAuB,QAAY,CACjD,MAAO,4BAA2B,WAAA,YAAY,KAAK,UAAW,cAAe,iBAAiB,OAAQ,YAhD1G,QAAA,YAAA,8GAoDA,0BAA0B,KAAoC,QAAY,CACxE,MAAO,CACL,MAAO,KACP,MAAO,CACL,KAAM,UAKZ,oCAAoC,SAA4B,CAC9D,MAAO,UAAS,OAAO,CAAC,IAAK,OACpB,KACF,KACF,KAAK,IAAK,OAEZ,IAGL,oCAAoC,SAAkB,CACpD,MAAO,QAAO,OAAO,UAGvB,oBAAoB,MAAY,CAC9B,KAAM,MAAO,MAAM,KAAK,KACxB,GAAI,CAAC,OAAA,MAAM,QAAQ,MACjB,KAAM,IAAI,OAAM,4DAIlB,KAAM,OAAQ,GAId,MAAO,AAFU,MAAK,MAAM,CAAE,QAEd,iBAAiB,MAAM,YAAY",
  "names": []
}
