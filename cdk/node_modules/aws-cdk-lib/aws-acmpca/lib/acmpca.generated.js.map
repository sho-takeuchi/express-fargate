{
  "version": 3,
  "sources": ["acmpca.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:51:38.021Z\",\"fingerprint\":\"tA9lFEANhuD/4LSymC9F4rpeneCE3mDI0DMp1S92H0g=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                         \nexport interface CfnCertificateProps {\n\n                                                                                                                                                                                                                                                                      \n    readonly certificateAuthorityArn: string;\n\n                                                                                                                                                                                                                                                         \n    readonly certificateSigningRequest: string;\n\nn    readonly signingAlgorithm: string;\n\n                                                                                                                                                                                                                                            \n    readonly validity: CfnCertificate.ValidityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly apiPassthrough?: CfnCertificate.ApiPassthroughProperty | cdk.IResolvable;\n\nn    readonly templateArn?: string;\n\nn    readonly validityNotBefore?: CfnCertificate.ValidityProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCertificateProps`\n *\n * @param properties - the TypeScript properties of a `CfnCertificateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiPassthrough', CfnCertificate_ApiPassthroughPropertyValidator)(properties.apiPassthrough));\n    errors.collect(cdk.propertyValidator('certificateAuthorityArn', cdk.requiredValidator)(properties.certificateAuthorityArn));\n    errors.collect(cdk.propertyValidator('certificateAuthorityArn', cdk.validateString)(properties.certificateAuthorityArn));\n    errors.collect(cdk.propertyValidator('certificateSigningRequest', cdk.requiredValidator)(properties.certificateSigningRequest));\n    errors.collect(cdk.propertyValidator('certificateSigningRequest', cdk.validateString)(properties.certificateSigningRequest));\n    errors.collect(cdk.propertyValidator('signingAlgorithm', cdk.requiredValidator)(properties.signingAlgorithm));\n    errors.collect(cdk.propertyValidator('signingAlgorithm', cdk.validateString)(properties.signingAlgorithm));\n    errors.collect(cdk.propertyValidator('templateArn', cdk.validateString)(properties.templateArn));\n    errors.collect(cdk.propertyValidator('validity', cdk.requiredValidator)(properties.validity));\n    errors.collect(cdk.propertyValidator('validity', CfnCertificate_ValidityPropertyValidator)(properties.validity));\n    errors.collect(cdk.propertyValidator('validityNotBefore', CfnCertificate_ValidityPropertyValidator)(properties.validityNotBefore));\n    return errors.wrap('supplied properties not correct for \"CfnCertificateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate` resource\n *\n * @param properties - the TypeScript properties of a `CfnCertificateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificatePropsValidator(properties).assertSuccess();\n    return {\n        CertificateAuthorityArn: cdk.stringToCloudFormation(properties.certificateAuthorityArn),\n        CertificateSigningRequest: cdk.stringToCloudFormation(properties.certificateSigningRequest),\n        SigningAlgorithm: cdk.stringToCloudFormation(properties.signingAlgorithm),\n        Validity: cfnCertificateValidityPropertyToCloudFormation(properties.validity),\n        ApiPassthrough: cfnCertificateApiPassthroughPropertyToCloudFormation(properties.apiPassthrough),\n        TemplateArn: cdk.stringToCloudFormation(properties.templateArn),\n        ValidityNotBefore: cfnCertificateValidityPropertyToCloudFormation(properties.validityNotBefore),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateProps>();\n    ret.addPropertyResult('certificateAuthorityArn', 'CertificateAuthorityArn', cfn_parse.FromCloudFormation.getString(properties.CertificateAuthorityArn));\n    ret.addPropertyResult('certificateSigningRequest', 'CertificateSigningRequest', cfn_parse.FromCloudFormation.getString(properties.CertificateSigningRequest));\n    ret.addPropertyResult('signingAlgorithm', 'SigningAlgorithm', cfn_parse.FromCloudFormation.getString(properties.SigningAlgorithm));\n    ret.addPropertyResult('validity', 'Validity', CfnCertificateValidityPropertyFromCloudFormation(properties.Validity));\n    ret.addPropertyResult('apiPassthrough', 'ApiPassthrough', properties.ApiPassthrough != null ? CfnCertificateApiPassthroughPropertyFromCloudFormation(properties.ApiPassthrough) : undefined);\n    ret.addPropertyResult('templateArn', 'TemplateArn', properties.TemplateArn != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateArn) : undefined);\n    ret.addPropertyResult('validityNotBefore', 'ValidityNotBefore', properties.ValidityNotBefore != null ? CfnCertificateValidityPropertyFromCloudFormation(properties.ValidityNotBefore) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCertificate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ACMPCA::Certificate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCertificate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCertificatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCertificate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                    \n    public readonly attrArn: string;\n\n                                                                                                             \n    public readonly attrCertificate: string;\n\n                                                                                                                                                                                                                                                                      \n    public certificateAuthorityArn: string;\n\n                                                                                                                                                                                                                                                         \n    public certificateSigningRequest: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public signingAlgorithm: string;\n\n                                                                                                                                                                                                                                            \n    public validity: CfnCertificate.ValidityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n    public apiPassthrough: CfnCertificate.ApiPassthroughProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public templateArn: string | undefined;\n\nn    public validityNotBefore: CfnCertificate.ValidityProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnCertificateProps) {\n        super(scope, id, { type: CfnCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'certificateAuthorityArn', this);\n        cdk.requireProperty(props, 'certificateSigningRequest', this);\n        cdk.requireProperty(props, 'signingAlgorithm', this);\n        cdk.requireProperty(props, 'validity', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCertificate = cdk.Token.asString(this.getAtt('Certificate'));\n\n        this.certificateAuthorityArn = props.certificateAuthorityArn;\n        this.certificateSigningRequest = props.certificateSigningRequest;\n        this.signingAlgorithm = props.signingAlgorithm;\n        this.validity = props.validity;\n        this.apiPassthrough = props.apiPassthrough;\n        this.templateArn = props.templateArn;\n        this.validityNotBefore = props.validityNotBefore;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCertificate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateAuthorityArn: this.certificateAuthorityArn,\n            certificateSigningRequest: this.certificateSigningRequest,\n            signingAlgorithm: this.signingAlgorithm,\n            validity: this.validity,\n            apiPassthrough: this.apiPassthrough,\n            templateArn: this.templateArn,\n            validityNotBefore: this.validityNotBefore,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCertificatePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCertificate {\nn    export interface ApiPassthroughProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly extensions?: CfnCertificate.ExtensionsProperty | cdk.IResolvable;\nn        readonly subject?: CfnCertificate.SubjectProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApiPassthroughProperty`\n *\n * @param properties - the TypeScript properties of a `ApiPassthroughProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_ApiPassthroughPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('extensions', CfnCertificate_ExtensionsPropertyValidator)(properties.extensions));\n    errors.collect(cdk.propertyValidator('subject', CfnCertificate_SubjectPropertyValidator)(properties.subject));\n    return errors.wrap('supplied properties not correct for \"ApiPassthroughProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.ApiPassthrough` resource\n *\n * @param properties - the TypeScript properties of a `ApiPassthroughProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.ApiPassthrough` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateApiPassthroughPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_ApiPassthroughPropertyValidator(properties).assertSuccess();\n    return {\n        Extensions: cfnCertificateExtensionsPropertyToCloudFormation(properties.extensions),\n        Subject: cfnCertificateSubjectPropertyToCloudFormation(properties.subject),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateApiPassthroughPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.ApiPassthroughProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.ApiPassthroughProperty>();\n    ret.addPropertyResult('extensions', 'Extensions', properties.Extensions != null ? CfnCertificateExtensionsPropertyFromCloudFormation(properties.Extensions) : undefined);\n    ret.addPropertyResult('subject', 'Subject', properties.Subject != null ? CfnCertificateSubjectPropertyFromCloudFormation(properties.Subject) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface EdiPartyNameProperty {\n                                                                                                                                                                                                                                                              \n        readonly nameAssigner: string;\n                                                                                                                                                                                                                                                        \n        readonly partyName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EdiPartyNameProperty`\n *\n * @param properties - the TypeScript properties of a `EdiPartyNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_EdiPartyNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nameAssigner', cdk.requiredValidator)(properties.nameAssigner));\n    errors.collect(cdk.propertyValidator('nameAssigner', cdk.validateString)(properties.nameAssigner));\n    errors.collect(cdk.propertyValidator('partyName', cdk.requiredValidator)(properties.partyName));\n    errors.collect(cdk.propertyValidator('partyName', cdk.validateString)(properties.partyName));\n    return errors.wrap('supplied properties not correct for \"EdiPartyNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.EdiPartyName` resource\n *\n * @param properties - the TypeScript properties of a `EdiPartyNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.EdiPartyName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateEdiPartyNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_EdiPartyNamePropertyValidator(properties).assertSuccess();\n    return {\n        NameAssigner: cdk.stringToCloudFormation(properties.nameAssigner),\n        PartyName: cdk.stringToCloudFormation(properties.partyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateEdiPartyNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.EdiPartyNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.EdiPartyNameProperty>();\n    ret.addPropertyResult('nameAssigner', 'NameAssigner', cfn_parse.FromCloudFormation.getString(properties.NameAssigner));\n    ret.addPropertyResult('partyName', 'PartyName', cfn_parse.FromCloudFormation.getString(properties.PartyName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                                               \n    export interface ExtendedKeyUsageProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly extendedKeyUsageObjectIdentifier?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly extendedKeyUsageType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExtendedKeyUsageProperty`\n *\n * @param properties - the TypeScript properties of a `ExtendedKeyUsageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_ExtendedKeyUsagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('extendedKeyUsageObjectIdentifier', cdk.validateString)(properties.extendedKeyUsageObjectIdentifier));\n    errors.collect(cdk.propertyValidator('extendedKeyUsageType', cdk.validateString)(properties.extendedKeyUsageType));\n    return errors.wrap('supplied properties not correct for \"ExtendedKeyUsageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.ExtendedKeyUsage` resource\n *\n * @param properties - the TypeScript properties of a `ExtendedKeyUsageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.ExtendedKeyUsage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateExtendedKeyUsagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_ExtendedKeyUsagePropertyValidator(properties).assertSuccess();\n    return {\n        ExtendedKeyUsageObjectIdentifier: cdk.stringToCloudFormation(properties.extendedKeyUsageObjectIdentifier),\n        ExtendedKeyUsageType: cdk.stringToCloudFormation(properties.extendedKeyUsageType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateExtendedKeyUsagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.ExtendedKeyUsageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.ExtendedKeyUsageProperty>();\n    ret.addPropertyResult('extendedKeyUsageObjectIdentifier', 'ExtendedKeyUsageObjectIdentifier', properties.ExtendedKeyUsageObjectIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ExtendedKeyUsageObjectIdentifier) : undefined);\n    ret.addPropertyResult('extendedKeyUsageType', 'ExtendedKeyUsageType', properties.ExtendedKeyUsageType != null ? cfn_parse.FromCloudFormation.getString(properties.ExtendedKeyUsageType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                   \n    export interface ExtensionsProperty {\nn        readonly certificatePolicies?: Array<CfnCertificate.PolicyInformationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly extendedKeyUsage?: Array<CfnCertificate.ExtendedKeyUsageProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly keyUsage?: CfnCertificate.KeyUsageProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly subjectAlternativeNames?: Array<CfnCertificate.GeneralNameProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExtensionsProperty`\n *\n * @param properties - the TypeScript properties of a `ExtensionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_ExtensionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificatePolicies', cdk.listValidator(CfnCertificate_PolicyInformationPropertyValidator))(properties.certificatePolicies));\n    errors.collect(cdk.propertyValidator('extendedKeyUsage', cdk.listValidator(CfnCertificate_ExtendedKeyUsagePropertyValidator))(properties.extendedKeyUsage));\n    errors.collect(cdk.propertyValidator('keyUsage', CfnCertificate_KeyUsagePropertyValidator)(properties.keyUsage));\n    errors.collect(cdk.propertyValidator('subjectAlternativeNames', cdk.listValidator(CfnCertificate_GeneralNamePropertyValidator))(properties.subjectAlternativeNames));\n    return errors.wrap('supplied properties not correct for \"ExtensionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Extensions` resource\n *\n * @param properties - the TypeScript properties of a `ExtensionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Extensions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateExtensionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_ExtensionsPropertyValidator(properties).assertSuccess();\n    return {\n        CertificatePolicies: cdk.listMapper(cfnCertificatePolicyInformationPropertyToCloudFormation)(properties.certificatePolicies),\n        ExtendedKeyUsage: cdk.listMapper(cfnCertificateExtendedKeyUsagePropertyToCloudFormation)(properties.extendedKeyUsage),\n        KeyUsage: cfnCertificateKeyUsagePropertyToCloudFormation(properties.keyUsage),\n        SubjectAlternativeNames: cdk.listMapper(cfnCertificateGeneralNamePropertyToCloudFormation)(properties.subjectAlternativeNames),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateExtensionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.ExtensionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.ExtensionsProperty>();\n    ret.addPropertyResult('certificatePolicies', 'CertificatePolicies', properties.CertificatePolicies != null ? cfn_parse.FromCloudFormation.getArray(CfnCertificatePolicyInformationPropertyFromCloudFormation)(properties.CertificatePolicies) : undefined);\n    ret.addPropertyResult('extendedKeyUsage', 'ExtendedKeyUsage', properties.ExtendedKeyUsage != null ? cfn_parse.FromCloudFormation.getArray(CfnCertificateExtendedKeyUsagePropertyFromCloudFormation)(properties.ExtendedKeyUsage) : undefined);\n    ret.addPropertyResult('keyUsage', 'KeyUsage', properties.KeyUsage != null ? CfnCertificateKeyUsagePropertyFromCloudFormation(properties.KeyUsage) : undefined);\n    ret.addPropertyResult('subjectAlternativeNames', 'SubjectAlternativeNames', properties.SubjectAlternativeNames != null ? cfn_parse.FromCloudFormation.getArray(CfnCertificateGeneralNamePropertyFromCloudFormation)(properties.SubjectAlternativeNames) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface GeneralNameProperty {\nn        readonly directoryName?: CfnCertificate.SubjectProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly dnsName?: string;\n                                                                                                                                                                                                                                                                                     \n        readonly ediPartyName?: CfnCertificate.EdiPartyNameProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly ipAddress?: string;\n                                                                                                                                                                                                                                                                                  \n        readonly otherName?: CfnCertificate.OtherNameProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly registeredId?: string;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly rfc822Name?: string;\n                                                                                                                                                                                                                                                                               \n        readonly uniformResourceIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GeneralNameProperty`\n *\n * @param properties - the TypeScript properties of a `GeneralNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_GeneralNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryName', CfnCertificate_SubjectPropertyValidator)(properties.directoryName));\n    errors.collect(cdk.propertyValidator('dnsName', cdk.validateString)(properties.dnsName));\n    errors.collect(cdk.propertyValidator('ediPartyName', CfnCertificate_EdiPartyNamePropertyValidator)(properties.ediPartyName));\n    errors.collect(cdk.propertyValidator('ipAddress', cdk.validateString)(properties.ipAddress));\n    errors.collect(cdk.propertyValidator('otherName', CfnCertificate_OtherNamePropertyValidator)(properties.otherName));\n    errors.collect(cdk.propertyValidator('registeredId', cdk.validateString)(properties.registeredId));\n    errors.collect(cdk.propertyValidator('rfc822Name', cdk.validateString)(properties.rfc822Name));\n    errors.collect(cdk.propertyValidator('uniformResourceIdentifier', cdk.validateString)(properties.uniformResourceIdentifier));\n    return errors.wrap('supplied properties not correct for \"GeneralNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.GeneralName` resource\n *\n * @param properties - the TypeScript properties of a `GeneralNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.GeneralName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateGeneralNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_GeneralNamePropertyValidator(properties).assertSuccess();\n    return {\n        DirectoryName: cfnCertificateSubjectPropertyToCloudFormation(properties.directoryName),\n        DnsName: cdk.stringToCloudFormation(properties.dnsName),\n        EdiPartyName: cfnCertificateEdiPartyNamePropertyToCloudFormation(properties.ediPartyName),\n        IpAddress: cdk.stringToCloudFormation(properties.ipAddress),\n        OtherName: cfnCertificateOtherNamePropertyToCloudFormation(properties.otherName),\n        RegisteredId: cdk.stringToCloudFormation(properties.registeredId),\n        Rfc822Name: cdk.stringToCloudFormation(properties.rfc822Name),\n        UniformResourceIdentifier: cdk.stringToCloudFormation(properties.uniformResourceIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateGeneralNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.GeneralNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.GeneralNameProperty>();\n    ret.addPropertyResult('directoryName', 'DirectoryName', properties.DirectoryName != null ? CfnCertificateSubjectPropertyFromCloudFormation(properties.DirectoryName) : undefined);\n    ret.addPropertyResult('dnsName', 'DnsName', properties.DnsName != null ? cfn_parse.FromCloudFormation.getString(properties.DnsName) : undefined);\n    ret.addPropertyResult('ediPartyName', 'EdiPartyName', properties.EdiPartyName != null ? CfnCertificateEdiPartyNamePropertyFromCloudFormation(properties.EdiPartyName) : undefined);\n    ret.addPropertyResult('ipAddress', 'IpAddress', properties.IpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.IpAddress) : undefined);\n    ret.addPropertyResult('otherName', 'OtherName', properties.OtherName != null ? CfnCertificateOtherNamePropertyFromCloudFormation(properties.OtherName) : undefined);\n    ret.addPropertyResult('registeredId', 'RegisteredId', properties.RegisteredId != null ? cfn_parse.FromCloudFormation.getString(properties.RegisteredId) : undefined);\n    ret.addPropertyResult('rfc822Name', 'Rfc822Name', properties.Rfc822Name != null ? cfn_parse.FromCloudFormation.getString(properties.Rfc822Name) : undefined);\n    ret.addPropertyResult('uniformResourceIdentifier', 'UniformResourceIdentifier', properties.UniformResourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.UniformResourceIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                          \n    export interface KeyUsageProperty {\n                                                                                                                                                                                                                                                  \n        readonly crlSign?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                               \n        readonly dataEncipherment?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly decipherOnly?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly digitalSignature?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly encipherOnly?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                      \n        readonly keyAgreement?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                              \n        readonly keyCertSign?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                              \n        readonly keyEncipherment?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly nonRepudiation?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KeyUsageProperty`\n *\n * @param properties - the TypeScript properties of a `KeyUsageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_KeyUsagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('crlSign', cdk.validateBoolean)(properties.crlSign));\n    errors.collect(cdk.propertyValidator('dataEncipherment', cdk.validateBoolean)(properties.dataEncipherment));\n    errors.collect(cdk.propertyValidator('decipherOnly', cdk.validateBoolean)(properties.decipherOnly));\n    errors.collect(cdk.propertyValidator('digitalSignature', cdk.validateBoolean)(properties.digitalSignature));\n    errors.collect(cdk.propertyValidator('encipherOnly', cdk.validateBoolean)(properties.encipherOnly));\n    errors.collect(cdk.propertyValidator('keyAgreement', cdk.validateBoolean)(properties.keyAgreement));\n    errors.collect(cdk.propertyValidator('keyCertSign', cdk.validateBoolean)(properties.keyCertSign));\n    errors.collect(cdk.propertyValidator('keyEncipherment', cdk.validateBoolean)(properties.keyEncipherment));\n    errors.collect(cdk.propertyValidator('nonRepudiation', cdk.validateBoolean)(properties.nonRepudiation));\n    return errors.wrap('supplied properties not correct for \"KeyUsageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.KeyUsage` resource\n *\n * @param properties - the TypeScript properties of a `KeyUsageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.KeyUsage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateKeyUsagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_KeyUsagePropertyValidator(properties).assertSuccess();\n    return {\n        CRLSign: cdk.booleanToCloudFormation(properties.crlSign),\n        DataEncipherment: cdk.booleanToCloudFormation(properties.dataEncipherment),\n        DecipherOnly: cdk.booleanToCloudFormation(properties.decipherOnly),\n        DigitalSignature: cdk.booleanToCloudFormation(properties.digitalSignature),\n        EncipherOnly: cdk.booleanToCloudFormation(properties.encipherOnly),\n        KeyAgreement: cdk.booleanToCloudFormation(properties.keyAgreement),\n        KeyCertSign: cdk.booleanToCloudFormation(properties.keyCertSign),\n        KeyEncipherment: cdk.booleanToCloudFormation(properties.keyEncipherment),\n        NonRepudiation: cdk.booleanToCloudFormation(properties.nonRepudiation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateKeyUsagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.KeyUsageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.KeyUsageProperty>();\n    ret.addPropertyResult('crlSign', 'CRLSign', properties.CRLSign != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CRLSign) : undefined);\n    ret.addPropertyResult('dataEncipherment', 'DataEncipherment', properties.DataEncipherment != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataEncipherment) : undefined);\n    ret.addPropertyResult('decipherOnly', 'DecipherOnly', properties.DecipherOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DecipherOnly) : undefined);\n    ret.addPropertyResult('digitalSignature', 'DigitalSignature', properties.DigitalSignature != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DigitalSignature) : undefined);\n    ret.addPropertyResult('encipherOnly', 'EncipherOnly', properties.EncipherOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EncipherOnly) : undefined);\n    ret.addPropertyResult('keyAgreement', 'KeyAgreement', properties.KeyAgreement != null ? cfn_parse.FromCloudFormation.getBoolean(properties.KeyAgreement) : undefined);\n    ret.addPropertyResult('keyCertSign', 'KeyCertSign', properties.KeyCertSign != null ? cfn_parse.FromCloudFormation.getBoolean(properties.KeyCertSign) : undefined);\n    ret.addPropertyResult('keyEncipherment', 'KeyEncipherment', properties.KeyEncipherment != null ? cfn_parse.FromCloudFormation.getBoolean(properties.KeyEncipherment) : undefined);\n    ret.addPropertyResult('nonRepudiation', 'NonRepudiation', properties.NonRepudiation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NonRepudiation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\nn    export interface OtherNameProperty {\n                                                                                                                                                                                                                                       \n        readonly typeId: string;\n                                                                                                                                                                                                                                            \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OtherNameProperty`\n *\n * @param properties - the TypeScript properties of a `OtherNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_OtherNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('typeId', cdk.requiredValidator)(properties.typeId));\n    errors.collect(cdk.propertyValidator('typeId', cdk.validateString)(properties.typeId));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"OtherNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.OtherName` resource\n *\n * @param properties - the TypeScript properties of a `OtherNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.OtherName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateOtherNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_OtherNamePropertyValidator(properties).assertSuccess();\n    return {\n        TypeId: cdk.stringToCloudFormation(properties.typeId),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateOtherNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.OtherNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.OtherNameProperty>();\n    ret.addPropertyResult('typeId', 'TypeId', cfn_parse.FromCloudFormation.getString(properties.TypeId));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                     \n    export interface PolicyInformationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly certPolicyId: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly policyQualifiers?: Array<CfnCertificate.PolicyQualifierInfoProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PolicyInformationProperty`\n *\n * @param properties - the TypeScript properties of a `PolicyInformationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_PolicyInformationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certPolicyId', cdk.requiredValidator)(properties.certPolicyId));\n    errors.collect(cdk.propertyValidator('certPolicyId', cdk.validateString)(properties.certPolicyId));\n    errors.collect(cdk.propertyValidator('policyQualifiers', cdk.listValidator(CfnCertificate_PolicyQualifierInfoPropertyValidator))(properties.policyQualifiers));\n    return errors.wrap('supplied properties not correct for \"PolicyInformationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.PolicyInformation` resource\n *\n * @param properties - the TypeScript properties of a `PolicyInformationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.PolicyInformation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificatePolicyInformationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_PolicyInformationPropertyValidator(properties).assertSuccess();\n    return {\n        CertPolicyId: cdk.stringToCloudFormation(properties.certPolicyId),\n        PolicyQualifiers: cdk.listMapper(cfnCertificatePolicyQualifierInfoPropertyToCloudFormation)(properties.policyQualifiers),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificatePolicyInformationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.PolicyInformationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.PolicyInformationProperty>();\n    ret.addPropertyResult('certPolicyId', 'CertPolicyId', cfn_parse.FromCloudFormation.getString(properties.CertPolicyId));\n    ret.addPropertyResult('policyQualifiers', 'PolicyQualifiers', properties.PolicyQualifiers != null ? cfn_parse.FromCloudFormation.getArray(CfnCertificatePolicyQualifierInfoPropertyFromCloudFormation)(properties.PolicyQualifiers) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                                                                \n    export interface PolicyQualifierInfoProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly policyQualifierId: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly qualifier: CfnCertificate.QualifierProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PolicyQualifierInfoProperty`\n *\n * @param properties - the TypeScript properties of a `PolicyQualifierInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_PolicyQualifierInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policyQualifierId', cdk.requiredValidator)(properties.policyQualifierId));\n    errors.collect(cdk.propertyValidator('policyQualifierId', cdk.validateString)(properties.policyQualifierId));\n    errors.collect(cdk.propertyValidator('qualifier', cdk.requiredValidator)(properties.qualifier));\n    errors.collect(cdk.propertyValidator('qualifier', CfnCertificate_QualifierPropertyValidator)(properties.qualifier));\n    return errors.wrap('supplied properties not correct for \"PolicyQualifierInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.PolicyQualifierInfo` resource\n *\n * @param properties - the TypeScript properties of a `PolicyQualifierInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.PolicyQualifierInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificatePolicyQualifierInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_PolicyQualifierInfoPropertyValidator(properties).assertSuccess();\n    return {\n        PolicyQualifierId: cdk.stringToCloudFormation(properties.policyQualifierId),\n        Qualifier: cfnCertificateQualifierPropertyToCloudFormation(properties.qualifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificatePolicyQualifierInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.PolicyQualifierInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.PolicyQualifierInfoProperty>();\n    ret.addPropertyResult('policyQualifierId', 'PolicyQualifierId', cfn_parse.FromCloudFormation.getString(properties.PolicyQualifierId));\n    ret.addPropertyResult('qualifier', 'Qualifier', CfnCertificateQualifierPropertyFromCloudFormation(properties.Qualifier));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface QualifierProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly cpsUri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QualifierProperty`\n *\n * @param properties - the TypeScript properties of a `QualifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_QualifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpsUri', cdk.requiredValidator)(properties.cpsUri));\n    errors.collect(cdk.propertyValidator('cpsUri', cdk.validateString)(properties.cpsUri));\n    return errors.wrap('supplied properties not correct for \"QualifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Qualifier` resource\n *\n * @param properties - the TypeScript properties of a `QualifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Qualifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateQualifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_QualifierPropertyValidator(properties).assertSuccess();\n    return {\n        CpsUri: cdk.stringToCloudFormation(properties.cpsUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateQualifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.QualifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.QualifierProperty>();\n    ret.addPropertyResult('cpsUri', 'CpsUri', cfn_parse.FromCloudFormation.getString(properties.CpsUri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\nn    export interface SubjectProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly commonName?: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly country?: string;\n                                                                                                                                                                                                                                                                                             \n        readonly distinguishedNameQualifier?: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly generationQualifier?: string;\n                                                                                                                                                                                                                                \n        readonly givenName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly initials?: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly locality?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly organization?: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly organizationalUnit?: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly pseudonym?: string;\n                                                                                                                                                                                                                                                      \n        readonly serialNumber?: string;\n                                                                                                                                                                                                                                                                          \n        readonly state?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly surname?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly title?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SubjectProperty`\n *\n * @param properties - the TypeScript properties of a `SubjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_SubjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('commonName', cdk.validateString)(properties.commonName));\n    errors.collect(cdk.propertyValidator('country', cdk.validateString)(properties.country));\n    errors.collect(cdk.propertyValidator('distinguishedNameQualifier', cdk.validateString)(properties.distinguishedNameQualifier));\n    errors.collect(cdk.propertyValidator('generationQualifier', cdk.validateString)(properties.generationQualifier));\n    errors.collect(cdk.propertyValidator('givenName', cdk.validateString)(properties.givenName));\n    errors.collect(cdk.propertyValidator('initials', cdk.validateString)(properties.initials));\n    errors.collect(cdk.propertyValidator('locality', cdk.validateString)(properties.locality));\n    errors.collect(cdk.propertyValidator('organization', cdk.validateString)(properties.organization));\n    errors.collect(cdk.propertyValidator('organizationalUnit', cdk.validateString)(properties.organizationalUnit));\n    errors.collect(cdk.propertyValidator('pseudonym', cdk.validateString)(properties.pseudonym));\n    errors.collect(cdk.propertyValidator('serialNumber', cdk.validateString)(properties.serialNumber));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    errors.collect(cdk.propertyValidator('surname', cdk.validateString)(properties.surname));\n    errors.collect(cdk.propertyValidator('title', cdk.validateString)(properties.title));\n    return errors.wrap('supplied properties not correct for \"SubjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Subject` resource\n *\n * @param properties - the TypeScript properties of a `SubjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Subject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateSubjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_SubjectPropertyValidator(properties).assertSuccess();\n    return {\n        CommonName: cdk.stringToCloudFormation(properties.commonName),\n        Country: cdk.stringToCloudFormation(properties.country),\n        DistinguishedNameQualifier: cdk.stringToCloudFormation(properties.distinguishedNameQualifier),\n        GenerationQualifier: cdk.stringToCloudFormation(properties.generationQualifier),\n        GivenName: cdk.stringToCloudFormation(properties.givenName),\n        Initials: cdk.stringToCloudFormation(properties.initials),\n        Locality: cdk.stringToCloudFormation(properties.locality),\n        Organization: cdk.stringToCloudFormation(properties.organization),\n        OrganizationalUnit: cdk.stringToCloudFormation(properties.organizationalUnit),\n        Pseudonym: cdk.stringToCloudFormation(properties.pseudonym),\n        SerialNumber: cdk.stringToCloudFormation(properties.serialNumber),\n        State: cdk.stringToCloudFormation(properties.state),\n        Surname: cdk.stringToCloudFormation(properties.surname),\n        Title: cdk.stringToCloudFormation(properties.title),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateSubjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.SubjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.SubjectProperty>();\n    ret.addPropertyResult('commonName', 'CommonName', properties.CommonName != null ? cfn_parse.FromCloudFormation.getString(properties.CommonName) : undefined);\n    ret.addPropertyResult('country', 'Country', properties.Country != null ? cfn_parse.FromCloudFormation.getString(properties.Country) : undefined);\n    ret.addPropertyResult('distinguishedNameQualifier', 'DistinguishedNameQualifier', properties.DistinguishedNameQualifier != null ? cfn_parse.FromCloudFormation.getString(properties.DistinguishedNameQualifier) : undefined);\n    ret.addPropertyResult('generationQualifier', 'GenerationQualifier', properties.GenerationQualifier != null ? cfn_parse.FromCloudFormation.getString(properties.GenerationQualifier) : undefined);\n    ret.addPropertyResult('givenName', 'GivenName', properties.GivenName != null ? cfn_parse.FromCloudFormation.getString(properties.GivenName) : undefined);\n    ret.addPropertyResult('initials', 'Initials', properties.Initials != null ? cfn_parse.FromCloudFormation.getString(properties.Initials) : undefined);\n    ret.addPropertyResult('locality', 'Locality', properties.Locality != null ? cfn_parse.FromCloudFormation.getString(properties.Locality) : undefined);\n    ret.addPropertyResult('organization', 'Organization', properties.Organization != null ? cfn_parse.FromCloudFormation.getString(properties.Organization) : undefined);\n    ret.addPropertyResult('organizationalUnit', 'OrganizationalUnit', properties.OrganizationalUnit != null ? cfn_parse.FromCloudFormation.getString(properties.OrganizationalUnit) : undefined);\n    ret.addPropertyResult('pseudonym', 'Pseudonym', properties.Pseudonym != null ? cfn_parse.FromCloudFormation.getString(properties.Pseudonym) : undefined);\n    ret.addPropertyResult('serialNumber', 'SerialNumber', properties.SerialNumber != null ? cfn_parse.FromCloudFormation.getString(properties.SerialNumber) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addPropertyResult('surname', 'Surname', properties.Surname != null ? cfn_parse.FromCloudFormation.getString(properties.Surname) : undefined);\n    ret.addPropertyResult('title', 'Title', properties.Title != null ? cfn_parse.FromCloudFormation.getString(properties.Title) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface ValidityProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly type: string;\n                                                                                                                                                                                                                                                                                       \n        readonly value: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ValidityProperty`\n *\n * @param properties - the TypeScript properties of a `ValidityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificate_ValidityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateNumber)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ValidityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Validity` resource\n *\n * @param properties - the TypeScript properties of a `ValidityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Certificate.Validity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateValidityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificate_ValidityPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.numberToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateValidityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificate.ValidityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificate.ValidityProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getNumber(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                           \nexport interface CfnCertificateAuthorityProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly keyAlgorithm: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly signingAlgorithm: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly subject: CfnCertificateAuthority.SubjectProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                    \n    readonly type: string;\n\n                                                                                                                                                                                                                                                                                                         \n    readonly csrExtensions?: CfnCertificateAuthority.CsrExtensionsProperty | cdk.IResolvable;\n\nn    readonly keyStorageSecurityStandard?: string;\n\nn    readonly revocationConfiguration?: CfnCertificateAuthority.RevocationConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCertificateAuthorityProps`\n *\n * @param properties - the TypeScript properties of a `CfnCertificateAuthorityProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthorityPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('csrExtensions', CfnCertificateAuthority_CsrExtensionsPropertyValidator)(properties.csrExtensions));\n    errors.collect(cdk.propertyValidator('keyAlgorithm', cdk.requiredValidator)(properties.keyAlgorithm));\n    errors.collect(cdk.propertyValidator('keyAlgorithm', cdk.validateString)(properties.keyAlgorithm));\n    errors.collect(cdk.propertyValidator('keyStorageSecurityStandard', cdk.validateString)(properties.keyStorageSecurityStandard));\n    errors.collect(cdk.propertyValidator('revocationConfiguration', CfnCertificateAuthority_RevocationConfigurationPropertyValidator)(properties.revocationConfiguration));\n    errors.collect(cdk.propertyValidator('signingAlgorithm', cdk.requiredValidator)(properties.signingAlgorithm));\n    errors.collect(cdk.propertyValidator('signingAlgorithm', cdk.validateString)(properties.signingAlgorithm));\n    errors.collect(cdk.propertyValidator('subject', cdk.requiredValidator)(properties.subject));\n    errors.collect(cdk.propertyValidator('subject', CfnCertificateAuthority_SubjectPropertyValidator)(properties.subject));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnCertificateAuthorityProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority` resource\n *\n * @param properties - the TypeScript properties of a `CfnCertificateAuthorityProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthorityPropsValidator(properties).assertSuccess();\n    return {\n        KeyAlgorithm: cdk.stringToCloudFormation(properties.keyAlgorithm),\n        SigningAlgorithm: cdk.stringToCloudFormation(properties.signingAlgorithm),\n        Subject: cfnCertificateAuthoritySubjectPropertyToCloudFormation(properties.subject),\n        Type: cdk.stringToCloudFormation(properties.type),\n        CsrExtensions: cfnCertificateAuthorityCsrExtensionsPropertyToCloudFormation(properties.csrExtensions),\n        KeyStorageSecurityStandard: cdk.stringToCloudFormation(properties.keyStorageSecurityStandard),\n        RevocationConfiguration: cfnCertificateAuthorityRevocationConfigurationPropertyToCloudFormation(properties.revocationConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthorityProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthorityProps>();\n    ret.addPropertyResult('keyAlgorithm', 'KeyAlgorithm', cfn_parse.FromCloudFormation.getString(properties.KeyAlgorithm));\n    ret.addPropertyResult('signingAlgorithm', 'SigningAlgorithm', cfn_parse.FromCloudFormation.getString(properties.SigningAlgorithm));\n    ret.addPropertyResult('subject', 'Subject', CfnCertificateAuthoritySubjectPropertyFromCloudFormation(properties.Subject));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('csrExtensions', 'CsrExtensions', properties.CsrExtensions != null ? CfnCertificateAuthorityCsrExtensionsPropertyFromCloudFormation(properties.CsrExtensions) : undefined);\n    ret.addPropertyResult('keyStorageSecurityStandard', 'KeyStorageSecurityStandard', properties.KeyStorageSecurityStandard != null ? cfn_parse.FromCloudFormation.getString(properties.KeyStorageSecurityStandard) : undefined);\n    ret.addPropertyResult('revocationConfiguration', 'RevocationConfiguration', properties.RevocationConfiguration != null ? CfnCertificateAuthorityRevocationConfigurationPropertyFromCloudFormation(properties.RevocationConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCertificateAuthority extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ACMPCA::CertificateAuthority\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCertificateAuthority {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCertificateAuthorityPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCertificateAuthority(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                                                                                                     \n    public readonly attrCertificateSigningRequest: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public keyAlgorithm: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public signingAlgorithm: string;\n\n                                                                                                                                                                                                                                                                                \n    public subject: CfnCertificateAuthority.SubjectProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                    \n    public type: string;\n\n                                                                                                                                                                                                                                                                                                         \n    public csrExtensions: CfnCertificateAuthority.CsrExtensionsProperty | cdk.IResolvable | undefined;\n\nn    public keyStorageSecurityStandard: string | undefined;\n\nn    public revocationConfiguration: CfnCertificateAuthority.RevocationConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnCertificateAuthorityProps) {\n        super(scope, id, { type: CfnCertificateAuthority.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'keyAlgorithm', this);\n        cdk.requireProperty(props, 'signingAlgorithm', this);\n        cdk.requireProperty(props, 'subject', this);\n        cdk.requireProperty(props, 'type', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCertificateSigningRequest = cdk.Token.asString(this.getAtt('CertificateSigningRequest'));\n\n        this.keyAlgorithm = props.keyAlgorithm;\n        this.signingAlgorithm = props.signingAlgorithm;\n        this.subject = props.subject;\n        this.type = props.type;\n        this.csrExtensions = props.csrExtensions;\n        this.keyStorageSecurityStandard = props.keyStorageSecurityStandard;\n        this.revocationConfiguration = props.revocationConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ACMPCA::CertificateAuthority\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCertificateAuthority.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            keyAlgorithm: this.keyAlgorithm,\n            signingAlgorithm: this.signingAlgorithm,\n            subject: this.subject,\n            type: this.type,\n            csrExtensions: this.csrExtensions,\n            keyStorageSecurityStandard: this.keyStorageSecurityStandard,\n            revocationConfiguration: this.revocationConfiguration,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCertificateAuthorityPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface AccessDescriptionProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly accessLocation: CfnCertificateAuthority.GeneralNameProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                     \n        readonly accessMethod: CfnCertificateAuthority.AccessMethodProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessDescriptionProperty`\n *\n * @param properties - the TypeScript properties of a `AccessDescriptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_AccessDescriptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessLocation', cdk.requiredValidator)(properties.accessLocation));\n    errors.collect(cdk.propertyValidator('accessLocation', CfnCertificateAuthority_GeneralNamePropertyValidator)(properties.accessLocation));\n    errors.collect(cdk.propertyValidator('accessMethod', cdk.requiredValidator)(properties.accessMethod));\n    errors.collect(cdk.propertyValidator('accessMethod', CfnCertificateAuthority_AccessMethodPropertyValidator)(properties.accessMethod));\n    return errors.wrap('supplied properties not correct for \"AccessDescriptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.AccessDescription` resource\n *\n * @param properties - the TypeScript properties of a `AccessDescriptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.AccessDescription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityAccessDescriptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_AccessDescriptionPropertyValidator(properties).assertSuccess();\n    return {\n        AccessLocation: cfnCertificateAuthorityGeneralNamePropertyToCloudFormation(properties.accessLocation),\n        AccessMethod: cfnCertificateAuthorityAccessMethodPropertyToCloudFormation(properties.accessMethod),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityAccessDescriptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.AccessDescriptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.AccessDescriptionProperty>();\n    ret.addPropertyResult('accessLocation', 'AccessLocation', CfnCertificateAuthorityGeneralNamePropertyFromCloudFormation(properties.AccessLocation));\n    ret.addPropertyResult('accessMethod', 'AccessMethod', CfnCertificateAuthorityAccessMethodPropertyFromCloudFormation(properties.AccessMethod));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface AccessMethodProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly accessMethodType?: string;\nn        readonly customObjectIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessMethodProperty`\n *\n * @param properties - the TypeScript properties of a `AccessMethodProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_AccessMethodPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessMethodType', cdk.validateString)(properties.accessMethodType));\n    errors.collect(cdk.propertyValidator('customObjectIdentifier', cdk.validateString)(properties.customObjectIdentifier));\n    return errors.wrap('supplied properties not correct for \"AccessMethodProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.AccessMethod` resource\n *\n * @param properties - the TypeScript properties of a `AccessMethodProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.AccessMethod` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityAccessMethodPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_AccessMethodPropertyValidator(properties).assertSuccess();\n    return {\n        AccessMethodType: cdk.stringToCloudFormation(properties.accessMethodType),\n        CustomObjectIdentifier: cdk.stringToCloudFormation(properties.customObjectIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityAccessMethodPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.AccessMethodProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.AccessMethodProperty>();\n    ret.addPropertyResult('accessMethodType', 'AccessMethodType', properties.AccessMethodType != null ? cfn_parse.FromCloudFormation.getString(properties.AccessMethodType) : undefined);\n    ret.addPropertyResult('customObjectIdentifier', 'CustomObjectIdentifier', properties.CustomObjectIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.CustomObjectIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\nn    export interface CrlConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly customCname?: string;\nn        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                   \n        readonly expirationInDays?: number;\nn        readonly s3BucketName?: string;\nn        readonly s3ObjectAcl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CrlConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CrlConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_CrlConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customCname', cdk.validateString)(properties.customCname));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('expirationInDays', cdk.validateNumber)(properties.expirationInDays));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3ObjectAcl', cdk.validateString)(properties.s3ObjectAcl));\n    return errors.wrap('supplied properties not correct for \"CrlConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.CrlConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CrlConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.CrlConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityCrlConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_CrlConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CustomCname: cdk.stringToCloudFormation(properties.customCname),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        ExpirationInDays: cdk.numberToCloudFormation(properties.expirationInDays),\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        S3ObjectAcl: cdk.stringToCloudFormation(properties.s3ObjectAcl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityCrlConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.CrlConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.CrlConfigurationProperty>();\n    ret.addPropertyResult('customCname', 'CustomCname', properties.CustomCname != null ? cfn_parse.FromCloudFormation.getString(properties.CustomCname) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('expirationInDays', 'ExpirationInDays', properties.ExpirationInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.ExpirationInDays) : undefined);\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', properties.S3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.S3BucketName) : undefined);\n    ret.addPropertyResult('s3ObjectAcl', 'S3ObjectAcl', properties.S3ObjectAcl != null ? cfn_parse.FromCloudFormation.getString(properties.S3ObjectAcl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                  \n    export interface CsrExtensionsProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly keyUsage?: CfnCertificateAuthority.KeyUsageProperty | cdk.IResolvable;\nn        readonly subjectInformationAccess?: Array<CfnCertificateAuthority.AccessDescriptionProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CsrExtensionsProperty`\n *\n * @param properties - the TypeScript properties of a `CsrExtensionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_CsrExtensionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('keyUsage', CfnCertificateAuthority_KeyUsagePropertyValidator)(properties.keyUsage));\n    errors.collect(cdk.propertyValidator('subjectInformationAccess', cdk.listValidator(CfnCertificateAuthority_AccessDescriptionPropertyValidator))(properties.subjectInformationAccess));\n    return errors.wrap('supplied properties not correct for \"CsrExtensionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.CsrExtensions` resource\n *\n * @param properties - the TypeScript properties of a `CsrExtensionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.CsrExtensions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityCsrExtensionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_CsrExtensionsPropertyValidator(properties).assertSuccess();\n    return {\n        KeyUsage: cfnCertificateAuthorityKeyUsagePropertyToCloudFormation(properties.keyUsage),\n        SubjectInformationAccess: cdk.listMapper(cfnCertificateAuthorityAccessDescriptionPropertyToCloudFormation)(properties.subjectInformationAccess),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityCsrExtensionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.CsrExtensionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.CsrExtensionsProperty>();\n    ret.addPropertyResult('keyUsage', 'KeyUsage', properties.KeyUsage != null ? CfnCertificateAuthorityKeyUsagePropertyFromCloudFormation(properties.KeyUsage) : undefined);\n    ret.addPropertyResult('subjectInformationAccess', 'SubjectInformationAccess', properties.SubjectInformationAccess != null ? cfn_parse.FromCloudFormation.getArray(CfnCertificateAuthorityAccessDescriptionPropertyFromCloudFormation)(properties.SubjectInformationAccess) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface EdiPartyNameProperty {\n                                                                                                                                                                                                                                                                                \n        readonly nameAssigner: string;\n                                                                                                                                                                                                                                                                          \n        readonly partyName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EdiPartyNameProperty`\n *\n * @param properties - the TypeScript properties of a `EdiPartyNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_EdiPartyNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nameAssigner', cdk.requiredValidator)(properties.nameAssigner));\n    errors.collect(cdk.propertyValidator('nameAssigner', cdk.validateString)(properties.nameAssigner));\n    errors.collect(cdk.propertyValidator('partyName', cdk.requiredValidator)(properties.partyName));\n    errors.collect(cdk.propertyValidator('partyName', cdk.validateString)(properties.partyName));\n    return errors.wrap('supplied properties not correct for \"EdiPartyNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.EdiPartyName` resource\n *\n * @param properties - the TypeScript properties of a `EdiPartyNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.EdiPartyName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityEdiPartyNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_EdiPartyNamePropertyValidator(properties).assertSuccess();\n    return {\n        NameAssigner: cdk.stringToCloudFormation(properties.nameAssigner),\n        PartyName: cdk.stringToCloudFormation(properties.partyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityEdiPartyNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.EdiPartyNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.EdiPartyNameProperty>();\n    ret.addPropertyResult('nameAssigner', 'NameAssigner', cfn_parse.FromCloudFormation.getString(properties.NameAssigner));\n    ret.addPropertyResult('partyName', 'PartyName', cfn_parse.FromCloudFormation.getString(properties.PartyName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface GeneralNameProperty {\nn        readonly directoryName?: CfnCertificateAuthority.SubjectProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly dnsName?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly ediPartyName?: CfnCertificateAuthority.EdiPartyNameProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                   \n        readonly ipAddress?: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly otherName?: CfnCertificateAuthority.OtherNameProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                         \n        readonly registeredId?: string;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly rfc822Name?: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly uniformResourceIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GeneralNameProperty`\n *\n * @param properties - the TypeScript properties of a `GeneralNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_GeneralNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryName', CfnCertificateAuthority_SubjectPropertyValidator)(properties.directoryName));\n    errors.collect(cdk.propertyValidator('dnsName', cdk.validateString)(properties.dnsName));\n    errors.collect(cdk.propertyValidator('ediPartyName', CfnCertificateAuthority_EdiPartyNamePropertyValidator)(properties.ediPartyName));\n    errors.collect(cdk.propertyValidator('ipAddress', cdk.validateString)(properties.ipAddress));\n    errors.collect(cdk.propertyValidator('otherName', CfnCertificateAuthority_OtherNamePropertyValidator)(properties.otherName));\n    errors.collect(cdk.propertyValidator('registeredId', cdk.validateString)(properties.registeredId));\n    errors.collect(cdk.propertyValidator('rfc822Name', cdk.validateString)(properties.rfc822Name));\n    errors.collect(cdk.propertyValidator('uniformResourceIdentifier', cdk.validateString)(properties.uniformResourceIdentifier));\n    return errors.wrap('supplied properties not correct for \"GeneralNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.GeneralName` resource\n *\n * @param properties - the TypeScript properties of a `GeneralNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.GeneralName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityGeneralNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_GeneralNamePropertyValidator(properties).assertSuccess();\n    return {\n        DirectoryName: cfnCertificateAuthoritySubjectPropertyToCloudFormation(properties.directoryName),\n        DnsName: cdk.stringToCloudFormation(properties.dnsName),\n        EdiPartyName: cfnCertificateAuthorityEdiPartyNamePropertyToCloudFormation(properties.ediPartyName),\n        IpAddress: cdk.stringToCloudFormation(properties.ipAddress),\n        OtherName: cfnCertificateAuthorityOtherNamePropertyToCloudFormation(properties.otherName),\n        RegisteredId: cdk.stringToCloudFormation(properties.registeredId),\n        Rfc822Name: cdk.stringToCloudFormation(properties.rfc822Name),\n        UniformResourceIdentifier: cdk.stringToCloudFormation(properties.uniformResourceIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityGeneralNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.GeneralNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.GeneralNameProperty>();\n    ret.addPropertyResult('directoryName', 'DirectoryName', properties.DirectoryName != null ? CfnCertificateAuthoritySubjectPropertyFromCloudFormation(properties.DirectoryName) : undefined);\n    ret.addPropertyResult('dnsName', 'DnsName', properties.DnsName != null ? cfn_parse.FromCloudFormation.getString(properties.DnsName) : undefined);\n    ret.addPropertyResult('ediPartyName', 'EdiPartyName', properties.EdiPartyName != null ? CfnCertificateAuthorityEdiPartyNamePropertyFromCloudFormation(properties.EdiPartyName) : undefined);\n    ret.addPropertyResult('ipAddress', 'IpAddress', properties.IpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.IpAddress) : undefined);\n    ret.addPropertyResult('otherName', 'OtherName', properties.OtherName != null ? CfnCertificateAuthorityOtherNamePropertyFromCloudFormation(properties.OtherName) : undefined);\n    ret.addPropertyResult('registeredId', 'RegisteredId', properties.RegisteredId != null ? cfn_parse.FromCloudFormation.getString(properties.RegisteredId) : undefined);\n    ret.addPropertyResult('rfc822Name', 'Rfc822Name', properties.Rfc822Name != null ? cfn_parse.FromCloudFormation.getString(properties.Rfc822Name) : undefined);\n    ret.addPropertyResult('uniformResourceIdentifier', 'UniformResourceIdentifier', properties.UniformResourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.UniformResourceIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface KeyUsageProperty {\n                                                                                                                                                                                                                                                                    \n        readonly crlSign?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly dataEncipherment?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly decipherOnly?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly digitalSignature?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly encipherOnly?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly keyAgreement?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly keyCertSign?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly keyEncipherment?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly nonRepudiation?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KeyUsageProperty`\n *\n * @param properties - the TypeScript properties of a `KeyUsageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_KeyUsagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('crlSign', cdk.validateBoolean)(properties.crlSign));\n    errors.collect(cdk.propertyValidator('dataEncipherment', cdk.validateBoolean)(properties.dataEncipherment));\n    errors.collect(cdk.propertyValidator('decipherOnly', cdk.validateBoolean)(properties.decipherOnly));\n    errors.collect(cdk.propertyValidator('digitalSignature', cdk.validateBoolean)(properties.digitalSignature));\n    errors.collect(cdk.propertyValidator('encipherOnly', cdk.validateBoolean)(properties.encipherOnly));\n    errors.collect(cdk.propertyValidator('keyAgreement', cdk.validateBoolean)(properties.keyAgreement));\n    errors.collect(cdk.propertyValidator('keyCertSign', cdk.validateBoolean)(properties.keyCertSign));\n    errors.collect(cdk.propertyValidator('keyEncipherment', cdk.validateBoolean)(properties.keyEncipherment));\n    errors.collect(cdk.propertyValidator('nonRepudiation', cdk.validateBoolean)(properties.nonRepudiation));\n    return errors.wrap('supplied properties not correct for \"KeyUsageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.KeyUsage` resource\n *\n * @param properties - the TypeScript properties of a `KeyUsageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.KeyUsage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityKeyUsagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_KeyUsagePropertyValidator(properties).assertSuccess();\n    return {\n        CRLSign: cdk.booleanToCloudFormation(properties.crlSign),\n        DataEncipherment: cdk.booleanToCloudFormation(properties.dataEncipherment),\n        DecipherOnly: cdk.booleanToCloudFormation(properties.decipherOnly),\n        DigitalSignature: cdk.booleanToCloudFormation(properties.digitalSignature),\n        EncipherOnly: cdk.booleanToCloudFormation(properties.encipherOnly),\n        KeyAgreement: cdk.booleanToCloudFormation(properties.keyAgreement),\n        KeyCertSign: cdk.booleanToCloudFormation(properties.keyCertSign),\n        KeyEncipherment: cdk.booleanToCloudFormation(properties.keyEncipherment),\n        NonRepudiation: cdk.booleanToCloudFormation(properties.nonRepudiation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityKeyUsagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.KeyUsageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.KeyUsageProperty>();\n    ret.addPropertyResult('crlSign', 'CRLSign', properties.CRLSign != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CRLSign) : undefined);\n    ret.addPropertyResult('dataEncipherment', 'DataEncipherment', properties.DataEncipherment != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataEncipherment) : undefined);\n    ret.addPropertyResult('decipherOnly', 'DecipherOnly', properties.DecipherOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DecipherOnly) : undefined);\n    ret.addPropertyResult('digitalSignature', 'DigitalSignature', properties.DigitalSignature != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DigitalSignature) : undefined);\n    ret.addPropertyResult('encipherOnly', 'EncipherOnly', properties.EncipherOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EncipherOnly) : undefined);\n    ret.addPropertyResult('keyAgreement', 'KeyAgreement', properties.KeyAgreement != null ? cfn_parse.FromCloudFormation.getBoolean(properties.KeyAgreement) : undefined);\n    ret.addPropertyResult('keyCertSign', 'KeyCertSign', properties.KeyCertSign != null ? cfn_parse.FromCloudFormation.getBoolean(properties.KeyCertSign) : undefined);\n    ret.addPropertyResult('keyEncipherment', 'KeyEncipherment', properties.KeyEncipherment != null ? cfn_parse.FromCloudFormation.getBoolean(properties.KeyEncipherment) : undefined);\n    ret.addPropertyResult('nonRepudiation', 'NonRepudiation', properties.NonRepudiation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NonRepudiation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                                \n    export interface OcspConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly ocspCustomCname?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OcspConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `OcspConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_OcspConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('ocspCustomCname', cdk.validateString)(properties.ocspCustomCname));\n    return errors.wrap('supplied properties not correct for \"OcspConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.OcspConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `OcspConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.OcspConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityOcspConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_OcspConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        OcspCustomCname: cdk.stringToCloudFormation(properties.ocspCustomCname),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityOcspConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.OcspConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.OcspConfigurationProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('ocspCustomCname', 'OcspCustomCname', properties.OcspCustomCname != null ? cfn_parse.FromCloudFormation.getString(properties.OcspCustomCname) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\nn    export interface OtherNameProperty {\n                                                                                                                                                                                                                                                         \n        readonly typeId: string;\n                                                                                                                                                                                                                                                              \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OtherNameProperty`\n *\n * @param properties - the TypeScript properties of a `OtherNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_OtherNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('typeId', cdk.requiredValidator)(properties.typeId));\n    errors.collect(cdk.propertyValidator('typeId', cdk.validateString)(properties.typeId));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"OtherNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.OtherName` resource\n *\n * @param properties - the TypeScript properties of a `OtherNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.OtherName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityOtherNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_OtherNamePropertyValidator(properties).assertSuccess();\n    return {\n        TypeId: cdk.stringToCloudFormation(properties.typeId),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityOtherNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.OtherNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.OtherNameProperty>();\n    ret.addPropertyResult('typeId', 'TypeId', cfn_parse.FromCloudFormation.getString(properties.TypeId));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface RevocationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly crlConfiguration?: CfnCertificateAuthority.CrlConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly ocspConfiguration?: CfnCertificateAuthority.OcspConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RevocationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `RevocationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_RevocationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('crlConfiguration', CfnCertificateAuthority_CrlConfigurationPropertyValidator)(properties.crlConfiguration));\n    errors.collect(cdk.propertyValidator('ocspConfiguration', CfnCertificateAuthority_OcspConfigurationPropertyValidator)(properties.ocspConfiguration));\n    return errors.wrap('supplied properties not correct for \"RevocationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.RevocationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `RevocationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.RevocationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityRevocationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_RevocationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CrlConfiguration: cfnCertificateAuthorityCrlConfigurationPropertyToCloudFormation(properties.crlConfiguration),\n        OcspConfiguration: cfnCertificateAuthorityOcspConfigurationPropertyToCloudFormation(properties.ocspConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityRevocationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.RevocationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.RevocationConfigurationProperty>();\n    ret.addPropertyResult('crlConfiguration', 'CrlConfiguration', properties.CrlConfiguration != null ? CfnCertificateAuthorityCrlConfigurationPropertyFromCloudFormation(properties.CrlConfiguration) : undefined);\n    ret.addPropertyResult('ocspConfiguration', 'OcspConfiguration', properties.OcspConfiguration != null ? CfnCertificateAuthorityOcspConfigurationPropertyFromCloudFormation(properties.OcspConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCertificateAuthority {\n                                                                                                                                                                                                                                                             \n    export interface SubjectProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly commonName?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly country?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly distinguishedNameQualifier?: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly generationQualifier?: string;\n                                                                                                                                                                                                                                                  \n        readonly givenName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly initials?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly locality?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly organization?: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly organizationalUnit?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly pseudonym?: string;\n                                                                                                                                                                                                                                                                        \n        readonly serialNumber?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly state?: string;\n                                                                                                                                                                                                                                                 \n        readonly surname?: string;\n                                                                                                                                                                                                                                                               \n        readonly title?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SubjectProperty`\n *\n * @param properties - the TypeScript properties of a `SubjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthority_SubjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('commonName', cdk.validateString)(properties.commonName));\n    errors.collect(cdk.propertyValidator('country', cdk.validateString)(properties.country));\n    errors.collect(cdk.propertyValidator('distinguishedNameQualifier', cdk.validateString)(properties.distinguishedNameQualifier));\n    errors.collect(cdk.propertyValidator('generationQualifier', cdk.validateString)(properties.generationQualifier));\n    errors.collect(cdk.propertyValidator('givenName', cdk.validateString)(properties.givenName));\n    errors.collect(cdk.propertyValidator('initials', cdk.validateString)(properties.initials));\n    errors.collect(cdk.propertyValidator('locality', cdk.validateString)(properties.locality));\n    errors.collect(cdk.propertyValidator('organization', cdk.validateString)(properties.organization));\n    errors.collect(cdk.propertyValidator('organizationalUnit', cdk.validateString)(properties.organizationalUnit));\n    errors.collect(cdk.propertyValidator('pseudonym', cdk.validateString)(properties.pseudonym));\n    errors.collect(cdk.propertyValidator('serialNumber', cdk.validateString)(properties.serialNumber));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    errors.collect(cdk.propertyValidator('surname', cdk.validateString)(properties.surname));\n    errors.collect(cdk.propertyValidator('title', cdk.validateString)(properties.title));\n    return errors.wrap('supplied properties not correct for \"SubjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.Subject` resource\n *\n * @param properties - the TypeScript properties of a `SubjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthority.Subject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthoritySubjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthority_SubjectPropertyValidator(properties).assertSuccess();\n    return {\n        CommonName: cdk.stringToCloudFormation(properties.commonName),\n        Country: cdk.stringToCloudFormation(properties.country),\n        DistinguishedNameQualifier: cdk.stringToCloudFormation(properties.distinguishedNameQualifier),\n        GenerationQualifier: cdk.stringToCloudFormation(properties.generationQualifier),\n        GivenName: cdk.stringToCloudFormation(properties.givenName),\n        Initials: cdk.stringToCloudFormation(properties.initials),\n        Locality: cdk.stringToCloudFormation(properties.locality),\n        Organization: cdk.stringToCloudFormation(properties.organization),\n        OrganizationalUnit: cdk.stringToCloudFormation(properties.organizationalUnit),\n        Pseudonym: cdk.stringToCloudFormation(properties.pseudonym),\n        SerialNumber: cdk.stringToCloudFormation(properties.serialNumber),\n        State: cdk.stringToCloudFormation(properties.state),\n        Surname: cdk.stringToCloudFormation(properties.surname),\n        Title: cdk.stringToCloudFormation(properties.title),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthoritySubjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthority.SubjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthority.SubjectProperty>();\n    ret.addPropertyResult('commonName', 'CommonName', properties.CommonName != null ? cfn_parse.FromCloudFormation.getString(properties.CommonName) : undefined);\n    ret.addPropertyResult('country', 'Country', properties.Country != null ? cfn_parse.FromCloudFormation.getString(properties.Country) : undefined);\n    ret.addPropertyResult('distinguishedNameQualifier', 'DistinguishedNameQualifier', properties.DistinguishedNameQualifier != null ? cfn_parse.FromCloudFormation.getString(properties.DistinguishedNameQualifier) : undefined);\n    ret.addPropertyResult('generationQualifier', 'GenerationQualifier', properties.GenerationQualifier != null ? cfn_parse.FromCloudFormation.getString(properties.GenerationQualifier) : undefined);\n    ret.addPropertyResult('givenName', 'GivenName', properties.GivenName != null ? cfn_parse.FromCloudFormation.getString(properties.GivenName) : undefined);\n    ret.addPropertyResult('initials', 'Initials', properties.Initials != null ? cfn_parse.FromCloudFormation.getString(properties.Initials) : undefined);\n    ret.addPropertyResult('locality', 'Locality', properties.Locality != null ? cfn_parse.FromCloudFormation.getString(properties.Locality) : undefined);\n    ret.addPropertyResult('organization', 'Organization', properties.Organization != null ? cfn_parse.FromCloudFormation.getString(properties.Organization) : undefined);\n    ret.addPropertyResult('organizationalUnit', 'OrganizationalUnit', properties.OrganizationalUnit != null ? cfn_parse.FromCloudFormation.getString(properties.OrganizationalUnit) : undefined);\n    ret.addPropertyResult('pseudonym', 'Pseudonym', properties.Pseudonym != null ? cfn_parse.FromCloudFormation.getString(properties.Pseudonym) : undefined);\n    ret.addPropertyResult('serialNumber', 'SerialNumber', properties.SerialNumber != null ? cfn_parse.FromCloudFormation.getString(properties.SerialNumber) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addPropertyResult('surname', 'Surname', properties.Surname != null ? cfn_parse.FromCloudFormation.getString(properties.Surname) : undefined);\n    ret.addPropertyResult('title', 'Title', properties.Title != null ? cfn_parse.FromCloudFormation.getString(properties.Title) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                               \nexport interface CfnCertificateAuthorityActivationProps {\n\n                                                                                                                                                                                                                                                                                \n    readonly certificate: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly certificateAuthorityArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly certificateChain?: string;\n\n                                                                                                                                                                                                                                            \n    readonly status?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCertificateAuthorityActivationProps`\n *\n * @param properties - the TypeScript properties of a `CfnCertificateAuthorityActivationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificateAuthorityActivationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificate', cdk.requiredValidator)(properties.certificate));\n    errors.collect(cdk.propertyValidator('certificate', cdk.validateString)(properties.certificate));\n    errors.collect(cdk.propertyValidator('certificateAuthorityArn', cdk.requiredValidator)(properties.certificateAuthorityArn));\n    errors.collect(cdk.propertyValidator('certificateAuthorityArn', cdk.validateString)(properties.certificateAuthorityArn));\n    errors.collect(cdk.propertyValidator('certificateChain', cdk.validateString)(properties.certificateChain));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"CfnCertificateAuthorityActivationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthorityActivation` resource\n *\n * @param properties - the TypeScript properties of a `CfnCertificateAuthorityActivationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::CertificateAuthorityActivation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificateAuthorityActivationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificateAuthorityActivationPropsValidator(properties).assertSuccess();\n    return {\n        Certificate: cdk.stringToCloudFormation(properties.certificate),\n        CertificateAuthorityArn: cdk.stringToCloudFormation(properties.certificateAuthorityArn),\n        CertificateChain: cdk.stringToCloudFormation(properties.certificateChain),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificateAuthorityActivationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateAuthorityActivationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateAuthorityActivationProps>();\n    ret.addPropertyResult('certificate', 'Certificate', cfn_parse.FromCloudFormation.getString(properties.Certificate));\n    ret.addPropertyResult('certificateAuthorityArn', 'CertificateAuthorityArn', cfn_parse.FromCloudFormation.getString(properties.CertificateAuthorityArn));\n    ret.addPropertyResult('certificateChain', 'CertificateChain', properties.CertificateChain != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateChain) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCertificateAuthorityActivation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ACMPCA::CertificateAuthorityActivation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCertificateAuthorityActivation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCertificateAuthorityActivationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCertificateAuthorityActivation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                   \n    public readonly attrCompleteCertificateChain: string;\n\n                                                                                                                                                                                                                                                                                \n    public certificate: string;\n\n                                                                                                                                                                                                                                                                                     \n    public certificateAuthorityArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public certificateChain: string | undefined;\n\n                                                                                                                                                                                                                                            \n    public status: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnCertificateAuthorityActivationProps) {\n        super(scope, id, { type: CfnCertificateAuthorityActivation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'certificate', this);\n        cdk.requireProperty(props, 'certificateAuthorityArn', this);\n        this.attrCompleteCertificateChain = cdk.Token.asString(this.getAtt('CompleteCertificateChain'));\n\n        this.certificate = props.certificate;\n        this.certificateAuthorityArn = props.certificateAuthorityArn;\n        this.certificateChain = props.certificateChain;\n        this.status = props.status;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCertificateAuthorityActivation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificate: this.certificate,\n            certificateAuthorityArn: this.certificateAuthorityArn,\n            certificateChain: this.certificateChain,\n            status: this.status,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCertificateAuthorityActivationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                       \nexport interface CfnPermissionProps {\n\n                                                                                                                                                                                                                                                                                                                                            \n    readonly actions: string[];\n\n                                                                                                                                                                                                                                                                                   \n    readonly certificateAuthorityArn: string;\n\n                                                                                                                                                                                                                                                                                                 \n    readonly principal: string;\n\n                                                                                                                                                                                                                                    \n    readonly sourceAccount?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPermissionProps`\n *\n * @param properties - the TypeScript properties of a `CfnPermissionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('certificateAuthorityArn', cdk.requiredValidator)(properties.certificateAuthorityArn));\n    errors.collect(cdk.propertyValidator('certificateAuthorityArn', cdk.validateString)(properties.certificateAuthorityArn));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    errors.collect(cdk.propertyValidator('sourceAccount', cdk.validateString)(properties.sourceAccount));\n    return errors.wrap('supplied properties not correct for \"CfnPermissionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ACMPCA::Permission` resource\n *\n * @param properties - the TypeScript properties of a `CfnPermissionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ACMPCA::Permission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissionPropsValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        CertificateAuthorityArn: cdk.stringToCloudFormation(properties.certificateAuthorityArn),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n        SourceAccount: cdk.stringToCloudFormation(properties.sourceAccount),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissionProps>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('certificateAuthorityArn', 'CertificateAuthorityArn', cfn_parse.FromCloudFormation.getString(properties.CertificateAuthorityArn));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addPropertyResult('sourceAccount', 'SourceAccount', properties.SourceAccount != null ? cfn_parse.FromCloudFormation.getString(properties.SourceAccount) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPermission extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ACMPCA::Permission\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPermission {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPermissionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPermission(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                            \n    public actions: string[];\n\n                                                                                                                                                                                                                                                                                   \n    public certificateAuthorityArn: string;\n\n                                                                                                                                                                                                                                                                                                 \n    public principal: string;\n\n                                                                                                                                                                                                                                    \n    public sourceAccount: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnPermissionProps) {\n        super(scope, id, { type: CfnPermission.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'actions', this);\n        cdk.requireProperty(props, 'certificateAuthorityArn', this);\n        cdk.requireProperty(props, 'principal', this);\n\n        this.actions = props.actions;\n        this.certificateAuthorityArn = props.certificateAuthorityArn;\n        this.principal = props.principal;\n        this.sourceAccount = props.sourceAccount;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPermission.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            actions: this.actions,\n            certificateAuthorityArn: this.certificateAuthorityArn,\n            principal: this.principal,\n            sourceAccount: this.sourceAccount,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPermissionPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
