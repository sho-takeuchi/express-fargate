{
  "version": 3,
  "sources": ["amazonmq.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:27.383Z\",\"fingerprint\":\"yNl0nkmrZmxqjO0w1UZBC4IwKmJzdXs6NYRVoW63atQ=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                 \nexport interface CfnBrokerProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly autoMinorVersionUpgrade: boolean | cdk.IResolvable;\n\nn    readonly brokerName: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly deploymentMode: string;\n\n                                                                                                                                                                                                                                                              \n    readonly engineType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly engineVersion: string;\n\n                                                                                                                                                                                                           \n    readonly hostInstanceType: string;\n\n                                                                                                                                                                                                                                                                           \n    readonly publiclyAccessible: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly users: Array<CfnBroker.UserProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    readonly authenticationStrategy?: string;\n\n                                                                                                                                                                                                                                                               \n    readonly configuration?: CfnBroker.ConfigurationIdProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly encryptionOptions?: CfnBroker.EncryptionOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly ldapServerMetadata?: CfnBroker.LdapServerMetadataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                  \n    readonly logs?: CfnBroker.LogListProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly maintenanceWindowStartTime?: CfnBroker.MaintenanceWindowProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly securityGroups?: string[];\n\n                                                                                                                                                                                                     \n    readonly storageType?: string;\n\nn    readonly subnetIds?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: CfnBroker.TagsEntryProperty[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBrokerProps`\n *\n * @param properties - the TypeScript properties of a `CfnBrokerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBrokerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authenticationStrategy', cdk.validateString)(properties.authenticationStrategy));\n    errors.collect(cdk.propertyValidator('autoMinorVersionUpgrade', cdk.requiredValidator)(properties.autoMinorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('autoMinorVersionUpgrade', cdk.validateBoolean)(properties.autoMinorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('brokerName', cdk.requiredValidator)(properties.brokerName));\n    errors.collect(cdk.propertyValidator('brokerName', cdk.validateString)(properties.brokerName));\n    errors.collect(cdk.propertyValidator('configuration', CfnBroker_ConfigurationIdPropertyValidator)(properties.configuration));\n    errors.collect(cdk.propertyValidator('deploymentMode', cdk.requiredValidator)(properties.deploymentMode));\n    errors.collect(cdk.propertyValidator('deploymentMode', cdk.validateString)(properties.deploymentMode));\n    errors.collect(cdk.propertyValidator('encryptionOptions', CfnBroker_EncryptionOptionsPropertyValidator)(properties.encryptionOptions));\n    errors.collect(cdk.propertyValidator('engineType', cdk.requiredValidator)(properties.engineType));\n    errors.collect(cdk.propertyValidator('engineType', cdk.validateString)(properties.engineType));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.requiredValidator)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('hostInstanceType', cdk.requiredValidator)(properties.hostInstanceType));\n    errors.collect(cdk.propertyValidator('hostInstanceType', cdk.validateString)(properties.hostInstanceType));\n    errors.collect(cdk.propertyValidator('ldapServerMetadata', CfnBroker_LdapServerMetadataPropertyValidator)(properties.ldapServerMetadata));\n    errors.collect(cdk.propertyValidator('logs', CfnBroker_LogListPropertyValidator)(properties.logs));\n    errors.collect(cdk.propertyValidator('maintenanceWindowStartTime', CfnBroker_MaintenanceWindowPropertyValidator)(properties.maintenanceWindowStartTime));\n    errors.collect(cdk.propertyValidator('publiclyAccessible', cdk.requiredValidator)(properties.publiclyAccessible));\n    errors.collect(cdk.propertyValidator('publiclyAccessible', cdk.validateBoolean)(properties.publiclyAccessible));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('storageType', cdk.validateString)(properties.storageType));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnBroker_TagsEntryPropertyValidator))(properties.tags));\n    errors.collect(cdk.propertyValidator('users', cdk.requiredValidator)(properties.users));\n    errors.collect(cdk.propertyValidator('users', cdk.listValidator(CfnBroker_UserPropertyValidator))(properties.users));\n    return errors.wrap('supplied properties not correct for \"CfnBrokerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker` resource\n *\n * @param properties - the TypeScript properties of a `CfnBrokerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBrokerPropsValidator(properties).assertSuccess();\n    return {\n        AutoMinorVersionUpgrade: cdk.booleanToCloudFormation(properties.autoMinorVersionUpgrade),\n        BrokerName: cdk.stringToCloudFormation(properties.brokerName),\n        DeploymentMode: cdk.stringToCloudFormation(properties.deploymentMode),\n        EngineType: cdk.stringToCloudFormation(properties.engineType),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        HostInstanceType: cdk.stringToCloudFormation(properties.hostInstanceType),\n        PubliclyAccessible: cdk.booleanToCloudFormation(properties.publiclyAccessible),\n        Users: cdk.listMapper(cfnBrokerUserPropertyToCloudFormation)(properties.users),\n        AuthenticationStrategy: cdk.stringToCloudFormation(properties.authenticationStrategy),\n        Configuration: cfnBrokerConfigurationIdPropertyToCloudFormation(properties.configuration),\n        EncryptionOptions: cfnBrokerEncryptionOptionsPropertyToCloudFormation(properties.encryptionOptions),\n        LdapServerMetadata: cfnBrokerLdapServerMetadataPropertyToCloudFormation(properties.ldapServerMetadata),\n        Logs: cfnBrokerLogListPropertyToCloudFormation(properties.logs),\n        MaintenanceWindowStartTime: cfnBrokerMaintenanceWindowPropertyToCloudFormation(properties.maintenanceWindowStartTime),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        StorageType: cdk.stringToCloudFormation(properties.storageType),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        Tags: cdk.listMapper(cfnBrokerTagsEntryPropertyToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBrokerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBrokerProps>();\n    ret.addPropertyResult('autoMinorVersionUpgrade', 'AutoMinorVersionUpgrade', cfn_parse.FromCloudFormation.getBoolean(properties.AutoMinorVersionUpgrade));\n    ret.addPropertyResult('brokerName', 'BrokerName', cfn_parse.FromCloudFormation.getString(properties.BrokerName));\n    ret.addPropertyResult('deploymentMode', 'DeploymentMode', cfn_parse.FromCloudFormation.getString(properties.DeploymentMode));\n    ret.addPropertyResult('engineType', 'EngineType', cfn_parse.FromCloudFormation.getString(properties.EngineType));\n    ret.addPropertyResult('engineVersion', 'EngineVersion', cfn_parse.FromCloudFormation.getString(properties.EngineVersion));\n    ret.addPropertyResult('hostInstanceType', 'HostInstanceType', cfn_parse.FromCloudFormation.getString(properties.HostInstanceType));\n    ret.addPropertyResult('publiclyAccessible', 'PubliclyAccessible', cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible));\n    ret.addPropertyResult('users', 'Users', cfn_parse.FromCloudFormation.getArray(CfnBrokerUserPropertyFromCloudFormation)(properties.Users));\n    ret.addPropertyResult('authenticationStrategy', 'AuthenticationStrategy', properties.AuthenticationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AuthenticationStrategy) : undefined);\n    ret.addPropertyResult('configuration', 'Configuration', properties.Configuration != null ? CfnBrokerConfigurationIdPropertyFromCloudFormation(properties.Configuration) : undefined);\n    ret.addPropertyResult('encryptionOptions', 'EncryptionOptions', properties.EncryptionOptions != null ? CfnBrokerEncryptionOptionsPropertyFromCloudFormation(properties.EncryptionOptions) : undefined);\n    ret.addPropertyResult('ldapServerMetadata', 'LdapServerMetadata', properties.LdapServerMetadata != null ? CfnBrokerLdapServerMetadataPropertyFromCloudFormation(properties.LdapServerMetadata) : undefined);\n    ret.addPropertyResult('logs', 'Logs', properties.Logs != null ? CfnBrokerLogListPropertyFromCloudFormation(properties.Logs) : undefined);\n    ret.addPropertyResult('maintenanceWindowStartTime', 'MaintenanceWindowStartTime', properties.MaintenanceWindowStartTime != null ? CfnBrokerMaintenanceWindowPropertyFromCloudFormation(properties.MaintenanceWindowStartTime) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('storageType', 'StorageType', properties.StorageType != null ? cfn_parse.FromCloudFormation.getString(properties.StorageType) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(CfnBrokerTagsEntryPropertyFromCloudFormation)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnBroker extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AmazonMQ::Broker\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBroker {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBrokerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBroker(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                          \n    public readonly attrAmqpEndpoints: string[];\n\n                                                                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                                                           \n    public readonly attrConfigurationId: string;\n\n                                                                                                                                        \n    public readonly attrConfigurationRevision: number;\n\n                                                                                                                                                                                                                     \n    public readonly attrIpAddresses: string[];\n\n                                                                                                                                                                                                                                          \n    public readonly attrMqttEndpoints: string[];\n\n                                                                                                                                                                                                                                              \n    public readonly attrOpenWireEndpoints: string[];\n\n                                                                                                                                                                                                                                              \n    public readonly attrStompEndpoints: string[];\n\n                                                                                                                                                                                                                                    \n    public readonly attrWssEndpoints: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public autoMinorVersionUpgrade: boolean | cdk.IResolvable;\n\nn    public brokerName: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public deploymentMode: string;\n\n                                                                                                                                                                                                                                                              \n    public engineType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public engineVersion: string;\n\n                                                                                                                                                                                                           \n    public hostInstanceType: string;\n\n                                                                                                                                                                                                                                                                           \n    public publiclyAccessible: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public users: Array<CfnBroker.UserProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    public authenticationStrategy: string | undefined;\n\n                                                                                                                                                                                                                                                               \n    public configuration: CfnBroker.ConfigurationIdProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public encryptionOptions: CfnBroker.EncryptionOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                             \n    public ldapServerMetadata: CfnBroker.LdapServerMetadataProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                  \n    public logs: CfnBroker.LogListProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public maintenanceWindowStartTime: CfnBroker.MaintenanceWindowProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                               \n    public securityGroups: string[] | undefined;\n\n                                                                                                                                                                                                     \n    public storageType: string | undefined;\n\nn    public subnetIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnBrokerProps) {\n        super(scope, id, { type: CfnBroker.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'autoMinorVersionUpgrade', this);\n        cdk.requireProperty(props, 'brokerName', this);\n        cdk.requireProperty(props, 'deploymentMode', this);\n        cdk.requireProperty(props, 'engineType', this);\n        cdk.requireProperty(props, 'engineVersion', this);\n        cdk.requireProperty(props, 'hostInstanceType', this);\n        cdk.requireProperty(props, 'publiclyAccessible', this);\n        cdk.requireProperty(props, 'users', this);\n        this.attrAmqpEndpoints = cdk.Token.asList(this.getAtt('AmqpEndpoints'));\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrConfigurationId = cdk.Token.asString(this.getAtt('ConfigurationId'));\n        this.attrConfigurationRevision = cdk.Token.asNumber(this.getAtt('ConfigurationRevision'));\n        this.attrIpAddresses = cdk.Token.asList(this.getAtt('IpAddresses'));\n        this.attrMqttEndpoints = cdk.Token.asList(this.getAtt('MqttEndpoints'));\n        this.attrOpenWireEndpoints = cdk.Token.asList(this.getAtt('OpenWireEndpoints'));\n        this.attrStompEndpoints = cdk.Token.asList(this.getAtt('StompEndpoints'));\n        this.attrWssEndpoints = cdk.Token.asList(this.getAtt('WssEndpoints'));\n\n        this.autoMinorVersionUpgrade = props.autoMinorVersionUpgrade;\n        this.brokerName = props.brokerName;\n        this.deploymentMode = props.deploymentMode;\n        this.engineType = props.engineType;\n        this.engineVersion = props.engineVersion;\n        this.hostInstanceType = props.hostInstanceType;\n        this.publiclyAccessible = props.publiclyAccessible;\n        this.users = props.users;\n        this.authenticationStrategy = props.authenticationStrategy;\n        this.configuration = props.configuration;\n        this.encryptionOptions = props.encryptionOptions;\n        this.ldapServerMetadata = props.ldapServerMetadata;\n        this.logs = props.logs;\n        this.maintenanceWindowStartTime = props.maintenanceWindowStartTime;\n        this.securityGroups = props.securityGroups;\n        this.storageType = props.storageType;\n        this.subnetIds = props.subnetIds;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AmazonMQ::Broker\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBroker.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            autoMinorVersionUpgrade: this.autoMinorVersionUpgrade,\n            brokerName: this.brokerName,\n            deploymentMode: this.deploymentMode,\n            engineType: this.engineType,\n            engineVersion: this.engineVersion,\n            hostInstanceType: this.hostInstanceType,\n            publiclyAccessible: this.publiclyAccessible,\n            users: this.users,\n            authenticationStrategy: this.authenticationStrategy,\n            configuration: this.configuration,\n            encryptionOptions: this.encryptionOptions,\n            ldapServerMetadata: this.ldapServerMetadata,\n            logs: this.logs,\n            maintenanceWindowStartTime: this.maintenanceWindowStartTime,\n            securityGroups: this.securityGroups,\n            storageType: this.storageType,\n            subnetIds: this.subnetIds,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBrokerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBroker {\n                                                                                                                                                                                                                                                                                                                \n    export interface ConfigurationIdProperty {\n                                                                                                                                                                                                                                                                                     \n        readonly id: string;\n                                                                                                                                                                                                                                                                       \n        readonly revision: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConfigurationIdProperty`\n *\n * @param properties - the TypeScript properties of a `ConfigurationIdProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_ConfigurationIdPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('revision', cdk.requiredValidator)(properties.revision));\n    errors.collect(cdk.propertyValidator('revision', cdk.validateNumber)(properties.revision));\n    return errors.wrap('supplied properties not correct for \"ConfigurationIdProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.ConfigurationId` resource\n *\n * @param properties - the TypeScript properties of a `ConfigurationIdProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.ConfigurationId` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerConfigurationIdPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_ConfigurationIdPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Revision: cdk.numberToCloudFormation(properties.revision),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerConfigurationIdPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.ConfigurationIdProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.ConfigurationIdProperty>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('revision', 'Revision', cfn_parse.FromCloudFormation.getNumber(properties.Revision));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBroker {\n                                                                                                                                                                                                                                                                                                      \n    export interface EncryptionOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly useAwsOwnedKey: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_EncryptionOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('useAwsOwnedKey', cdk.requiredValidator)(properties.useAwsOwnedKey));\n    errors.collect(cdk.propertyValidator('useAwsOwnedKey', cdk.validateBoolean)(properties.useAwsOwnedKey));\n    return errors.wrap('supplied properties not correct for \"EncryptionOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.EncryptionOptions` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.EncryptionOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerEncryptionOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_EncryptionOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        UseAwsOwnedKey: cdk.booleanToCloudFormation(properties.useAwsOwnedKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerEncryptionOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.EncryptionOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.EncryptionOptionsProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('useAwsOwnedKey', 'UseAwsOwnedKey', cfn_parse.FromCloudFormation.getBoolean(properties.UseAwsOwnedKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBroker {\n                                                                                                                                                                                                                                                                                                                                                                            \n    export interface LdapServerMetadataProperty {\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly hosts: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly roleBase: string;\nn        readonly roleName?: string;\nn        readonly roleSearchMatching: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly roleSearchSubtree?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly serviceAccountPassword: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly serviceAccountUsername: string;\nn        readonly userBase: string;\nn        readonly userRoleName?: string;\nn        readonly userSearchMatching: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly userSearchSubtree?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LdapServerMetadataProperty`\n *\n * @param properties - the TypeScript properties of a `LdapServerMetadataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_LdapServerMetadataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hosts', cdk.requiredValidator)(properties.hosts));\n    errors.collect(cdk.propertyValidator('hosts', cdk.listValidator(cdk.validateString))(properties.hosts));\n    errors.collect(cdk.propertyValidator('roleBase', cdk.requiredValidator)(properties.roleBase));\n    errors.collect(cdk.propertyValidator('roleBase', cdk.validateString)(properties.roleBase));\n    errors.collect(cdk.propertyValidator('roleName', cdk.validateString)(properties.roleName));\n    errors.collect(cdk.propertyValidator('roleSearchMatching', cdk.requiredValidator)(properties.roleSearchMatching));\n    errors.collect(cdk.propertyValidator('roleSearchMatching', cdk.validateString)(properties.roleSearchMatching));\n    errors.collect(cdk.propertyValidator('roleSearchSubtree', cdk.validateBoolean)(properties.roleSearchSubtree));\n    errors.collect(cdk.propertyValidator('serviceAccountPassword', cdk.requiredValidator)(properties.serviceAccountPassword));\n    errors.collect(cdk.propertyValidator('serviceAccountPassword', cdk.validateString)(properties.serviceAccountPassword));\n    errors.collect(cdk.propertyValidator('serviceAccountUsername', cdk.requiredValidator)(properties.serviceAccountUsername));\n    errors.collect(cdk.propertyValidator('serviceAccountUsername', cdk.validateString)(properties.serviceAccountUsername));\n    errors.collect(cdk.propertyValidator('userBase', cdk.requiredValidator)(properties.userBase));\n    errors.collect(cdk.propertyValidator('userBase', cdk.validateString)(properties.userBase));\n    errors.collect(cdk.propertyValidator('userRoleName', cdk.validateString)(properties.userRoleName));\n    errors.collect(cdk.propertyValidator('userSearchMatching', cdk.requiredValidator)(properties.userSearchMatching));\n    errors.collect(cdk.propertyValidator('userSearchMatching', cdk.validateString)(properties.userSearchMatching));\n    errors.collect(cdk.propertyValidator('userSearchSubtree', cdk.validateBoolean)(properties.userSearchSubtree));\n    return errors.wrap('supplied properties not correct for \"LdapServerMetadataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.LdapServerMetadata` resource\n *\n * @param properties - the TypeScript properties of a `LdapServerMetadataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.LdapServerMetadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerLdapServerMetadataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_LdapServerMetadataPropertyValidator(properties).assertSuccess();\n    return {\n        Hosts: cdk.listMapper(cdk.stringToCloudFormation)(properties.hosts),\n        RoleBase: cdk.stringToCloudFormation(properties.roleBase),\n        RoleName: cdk.stringToCloudFormation(properties.roleName),\n        RoleSearchMatching: cdk.stringToCloudFormation(properties.roleSearchMatching),\n        RoleSearchSubtree: cdk.booleanToCloudFormation(properties.roleSearchSubtree),\n        ServiceAccountPassword: cdk.stringToCloudFormation(properties.serviceAccountPassword),\n        ServiceAccountUsername: cdk.stringToCloudFormation(properties.serviceAccountUsername),\n        UserBase: cdk.stringToCloudFormation(properties.userBase),\n        UserRoleName: cdk.stringToCloudFormation(properties.userRoleName),\n        UserSearchMatching: cdk.stringToCloudFormation(properties.userSearchMatching),\n        UserSearchSubtree: cdk.booleanToCloudFormation(properties.userSearchSubtree),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerLdapServerMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.LdapServerMetadataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.LdapServerMetadataProperty>();\n    ret.addPropertyResult('hosts', 'Hosts', cfn_parse.FromCloudFormation.getStringArray(properties.Hosts));\n    ret.addPropertyResult('roleBase', 'RoleBase', cfn_parse.FromCloudFormation.getString(properties.RoleBase));\n    ret.addPropertyResult('roleName', 'RoleName', properties.RoleName != null ? cfn_parse.FromCloudFormation.getString(properties.RoleName) : undefined);\n    ret.addPropertyResult('roleSearchMatching', 'RoleSearchMatching', cfn_parse.FromCloudFormation.getString(properties.RoleSearchMatching));\n    ret.addPropertyResult('roleSearchSubtree', 'RoleSearchSubtree', properties.RoleSearchSubtree != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RoleSearchSubtree) : undefined);\n    ret.addPropertyResult('serviceAccountPassword', 'ServiceAccountPassword', cfn_parse.FromCloudFormation.getString(properties.ServiceAccountPassword));\n    ret.addPropertyResult('serviceAccountUsername', 'ServiceAccountUsername', cfn_parse.FromCloudFormation.getString(properties.ServiceAccountUsername));\n    ret.addPropertyResult('userBase', 'UserBase', cfn_parse.FromCloudFormation.getString(properties.UserBase));\n    ret.addPropertyResult('userRoleName', 'UserRoleName', properties.UserRoleName != null ? cfn_parse.FromCloudFormation.getString(properties.UserRoleName) : undefined);\n    ret.addPropertyResult('userSearchMatching', 'UserSearchMatching', cfn_parse.FromCloudFormation.getString(properties.UserSearchMatching));\n    ret.addPropertyResult('userSearchSubtree', 'UserSearchSubtree', properties.UserSearchSubtree != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UserSearchSubtree) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBroker {\n                                                                                                                                                                                                                                                                                \n    export interface LogListProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly audit?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                     \n        readonly general?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogListProperty`\n *\n * @param properties - the TypeScript properties of a `LogListProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_LogListPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audit', cdk.validateBoolean)(properties.audit));\n    errors.collect(cdk.propertyValidator('general', cdk.validateBoolean)(properties.general));\n    return errors.wrap('supplied properties not correct for \"LogListProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.LogList` resource\n *\n * @param properties - the TypeScript properties of a `LogListProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.LogList` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerLogListPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_LogListPropertyValidator(properties).assertSuccess();\n    return {\n        Audit: cdk.booleanToCloudFormation(properties.audit),\n        General: cdk.booleanToCloudFormation(properties.general),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerLogListPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.LogListProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.LogListProperty>();\n    ret.addPropertyResult('audit', 'Audit', properties.Audit != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Audit) : undefined);\n    ret.addPropertyResult('general', 'General', properties.General != null ? cfn_parse.FromCloudFormation.getBoolean(properties.General) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBroker {\n                                                                                                                                                                                                                                                                                                                      \n    export interface MaintenanceWindowProperty {\n                                                                                                                                                                                                                                                       \n        readonly dayOfWeek: string;\n                                                                                                                                                                                                                                                               \n        readonly timeOfDay: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly timeZone: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MaintenanceWindowProperty`\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_MaintenanceWindowPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dayOfWeek', cdk.requiredValidator)(properties.dayOfWeek));\n    errors.collect(cdk.propertyValidator('dayOfWeek', cdk.validateString)(properties.dayOfWeek));\n    errors.collect(cdk.propertyValidator('timeOfDay', cdk.requiredValidator)(properties.timeOfDay));\n    errors.collect(cdk.propertyValidator('timeOfDay', cdk.validateString)(properties.timeOfDay));\n    errors.collect(cdk.propertyValidator('timeZone', cdk.requiredValidator)(properties.timeZone));\n    errors.collect(cdk.propertyValidator('timeZone', cdk.validateString)(properties.timeZone));\n    return errors.wrap('supplied properties not correct for \"MaintenanceWindowProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.MaintenanceWindow` resource\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.MaintenanceWindow` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerMaintenanceWindowPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_MaintenanceWindowPropertyValidator(properties).assertSuccess();\n    return {\n        DayOfWeek: cdk.stringToCloudFormation(properties.dayOfWeek),\n        TimeOfDay: cdk.stringToCloudFormation(properties.timeOfDay),\n        TimeZone: cdk.stringToCloudFormation(properties.timeZone),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerMaintenanceWindowPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.MaintenanceWindowProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.MaintenanceWindowProperty>();\n    ret.addPropertyResult('dayOfWeek', 'DayOfWeek', cfn_parse.FromCloudFormation.getString(properties.DayOfWeek));\n    ret.addPropertyResult('timeOfDay', 'TimeOfDay', cfn_parse.FromCloudFormation.getString(properties.TimeOfDay));\n    ret.addPropertyResult('timeZone', 'TimeZone', cfn_parse.FromCloudFormation.getString(properties.TimeZone));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBroker {\n                                                                                                                                                                                                                                                      \n    export interface TagsEntryProperty {\n                                                                                                                                                                                                                                         \n        readonly key: string;\n                                                                                                                                                                                                                                             \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagsEntryProperty`\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_TagsEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagsEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.TagsEntry` resource\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.TagsEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerTagsEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_TagsEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerTagsEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.TagsEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.TagsEntryProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBroker {\nn    export interface UserProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly consoleAccess?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly groups?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly password: string;\nn        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserProperty`\n *\n * @param properties - the TypeScript properties of a `UserProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBroker_UserPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('consoleAccess', cdk.validateBoolean)(properties.consoleAccess));\n    errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"UserProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.User` resource\n *\n * @param properties - the TypeScript properties of a `UserProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Broker.User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBrokerUserPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBroker_UserPropertyValidator(properties).assertSuccess();\n    return {\n        ConsoleAccess: cdk.booleanToCloudFormation(properties.consoleAccess),\n        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBrokerUserPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBroker.UserProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBroker.UserProperty>();\n    ret.addPropertyResult('consoleAccess', 'ConsoleAccess', properties.ConsoleAccess != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ConsoleAccess) : undefined);\n    ret.addPropertyResult('groups', 'Groups', properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : undefined);\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                               \nexport interface CfnConfigurationProps {\n\n                                                                                                                                                                                                                       \n    readonly data: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly engineType: string;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly engineVersion: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly authenticationStrategy?: string;\n\n                                                                                                                                                                                                                              \n    readonly description?: string;\n\n                                                                                                                                                                                                                              \n    readonly tags?: CfnConfiguration.TagsEntryProperty[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authenticationStrategy', cdk.validateString)(properties.authenticationStrategy));\n    errors.collect(cdk.propertyValidator('data', cdk.requiredValidator)(properties.data));\n    errors.collect(cdk.propertyValidator('data', cdk.validateString)(properties.data));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('engineType', cdk.requiredValidator)(properties.engineType));\n    errors.collect(cdk.propertyValidator('engineType', cdk.validateString)(properties.engineType));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.requiredValidator)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnConfiguration_TagsEntryPropertyValidator))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Configuration` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Configuration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        Data: cdk.stringToCloudFormation(properties.data),\n        EngineType: cdk.stringToCloudFormation(properties.engineType),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        Name: cdk.stringToCloudFormation(properties.name),\n        AuthenticationStrategy: cdk.stringToCloudFormation(properties.authenticationStrategy),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cfnConfigurationTagsEntryPropertyToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationProps>();\n    ret.addPropertyResult('data', 'Data', cfn_parse.FromCloudFormation.getString(properties.Data));\n    ret.addPropertyResult('engineType', 'EngineType', cfn_parse.FromCloudFormation.getString(properties.EngineType));\n    ret.addPropertyResult('engineVersion', 'EngineVersion', cfn_parse.FromCloudFormation.getString(properties.EngineVersion));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('authenticationStrategy', 'AuthenticationStrategy', properties.AuthenticationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AuthenticationStrategy) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(CfnConfigurationTagsEntryPropertyFromCloudFormation)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \nexport class CfnConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AmazonMQ::Configuration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                       \n    public readonly attrId: string;\n\n                                                                                                                           \n    public readonly attrRevision: number;\n\n                                                                                                                                                                                                                       \n    public data: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    public engineType: string;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public engineVersion: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                      \n    public authenticationStrategy: string | undefined;\n\n                                                                                                                                                                                                                              \n    public description: string | undefined;\n\n                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigurationProps) {\n        super(scope, id, { type: CfnConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'data', this);\n        cdk.requireProperty(props, 'engineType', this);\n        cdk.requireProperty(props, 'engineVersion', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrRevision = cdk.Token.asNumber(this.getAtt('Revision'));\n\n        this.data = props.data;\n        this.engineType = props.engineType;\n        this.engineVersion = props.engineVersion;\n        this.name = props.name;\n        this.authenticationStrategy = props.authenticationStrategy;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AmazonMQ::Configuration\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            data: this.data,\n            engineType: this.engineType,\n            engineVersion: this.engineVersion,\n            name: this.name,\n            authenticationStrategy: this.authenticationStrategy,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConfiguration {\n                                                                                                                                                                                                                                                                    \n    export interface TagsEntryProperty {\n                                                                                                                                                                                                                                                       \n        readonly key: string;\n                                                                                                                                                                                                                                                           \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagsEntryProperty`\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfiguration_TagsEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagsEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::Configuration.TagsEntry` resource\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::Configuration.TagsEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationTagsEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfiguration_TagsEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationTagsEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfiguration.TagsEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfiguration.TagsEntryProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                     \nexport interface CfnConfigurationAssociationProps {\n\n                                                                                                                                                                                                                                                       \n    readonly broker: string;\n\n                                                                                                                                                                                                                                                              \n    readonly configuration: CfnConfigurationAssociation.ConfigurationIdProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigurationAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('broker', cdk.requiredValidator)(properties.broker));\n    errors.collect(cdk.propertyValidator('broker', cdk.validateString)(properties.broker));\n    errors.collect(cdk.propertyValidator('configuration', cdk.requiredValidator)(properties.configuration));\n    errors.collect(cdk.propertyValidator('configuration', CfnConfigurationAssociation_ConfigurationIdPropertyValidator)(properties.configuration));\n    return errors.wrap('supplied properties not correct for \"CfnConfigurationAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::ConfigurationAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::ConfigurationAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationAssociationPropsValidator(properties).assertSuccess();\n    return {\n        Broker: cdk.stringToCloudFormation(properties.broker),\n        Configuration: cfnConfigurationAssociationConfigurationIdPropertyToCloudFormation(properties.configuration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationAssociationProps>();\n    ret.addPropertyResult('broker', 'Broker', cfn_parse.FromCloudFormation.getString(properties.Broker));\n    ret.addPropertyResult('configuration', 'Configuration', CfnConfigurationAssociationConfigurationIdPropertyFromCloudFormation(properties.Configuration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConfigurationAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AmazonMQ::ConfigurationAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfigurationAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigurationAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfigurationAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                       \n    public broker: string;\n\n                                                                                                                                                                                                                                                              \n    public configuration: CfnConfigurationAssociation.ConfigurationIdProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigurationAssociationProps) {\n        super(scope, id, { type: CfnConfigurationAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'broker', this);\n        cdk.requireProperty(props, 'configuration', this);\n\n        this.broker = props.broker;\n        this.configuration = props.configuration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfigurationAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            broker: this.broker,\n            configuration: this.configuration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigurationAssociationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConfigurationAssociation {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface ConfigurationIdProperty {\n                                                                                                                                                                                                                                                                                                                         \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly revision: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConfigurationIdProperty`\n *\n * @param properties - the TypeScript properties of a `ConfigurationIdProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationAssociation_ConfigurationIdPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('revision', cdk.requiredValidator)(properties.revision));\n    errors.collect(cdk.propertyValidator('revision', cdk.validateNumber)(properties.revision));\n    return errors.wrap('supplied properties not correct for \"ConfigurationIdProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId` resource\n *\n * @param properties - the TypeScript properties of a `ConfigurationIdProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationAssociationConfigurationIdPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationAssociation_ConfigurationIdPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Revision: cdk.numberToCloudFormation(properties.revision),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationAssociationConfigurationIdPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationAssociation.ConfigurationIdProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationAssociation.ConfigurationIdProperty>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('revision', 'Revision', cfn_parse.FromCloudFormation.getNumber(properties.Revision));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
