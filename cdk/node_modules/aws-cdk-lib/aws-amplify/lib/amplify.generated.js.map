{
  "version": 3,
  "sources": ["amplify.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:27.421Z\",\"fingerprint\":\"0NnX2NFXnZEApB2q0jkJjXRN3YK/r0QEkl638SxDYQg=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                          \nexport interface CfnAppProps {\n\n                                                                                                                                                                                                                                                                                                        \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly accessToken?: string;\n\n                                                                                                                                                                                                                                          \n    readonly autoBranchCreationConfig?: CfnApp.AutoBranchCreationConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly basicAuthConfig?: CfnApp.BasicAuthConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly buildSpec?: string;\n\n                                                                                                                                                                                                                                                                                                                                  \n    readonly customHeaders?: string;\n\n                                                                                                                                                                                                                            \n    readonly customRules?: Array<CfnApp.CustomRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                           \n    readonly enableBranchAutoDeletion?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly environmentVariables?: Array<CfnApp.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly iamServiceRole?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly oauthToken?: string;\n\n                                                                                                                                                                                                                                    \n    readonly repository?: string;\n\n                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAppProps`\n *\n * @param properties - the TypeScript properties of a `CfnAppProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('autoBranchCreationConfig', CfnApp_AutoBranchCreationConfigPropertyValidator)(properties.autoBranchCreationConfig));\n    errors.collect(cdk.propertyValidator('basicAuthConfig', CfnApp_BasicAuthConfigPropertyValidator)(properties.basicAuthConfig));\n    errors.collect(cdk.propertyValidator('buildSpec', cdk.validateString)(properties.buildSpec));\n    errors.collect(cdk.propertyValidator('customHeaders', cdk.validateString)(properties.customHeaders));\n    errors.collect(cdk.propertyValidator('customRules', cdk.listValidator(CfnApp_CustomRulePropertyValidator))(properties.customRules));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('enableBranchAutoDeletion', cdk.validateBoolean)(properties.enableBranchAutoDeletion));\n    errors.collect(cdk.propertyValidator('environmentVariables', cdk.listValidator(CfnApp_EnvironmentVariablePropertyValidator))(properties.environmentVariables));\n    errors.collect(cdk.propertyValidator('iamServiceRole', cdk.validateString)(properties.iamServiceRole));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('oauthToken', cdk.validateString)(properties.oauthToken));\n    errors.collect(cdk.propertyValidator('repository', cdk.validateString)(properties.repository));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAppProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::App` resource\n *\n * @param properties - the TypeScript properties of a `CfnAppProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::App` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        AutoBranchCreationConfig: cfnAppAutoBranchCreationConfigPropertyToCloudFormation(properties.autoBranchCreationConfig),\n        BasicAuthConfig: cfnAppBasicAuthConfigPropertyToCloudFormation(properties.basicAuthConfig),\n        BuildSpec: cdk.stringToCloudFormation(properties.buildSpec),\n        CustomHeaders: cdk.stringToCloudFormation(properties.customHeaders),\n        CustomRules: cdk.listMapper(cfnAppCustomRulePropertyToCloudFormation)(properties.customRules),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EnableBranchAutoDeletion: cdk.booleanToCloudFormation(properties.enableBranchAutoDeletion),\n        EnvironmentVariables: cdk.listMapper(cfnAppEnvironmentVariablePropertyToCloudFormation)(properties.environmentVariables),\n        IAMServiceRole: cdk.stringToCloudFormation(properties.iamServiceRole),\n        OauthToken: cdk.stringToCloudFormation(properties.oauthToken),\n        Repository: cdk.stringToCloudFormation(properties.repository),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('autoBranchCreationConfig', 'AutoBranchCreationConfig', properties.AutoBranchCreationConfig != null ? CfnAppAutoBranchCreationConfigPropertyFromCloudFormation(properties.AutoBranchCreationConfig) : undefined);\n    ret.addPropertyResult('basicAuthConfig', 'BasicAuthConfig', properties.BasicAuthConfig != null ? CfnAppBasicAuthConfigPropertyFromCloudFormation(properties.BasicAuthConfig) : undefined);\n    ret.addPropertyResult('buildSpec', 'BuildSpec', properties.BuildSpec != null ? cfn_parse.FromCloudFormation.getString(properties.BuildSpec) : undefined);\n    ret.addPropertyResult('customHeaders', 'CustomHeaders', properties.CustomHeaders != null ? cfn_parse.FromCloudFormation.getString(properties.CustomHeaders) : undefined);\n    ret.addPropertyResult('customRules', 'CustomRules', properties.CustomRules != null ? cfn_parse.FromCloudFormation.getArray(CfnAppCustomRulePropertyFromCloudFormation)(properties.CustomRules) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('enableBranchAutoDeletion', 'EnableBranchAutoDeletion', properties.EnableBranchAutoDeletion != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableBranchAutoDeletion) : undefined);\n    ret.addPropertyResult('environmentVariables', 'EnvironmentVariables', properties.EnvironmentVariables != null ? cfn_parse.FromCloudFormation.getArray(CfnAppEnvironmentVariablePropertyFromCloudFormation)(properties.EnvironmentVariables) : undefined);\n    ret.addPropertyResult('iamServiceRole', 'IAMServiceRole', properties.IAMServiceRole != null ? cfn_parse.FromCloudFormation.getString(properties.IAMServiceRole) : undefined);\n    ret.addPropertyResult('oauthToken', 'OauthToken', properties.OauthToken != null ? cfn_parse.FromCloudFormation.getString(properties.OauthToken) : undefined);\n    ret.addPropertyResult('repository', 'Repository', properties.Repository != null ? cfn_parse.FromCloudFormation.getString(properties.Repository) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                            \nexport class CfnApp extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Amplify::App\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApp {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAppPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApp(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                           \n    public readonly attrAppId: string;\n\n                                                                                        \n    public readonly attrAppName: string;\n\n                                                                                   \n    public readonly attrArn: string;\n\n                                                                                                        \n    public readonly attrDefaultDomain: string;\n\n                                                                                                                                                                                                                                                                                                        \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    public accessToken: string | undefined;\n\n                                                                                                                                                                                                                                          \n    public autoBranchCreationConfig: CfnApp.AutoBranchCreationConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                        \n    public basicAuthConfig: CfnApp.BasicAuthConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public buildSpec: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                  \n    public customHeaders: string | undefined;\n\n                                                                                                                                                                                                                            \n    public customRules: Array<CfnApp.CustomRuleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                           \n    public enableBranchAutoDeletion: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public environmentVariables: Array<CfnApp.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public iamServiceRole: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public oauthToken: string | undefined;\n\n                                                                                                                                                                                                                                    \n    public repository: string | undefined;\n\n                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnAppProps) {\n        super(scope, id, { type: CfnApp.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrAppId = cdk.Token.asString(this.getAtt('AppId'));\n        this.attrAppName = cdk.Token.asString(this.getAtt('AppName'));\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDefaultDomain = cdk.Token.asString(this.getAtt('DefaultDomain'));\n\n        this.name = props.name;\n        this.accessToken = props.accessToken;\n        this.autoBranchCreationConfig = props.autoBranchCreationConfig;\n        this.basicAuthConfig = props.basicAuthConfig;\n        this.buildSpec = props.buildSpec;\n        this.customHeaders = props.customHeaders;\n        this.customRules = props.customRules;\n        this.description = props.description;\n        this.enableBranchAutoDeletion = props.enableBranchAutoDeletion;\n        this.environmentVariables = props.environmentVariables;\n        this.iamServiceRole = props.iamServiceRole;\n        this.oauthToken = props.oauthToken;\n        this.repository = props.repository;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Amplify::App\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApp.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            accessToken: this.accessToken,\n            autoBranchCreationConfig: this.autoBranchCreationConfig,\n            basicAuthConfig: this.basicAuthConfig,\n            buildSpec: this.buildSpec,\n            customHeaders: this.customHeaders,\n            customRules: this.customRules,\n            description: this.description,\n            enableBranchAutoDeletion: this.enableBranchAutoDeletion,\n            environmentVariables: this.environmentVariables,\n            iamServiceRole: this.iamServiceRole,\n            oauthToken: this.oauthToken,\n            repository: this.repository,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAppPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApp {\n                                                                                                                                                                                                                                                                                                                                \n    export interface AutoBranchCreationConfigProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly autoBranchCreationPatterns?: string[];\n                                                                                                                                                                                                                                                                                                     \n        readonly basicAuthConfig?: CfnApp.BasicAuthConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly buildSpec?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly enableAutoBranchCreation?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                 \n        readonly enableAutoBuild?: boolean | cdk.IResolvable;\nn        readonly enablePerformanceMode?: boolean | cdk.IResolvable;\nn        readonly enablePullRequestPreview?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly environmentVariables?: Array<CfnApp.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly pullRequestEnvironmentName?: string;\n                                                                                                                                                                                                                                                                       \n        readonly stage?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoBranchCreationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AutoBranchCreationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApp_AutoBranchCreationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoBranchCreationPatterns', cdk.listValidator(cdk.validateString))(properties.autoBranchCreationPatterns));\n    errors.collect(cdk.propertyValidator('basicAuthConfig', CfnApp_BasicAuthConfigPropertyValidator)(properties.basicAuthConfig));\n    errors.collect(cdk.propertyValidator('buildSpec', cdk.validateString)(properties.buildSpec));\n    errors.collect(cdk.propertyValidator('enableAutoBranchCreation', cdk.validateBoolean)(properties.enableAutoBranchCreation));\n    errors.collect(cdk.propertyValidator('enableAutoBuild', cdk.validateBoolean)(properties.enableAutoBuild));\n    errors.collect(cdk.propertyValidator('enablePerformanceMode', cdk.validateBoolean)(properties.enablePerformanceMode));\n    errors.collect(cdk.propertyValidator('enablePullRequestPreview', cdk.validateBoolean)(properties.enablePullRequestPreview));\n    errors.collect(cdk.propertyValidator('environmentVariables', cdk.listValidator(CfnApp_EnvironmentVariablePropertyValidator))(properties.environmentVariables));\n    errors.collect(cdk.propertyValidator('pullRequestEnvironmentName', cdk.validateString)(properties.pullRequestEnvironmentName));\n    errors.collect(cdk.propertyValidator('stage', cdk.validateString)(properties.stage));\n    return errors.wrap('supplied properties not correct for \"AutoBranchCreationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::App.AutoBranchCreationConfig` resource\n *\n * @param properties - the TypeScript properties of a `AutoBranchCreationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::App.AutoBranchCreationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppAutoBranchCreationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApp_AutoBranchCreationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AutoBranchCreationPatterns: cdk.listMapper(cdk.stringToCloudFormation)(properties.autoBranchCreationPatterns),\n        BasicAuthConfig: cfnAppBasicAuthConfigPropertyToCloudFormation(properties.basicAuthConfig),\n        BuildSpec: cdk.stringToCloudFormation(properties.buildSpec),\n        EnableAutoBranchCreation: cdk.booleanToCloudFormation(properties.enableAutoBranchCreation),\n        EnableAutoBuild: cdk.booleanToCloudFormation(properties.enableAutoBuild),\n        EnablePerformanceMode: cdk.booleanToCloudFormation(properties.enablePerformanceMode),\n        EnablePullRequestPreview: cdk.booleanToCloudFormation(properties.enablePullRequestPreview),\n        EnvironmentVariables: cdk.listMapper(cfnAppEnvironmentVariablePropertyToCloudFormation)(properties.environmentVariables),\n        PullRequestEnvironmentName: cdk.stringToCloudFormation(properties.pullRequestEnvironmentName),\n        Stage: cdk.stringToCloudFormation(properties.stage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppAutoBranchCreationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApp.AutoBranchCreationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApp.AutoBranchCreationConfigProperty>();\n    ret.addPropertyResult('autoBranchCreationPatterns', 'AutoBranchCreationPatterns', properties.AutoBranchCreationPatterns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AutoBranchCreationPatterns) : undefined);\n    ret.addPropertyResult('basicAuthConfig', 'BasicAuthConfig', properties.BasicAuthConfig != null ? CfnAppBasicAuthConfigPropertyFromCloudFormation(properties.BasicAuthConfig) : undefined);\n    ret.addPropertyResult('buildSpec', 'BuildSpec', properties.BuildSpec != null ? cfn_parse.FromCloudFormation.getString(properties.BuildSpec) : undefined);\n    ret.addPropertyResult('enableAutoBranchCreation', 'EnableAutoBranchCreation', properties.EnableAutoBranchCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableAutoBranchCreation) : undefined);\n    ret.addPropertyResult('enableAutoBuild', 'EnableAutoBuild', properties.EnableAutoBuild != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableAutoBuild) : undefined);\n    ret.addPropertyResult('enablePerformanceMode', 'EnablePerformanceMode', properties.EnablePerformanceMode != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnablePerformanceMode) : undefined);\n    ret.addPropertyResult('enablePullRequestPreview', 'EnablePullRequestPreview', properties.EnablePullRequestPreview != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnablePullRequestPreview) : undefined);\n    ret.addPropertyResult('environmentVariables', 'EnvironmentVariables', properties.EnvironmentVariables != null ? cfn_parse.FromCloudFormation.getArray(CfnAppEnvironmentVariablePropertyFromCloudFormation)(properties.EnvironmentVariables) : undefined);\n    ret.addPropertyResult('pullRequestEnvironmentName', 'PullRequestEnvironmentName', properties.PullRequestEnvironmentName != null ? cfn_parse.FromCloudFormation.getString(properties.PullRequestEnvironmentName) : undefined);\n    ret.addPropertyResult('stage', 'Stage', properties.Stage != null ? cfn_parse.FromCloudFormation.getString(properties.Stage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApp {\n                                                                                                                                                                                                                                                                                                                \n    export interface BasicAuthConfigProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly enableBasicAuth?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly password?: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly username?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BasicAuthConfigProperty`\n *\n * @param properties - the TypeScript properties of a `BasicAuthConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApp_BasicAuthConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableBasicAuth', cdk.validateBoolean)(properties.enableBasicAuth));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"BasicAuthConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::App.BasicAuthConfig` resource\n *\n * @param properties - the TypeScript properties of a `BasicAuthConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::App.BasicAuthConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppBasicAuthConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApp_BasicAuthConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableBasicAuth: cdk.booleanToCloudFormation(properties.enableBasicAuth),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppBasicAuthConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApp.BasicAuthConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApp.BasicAuthConfigProperty>();\n    ret.addPropertyResult('enableBasicAuth', 'EnableBasicAuth', properties.EnableBasicAuth != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableBasicAuth) : undefined);\n    ret.addPropertyResult('password', 'Password', properties.Password != null ? cfn_parse.FromCloudFormation.getString(properties.Password) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApp {\n                                                                                                                                                                                                                                                                                                                                                                           \n    export interface CustomRuleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly condition?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly source: string;\nn        readonly status?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly target: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomRuleProperty`\n *\n * @param properties - the TypeScript properties of a `CustomRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApp_CustomRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('condition', cdk.validateString)(properties.condition));\n    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('target', cdk.requiredValidator)(properties.target));\n    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));\n    return errors.wrap('supplied properties not correct for \"CustomRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::App.CustomRule` resource\n *\n * @param properties - the TypeScript properties of a `CustomRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::App.CustomRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppCustomRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApp_CustomRulePropertyValidator(properties).assertSuccess();\n    return {\n        Condition: cdk.stringToCloudFormation(properties.condition),\n        Source: cdk.stringToCloudFormation(properties.source),\n        Status: cdk.stringToCloudFormation(properties.status),\n        Target: cdk.stringToCloudFormation(properties.target),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppCustomRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApp.CustomRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApp.CustomRuleProperty>();\n    ret.addPropertyResult('condition', 'Condition', properties.Condition != null ? cfn_parse.FromCloudFormation.getString(properties.Condition) : undefined);\n    ret.addPropertyResult('source', 'Source', cfn_parse.FromCloudFormation.getString(properties.Source));\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addPropertyResult('target', 'Target', cfn_parse.FromCloudFormation.getString(properties.Target));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApp {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface EnvironmentVariableProperty {\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentVariableProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApp_EnvironmentVariablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"EnvironmentVariableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::App.EnvironmentVariable` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::App.EnvironmentVariable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppEnvironmentVariablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApp_EnvironmentVariablePropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppEnvironmentVariablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApp.EnvironmentVariableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApp.EnvironmentVariableProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnBranchProps {\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly appId: string;\n\n                                                                                                                                                                                                                                                                                                                \n    readonly branchName: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly basicAuthConfig?: CfnBranch.BasicAuthConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly buildSpec?: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly description?: string;\n\n                                                                                                                                                                                                                  \n    readonly enableAutoBuild?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly enablePerformanceMode?: boolean | cdk.IResolvable;\n\nn    readonly enablePullRequestPreview?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                           \n    readonly environmentVariables?: Array<CfnBranch.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly pullRequestEnvironmentName?: string;\n\n                                                                                                                                                                                                                                                                                                          \n    readonly stage?: string;\n\n                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBranchProps`\n *\n * @param properties - the TypeScript properties of a `CfnBranchProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBranchPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appId', cdk.requiredValidator)(properties.appId));\n    errors.collect(cdk.propertyValidator('appId', cdk.validateString)(properties.appId));\n    errors.collect(cdk.propertyValidator('basicAuthConfig', CfnBranch_BasicAuthConfigPropertyValidator)(properties.basicAuthConfig));\n    errors.collect(cdk.propertyValidator('branchName', cdk.requiredValidator)(properties.branchName));\n    errors.collect(cdk.propertyValidator('branchName', cdk.validateString)(properties.branchName));\n    errors.collect(cdk.propertyValidator('buildSpec', cdk.validateString)(properties.buildSpec));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('enableAutoBuild', cdk.validateBoolean)(properties.enableAutoBuild));\n    errors.collect(cdk.propertyValidator('enablePerformanceMode', cdk.validateBoolean)(properties.enablePerformanceMode));\n    errors.collect(cdk.propertyValidator('enablePullRequestPreview', cdk.validateBoolean)(properties.enablePullRequestPreview));\n    errors.collect(cdk.propertyValidator('environmentVariables', cdk.listValidator(CfnBranch_EnvironmentVariablePropertyValidator))(properties.environmentVariables));\n    errors.collect(cdk.propertyValidator('pullRequestEnvironmentName', cdk.validateString)(properties.pullRequestEnvironmentName));\n    errors.collect(cdk.propertyValidator('stage', cdk.validateString)(properties.stage));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnBranchProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::Branch` resource\n *\n * @param properties - the TypeScript properties of a `CfnBranchProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::Branch` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBranchPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBranchPropsValidator(properties).assertSuccess();\n    return {\n        AppId: cdk.stringToCloudFormation(properties.appId),\n        BranchName: cdk.stringToCloudFormation(properties.branchName),\n        BasicAuthConfig: cfnBranchBasicAuthConfigPropertyToCloudFormation(properties.basicAuthConfig),\n        BuildSpec: cdk.stringToCloudFormation(properties.buildSpec),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EnableAutoBuild: cdk.booleanToCloudFormation(properties.enableAutoBuild),\n        EnablePerformanceMode: cdk.booleanToCloudFormation(properties.enablePerformanceMode),\n        EnablePullRequestPreview: cdk.booleanToCloudFormation(properties.enablePullRequestPreview),\n        EnvironmentVariables: cdk.listMapper(cfnBranchEnvironmentVariablePropertyToCloudFormation)(properties.environmentVariables),\n        PullRequestEnvironmentName: cdk.stringToCloudFormation(properties.pullRequestEnvironmentName),\n        Stage: cdk.stringToCloudFormation(properties.stage),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBranchPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBranchProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBranchProps>();\n    ret.addPropertyResult('appId', 'AppId', cfn_parse.FromCloudFormation.getString(properties.AppId));\n    ret.addPropertyResult('branchName', 'BranchName', cfn_parse.FromCloudFormation.getString(properties.BranchName));\n    ret.addPropertyResult('basicAuthConfig', 'BasicAuthConfig', properties.BasicAuthConfig != null ? CfnBranchBasicAuthConfigPropertyFromCloudFormation(properties.BasicAuthConfig) : undefined);\n    ret.addPropertyResult('buildSpec', 'BuildSpec', properties.BuildSpec != null ? cfn_parse.FromCloudFormation.getString(properties.BuildSpec) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('enableAutoBuild', 'EnableAutoBuild', properties.EnableAutoBuild != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableAutoBuild) : undefined);\n    ret.addPropertyResult('enablePerformanceMode', 'EnablePerformanceMode', properties.EnablePerformanceMode != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnablePerformanceMode) : undefined);\n    ret.addPropertyResult('enablePullRequestPreview', 'EnablePullRequestPreview', properties.EnablePullRequestPreview != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnablePullRequestPreview) : undefined);\n    ret.addPropertyResult('environmentVariables', 'EnvironmentVariables', properties.EnvironmentVariables != null ? cfn_parse.FromCloudFormation.getArray(CfnBranchEnvironmentVariablePropertyFromCloudFormation)(properties.EnvironmentVariables) : undefined);\n    ret.addPropertyResult('pullRequestEnvironmentName', 'PullRequestEnvironmentName', properties.PullRequestEnvironmentName != null ? cfn_parse.FromCloudFormation.getString(properties.PullRequestEnvironmentName) : undefined);\n    ret.addPropertyResult('stage', 'Stage', properties.Stage != null ? cfn_parse.FromCloudFormation.getString(properties.Stage) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                   \nexport class CfnBranch extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Amplify::Branch\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBranch {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBranchPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBranch(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                    \n    public readonly attrArn: string;\n\n                                                                                                            \n    public readonly attrBranchName: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    public appId: string;\n\n                                                                                                                                                                                                                                                                                                                \n    public branchName: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public basicAuthConfig: CfnBranch.BasicAuthConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public buildSpec: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                                                  \n    public enableAutoBuild: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public enablePerformanceMode: boolean | cdk.IResolvable | undefined;\n\nn    public enablePullRequestPreview: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    public environmentVariables: Array<CfnBranch.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public pullRequestEnvironmentName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                          \n    public stage: string | undefined;\n\n                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnBranchProps) {\n        super(scope, id, { type: CfnBranch.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'appId', this);\n        cdk.requireProperty(props, 'branchName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrBranchName = cdk.Token.asString(this.getAtt('BranchName'));\n\n        this.appId = props.appId;\n        this.branchName = props.branchName;\n        this.basicAuthConfig = props.basicAuthConfig;\n        this.buildSpec = props.buildSpec;\n        this.description = props.description;\n        this.enableAutoBuild = props.enableAutoBuild;\n        this.enablePerformanceMode = props.enablePerformanceMode;\n        this.enablePullRequestPreview = props.enablePullRequestPreview;\n        this.environmentVariables = props.environmentVariables;\n        this.pullRequestEnvironmentName = props.pullRequestEnvironmentName;\n        this.stage = props.stage;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Amplify::Branch\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBranch.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            appId: this.appId,\n            branchName: this.branchName,\n            basicAuthConfig: this.basicAuthConfig,\n            buildSpec: this.buildSpec,\n            description: this.description,\n            enableAutoBuild: this.enableAutoBuild,\n            enablePerformanceMode: this.enablePerformanceMode,\n            enablePullRequestPreview: this.enablePullRequestPreview,\n            environmentVariables: this.environmentVariables,\n            pullRequestEnvironmentName: this.pullRequestEnvironmentName,\n            stage: this.stage,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBranchPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBranch {\n                                                                                                                                                                                                                                                                                                    \n    export interface BasicAuthConfigProperty {\n                                                                                                                                                                                                                                                                              \n        readonly enableBasicAuth?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly password: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BasicAuthConfigProperty`\n *\n * @param properties - the TypeScript properties of a `BasicAuthConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBranch_BasicAuthConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableBasicAuth', cdk.validateBoolean)(properties.enableBasicAuth));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"BasicAuthConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::Branch.BasicAuthConfig` resource\n *\n * @param properties - the TypeScript properties of a `BasicAuthConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::Branch.BasicAuthConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBranchBasicAuthConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBranch_BasicAuthConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableBasicAuth: cdk.booleanToCloudFormation(properties.enableBasicAuth),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBranchBasicAuthConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBranch.BasicAuthConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBranch.BasicAuthConfigProperty>();\n    ret.addPropertyResult('enableBasicAuth', 'EnableBasicAuth', properties.EnableBasicAuth != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableBasicAuth) : undefined);\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBranch {\n                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface EnvironmentVariableProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentVariableProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBranch_EnvironmentVariablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"EnvironmentVariableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::Branch.EnvironmentVariable` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::Branch.EnvironmentVariable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBranchEnvironmentVariablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBranch_EnvironmentVariablePropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBranchEnvironmentVariablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBranch.EnvironmentVariableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBranch.EnvironmentVariableProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnDomainProps {\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly appId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly domainName: string;\n\n                                                                                                                                                                                                             \n    readonly subDomainSettings: Array<CfnDomain.SubDomainSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly autoSubDomainCreationPatterns?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly autoSubDomainIamRole?: string;\n\n                                                                                                                                                                                                                                           \n    readonly enableAutoSubDomain?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDomainProps`\n *\n * @param properties - the TypeScript properties of a `CfnDomainProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appId', cdk.requiredValidator)(properties.appId));\n    errors.collect(cdk.propertyValidator('appId', cdk.validateString)(properties.appId));\n    errors.collect(cdk.propertyValidator('autoSubDomainCreationPatterns', cdk.listValidator(cdk.validateString))(properties.autoSubDomainCreationPatterns));\n    errors.collect(cdk.propertyValidator('autoSubDomainIamRole', cdk.validateString)(properties.autoSubDomainIamRole));\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('enableAutoSubDomain', cdk.validateBoolean)(properties.enableAutoSubDomain));\n    errors.collect(cdk.propertyValidator('subDomainSettings', cdk.requiredValidator)(properties.subDomainSettings));\n    errors.collect(cdk.propertyValidator('subDomainSettings', cdk.listValidator(CfnDomain_SubDomainSettingPropertyValidator))(properties.subDomainSettings));\n    return errors.wrap('supplied properties not correct for \"CfnDomainProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::Domain` resource\n *\n * @param properties - the TypeScript properties of a `CfnDomainProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::Domain` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainPropsValidator(properties).assertSuccess();\n    return {\n        AppId: cdk.stringToCloudFormation(properties.appId),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        SubDomainSettings: cdk.listMapper(cfnDomainSubDomainSettingPropertyToCloudFormation)(properties.subDomainSettings),\n        AutoSubDomainCreationPatterns: cdk.listMapper(cdk.stringToCloudFormation)(properties.autoSubDomainCreationPatterns),\n        AutoSubDomainIAMRole: cdk.stringToCloudFormation(properties.autoSubDomainIamRole),\n        EnableAutoSubDomain: cdk.booleanToCloudFormation(properties.enableAutoSubDomain),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainProps>();\n    ret.addPropertyResult('appId', 'AppId', cfn_parse.FromCloudFormation.getString(properties.AppId));\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('subDomainSettings', 'SubDomainSettings', cfn_parse.FromCloudFormation.getArray(CfnDomainSubDomainSettingPropertyFromCloudFormation)(properties.SubDomainSettings));\n    ret.addPropertyResult('autoSubDomainCreationPatterns', 'AutoSubDomainCreationPatterns', properties.AutoSubDomainCreationPatterns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AutoSubDomainCreationPatterns) : undefined);\n    ret.addPropertyResult('autoSubDomainIamRole', 'AutoSubDomainIAMRole', properties.AutoSubDomainIAMRole != null ? cfn_parse.FromCloudFormation.getString(properties.AutoSubDomainIAMRole) : undefined);\n    ret.addPropertyResult('enableAutoSubDomain', 'EnableAutoSubDomain', properties.EnableAutoSubDomain != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableAutoSubDomain) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                  \nexport class CfnDomain extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Amplify::Domain\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDomain {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDomainPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDomain(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                             \n    public readonly attrAutoSubDomainCreationPatterns: string[];\n\n                                                                                                                   \n    public readonly attrAutoSubDomainIamRole: string;\n\n                                                                                                                 \n    public readonly attrCertificateRecord: string;\n\n                                                                                     \n    public readonly attrDomainName: string;\n\n                                                                                                      \n    public readonly attrDomainStatus: string;\n\n                                                                                                                                                          \n    public readonly attrEnableAutoSubDomain: cdk.IResolvable;\n\n                                                                                                                \n    public readonly attrStatusReason: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    public appId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public domainName: string;\n\n                                                                                                                                                                                                             \n    public subDomainSettings: Array<CfnDomain.SubDomainSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    public autoSubDomainCreationPatterns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public autoSubDomainIamRole: string | undefined;\n\n                                                                                                                                                                                                                                           \n    public enableAutoSubDomain: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnDomainProps) {\n        super(scope, id, { type: CfnDomain.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'appId', this);\n        cdk.requireProperty(props, 'domainName', this);\n        cdk.requireProperty(props, 'subDomainSettings', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrAutoSubDomainCreationPatterns = cdk.Token.asList(this.getAtt('AutoSubDomainCreationPatterns'));\n        this.attrAutoSubDomainIamRole = cdk.Token.asString(this.getAtt('AutoSubDomainIAMRole'));\n        this.attrCertificateRecord = cdk.Token.asString(this.getAtt('CertificateRecord'));\n        this.attrDomainName = cdk.Token.asString(this.getAtt('DomainName'));\n        this.attrDomainStatus = cdk.Token.asString(this.getAtt('DomainStatus'));\n        this.attrEnableAutoSubDomain = this.getAtt('EnableAutoSubDomain');\n        this.attrStatusReason = cdk.Token.asString(this.getAtt('StatusReason'));\n\n        this.appId = props.appId;\n        this.domainName = props.domainName;\n        this.subDomainSettings = props.subDomainSettings;\n        this.autoSubDomainCreationPatterns = props.autoSubDomainCreationPatterns;\n        this.autoSubDomainIamRole = props.autoSubDomainIamRole;\n        this.enableAutoSubDomain = props.enableAutoSubDomain;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDomain.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            appId: this.appId,\n            domainName: this.domainName,\n            subDomainSettings: this.subDomainSettings,\n            autoSubDomainCreationPatterns: this.autoSubDomainCreationPatterns,\n            autoSubDomainIamRole: this.autoSubDomainIamRole,\n            enableAutoSubDomain: this.enableAutoSubDomain,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDomainPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDomain {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface SubDomainSettingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly branchName: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly prefix: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SubDomainSettingProperty`\n *\n * @param properties - the TypeScript properties of a `SubDomainSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_SubDomainSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('branchName', cdk.requiredValidator)(properties.branchName));\n    errors.collect(cdk.propertyValidator('branchName', cdk.validateString)(properties.branchName));\n    errors.collect(cdk.propertyValidator('prefix', cdk.requiredValidator)(properties.prefix));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    return errors.wrap('supplied properties not correct for \"SubDomainSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Amplify::Domain.SubDomainSetting` resource\n *\n * @param properties - the TypeScript properties of a `SubDomainSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Amplify::Domain.SubDomainSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainSubDomainSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_SubDomainSettingPropertyValidator(properties).assertSuccess();\n    return {\n        BranchName: cdk.stringToCloudFormation(properties.branchName),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainSubDomainSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.SubDomainSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.SubDomainSettingProperty>();\n    ret.addPropertyResult('branchName', 'BranchName', cfn_parse.FromCloudFormation.getString(properties.BranchName));\n    ret.addPropertyResult('prefix', 'Prefix', cfn_parse.FromCloudFormation.getString(properties.Prefix));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
