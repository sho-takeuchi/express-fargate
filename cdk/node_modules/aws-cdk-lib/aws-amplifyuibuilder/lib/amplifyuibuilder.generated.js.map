{
  "version": 3,
  "sources": ["amplifyuibuilder.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:27.451Z\",\"fingerprint\":\"c1MfGOeCPDcNEXT4yxePI9grFV+T2yKheqCDOViVm6w=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                               \nexport interface CfnComponentProps {\n\n                                                                                                                                                                                                                                                                                                                                                     \n    readonly bindingProperties?: { [key: string]: (CfnComponent.ComponentBindingPropertiesValueProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    readonly children?: Array<CfnComponent.ComponentChildProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly collectionProperties?: { [key: string]: (CfnComponent.ComponentDataConfigurationProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly componentType?: string;\n\n                                                                                                                                                                                                                    \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly overrides?: { [key: string]: (any | cdk.IResolvable | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly properties?: { [key: string]: (CfnComponent.ComponentPropertyProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                          \n    readonly sourceId?: string;\n\n                                                                                                                                                                                                                                                        \n    readonly tags?: { [key: string]: (string) };\n\n                                                                                                                                                                                                                                                                                                \n    readonly variants?: Array<CfnComponent.ComponentVariantProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnComponentProps`\n *\n * @param properties - the TypeScript properties of a `CfnComponentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bindingProperties', cdk.hashValidator(CfnComponent_ComponentBindingPropertiesValuePropertyValidator))(properties.bindingProperties));\n    errors.collect(cdk.propertyValidator('children', cdk.listValidator(CfnComponent_ComponentChildPropertyValidator))(properties.children));\n    errors.collect(cdk.propertyValidator('collectionProperties', cdk.hashValidator(CfnComponent_ComponentDataConfigurationPropertyValidator))(properties.collectionProperties));\n    errors.collect(cdk.propertyValidator('componentType', cdk.validateString)(properties.componentType));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('overrides', cdk.hashValidator(cdk.validateObject))(properties.overrides));\n    errors.collect(cdk.propertyValidator('properties', cdk.hashValidator(CfnComponent_ComponentPropertyPropertyValidator))(properties.properties));\n    errors.collect(cdk.propertyValidator('sourceId', cdk.validateString)(properties.sourceId));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    errors.collect(cdk.propertyValidator('variants', cdk.listValidator(CfnComponent_ComponentVariantPropertyValidator))(properties.variants));\n    return errors.wrap('supplied properties not correct for \"CfnComponentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component` resource\n *\n * @param properties - the TypeScript properties of a `CfnComponentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentPropsValidator(properties).assertSuccess();\n    return {\n        BindingProperties: cdk.hashMapper(cfnComponentComponentBindingPropertiesValuePropertyToCloudFormation)(properties.bindingProperties),\n        Children: cdk.listMapper(cfnComponentComponentChildPropertyToCloudFormation)(properties.children),\n        CollectionProperties: cdk.hashMapper(cfnComponentComponentDataConfigurationPropertyToCloudFormation)(properties.collectionProperties),\n        ComponentType: cdk.stringToCloudFormation(properties.componentType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Overrides: cdk.hashMapper(cdk.objectToCloudFormation)(properties.overrides),\n        Properties: cdk.hashMapper(cfnComponentComponentPropertyPropertyToCloudFormation)(properties.properties),\n        SourceId: cdk.stringToCloudFormation(properties.sourceId),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n        Variants: cdk.listMapper(cfnComponentComponentVariantPropertyToCloudFormation)(properties.variants),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentProps>();\n    ret.addPropertyResult('bindingProperties', 'BindingProperties', properties.BindingProperties != null ? cfn_parse.FromCloudFormation.getMap(CfnComponentComponentBindingPropertiesValuePropertyFromCloudFormation)(properties.BindingProperties) : undefined);\n    ret.addPropertyResult('children', 'Children', properties.Children != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentComponentChildPropertyFromCloudFormation)(properties.Children) : undefined);\n    ret.addPropertyResult('collectionProperties', 'CollectionProperties', properties.CollectionProperties != null ? cfn_parse.FromCloudFormation.getMap(CfnComponentComponentDataConfigurationPropertyFromCloudFormation)(properties.CollectionProperties) : undefined);\n    ret.addPropertyResult('componentType', 'ComponentType', properties.ComponentType != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentType) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('overrides', 'Overrides', properties.Overrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getAny)(properties.Overrides) : undefined);\n    ret.addPropertyResult('properties', 'Properties', properties.Properties != null ? cfn_parse.FromCloudFormation.getMap(CfnComponentComponentPropertyPropertyFromCloudFormation)(properties.Properties) : undefined);\n    ret.addPropertyResult('sourceId', 'SourceId', properties.SourceId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('variants', 'Variants', properties.Variants != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentComponentVariantPropertyFromCloudFormation)(properties.Variants) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnComponent extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AmplifyUIBuilder::Component\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnComponent {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnComponentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnComponent(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                               \n    public readonly attrAppId: string;\n\n                                                                                                         \n    public readonly attrCreatedAt: string;\n\n                                                                                                                                             \n    public readonly attrEnvironmentName: string;\n\n                                                                                         \n    public readonly attrId: string;\n\n                                                                                                           \n    public readonly attrModifiedAt: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    public bindingProperties: { [key: string]: (CfnComponent.ComponentBindingPropertiesValueProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                   \n    public children: Array<CfnComponent.ComponentChildProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public collectionProperties: { [key: string]: (CfnComponent.ComponentDataConfigurationProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                     \n    public componentType: string | undefined;\n\n                                                                                                                                                                                                                    \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public overrides: { [key: string]: (any | cdk.IResolvable | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                     \n    public properties: { [key: string]: (CfnComponent.ComponentPropertyProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public sourceId: string | undefined;\n\n                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                \n    public variants: Array<CfnComponent.ComponentVariantProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnComponentProps = {}) {\n        super(scope, id, { type: CfnComponent.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrAppId = cdk.Token.asString(this.getAtt('AppId'));\n        this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt'));\n        this.attrEnvironmentName = cdk.Token.asString(this.getAtt('EnvironmentName'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrModifiedAt = cdk.Token.asString(this.getAtt('ModifiedAt'));\n\n        this.bindingProperties = props.bindingProperties;\n        this.children = props.children;\n        this.collectionProperties = props.collectionProperties;\n        this.componentType = props.componentType;\n        this.name = props.name;\n        this.overrides = props.overrides;\n        this.properties = props.properties;\n        this.sourceId = props.sourceId;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::AmplifyUIBuilder::Component\", props.tags, { tagPropertyName: 'tags' });\n        this.variants = props.variants;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnComponent.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bindingProperties: this.bindingProperties,\n            children: this.children,\n            collectionProperties: this.collectionProperties,\n            componentType: this.componentType,\n            name: this.name,\n            overrides: this.overrides,\n            properties: this.properties,\n            sourceId: this.sourceId,\n            tags: this.tags.renderTags(),\n            variants: this.variants,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnComponentPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface ComponentBindingPropertiesValueProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly bindingProperties?: CfnComponent.ComponentBindingPropertiesValuePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly defaultValue?: string;\n                                                                                                                                                                                                                                                                                                  \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentBindingPropertiesValueProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentBindingPropertiesValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentBindingPropertiesValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bindingProperties', CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyValidator)(properties.bindingProperties));\n    errors.collect(cdk.propertyValidator('defaultValue', cdk.validateString)(properties.defaultValue));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ComponentBindingPropertiesValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentBindingPropertiesValue` resource\n *\n * @param properties - the TypeScript properties of a `ComponentBindingPropertiesValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentBindingPropertiesValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentBindingPropertiesValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentBindingPropertiesValuePropertyValidator(properties).assertSuccess();\n    return {\n        BindingProperties: cfnComponentComponentBindingPropertiesValuePropertiesPropertyToCloudFormation(properties.bindingProperties),\n        DefaultValue: cdk.stringToCloudFormation(properties.defaultValue),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentBindingPropertiesValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentBindingPropertiesValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentBindingPropertiesValueProperty>();\n    ret.addPropertyResult('bindingProperties', 'BindingProperties', properties.BindingProperties != null ? CfnComponentComponentBindingPropertiesValuePropertiesPropertyFromCloudFormation(properties.BindingProperties) : undefined);\n    ret.addPropertyResult('defaultValue', 'DefaultValue', properties.DefaultValue != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultValue) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\nn    export interface ComponentBindingPropertiesValuePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly bucket?: string;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly defaultValue?: string;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly field?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly key?: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly model?: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly predicates?: Array<CfnComponent.PredicateProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly userAttribute?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentBindingPropertiesValuePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentBindingPropertiesValuePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('defaultValue', cdk.validateString)(properties.defaultValue));\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('model', cdk.validateString)(properties.model));\n    errors.collect(cdk.propertyValidator('predicates', cdk.listValidator(CfnComponent_PredicatePropertyValidator))(properties.predicates));\n    errors.collect(cdk.propertyValidator('userAttribute', cdk.validateString)(properties.userAttribute));\n    return errors.wrap('supplied properties not correct for \"ComponentBindingPropertiesValuePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentBindingPropertiesValueProperties` resource\n *\n * @param properties - the TypeScript properties of a `ComponentBindingPropertiesValuePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentBindingPropertiesValueProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentBindingPropertiesValuePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        DefaultValue: cdk.stringToCloudFormation(properties.defaultValue),\n        Field: cdk.stringToCloudFormation(properties.field),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Model: cdk.stringToCloudFormation(properties.model),\n        Predicates: cdk.listMapper(cfnComponentPredicatePropertyToCloudFormation)(properties.predicates),\n        UserAttribute: cdk.stringToCloudFormation(properties.userAttribute),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentBindingPropertiesValuePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentBindingPropertiesValuePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentBindingPropertiesValuePropertiesProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', properties.Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.Bucket) : undefined);\n    ret.addPropertyResult('defaultValue', 'DefaultValue', properties.DefaultValue != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultValue) : undefined);\n    ret.addPropertyResult('field', 'Field', properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : undefined);\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('model', 'Model', properties.Model != null ? cfn_parse.FromCloudFormation.getString(properties.Model) : undefined);\n    ret.addPropertyResult('predicates', 'Predicates', properties.Predicates != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentPredicatePropertyFromCloudFormation)(properties.Predicates) : undefined);\n    ret.addPropertyResult('userAttribute', 'UserAttribute', properties.UserAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.UserAttribute) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                       \n    export interface ComponentChildProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly children?: Array<CfnComponent.ComponentChildProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly componentType: string;\n                                                                                                                                                                                                                                                                              \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly properties: any | cdk.IResolvable | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentChildProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentChildProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentChildPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('children', cdk.listValidator(CfnComponent_ComponentChildPropertyValidator))(properties.children));\n    errors.collect(cdk.propertyValidator('componentType', cdk.requiredValidator)(properties.componentType));\n    errors.collect(cdk.propertyValidator('componentType', cdk.validateString)(properties.componentType));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('properties', cdk.requiredValidator)(properties.properties));\n    errors.collect(cdk.propertyValidator('properties', cdk.validateObject)(properties.properties));\n    return errors.wrap('supplied properties not correct for \"ComponentChildProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentChild` resource\n *\n * @param properties - the TypeScript properties of a `ComponentChildProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentChild` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentChildPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentChildPropertyValidator(properties).assertSuccess();\n    return {\n        Children: cdk.listMapper(cfnComponentComponentChildPropertyToCloudFormation)(properties.children),\n        ComponentType: cdk.stringToCloudFormation(properties.componentType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Properties: cdk.objectToCloudFormation(properties.properties),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentChildPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentChildProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentChildProperty>();\n    ret.addPropertyResult('children', 'Children', properties.Children != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentComponentChildPropertyFromCloudFormation)(properties.Children) : undefined);\n    ret.addPropertyResult('componentType', 'ComponentType', cfn_parse.FromCloudFormation.getString(properties.ComponentType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('properties', 'Properties', cfn_parse.FromCloudFormation.getAny(properties.Properties));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface ComponentConditionPropertyProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly else?: CfnComponent.ComponentPropertyProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly field?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly operand?: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly operator?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly property?: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly then?: CfnComponent.ComponentPropertyProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentConditionPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentConditionPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentConditionPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('else', CfnComponent_ComponentPropertyPropertyValidator)(properties.else));\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    errors.collect(cdk.propertyValidator('operand', cdk.validateString)(properties.operand));\n    errors.collect(cdk.propertyValidator('operator', cdk.validateString)(properties.operator));\n    errors.collect(cdk.propertyValidator('property', cdk.validateString)(properties.property));\n    errors.collect(cdk.propertyValidator('then', CfnComponent_ComponentPropertyPropertyValidator)(properties.then));\n    return errors.wrap('supplied properties not correct for \"ComponentConditionPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentConditionProperty` resource\n *\n * @param properties - the TypeScript properties of a `ComponentConditionPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentConditionProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentConditionPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentConditionPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        Else: cfnComponentComponentPropertyPropertyToCloudFormation(properties.else),\n        Field: cdk.stringToCloudFormation(properties.field),\n        Operand: cdk.stringToCloudFormation(properties.operand),\n        Operator: cdk.stringToCloudFormation(properties.operator),\n        Property: cdk.stringToCloudFormation(properties.property),\n        Then: cfnComponentComponentPropertyPropertyToCloudFormation(properties.then),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentConditionPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentConditionPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentConditionPropertyProperty>();\n    ret.addPropertyResult('else', 'Else', properties.Else != null ? CfnComponentComponentPropertyPropertyFromCloudFormation(properties.Else) : undefined);\n    ret.addPropertyResult('field', 'Field', properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : undefined);\n    ret.addPropertyResult('operand', 'Operand', properties.Operand != null ? cfn_parse.FromCloudFormation.getString(properties.Operand) : undefined);\n    ret.addPropertyResult('operator', 'Operator', properties.Operator != null ? cfn_parse.FromCloudFormation.getString(properties.Operator) : undefined);\n    ret.addPropertyResult('property', 'Property', properties.Property != null ? cfn_parse.FromCloudFormation.getString(properties.Property) : undefined);\n    ret.addPropertyResult('then', 'Then', properties.Then != null ? CfnComponentComponentPropertyPropertyFromCloudFormation(properties.Then) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                                       \n    export interface ComponentDataConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly identifiers?: string[];\n                                                                                                                                                                                                                                                                                                                                     \n        readonly model: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly predicate?: CfnComponent.PredicateProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                       \n        readonly sort?: Array<CfnComponent.SortPropertyProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentDataConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentDataConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentDataConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('identifiers', cdk.listValidator(cdk.validateString))(properties.identifiers));\n    errors.collect(cdk.propertyValidator('model', cdk.requiredValidator)(properties.model));\n    errors.collect(cdk.propertyValidator('model', cdk.validateString)(properties.model));\n    errors.collect(cdk.propertyValidator('predicate', CfnComponent_PredicatePropertyValidator)(properties.predicate));\n    errors.collect(cdk.propertyValidator('sort', cdk.listValidator(CfnComponent_SortPropertyPropertyValidator))(properties.sort));\n    return errors.wrap('supplied properties not correct for \"ComponentDataConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentDataConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ComponentDataConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentDataConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentDataConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentDataConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Identifiers: cdk.listMapper(cdk.stringToCloudFormation)(properties.identifiers),\n        Model: cdk.stringToCloudFormation(properties.model),\n        Predicate: cfnComponentPredicatePropertyToCloudFormation(properties.predicate),\n        Sort: cdk.listMapper(cfnComponentSortPropertyPropertyToCloudFormation)(properties.sort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentDataConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentDataConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentDataConfigurationProperty>();\n    ret.addPropertyResult('identifiers', 'Identifiers', properties.Identifiers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Identifiers) : undefined);\n    ret.addPropertyResult('model', 'Model', cfn_parse.FromCloudFormation.getString(properties.Model));\n    ret.addPropertyResult('predicate', 'Predicate', properties.Predicate != null ? CfnComponentPredicatePropertyFromCloudFormation(properties.Predicate) : undefined);\n    ret.addPropertyResult('sort', 'Sort', properties.Sort != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentSortPropertyPropertyFromCloudFormation)(properties.Sort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface ComponentPropertyProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly bindingProperties?: CfnComponent.ComponentPropertyBindingPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly bindings?: any | cdk.IResolvable | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly collectionBindingProperties?: CfnComponent.ComponentPropertyBindingPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly concat?: Array<CfnComponent.ComponentPropertyProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly condition?: CfnComponent.ComponentConditionPropertyProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly configured?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly defaultValue?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly event?: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly importedValue?: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly model?: string;\n                                                                                                                                                                                                                                                                       \n        readonly type?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly userAttribute?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bindingProperties', CfnComponent_ComponentPropertyBindingPropertiesPropertyValidator)(properties.bindingProperties));\n    errors.collect(cdk.propertyValidator('bindings', cdk.validateObject)(properties.bindings));\n    errors.collect(cdk.propertyValidator('collectionBindingProperties', CfnComponent_ComponentPropertyBindingPropertiesPropertyValidator)(properties.collectionBindingProperties));\n    errors.collect(cdk.propertyValidator('concat', cdk.listValidator(CfnComponent_ComponentPropertyPropertyValidator))(properties.concat));\n    errors.collect(cdk.propertyValidator('condition', CfnComponent_ComponentConditionPropertyPropertyValidator)(properties.condition));\n    errors.collect(cdk.propertyValidator('configured', cdk.validateBoolean)(properties.configured));\n    errors.collect(cdk.propertyValidator('defaultValue', cdk.validateString)(properties.defaultValue));\n    errors.collect(cdk.propertyValidator('event', cdk.validateString)(properties.event));\n    errors.collect(cdk.propertyValidator('importedValue', cdk.validateString)(properties.importedValue));\n    errors.collect(cdk.propertyValidator('model', cdk.validateString)(properties.model));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('userAttribute', cdk.validateString)(properties.userAttribute));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ComponentPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentProperty` resource\n *\n * @param properties - the TypeScript properties of a `ComponentPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        BindingProperties: cfnComponentComponentPropertyBindingPropertiesPropertyToCloudFormation(properties.bindingProperties),\n        Bindings: cdk.objectToCloudFormation(properties.bindings),\n        CollectionBindingProperties: cfnComponentComponentPropertyBindingPropertiesPropertyToCloudFormation(properties.collectionBindingProperties),\n        Concat: cdk.listMapper(cfnComponentComponentPropertyPropertyToCloudFormation)(properties.concat),\n        Condition: cfnComponentComponentConditionPropertyPropertyToCloudFormation(properties.condition),\n        Configured: cdk.booleanToCloudFormation(properties.configured),\n        DefaultValue: cdk.stringToCloudFormation(properties.defaultValue),\n        Event: cdk.stringToCloudFormation(properties.event),\n        ImportedValue: cdk.stringToCloudFormation(properties.importedValue),\n        Model: cdk.stringToCloudFormation(properties.model),\n        Type: cdk.stringToCloudFormation(properties.type),\n        UserAttribute: cdk.stringToCloudFormation(properties.userAttribute),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentPropertyProperty>();\n    ret.addPropertyResult('bindingProperties', 'BindingProperties', properties.BindingProperties != null ? CfnComponentComponentPropertyBindingPropertiesPropertyFromCloudFormation(properties.BindingProperties) : undefined);\n    ret.addPropertyResult('bindings', 'Bindings', properties.Bindings != null ? cfn_parse.FromCloudFormation.getAny(properties.Bindings) : undefined);\n    ret.addPropertyResult('collectionBindingProperties', 'CollectionBindingProperties', properties.CollectionBindingProperties != null ? CfnComponentComponentPropertyBindingPropertiesPropertyFromCloudFormation(properties.CollectionBindingProperties) : undefined);\n    ret.addPropertyResult('concat', 'Concat', properties.Concat != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentComponentPropertyPropertyFromCloudFormation)(properties.Concat) : undefined);\n    ret.addPropertyResult('condition', 'Condition', properties.Condition != null ? CfnComponentComponentConditionPropertyPropertyFromCloudFormation(properties.Condition) : undefined);\n    ret.addPropertyResult('configured', 'Configured', properties.Configured != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Configured) : undefined);\n    ret.addPropertyResult('defaultValue', 'DefaultValue', properties.DefaultValue != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultValue) : undefined);\n    ret.addPropertyResult('event', 'Event', properties.Event != null ? cfn_parse.FromCloudFormation.getString(properties.Event) : undefined);\n    ret.addPropertyResult('importedValue', 'ImportedValue', properties.ImportedValue != null ? cfn_parse.FromCloudFormation.getString(properties.ImportedValue) : undefined);\n    ret.addPropertyResult('model', 'Model', properties.Model != null ? cfn_parse.FromCloudFormation.getString(properties.Model) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('userAttribute', 'UserAttribute', properties.UserAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.UserAttribute) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface ComponentPropertyBindingPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly field?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly property: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentPropertyBindingPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentPropertyBindingPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentPropertyBindingPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    errors.collect(cdk.propertyValidator('property', cdk.requiredValidator)(properties.property));\n    errors.collect(cdk.propertyValidator('property', cdk.validateString)(properties.property));\n    return errors.wrap('supplied properties not correct for \"ComponentPropertyBindingPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentPropertyBindingProperties` resource\n *\n * @param properties - the TypeScript properties of a `ComponentPropertyBindingPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentPropertyBindingProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentPropertyBindingPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentPropertyBindingPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Field: cdk.stringToCloudFormation(properties.field),\n        Property: cdk.stringToCloudFormation(properties.property),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentPropertyBindingPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentPropertyBindingPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentPropertyBindingPropertiesProperty>();\n    ret.addPropertyResult('field', 'Field', properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : undefined);\n    ret.addPropertyResult('property', 'Property', cfn_parse.FromCloudFormation.getString(properties.Property));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface ComponentVariantProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly overrides?: any | cdk.IResolvable | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly variantValues?: any | cdk.IResolvable | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentVariantProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentVariantProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_ComponentVariantPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('overrides', cdk.validateObject)(properties.overrides));\n    errors.collect(cdk.propertyValidator('variantValues', cdk.validateObject)(properties.variantValues));\n    return errors.wrap('supplied properties not correct for \"ComponentVariantProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentVariant` resource\n *\n * @param properties - the TypeScript properties of a `ComponentVariantProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.ComponentVariant` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentComponentVariantPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_ComponentVariantPropertyValidator(properties).assertSuccess();\n    return {\n        Overrides: cdk.objectToCloudFormation(properties.overrides),\n        VariantValues: cdk.objectToCloudFormation(properties.variantValues),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentComponentVariantPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.ComponentVariantProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.ComponentVariantProperty>();\n    ret.addPropertyResult('overrides', 'Overrides', properties.Overrides != null ? cfn_parse.FromCloudFormation.getAny(properties.Overrides) : undefined);\n    ret.addPropertyResult('variantValues', 'VariantValues', properties.VariantValues != null ? cfn_parse.FromCloudFormation.getAny(properties.VariantValues) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                                                                                             \n    export interface PredicateProperty {\n                                                                                                                                                                                                                                                                             \n        readonly and?: Array<CfnComponent.PredicateProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                        \n        readonly field?: string;\n                                                                                                                                                                                                                                                                                       \n        readonly operand?: string;\n                                                                                                                                                                                                                                                                                      \n        readonly operator?: string;\n                                                                                                                                                                                                                                                                            \n        readonly or?: Array<CfnComponent.PredicateProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PredicateProperty`\n *\n * @param properties - the TypeScript properties of a `PredicateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_PredicatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('and', cdk.listValidator(CfnComponent_PredicatePropertyValidator))(properties.and));\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    errors.collect(cdk.propertyValidator('operand', cdk.validateString)(properties.operand));\n    errors.collect(cdk.propertyValidator('operator', cdk.validateString)(properties.operator));\n    errors.collect(cdk.propertyValidator('or', cdk.listValidator(CfnComponent_PredicatePropertyValidator))(properties.or));\n    return errors.wrap('supplied properties not correct for \"PredicateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.Predicate` resource\n *\n * @param properties - the TypeScript properties of a `PredicateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.Predicate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentPredicatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_PredicatePropertyValidator(properties).assertSuccess();\n    return {\n        And: cdk.listMapper(cfnComponentPredicatePropertyToCloudFormation)(properties.and),\n        Field: cdk.stringToCloudFormation(properties.field),\n        Operand: cdk.stringToCloudFormation(properties.operand),\n        Operator: cdk.stringToCloudFormation(properties.operator),\n        Or: cdk.listMapper(cfnComponentPredicatePropertyToCloudFormation)(properties.or),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentPredicatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.PredicateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.PredicateProperty>();\n    ret.addPropertyResult('and', 'And', properties.And != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentPredicatePropertyFromCloudFormation)(properties.And) : undefined);\n    ret.addPropertyResult('field', 'Field', properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : undefined);\n    ret.addPropertyResult('operand', 'Operand', properties.Operand != null ? cfn_parse.FromCloudFormation.getString(properties.Operand) : undefined);\n    ret.addPropertyResult('operator', 'Operator', properties.Operator != null ? cfn_parse.FromCloudFormation.getString(properties.Operator) : undefined);\n    ret.addPropertyResult('or', 'Or', properties.Or != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentPredicatePropertyFromCloudFormation)(properties.Or) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponent {\n                                                                                                                                                                                                                                                                                                              \n    export interface SortPropertyProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly direction: string;\n                                                                                                                                                                                                                                                                            \n        readonly field: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SortPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `SortPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponent_SortPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('direction', cdk.requiredValidator)(properties.direction));\n    errors.collect(cdk.propertyValidator('direction', cdk.validateString)(properties.direction));\n    errors.collect(cdk.propertyValidator('field', cdk.requiredValidator)(properties.field));\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    return errors.wrap('supplied properties not correct for \"SortPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.SortProperty` resource\n *\n * @param properties - the TypeScript properties of a `SortPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Component.SortProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentSortPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponent_SortPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        Direction: cdk.stringToCloudFormation(properties.direction),\n        Field: cdk.stringToCloudFormation(properties.field),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentSortPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponent.SortPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponent.SortPropertyProperty>();\n    ret.addPropertyResult('direction', 'Direction', cfn_parse.FromCloudFormation.getString(properties.Direction));\n    ret.addPropertyResult('field', 'Field', cfn_parse.FromCloudFormation.getString(properties.Field));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnThemeProps {\n\n                                                                                                                                                                                                        \n    readonly name: string;\n\n                                                                                                                                                                                                                                                       \n    readonly values: Array<CfnTheme.ThemeValuesProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                           \n    readonly overrides?: Array<CfnTheme.ThemeValuesProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                            \n    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnThemeProps`\n *\n * @param properties - the TypeScript properties of a `CfnThemeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnThemePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('overrides', cdk.listValidator(CfnTheme_ThemeValuesPropertyValidator))(properties.overrides));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(CfnTheme_ThemeValuesPropertyValidator))(properties.values));\n    return errors.wrap('supplied properties not correct for \"CfnThemeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Theme` resource\n *\n * @param properties - the TypeScript properties of a `CfnThemeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Theme` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnThemePropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cfnThemeThemeValuesPropertyToCloudFormation)(properties.values),\n        Overrides: cdk.listMapper(cfnThemeThemeValuesPropertyToCloudFormation)(properties.overrides),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnThemeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnThemeProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getArray(CfnThemeThemeValuesPropertyFromCloudFormation)(properties.Values));\n    ret.addPropertyResult('overrides', 'Overrides', properties.Overrides != null ? cfn_parse.FromCloudFormation.getArray(CfnThemeThemeValuesPropertyFromCloudFormation)(properties.Overrides) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnTheme extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AmplifyUIBuilder::Theme\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTheme {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnThemePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTheme(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                         \n    public readonly attrAppId: string;\n\n                                                                                                     \n    public readonly attrCreatedAt: string;\n\n                                                                                                                                             \n    public readonly attrEnvironmentName: string;\n\n                                                                               \n    public readonly attrId: string;\n\n                                                                                                       \n    public readonly attrModifiedAt: string;\n\n                                                                                                                                                                                                        \n    public name: string;\n\n                                                                                                                                                                                                                                                       \n    public values: Array<CfnTheme.ThemeValuesProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                           \n    public overrides: Array<CfnTheme.ThemeValuesProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnThemeProps) {\n        super(scope, id, { type: CfnTheme.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'values', this);\n        this.attrAppId = cdk.Token.asString(this.getAtt('AppId'));\n        this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt'));\n        this.attrEnvironmentName = cdk.Token.asString(this.getAtt('EnvironmentName'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrModifiedAt = cdk.Token.asString(this.getAtt('ModifiedAt'));\n\n        this.name = props.name;\n        this.values = props.values;\n        this.overrides = props.overrides;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::AmplifyUIBuilder::Theme\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTheme.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            values: this.values,\n            overrides: this.overrides,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnThemePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                                              \n    export interface ThemeValueProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly children?: Array<CfnTheme.ThemeValuesProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                             \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ThemeValueProperty`\n *\n * @param properties - the TypeScript properties of a `ThemeValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_ThemeValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('children', cdk.listValidator(CfnTheme_ThemeValuesPropertyValidator))(properties.children));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ThemeValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Theme.ThemeValue` resource\n *\n * @param properties - the TypeScript properties of a `ThemeValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Theme.ThemeValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeThemeValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_ThemeValuePropertyValidator(properties).assertSuccess();\n    return {\n        Children: cdk.listMapper(cfnThemeThemeValuesPropertyToCloudFormation)(properties.children),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeThemeValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.ThemeValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.ThemeValueProperty>();\n    ret.addPropertyResult('children', 'Children', properties.Children != null ? cfn_parse.FromCloudFormation.getArray(CfnThemeThemeValuesPropertyFromCloudFormation)(properties.Children) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                                                        \n    export interface ThemeValuesProperty {\n                                                                                                                                                                                                                                                        \n        readonly key?: string;\n                                                                                                                                                                                                                                                           \n        readonly value?: CfnTheme.ThemeValueProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ThemeValuesProperty`\n *\n * @param properties - the TypeScript properties of a `ThemeValuesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_ThemeValuesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', CfnTheme_ThemeValuePropertyValidator)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ThemeValuesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Theme.ThemeValues` resource\n *\n * @param properties - the TypeScript properties of a `ThemeValuesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AmplifyUIBuilder::Theme.ThemeValues` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeThemeValuesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_ThemeValuesPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cfnThemeThemeValuePropertyToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeThemeValuesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.ThemeValuesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.ThemeValuesProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? CfnThemeThemeValuePropertyFromCloudFormation(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
