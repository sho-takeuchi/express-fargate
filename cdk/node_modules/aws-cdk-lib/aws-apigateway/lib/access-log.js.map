{
  "version": 3,
  "sources": ["access-log.ts"],
  "sourcesContent": ["import { ILogGroup } from '../../aws-logs';\nimport { IStage } from './stage';\n\n                                                      \nexport interface IAccessLogDestination {\n                                                             \n  bind(stage: IStage): AccessLogDestinationConfig\n}\n\n                                                                     \nexport interface AccessLogDestinationConfig {\n                                                                           \n  readonly destinationArn: string;\n}\n\n                                                                                  \nexport class LogGroupLogDestination implements IAccessLogDestination {\n  constructor(private readonly logGroup: ILogGroup) {\n  }\n\n                                                               \n  public bind(_stage: IStage): AccessLogDestinationConfig {\n    return {\n      destinationArn: this.logGroup.logGroupArn,\n    };\n  }\n}\n\n                                                                               \nexport class AccessLogField {\n                                                \n  public static contextAccountId() {\n    return '$context.identity.accountId';\n  }\n\n                                                                \n  public static contextApiId() {\n    return '$context.apiId';\n  }\n\n                                                                                                                                                                                                                                                                                                                 \n  public static contextAuthorizerClaims(property: string) {\n    return `$context.authorizer.claims.${property}`;\n  }\n\n                                                                                                                                                                                                                                                                                                             \n  public static contextAuthorizerPrincipalId() {\n    return '$context.authorizer.principalId';\n  }\n\n                                                                                                                                                                                                                                                                                                              \n  public static contextAuthorizer(property: string) {\n    return `$context.authorizer.${property}`;\n  }\n\n                                               \n  public static contextAwsEndpointRequestId() {\n    return '$context.awsEndpointRequestId';\n  }\n\n                                                                                                                    \n  public static contextDomainName() {\n    return '$context.domainName';\n  }\n\n                                                                                                                  \n  public static contextDomainPrefix() {\n    return '$context.domainPrefix';\n  }\n\n                                                                  \n  public static contextErrorMessage() {\n    return '$context.error.message';\n  }\n\n                                                                                             \n  public static contextErrorMessageString() {\n    return '$context.error.messageString';\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  public static contextErrorResponseType() {\n    return '$context.error.responseType';\n  }\n\n                                                                         \n  public static contextErrorValidationErrorString() {\n    return '$context.error.validationErrorString';\n  }\n\n                                                                                                                                                   \n  public static contextExtendedRequestId() {\n    return '$context.extendedRequestId';\n  }\n\n                                                                                                                            \n  public static contextHttpMethod() {\n    return '$context.httpMethod';\n  }\n\n                                                                \n  public static contextIdentityAccountId() {\n    return '$context.identity.accountId';\n  }\n\n                                                                                                                                                                                                                                                                                                   \n  public static contextIdentityApiKey() {\n    return '$context.identity.apiKey';\n  }\n\n                                                                                        \n  public static contextIdentityApiKeyId() {\n    return '$context.identity.apiKeyId';\n  }\n\n                                                                           \n  public static contextIdentityCaller() {\n    return '$context.identity.caller';\n  }\n\n                                                                                                                                                                                                                                                                           \n  public static contextIdentityCognitoAuthenticationProvider() {\n    return '$context.identity.cognitoAuthenticationProvider';\n  }\n\n                                                                                                                                                                        \n  public static contextIdentityCognitoAuthenticationType() {\n    return '$context.identity.cognitoAuthenticationType';\n  }\n\n                                                                                                                                                           \n  public static contextIdentityCognitoIdentityId() {\n    return '$context.identity.cognitoIdentityId';\n  }\n\n                                                                                                                                                                     \n  public static contextIdentityCognitoIdentityPoolId() {\n    return '$context.identity.cognitoIdentityPoolId';\n  }\n\n                                         \n  public static contextIdentityPrincipalOrgId() {\n    return '$context.identity.principalOrgId';\n  }\n\n                                                                                                                                                                                                                       \n  public static contextIdentitySourceIp() {\n    return '$context.identity.sourceIp';\n  }\n\n                                                                                                                                                                                                                      \n  public static contextIdentityUser() {\n    return '$context.identity.user';\n  }\n\n                                                         \n  public static contextIdentityUserAgent() {\n    return '$context.identity.userAgent';\n  }\n\n                                                                                                                                                                               \n  public static contextIdentityUserArn() {\n    return '$context.identity.userArn';\n  }\n\n                                                                                                                                                                                                       \n  public static contextPath() {\n    return '$context.path';\n  }\n\n                                                             \n  public static contextProtocol() {\n    return '$context.protocol';\n  }\n\n                                                                    \n  public static contextRequestId() {\n    return '$context.requestId';\n  }\n\n                                                                                                                                                                                                                                                                                                                                                         \n  public static contextRequestOverrideHeader(headerName: string) {\n    return `$context.requestOverride.header.${headerName}`;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                 \n  public static contextRequestOverridePath(pathName: string) {\n    return `$context.requestOverride.path.${pathName}`;\n  }\n\n                                                                                                                                                                                                                                                                          \n  public static contextRequestOverrideQuerystring(querystringName: string) {\n    return `$context.requestOverride.querystring.${querystringName}`;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n  public static contextResponseOverrideHeader(headerName: string) {\n    return `$context.responseOverride.header.${headerName}`;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n  public static contextResponseOverrideStatus() {\n    return '$context.responseOverride.status';\n  }\n\n                                                                              \n  public static contextRequestTime() {\n    return '$context.requestTime';\n  }\n\n                                                  \n  public static contextRequestTimeEpoch() {\n    return '$context.requestTimeEpoch';\n  }\n\n                                                                          \n  public static contextResourceId() {\n    return '$context.resourceId';\n  }\n\n                                                                                                                                                                                                                                                                                                                                                   \n  public static contextResourcePath() {\n    return '$context.resourcePath';\n  }\n\n                                                                                         \n  public static contextStage() {\n    return '$context.stage';\n  }\n\n                                                                                                                                                                                                                                                             \n  public static contextWafResponseCode() {\n    return '$context.wafResponseCode';\n  }\n\n                                                                                                                                                                                                                                                                                                \n  public static contextWebaclArn() {\n    return '$context.webaclArn';\n  }\n\n                                                                                                                                                       \n  public static contextXrayTraceId() {\n    return '$context.xrayTraceId';\n  }\n\n                                              \n  public static contextAuthorizerIntegrationLatency() {\n    return '$context.authorizer.integrationLatency';\n  }\n\n                                               \n  public static contextIntegrationLatency() {\n    return '$context.integrationLatency';\n  }\n\n                                                                                                                                                             \n  public static contextIntegrationStatus() {\n    return '$context.integrationStatus';\n  }\n\n                                            \n  public static contextResponseLatency() {\n    return '$context.responseLatency';\n  }\n\n                                             \n  public static contextResponseLength() {\n    return '$context.responseLength';\n  }\n\n                                            \n  public static contextStatus() {\n    return '$context.status';\n  }\n}\n\n                                                                          \nexport interface JsonWithStandardFieldProps {\n                                                                                            \n  readonly ip: boolean,\n                                                                                                          \n  readonly caller: boolean,\n                                                                                                        \n  readonly user: boolean,\n                                                                                                                                \n  readonly requestTime: boolean,\n                                                                                   \n  readonly httpMethod: boolean,\n                                                                                             \n  readonly resourcePath: boolean,\n                                                                                              \n  readonly status: boolean,\n                                                                                        \n  readonly protocol: boolean,\n                                                                                               \n  readonly responseLength: boolean\n}\n\n                                                 \nexport class AccessLogFormat {\nn  public static custom(format: string): AccessLogFormat {\n    return new AccessLogFormat(format);\n  }\n\n                                            \n  public static clf(): AccessLogFormat {\n    const requester = [AccessLogField.contextIdentitySourceIp(), AccessLogField.contextIdentityCaller(), AccessLogField.contextIdentityUser()].join(' ');\n    const requestTime = AccessLogField.contextRequestTime();\n    const request = [AccessLogField.contextHttpMethod(), AccessLogField.contextResourcePath(), AccessLogField.contextProtocol()].join(' ');\n    const status = [AccessLogField.contextStatus(), AccessLogField.contextResponseLength(), AccessLogField.contextRequestId()].join(' ');\n\n    return new AccessLogFormat(`${requester} [${requestTime}] \"${request}\" ${status}`);\n  }\n\n                                                                                                                                                                                                         \n  public static jsonWithStandardFields(\n    fields: JsonWithStandardFieldProps = {\n      ip: true,\n      user: true,\n      caller: true,\n      requestTime: true,\n      httpMethod: true,\n      resourcePath: true,\n      status: true,\n      protocol: true,\n      responseLength: true,\n    }): AccessLogFormat {\n    return this.custom(JSON.stringify({\n      requestId: AccessLogField.contextRequestId(),\n      ip: fields.ip ? AccessLogField.contextIdentitySourceIp() : undefined,\n      user: fields.user ? AccessLogField.contextIdentityUser() : undefined,\n      caller: fields.caller ? AccessLogField.contextIdentityCaller() : undefined,\n      requestTime: fields.requestTime ? AccessLogField.contextRequestTime() : undefined,\n      httpMethod: fields.httpMethod ? AccessLogField.contextHttpMethod() : undefined,\n      resourcePath: fields.resourcePath ? AccessLogField.contextResourcePath() : undefined,\n      status: fields.status ? AccessLogField.contextStatus() : undefined,\n      protocol: fields.protocol ? AccessLogField.contextProtocol() : undefined,\n      responseLength: fields.responseLength ? AccessLogField.contextResponseLength() : undefined,\n    }));\n  }\n\n  /**\n   * A API Gateway custom access log format\n   */\n  private readonly format: string;\n\n  private constructor(format: string) {\n    this.format = format;\n  }\n\n                                                                       \n  public toString(): string {\n    return this.format;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
