{
  "version": 3,
  "sources": ["apigateway.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:02:37.558Z\",\"fingerprint\":\"SGxzkxT8877kJBif3ysmu1Hzv6SiL2ErG4APQqll86E=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                     \nexport interface CfnAccountProps {\n\n                                                                                                                                                                                                                                                                                              \n    readonly cloudWatchRoleArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAccountProps`\n *\n * @param properties - the TypeScript properties of a `CfnAccountProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccountPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchRoleArn', cdk.validateString)(properties.cloudWatchRoleArn));\n    return errors.wrap('supplied properties not correct for \"CfnAccountProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Account` resource\n *\n * @param properties - the TypeScript properties of a `CfnAccountProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Account` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccountPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccountPropsValidator(properties).assertSuccess();\n    return {\n        CloudWatchRoleArn: cdk.stringToCloudFormation(properties.cloudWatchRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccountPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccountProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccountProps>();\n    ret.addPropertyResult('cloudWatchRoleArn', 'CloudWatchRoleArn', properties.CloudWatchRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAccount extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Account\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAccount {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAccountPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAccount(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                              \n    public cloudWatchRoleArn: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnAccountProps = {}) {\n        super(scope, id, { type: CfnAccount.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.cloudWatchRoleArn = props.cloudWatchRoleArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAccount.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cloudWatchRoleArn: this.cloudWatchRoleArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAccountPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnApiKeyProps {\n\n                                                                                                                                                                                                                                                                           \n    readonly customerId?: string;\n\n                                                                                                                                                                                                                           \n    readonly description?: string;\n\n                                                                                                                                                                                                                                \n    readonly enabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                           \n    readonly generateDistinctId?: boolean | cdk.IResolvable;\n\nn    readonly name?: string;\n\n                                                                                                                                                                                                                             \n    readonly stageKeys?: Array<CfnApiKey.StageKeyProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                       \n    readonly value?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApiKeyProps`\n *\n * @param properties - the TypeScript properties of a `CfnApiKeyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiKeyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customerId', cdk.validateString)(properties.customerId));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('generateDistinctId', cdk.validateBoolean)(properties.generateDistinctId));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('stageKeys', cdk.listValidator(CfnApiKey_StageKeyPropertyValidator))(properties.stageKeys));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"CfnApiKeyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::ApiKey` resource\n *\n * @param properties - the TypeScript properties of a `CfnApiKeyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::ApiKey` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiKeyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiKeyPropsValidator(properties).assertSuccess();\n    return {\n        CustomerId: cdk.stringToCloudFormation(properties.customerId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        GenerateDistinctId: cdk.booleanToCloudFormation(properties.generateDistinctId),\n        Name: cdk.stringToCloudFormation(properties.name),\n        StageKeys: cdk.listMapper(cfnApiKeyStageKeyPropertyToCloudFormation)(properties.stageKeys),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiKeyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiKeyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiKeyProps>();\n    ret.addPropertyResult('customerId', 'CustomerId', properties.CustomerId != null ? cfn_parse.FromCloudFormation.getString(properties.CustomerId) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('generateDistinctId', 'GenerateDistinctId', properties.GenerateDistinctId != null ? cfn_parse.FromCloudFormation.getBoolean(properties.GenerateDistinctId) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('stageKeys', 'StageKeys', properties.StageKeys != null ? cfn_parse.FromCloudFormation.getArray(CfnApiKeyStageKeyPropertyFromCloudFormation)(properties.StageKeys) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApiKey extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::ApiKey\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApiKey {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApiKeyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApiKey(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                               \n    public readonly attrApiKeyId: string;\n\n                                                                                                                                                                                                                                                                           \n    public customerId: string | undefined;\n\n                                                                                                                                                                                                                           \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                \n    public enabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                           \n    public generateDistinctId: boolean | cdk.IResolvable | undefined;\n\nn    public name: string | undefined;\n\n                                                                                                                                                                                                                             \n    public stageKeys: Array<CfnApiKey.StageKeyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    public value: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnApiKeyProps = {}) {\n        super(scope, id, { type: CfnApiKey.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrApiKeyId = cdk.Token.asString(this.getAtt('APIKeyId'));\n\n        this.customerId = props.customerId;\n        this.description = props.description;\n        this.enabled = props.enabled;\n        this.generateDistinctId = props.generateDistinctId;\n        this.name = props.name;\n        this.stageKeys = props.stageKeys;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::ApiKey\", props.tags, { tagPropertyName: 'tags' });\n        this.value = props.value;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApiKey.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            customerId: this.customerId,\n            description: this.description,\n            enabled: this.enabled,\n            generateDistinctId: this.generateDistinctId,\n            name: this.name,\n            stageKeys: this.stageKeys,\n            tags: this.tags.renderTags(),\n            value: this.value,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApiKeyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApiKey {\nn    export interface StageKeyProperty {\n                                                                                                                                                                                                                                                                                                                         \n        readonly restApiId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly stageName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StageKeyProperty`\n *\n * @param properties - the TypeScript properties of a `StageKeyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiKey_StageKeyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    return errors.wrap('supplied properties not correct for \"StageKeyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::ApiKey.StageKey` resource\n *\n * @param properties - the TypeScript properties of a `StageKeyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::ApiKey.StageKey` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiKeyStageKeyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiKey_StageKeyPropertyValidator(properties).assertSuccess();\n    return {\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiKeyStageKeyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiKey.StageKeyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiKey.StageKeyProperty>();\n    ret.addPropertyResult('restApiId', 'RestApiId', properties.RestApiId != null ? cfn_parse.FromCloudFormation.getString(properties.RestApiId) : undefined);\n    ret.addPropertyResult('stageName', 'StageName', properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                           \nexport interface CfnAuthorizerProps {\n\n                                                                                                                                                                                                           \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly type: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly authorizerCredentials?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly authorizerResultTtlInSeconds?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly authorizerUri?: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly authType?: string;\n\nn    readonly identitySource?: string;\n\nn    readonly identityValidationExpression?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly providerArns?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAuthorizerProps`\n *\n * @param properties - the TypeScript properties of a `CfnAuthorizerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAuthorizerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authType', cdk.validateString)(properties.authType));\n    errors.collect(cdk.propertyValidator('authorizerCredentials', cdk.validateString)(properties.authorizerCredentials));\n    errors.collect(cdk.propertyValidator('authorizerResultTtlInSeconds', cdk.validateNumber)(properties.authorizerResultTtlInSeconds));\n    errors.collect(cdk.propertyValidator('authorizerUri', cdk.validateString)(properties.authorizerUri));\n    errors.collect(cdk.propertyValidator('identitySource', cdk.validateString)(properties.identitySource));\n    errors.collect(cdk.propertyValidator('identityValidationExpression', cdk.validateString)(properties.identityValidationExpression));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('providerArns', cdk.listValidator(cdk.validateString))(properties.providerArns));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnAuthorizerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Authorizer` resource\n *\n * @param properties - the TypeScript properties of a `CfnAuthorizerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Authorizer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAuthorizerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAuthorizerPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        Type: cdk.stringToCloudFormation(properties.type),\n        AuthorizerCredentials: cdk.stringToCloudFormation(properties.authorizerCredentials),\n        AuthorizerResultTtlInSeconds: cdk.numberToCloudFormation(properties.authorizerResultTtlInSeconds),\n        AuthorizerUri: cdk.stringToCloudFormation(properties.authorizerUri),\n        AuthType: cdk.stringToCloudFormation(properties.authType),\n        IdentitySource: cdk.stringToCloudFormation(properties.identitySource),\n        IdentityValidationExpression: cdk.stringToCloudFormation(properties.identityValidationExpression),\n        ProviderARNs: cdk.listMapper(cdk.stringToCloudFormation)(properties.providerArns),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAuthorizerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAuthorizerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAuthorizerProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('authorizerCredentials', 'AuthorizerCredentials', properties.AuthorizerCredentials != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerCredentials) : undefined);\n    ret.addPropertyResult('authorizerResultTtlInSeconds', 'AuthorizerResultTtlInSeconds', properties.AuthorizerResultTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.AuthorizerResultTtlInSeconds) : undefined);\n    ret.addPropertyResult('authorizerUri', 'AuthorizerUri', properties.AuthorizerUri != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerUri) : undefined);\n    ret.addPropertyResult('authType', 'AuthType', properties.AuthType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthType) : undefined);\n    ret.addPropertyResult('identitySource', 'IdentitySource', properties.IdentitySource != null ? cfn_parse.FromCloudFormation.getString(properties.IdentitySource) : undefined);\n    ret.addPropertyResult('identityValidationExpression', 'IdentityValidationExpression', properties.IdentityValidationExpression != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityValidationExpression) : undefined);\n    ret.addPropertyResult('providerArns', 'ProviderARNs', properties.ProviderARNs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ProviderARNs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnAuthorizer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Authorizer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAuthorizer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAuthorizerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAuthorizer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                      \n    public readonly attrAuthorizerId: string;\n\n                                                                                                                                                                                                           \n    public name: string;\n\n                                                                                                                                                                                                                                                                 \n    public restApiId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public type: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public authorizerCredentials: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public authorizerResultTtlInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public authorizerUri: string | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public authType: string | undefined;\n\nn    public identitySource: string | undefined;\n\nn    public identityValidationExpression: string | undefined;\n\nn    public providerArns: string[] | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnAuthorizerProps) {\n        super(scope, id, { type: CfnAuthorizer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'restApiId', this);\n        cdk.requireProperty(props, 'type', this);\n        this.attrAuthorizerId = cdk.Token.asString(this.getAtt('AuthorizerId'));\n\n        this.name = props.name;\n        this.restApiId = props.restApiId;\n        this.type = props.type;\n        this.authorizerCredentials = props.authorizerCredentials;\n        this.authorizerResultTtlInSeconds = props.authorizerResultTtlInSeconds;\n        this.authorizerUri = props.authorizerUri;\n        this.authType = props.authType;\n        this.identitySource = props.identitySource;\n        this.identityValidationExpression = props.identityValidationExpression;\n        this.providerArns = props.providerArns;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAuthorizer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            restApiId: this.restApiId,\n            type: this.type,\n            authorizerCredentials: this.authorizerCredentials,\n            authorizerResultTtlInSeconds: this.authorizerResultTtlInSeconds,\n            authorizerUri: this.authorizerUri,\n            authType: this.authType,\n            identitySource: this.identitySource,\n            identityValidationExpression: this.identityValidationExpression,\n            providerArns: this.providerArns,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAuthorizerPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnBasePathMappingProps {\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    readonly domainName: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly basePath?: string;\n\n                                                                                                                                                                                                                 \n    readonly restApiId?: string;\n\n                                                                                                                                                                                                                       \n    readonly stage?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBasePathMappingProps`\n *\n * @param properties - the TypeScript properties of a `CfnBasePathMappingProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBasePathMappingPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('basePath', cdk.validateString)(properties.basePath));\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('stage', cdk.validateString)(properties.stage));\n    return errors.wrap('supplied properties not correct for \"CfnBasePathMappingProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::BasePathMapping` resource\n *\n * @param properties - the TypeScript properties of a `CfnBasePathMappingProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::BasePathMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBasePathMappingPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBasePathMappingPropsValidator(properties).assertSuccess();\n    return {\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        BasePath: cdk.stringToCloudFormation(properties.basePath),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        Stage: cdk.stringToCloudFormation(properties.stage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBasePathMappingPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBasePathMappingProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBasePathMappingProps>();\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('basePath', 'BasePath', properties.BasePath != null ? cfn_parse.FromCloudFormation.getString(properties.BasePath) : undefined);\n    ret.addPropertyResult('restApiId', 'RestApiId', properties.RestApiId != null ? cfn_parse.FromCloudFormation.getString(properties.RestApiId) : undefined);\n    ret.addPropertyResult('stage', 'Stage', properties.Stage != null ? cfn_parse.FromCloudFormation.getString(properties.Stage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \nexport class CfnBasePathMapping extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::BasePathMapping\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBasePathMapping {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBasePathMappingPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBasePathMapping(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    public domainName: string;\n\n                                                                                                                                                                                                                                                                                       \n    public basePath: string | undefined;\n\n                                                                                                                                                                                                                 \n    public restApiId: string | undefined;\n\n                                                                                                                                                                                                                       \n    public stage: string | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnBasePathMappingProps) {\n        super(scope, id, { type: CfnBasePathMapping.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'domainName', this);\n\n        this.domainName = props.domainName;\n        this.basePath = props.basePath;\n        this.restApiId = props.restApiId;\n        this.stage = props.stage;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBasePathMapping.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domainName: this.domainName,\n            basePath: this.basePath,\n            restApiId: this.restApiId,\n            stage: this.stage,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBasePathMappingPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnClientCertificateProps {\n\n                                                                                                                                                                                                                                             \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClientCertificateProps`\n *\n * @param properties - the TypeScript properties of a `CfnClientCertificateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientCertificatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClientCertificateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::ClientCertificate` resource\n *\n * @param properties - the TypeScript properties of a `CfnClientCertificateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::ClientCertificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientCertificatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientCertificatePropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientCertificatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientCertificateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientCertificateProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnClientCertificate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::ClientCertificate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClientCertificate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClientCertificatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClientCertificate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                     \n    public readonly attrClientCertificateId: string;\n\n                                                                                                                                                                                                                                             \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnClientCertificateProps = {}) {\n        super(scope, id, { type: CfnClientCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrClientCertificateId = cdk.Token.asString(this.getAtt('ClientCertificateId'));\n\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::ClientCertificate\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClientCertificate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClientCertificatePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                           \nexport interface CfnDeploymentProps {\n\n                                                                                                                                                                                                                                \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                                                 \n    readonly deploymentCanarySettings?: CfnDeployment.DeploymentCanarySettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                               \n    readonly stageDescription?: CfnDeployment.StageDescriptionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                          \n    readonly stageName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeploymentProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentCanarySettings', CfnDeployment_DeploymentCanarySettingsPropertyValidator)(properties.deploymentCanarySettings));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('stageDescription', CfnDeployment_StageDescriptionPropertyValidator)(properties.stageDescription));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    return errors.wrap('supplied properties not correct for \"CfnDeploymentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentPropsValidator(properties).assertSuccess();\n    return {\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        DeploymentCanarySettings: cfnDeploymentDeploymentCanarySettingsPropertyToCloudFormation(properties.deploymentCanarySettings),\n        Description: cdk.stringToCloudFormation(properties.description),\n        StageDescription: cfnDeploymentStageDescriptionPropertyToCloudFormation(properties.stageDescription),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentProps>();\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('deploymentCanarySettings', 'DeploymentCanarySettings', properties.DeploymentCanarySettings != null ? CfnDeploymentDeploymentCanarySettingsPropertyFromCloudFormation(properties.DeploymentCanarySettings) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('stageDescription', 'StageDescription', properties.StageDescription != null ? CfnDeploymentStageDescriptionPropertyFromCloudFormation(properties.StageDescription) : undefined);\n    ret.addPropertyResult('stageName', 'StageName', properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnDeployment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Deployment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeployment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDeploymentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDeployment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                      \n    public readonly attrDeploymentId: string;\n\n                                                                                                                                                                                                                                \n    public restApiId: string;\n\n                                                                                                                                                                                                                                                 \n    public deploymentCanarySettings: CfnDeployment.DeploymentCanarySettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                               \n    public stageDescription: CfnDeployment.StageDescriptionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                          \n    public stageName: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnDeploymentProps) {\n        super(scope, id, { type: CfnDeployment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'restApiId', this);\n        this.attrDeploymentId = cdk.Token.asString(this.getAtt('DeploymentId'));\n\n        this.restApiId = props.restApiId;\n        this.deploymentCanarySettings = props.deploymentCanarySettings;\n        this.description = props.description;\n        this.stageDescription = props.stageDescription;\n        this.stageName = props.stageName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDeployment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            restApiId: this.restApiId,\n            deploymentCanarySettings: this.deploymentCanarySettings,\n            description: this.description,\n            stageDescription: this.stageDescription,\n            stageName: this.stageName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDeploymentPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDeployment {\nn    export interface AccessLogSettingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly destinationArn?: string;\nn        readonly format?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessLogSettingProperty`\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeployment_AccessLogSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationArn', cdk.validateString)(properties.destinationArn));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    return errors.wrap('supplied properties not correct for \"AccessLogSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.AccessLogSetting` resource\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.AccessLogSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentAccessLogSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeployment_AccessLogSettingPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),\n        Format: cdk.stringToCloudFormation(properties.format),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentAccessLogSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeployment.AccessLogSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeployment.AccessLogSettingProperty>();\n    ret.addPropertyResult('destinationArn', 'DestinationArn', properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : undefined);\n    ret.addPropertyResult('format', 'Format', properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeployment {\nn    export interface CanarySettingProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly percentTraffic?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly stageVariableOverrides?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                     \n        readonly useStageCache?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CanarySettingProperty`\n *\n * @param properties - the TypeScript properties of a `CanarySettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeployment_CanarySettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('percentTraffic', cdk.validateNumber)(properties.percentTraffic));\n    errors.collect(cdk.propertyValidator('stageVariableOverrides', cdk.hashValidator(cdk.validateString))(properties.stageVariableOverrides));\n    errors.collect(cdk.propertyValidator('useStageCache', cdk.validateBoolean)(properties.useStageCache));\n    return errors.wrap('supplied properties not correct for \"CanarySettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.CanarySetting` resource\n *\n * @param properties - the TypeScript properties of a `CanarySettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.CanarySetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentCanarySettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeployment_CanarySettingPropertyValidator(properties).assertSuccess();\n    return {\n        PercentTraffic: cdk.numberToCloudFormation(properties.percentTraffic),\n        StageVariableOverrides: cdk.hashMapper(cdk.stringToCloudFormation)(properties.stageVariableOverrides),\n        UseStageCache: cdk.booleanToCloudFormation(properties.useStageCache),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentCanarySettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeployment.CanarySettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeployment.CanarySettingProperty>();\n    ret.addPropertyResult('percentTraffic', 'PercentTraffic', properties.PercentTraffic != null ? cfn_parse.FromCloudFormation.getNumber(properties.PercentTraffic) : undefined);\n    ret.addPropertyResult('stageVariableOverrides', 'StageVariableOverrides', properties.StageVariableOverrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.StageVariableOverrides) : undefined);\n    ret.addPropertyResult('useStageCache', 'UseStageCache', properties.UseStageCache != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseStageCache) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeployment {\n                                                                                                                                                                                                                                                                                                                       \n    export interface DeploymentCanarySettingsProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly percentTraffic?: number;\nn        readonly stageVariableOverrides?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly useStageCache?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentCanarySettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentCanarySettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeployment_DeploymentCanarySettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('percentTraffic', cdk.validateNumber)(properties.percentTraffic));\n    errors.collect(cdk.propertyValidator('stageVariableOverrides', cdk.hashValidator(cdk.validateString))(properties.stageVariableOverrides));\n    errors.collect(cdk.propertyValidator('useStageCache', cdk.validateBoolean)(properties.useStageCache));\n    return errors.wrap('supplied properties not correct for \"DeploymentCanarySettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.DeploymentCanarySettings` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentCanarySettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.DeploymentCanarySettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentDeploymentCanarySettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeployment_DeploymentCanarySettingsPropertyValidator(properties).assertSuccess();\n    return {\n        PercentTraffic: cdk.numberToCloudFormation(properties.percentTraffic),\n        StageVariableOverrides: cdk.hashMapper(cdk.stringToCloudFormation)(properties.stageVariableOverrides),\n        UseStageCache: cdk.booleanToCloudFormation(properties.useStageCache),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentDeploymentCanarySettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeployment.DeploymentCanarySettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeployment.DeploymentCanarySettingsProperty>();\n    ret.addPropertyResult('percentTraffic', 'PercentTraffic', properties.PercentTraffic != null ? cfn_parse.FromCloudFormation.getNumber(properties.PercentTraffic) : undefined);\n    ret.addPropertyResult('stageVariableOverrides', 'StageVariableOverrides', properties.StageVariableOverrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.StageVariableOverrides) : undefined);\n    ret.addPropertyResult('useStageCache', 'UseStageCache', properties.UseStageCache != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseStageCache) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeployment {\nn    export interface MethodSettingProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly cacheDataEncrypted?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly cacheTtlInSeconds?: number;\nn        readonly cachingEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly dataTraceEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                        \n        readonly httpMethod?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly loggingLevel?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly metricsEnabled?: boolean | cdk.IResolvable;\nn        readonly resourcePath?: string;\nn        readonly throttlingBurstLimit?: number;\nn        readonly throttlingRateLimit?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MethodSettingProperty`\n *\n * @param properties - the TypeScript properties of a `MethodSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeployment_MethodSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cacheDataEncrypted', cdk.validateBoolean)(properties.cacheDataEncrypted));\n    errors.collect(cdk.propertyValidator('cacheTtlInSeconds', cdk.validateNumber)(properties.cacheTtlInSeconds));\n    errors.collect(cdk.propertyValidator('cachingEnabled', cdk.validateBoolean)(properties.cachingEnabled));\n    errors.collect(cdk.propertyValidator('dataTraceEnabled', cdk.validateBoolean)(properties.dataTraceEnabled));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.validateString)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('loggingLevel', cdk.validateString)(properties.loggingLevel));\n    errors.collect(cdk.propertyValidator('metricsEnabled', cdk.validateBoolean)(properties.metricsEnabled));\n    errors.collect(cdk.propertyValidator('resourcePath', cdk.validateString)(properties.resourcePath));\n    errors.collect(cdk.propertyValidator('throttlingBurstLimit', cdk.validateNumber)(properties.throttlingBurstLimit));\n    errors.collect(cdk.propertyValidator('throttlingRateLimit', cdk.validateNumber)(properties.throttlingRateLimit));\n    return errors.wrap('supplied properties not correct for \"MethodSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.MethodSetting` resource\n *\n * @param properties - the TypeScript properties of a `MethodSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.MethodSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentMethodSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeployment_MethodSettingPropertyValidator(properties).assertSuccess();\n    return {\n        CacheDataEncrypted: cdk.booleanToCloudFormation(properties.cacheDataEncrypted),\n        CacheTtlInSeconds: cdk.numberToCloudFormation(properties.cacheTtlInSeconds),\n        CachingEnabled: cdk.booleanToCloudFormation(properties.cachingEnabled),\n        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),\n        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),\n        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),\n        MetricsEnabled: cdk.booleanToCloudFormation(properties.metricsEnabled),\n        ResourcePath: cdk.stringToCloudFormation(properties.resourcePath),\n        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),\n        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentMethodSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeployment.MethodSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeployment.MethodSettingProperty>();\n    ret.addPropertyResult('cacheDataEncrypted', 'CacheDataEncrypted', properties.CacheDataEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheDataEncrypted) : undefined);\n    ret.addPropertyResult('cacheTtlInSeconds', 'CacheTtlInSeconds', properties.CacheTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheTtlInSeconds) : undefined);\n    ret.addPropertyResult('cachingEnabled', 'CachingEnabled', properties.CachingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CachingEnabled) : undefined);\n    ret.addPropertyResult('dataTraceEnabled', 'DataTraceEnabled', properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : undefined);\n    ret.addPropertyResult('httpMethod', 'HttpMethod', properties.HttpMethod != null ? cfn_parse.FromCloudFormation.getString(properties.HttpMethod) : undefined);\n    ret.addPropertyResult('loggingLevel', 'LoggingLevel', properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : undefined);\n    ret.addPropertyResult('metricsEnabled', 'MetricsEnabled', properties.MetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MetricsEnabled) : undefined);\n    ret.addPropertyResult('resourcePath', 'ResourcePath', properties.ResourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.ResourcePath) : undefined);\n    ret.addPropertyResult('throttlingBurstLimit', 'ThrottlingBurstLimit', properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : undefined);\n    ret.addPropertyResult('throttlingRateLimit', 'ThrottlingRateLimit', properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeployment {\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface StageDescriptionProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly accessLogSetting?: CfnDeployment.AccessLogSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                   \n        readonly cacheClusterEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly cacheClusterSize?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly cacheDataEncrypted?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly cacheTtlInSeconds?: number;\nn        readonly cachingEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                            \n        readonly canarySetting?: CfnDeployment.CanarySettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly clientCertificateId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly dataTraceEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly documentationVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly loggingLevel?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly methodSettings?: Array<CfnDeployment.MethodSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly metricsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly tags?: cdk.CfnTag[];\nn        readonly throttlingBurstLimit?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly throttlingRateLimit?: number;\nn        readonly tracingEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly variables?: { [key: string]: (string) } | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StageDescriptionProperty`\n *\n * @param properties - the TypeScript properties of a `StageDescriptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeployment_StageDescriptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessLogSetting', CfnDeployment_AccessLogSettingPropertyValidator)(properties.accessLogSetting));\n    errors.collect(cdk.propertyValidator('cacheClusterEnabled', cdk.validateBoolean)(properties.cacheClusterEnabled));\n    errors.collect(cdk.propertyValidator('cacheClusterSize', cdk.validateString)(properties.cacheClusterSize));\n    errors.collect(cdk.propertyValidator('cacheDataEncrypted', cdk.validateBoolean)(properties.cacheDataEncrypted));\n    errors.collect(cdk.propertyValidator('cacheTtlInSeconds', cdk.validateNumber)(properties.cacheTtlInSeconds));\n    errors.collect(cdk.propertyValidator('cachingEnabled', cdk.validateBoolean)(properties.cachingEnabled));\n    errors.collect(cdk.propertyValidator('canarySetting', CfnDeployment_CanarySettingPropertyValidator)(properties.canarySetting));\n    errors.collect(cdk.propertyValidator('clientCertificateId', cdk.validateString)(properties.clientCertificateId));\n    errors.collect(cdk.propertyValidator('dataTraceEnabled', cdk.validateBoolean)(properties.dataTraceEnabled));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('documentationVersion', cdk.validateString)(properties.documentationVersion));\n    errors.collect(cdk.propertyValidator('loggingLevel', cdk.validateString)(properties.loggingLevel));\n    errors.collect(cdk.propertyValidator('methodSettings', cdk.listValidator(CfnDeployment_MethodSettingPropertyValidator))(properties.methodSettings));\n    errors.collect(cdk.propertyValidator('metricsEnabled', cdk.validateBoolean)(properties.metricsEnabled));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('throttlingBurstLimit', cdk.validateNumber)(properties.throttlingBurstLimit));\n    errors.collect(cdk.propertyValidator('throttlingRateLimit', cdk.validateNumber)(properties.throttlingRateLimit));\n    errors.collect(cdk.propertyValidator('tracingEnabled', cdk.validateBoolean)(properties.tracingEnabled));\n    errors.collect(cdk.propertyValidator('variables', cdk.hashValidator(cdk.validateString))(properties.variables));\n    return errors.wrap('supplied properties not correct for \"StageDescriptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.StageDescription` resource\n *\n * @param properties - the TypeScript properties of a `StageDescriptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Deployment.StageDescription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentStageDescriptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeployment_StageDescriptionPropertyValidator(properties).assertSuccess();\n    return {\n        AccessLogSetting: cfnDeploymentAccessLogSettingPropertyToCloudFormation(properties.accessLogSetting),\n        CacheClusterEnabled: cdk.booleanToCloudFormation(properties.cacheClusterEnabled),\n        CacheClusterSize: cdk.stringToCloudFormation(properties.cacheClusterSize),\n        CacheDataEncrypted: cdk.booleanToCloudFormation(properties.cacheDataEncrypted),\n        CacheTtlInSeconds: cdk.numberToCloudFormation(properties.cacheTtlInSeconds),\n        CachingEnabled: cdk.booleanToCloudFormation(properties.cachingEnabled),\n        CanarySetting: cfnDeploymentCanarySettingPropertyToCloudFormation(properties.canarySetting),\n        ClientCertificateId: cdk.stringToCloudFormation(properties.clientCertificateId),\n        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DocumentationVersion: cdk.stringToCloudFormation(properties.documentationVersion),\n        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),\n        MethodSettings: cdk.listMapper(cfnDeploymentMethodSettingPropertyToCloudFormation)(properties.methodSettings),\n        MetricsEnabled: cdk.booleanToCloudFormation(properties.metricsEnabled),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),\n        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit),\n        TracingEnabled: cdk.booleanToCloudFormation(properties.tracingEnabled),\n        Variables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.variables),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentStageDescriptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeployment.StageDescriptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeployment.StageDescriptionProperty>();\n    ret.addPropertyResult('accessLogSetting', 'AccessLogSetting', properties.AccessLogSetting != null ? CfnDeploymentAccessLogSettingPropertyFromCloudFormation(properties.AccessLogSetting) : undefined);\n    ret.addPropertyResult('cacheClusterEnabled', 'CacheClusterEnabled', properties.CacheClusterEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheClusterEnabled) : undefined);\n    ret.addPropertyResult('cacheClusterSize', 'CacheClusterSize', properties.CacheClusterSize != null ? cfn_parse.FromCloudFormation.getString(properties.CacheClusterSize) : undefined);\n    ret.addPropertyResult('cacheDataEncrypted', 'CacheDataEncrypted', properties.CacheDataEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheDataEncrypted) : undefined);\n    ret.addPropertyResult('cacheTtlInSeconds', 'CacheTtlInSeconds', properties.CacheTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheTtlInSeconds) : undefined);\n    ret.addPropertyResult('cachingEnabled', 'CachingEnabled', properties.CachingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CachingEnabled) : undefined);\n    ret.addPropertyResult('canarySetting', 'CanarySetting', properties.CanarySetting != null ? CfnDeploymentCanarySettingPropertyFromCloudFormation(properties.CanarySetting) : undefined);\n    ret.addPropertyResult('clientCertificateId', 'ClientCertificateId', properties.ClientCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCertificateId) : undefined);\n    ret.addPropertyResult('dataTraceEnabled', 'DataTraceEnabled', properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('documentationVersion', 'DocumentationVersion', properties.DocumentationVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentationVersion) : undefined);\n    ret.addPropertyResult('loggingLevel', 'LoggingLevel', properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : undefined);\n    ret.addPropertyResult('methodSettings', 'MethodSettings', properties.MethodSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentMethodSettingPropertyFromCloudFormation)(properties.MethodSettings) : undefined);\n    ret.addPropertyResult('metricsEnabled', 'MetricsEnabled', properties.MetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MetricsEnabled) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('throttlingBurstLimit', 'ThrottlingBurstLimit', properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : undefined);\n    ret.addPropertyResult('throttlingRateLimit', 'ThrottlingRateLimit', properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : undefined);\n    ret.addPropertyResult('tracingEnabled', 'TracingEnabled', properties.TracingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TracingEnabled) : undefined);\n    ret.addPropertyResult('variables', 'Variables', properties.Variables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Variables) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnDocumentationPartProps {\n\n                                                                                                                                                                                                                                                                   \n    readonly location: CfnDocumentationPart.LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    readonly properties: string;\n\n                                                                                                                                                                                                                                             \n    readonly restApiId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDocumentationPartProps`\n *\n * @param properties - the TypeScript properties of a `CfnDocumentationPartProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDocumentationPartPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('location', cdk.requiredValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('location', CfnDocumentationPart_LocationPropertyValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('properties', cdk.requiredValidator)(properties.properties));\n    errors.collect(cdk.propertyValidator('properties', cdk.validateString)(properties.properties));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    return errors.wrap('supplied properties not correct for \"CfnDocumentationPartProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::DocumentationPart` resource\n *\n * @param properties - the TypeScript properties of a `CfnDocumentationPartProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::DocumentationPart` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDocumentationPartPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDocumentationPartPropsValidator(properties).assertSuccess();\n    return {\n        Location: cfnDocumentationPartLocationPropertyToCloudFormation(properties.location),\n        Properties: cdk.stringToCloudFormation(properties.properties),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDocumentationPartPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDocumentationPartProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDocumentationPartProps>();\n    ret.addPropertyResult('location', 'Location', CfnDocumentationPartLocationPropertyFromCloudFormation(properties.Location));\n    ret.addPropertyResult('properties', 'Properties', cfn_parse.FromCloudFormation.getString(properties.Properties));\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDocumentationPart extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::DocumentationPart\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDocumentationPart {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDocumentationPartPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDocumentationPart(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                   \n    public location: CfnDocumentationPart.LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    public properties: string;\n\n                                                                                                                                                                                                                                             \n    public restApiId: string;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnDocumentationPartProps) {\n        super(scope, id, { type: CfnDocumentationPart.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'location', this);\n        cdk.requireProperty(props, 'properties', this);\n        cdk.requireProperty(props, 'restApiId', this);\n\n        this.location = props.location;\n        this.properties = props.properties;\n        this.restApiId = props.restApiId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDocumentationPart.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            location: this.location,\n            properties: this.properties,\n            restApiId: this.restApiId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDocumentationPartPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDocumentationPart {\nn    export interface LocationProperty {\n                                                                                                                                                                                                                                                                  \n        readonly method?: string;\n                                                                                                                                                                                                                                                                          \n        readonly name?: string;\n                                                                                                                                                                                                                                                                 \n        readonly path?: string;\n                                                                                                                                                                                                                                                                               \n        readonly statusCode?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationProperty`\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDocumentationPart_LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('method', cdk.validateString)(properties.method));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.validateString)(properties.statusCode));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::DocumentationPart.Location` resource\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::DocumentationPart.Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDocumentationPartLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDocumentationPart_LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Method: cdk.stringToCloudFormation(properties.method),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Path: cdk.stringToCloudFormation(properties.path),\n        StatusCode: cdk.stringToCloudFormation(properties.statusCode),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDocumentationPartLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDocumentationPart.LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDocumentationPart.LocationProperty>();\n    ret.addPropertyResult('method', 'Method', properties.Method != null ? cfn_parse.FromCloudFormation.getString(properties.Method) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('statusCode', 'StatusCode', properties.StatusCode != null ? cfn_parse.FromCloudFormation.getString(properties.StatusCode) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnDocumentationVersionProps {\n\n                                                                                                                                                                                                                                                                             \n    readonly documentationVersion: string;\n\n                                                                                                                                                                                                                                   \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                                                             \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDocumentationVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnDocumentationVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDocumentationVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('documentationVersion', cdk.requiredValidator)(properties.documentationVersion));\n    errors.collect(cdk.propertyValidator('documentationVersion', cdk.validateString)(properties.documentationVersion));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    return errors.wrap('supplied properties not correct for \"CfnDocumentationVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::DocumentationVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnDocumentationVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::DocumentationVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDocumentationVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDocumentationVersionPropsValidator(properties).assertSuccess();\n    return {\n        DocumentationVersion: cdk.stringToCloudFormation(properties.documentationVersion),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDocumentationVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDocumentationVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDocumentationVersionProps>();\n    ret.addPropertyResult('documentationVersion', 'DocumentationVersion', cfn_parse.FromCloudFormation.getString(properties.DocumentationVersion));\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDocumentationVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::DocumentationVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDocumentationVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDocumentationVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDocumentationVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                             \n    public documentationVersion: string;\n\n                                                                                                                                                                                                                                   \n    public restApiId: string;\n\n                                                                                                                                                                                                                                                             \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnDocumentationVersionProps) {\n        super(scope, id, { type: CfnDocumentationVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'documentationVersion', this);\n        cdk.requireProperty(props, 'restApiId', this);\n\n        this.documentationVersion = props.documentationVersion;\n        this.restApiId = props.restApiId;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDocumentationVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            documentationVersion: this.documentationVersion,\n            restApiId: this.restApiId,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDocumentationVersionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                           \nexport interface CfnDomainNameProps {\n\nn    readonly certificateArn?: string;\n\n                                                                                                                                                                                                                                                               \n    readonly domainName?: string;\n\n                                                                                                                                                                                                                                                 \n    readonly endpointConfiguration?: CfnDomainName.EndpointConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                        \n    readonly mutualTlsAuthentication?: CfnDomainName.MutualTlsAuthenticationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly ownershipVerificationCertificateArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    readonly regionalCertificateArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                      \n    readonly securityPolicy?: string;\n\n                                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDomainNameProps`\n *\n * @param properties - the TypeScript properties of a `CfnDomainNameProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainNamePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('endpointConfiguration', CfnDomainName_EndpointConfigurationPropertyValidator)(properties.endpointConfiguration));\n    errors.collect(cdk.propertyValidator('mutualTlsAuthentication', CfnDomainName_MutualTlsAuthenticationPropertyValidator)(properties.mutualTlsAuthentication));\n    errors.collect(cdk.propertyValidator('ownershipVerificationCertificateArn', cdk.validateString)(properties.ownershipVerificationCertificateArn));\n    errors.collect(cdk.propertyValidator('regionalCertificateArn', cdk.validateString)(properties.regionalCertificateArn));\n    errors.collect(cdk.propertyValidator('securityPolicy', cdk.validateString)(properties.securityPolicy));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDomainNameProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::DomainName` resource\n *\n * @param properties - the TypeScript properties of a `CfnDomainNameProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::DomainName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNamePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainNamePropsValidator(properties).assertSuccess();\n    return {\n        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        EndpointConfiguration: cfnDomainNameEndpointConfigurationPropertyToCloudFormation(properties.endpointConfiguration),\n        MutualTlsAuthentication: cfnDomainNameMutualTlsAuthenticationPropertyToCloudFormation(properties.mutualTlsAuthentication),\n        OwnershipVerificationCertificateArn: cdk.stringToCloudFormation(properties.ownershipVerificationCertificateArn),\n        RegionalCertificateArn: cdk.stringToCloudFormation(properties.regionalCertificateArn),\n        SecurityPolicy: cdk.stringToCloudFormation(properties.securityPolicy),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNamePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainNameProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainNameProps>();\n    ret.addPropertyResult('certificateArn', 'CertificateArn', properties.CertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateArn) : undefined);\n    ret.addPropertyResult('domainName', 'DomainName', properties.DomainName != null ? cfn_parse.FromCloudFormation.getString(properties.DomainName) : undefined);\n    ret.addPropertyResult('endpointConfiguration', 'EndpointConfiguration', properties.EndpointConfiguration != null ? CfnDomainNameEndpointConfigurationPropertyFromCloudFormation(properties.EndpointConfiguration) : undefined);\n    ret.addPropertyResult('mutualTlsAuthentication', 'MutualTlsAuthentication', properties.MutualTlsAuthentication != null ? CfnDomainNameMutualTlsAuthenticationPropertyFromCloudFormation(properties.MutualTlsAuthentication) : undefined);\n    ret.addPropertyResult('ownershipVerificationCertificateArn', 'OwnershipVerificationCertificateArn', properties.OwnershipVerificationCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.OwnershipVerificationCertificateArn) : undefined);\n    ret.addPropertyResult('regionalCertificateArn', 'RegionalCertificateArn', properties.RegionalCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.RegionalCertificateArn) : undefined);\n    ret.addPropertyResult('securityPolicy', 'SecurityPolicy', properties.SecurityPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityPolicy) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDomainName extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::DomainName\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDomainName {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDomainNamePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDomainName(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                         \n    public readonly attrDistributionDomainName: string;\n\n                                                                                                                                                                                                                            \n    public readonly attrDistributionHostedZoneId: string;\n\n                                                                                                                                                                                                                                                                                \n    public readonly attrRegionalDomainName: string;\n\n                                                                                                                                                        \n    public readonly attrRegionalHostedZoneId: string;\n\nn    public certificateArn: string | undefined;\n\n                                                                                                                                                                                                                                                               \n    public domainName: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    public endpointConfiguration: CfnDomainName.EndpointConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                        \n    public mutualTlsAuthentication: CfnDomainName.MutualTlsAuthenticationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public ownershipVerificationCertificateArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public regionalCertificateArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                      \n    public securityPolicy: string | undefined;\n\n                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnDomainNameProps = {}) {\n        super(scope, id, { type: CfnDomainName.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrDistributionDomainName = cdk.Token.asString(this.getAtt('DistributionDomainName'));\n        this.attrDistributionHostedZoneId = cdk.Token.asString(this.getAtt('DistributionHostedZoneId'));\n        this.attrRegionalDomainName = cdk.Token.asString(this.getAtt('RegionalDomainName'));\n        this.attrRegionalHostedZoneId = cdk.Token.asString(this.getAtt('RegionalHostedZoneId'));\n\n        this.certificateArn = props.certificateArn;\n        this.domainName = props.domainName;\n        this.endpointConfiguration = props.endpointConfiguration;\n        this.mutualTlsAuthentication = props.mutualTlsAuthentication;\n        this.ownershipVerificationCertificateArn = props.ownershipVerificationCertificateArn;\n        this.regionalCertificateArn = props.regionalCertificateArn;\n        this.securityPolicy = props.securityPolicy;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::DomainName\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDomainName.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateArn: this.certificateArn,\n            domainName: this.domainName,\n            endpointConfiguration: this.endpointConfiguration,\n            mutualTlsAuthentication: this.mutualTlsAuthentication,\n            ownershipVerificationCertificateArn: this.ownershipVerificationCertificateArn,\n            regionalCertificateArn: this.regionalCertificateArn,\n            securityPolicy: this.securityPolicy,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDomainNamePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDomainName {\nn    export interface EndpointConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly types?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainName_EndpointConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('types', cdk.listValidator(cdk.validateString))(properties.types));\n    return errors.wrap('supplied properties not correct for \"EndpointConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::DomainName.EndpointConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EndpointConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::DomainName.EndpointConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNameEndpointConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainName_EndpointConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Types: cdk.listMapper(cdk.stringToCloudFormation)(properties.types),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNameEndpointConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainName.EndpointConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainName.EndpointConfigurationProperty>();\n    ret.addPropertyResult('types', 'Types', properties.Types != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Types) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomainName {\n                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface MutualTlsAuthenticationProperty {\nn        readonly truststoreUri?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly truststoreVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MutualTlsAuthenticationProperty`\n *\n * @param properties - the TypeScript properties of a `MutualTlsAuthenticationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainName_MutualTlsAuthenticationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('truststoreUri', cdk.validateString)(properties.truststoreUri));\n    errors.collect(cdk.propertyValidator('truststoreVersion', cdk.validateString)(properties.truststoreVersion));\n    return errors.wrap('supplied properties not correct for \"MutualTlsAuthenticationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::DomainName.MutualTlsAuthentication` resource\n *\n * @param properties - the TypeScript properties of a `MutualTlsAuthenticationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::DomainName.MutualTlsAuthentication` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNameMutualTlsAuthenticationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainName_MutualTlsAuthenticationPropertyValidator(properties).assertSuccess();\n    return {\n        TruststoreUri: cdk.stringToCloudFormation(properties.truststoreUri),\n        TruststoreVersion: cdk.stringToCloudFormation(properties.truststoreVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNameMutualTlsAuthenticationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainName.MutualTlsAuthenticationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainName.MutualTlsAuthenticationProperty>();\n    ret.addPropertyResult('truststoreUri', 'TruststoreUri', properties.TruststoreUri != null ? cfn_parse.FromCloudFormation.getString(properties.TruststoreUri) : undefined);\n    ret.addPropertyResult('truststoreVersion', 'TruststoreVersion', properties.TruststoreVersion != null ? cfn_parse.FromCloudFormation.getString(properties.TruststoreVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnGatewayResponseProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly responseType: string;\n\n                                                                                                                                                                                                                         \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                                                                                                             \n    readonly responseParameters?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                       \n    readonly responseTemplates?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly statusCode?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGatewayResponseProps`\n *\n * @param properties - the TypeScript properties of a `CfnGatewayResponseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGatewayResponsePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.hashValidator(cdk.validateString))(properties.responseParameters));\n    errors.collect(cdk.propertyValidator('responseTemplates', cdk.hashValidator(cdk.validateString))(properties.responseTemplates));\n    errors.collect(cdk.propertyValidator('responseType', cdk.requiredValidator)(properties.responseType));\n    errors.collect(cdk.propertyValidator('responseType', cdk.validateString)(properties.responseType));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.validateString)(properties.statusCode));\n    return errors.wrap('supplied properties not correct for \"CfnGatewayResponseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::GatewayResponse` resource\n *\n * @param properties - the TypeScript properties of a `CfnGatewayResponseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::GatewayResponse` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGatewayResponsePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGatewayResponsePropsValidator(properties).assertSuccess();\n    return {\n        ResponseType: cdk.stringToCloudFormation(properties.responseType),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        ResponseParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseParameters),\n        ResponseTemplates: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseTemplates),\n        StatusCode: cdk.stringToCloudFormation(properties.statusCode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGatewayResponsePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGatewayResponseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGatewayResponseProps>();\n    ret.addPropertyResult('responseType', 'ResponseType', cfn_parse.FromCloudFormation.getString(properties.ResponseType));\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseParameters) : undefined);\n    ret.addPropertyResult('responseTemplates', 'ResponseTemplates', properties.ResponseTemplates != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseTemplates) : undefined);\n    ret.addPropertyResult('statusCode', 'StatusCode', properties.StatusCode != null ? cfn_parse.FromCloudFormation.getString(properties.StatusCode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnGatewayResponse extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::GatewayResponse\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGatewayResponse {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGatewayResponsePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGatewayResponse(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                  \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n    public responseType: string;\n\n                                                                                                                                                                                                                         \n    public restApiId: string;\n\n                                                                                                                                                                                                                                                                                                             \n    public responseParameters: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                       \n    public responseTemplates: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    public statusCode: string | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnGatewayResponseProps) {\n        super(scope, id, { type: CfnGatewayResponse.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'responseType', this);\n        cdk.requireProperty(props, 'restApiId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.responseType = props.responseType;\n        this.restApiId = props.restApiId;\n        this.responseParameters = props.responseParameters;\n        this.responseTemplates = props.responseTemplates;\n        this.statusCode = props.statusCode;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGatewayResponse.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            responseType: this.responseType,\n            restApiId: this.restApiId,\n            responseParameters: this.responseParameters,\n            responseTemplates: this.responseTemplates,\n            statusCode: this.statusCode,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGatewayResponsePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnMethodProps {\n\n                                                                                                                                                                                                                                   \n    readonly httpMethod: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly resourceId: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                                                          \n    readonly apiKeyRequired?: boolean | cdk.IResolvable;\n\nn    readonly authorizationScopes?: string[];\n\nn    readonly authorizationType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly authorizerId?: string;\n\n                                                                                                                                                                                                                                                   \n    readonly integration?: CfnMethod.IntegrationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly methodResponses?: Array<CfnMethod.MethodResponseProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly operationName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly requestModels?: { [key: string]: (string) } | cdk.IResolvable;\n\nn    readonly requestParameters?: { [key: string]: (boolean | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                 \n    readonly requestValidatorId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMethodProps`\n *\n * @param properties - the TypeScript properties of a `CfnMethodProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMethodPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiKeyRequired', cdk.validateBoolean)(properties.apiKeyRequired));\n    errors.collect(cdk.propertyValidator('authorizationScopes', cdk.listValidator(cdk.validateString))(properties.authorizationScopes));\n    errors.collect(cdk.propertyValidator('authorizationType', cdk.validateString)(properties.authorizationType));\n    errors.collect(cdk.propertyValidator('authorizerId', cdk.validateString)(properties.authorizerId));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.requiredValidator)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.validateString)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('integration', CfnMethod_IntegrationPropertyValidator)(properties.integration));\n    errors.collect(cdk.propertyValidator('methodResponses', cdk.listValidator(CfnMethod_MethodResponsePropertyValidator))(properties.methodResponses));\n    errors.collect(cdk.propertyValidator('operationName', cdk.validateString)(properties.operationName));\n    errors.collect(cdk.propertyValidator('requestModels', cdk.hashValidator(cdk.validateString))(properties.requestModels));\n    errors.collect(cdk.propertyValidator('requestParameters', cdk.hashValidator(cdk.validateBoolean))(properties.requestParameters));\n    errors.collect(cdk.propertyValidator('requestValidatorId', cdk.validateString)(properties.requestValidatorId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    return errors.wrap('supplied properties not correct for \"CfnMethodProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Method` resource\n *\n * @param properties - the TypeScript properties of a `CfnMethodProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Method` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMethodPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMethodPropsValidator(properties).assertSuccess();\n    return {\n        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        ApiKeyRequired: cdk.booleanToCloudFormation(properties.apiKeyRequired),\n        AuthorizationScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.authorizationScopes),\n        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),\n        AuthorizerId: cdk.stringToCloudFormation(properties.authorizerId),\n        Integration: cfnMethodIntegrationPropertyToCloudFormation(properties.integration),\n        MethodResponses: cdk.listMapper(cfnMethodMethodResponsePropertyToCloudFormation)(properties.methodResponses),\n        OperationName: cdk.stringToCloudFormation(properties.operationName),\n        RequestModels: cdk.hashMapper(cdk.stringToCloudFormation)(properties.requestModels),\n        RequestParameters: cdk.hashMapper(cdk.booleanToCloudFormation)(properties.requestParameters),\n        RequestValidatorId: cdk.stringToCloudFormation(properties.requestValidatorId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMethodPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMethodProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMethodProps>();\n    ret.addPropertyResult('httpMethod', 'HttpMethod', cfn_parse.FromCloudFormation.getString(properties.HttpMethod));\n    ret.addPropertyResult('resourceId', 'ResourceId', cfn_parse.FromCloudFormation.getString(properties.ResourceId));\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('apiKeyRequired', 'ApiKeyRequired', properties.ApiKeyRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApiKeyRequired) : undefined);\n    ret.addPropertyResult('authorizationScopes', 'AuthorizationScopes', properties.AuthorizationScopes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AuthorizationScopes) : undefined);\n    ret.addPropertyResult('authorizationType', 'AuthorizationType', properties.AuthorizationType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizationType) : undefined);\n    ret.addPropertyResult('authorizerId', 'AuthorizerId', properties.AuthorizerId != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerId) : undefined);\n    ret.addPropertyResult('integration', 'Integration', properties.Integration != null ? CfnMethodIntegrationPropertyFromCloudFormation(properties.Integration) : undefined);\n    ret.addPropertyResult('methodResponses', 'MethodResponses', properties.MethodResponses != null ? cfn_parse.FromCloudFormation.getArray(CfnMethodMethodResponsePropertyFromCloudFormation)(properties.MethodResponses) : undefined);\n    ret.addPropertyResult('operationName', 'OperationName', properties.OperationName != null ? cfn_parse.FromCloudFormation.getString(properties.OperationName) : undefined);\n    ret.addPropertyResult('requestModels', 'RequestModels', properties.RequestModels != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RequestModels) : undefined);\n    ret.addPropertyResult('requestParameters', 'RequestParameters', properties.RequestParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getBoolean)(properties.RequestParameters) : undefined);\n    ret.addPropertyResult('requestValidatorId', 'RequestValidatorId', properties.RequestValidatorId != null ? cfn_parse.FromCloudFormation.getString(properties.RequestValidatorId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnMethod extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Method\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMethod {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMethodPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMethod(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                   \n    public httpMethod: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public resourceId: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public restApiId: string;\n\n                                                                                                                                                                                                                                                          \n    public apiKeyRequired: boolean | cdk.IResolvable | undefined;\n\nn    public authorizationScopes: string[] | undefined;\n\nn    public authorizationType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public authorizerId: string | undefined;\n\n                                                                                                                                                                                                                                                   \n    public integration: CfnMethod.IntegrationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    public methodResponses: Array<CfnMethod.MethodResponseProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public operationName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public requestModels: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\nn    public requestParameters: { [key: string]: (boolean | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                 \n    public requestValidatorId: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnMethodProps) {\n        super(scope, id, { type: CfnMethod.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'httpMethod', this);\n        cdk.requireProperty(props, 'resourceId', this);\n        cdk.requireProperty(props, 'restApiId', this);\n\n        this.httpMethod = props.httpMethod;\n        this.resourceId = props.resourceId;\n        this.restApiId = props.restApiId;\n        this.apiKeyRequired = props.apiKeyRequired;\n        this.authorizationScopes = props.authorizationScopes;\n        this.authorizationType = props.authorizationType;\n        this.authorizerId = props.authorizerId;\n        this.integration = props.integration;\n        this.methodResponses = props.methodResponses;\n        this.operationName = props.operationName;\n        this.requestModels = props.requestModels;\n        this.requestParameters = props.requestParameters;\n        this.requestValidatorId = props.requestValidatorId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMethod.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            httpMethod: this.httpMethod,\n            resourceId: this.resourceId,\n            restApiId: this.restApiId,\n            apiKeyRequired: this.apiKeyRequired,\n            authorizationScopes: this.authorizationScopes,\n            authorizationType: this.authorizationType,\n            authorizerId: this.authorizerId,\n            integration: this.integration,\n            methodResponses: this.methodResponses,\n            operationName: this.operationName,\n            requestModels: this.requestModels,\n            requestParameters: this.requestParameters,\n            requestValidatorId: this.requestValidatorId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMethodPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMethod {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface IntegrationProperty {\nn        readonly cacheKeyParameters?: string[];\n                                                                                                                                                                                                                                                                                        \n        readonly cacheNamespace?: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly connectionId?: string;\nn        readonly connectionType?: string;\nn        readonly contentHandling?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly credentials?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly integrationHttpMethod?: string;\nn        readonly integrationResponses?: Array<CfnMethod.IntegrationResponseProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly passthroughBehavior?: string;\nn        readonly requestParameters?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly requestTemplates?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly timeoutInMillis?: number;\nn        readonly type?: string;\nn        readonly uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntegrationProperty`\n *\n * @param properties - the TypeScript properties of a `IntegrationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMethod_IntegrationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cacheKeyParameters', cdk.listValidator(cdk.validateString))(properties.cacheKeyParameters));\n    errors.collect(cdk.propertyValidator('cacheNamespace', cdk.validateString)(properties.cacheNamespace));\n    errors.collect(cdk.propertyValidator('connectionId', cdk.validateString)(properties.connectionId));\n    errors.collect(cdk.propertyValidator('connectionType', cdk.validateString)(properties.connectionType));\n    errors.collect(cdk.propertyValidator('contentHandling', cdk.validateString)(properties.contentHandling));\n    errors.collect(cdk.propertyValidator('credentials', cdk.validateString)(properties.credentials));\n    errors.collect(cdk.propertyValidator('integrationHttpMethod', cdk.validateString)(properties.integrationHttpMethod));\n    errors.collect(cdk.propertyValidator('integrationResponses', cdk.listValidator(CfnMethod_IntegrationResponsePropertyValidator))(properties.integrationResponses));\n    errors.collect(cdk.propertyValidator('passthroughBehavior', cdk.validateString)(properties.passthroughBehavior));\n    errors.collect(cdk.propertyValidator('requestParameters', cdk.hashValidator(cdk.validateString))(properties.requestParameters));\n    errors.collect(cdk.propertyValidator('requestTemplates', cdk.hashValidator(cdk.validateString))(properties.requestTemplates));\n    errors.collect(cdk.propertyValidator('timeoutInMillis', cdk.validateNumber)(properties.timeoutInMillis));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('uri', cdk.validateString)(properties.uri));\n    return errors.wrap('supplied properties not correct for \"IntegrationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Method.Integration` resource\n *\n * @param properties - the TypeScript properties of a `IntegrationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Method.Integration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMethodIntegrationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMethod_IntegrationPropertyValidator(properties).assertSuccess();\n    return {\n        CacheKeyParameters: cdk.listMapper(cdk.stringToCloudFormation)(properties.cacheKeyParameters),\n        CacheNamespace: cdk.stringToCloudFormation(properties.cacheNamespace),\n        ConnectionId: cdk.stringToCloudFormation(properties.connectionId),\n        ConnectionType: cdk.stringToCloudFormation(properties.connectionType),\n        ContentHandling: cdk.stringToCloudFormation(properties.contentHandling),\n        Credentials: cdk.stringToCloudFormation(properties.credentials),\n        IntegrationHttpMethod: cdk.stringToCloudFormation(properties.integrationHttpMethod),\n        IntegrationResponses: cdk.listMapper(cfnMethodIntegrationResponsePropertyToCloudFormation)(properties.integrationResponses),\n        PassthroughBehavior: cdk.stringToCloudFormation(properties.passthroughBehavior),\n        RequestParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.requestParameters),\n        RequestTemplates: cdk.hashMapper(cdk.stringToCloudFormation)(properties.requestTemplates),\n        TimeoutInMillis: cdk.numberToCloudFormation(properties.timeoutInMillis),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Uri: cdk.stringToCloudFormation(properties.uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMethodIntegrationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMethod.IntegrationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMethod.IntegrationProperty>();\n    ret.addPropertyResult('cacheKeyParameters', 'CacheKeyParameters', properties.CacheKeyParameters != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CacheKeyParameters) : undefined);\n    ret.addPropertyResult('cacheNamespace', 'CacheNamespace', properties.CacheNamespace != null ? cfn_parse.FromCloudFormation.getString(properties.CacheNamespace) : undefined);\n    ret.addPropertyResult('connectionId', 'ConnectionId', properties.ConnectionId != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionId) : undefined);\n    ret.addPropertyResult('connectionType', 'ConnectionType', properties.ConnectionType != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionType) : undefined);\n    ret.addPropertyResult('contentHandling', 'ContentHandling', properties.ContentHandling != null ? cfn_parse.FromCloudFormation.getString(properties.ContentHandling) : undefined);\n    ret.addPropertyResult('credentials', 'Credentials', properties.Credentials != null ? cfn_parse.FromCloudFormation.getString(properties.Credentials) : undefined);\n    ret.addPropertyResult('integrationHttpMethod', 'IntegrationHttpMethod', properties.IntegrationHttpMethod != null ? cfn_parse.FromCloudFormation.getString(properties.IntegrationHttpMethod) : undefined);\n    ret.addPropertyResult('integrationResponses', 'IntegrationResponses', properties.IntegrationResponses != null ? cfn_parse.FromCloudFormation.getArray(CfnMethodIntegrationResponsePropertyFromCloudFormation)(properties.IntegrationResponses) : undefined);\n    ret.addPropertyResult('passthroughBehavior', 'PassthroughBehavior', properties.PassthroughBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.PassthroughBehavior) : undefined);\n    ret.addPropertyResult('requestParameters', 'RequestParameters', properties.RequestParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RequestParameters) : undefined);\n    ret.addPropertyResult('requestTemplates', 'RequestTemplates', properties.RequestTemplates != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RequestTemplates) : undefined);\n    ret.addPropertyResult('timeoutInMillis', 'TimeoutInMillis', properties.TimeoutInMillis != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMillis) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('uri', 'Uri', properties.Uri != null ? cfn_parse.FromCloudFormation.getString(properties.Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMethod {\nn    export interface IntegrationResponseProperty {\nn        readonly contentHandling?: string;\nn        readonly responseParameters?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly responseTemplates?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly selectionPattern?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly statusCode: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntegrationResponseProperty`\n *\n * @param properties - the TypeScript properties of a `IntegrationResponseProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMethod_IntegrationResponsePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contentHandling', cdk.validateString)(properties.contentHandling));\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.hashValidator(cdk.validateString))(properties.responseParameters));\n    errors.collect(cdk.propertyValidator('responseTemplates', cdk.hashValidator(cdk.validateString))(properties.responseTemplates));\n    errors.collect(cdk.propertyValidator('selectionPattern', cdk.validateString)(properties.selectionPattern));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.requiredValidator)(properties.statusCode));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.validateString)(properties.statusCode));\n    return errors.wrap('supplied properties not correct for \"IntegrationResponseProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Method.IntegrationResponse` resource\n *\n * @param properties - the TypeScript properties of a `IntegrationResponseProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Method.IntegrationResponse` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMethodIntegrationResponsePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMethod_IntegrationResponsePropertyValidator(properties).assertSuccess();\n    return {\n        ContentHandling: cdk.stringToCloudFormation(properties.contentHandling),\n        ResponseParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseParameters),\n        ResponseTemplates: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseTemplates),\n        SelectionPattern: cdk.stringToCloudFormation(properties.selectionPattern),\n        StatusCode: cdk.stringToCloudFormation(properties.statusCode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMethodIntegrationResponsePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMethod.IntegrationResponseProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMethod.IntegrationResponseProperty>();\n    ret.addPropertyResult('contentHandling', 'ContentHandling', properties.ContentHandling != null ? cfn_parse.FromCloudFormation.getString(properties.ContentHandling) : undefined);\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseParameters) : undefined);\n    ret.addPropertyResult('responseTemplates', 'ResponseTemplates', properties.ResponseTemplates != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseTemplates) : undefined);\n    ret.addPropertyResult('selectionPattern', 'SelectionPattern', properties.SelectionPattern != null ? cfn_parse.FromCloudFormation.getString(properties.SelectionPattern) : undefined);\n    ret.addPropertyResult('statusCode', 'StatusCode', cfn_parse.FromCloudFormation.getString(properties.StatusCode));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMethod {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface MethodResponseProperty {\nn        readonly responseModels?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly responseParameters?: { [key: string]: (boolean | cdk.IResolvable) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly statusCode: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MethodResponseProperty`\n *\n * @param properties - the TypeScript properties of a `MethodResponseProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMethod_MethodResponsePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('responseModels', cdk.hashValidator(cdk.validateString))(properties.responseModels));\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.hashValidator(cdk.validateBoolean))(properties.responseParameters));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.requiredValidator)(properties.statusCode));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.validateString)(properties.statusCode));\n    return errors.wrap('supplied properties not correct for \"MethodResponseProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Method.MethodResponse` resource\n *\n * @param properties - the TypeScript properties of a `MethodResponseProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Method.MethodResponse` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMethodMethodResponsePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMethod_MethodResponsePropertyValidator(properties).assertSuccess();\n    return {\n        ResponseModels: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseModels),\n        ResponseParameters: cdk.hashMapper(cdk.booleanToCloudFormation)(properties.responseParameters),\n        StatusCode: cdk.stringToCloudFormation(properties.statusCode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMethodMethodResponsePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMethod.MethodResponseProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMethod.MethodResponseProperty>();\n    ret.addPropertyResult('responseModels', 'ResponseModels', properties.ResponseModels != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseModels) : undefined);\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getBoolean)(properties.ResponseParameters) : undefined);\n    ret.addPropertyResult('statusCode', 'StatusCode', cfn_parse.FromCloudFormation.getString(properties.StatusCode));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnModelProps {\n\n                                                                                                                                                                                                                                   \n    readonly restApiId: string;\n\n                                                                                                                                                                                                            \n    readonly contentType?: string;\n\n                                                                                                                                                                                                                      \n    readonly description?: string;\n\nn    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly schema?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contentType', cdk.validateString)(properties.contentType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('schema', cdk.validateObject)(properties.schema));\n    return errors.wrap('supplied properties not correct for \"CfnModelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Model` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Model` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelPropsValidator(properties).assertSuccess();\n    return {\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        ContentType: cdk.stringToCloudFormation(properties.contentType),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Schema: cdk.objectToCloudFormation(properties.schema),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelProps>();\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('contentType', 'ContentType', properties.ContentType != null ? cfn_parse.FromCloudFormation.getString(properties.ContentType) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('schema', 'Schema', properties.Schema != null ? cfn_parse.FromCloudFormation.getAny(properties.Schema) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnModel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Model\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                   \n    public restApiId: string;\n\n                                                                                                                                                                                                            \n    public contentType: string | undefined;\n\n                                                                                                                                                                                                                      \n    public description: string | undefined;\n\nn    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                       \n    public schema: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnModelProps) {\n        super(scope, id, { type: CfnModel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'restApiId', this);\n\n        this.restApiId = props.restApiId;\n        this.contentType = props.contentType;\n        this.description = props.description;\n        this.name = props.name;\n        this.schema = props.schema;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            restApiId: this.restApiId,\n            contentType: this.contentType,\n            description: this.description,\n            name: this.name,\n            schema: this.schema,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnRequestValidatorProps {\n\n                                                                                                                                                                                                                                           \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                               \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly validateRequestBody?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                  \n    readonly validateRequestParameters?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRequestValidatorProps`\n *\n * @param properties - the TypeScript properties of a `CfnRequestValidatorProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRequestValidatorPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('validateRequestBody', cdk.validateBoolean)(properties.validateRequestBody));\n    errors.collect(cdk.propertyValidator('validateRequestParameters', cdk.validateBoolean)(properties.validateRequestParameters));\n    return errors.wrap('supplied properties not correct for \"CfnRequestValidatorProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::RequestValidator` resource\n *\n * @param properties - the TypeScript properties of a `CfnRequestValidatorProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::RequestValidator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRequestValidatorPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRequestValidatorPropsValidator(properties).assertSuccess();\n    return {\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ValidateRequestBody: cdk.booleanToCloudFormation(properties.validateRequestBody),\n        ValidateRequestParameters: cdk.booleanToCloudFormation(properties.validateRequestParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRequestValidatorPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRequestValidatorProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRequestValidatorProps>();\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('validateRequestBody', 'ValidateRequestBody', properties.ValidateRequestBody != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ValidateRequestBody) : undefined);\n    ret.addPropertyResult('validateRequestParameters', 'ValidateRequestParameters', properties.ValidateRequestParameters != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ValidateRequestParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRequestValidator extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::RequestValidator\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRequestValidator {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRequestValidatorPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRequestValidator(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                   \n    public readonly attrRequestValidatorId: string;\n\n                                                                                                                                                                                                                                           \n    public restApiId: string;\n\n                                                                                                                                                                                                                               \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                             \n    public validateRequestBody: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                  \n    public validateRequestParameters: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnRequestValidatorProps) {\n        super(scope, id, { type: CfnRequestValidator.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'restApiId', this);\n        this.attrRequestValidatorId = cdk.Token.asString(this.getAtt('RequestValidatorId'));\n\n        this.restApiId = props.restApiId;\n        this.name = props.name;\n        this.validateRequestBody = props.validateRequestBody;\n        this.validateRequestParameters = props.validateRequestParameters;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRequestValidator.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            restApiId: this.restApiId,\n            name: this.name,\n            validateRequestBody: this.validateRequestBody,\n            validateRequestParameters: this.validateRequestParameters,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRequestValidatorPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                       \nexport interface CfnResourceProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly parentId: string;\n\n                                                                                                                                                                                                             \n    readonly pathPart: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly restApiId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourceProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourcePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parentId', cdk.requiredValidator)(properties.parentId));\n    errors.collect(cdk.propertyValidator('parentId', cdk.validateString)(properties.parentId));\n    errors.collect(cdk.propertyValidator('pathPart', cdk.requiredValidator)(properties.pathPart));\n    errors.collect(cdk.propertyValidator('pathPart', cdk.validateString)(properties.pathPart));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    return errors.wrap('supplied properties not correct for \"CfnResourceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Resource` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Resource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourcePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourcePropsValidator(properties).assertSuccess();\n    return {\n        ParentId: cdk.stringToCloudFormation(properties.parentId),\n        PathPart: cdk.stringToCloudFormation(properties.pathPart),\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourcePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceProps>();\n    ret.addPropertyResult('parentId', 'ParentId', cfn_parse.FromCloudFormation.getString(properties.ParentId));\n    ret.addPropertyResult('pathPart', 'PathPart', cfn_parse.FromCloudFormation.getString(properties.PathPart));\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                   \nexport class CfnResource extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Resource\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResource {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourcePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResource(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                  \n    public readonly attrResourceId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public parentId: string;\n\n                                                                                                                                                                                                             \n    public pathPart: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public restApiId: string;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnResourceProps) {\n        super(scope, id, { type: CfnResource.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'parentId', this);\n        cdk.requireProperty(props, 'pathPart', this);\n        cdk.requireProperty(props, 'restApiId', this);\n        this.attrResourceId = cdk.Token.asString(this.getAtt('ResourceId'));\n\n        this.parentId = props.parentId;\n        this.pathPart = props.pathPart;\n        this.restApiId = props.restApiId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResource.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            parentId: this.parentId,\n            pathPart: this.pathPart,\n            restApiId: this.restApiId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourcePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                     \nexport interface CfnRestApiProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly apiKeySourceType?: string;\n\nn    readonly binaryMediaTypes?: string[];\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly body?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                      \n    readonly bodyS3Location?: CfnRestApi.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                       \n    readonly cloneFrom?: string;\n\n                                                                                                                                                                                                                         \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly disableExecuteApiEndpoint?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly endpointConfiguration?: CfnRestApi.EndpointConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                         \n    readonly failOnWarnings?: boolean | cdk.IResolvable;\n\nn    readonly minimumCompressionSize?: number;\n\nn    readonly mode?: string;\n\n                                                                                                                                                                                                            \n    readonly name?: string;\n\n                                                                                                                                                                                                                         \n    readonly parameters?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly policy?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRestApiProps`\n *\n * @param properties - the TypeScript properties of a `CfnRestApiProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRestApiPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiKeySourceType', cdk.validateString)(properties.apiKeySourceType));\n    errors.collect(cdk.propertyValidator('binaryMediaTypes', cdk.listValidator(cdk.validateString))(properties.binaryMediaTypes));\n    errors.collect(cdk.propertyValidator('body', cdk.validateObject)(properties.body));\n    errors.collect(cdk.propertyValidator('bodyS3Location', CfnRestApi_S3LocationPropertyValidator)(properties.bodyS3Location));\n    errors.collect(cdk.propertyValidator('cloneFrom', cdk.validateString)(properties.cloneFrom));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('disableExecuteApiEndpoint', cdk.validateBoolean)(properties.disableExecuteApiEndpoint));\n    errors.collect(cdk.propertyValidator('endpointConfiguration', CfnRestApi_EndpointConfigurationPropertyValidator)(properties.endpointConfiguration));\n    errors.collect(cdk.propertyValidator('failOnWarnings', cdk.validateBoolean)(properties.failOnWarnings));\n    errors.collect(cdk.propertyValidator('minimumCompressionSize', cdk.validateNumber)(properties.minimumCompressionSize));\n    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parameters', cdk.hashValidator(cdk.validateString))(properties.parameters));\n    errors.collect(cdk.propertyValidator('policy', cdk.validateObject)(properties.policy));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnRestApiProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::RestApi` resource\n *\n * @param properties - the TypeScript properties of a `CfnRestApiProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::RestApi` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRestApiPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRestApiPropsValidator(properties).assertSuccess();\n    return {\n        ApiKeySourceType: cdk.stringToCloudFormation(properties.apiKeySourceType),\n        BinaryMediaTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.binaryMediaTypes),\n        Body: cdk.objectToCloudFormation(properties.body),\n        BodyS3Location: cfnRestApiS3LocationPropertyToCloudFormation(properties.bodyS3Location),\n        CloneFrom: cdk.stringToCloudFormation(properties.cloneFrom),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisableExecuteApiEndpoint: cdk.booleanToCloudFormation(properties.disableExecuteApiEndpoint),\n        EndpointConfiguration: cfnRestApiEndpointConfigurationPropertyToCloudFormation(properties.endpointConfiguration),\n        FailOnWarnings: cdk.booleanToCloudFormation(properties.failOnWarnings),\n        MinimumCompressionSize: cdk.numberToCloudFormation(properties.minimumCompressionSize),\n        Mode: cdk.stringToCloudFormation(properties.mode),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Parameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.parameters),\n        Policy: cdk.objectToCloudFormation(properties.policy),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRestApiPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRestApiProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRestApiProps>();\n    ret.addPropertyResult('apiKeySourceType', 'ApiKeySourceType', properties.ApiKeySourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ApiKeySourceType) : undefined);\n    ret.addPropertyResult('binaryMediaTypes', 'BinaryMediaTypes', properties.BinaryMediaTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.BinaryMediaTypes) : undefined);\n    ret.addPropertyResult('body', 'Body', properties.Body != null ? cfn_parse.FromCloudFormation.getAny(properties.Body) : undefined);\n    ret.addPropertyResult('bodyS3Location', 'BodyS3Location', properties.BodyS3Location != null ? CfnRestApiS3LocationPropertyFromCloudFormation(properties.BodyS3Location) : undefined);\n    ret.addPropertyResult('cloneFrom', 'CloneFrom', properties.CloneFrom != null ? cfn_parse.FromCloudFormation.getString(properties.CloneFrom) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('disableExecuteApiEndpoint', 'DisableExecuteApiEndpoint', properties.DisableExecuteApiEndpoint != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableExecuteApiEndpoint) : undefined);\n    ret.addPropertyResult('endpointConfiguration', 'EndpointConfiguration', properties.EndpointConfiguration != null ? CfnRestApiEndpointConfigurationPropertyFromCloudFormation(properties.EndpointConfiguration) : undefined);\n    ret.addPropertyResult('failOnWarnings', 'FailOnWarnings', properties.FailOnWarnings != null ? cfn_parse.FromCloudFormation.getBoolean(properties.FailOnWarnings) : undefined);\n    ret.addPropertyResult('minimumCompressionSize', 'MinimumCompressionSize', properties.MinimumCompressionSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinimumCompressionSize) : undefined);\n    ret.addPropertyResult('mode', 'Mode', properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Parameters) : undefined);\n    ret.addPropertyResult('policy', 'Policy', properties.Policy != null ? cfn_parse.FromCloudFormation.getAny(properties.Policy) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRestApi extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::RestApi\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRestApi {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRestApiPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRestApi(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                           \n    public readonly attrRootResourceId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public apiKeySourceType: string | undefined;\n\nn    public binaryMediaTypes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                \n    public body: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                      \n    public bodyS3Location: CfnRestApi.S3LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                       \n    public cloneFrom: string | undefined;\n\n                                                                                                                                                                                                                         \n    public description: string | undefined;\n\nn    public disableExecuteApiEndpoint: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    public endpointConfiguration: CfnRestApi.EndpointConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                         \n    public failOnWarnings: boolean | cdk.IResolvable | undefined;\n\nn    public minimumCompressionSize: number | undefined;\n\nn    public mode: string | undefined;\n\n                                                                                                                                                                                                            \n    public name: string | undefined;\n\n                                                                                                                                                                                                                         \n    public parameters: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public policy: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                 \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnRestApiProps = {}) {\n        super(scope, id, { type: CfnRestApi.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrRootResourceId = cdk.Token.asString(this.getAtt('RootResourceId'));\n\n        this.apiKeySourceType = props.apiKeySourceType;\n        this.binaryMediaTypes = props.binaryMediaTypes;\n        this.body = props.body;\n        this.bodyS3Location = props.bodyS3Location;\n        this.cloneFrom = props.cloneFrom;\n        this.description = props.description;\n        this.disableExecuteApiEndpoint = props.disableExecuteApiEndpoint;\n        this.endpointConfiguration = props.endpointConfiguration;\n        this.failOnWarnings = props.failOnWarnings;\n        this.minimumCompressionSize = props.minimumCompressionSize;\n        this.mode = props.mode;\n        this.name = props.name;\n        this.parameters = props.parameters;\n        this.policy = props.policy;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::RestApi\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRestApi.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiKeySourceType: this.apiKeySourceType,\n            binaryMediaTypes: this.binaryMediaTypes,\n            body: this.body,\n            bodyS3Location: this.bodyS3Location,\n            cloneFrom: this.cloneFrom,\n            description: this.description,\n            disableExecuteApiEndpoint: this.disableExecuteApiEndpoint,\n            endpointConfiguration: this.endpointConfiguration,\n            failOnWarnings: this.failOnWarnings,\n            minimumCompressionSize: this.minimumCompressionSize,\n            mode: this.mode,\n            name: this.name,\n            parameters: this.parameters,\n            policy: this.policy,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRestApiPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRestApi {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface EndpointConfigurationProperty {\nn        readonly types?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly vpcEndpointIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRestApi_EndpointConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('types', cdk.listValidator(cdk.validateString))(properties.types));\n    errors.collect(cdk.propertyValidator('vpcEndpointIds', cdk.listValidator(cdk.validateString))(properties.vpcEndpointIds));\n    return errors.wrap('supplied properties not correct for \"EndpointConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::RestApi.EndpointConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EndpointConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::RestApi.EndpointConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRestApiEndpointConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRestApi_EndpointConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Types: cdk.listMapper(cdk.stringToCloudFormation)(properties.types),\n        VpcEndpointIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcEndpointIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRestApiEndpointConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRestApi.EndpointConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRestApi.EndpointConfigurationProperty>();\n    ret.addPropertyResult('types', 'Types', properties.Types != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Types) : undefined);\n    ret.addPropertyResult('vpcEndpointIds', 'VpcEndpointIds', properties.VpcEndpointIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcEndpointIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRestApi {\nn    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly bucket?: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly eTag?: string;\n                                                                                                                                                                                                                                                                               \n        readonly key?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRestApi_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('eTag', cdk.validateString)(properties.eTag));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::RestApi.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::RestApi.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRestApiS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRestApi_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        ETag: cdk.stringToCloudFormation(properties.eTag),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRestApiS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRestApi.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRestApi.S3LocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', properties.Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.Bucket) : undefined);\n    ret.addPropertyResult('eTag', 'ETag', properties.ETag != null ? cfn_parse.FromCloudFormation.getString(properties.ETag) : undefined);\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnStageProps {\n\n                                                                                                                                                                                                                                                  \n    readonly restApiId: string;\n\n                                                                                                                                                                                                                                      \n    readonly accessLogSetting?: CfnStage.AccessLogSettingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    readonly cacheClusterEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    readonly cacheClusterSize?: string;\n\n                                                                                                                                                                                                                                          \n    readonly canarySetting?: CfnStage.CanarySettingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                            \n    readonly clientCertificateId?: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly deploymentId?: string;\n\n                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                       \n    readonly documentationVersion?: string;\n\n                                                                                                                                                                                                                      \n    readonly methodSettings?: Array<CfnStage.MethodSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly stageName?: string;\n\n                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tracingEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly variables?: { [key: string]: (string) } | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStageProps`\n *\n * @param properties - the TypeScript properties of a `CfnStageProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStagePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessLogSetting', CfnStage_AccessLogSettingPropertyValidator)(properties.accessLogSetting));\n    errors.collect(cdk.propertyValidator('cacheClusterEnabled', cdk.validateBoolean)(properties.cacheClusterEnabled));\n    errors.collect(cdk.propertyValidator('cacheClusterSize', cdk.validateString)(properties.cacheClusterSize));\n    errors.collect(cdk.propertyValidator('canarySetting', CfnStage_CanarySettingPropertyValidator)(properties.canarySetting));\n    errors.collect(cdk.propertyValidator('clientCertificateId', cdk.validateString)(properties.clientCertificateId));\n    errors.collect(cdk.propertyValidator('deploymentId', cdk.validateString)(properties.deploymentId));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('documentationVersion', cdk.validateString)(properties.documentationVersion));\n    errors.collect(cdk.propertyValidator('methodSettings', cdk.listValidator(CfnStage_MethodSettingPropertyValidator))(properties.methodSettings));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.requiredValidator)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('restApiId', cdk.validateString)(properties.restApiId));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('tracingEnabled', cdk.validateBoolean)(properties.tracingEnabled));\n    errors.collect(cdk.propertyValidator('variables', cdk.hashValidator(cdk.validateString))(properties.variables));\n    return errors.wrap('supplied properties not correct for \"CfnStageProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Stage` resource\n *\n * @param properties - the TypeScript properties of a `CfnStageProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Stage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStagePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStagePropsValidator(properties).assertSuccess();\n    return {\n        RestApiId: cdk.stringToCloudFormation(properties.restApiId),\n        AccessLogSetting: cfnStageAccessLogSettingPropertyToCloudFormation(properties.accessLogSetting),\n        CacheClusterEnabled: cdk.booleanToCloudFormation(properties.cacheClusterEnabled),\n        CacheClusterSize: cdk.stringToCloudFormation(properties.cacheClusterSize),\n        CanarySetting: cfnStageCanarySettingPropertyToCloudFormation(properties.canarySetting),\n        ClientCertificateId: cdk.stringToCloudFormation(properties.clientCertificateId),\n        DeploymentId: cdk.stringToCloudFormation(properties.deploymentId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DocumentationVersion: cdk.stringToCloudFormation(properties.documentationVersion),\n        MethodSettings: cdk.listMapper(cfnStageMethodSettingPropertyToCloudFormation)(properties.methodSettings),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TracingEnabled: cdk.booleanToCloudFormation(properties.tracingEnabled),\n        Variables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.variables),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStagePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStageProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStageProps>();\n    ret.addPropertyResult('restApiId', 'RestApiId', cfn_parse.FromCloudFormation.getString(properties.RestApiId));\n    ret.addPropertyResult('accessLogSetting', 'AccessLogSetting', properties.AccessLogSetting != null ? CfnStageAccessLogSettingPropertyFromCloudFormation(properties.AccessLogSetting) : undefined);\n    ret.addPropertyResult('cacheClusterEnabled', 'CacheClusterEnabled', properties.CacheClusterEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheClusterEnabled) : undefined);\n    ret.addPropertyResult('cacheClusterSize', 'CacheClusterSize', properties.CacheClusterSize != null ? cfn_parse.FromCloudFormation.getString(properties.CacheClusterSize) : undefined);\n    ret.addPropertyResult('canarySetting', 'CanarySetting', properties.CanarySetting != null ? CfnStageCanarySettingPropertyFromCloudFormation(properties.CanarySetting) : undefined);\n    ret.addPropertyResult('clientCertificateId', 'ClientCertificateId', properties.ClientCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCertificateId) : undefined);\n    ret.addPropertyResult('deploymentId', 'DeploymentId', properties.DeploymentId != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentId) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('documentationVersion', 'DocumentationVersion', properties.DocumentationVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentationVersion) : undefined);\n    ret.addPropertyResult('methodSettings', 'MethodSettings', properties.MethodSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnStageMethodSettingPropertyFromCloudFormation)(properties.MethodSettings) : undefined);\n    ret.addPropertyResult('stageName', 'StageName', properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('tracingEnabled', 'TracingEnabled', properties.TracingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TracingEnabled) : undefined);\n    ret.addPropertyResult('variables', 'Variables', properties.Variables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Variables) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                           \nexport class CfnStage extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::Stage\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStage {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStagePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStage(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                  \n    public restApiId: string;\n\n                                                                                                                                                                                                                                      \n    public accessLogSetting: CfnStage.AccessLogSettingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                 \n    public cacheClusterEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                 \n    public cacheClusterSize: string | undefined;\n\n                                                                                                                                                                                                                                          \n    public canarySetting: CfnStage.CanarySettingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public clientCertificateId: string | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public deploymentId: string | undefined;\n\n                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public documentationVersion: string | undefined;\n\n                                                                                                                                                                                                                      \n    public methodSettings: Array<CfnStage.MethodSettingProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                    \n    public stageName: string | undefined;\n\n                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public tracingEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public variables: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnStageProps) {\n        super(scope, id, { type: CfnStage.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'restApiId', this);\n\n        this.restApiId = props.restApiId;\n        this.accessLogSetting = props.accessLogSetting;\n        this.cacheClusterEnabled = props.cacheClusterEnabled;\n        this.cacheClusterSize = props.cacheClusterSize;\n        this.canarySetting = props.canarySetting;\n        this.clientCertificateId = props.clientCertificateId;\n        this.deploymentId = props.deploymentId;\n        this.description = props.description;\n        this.documentationVersion = props.documentationVersion;\n        this.methodSettings = props.methodSettings;\n        this.stageName = props.stageName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::Stage\", props.tags, { tagPropertyName: 'tags' });\n        this.tracingEnabled = props.tracingEnabled;\n        this.variables = props.variables;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStage.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            restApiId: this.restApiId,\n            accessLogSetting: this.accessLogSetting,\n            cacheClusterEnabled: this.cacheClusterEnabled,\n            cacheClusterSize: this.cacheClusterSize,\n            canarySetting: this.canarySetting,\n            clientCertificateId: this.clientCertificateId,\n            deploymentId: this.deploymentId,\n            description: this.description,\n            documentationVersion: this.documentationVersion,\n            methodSettings: this.methodSettings,\n            stageName: this.stageName,\n            tags: this.tags.renderTags(),\n            tracingEnabled: this.tracingEnabled,\n            variables: this.variables,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStagePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStage {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface AccessLogSettingProperty {\nn        readonly destinationArn?: string;\nn        readonly format?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessLogSettingProperty`\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStage_AccessLogSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationArn', cdk.validateString)(properties.destinationArn));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    return errors.wrap('supplied properties not correct for \"AccessLogSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Stage.AccessLogSetting` resource\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Stage.AccessLogSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStageAccessLogSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStage_AccessLogSettingPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),\n        Format: cdk.stringToCloudFormation(properties.format),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStageAccessLogSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStage.AccessLogSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStage.AccessLogSettingProperty>();\n    ret.addPropertyResult('destinationArn', 'DestinationArn', properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : undefined);\n    ret.addPropertyResult('format', 'Format', properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStage {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface CanarySettingProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly deploymentId?: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly percentTraffic?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly stageVariableOverrides?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly useStageCache?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CanarySettingProperty`\n *\n * @param properties - the TypeScript properties of a `CanarySettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStage_CanarySettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentId', cdk.validateString)(properties.deploymentId));\n    errors.collect(cdk.propertyValidator('percentTraffic', cdk.validateNumber)(properties.percentTraffic));\n    errors.collect(cdk.propertyValidator('stageVariableOverrides', cdk.hashValidator(cdk.validateString))(properties.stageVariableOverrides));\n    errors.collect(cdk.propertyValidator('useStageCache', cdk.validateBoolean)(properties.useStageCache));\n    return errors.wrap('supplied properties not correct for \"CanarySettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Stage.CanarySetting` resource\n *\n * @param properties - the TypeScript properties of a `CanarySettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Stage.CanarySetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStageCanarySettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStage_CanarySettingPropertyValidator(properties).assertSuccess();\n    return {\n        DeploymentId: cdk.stringToCloudFormation(properties.deploymentId),\n        PercentTraffic: cdk.numberToCloudFormation(properties.percentTraffic),\n        StageVariableOverrides: cdk.hashMapper(cdk.stringToCloudFormation)(properties.stageVariableOverrides),\n        UseStageCache: cdk.booleanToCloudFormation(properties.useStageCache),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStageCanarySettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStage.CanarySettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStage.CanarySettingProperty>();\n    ret.addPropertyResult('deploymentId', 'DeploymentId', properties.DeploymentId != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentId) : undefined);\n    ret.addPropertyResult('percentTraffic', 'PercentTraffic', properties.PercentTraffic != null ? cfn_parse.FromCloudFormation.getNumber(properties.PercentTraffic) : undefined);\n    ret.addPropertyResult('stageVariableOverrides', 'StageVariableOverrides', properties.StageVariableOverrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.StageVariableOverrides) : undefined);\n    ret.addPropertyResult('useStageCache', 'UseStageCache', properties.UseStageCache != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseStageCache) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStage {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface MethodSettingProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly cacheDataEncrypted?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly cacheTtlInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly cachingEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly dataTraceEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly httpMethod?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly loggingLevel?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly metricsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly resourcePath?: string;\nn        readonly throttlingBurstLimit?: number;\nn        readonly throttlingRateLimit?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MethodSettingProperty`\n *\n * @param properties - the TypeScript properties of a `MethodSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStage_MethodSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cacheDataEncrypted', cdk.validateBoolean)(properties.cacheDataEncrypted));\n    errors.collect(cdk.propertyValidator('cacheTtlInSeconds', cdk.validateNumber)(properties.cacheTtlInSeconds));\n    errors.collect(cdk.propertyValidator('cachingEnabled', cdk.validateBoolean)(properties.cachingEnabled));\n    errors.collect(cdk.propertyValidator('dataTraceEnabled', cdk.validateBoolean)(properties.dataTraceEnabled));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.validateString)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('loggingLevel', cdk.validateString)(properties.loggingLevel));\n    errors.collect(cdk.propertyValidator('metricsEnabled', cdk.validateBoolean)(properties.metricsEnabled));\n    errors.collect(cdk.propertyValidator('resourcePath', cdk.validateString)(properties.resourcePath));\n    errors.collect(cdk.propertyValidator('throttlingBurstLimit', cdk.validateNumber)(properties.throttlingBurstLimit));\n    errors.collect(cdk.propertyValidator('throttlingRateLimit', cdk.validateNumber)(properties.throttlingRateLimit));\n    return errors.wrap('supplied properties not correct for \"MethodSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::Stage.MethodSetting` resource\n *\n * @param properties - the TypeScript properties of a `MethodSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::Stage.MethodSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStageMethodSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStage_MethodSettingPropertyValidator(properties).assertSuccess();\n    return {\n        CacheDataEncrypted: cdk.booleanToCloudFormation(properties.cacheDataEncrypted),\n        CacheTtlInSeconds: cdk.numberToCloudFormation(properties.cacheTtlInSeconds),\n        CachingEnabled: cdk.booleanToCloudFormation(properties.cachingEnabled),\n        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),\n        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),\n        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),\n        MetricsEnabled: cdk.booleanToCloudFormation(properties.metricsEnabled),\n        ResourcePath: cdk.stringToCloudFormation(properties.resourcePath),\n        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),\n        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStageMethodSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStage.MethodSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStage.MethodSettingProperty>();\n    ret.addPropertyResult('cacheDataEncrypted', 'CacheDataEncrypted', properties.CacheDataEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheDataEncrypted) : undefined);\n    ret.addPropertyResult('cacheTtlInSeconds', 'CacheTtlInSeconds', properties.CacheTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheTtlInSeconds) : undefined);\n    ret.addPropertyResult('cachingEnabled', 'CachingEnabled', properties.CachingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CachingEnabled) : undefined);\n    ret.addPropertyResult('dataTraceEnabled', 'DataTraceEnabled', properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : undefined);\n    ret.addPropertyResult('httpMethod', 'HttpMethod', properties.HttpMethod != null ? cfn_parse.FromCloudFormation.getString(properties.HttpMethod) : undefined);\n    ret.addPropertyResult('loggingLevel', 'LoggingLevel', properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : undefined);\n    ret.addPropertyResult('metricsEnabled', 'MetricsEnabled', properties.MetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MetricsEnabled) : undefined);\n    ret.addPropertyResult('resourcePath', 'ResourcePath', properties.ResourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.ResourcePath) : undefined);\n    ret.addPropertyResult('throttlingBurstLimit', 'ThrottlingBurstLimit', properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : undefined);\n    ret.addPropertyResult('throttlingRateLimit', 'ThrottlingRateLimit', properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnUsagePlanProps {\n\n                                                                                                                                                                                                                                    \n    readonly apiStages?: Array<CfnUsagePlan.ApiStageProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                     \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                             \n    readonly quota?: CfnUsagePlan.QuotaSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                       \n    readonly throttle?: CfnUsagePlan.ThrottleSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    readonly usagePlanName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUsagePlanProps`\n *\n * @param properties - the TypeScript properties of a `CfnUsagePlanProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUsagePlanPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiStages', cdk.listValidator(CfnUsagePlan_ApiStagePropertyValidator))(properties.apiStages));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('quota', CfnUsagePlan_QuotaSettingsPropertyValidator)(properties.quota));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('throttle', CfnUsagePlan_ThrottleSettingsPropertyValidator)(properties.throttle));\n    errors.collect(cdk.propertyValidator('usagePlanName', cdk.validateString)(properties.usagePlanName));\n    return errors.wrap('supplied properties not correct for \"CfnUsagePlanProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan` resource\n *\n * @param properties - the TypeScript properties of a `CfnUsagePlanProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUsagePlanPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUsagePlanPropsValidator(properties).assertSuccess();\n    return {\n        ApiStages: cdk.listMapper(cfnUsagePlanApiStagePropertyToCloudFormation)(properties.apiStages),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Quota: cfnUsagePlanQuotaSettingsPropertyToCloudFormation(properties.quota),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Throttle: cfnUsagePlanThrottleSettingsPropertyToCloudFormation(properties.throttle),\n        UsagePlanName: cdk.stringToCloudFormation(properties.usagePlanName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUsagePlanPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUsagePlanProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUsagePlanProps>();\n    ret.addPropertyResult('apiStages', 'ApiStages', properties.ApiStages != null ? cfn_parse.FromCloudFormation.getArray(CfnUsagePlanApiStagePropertyFromCloudFormation)(properties.ApiStages) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('quota', 'Quota', properties.Quota != null ? CfnUsagePlanQuotaSettingsPropertyFromCloudFormation(properties.Quota) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('throttle', 'Throttle', properties.Throttle != null ? CfnUsagePlanThrottleSettingsPropertyFromCloudFormation(properties.Throttle) : undefined);\n    ret.addPropertyResult('usagePlanName', 'UsagePlanName', properties.UsagePlanName != null ? cfn_parse.FromCloudFormation.getString(properties.UsagePlanName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnUsagePlan extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::UsagePlan\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUsagePlan {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUsagePlanPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUsagePlan(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                    \n    public apiStages: Array<CfnUsagePlan.ApiStageProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                     \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                             \n    public quota: CfnUsagePlan.QuotaSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                       \n    public throttle: CfnUsagePlan.ThrottleSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                 \n    public usagePlanName: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnUsagePlanProps = {}) {\n        super(scope, id, { type: CfnUsagePlan.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.apiStages = props.apiStages;\n        this.description = props.description;\n        this.quota = props.quota;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::UsagePlan\", props.tags, { tagPropertyName: 'tags' });\n        this.throttle = props.throttle;\n        this.usagePlanName = props.usagePlanName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUsagePlan.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiStages: this.apiStages,\n            description: this.description,\n            quota: this.quota,\n            tags: this.tags.renderTags(),\n            throttle: this.throttle,\n            usagePlanName: this.usagePlanName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUsagePlanPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUsagePlan {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface ApiStageProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly apiId?: string;\n                                                                                                                                                                                                                                                                              \n        readonly stage?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly throttle?: { [key: string]: (CfnUsagePlan.ThrottleSettingsProperty | cdk.IResolvable) } | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApiStageProperty`\n *\n * @param properties - the TypeScript properties of a `ApiStageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUsagePlan_ApiStagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('stage', cdk.validateString)(properties.stage));\n    errors.collect(cdk.propertyValidator('throttle', cdk.hashValidator(CfnUsagePlan_ThrottleSettingsPropertyValidator))(properties.throttle));\n    return errors.wrap('supplied properties not correct for \"ApiStageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan.ApiStage` resource\n *\n * @param properties - the TypeScript properties of a `ApiStageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan.ApiStage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUsagePlanApiStagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUsagePlan_ApiStagePropertyValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        Stage: cdk.stringToCloudFormation(properties.stage),\n        Throttle: cdk.hashMapper(cfnUsagePlanThrottleSettingsPropertyToCloudFormation)(properties.throttle),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUsagePlanApiStagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUsagePlan.ApiStageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUsagePlan.ApiStageProperty>();\n    ret.addPropertyResult('apiId', 'ApiId', properties.ApiId != null ? cfn_parse.FromCloudFormation.getString(properties.ApiId) : undefined);\n    ret.addPropertyResult('stage', 'Stage', properties.Stage != null ? cfn_parse.FromCloudFormation.getString(properties.Stage) : undefined);\n    ret.addPropertyResult('throttle', 'Throttle', properties.Throttle != null ? cfn_parse.FromCloudFormation.getMap(CfnUsagePlanThrottleSettingsPropertyFromCloudFormation)(properties.Throttle) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUsagePlan {\nn    export interface QuotaSettingsProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly limit?: number;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly offset?: number;\nn        readonly period?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QuotaSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `QuotaSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUsagePlan_QuotaSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('limit', cdk.validateNumber)(properties.limit));\n    errors.collect(cdk.propertyValidator('offset', cdk.validateNumber)(properties.offset));\n    errors.collect(cdk.propertyValidator('period', cdk.validateString)(properties.period));\n    return errors.wrap('supplied properties not correct for \"QuotaSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan.QuotaSettings` resource\n *\n * @param properties - the TypeScript properties of a `QuotaSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan.QuotaSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUsagePlanQuotaSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUsagePlan_QuotaSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Limit: cdk.numberToCloudFormation(properties.limit),\n        Offset: cdk.numberToCloudFormation(properties.offset),\n        Period: cdk.stringToCloudFormation(properties.period),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUsagePlanQuotaSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUsagePlan.QuotaSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUsagePlan.QuotaSettingsProperty>();\n    ret.addPropertyResult('limit', 'Limit', properties.Limit != null ? cfn_parse.FromCloudFormation.getNumber(properties.Limit) : undefined);\n    ret.addPropertyResult('offset', 'Offset', properties.Offset != null ? cfn_parse.FromCloudFormation.getNumber(properties.Offset) : undefined);\n    ret.addPropertyResult('period', 'Period', properties.Period != null ? cfn_parse.FromCloudFormation.getString(properties.Period) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUsagePlan {\nn    export interface ThrottleSettingsProperty {\nn        readonly burstLimit?: number;\nn        readonly rateLimit?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ThrottleSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ThrottleSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUsagePlan_ThrottleSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('burstLimit', cdk.validateNumber)(properties.burstLimit));\n    errors.collect(cdk.propertyValidator('rateLimit', cdk.validateNumber)(properties.rateLimit));\n    return errors.wrap('supplied properties not correct for \"ThrottleSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan.ThrottleSettings` resource\n *\n * @param properties - the TypeScript properties of a `ThrottleSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlan.ThrottleSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUsagePlanThrottleSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUsagePlan_ThrottleSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        BurstLimit: cdk.numberToCloudFormation(properties.burstLimit),\n        RateLimit: cdk.numberToCloudFormation(properties.rateLimit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUsagePlanThrottleSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUsagePlan.ThrottleSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUsagePlan.ThrottleSettingsProperty>();\n    ret.addPropertyResult('burstLimit', 'BurstLimit', properties.BurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.BurstLimit) : undefined);\n    ret.addPropertyResult('rateLimit', 'RateLimit', properties.RateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.RateLimit) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                               \nexport interface CfnUsagePlanKeyProps {\n\n                                                                                                                                                                                                                  \n    readonly keyId: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly keyType: string;\n\n                                                                                                                                                                                                                    \n    readonly usagePlanId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUsagePlanKeyProps`\n *\n * @param properties - the TypeScript properties of a `CfnUsagePlanKeyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUsagePlanKeyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('keyId', cdk.requiredValidator)(properties.keyId));\n    errors.collect(cdk.propertyValidator('keyId', cdk.validateString)(properties.keyId));\n    errors.collect(cdk.propertyValidator('keyType', cdk.requiredValidator)(properties.keyType));\n    errors.collect(cdk.propertyValidator('keyType', cdk.validateString)(properties.keyType));\n    errors.collect(cdk.propertyValidator('usagePlanId', cdk.requiredValidator)(properties.usagePlanId));\n    errors.collect(cdk.propertyValidator('usagePlanId', cdk.validateString)(properties.usagePlanId));\n    return errors.wrap('supplied properties not correct for \"CfnUsagePlanKeyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlanKey` resource\n *\n * @param properties - the TypeScript properties of a `CfnUsagePlanKeyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::UsagePlanKey` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUsagePlanKeyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUsagePlanKeyPropsValidator(properties).assertSuccess();\n    return {\n        KeyId: cdk.stringToCloudFormation(properties.keyId),\n        KeyType: cdk.stringToCloudFormation(properties.keyType),\n        UsagePlanId: cdk.stringToCloudFormation(properties.usagePlanId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUsagePlanKeyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUsagePlanKeyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUsagePlanKeyProps>();\n    ret.addPropertyResult('keyId', 'KeyId', cfn_parse.FromCloudFormation.getString(properties.KeyId));\n    ret.addPropertyResult('keyType', 'KeyType', cfn_parse.FromCloudFormation.getString(properties.KeyType));\n    ret.addPropertyResult('usagePlanId', 'UsagePlanId', cfn_parse.FromCloudFormation.getString(properties.UsagePlanId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \nexport class CfnUsagePlanKey extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::UsagePlanKey\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUsagePlanKey {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUsagePlanKeyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUsagePlanKey(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                  \n    public keyId: string;\n\n                                                                                                                                                                                                                                                                    \n    public keyType: string;\n\n                                                                                                                                                                                                                    \n    public usagePlanId: string;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnUsagePlanKeyProps) {\n        super(scope, id, { type: CfnUsagePlanKey.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'keyId', this);\n        cdk.requireProperty(props, 'keyType', this);\n        cdk.requireProperty(props, 'usagePlanId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.keyId = props.keyId;\n        this.keyType = props.keyType;\n        this.usagePlanId = props.usagePlanId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUsagePlanKey.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            keyId: this.keyId,\n            keyType: this.keyType,\n            usagePlanId: this.usagePlanId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUsagePlanKeyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                     \nexport interface CfnVpcLinkProps {\n\n                                                                                                                                                                                                  \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly targetArns: string[];\n\n                                                                                                                                                                                                               \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVpcLinkProps`\n *\n * @param properties - the TypeScript properties of a `CfnVpcLinkProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVpcLinkPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('targetArns', cdk.requiredValidator)(properties.targetArns));\n    errors.collect(cdk.propertyValidator('targetArns', cdk.listValidator(cdk.validateString))(properties.targetArns));\n    return errors.wrap('supplied properties not correct for \"CfnVpcLinkProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGateway::VpcLink` resource\n *\n * @param properties - the TypeScript properties of a `CfnVpcLinkProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGateway::VpcLink` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVpcLinkPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVpcLinkPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        TargetArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.targetArns),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVpcLinkPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVpcLinkProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVpcLinkProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('targetArns', 'TargetArns', cfn_parse.FromCloudFormation.getStringArray(properties.TargetArns));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVpcLink extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGateway::VpcLink\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVpcLink {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVpcLinkPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVpcLink(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                  \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public targetArns: string[];\n\n                                                                                                                                                                                                               \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnVpcLinkProps) {\n        super(scope, id, { type: CfnVpcLink.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'targetArns', this);\n\n        this.name = props.name;\n        this.targetArns = props.targetArns;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApiGateway::VpcLink\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVpcLink.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            targetArns: this.targetArns,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVpcLinkPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
