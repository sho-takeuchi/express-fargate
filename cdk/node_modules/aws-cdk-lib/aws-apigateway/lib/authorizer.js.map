{
  "version": 3,
  "sources": ["authorizer.ts"],
  "sourcesContent": ["import { Resource, ResourceProps } from '../../core';\nimport { Construct } from 'constructs';\nimport { AuthorizationType } from './method';\nimport { IRestApi } from './restapi';\n\nconst AUTHORIZER_SYMBOL = Symbol.for('@aws-cdk/aws-apigateway.Authorizer');\n\n                                                \nexport abstract class Authorizer extends Resource implements IAuthorizer {\n                                                                  \n  public static isAuthorizer(x: any): x is Authorizer {\n    return x !== null && typeof(x) === 'object' && AUTHORIZER_SYMBOL in x;\n  }\n\n  public readonly abstract authorizerId: string;\n  public readonly authorizationType?: AuthorizationType = AuthorizationType.CUSTOM;\n\n  public constructor(scope: Construct, id: string, props?: ResourceProps) {\n    super(scope, id, props);\n\n    Object.defineProperty(this, AUTHORIZER_SYMBOL, { value: true });\n  }\n\n  /**\n   * Called when the authorizer is used from a specific REST API.\n   * @internal\n   */\n  public abstract _attachToApi(restApi: IRestApi): void;\n}\n\n                                                \nexport interface IAuthorizer {\n                                                   \n  readonly authorizerId: string;\n\n                                                           \n  readonly authorizationType?: AuthorizationType;\n}\n"],
  "mappings": "iNAAA,OAAA,QAAA,cAEA,SAAA,QAAA,YAGM,kBAAoB,OAAO,IAAI,sCAGrC,wBAAyC,QAAA,QAAQ,CAS/C,YAAmB,MAAkB,GAAY,MAAqB,CACpE,MAAM,MAAO,GAAI,OAHH,KAAA,kBAAwC,SAAA,kBAAkB,gEAKxE,OAAO,eAAe,KAAM,kBAAmB,CAAE,MAAO,WAV5C,cAAa,EAAM,CAC/B,MAAO,KAAM,MAAQ,MAAO,IAAO,UAAY,oBAAqB,IAHxE,QAAA,WAAA",
  "names": []
}
