{
  "version": 3,
  "sources": ["domain-name.ts"],
  "sourcesContent": ["import * as acm from '../../aws-certificatemanager';\nimport { IBucket } from '../../aws-s3';\nimport { IResource, Names, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDomainName } from './apigateway.generated';\nimport { BasePathMapping, BasePathMappingOptions } from './base-path-mapping';\nimport { EndpointType, IRestApi } from './restapi';\n\n                                                                                                          \nexport enum SecurityPolicy {\n                             \n  TLS_1_0 = 'TLS_1_0',\n\n                             \n  TLS_1_2 = 'TLS_1_2',\n}\n\nexport interface DomainNameOptions {\n                                                                                          \n  readonly domainName: string;\n\n                                                                                                                                                                                                                            \n  readonly certificate: acm.ICertificate;\n\n                                                                                 \n  readonly endpointType?: EndpointType;\n\n                                                                                                                                                                                                                                                      \n  readonly securityPolicy?: SecurityPolicy;\n\n                                                                                                                              \n  readonly mtls?: MTLSConfig;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n  readonly basePath?: string;\n}\n\nexport interface DomainNameProps extends DomainNameOptions {\n                                                                                                                                                                                                                                                                                                                                                                               \n  readonly mapping?: IRestApi;\n}\n\nexport interface IDomainName extends IResource {\n                                                                                     \n  readonly domainName: string;\n\n                                                                                                                                                                                 \n  readonly domainNameAliasDomainName: string;\n\n                                                                                                                                                                                       \n  readonly domainNameAliasHostedZoneId: string;\n}\n\nexport class DomainName extends Resource implements IDomainName {\n\n                                                 \n  public static fromDomainNameAttributes(scope: Construct, id: string, attrs: DomainNameAttributes): IDomainName {\n    class Import extends Resource implements IDomainName {\n      public readonly domainName = attrs.domainName;\n      public readonly domainNameAliasDomainName = attrs.domainNameAliasTarget;\n      public readonly domainNameAliasHostedZoneId = attrs.domainNameAliasHostedZoneId;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly domainName: string;\n  public readonly domainNameAliasDomainName: string;\n  public readonly domainNameAliasHostedZoneId: string;\n  private readonly basePaths = new Set<string | undefined>();\n\n  constructor(scope: Construct, id: string, props: DomainNameProps) {\n    super(scope, id);\n\n    const endpointType = props.endpointType || EndpointType.REGIONAL;\n    const edge = endpointType === EndpointType.EDGE;\n\n    if (!Token.isUnresolved(props.domainName) && /[A-Z]/.test(props.domainName)) {\n      throw new Error(`Domain name does not support uppercase letters. Got: ${props.domainName}`);\n    }\n\n    const mtlsConfig = this.configureMTLS(props.mtls);\n    const resource = new CfnDomainName(this, 'Resource', {\n      domainName: props.domainName,\n      certificateArn: edge ? props.certificate.certificateArn : undefined,\n      regionalCertificateArn: edge ? undefined : props.certificate.certificateArn,\n      endpointConfiguration: { types: [endpointType] },\n      mutualTlsAuthentication: mtlsConfig,\n      securityPolicy: props.securityPolicy,\n    });\n\n    this.domainName = resource.ref;\n\n    this.domainNameAliasDomainName = edge\n      ? resource.attrDistributionDomainName\n      : resource.attrRegionalDomainName;\n\n    this.domainNameAliasHostedZoneId = edge\n      ? resource.attrDistributionHostedZoneId\n      : resource.attrRegionalHostedZoneId;\n\n    if (props.mapping) {\n      this.addBasePathMapping(props.mapping, {\n        basePath: props.basePath,\n      });\n    }\n  }\n\n                                                                                                                                                                                                                                   \n  public addBasePathMapping(targetApi: IRestApi, options: BasePathMappingOptions = { }) {\n    if (this.basePaths.has(undefined)) {\n      throw new Error('This domain name already has an empty base path. No additional base paths are allowed.');\n    }\n    this.basePaths.add(options.basePath);\n    const basePath = options.basePath || '/';\n    const id = `Map:${basePath}=>${Names.nodeUniqueId(targetApi.node)}`;\n    return new BasePathMapping(this, id, {\n      domainName: this,\n      restApi: targetApi,\n      ...options,\n    });\n  }\n\n  private configureMTLS(mtlsConfig?: MTLSConfig): CfnDomainName.MutualTlsAuthenticationProperty | undefined {\n    if (!mtlsConfig) return undefined;\n    return {\n      truststoreUri: mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),\n      truststoreVersion: mtlsConfig.version,\n    };\n  }\n}\n\nexport interface DomainNameAttributes {\n                                                     \n  readonly domainName: string;\n\n                                                                                                                  \n  readonly domainNameAliasTarget: string;\n\n                                                                                                                    \n  readonly domainNameAliasHostedZoneId: string;\n}\n\n                                                                          \nexport interface MTLSConfig {\n                                                              \n  readonly bucket: IBucket;\n\n                                                              \n  readonly key: string;\n\n                                                                                                                                                                                             \n  readonly version?: string;\n}\n"],
  "mappings": "wOAEA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BACA,oBAAA,QAAA,uBACA,UAAA,QAAA,aAGA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,QAAA,UAGA,gBAAA,QAAA,YALU,eAAA,QAAA,gBAAA,SAAA,eAAc,KA4C1B,wBAAgC,QAAA,QAAQ,CAkBtC,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,IAHE,KAAA,UAAY,GAAI,+EAK/B,KAAM,cAAe,MAAM,cAAgB,UAAA,aAAa,SAClD,KAAO,eAAiB,UAAA,aAAa,KAE3C,GAAI,CAAC,OAAA,MAAM,aAAa,MAAM,aAAe,QAAQ,KAAK,MAAM,YAC9D,KAAM,IAAI,OAAM,wDAAwD,MAAM,cAGhF,KAAM,YAAa,KAAK,cAAc,MAAM,MACtC,SAAW,GAAI,wBAAA,cAAc,KAAM,WAAY,CACnD,WAAY,MAAM,WAClB,eAAgB,KAAO,MAAM,YAAY,eAAiB,OAC1D,uBAAwB,KAAO,OAAY,MAAM,YAAY,eAC7D,sBAAuB,CAAE,MAAO,CAAC,eACjC,wBAAyB,WACzB,eAAgB,MAAM,iBAGxB,KAAK,WAAa,SAAS,IAE3B,KAAK,0BAA4B,KAC7B,SAAS,2BACT,SAAS,uBAEb,KAAK,4BAA8B,KAC/B,SAAS,6BACT,SAAS,yBAET,MAAM,SACR,KAAK,mBAAmB,MAAM,QAAS,CACrC,SAAU,MAAM,iBA/CR,0BAAyB,MAAkB,GAAY,MAA2B,gFAC9F,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,WAAa,MAAM,WACnB,KAAA,0BAA4B,MAAM,sBAClC,KAAA,4BAA8B,MAAM,6BAGtD,MAAO,IAAI,QAAO,MAAO,IA8CpB,mBAAmB,UAAqB,QAAkC,GAAG,CAClF,6JAAI,KAAK,UAAU,IAAI,QACrB,KAAM,IAAI,OAAM,0FAElB,KAAK,UAAU,IAAI,QAAQ,UAE3B,KAAM,IAAK,OADM,QAAQ,UAAY,QACN,OAAA,MAAM,aAAa,UAAU,QAC5D,MAAO,IAAI,qBAAA,gBAAgB,KAAM,GAAI,CACnC,WAAY,KACZ,QAAS,aACN,UAIC,cAAc,WAAuB,CAC3C,GAAI,EAAC,WACL,MAAO,CACL,cAAe,WAAW,OAAO,eAAe,WAAW,KAC3D,kBAAmB,WAAW,UA1EpC,QAAA,WAAA",
  "names": []
}
