{
  "version": 3,
  "sources": ["gateway-response.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnGatewayResponse, CfnGatewayResponseProps } from './apigateway.generated';\nimport { IRestApi } from './restapi';\n\n                                                \nexport interface IGatewayResponse extends IResource {\n}\n\n                                                 \nexport interface GatewayResponseProps extends GatewayResponseOptions {\n                                             \n  readonly restApi: IRestApi;\n}\n\n                                           \nexport interface GatewayResponseOptions {\n                                                                                                                                                                               \n  readonly type: ResponseType;\n\n                                                                                                                \n  readonly statusCode?: string;\n\n                                                                                   \n  readonly responseHeaders?: { [key: string]: string };\n\n                                                                                                                                                    \n  readonly templates?: { [key: string]: string };\n\n}\n\n                                                                                                                                              \nexport class GatewayResponse extends Resource implements IGatewayResponse {\n  constructor(scope: Construct, id: string, props: GatewayResponseProps) {\n    super(scope, id);\n\n    const gatewayResponseProps: CfnGatewayResponseProps = {\n      restApiId: props.restApi.restApiId,\n      responseType: props.type.responseType,\n      responseParameters: this.buildResponseParameters(props.responseHeaders),\n      responseTemplates: props.templates,\n      statusCode: props.statusCode,\n    };\n\n    const resource = new CfnGatewayResponse(this, 'Resource', gatewayResponseProps);\n\n    const deployment = props.restApi.latestDeployment;\n    if (deployment) {\n      deployment.node.addDependency(resource);\n      deployment.addToLogicalId({\n        gatewayResponse: {\n          ...gatewayResponseProps,\n        },\n      });\n    }\n\n    this.node.defaultChild = resource;\n  }\n\n  private buildResponseParameters(responseHeaders?: { [key: string]: string }): { [key: string]: string } | undefined {\n    if (!responseHeaders) {\n      return undefined;\n    }\n\n    const responseParameters: { [key: string]: string } = {};\n    for (const [header, value] of Object.entries(responseHeaders)) {\n      responseParameters[`gatewayresponse.header.${header}`] = value;\n    }\n    return responseParameters;\n  }\n}\n\n                                                                                                                                                           \nexport class ResponseType {\n                                                                \n  public static readonly ACCESS_DENIED = new ResponseType('ACCESS_DENIED');\n\n                                                                       \n  public static readonly API_CONFIGURATION_ERROR = new ResponseType('API_CONFIGURATION_ERROR');\n\n                                                                                                                   \n  public static readonly AUTHORIZER_FAILURE = new ResponseType('AUTHORIZER_FAILURE');\n\n                                                                                                      \n  public static readonly AUTHORIZER_CONFIGURATION_ERROR = new ResponseType('AUTHORIZER_CONFIGURATION_ERROR');\n\n                                                                                                                               \n  public static readonly BAD_REQUEST_PARAMETERS = new ResponseType('BAD_REQUEST_PARAMETERS');\n\n                                                                                                                          \n  public static readonly BAD_REQUEST_BODY = new ResponseType('BAD_REQUEST_BODY');\n\n                                                                                                           \n  public static readonly DEFAULT_4XX = new ResponseType('DEFAULT_4XX');\n\n                                                                                                         \n  public static readonly DEFAULT_5XX = new ResponseType('DEFAULT_5XX');\n\n                                                                                    \n  public static readonly EXPIRED_TOKEN = new ResponseType('EXPIRED_TOKEN');\n\n                                                                         \n  public static readonly INVALID_SIGNATURE = new ResponseType('INVALID_SIGNATURE');\n\n                                                                      \n  public static readonly INTEGRATION_FAILURE = new ResponseType('INTEGRATION_FAILURE');\n\n                                                                         \n  public static readonly INTEGRATION_TIMEOUT = new ResponseType('INTEGRATION_TIMEOUT');\n\n                                                                                                         \n  public static readonly INVALID_API_KEY = new ResponseType('INVALID_API_KEY');\n\n                                                                                                                                                                                  \n  public static readonly MISSING_AUTHENTICATION_TOKEN = new ResponseType('MISSING_AUTHENTICATION_TOKEN');\n\n                                                                              \n  public static readonly QUOTA_EXCEEDED = new ResponseType('QUOTA_EXCEEDED');\n\n                                                                      \n  public static readonly REQUEST_TOO_LARGE = new ResponseType('REQUEST_TOO_LARGE');\n\n                                                                                                                                                            \n  public static readonly RESOURCE_NOT_FOUND = new ResponseType('RESOURCE_NOT_FOUND');\n\n                                                                                                                  \n  public static readonly THROTTLED = new ResponseType('THROTTLED');\n\n                                                                                                                     \n  public static readonly UNAUTHORIZED = new ResponseType('UNAUTHORIZED');\n\n                                                                                                                                \n  public static readonly UNSUPPORTED_MEDIA_TYPE = new ResponseType('UNSUPPORTED_MEDIA_TYPE');\n\n                                                                           \n  public static readonly WAF_FILTERED = new ResponseType('WAF_FILTERED');\n\n                                                        \n  public static of(type: string): ResponseType {\n    return new ResponseType(type.toUpperCase());\n  }\n\n                                              \n  public readonly responseType: string;\n\n  private constructor(type: string) {\n    this.responseType = type;\n  }\n\n}\n"],
  "mappings": "8OAAA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BA8BA,6BAAqC,QAAA,QAAQ,CAC3C,YAAY,MAAkB,GAAY,MAA2B,CACnE,MAAM,MAAO,mFAEb,KAAM,sBAAgD,CACpD,UAAW,MAAM,QAAQ,UACzB,aAAc,MAAM,KAAK,aACzB,mBAAoB,KAAK,wBAAwB,MAAM,iBACvD,kBAAmB,MAAM,UACzB,WAAY,MAAM,YAGd,SAAW,GAAI,wBAAA,mBAAmB,KAAM,WAAY,sBAEpD,WAAa,MAAM,QAAQ,iBACjC,AAAI,YACF,YAAW,KAAK,cAAc,UAC9B,WAAW,eAAe,CACxB,gBAAiB,IACZ,yBAKT,KAAK,KAAK,aAAe,SAGnB,wBAAwB,gBAA2C,CACzE,GAAI,CAAC,gBACH,OAGF,KAAM,oBAAgD,GACtD,SAAW,CAAC,OAAQ,QAAU,QAAO,QAAQ,iBAC3C,mBAAmB,0BAA0B,UAAY,MAE3D,MAAO,qBApCX,QAAA,gBAAA,8HAyCA,kBAAyB,CAwEvB,YAAoB,KAAY,CAC9B,KAAK,aAAe,WARR,IAAG,KAAY,CAC3B,MAAO,IAAI,cAAa,KAAK,gBAlEjC,QAAA,aAAA,qHAEyB,aAAA,cAAgB,GAAI,cAAa,iBAGjC,aAAA,wBAA0B,GAAI,cAAa,2BAG3C,aAAA,mBAAqB,GAAI,cAAa,sBAGtC,aAAA,+BAAiC,GAAI,cAAa,kCAGlD,aAAA,uBAAyB,GAAI,cAAa,0BAG1C,aAAA,iBAAmB,GAAI,cAAa,oBAGpC,aAAA,YAAc,GAAI,cAAa,eAG/B,aAAA,YAAc,GAAI,cAAa,eAG/B,aAAA,cAAgB,GAAI,cAAa,iBAGjC,aAAA,kBAAoB,GAAI,cAAa,qBAGrC,aAAA,oBAAsB,GAAI,cAAa,uBAGvC,aAAA,oBAAsB,GAAI,cAAa,uBAGvC,aAAA,gBAAkB,GAAI,cAAa,mBAGnC,aAAA,6BAA+B,GAAI,cAAa,gCAGhD,aAAA,eAAiB,GAAI,cAAa,kBAGlC,aAAA,kBAAoB,GAAI,cAAa,qBAGrC,aAAA,mBAAqB,GAAI,cAAa,sBAGtC,aAAA,UAAY,GAAI,cAAa,aAG7B,aAAA,aAAe,GAAI,cAAa,gBAGhC,aAAA,uBAAyB,GAAI,cAAa,0BAG1C,aAAA,aAAe,GAAI,cAAa",
  "names": []
}
