{
  "version": 3,
  "sources": ["integration.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { Lazy, Duration } from '../../core';\nimport { Method } from './method';\nimport { IVpcLink, VpcLink } from './vpc-link';\n\nexport interface IntegrationOptions {\n                                                                                                                                                        \n  readonly cacheKeyParameters?: string[];\n\n                                                                        \n  readonly cacheNamespace?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                         \n  readonly contentHandling?: ContentHandling;\n\n                                                                                                                                                           \n  readonly credentialsRole?: iam.IRole;\n\n                                                                                                                                                 \n  readonly credentialsPassthrough?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                      \n  readonly passthroughBehavior?: PassthroughBehavior\n\nn  readonly requestParameters?: { [dest: string]: string };\n\nn  readonly requestTemplates?: { [contentType: string]: string };\n\n                                                                                                                                                                                                      \n  readonly timeout?: Duration;\n\n                                                                                                                                                                                                                                                                                                                                         \n  readonly integrationResponses?: IntegrationResponse[];\n\n                                                                                                                                                                                            \n  readonly connectionType?: ConnectionType;\n\n                                                                                                  \n  readonly vpcLink?: IVpcLink;\n}\n\nexport interface IntegrationProps {\n                                                          \n  readonly type: IntegrationType;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly uri?: any;\n\n                                                                                                     \n  readonly integrationHttpMethod?: string;\n\n                                     \n  readonly options?: IntegrationOptions;\n}\n\n                                                        \nexport interface IntegrationConfig {\n                                                                            \n  readonly options?: IntegrationOptions;\n\n                                                          \n  readonly type: IntegrationType;\n\n                                                                                                                                                                                                                                \n  readonly uri?: string;\n\n                                                                                                     \n  readonly integrationHttpMethod?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly deploymentToken?: string;\n}\n\n                                                                                                                                                                                                                                            \nexport class Integration {\n  constructor(private readonly props: IntegrationProps) {\n    const options = this.props.options || { };\n    if (options.credentialsPassthrough !== undefined && options.credentialsRole !== undefined) {\n      throw new Error('\\'credentialsPassthrough\\' and \\'credentialsRole\\' are mutually exclusive');\n    }\n\n    if (options.connectionType === ConnectionType.VPC_LINK && options.vpcLink === undefined) {\n      throw new Error('\\'connectionType\\' of VPC_LINK requires \\'vpcLink\\' prop to be set');\n    }\n\n    if (options.connectionType === ConnectionType.INTERNET && options.vpcLink !== undefined) {\n      throw new Error('cannot set \\'vpcLink\\' where \\'connectionType\\' is INTERNET');\n    }\n\n    if (options.timeout && !options.timeout.isUnresolved() && (options.timeout.toMilliseconds() < 50 || options.timeout.toMilliseconds() > 29000)) {\n      throw new Error('Integration timeout must be between 50 milliseconds and 29 seconds.');\n    }\n  }\n\n                                                                                                                                                                          \n  public bind(_method: Method): IntegrationConfig {\n    let uri = this.props.uri;\n    const options = this.props.options;\n\n    if (options?.connectionType === ConnectionType.VPC_LINK && uri === undefined) {\n      uri = Lazy.string({\n        // needs to be a lazy since the targets can be added to the VpcLink construct after initialization.\n        produce: () => {\n          const vpcLink = options.vpcLink;\n          if (vpcLink instanceof VpcLink) {\n            const targets = vpcLink._targetDnsNames;\n            if (targets.length > 1) {\n              throw new Error(\"'uri' is required when there are more than one NLBs in the VPC Link\");\n            } else {\n              return `http://${targets[0]}`;\n            }\n          } else {\n            throw new Error(\"'uri' is required when the 'connectionType' is VPC_LINK\");\n          }\n        },\n      });\n    }\n    return {\n      options: {\n        ...options,\n        connectionType: options?.vpcLink ? ConnectionType.VPC_LINK : options?.connectionType,\n      },\n      type: this.props.type,\n      uri,\n      integrationHttpMethod: this.props.integrationHttpMethod,\n    };\n  }\n}\n\nexport enum ContentHandling {\n                                                                                          \n  CONVERT_TO_BINARY = 'CONVERT_TO_BINARY',\n\n                                                                                          \n  CONVERT_TO_TEXT = 'CONVERT_TO_TEXT'\n}\n\nexport enum IntegrationType {\n                                                                                                                                                                                                                                                                                                                           \n  AWS = 'AWS',\n\n                                                                                                                                                                                                                             \n  AWS_PROXY = 'AWS_PROXY',\n\n                                                                                                                                                                                                             \n  HTTP = 'HTTP',\n\n                                                                                                                                                                                                                                             \n  HTTP_PROXY = 'HTTP_PROXY',\n\n                                                                                                                                     \n  MOCK = 'MOCK'\n}\n\nexport enum PassthroughBehavior {\n                                                                                                                                    \n  WHEN_NO_MATCH = 'WHEN_NO_MATCH',\n\n                                                                                                       \n  NEVER = 'NEVER',\n\n                                                                                                                                                                                                                                        \n  WHEN_NO_TEMPLATES = 'WHEN_NO_TEMPLATES'\n}\n\nexport enum ConnectionType {\n                                                                     \n  INTERNET = 'INTERNET',\n\n                                                                                                 \n  VPC_LINK = 'VPC_LINK'\n}\n\nexport interface IntegrationResponse {\nn  readonly selectionPattern?: string;\n\n                                                                                                                            \n  readonly statusCode: string;\n\n                                                                                                                                                                                                                              \n  readonly contentHandling?: ContentHandling;\n\nn  readonly responseParameters?: { [destination: string]: string };\n\n                                                                                                                                                                                                                                                                                                                           \n  readonly responseTemplates?: { [contentType: string]: string };\n}\n"],
  "mappings": "qTACA,OAAA,QAAA,cAEA,WAAA,QAAA,cAyEA,iBAAwB,CACtB,YAA6B,MAAuB,CAAvB,KAAA,MAAA,iFAC3B,KAAM,SAAU,KAAK,MAAM,SAAW,GACtC,GAAI,QAAQ,yBAA2B,QAAa,QAAQ,kBAAoB,OAC9E,KAAM,IAAI,OAAM,yEAGlB,GAAI,QAAQ,iBAAmB,eAAe,UAAY,QAAQ,UAAY,OAC5E,KAAM,IAAI,OAAM,kEAGlB,GAAI,QAAQ,iBAAmB,eAAe,UAAY,QAAQ,UAAY,OAC5E,KAAM,IAAI,OAAM,2DAGlB,GAAI,QAAQ,SAAW,CAAC,QAAQ,QAAQ,gBAAmB,SAAQ,QAAQ,iBAAmB,IAAM,QAAQ,QAAQ,iBAAmB,MACrI,KAAM,IAAI,OAAM,uEAKb,KAAK,QAAe,oEACzB,GAAI,KAAM,KAAK,MAAM,IACrB,KAAM,SAAU,KAAK,MAAM,QAE3B,MAAI,UAAO,KAAA,OAAP,QAAS,kBAAmB,eAAe,UAAY,MAAQ,QACjE,KAAM,OAAA,KAAK,OAAO,CAEhB,QAAS,IAAK,CACZ,KAAM,SAAU,QAAQ,QACxB,GAAI,kBAAmB,YAAA,QAAS,CAC9B,KAAM,SAAU,QAAQ,gBACxB,GAAI,QAAQ,OAAS,EACnB,KAAM,IAAI,OAAM,uEAEhB,MAAO,UAAU,QAAQ,SAG3B,MAAM,IAAI,OAAM,+DAKjB,CACL,QAAS,IACJ,QACH,eAAgB,UAAO,KAAA,OAAP,QAAS,SAAU,eAAe,SAAW,SAAO,KAAA,OAAP,QAAS,gBAExE,KAAM,KAAK,MAAM,KACjB,IACA,sBAAuB,KAAK,MAAM,wBAlDxC,QAAA,YAAA,kHAuDA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAEzB,iBAAA,kBAAA,oBAGA,iBAAA,gBAAA,oBALU,gBAAA,QAAA,iBAAA,SAAA,gBAAe,KAQ3B,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAEzB,iBAAA,IAAA,MAGA,iBAAA,UAAA,YAGA,iBAAA,KAAA,OAGA,iBAAA,WAAA,aAGA,iBAAA,KAAA,SAdU,gBAAA,QAAA,iBAAA,SAAA,gBAAe,KAiB3B,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAE7B,qBAAA,cAAA,gBAGA,qBAAA,MAAA,QAGA,qBAAA,kBAAA,sBARU,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,KAW/B,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,SAAA,WAGA,gBAAA,SAAA,aALU,eAAA,QAAA,gBAAA,SAAA,eAAc",
  "names": []
}
