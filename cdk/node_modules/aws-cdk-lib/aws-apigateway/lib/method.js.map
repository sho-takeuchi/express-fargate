{
  "version": 3,
  "sources": ["method.ts"],
  "sourcesContent": ["import { ArnFormat, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnMethod, CfnMethodProps } from './apigateway.generated';\nimport { Authorizer, IAuthorizer } from './authorizer';\nimport { Integration, IntegrationConfig } from './integration';\nimport { MockIntegration } from './integrations/mock';\nimport { MethodResponse } from './methodresponse';\nimport { IModel } from './model';\nimport { IRequestValidator, RequestValidatorOptions } from './requestvalidator';\nimport { IResource } from './resource';\nimport { IRestApi, RestApi, RestApiBase } from './restapi';\nimport { validateHttpMethod } from './util';\n\nexport interface MethodOptions {\n                                                                                                                                                   \n  readonly operationName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly authorizationType?: AuthorizationType;\n\n                                                                                                                                                                                              \n  readonly authorizer?: IAuthorizer;\n\n                                                                                                             \n  readonly apiKeyRequired?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly methodResponses?: MethodResponse[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly requestParameters?: { [param: string]: boolean };\n\nn  readonly requestModels?: { [param: string]: IModel };\n\n                                                                                                                                                                                                                                                                                                                                               \n  readonly requestValidator?: IRequestValidator;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n  readonly authorizationScopes?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                     \n  readonly requestValidatorOptions?: RequestValidatorOptions;\n}\n\nexport interface MethodProps {\n                                                                                                                           \n  readonly resource: IResource;\n\n                                                                                                  \n  readonly httpMethod: string;\n\n                                                                                                                                   \n  readonly integration?: Integration;\n\n                                                                 \n  readonly options?: MethodOptions;\n}\n\nexport class Method extends Resource {\n                   \n  public readonly methodId: string;\n\n  public readonly httpMethod: string;\n  public readonly resource: IResource;\n                                                                     \n  public readonly api: IRestApi;\n\n  constructor(scope: Construct, id: string, props: MethodProps) {\n    super(scope, id);\n\n    this.resource = props.resource;\n    this.api = props.resource.api;\n    this.httpMethod = props.httpMethod.toUpperCase();\n\n    validateHttpMethod(this.httpMethod);\n\n    const options = props.options || {};\n\n    const defaultMethodOptions = props.resource.defaultMethodOptions || {};\n    const authorizer = options.authorizer || defaultMethodOptions.authorizer;\n    const authorizerId = authorizer?.authorizerId;\n\n    const authorizationTypeOption = options.authorizationType || defaultMethodOptions.authorizationType;\n    const authorizationType = authorizer?.authorizationType || authorizationTypeOption || AuthorizationType.NONE;\n\n    // if the authorizer defines an authorization type and we also have an explicit option set, check that they are the same\n    if (authorizer?.authorizationType && authorizationTypeOption && authorizer?.authorizationType !== authorizationTypeOption) {\n      throw new Error(`${this.resource}/${this.httpMethod} - Authorization type is set to ${authorizationTypeOption} ` +\n        `which is different from what is required by the authorizer [${authorizer.authorizationType}]`);\n    }\n\n    if (Authorizer.isAuthorizer(authorizer)) {\n      authorizer._attachToApi(this.api);\n    }\n\n    const integration = props.integration ?? this.resource.defaultIntegration ?? new MockIntegration();\n    const bindResult = integration.bind(this);\n\n    const methodProps: CfnMethodProps = {\n      resourceId: props.resource.resourceId,\n      restApiId: this.api.restApiId,\n      httpMethod: this.httpMethod,\n      operationName: options.operationName || defaultMethodOptions.operationName,\n      apiKeyRequired: options.apiKeyRequired || defaultMethodOptions.apiKeyRequired,\n      authorizationType,\n      authorizerId,\n      requestParameters: options.requestParameters || defaultMethodOptions.requestParameters,\n      integration: this.renderIntegration(bindResult),\n      methodResponses: this.renderMethodResponses(options.methodResponses),\n      requestModels: this.renderRequestModels(options.requestModels),\n      requestValidatorId: this.requestValidatorId(options),\n      authorizationScopes: options.authorizationScopes ?? defaultMethodOptions.authorizationScopes,\n    };\n\n    const resource = new CfnMethod(this, 'Resource', methodProps);\n\n    this.methodId = resource.ref;\n\n    if (RestApiBase._isRestApiBase(props.resource.api)) {\n      props.resource.api._attachMethod(this);\n    }\n\n    const deployment = props.resource.api.latestDeployment;\n    if (deployment) {\n      deployment.node.addDependency(resource);\n      deployment.addToLogicalId({\n        method: {\n          ...methodProps,\n          integrationToken: bindResult?.deploymentToken,\n        },\n      });\n    }\n  }\n\n                                                                                                                                                                                \n  public get restApi(): RestApi {\n    return this.resource.restApi;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n  public get methodArn(): string {\n    const stage = this.api.deploymentStage?.stageName;\n    return this.api.arnForExecuteApi(this.httpMethod, pathForArn(this.resource.path), stage);\n  }\n\n                                                                                                                                                               \n  public get testMethodArn(): string {\n    return this.api.arnForExecuteApi(this.httpMethod, pathForArn(this.resource.path), 'test-invoke-stage');\n  }\n\n  private renderIntegration(bindResult: IntegrationConfig): CfnMethod.IntegrationProperty {\n    const options = bindResult.options ?? {};\n    let credentials;\n    if (options.credentialsRole) {\n      credentials = options.credentialsRole.roleArn;\n    } else if (options.credentialsPassthrough) {\n      // arn:aws:iam::*:user/*\n      // eslint-disable-next-line max-len\n      credentials = Stack.of(this).formatArn({ service: 'iam', region: '', account: '*', resource: 'user', arnFormat: ArnFormat.SLASH_RESOURCE_NAME, resourceName: '*' });\n    }\n\n    return {\n      type: bindResult.type,\n      uri: bindResult.uri,\n      cacheKeyParameters: options.cacheKeyParameters,\n      cacheNamespace: options.cacheNamespace,\n      contentHandling: options.contentHandling,\n      integrationHttpMethod: bindResult.integrationHttpMethod,\n      requestParameters: options.requestParameters,\n      requestTemplates: options.requestTemplates,\n      passthroughBehavior: options.passthroughBehavior,\n      integrationResponses: options.integrationResponses,\n      connectionType: options.connectionType,\n      connectionId: options.vpcLink ? options.vpcLink.vpcLinkId : undefined,\n      credentials,\n      timeoutInMillis: options.timeout?.toMilliseconds(),\n    };\n  }\n\n  private renderMethodResponses(methodResponses: MethodResponse[] | undefined): CfnMethod.MethodResponseProperty[] | undefined {\n    if (!methodResponses) {\n      // Fall back to nothing\n      return undefined;\n    }\n\n    return methodResponses.map(mr => {\n      let responseModels: {[contentType: string]: string} | undefined;\n\n      if (mr.responseModels) {\n        responseModels = {};\n        for (const contentType in mr.responseModels) {\n          if (mr.responseModels.hasOwnProperty(contentType)) {\n            responseModels[contentType] = mr.responseModels[contentType].modelId;\n          }\n        }\n      }\n\n      const methodResponseProp = {\n        statusCode: mr.statusCode,\n        responseParameters: mr.responseParameters,\n        responseModels,\n      };\n\n      return methodResponseProp;\n    });\n  }\n\n  private renderRequestModels(requestModels: { [param: string]: IModel } | undefined): { [param: string]: string } | undefined {\n    if (!requestModels) {\n      // Fall back to nothing\n      return undefined;\n    }\n\n    const models: {[param: string]: string} = {};\n    for (const contentType in requestModels) {\n      if (requestModels.hasOwnProperty(contentType)) {\n        models[contentType] = requestModels[contentType].modelId;\n      }\n    }\n\n    return models;\n  }\n\n  private requestValidatorId(options: MethodOptions): string | undefined {\n    if (options.requestValidator && options.requestValidatorOptions) {\n      throw new Error('Only one of \\'requestValidator\\' or \\'requestValidatorOptions\\' must be specified.');\n    }\n\n    if (options.requestValidatorOptions) {\n      const validator = (this.api as RestApi).addRequestValidator('validator', options.requestValidatorOptions);\n      return validator.requestValidatorId;\n    }\n\n    // For backward compatibility\n    return options.requestValidator?.requestValidatorId;\n  }\n}\n\nexport enum AuthorizationType {\n                             \n  NONE = 'NONE',\n\n                                         \n  IAM = 'AWS_IAM',\n\n                                         \n  CUSTOM = 'CUSTOM',\n\n                                              \n  COGNITO = 'COGNITO_USER_POOLS',\n}\n\nfunction pathForArn(path: string): string {\n  return path.replace(/\\{[^\\}]*\\}/g, '*'); // replace path parameters (like '{bookId}') with asterisk\n}\n"],
  "mappings": "uOAAA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BACA,aAAA,QAAA,gBAEA,OAAA,QAAA,uBAKA,UAAA,QAAA,aACA,OAAA,QAAA,UAgDA,oBAA4B,QAAA,QAAQ,CASlC,YAAY,MAAkB,GAAY,MAAkB,cAC1D,MAAM,MAAO,0EAEb,KAAK,SAAW,MAAM,SACtB,KAAK,IAAM,MAAM,SAAS,IAC1B,KAAK,WAAa,MAAM,WAAW,cAEnC,OAAA,mBAAmB,KAAK,YAExB,KAAM,SAAU,MAAM,SAAW,GAE3B,qBAAuB,MAAM,SAAS,sBAAwB,GAC9D,WAAa,QAAQ,YAAc,qBAAqB,WACxD,aAAe,YAAU,KAAA,OAAV,WAAY,aAE3B,wBAA0B,QAAQ,mBAAqB,qBAAqB,kBAC5E,kBAAoB,aAAU,KAAA,OAAV,WAAY,oBAAqB,yBAA2B,kBAAkB,KAGxG,GAAI,aAAU,KAAA,OAAV,WAAY,oBAAqB,yBAA2B,aAAU,KAAA,OAAV,WAAY,qBAAsB,wBAChG,KAAM,IAAI,OAAM,GAAG,KAAK,YAAY,KAAK,6CAA6C,uFACrB,WAAW,sBAG9E,AAAI,aAAA,WAAW,aAAa,aAC1B,WAAW,aAAa,KAAK,KAI/B,KAAM,YAAa,AADF,KAAA,IAAG,MAAM,eAAW,MAAA,KAAA,OAAA,GAAI,KAAK,SAAS,sBAAkB,MAAA,KAAA,OAAA,GAAI,GAAI,QAAA,iBAClD,KAAK,MAE9B,YAA8B,CAClC,WAAY,MAAM,SAAS,WAC3B,UAAW,KAAK,IAAI,UACpB,WAAY,KAAK,WACjB,cAAe,QAAQ,eAAiB,qBAAqB,cAC7D,eAAgB,QAAQ,gBAAkB,qBAAqB,eAC/D,kBACA,aACA,kBAAmB,QAAQ,mBAAqB,qBAAqB,kBACrE,YAAa,KAAK,kBAAkB,YACpC,gBAAiB,KAAK,sBAAsB,QAAQ,iBACpD,cAAe,KAAK,oBAAoB,QAAQ,eAChD,mBAAoB,KAAK,mBAAmB,SAC5C,oBAAmB,IAAE,QAAQ,uBAAmB,MAAA,KAAA,OAAA,GAAI,qBAAqB,qBAGrE,SAAW,GAAI,wBAAA,UAAU,KAAM,WAAY,aAEjD,KAAK,SAAW,SAAS,IAErB,UAAA,YAAY,eAAe,MAAM,SAAS,MAC5C,MAAM,SAAS,IAAI,cAAc,MAGnC,KAAM,YAAa,MAAM,SAAS,IAAI,iBACtC,AAAI,YACF,YAAW,KAAK,cAAc,UAC9B,WAAW,eAAe,CACxB,OAAQ,IACH,YACH,iBAAkB,YAAU,KAAA,OAAV,WAAY,uBAO3B,UAAO,CAChB,MAAO,MAAK,SAAS,WAIZ,YAAS,QAClB,KAAM,OAAK,IAAG,KAAK,IAAI,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,UACxC,MAAO,MAAK,IAAI,iBAAiB,KAAK,WAAY,WAAW,KAAK,SAAS,MAAO,UAIzE,gBAAa,CACtB,MAAO,MAAK,IAAI,iBAAiB,KAAK,WAAY,WAAW,KAAK,SAAS,MAAO,qBAG5E,kBAAkB,WAA6B,WACrD,KAAM,SAAO,IAAG,WAAW,WAAO,MAAA,KAAA,OAAA,GAAI,GACtC,GAAI,aACJ,MAAI,SAAQ,gBACV,YAAc,QAAQ,gBAAgB,QAC7B,QAAQ,wBAGjB,aAAc,OAAA,MAAM,GAAG,MAAM,UAAU,CAAE,QAAS,MAAO,OAAQ,GAAI,QAAS,IAAK,SAAU,OAAQ,UAAW,OAAA,UAAU,oBAAqB,aAAc,OAGxJ,CACL,KAAM,WAAW,KACjB,IAAK,WAAW,IAChB,mBAAoB,QAAQ,mBAC5B,eAAgB,QAAQ,eACxB,gBAAiB,QAAQ,gBACzB,sBAAuB,WAAW,sBAClC,kBAAmB,QAAQ,kBAC3B,iBAAkB,QAAQ,iBAC1B,oBAAqB,QAAQ,oBAC7B,qBAAsB,QAAQ,qBAC9B,eAAgB,QAAQ,eACxB,aAAc,QAAQ,QAAU,QAAQ,QAAQ,UAAY,OAC5D,YACA,gBAAe,IAAE,QAAQ,WAAO,MAAA,KAAA,OAAA,OAAA,GAAE,kBAI9B,sBAAsB,gBAA6C,CACzE,GAAI,EAAC,gBAKL,MAAO,iBAAgB,IAAI,IAAK,CAC9B,GAAI,gBAEJ,GAAI,GAAG,eAAgB,CACrB,eAAiB,GACjB,SAAW,eAAe,IAAG,eAC3B,AAAI,GAAG,eAAe,eAAe,cACnC,gBAAe,aAAe,GAAG,eAAe,aAAa,SAWnE,MAN2B,CACzB,WAAY,GAAG,WACf,mBAAoB,GAAG,mBACvB,kBAOE,oBAAoB,cAAsD,CAChF,GAAI,CAAC,cAEH,OAGF,KAAM,QAAoC,GAC1C,SAAW,eAAe,eACxB,AAAI,cAAc,eAAe,cAC/B,QAAO,aAAe,cAAc,aAAa,SAIrD,MAAO,QAGD,mBAAmB,QAAsB,QAC/C,GAAI,QAAQ,kBAAoB,QAAQ,wBACtC,KAAM,IAAI,OAAM,kFAGlB,MAAI,SAAQ,wBAEH,AADY,KAAK,IAAgB,oBAAoB,YAAa,QAAQ,yBAChE,mBAInB,IAAO,QAAQ,oBAAgB,MAAA,KAAA,OAAA,OAAA,GAAE,oBAhLrC,QAAA,OAAA,mGAoLA,GAAY,mBAAZ,AAAA,UAAY,mBAAiB,CAE3B,mBAAA,KAAA,OAGA,mBAAA,IAAA,UAGA,mBAAA,OAAA,SAGA,mBAAA,QAAA,uBAXU,kBAAA,QAAA,mBAAA,SAAA,kBAAiB,KAc7B,oBAAoB,KAAY,CAC9B,MAAO,MAAK,QAAQ,cAAe",
  "names": []
}
