{
  "version": 3,
  "sources": ["usage-plan.ts"],
  "sourcesContent": ["import { FeatureFlags, IResource, Lazy, Names, Resource, Token } from '../../core';\nimport { APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID } from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { IApiKey } from './api-key';\nimport { CfnUsagePlan, CfnUsagePlanKey } from './apigateway.generated';\nimport { Method } from './method';\nimport { IRestApi } from './restapi';\nimport { Stage } from './stage';\nimport { validateInteger } from './util';\n\n                                                                                                                                                                                           \nexport interface ThrottleSettings {\n                                                                                                                                         \n  readonly rateLimit?: number;\n\n                                                                                                                     \n  readonly burstLimit?: number;\n}\n\n                                                      \nexport enum Period {\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH'\n}\n\n                                                                                              \nexport interface QuotaSettings {\n                                                                                                                        \n  readonly limit?: number;\n\n                                                                                                                             \n  readonly offset?: number;\n\n                                                                                                    \n  readonly period?: Period;\n}\n\n                                                           \nexport interface ThrottlingPerMethod {\n                                                                                                                                      \n  readonly method: Method;\n\n                                                                                                                        \n  readonly throttle: ThrottleSettings;\n}\n\n/**\n * Type of Usage Plan Key. Currently the only supported type is 'ApiKey'\n */\nconst enum UsagePlanKeyType {\n  API_KEY = 'API_KEY'\n}\n\n                                                                  \nexport interface UsagePlanPerApiStage {\n\n                              \n  readonly api?: IRestApi;\n\n                                                                            \n  readonly stage?: Stage;\n\n                              \n  readonly throttle?: ThrottlingPerMethod[];\n}\n\nexport interface UsagePlanProps {\n                                                                                    \n  readonly apiStages?: UsagePlanPerApiStage[];\n\n                                                                  \n  readonly description?: string;\n\n                                                                                               \n  readonly quota?: QuotaSettings;\n\n                                                                          \n  readonly throttle?: ThrottleSettings;\n\n                                                             \n  readonly name?: string;\n\n                                                                                                                   \n  readonly apiKey?: IApiKey;\n}\n\n                                                      \nexport interface AddApiKeyOptions {\n                                                                                                                                              \n  readonly overrideLogicalId?: string;\n}\n\n                                                                    \nexport interface IUsagePlan extends IResource {\n                                                     \n  readonly usagePlanId: string;\n\n                                                                                                                                                                            \n  addApiKey(apiKey: IApiKey, options?: AddApiKeyOptions): void;\n\n}\n\nabstract class UsagePlanBase extends Resource implements IUsagePlan {\n  /**\n   * Id of the usage plan\n   * @attribute\n   */\n  public abstract readonly usagePlanId: string;\n\n                                                                                                                                                                            \n  public addApiKey(apiKey: IApiKey, options?: AddApiKeyOptions): void {\n    let id: string;\n    const prefix = 'UsagePlanKeyResource';\n\n    if (FeatureFlags.of(this).isEnabled(APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID)) {\n      id = `${prefix}:${Names.nodeUniqueId(apiKey.node)}`;\n    } else {\n      // Postfixing apikey id only from the 2nd child, to keep physicalIds of UsagePlanKey for existing CDK apps unmodified.\n      id = this.node.tryFindChild(prefix) ? `${prefix}:${Names.nodeUniqueId(apiKey.node)}` : prefix;\n    }\n\n    const resource = new CfnUsagePlanKey(this, id, {\n      keyId: apiKey.keyId,\n      keyType: UsagePlanKeyType.API_KEY,\n      usagePlanId: this.usagePlanId,\n    });\n    if (options?.overrideLogicalId) {\n      resource.overrideLogicalId(options?.overrideLogicalId);\n    }\n  }\n\n}\n\nexport class UsagePlan extends UsagePlanBase {\n\n                                                                                                                                                                                                                                                                                            \n  public static fromUsagePlanId(scope: Construct, id: string, usagePlanId: string): IUsagePlan {\n    class Import extends UsagePlanBase {\n      public readonly usagePlanId = usagePlanId;\n\n      constructor() {\n        super(scope, id);\n      }\n    }\n    return new Import();\n  }\n\n                           \n  public readonly usagePlanId: string;\n\n  private readonly apiStages = new Array<UsagePlanPerApiStage>();\n\n  constructor(scope: Construct, id: string, props: UsagePlanProps = { }) {\n    super(scope, id);\n    let resource: CfnUsagePlan;\n\n    resource = new CfnUsagePlan(this, 'Resource', {\n      apiStages: Lazy.any({ produce: () => this.renderApiStages(this.apiStages) }),\n      description: props.description,\n      quota: this.renderQuota(props),\n      throttle: this.renderThrottle(props.throttle),\n      usagePlanName: props.name,\n    });\n\n    this.apiStages.push(...(props.apiStages || []));\n\n    this.usagePlanId = resource.ref;\n\n    // Add ApiKey when\n    if (props.apiKey) {\n      this.addApiKey(props.apiKey);\n    }\n  }\n\n                                                       \n  public addApiStage(apiStage: UsagePlanPerApiStage) {\n    this.apiStages.push(apiStage);\n  }\n\n  /**\n   *\n   * @param props\n   */\n  private renderApiStages(apiStages: UsagePlanPerApiStage[] | undefined): CfnUsagePlan.ApiStageProperty[] | undefined {\n    if (apiStages && apiStages.length > 0) {\n      const stages: CfnUsagePlan.ApiStageProperty[] = [];\n      apiStages.forEach((apiStage: UsagePlanPerApiStage) => {\n        stages.push(this.createStage(apiStage));\n      });\n      return stages;\n    }\n    return undefined;\n  }\n\n  private createStage(apiStage: UsagePlanPerApiStage): CfnUsagePlan.ApiStageProperty {\n    const stage = apiStage.stage ? apiStage.stage.stageName.toString() : undefined;\n    const apiId = apiStage.stage ? apiStage.stage.restApi.restApiId : undefined;\n    const throttle = this.renderThrottlePerMethod(apiStage.throttle);\n    return {\n      apiId,\n      stage,\n      throttle,\n    };\n  }\n\n  private renderQuota(props: UsagePlanProps) {\n    if (props.quota === undefined) {\n      return undefined;\n    } else {\n      const limit = props.quota ? props.quota.limit : undefined;\n      validateInteger(limit, 'Throttle quota limit');\n      const ret = {\n        limit: limit ? limit : undefined,\n        offset: props.quota ? props.quota.offset : undefined,\n        period: props.quota ? props.quota.period : undefined,\n      };\n      return ret;\n    }\n  }\n\n  private renderThrottle(props: ThrottleSettings | undefined): (CfnUsagePlan.ThrottleSettingsProperty | Token) {\n    let ret: CfnUsagePlan.ThrottleSettingsProperty | Token;\n    if (props !== undefined) {\n      const burstLimit = props.burstLimit;\n      validateInteger(burstLimit, 'Throttle burst limit');\n      const rateLimit = props.rateLimit;\n      validateInteger(rateLimit, 'Throttle rate limit');\n\n      ret = {\n        burstLimit: burstLimit,\n        rateLimit: rateLimit,\n      };\n    }\n    return ret!;\n  }\n\n  private renderThrottlePerMethod(throttlePerMethod?: ThrottlingPerMethod[]) {\n    const ret: { [key: string]: (CfnUsagePlan.ThrottleSettingsProperty | Token) } = {};\n    if (throttlePerMethod && throttlePerMethod.length > 0) {\n      throttlePerMethod.forEach((value: ThrottlingPerMethod) => {\n        const method: Method = value.method;\n        // this methodId is resource path and method for example /GET or /pets/GET\n        const methodId = `${method.resource.path}/${method.httpMethod}`;\n        ret[methodId] = this.renderThrottle(value.throttle);\n      });\n    }\n    return ret;\n  }\n}\n"],
  "mappings": "+NAAA,OAAA,QAAA,cACA,SAAA,QAAA,gBAGA,uBAAA,QAAA,0BAIA,OAAA,QAAA,UAYA,GAAY,QAAZ,AAAA,UAAY,QAAM,CAChB,QAAA,IAAA,MACA,QAAA,KAAA,OACA,QAAA,MAAA,UAHU,OAAA,QAAA,QAAA,SAAA,OAAM,KAmFlB,2BAAqC,QAAA,QAAQ,CAQpC,UAAU,OAAiB,QAA0B,CAC1D,GAAI,IACJ,KAAM,QAAS,uBAEf,AAAI,OAAA,aAAa,GAAG,MAAM,UAAU,SAAA,6CAClC,GAAK,GAAG,UAAU,OAAA,MAAM,aAAa,OAAO,QAG5C,GAAK,KAAK,KAAK,aAAa,QAAU,GAAG,UAAU,OAAA,MAAM,aAAa,OAAO,QAAU,OAGzF,KAAM,UAAW,GAAI,wBAAA,gBAAgB,KAAM,GAAI,CAC7C,MAAO,OAAO,MACd,QAAO,UACP,YAAa,KAAK,cAEpB,AAAI,UAAO,KAAA,OAAP,QAAS,oBACX,SAAS,kBAAkB,SAAO,KAAA,OAAP,QAAS,oBAM1C,uBAA+B,cAAa,CAmB1C,YAAY,MAAkB,GAAY,MAAwB,GAAG,CACnE,MAAM,MAAO,IAHE,KAAA,UAAY,GAAI,gFAI/B,GAAI,UAEJ,SAAW,GAAI,wBAAA,aAAa,KAAM,WAAY,CAC5C,UAAW,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,gBAAgB,KAAK,aAC/D,YAAa,MAAM,YACnB,MAAO,KAAK,YAAY,OACxB,SAAU,KAAK,eAAe,MAAM,UACpC,cAAe,MAAM,OAGvB,KAAK,UAAU,KAAK,GAAI,MAAM,WAAa,IAE3C,KAAK,YAAc,SAAS,IAGxB,MAAM,QACR,KAAK,UAAU,MAAM,cAlCX,iBAAgB,MAAkB,GAAY,YAAmB,CAC7E,oBAAqB,cAAa,CAGhC,aAAA,CACE,MAAM,MAAO,IAHC,KAAA,YAAc,aAMhC,MAAO,IAAI,QA+BN,YAAY,SAA8B,mFAC/C,KAAK,UAAU,KAAK,UAOd,gBAAgB,UAA6C,CACnE,GAAI,WAAa,UAAU,OAAS,EAAG,CACrC,KAAM,QAA0C,GAChD,iBAAU,QAAQ,AAAC,UAAkC,CACnD,OAAO,KAAK,KAAK,YAAY,aAExB,QAKH,YAAY,SAA8B,CAChD,KAAM,OAAQ,SAAS,MAAQ,SAAS,MAAM,UAAU,WAAa,OAC/D,MAAQ,SAAS,MAAQ,SAAS,MAAM,QAAQ,UAAY,OAC5D,SAAW,KAAK,wBAAwB,SAAS,UACvD,MAAO,CACL,MACA,MACA,UAII,YAAY,MAAqB,CACvC,GAAI,MAAM,QAAU,OAEb,CACL,KAAM,OAAQ,MAAM,MAAQ,MAAM,MAAM,MAAQ,OAChD,cAAA,gBAAgB,MAAO,wBACX,CACV,MAAO,OAAgB,OACvB,OAAQ,MAAM,MAAQ,MAAM,MAAM,OAAS,OAC3C,OAAQ,MAAM,MAAQ,MAAM,MAAM,OAAS,SAMzC,eAAe,MAAmC,CACxD,GAAI,KACJ,GAAI,QAAU,OAAW,CACvB,KAAM,YAAa,MAAM,WACzB,OAAA,gBAAgB,WAAY,wBAC5B,KAAM,WAAY,MAAM,UACxB,OAAA,gBAAgB,UAAW,uBAE3B,IAAM,CACJ,WACA,WAGJ,MAAO,KAGD,wBAAwB,kBAAyC,CACvE,KAAM,KAA0E,GAChF,MAAI,oBAAqB,kBAAkB,OAAS,GAClD,kBAAkB,QAAQ,AAAC,OAA8B,CACvD,KAAM,QAAiB,MAAM,OAEvB,SAAW,GAAG,OAAO,SAAS,QAAQ,OAAO,aACnD,IAAI,UAAY,KAAK,eAAe,MAAM,YAGvC,KAjHX,QAAA,UAAA",
  "names": []
}
