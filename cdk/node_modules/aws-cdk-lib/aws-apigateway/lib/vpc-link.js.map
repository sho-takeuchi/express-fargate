{
  "version": 3,
  "sources": ["vpc-link.ts"],
  "sourcesContent": ["import * as elbv2 from '../../aws-elasticloadbalancingv2';\nimport { IResource, Lazy, Names, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnVpcLink } from './apigateway.generated';\n\n                                            \nexport interface IVpcLink extends IResource {\n                                                                    \n  readonly vpcLinkId: string;\n}\n\n                                   \nexport interface VpcLinkProps {\n                                                                                                               \n  readonly vpcLinkName?: string;\n\n                                                                              \n  readonly description?: string;\n\n                                                                                                                                                                                                                                         \n  readonly targets?: elbv2.INetworkLoadBalancer[];\n}\n\n                                                                                                                                                 \nexport class VpcLink extends Resource implements IVpcLink {\n                                            \n  public static fromVpcLinkId(scope: Construct, id: string, vpcLinkId: string): IVpcLink {\n    class Import extends Resource implements IVpcLink {\n      public vpcLinkId = vpcLinkId;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                    \n  public readonly vpcLinkId: string;\n\n  private readonly _targets = new Array<elbv2.INetworkLoadBalancer>();\n\n  constructor(scope: Construct, id: string, props: VpcLinkProps = {}) {\n    super(scope, id, {\n      physicalName: props.vpcLinkName ||\n        Lazy.string({ produce: () => Names.nodeUniqueId(this.node) }),\n    });\n\n    const cfnResource = new CfnVpcLink(this, 'Resource', {\n      name: this.physicalName,\n      description: props.description,\n      targetArns: Lazy.list({ produce: () => this.renderTargets() }),\n    });\n\n    this.vpcLinkId = cfnResource.ref;\n\n    if (props.targets) {\n      this.addTargets(...props.targets);\n    }\n\n    this.node.addValidation({ validate: () => this.validateVpcLink() });\n  }\n\n  public addTargets(...targets: elbv2.INetworkLoadBalancer[]) {\n    this._targets.push(...targets);\n  }\n\n  /**\n   * Return the list of DNS names from the target NLBs.\n   * @internal\n   * */\n  public get _targetDnsNames(): string[] {\n    return this._targets.map(t => t.loadBalancerDnsName);\n  }\n\n  private validateVpcLink(): string[] {\n    if (this._targets.length === 0) {\n      return ['No targets added to vpc link'];\n    }\n    return [];\n  }\n\n  private renderTargets() {\n    return this._targets.map(nlb => nlb.loadBalancerArn);\n  }\n}\n"],
  "mappings": "8MACA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BAqBA,qBAA6B,QAAA,QAAQ,CAenC,YAAY,MAAkB,GAAY,MAAsB,GAAE,CAChE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,aAClB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,OAAA,MAAM,aAAa,KAAK,UAL1C,KAAA,SAAW,GAAI,8EAQ9B,KAAM,aAAc,GAAI,wBAAA,WAAW,KAAM,WAAY,CACnD,KAAM,KAAK,aACX,YAAa,MAAM,YACnB,WAAY,OAAA,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,oBAG9C,KAAK,UAAY,YAAY,IAEzB,MAAM,SACR,KAAK,WAAW,GAAG,MAAM,SAG3B,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,KAAK,0BA/BnC,eAAc,MAAkB,GAAY,UAAiB,CACzE,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACS,KAAA,UAAY,WAGrB,MAAO,IAAI,QAAO,MAAO,IA6BpB,cAAc,QAAqC,8FACxD,KAAK,SAAS,KAAK,GAAG,YAOb,kBAAe,CACxB,MAAO,MAAK,SAAS,IAAI,GAAK,EAAE,qBAG1B,iBAAe,CACrB,MAAI,MAAK,SAAS,SAAW,EACpB,CAAC,gCAEH,GAGD,eAAa,CACnB,MAAO,MAAK,SAAS,IAAI,KAAO,IAAI,kBAxDxC,QAAA,QAAA",
  "names": []
}
