{
  "version": 3,
  "sources": ["apigatewayv2.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:27.737Z\",\"fingerprint\":\"uY4Td+MHWd2nHCJobEzILNCSLC0B+ByfqhxhbCG1750=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                               \nexport interface CfnApiProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly apiKeySelectionExpression?: string;\n\nn    readonly basePath?: string;\n\nn    readonly body?: any | cdk.IResolvable;\n\nn    readonly bodyS3Location?: CfnApi.BodyS3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                    \n    readonly corsConfiguration?: CfnApi.CorsProperty | cdk.IResolvable;\n\nn    readonly credentialsArn?: string;\n\n                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly disableExecuteApiEndpoint?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                               \n    readonly disableSchemaValidation?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly failOnWarnings?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                             \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                           \n    readonly protocolType?: string;\n\nn    readonly routeKey?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly routeSelectionExpression?: string;\n\n                                                                                                                                                                                                                                                   \n    readonly tags?: any;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly target?: string;\n\n                                                                                                                                                                                                          \n    readonly version?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApiProps`\n *\n * @param properties - the TypeScript properties of a `CfnApiProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiKeySelectionExpression', cdk.validateString)(properties.apiKeySelectionExpression));\n    errors.collect(cdk.propertyValidator('basePath', cdk.validateString)(properties.basePath));\n    errors.collect(cdk.propertyValidator('body', cdk.validateObject)(properties.body));\n    errors.collect(cdk.propertyValidator('bodyS3Location', CfnApi_BodyS3LocationPropertyValidator)(properties.bodyS3Location));\n    errors.collect(cdk.propertyValidator('corsConfiguration', CfnApi_CorsPropertyValidator)(properties.corsConfiguration));\n    errors.collect(cdk.propertyValidator('credentialsArn', cdk.validateString)(properties.credentialsArn));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('disableExecuteApiEndpoint', cdk.validateBoolean)(properties.disableExecuteApiEndpoint));\n    errors.collect(cdk.propertyValidator('disableSchemaValidation', cdk.validateBoolean)(properties.disableSchemaValidation));\n    errors.collect(cdk.propertyValidator('failOnWarnings', cdk.validateBoolean)(properties.failOnWarnings));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('protocolType', cdk.validateString)(properties.protocolType));\n    errors.collect(cdk.propertyValidator('routeKey', cdk.validateString)(properties.routeKey));\n    errors.collect(cdk.propertyValidator('routeSelectionExpression', cdk.validateString)(properties.routeSelectionExpression));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnApiProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Api` resource\n *\n * @param properties - the TypeScript properties of a `CfnApiProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Api` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiPropsValidator(properties).assertSuccess();\n    return {\n        ApiKeySelectionExpression: cdk.stringToCloudFormation(properties.apiKeySelectionExpression),\n        BasePath: cdk.stringToCloudFormation(properties.basePath),\n        Body: cdk.objectToCloudFormation(properties.body),\n        BodyS3Location: cfnApiBodyS3LocationPropertyToCloudFormation(properties.bodyS3Location),\n        CorsConfiguration: cfnApiCorsPropertyToCloudFormation(properties.corsConfiguration),\n        CredentialsArn: cdk.stringToCloudFormation(properties.credentialsArn),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisableExecuteApiEndpoint: cdk.booleanToCloudFormation(properties.disableExecuteApiEndpoint),\n        DisableSchemaValidation: cdk.booleanToCloudFormation(properties.disableSchemaValidation),\n        FailOnWarnings: cdk.booleanToCloudFormation(properties.failOnWarnings),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ProtocolType: cdk.stringToCloudFormation(properties.protocolType),\n        RouteKey: cdk.stringToCloudFormation(properties.routeKey),\n        RouteSelectionExpression: cdk.stringToCloudFormation(properties.routeSelectionExpression),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Target: cdk.stringToCloudFormation(properties.target),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiProps>();\n    ret.addPropertyResult('apiKeySelectionExpression', 'ApiKeySelectionExpression', properties.ApiKeySelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ApiKeySelectionExpression) : undefined);\n    ret.addPropertyResult('basePath', 'BasePath', properties.BasePath != null ? cfn_parse.FromCloudFormation.getString(properties.BasePath) : undefined);\n    ret.addPropertyResult('body', 'Body', properties.Body != null ? cfn_parse.FromCloudFormation.getAny(properties.Body) : undefined);\n    ret.addPropertyResult('bodyS3Location', 'BodyS3Location', properties.BodyS3Location != null ? CfnApiBodyS3LocationPropertyFromCloudFormation(properties.BodyS3Location) : undefined);\n    ret.addPropertyResult('corsConfiguration', 'CorsConfiguration', properties.CorsConfiguration != null ? CfnApiCorsPropertyFromCloudFormation(properties.CorsConfiguration) : undefined);\n    ret.addPropertyResult('credentialsArn', 'CredentialsArn', properties.CredentialsArn != null ? cfn_parse.FromCloudFormation.getString(properties.CredentialsArn) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('disableExecuteApiEndpoint', 'DisableExecuteApiEndpoint', properties.DisableExecuteApiEndpoint != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableExecuteApiEndpoint) : undefined);\n    ret.addPropertyResult('disableSchemaValidation', 'DisableSchemaValidation', properties.DisableSchemaValidation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableSchemaValidation) : undefined);\n    ret.addPropertyResult('failOnWarnings', 'FailOnWarnings', properties.FailOnWarnings != null ? cfn_parse.FromCloudFormation.getBoolean(properties.FailOnWarnings) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('protocolType', 'ProtocolType', properties.ProtocolType != null ? cfn_parse.FromCloudFormation.getString(properties.ProtocolType) : undefined);\n    ret.addPropertyResult('routeKey', 'RouteKey', properties.RouteKey != null ? cfn_parse.FromCloudFormation.getString(properties.RouteKey) : undefined);\n    ret.addPropertyResult('routeSelectionExpression', 'RouteSelectionExpression', properties.RouteSelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.RouteSelectionExpression) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('target', 'Target', properties.Target != null ? cfn_parse.FromCloudFormation.getString(properties.Target) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApi extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Api\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApi {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApiPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApi(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                       \n    public readonly attrApiEndpoint: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public apiKeySelectionExpression: string | undefined;\n\nn    public basePath: string | undefined;\n\nn    public body: any | cdk.IResolvable | undefined;\n\nn    public bodyS3Location: CfnApi.BodyS3LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                    \n    public corsConfiguration: CfnApi.CorsProperty | cdk.IResolvable | undefined;\n\nn    public credentialsArn: string | undefined;\n\n                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public disableExecuteApiEndpoint: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public disableSchemaValidation: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                             \n    public failOnWarnings: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                           \n    public protocolType: string | undefined;\n\nn    public routeKey: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public routeSelectionExpression: string | undefined;\n\n                                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public target: string | undefined;\n\n                                                                                                                                                                                                          \n    public version: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnApiProps = {}) {\n        super(scope, id, { type: CfnApi.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrApiEndpoint = cdk.Token.asString(this.getAtt('ApiEndpoint'));\n\n        this.apiKeySelectionExpression = props.apiKeySelectionExpression;\n        this.basePath = props.basePath;\n        this.body = props.body;\n        this.bodyS3Location = props.bodyS3Location;\n        this.corsConfiguration = props.corsConfiguration;\n        this.credentialsArn = props.credentialsArn;\n        this.description = props.description;\n        this.disableExecuteApiEndpoint = props.disableExecuteApiEndpoint;\n        this.disableSchemaValidation = props.disableSchemaValidation;\n        this.failOnWarnings = props.failOnWarnings;\n        this.name = props.name;\n        this.protocolType = props.protocolType;\n        this.routeKey = props.routeKey;\n        this.routeSelectionExpression = props.routeSelectionExpression;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ApiGatewayV2::Api\", props.tags, { tagPropertyName: 'tags' });\n        this.target = props.target;\n        this.version = props.version;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApi.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiKeySelectionExpression: this.apiKeySelectionExpression,\n            basePath: this.basePath,\n            body: this.body,\n            bodyS3Location: this.bodyS3Location,\n            corsConfiguration: this.corsConfiguration,\n            credentialsArn: this.credentialsArn,\n            description: this.description,\n            disableExecuteApiEndpoint: this.disableExecuteApiEndpoint,\n            disableSchemaValidation: this.disableSchemaValidation,\n            failOnWarnings: this.failOnWarnings,\n            name: this.name,\n            protocolType: this.protocolType,\n            routeKey: this.routeKey,\n            routeSelectionExpression: this.routeSelectionExpression,\n            tags: this.tags.renderTags(),\n            target: this.target,\n            version: this.version,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApiPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApi {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface BodyS3LocationProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly bucket?: string;\n                                                                                                                                                                                                                                                    \n        readonly etag?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly key?: string;\n                                                                                                                                                                                                                                                          \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BodyS3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `BodyS3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApi_BodyS3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('etag', cdk.validateString)(properties.etag));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"BodyS3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Api.BodyS3Location` resource\n *\n * @param properties - the TypeScript properties of a `BodyS3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Api.BodyS3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiBodyS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApi_BodyS3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Etag: cdk.stringToCloudFormation(properties.etag),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiBodyS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApi.BodyS3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApi.BodyS3LocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', properties.Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.Bucket) : undefined);\n    ret.addPropertyResult('etag', 'Etag', properties.Etag != null ? cfn_parse.FromCloudFormation.getString(properties.Etag) : undefined);\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApi {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface CorsProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly allowCredentials?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly allowHeaders?: string[];\n                                                                                                                                                                                                                                                                                            \n        readonly allowMethods?: string[];\n                                                                                                                                                                                                                                                                                       \n        readonly allowOrigins?: string[];\n                                                                                                                                                                                                                                                                                        \n        readonly exposeHeaders?: string[];\n                                                                                                                                                                                                                                                                                                                    \n        readonly maxAge?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CorsProperty`\n *\n * @param properties - the TypeScript properties of a `CorsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApi_CorsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowCredentials', cdk.validateBoolean)(properties.allowCredentials));\n    errors.collect(cdk.propertyValidator('allowHeaders', cdk.listValidator(cdk.validateString))(properties.allowHeaders));\n    errors.collect(cdk.propertyValidator('allowMethods', cdk.listValidator(cdk.validateString))(properties.allowMethods));\n    errors.collect(cdk.propertyValidator('allowOrigins', cdk.listValidator(cdk.validateString))(properties.allowOrigins));\n    errors.collect(cdk.propertyValidator('exposeHeaders', cdk.listValidator(cdk.validateString))(properties.exposeHeaders));\n    errors.collect(cdk.propertyValidator('maxAge', cdk.validateNumber)(properties.maxAge));\n    return errors.wrap('supplied properties not correct for \"CorsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Api.Cors` resource\n *\n * @param properties - the TypeScript properties of a `CorsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Api.Cors` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiCorsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApi_CorsPropertyValidator(properties).assertSuccess();\n    return {\n        AllowCredentials: cdk.booleanToCloudFormation(properties.allowCredentials),\n        AllowHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowHeaders),\n        AllowMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowMethods),\n        AllowOrigins: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowOrigins),\n        ExposeHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.exposeHeaders),\n        MaxAge: cdk.numberToCloudFormation(properties.maxAge),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiCorsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApi.CorsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApi.CorsProperty>();\n    ret.addPropertyResult('allowCredentials', 'AllowCredentials', properties.AllowCredentials != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowCredentials) : undefined);\n    ret.addPropertyResult('allowHeaders', 'AllowHeaders', properties.AllowHeaders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowHeaders) : undefined);\n    ret.addPropertyResult('allowMethods', 'AllowMethods', properties.AllowMethods != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowMethods) : undefined);\n    ret.addPropertyResult('allowOrigins', 'AllowOrigins', properties.AllowOrigins != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowOrigins) : undefined);\n    ret.addPropertyResult('exposeHeaders', 'ExposeHeaders', properties.ExposeHeaders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExposeHeaders) : undefined);\n    ret.addPropertyResult('maxAge', 'MaxAge', properties.MaxAge != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxAge) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                             \nexport interface CfnApiGatewayManagedOverridesProps {\n\n                                                                                                                                                                                                                                                                                                                \n    readonly apiId: string;\n\n                                                                                                                                                                                                                                                                                                          \n    readonly integration?: CfnApiGatewayManagedOverrides.IntegrationOverridesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                        \n    readonly route?: CfnApiGatewayManagedOverrides.RouteOverridesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                        \n    readonly stage?: CfnApiGatewayManagedOverrides.StageOverridesProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApiGatewayManagedOverridesProps`\n *\n * @param properties - the TypeScript properties of a `CfnApiGatewayManagedOverridesProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiGatewayManagedOverridesPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('integration', CfnApiGatewayManagedOverrides_IntegrationOverridesPropertyValidator)(properties.integration));\n    errors.collect(cdk.propertyValidator('route', CfnApiGatewayManagedOverrides_RouteOverridesPropertyValidator)(properties.route));\n    errors.collect(cdk.propertyValidator('stage', CfnApiGatewayManagedOverrides_StageOverridesPropertyValidator)(properties.stage));\n    return errors.wrap('supplied properties not correct for \"CfnApiGatewayManagedOverridesProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides` resource\n *\n * @param properties - the TypeScript properties of a `CfnApiGatewayManagedOverridesProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiGatewayManagedOverridesPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiGatewayManagedOverridesPropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        Integration: cfnApiGatewayManagedOverridesIntegrationOverridesPropertyToCloudFormation(properties.integration),\n        Route: cfnApiGatewayManagedOverridesRouteOverridesPropertyToCloudFormation(properties.route),\n        Stage: cfnApiGatewayManagedOverridesStageOverridesPropertyToCloudFormation(properties.stage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiGatewayManagedOverridesPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiGatewayManagedOverridesProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiGatewayManagedOverridesProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('integration', 'Integration', properties.Integration != null ? CfnApiGatewayManagedOverridesIntegrationOverridesPropertyFromCloudFormation(properties.Integration) : undefined);\n    ret.addPropertyResult('route', 'Route', properties.Route != null ? CfnApiGatewayManagedOverridesRouteOverridesPropertyFromCloudFormation(properties.Route) : undefined);\n    ret.addPropertyResult('stage', 'Stage', properties.Stage != null ? CfnApiGatewayManagedOverridesStageOverridesPropertyFromCloudFormation(properties.Stage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApiGatewayManagedOverrides extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::ApiGatewayManagedOverrides\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApiGatewayManagedOverrides {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApiGatewayManagedOverridesPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApiGatewayManagedOverrides(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                \n    public apiId: string;\n\n                                                                                                                                                                                                                                                                                                          \n    public integration: CfnApiGatewayManagedOverrides.IntegrationOverridesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                        \n    public route: CfnApiGatewayManagedOverrides.RouteOverridesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                        \n    public stage: CfnApiGatewayManagedOverrides.StageOverridesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnApiGatewayManagedOverridesProps) {\n        super(scope, id, { type: CfnApiGatewayManagedOverrides.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n\n        this.apiId = props.apiId;\n        this.integration = props.integration;\n        this.route = props.route;\n        this.stage = props.stage;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApiGatewayManagedOverrides.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            integration: this.integration,\n            route: this.route,\n            stage: this.stage,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApiGatewayManagedOverridesPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApiGatewayManagedOverrides {\n                                                                                                                                                                                                                                                                                                                                            \n    export interface AccessLogSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly destinationArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly format?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessLogSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiGatewayManagedOverrides_AccessLogSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationArn', cdk.validateString)(properties.destinationArn));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    return errors.wrap('supplied properties not correct for \"AccessLogSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.AccessLogSettings` resource\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.AccessLogSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiGatewayManagedOverridesAccessLogSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiGatewayManagedOverrides_AccessLogSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),\n        Format: cdk.stringToCloudFormation(properties.format),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiGatewayManagedOverridesAccessLogSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiGatewayManagedOverrides.AccessLogSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiGatewayManagedOverrides.AccessLogSettingsProperty>();\n    ret.addPropertyResult('destinationArn', 'DestinationArn', properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : undefined);\n    ret.addPropertyResult('format', 'Format', properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApiGatewayManagedOverrides {\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface IntegrationOverridesProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly integrationMethod?: string;\nn        readonly payloadFormatVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly timeoutInMillis?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntegrationOverridesProperty`\n *\n * @param properties - the TypeScript properties of a `IntegrationOverridesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiGatewayManagedOverrides_IntegrationOverridesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('integrationMethod', cdk.validateString)(properties.integrationMethod));\n    errors.collect(cdk.propertyValidator('payloadFormatVersion', cdk.validateString)(properties.payloadFormatVersion));\n    errors.collect(cdk.propertyValidator('timeoutInMillis', cdk.validateNumber)(properties.timeoutInMillis));\n    return errors.wrap('supplied properties not correct for \"IntegrationOverridesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.IntegrationOverrides` resource\n *\n * @param properties - the TypeScript properties of a `IntegrationOverridesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.IntegrationOverrides` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiGatewayManagedOverridesIntegrationOverridesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiGatewayManagedOverrides_IntegrationOverridesPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        IntegrationMethod: cdk.stringToCloudFormation(properties.integrationMethod),\n        PayloadFormatVersion: cdk.stringToCloudFormation(properties.payloadFormatVersion),\n        TimeoutInMillis: cdk.numberToCloudFormation(properties.timeoutInMillis),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiGatewayManagedOverridesIntegrationOverridesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiGatewayManagedOverrides.IntegrationOverridesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiGatewayManagedOverrides.IntegrationOverridesProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('integrationMethod', 'IntegrationMethod', properties.IntegrationMethod != null ? cfn_parse.FromCloudFormation.getString(properties.IntegrationMethod) : undefined);\n    ret.addPropertyResult('payloadFormatVersion', 'PayloadFormatVersion', properties.PayloadFormatVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PayloadFormatVersion) : undefined);\n    ret.addPropertyResult('timeoutInMillis', 'TimeoutInMillis', properties.TimeoutInMillis != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMillis) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApiGatewayManagedOverrides {\n                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface RouteOverridesProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly authorizationScopes?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly authorizationType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly authorizerId?: string;\n                                                                                                                                                                                                                                                                                                                  \n        readonly operationName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly target?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RouteOverridesProperty`\n *\n * @param properties - the TypeScript properties of a `RouteOverridesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiGatewayManagedOverrides_RouteOverridesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authorizationScopes', cdk.listValidator(cdk.validateString))(properties.authorizationScopes));\n    errors.collect(cdk.propertyValidator('authorizationType', cdk.validateString)(properties.authorizationType));\n    errors.collect(cdk.propertyValidator('authorizerId', cdk.validateString)(properties.authorizerId));\n    errors.collect(cdk.propertyValidator('operationName', cdk.validateString)(properties.operationName));\n    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));\n    return errors.wrap('supplied properties not correct for \"RouteOverridesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.RouteOverrides` resource\n *\n * @param properties - the TypeScript properties of a `RouteOverridesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.RouteOverrides` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiGatewayManagedOverridesRouteOverridesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiGatewayManagedOverrides_RouteOverridesPropertyValidator(properties).assertSuccess();\n    return {\n        AuthorizationScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.authorizationScopes),\n        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),\n        AuthorizerId: cdk.stringToCloudFormation(properties.authorizerId),\n        OperationName: cdk.stringToCloudFormation(properties.operationName),\n        Target: cdk.stringToCloudFormation(properties.target),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiGatewayManagedOverridesRouteOverridesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiGatewayManagedOverrides.RouteOverridesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiGatewayManagedOverrides.RouteOverridesProperty>();\n    ret.addPropertyResult('authorizationScopes', 'AuthorizationScopes', properties.AuthorizationScopes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AuthorizationScopes) : undefined);\n    ret.addPropertyResult('authorizationType', 'AuthorizationType', properties.AuthorizationType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizationType) : undefined);\n    ret.addPropertyResult('authorizerId', 'AuthorizerId', properties.AuthorizerId != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerId) : undefined);\n    ret.addPropertyResult('operationName', 'OperationName', properties.OperationName != null ? cfn_parse.FromCloudFormation.getString(properties.OperationName) : undefined);\n    ret.addPropertyResult('target', 'Target', properties.Target != null ? cfn_parse.FromCloudFormation.getString(properties.Target) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApiGatewayManagedOverrides {\n                                                                                                                                                                                                                                                                                                                               \n    export interface RouteSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly dataTraceEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly detailedMetricsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly loggingLevel?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly throttlingBurstLimit?: number;\n                                                                                                                                                                                                                                                                                                                         \n        readonly throttlingRateLimit?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RouteSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RouteSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiGatewayManagedOverrides_RouteSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataTraceEnabled', cdk.validateBoolean)(properties.dataTraceEnabled));\n    errors.collect(cdk.propertyValidator('detailedMetricsEnabled', cdk.validateBoolean)(properties.detailedMetricsEnabled));\n    errors.collect(cdk.propertyValidator('loggingLevel', cdk.validateString)(properties.loggingLevel));\n    errors.collect(cdk.propertyValidator('throttlingBurstLimit', cdk.validateNumber)(properties.throttlingBurstLimit));\n    errors.collect(cdk.propertyValidator('throttlingRateLimit', cdk.validateNumber)(properties.throttlingRateLimit));\n    return errors.wrap('supplied properties not correct for \"RouteSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.RouteSettings` resource\n *\n * @param properties - the TypeScript properties of a `RouteSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.RouteSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiGatewayManagedOverridesRouteSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiGatewayManagedOverrides_RouteSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),\n        DetailedMetricsEnabled: cdk.booleanToCloudFormation(properties.detailedMetricsEnabled),\n        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),\n        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),\n        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiGatewayManagedOverridesRouteSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiGatewayManagedOverrides.RouteSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiGatewayManagedOverrides.RouteSettingsProperty>();\n    ret.addPropertyResult('dataTraceEnabled', 'DataTraceEnabled', properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : undefined);\n    ret.addPropertyResult('detailedMetricsEnabled', 'DetailedMetricsEnabled', properties.DetailedMetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DetailedMetricsEnabled) : undefined);\n    ret.addPropertyResult('loggingLevel', 'LoggingLevel', properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : undefined);\n    ret.addPropertyResult('throttlingBurstLimit', 'ThrottlingBurstLimit', properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : undefined);\n    ret.addPropertyResult('throttlingRateLimit', 'ThrottlingRateLimit', properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApiGatewayManagedOverrides {\n                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface StageOverridesProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly accessLogSettings?: CfnApiGatewayManagedOverrides.AccessLogSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly autoDeploy?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly defaultRouteSettings?: CfnApiGatewayManagedOverrides.RouteSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly routeSettings?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly stageVariables?: any | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StageOverridesProperty`\n *\n * @param properties - the TypeScript properties of a `StageOverridesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiGatewayManagedOverrides_StageOverridesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessLogSettings', CfnApiGatewayManagedOverrides_AccessLogSettingsPropertyValidator)(properties.accessLogSettings));\n    errors.collect(cdk.propertyValidator('autoDeploy', cdk.validateBoolean)(properties.autoDeploy));\n    errors.collect(cdk.propertyValidator('defaultRouteSettings', CfnApiGatewayManagedOverrides_RouteSettingsPropertyValidator)(properties.defaultRouteSettings));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('routeSettings', cdk.validateObject)(properties.routeSettings));\n    errors.collect(cdk.propertyValidator('stageVariables', cdk.validateObject)(properties.stageVariables));\n    return errors.wrap('supplied properties not correct for \"StageOverridesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.StageOverrides` resource\n *\n * @param properties - the TypeScript properties of a `StageOverridesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiGatewayManagedOverrides.StageOverrides` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiGatewayManagedOverridesStageOverridesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiGatewayManagedOverrides_StageOverridesPropertyValidator(properties).assertSuccess();\n    return {\n        AccessLogSettings: cfnApiGatewayManagedOverridesAccessLogSettingsPropertyToCloudFormation(properties.accessLogSettings),\n        AutoDeploy: cdk.booleanToCloudFormation(properties.autoDeploy),\n        DefaultRouteSettings: cfnApiGatewayManagedOverridesRouteSettingsPropertyToCloudFormation(properties.defaultRouteSettings),\n        Description: cdk.stringToCloudFormation(properties.description),\n        RouteSettings: cdk.objectToCloudFormation(properties.routeSettings),\n        StageVariables: cdk.objectToCloudFormation(properties.stageVariables),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiGatewayManagedOverridesStageOverridesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiGatewayManagedOverrides.StageOverridesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiGatewayManagedOverrides.StageOverridesProperty>();\n    ret.addPropertyResult('accessLogSettings', 'AccessLogSettings', properties.AccessLogSettings != null ? CfnApiGatewayManagedOverridesAccessLogSettingsPropertyFromCloudFormation(properties.AccessLogSettings) : undefined);\n    ret.addPropertyResult('autoDeploy', 'AutoDeploy', properties.AutoDeploy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoDeploy) : undefined);\n    ret.addPropertyResult('defaultRouteSettings', 'DefaultRouteSettings', properties.DefaultRouteSettings != null ? CfnApiGatewayManagedOverridesRouteSettingsPropertyFromCloudFormation(properties.DefaultRouteSettings) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('routeSettings', 'RouteSettings', properties.RouteSettings != null ? cfn_parse.FromCloudFormation.getAny(properties.RouteSettings) : undefined);\n    ret.addPropertyResult('stageVariables', 'StageVariables', properties.StageVariables != null ? cfn_parse.FromCloudFormation.getAny(properties.StageVariables) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                             \nexport interface CfnApiMappingProps {\n\n                                                                                                                                                                                                               \n    readonly apiId: string;\n\n                                                                                                                                                                                                          \n    readonly domainName: string;\n\n                                                                                                                                                                                                   \n    readonly stage: string;\n\n                                                                                                                                                                                                                 \n    readonly apiMappingKey?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApiMappingProps`\n *\n * @param properties - the TypeScript properties of a `CfnApiMappingProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiMappingPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiMappingKey', cdk.validateString)(properties.apiMappingKey));\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('stage', cdk.requiredValidator)(properties.stage));\n    errors.collect(cdk.propertyValidator('stage', cdk.validateString)(properties.stage));\n    return errors.wrap('supplied properties not correct for \"CfnApiMappingProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiMapping` resource\n *\n * @param properties - the TypeScript properties of a `CfnApiMappingProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::ApiMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiMappingPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiMappingPropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        Stage: cdk.stringToCloudFormation(properties.stage),\n        ApiMappingKey: cdk.stringToCloudFormation(properties.apiMappingKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiMappingPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiMappingProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiMappingProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('stage', 'Stage', cfn_parse.FromCloudFormation.getString(properties.Stage));\n    ret.addPropertyResult('apiMappingKey', 'ApiMappingKey', properties.ApiMappingKey != null ? cfn_parse.FromCloudFormation.getString(properties.ApiMappingKey) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApiMapping extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::ApiMapping\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApiMapping {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApiMappingPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApiMapping(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                               \n    public apiId: string;\n\n                                                                                                                                                                                                          \n    public domainName: string;\n\n                                                                                                                                                                                                   \n    public stage: string;\n\n                                                                                                                                                                                                                 \n    public apiMappingKey: string | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnApiMappingProps) {\n        super(scope, id, { type: CfnApiMapping.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'domainName', this);\n        cdk.requireProperty(props, 'stage', this);\n\n        this.apiId = props.apiId;\n        this.domainName = props.domainName;\n        this.stage = props.stage;\n        this.apiMappingKey = props.apiMappingKey;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApiMapping.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            domainName: this.domainName,\n            stage: this.stage,\n            apiMappingKey: this.apiMappingKey,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApiMappingPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                             \nexport interface CfnAuthorizerProps {\n\n                                                                                                                                                                                                        \n    readonly apiId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    readonly authorizerType: string;\n\n                                                                                                                                                                                                               \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly authorizerCredentialsArn?: string;\n\nn    readonly authorizerPayloadFormatVersion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly authorizerResultTtlInSeconds?: number;\n\nn    readonly authorizerUri?: string;\n\nn    readonly enableSimpleResponses?: boolean | cdk.IResolvable;\n\nn    readonly identitySource?: string[];\n\n                                                                                                                                                                                                                                       \n    readonly identityValidationExpression?: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly jwtConfiguration?: CfnAuthorizer.JWTConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAuthorizerProps`\n *\n * @param properties - the TypeScript properties of a `CfnAuthorizerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAuthorizerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('authorizerCredentialsArn', cdk.validateString)(properties.authorizerCredentialsArn));\n    errors.collect(cdk.propertyValidator('authorizerPayloadFormatVersion', cdk.validateString)(properties.authorizerPayloadFormatVersion));\n    errors.collect(cdk.propertyValidator('authorizerResultTtlInSeconds', cdk.validateNumber)(properties.authorizerResultTtlInSeconds));\n    errors.collect(cdk.propertyValidator('authorizerType', cdk.requiredValidator)(properties.authorizerType));\n    errors.collect(cdk.propertyValidator('authorizerType', cdk.validateString)(properties.authorizerType));\n    errors.collect(cdk.propertyValidator('authorizerUri', cdk.validateString)(properties.authorizerUri));\n    errors.collect(cdk.propertyValidator('enableSimpleResponses', cdk.validateBoolean)(properties.enableSimpleResponses));\n    errors.collect(cdk.propertyValidator('identitySource', cdk.listValidator(cdk.validateString))(properties.identitySource));\n    errors.collect(cdk.propertyValidator('identityValidationExpression', cdk.validateString)(properties.identityValidationExpression));\n    errors.collect(cdk.propertyValidator('jwtConfiguration', CfnAuthorizer_JWTConfigurationPropertyValidator)(properties.jwtConfiguration));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnAuthorizerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Authorizer` resource\n *\n * @param properties - the TypeScript properties of a `CfnAuthorizerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Authorizer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAuthorizerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAuthorizerPropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        AuthorizerType: cdk.stringToCloudFormation(properties.authorizerType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        AuthorizerCredentialsArn: cdk.stringToCloudFormation(properties.authorizerCredentialsArn),\n        AuthorizerPayloadFormatVersion: cdk.stringToCloudFormation(properties.authorizerPayloadFormatVersion),\n        AuthorizerResultTtlInSeconds: cdk.numberToCloudFormation(properties.authorizerResultTtlInSeconds),\n        AuthorizerUri: cdk.stringToCloudFormation(properties.authorizerUri),\n        EnableSimpleResponses: cdk.booleanToCloudFormation(properties.enableSimpleResponses),\n        IdentitySource: cdk.listMapper(cdk.stringToCloudFormation)(properties.identitySource),\n        IdentityValidationExpression: cdk.stringToCloudFormation(properties.identityValidationExpression),\n        JwtConfiguration: cfnAuthorizerJWTConfigurationPropertyToCloudFormation(properties.jwtConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAuthorizerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAuthorizerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAuthorizerProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('authorizerType', 'AuthorizerType', cfn_parse.FromCloudFormation.getString(properties.AuthorizerType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('authorizerCredentialsArn', 'AuthorizerCredentialsArn', properties.AuthorizerCredentialsArn != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerCredentialsArn) : undefined);\n    ret.addPropertyResult('authorizerPayloadFormatVersion', 'AuthorizerPayloadFormatVersion', properties.AuthorizerPayloadFormatVersion != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerPayloadFormatVersion) : undefined);\n    ret.addPropertyResult('authorizerResultTtlInSeconds', 'AuthorizerResultTtlInSeconds', properties.AuthorizerResultTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.AuthorizerResultTtlInSeconds) : undefined);\n    ret.addPropertyResult('authorizerUri', 'AuthorizerUri', properties.AuthorizerUri != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerUri) : undefined);\n    ret.addPropertyResult('enableSimpleResponses', 'EnableSimpleResponses', properties.EnableSimpleResponses != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableSimpleResponses) : undefined);\n    ret.addPropertyResult('identitySource', 'IdentitySource', properties.IdentitySource != null ? cfn_parse.FromCloudFormation.getStringArray(properties.IdentitySource) : undefined);\n    ret.addPropertyResult('identityValidationExpression', 'IdentityValidationExpression', properties.IdentityValidationExpression != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityValidationExpression) : undefined);\n    ret.addPropertyResult('jwtConfiguration', 'JwtConfiguration', properties.JwtConfiguration != null ? CfnAuthorizerJWTConfigurationPropertyFromCloudFormation(properties.JwtConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAuthorizer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Authorizer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAuthorizer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAuthorizerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAuthorizer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                        \n    public apiId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    public authorizerType: string;\n\n                                                                                                                                                                                                               \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public authorizerCredentialsArn: string | undefined;\n\nn    public authorizerPayloadFormatVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public authorizerResultTtlInSeconds: number | undefined;\n\nn    public authorizerUri: string | undefined;\n\nn    public enableSimpleResponses: boolean | cdk.IResolvable | undefined;\n\nn    public identitySource: string[] | undefined;\n\n                                                                                                                                                                                                                                       \n    public identityValidationExpression: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public jwtConfiguration: CfnAuthorizer.JWTConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnAuthorizerProps) {\n        super(scope, id, { type: CfnAuthorizer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'authorizerType', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.apiId = props.apiId;\n        this.authorizerType = props.authorizerType;\n        this.name = props.name;\n        this.authorizerCredentialsArn = props.authorizerCredentialsArn;\n        this.authorizerPayloadFormatVersion = props.authorizerPayloadFormatVersion;\n        this.authorizerResultTtlInSeconds = props.authorizerResultTtlInSeconds;\n        this.authorizerUri = props.authorizerUri;\n        this.enableSimpleResponses = props.enableSimpleResponses;\n        this.identitySource = props.identitySource;\n        this.identityValidationExpression = props.identityValidationExpression;\n        this.jwtConfiguration = props.jwtConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAuthorizer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            authorizerType: this.authorizerType,\n            name: this.name,\n            authorizerCredentialsArn: this.authorizerCredentialsArn,\n            authorizerPayloadFormatVersion: this.authorizerPayloadFormatVersion,\n            authorizerResultTtlInSeconds: this.authorizerResultTtlInSeconds,\n            authorizerUri: this.authorizerUri,\n            enableSimpleResponses: this.enableSimpleResponses,\n            identitySource: this.identitySource,\n            identityValidationExpression: this.identityValidationExpression,\n            jwtConfiguration: this.jwtConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAuthorizerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAuthorizer {\n                                                                                                                                                                                                                                                                                                                                                                             \n    export interface JWTConfigurationProperty {\nn        readonly audience?: string[];\nn        readonly issuer?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JWTConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `JWTConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAuthorizer_JWTConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audience', cdk.listValidator(cdk.validateString))(properties.audience));\n    errors.collect(cdk.propertyValidator('issuer', cdk.validateString)(properties.issuer));\n    return errors.wrap('supplied properties not correct for \"JWTConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Authorizer.JWTConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `JWTConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Authorizer.JWTConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAuthorizerJWTConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAuthorizer_JWTConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Audience: cdk.listMapper(cdk.stringToCloudFormation)(properties.audience),\n        Issuer: cdk.stringToCloudFormation(properties.issuer),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAuthorizerJWTConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAuthorizer.JWTConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAuthorizer.JWTConfigurationProperty>();\n    ret.addPropertyResult('audience', 'Audience', properties.Audience != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Audience) : undefined);\n    ret.addPropertyResult('issuer', 'Issuer', properties.Issuer != null ? cfn_parse.FromCloudFormation.getString(properties.Issuer) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                             \nexport interface CfnDeploymentProps {\n\n                                                                                                                                                                                                        \n    readonly apiId: string;\n\n                                                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                        \n    readonly stageName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeploymentProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    return errors.wrap('supplied properties not correct for \"CfnDeploymentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Deployment` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Deployment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentPropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('stageName', 'StageName', properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnDeployment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Deployment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeployment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDeploymentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDeployment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                        \n    public apiId: string;\n\n                                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                        \n    public stageName: string | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnDeploymentProps) {\n        super(scope, id, { type: CfnDeployment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n\n        this.apiId = props.apiId;\n        this.description = props.description;\n        this.stageName = props.stageName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDeployment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            description: this.description,\n            stageName: this.stageName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDeploymentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                             \nexport interface CfnDomainNameProps {\n\n                                                                                                                                                                                                                                                                                         \n    readonly domainName: string;\n\n                                                                                                                                                                                                                                       \n    readonly domainNameConfigurations?: Array<CfnDomainName.DomainNameConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                            \n    readonly mutualTlsAuthentication?: CfnDomainName.MutualTlsAuthenticationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                         \n    readonly tags?: any;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDomainNameProps`\n *\n * @param properties - the TypeScript properties of a `CfnDomainNameProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainNamePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainNameConfigurations', cdk.listValidator(CfnDomainName_DomainNameConfigurationPropertyValidator))(properties.domainNameConfigurations));\n    errors.collect(cdk.propertyValidator('mutualTlsAuthentication', CfnDomainName_MutualTlsAuthenticationPropertyValidator)(properties.mutualTlsAuthentication));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDomainNameProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::DomainName` resource\n *\n * @param properties - the TypeScript properties of a `CfnDomainNameProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::DomainName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNamePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainNamePropsValidator(properties).assertSuccess();\n    return {\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        DomainNameConfigurations: cdk.listMapper(cfnDomainNameDomainNameConfigurationPropertyToCloudFormation)(properties.domainNameConfigurations),\n        MutualTlsAuthentication: cfnDomainNameMutualTlsAuthenticationPropertyToCloudFormation(properties.mutualTlsAuthentication),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNamePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainNameProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainNameProps>();\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('domainNameConfigurations', 'DomainNameConfigurations', properties.DomainNameConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainNameDomainNameConfigurationPropertyFromCloudFormation)(properties.DomainNameConfigurations) : undefined);\n    ret.addPropertyResult('mutualTlsAuthentication', 'MutualTlsAuthentication', properties.MutualTlsAuthentication != null ? CfnDomainNameMutualTlsAuthenticationPropertyFromCloudFormation(properties.MutualTlsAuthentication) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDomainName extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::DomainName\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDomainName {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDomainNamePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDomainName(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                \n    public readonly attrRegionalDomainName: string;\n\n                                                                                                                                                        \n    public readonly attrRegionalHostedZoneId: string;\n\n                                                                                                                                                                                                                                                                                         \n    public domainName: string;\n\n                                                                                                                                                                                                                                       \n    public domainNameConfigurations: Array<CfnDomainName.DomainNameConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public mutualTlsAuthentication: CfnDomainName.MutualTlsAuthenticationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnDomainNameProps) {\n        super(scope, id, { type: CfnDomainName.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'domainName', this);\n        this.attrRegionalDomainName = cdk.Token.asString(this.getAtt('RegionalDomainName'));\n        this.attrRegionalHostedZoneId = cdk.Token.asString(this.getAtt('RegionalHostedZoneId'));\n\n        this.domainName = props.domainName;\n        this.domainNameConfigurations = props.domainNameConfigurations;\n        this.mutualTlsAuthentication = props.mutualTlsAuthentication;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ApiGatewayV2::DomainName\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDomainName.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domainName: this.domainName,\n            domainNameConfigurations: this.domainNameConfigurations,\n            mutualTlsAuthentication: this.mutualTlsAuthentication,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDomainNamePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDomainName {\nn    export interface DomainNameConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly certificateArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly certificateName?: string;\n                                                                                                                                                                                                                                                                                    \n        readonly endpointType?: string;\nn        readonly ownershipVerificationCertificateArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly securityPolicy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DomainNameConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DomainNameConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainName_DomainNameConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));\n    errors.collect(cdk.propertyValidator('certificateName', cdk.validateString)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('ownershipVerificationCertificateArn', cdk.validateString)(properties.ownershipVerificationCertificateArn));\n    errors.collect(cdk.propertyValidator('securityPolicy', cdk.validateString)(properties.securityPolicy));\n    return errors.wrap('supplied properties not correct for \"DomainNameConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::DomainName.DomainNameConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DomainNameConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::DomainName.DomainNameConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNameDomainNameConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainName_DomainNameConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),\n        CertificateName: cdk.stringToCloudFormation(properties.certificateName),\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        OwnershipVerificationCertificateArn: cdk.stringToCloudFormation(properties.ownershipVerificationCertificateArn),\n        SecurityPolicy: cdk.stringToCloudFormation(properties.securityPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNameDomainNameConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainName.DomainNameConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainName.DomainNameConfigurationProperty>();\n    ret.addPropertyResult('certificateArn', 'CertificateArn', properties.CertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateArn) : undefined);\n    ret.addPropertyResult('certificateName', 'CertificateName', properties.CertificateName != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateName) : undefined);\n    ret.addPropertyResult('endpointType', 'EndpointType', properties.EndpointType != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointType) : undefined);\n    ret.addPropertyResult('ownershipVerificationCertificateArn', 'OwnershipVerificationCertificateArn', properties.OwnershipVerificationCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.OwnershipVerificationCertificateArn) : undefined);\n    ret.addPropertyResult('securityPolicy', 'SecurityPolicy', properties.SecurityPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityPolicy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomainName {\n                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface MutualTlsAuthenticationProperty {\nn        readonly truststoreUri?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly truststoreVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MutualTlsAuthenticationProperty`\n *\n * @param properties - the TypeScript properties of a `MutualTlsAuthenticationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainName_MutualTlsAuthenticationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('truststoreUri', cdk.validateString)(properties.truststoreUri));\n    errors.collect(cdk.propertyValidator('truststoreVersion', cdk.validateString)(properties.truststoreVersion));\n    return errors.wrap('supplied properties not correct for \"MutualTlsAuthenticationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::DomainName.MutualTlsAuthentication` resource\n *\n * @param properties - the TypeScript properties of a `MutualTlsAuthenticationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::DomainName.MutualTlsAuthentication` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNameMutualTlsAuthenticationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainName_MutualTlsAuthenticationPropertyValidator(properties).assertSuccess();\n    return {\n        TruststoreUri: cdk.stringToCloudFormation(properties.truststoreUri),\n        TruststoreVersion: cdk.stringToCloudFormation(properties.truststoreVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNameMutualTlsAuthenticationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainName.MutualTlsAuthenticationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainName.MutualTlsAuthenticationProperty>();\n    ret.addPropertyResult('truststoreUri', 'TruststoreUri', properties.TruststoreUri != null ? cfn_parse.FromCloudFormation.getString(properties.TruststoreUri) : undefined);\n    ret.addPropertyResult('truststoreVersion', 'TruststoreVersion', properties.TruststoreVersion != null ? cfn_parse.FromCloudFormation.getString(properties.TruststoreVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                               \nexport interface CfnIntegrationProps {\n\n                                                                                                                                                                                                          \n    readonly apiId: string;\n\nn    readonly integrationType: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly connectionId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly connectionType?: string;\n\nn    readonly contentHandlingStrategy?: string;\n\nn    readonly credentialsArn?: string;\n\n                                                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                \n    readonly integrationMethod?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly integrationSubtype?: string;\n\nn    readonly integrationUri?: string;\n\nn    readonly passthroughBehavior?: string;\n\nn    readonly payloadFormatVersion?: string;\n\nn    readonly requestParameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly requestTemplates?: any | cdk.IResolvable;\n\nn    readonly responseParameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly templateSelectionExpression?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly timeoutInMillis?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    readonly tlsConfig?: CfnIntegration.TlsConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIntegrationProps`\n *\n * @param properties - the TypeScript properties of a `CfnIntegrationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIntegrationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('connectionId', cdk.validateString)(properties.connectionId));\n    errors.collect(cdk.propertyValidator('connectionType', cdk.validateString)(properties.connectionType));\n    errors.collect(cdk.propertyValidator('contentHandlingStrategy', cdk.validateString)(properties.contentHandlingStrategy));\n    errors.collect(cdk.propertyValidator('credentialsArn', cdk.validateString)(properties.credentialsArn));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('integrationMethod', cdk.validateString)(properties.integrationMethod));\n    errors.collect(cdk.propertyValidator('integrationSubtype', cdk.validateString)(properties.integrationSubtype));\n    errors.collect(cdk.propertyValidator('integrationType', cdk.requiredValidator)(properties.integrationType));\n    errors.collect(cdk.propertyValidator('integrationType', cdk.validateString)(properties.integrationType));\n    errors.collect(cdk.propertyValidator('integrationUri', cdk.validateString)(properties.integrationUri));\n    errors.collect(cdk.propertyValidator('passthroughBehavior', cdk.validateString)(properties.passthroughBehavior));\n    errors.collect(cdk.propertyValidator('payloadFormatVersion', cdk.validateString)(properties.payloadFormatVersion));\n    errors.collect(cdk.propertyValidator('requestParameters', cdk.validateObject)(properties.requestParameters));\n    errors.collect(cdk.propertyValidator('requestTemplates', cdk.validateObject)(properties.requestTemplates));\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.validateObject)(properties.responseParameters));\n    errors.collect(cdk.propertyValidator('templateSelectionExpression', cdk.validateString)(properties.templateSelectionExpression));\n    errors.collect(cdk.propertyValidator('timeoutInMillis', cdk.validateNumber)(properties.timeoutInMillis));\n    errors.collect(cdk.propertyValidator('tlsConfig', CfnIntegration_TlsConfigPropertyValidator)(properties.tlsConfig));\n    return errors.wrap('supplied properties not correct for \"CfnIntegrationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration` resource\n *\n * @param properties - the TypeScript properties of a `CfnIntegrationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIntegrationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIntegrationPropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        IntegrationType: cdk.stringToCloudFormation(properties.integrationType),\n        ConnectionId: cdk.stringToCloudFormation(properties.connectionId),\n        ConnectionType: cdk.stringToCloudFormation(properties.connectionType),\n        ContentHandlingStrategy: cdk.stringToCloudFormation(properties.contentHandlingStrategy),\n        CredentialsArn: cdk.stringToCloudFormation(properties.credentialsArn),\n        Description: cdk.stringToCloudFormation(properties.description),\n        IntegrationMethod: cdk.stringToCloudFormation(properties.integrationMethod),\n        IntegrationSubtype: cdk.stringToCloudFormation(properties.integrationSubtype),\n        IntegrationUri: cdk.stringToCloudFormation(properties.integrationUri),\n        PassthroughBehavior: cdk.stringToCloudFormation(properties.passthroughBehavior),\n        PayloadFormatVersion: cdk.stringToCloudFormation(properties.payloadFormatVersion),\n        RequestParameters: cdk.objectToCloudFormation(properties.requestParameters),\n        RequestTemplates: cdk.objectToCloudFormation(properties.requestTemplates),\n        ResponseParameters: cdk.objectToCloudFormation(properties.responseParameters),\n        TemplateSelectionExpression: cdk.stringToCloudFormation(properties.templateSelectionExpression),\n        TimeoutInMillis: cdk.numberToCloudFormation(properties.timeoutInMillis),\n        TlsConfig: cfnIntegrationTlsConfigPropertyToCloudFormation(properties.tlsConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIntegrationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIntegrationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIntegrationProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('integrationType', 'IntegrationType', cfn_parse.FromCloudFormation.getString(properties.IntegrationType));\n    ret.addPropertyResult('connectionId', 'ConnectionId', properties.ConnectionId != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionId) : undefined);\n    ret.addPropertyResult('connectionType', 'ConnectionType', properties.ConnectionType != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionType) : undefined);\n    ret.addPropertyResult('contentHandlingStrategy', 'ContentHandlingStrategy', properties.ContentHandlingStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.ContentHandlingStrategy) : undefined);\n    ret.addPropertyResult('credentialsArn', 'CredentialsArn', properties.CredentialsArn != null ? cfn_parse.FromCloudFormation.getString(properties.CredentialsArn) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('integrationMethod', 'IntegrationMethod', properties.IntegrationMethod != null ? cfn_parse.FromCloudFormation.getString(properties.IntegrationMethod) : undefined);\n    ret.addPropertyResult('integrationSubtype', 'IntegrationSubtype', properties.IntegrationSubtype != null ? cfn_parse.FromCloudFormation.getString(properties.IntegrationSubtype) : undefined);\n    ret.addPropertyResult('integrationUri', 'IntegrationUri', properties.IntegrationUri != null ? cfn_parse.FromCloudFormation.getString(properties.IntegrationUri) : undefined);\n    ret.addPropertyResult('passthroughBehavior', 'PassthroughBehavior', properties.PassthroughBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.PassthroughBehavior) : undefined);\n    ret.addPropertyResult('payloadFormatVersion', 'PayloadFormatVersion', properties.PayloadFormatVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PayloadFormatVersion) : undefined);\n    ret.addPropertyResult('requestParameters', 'RequestParameters', properties.RequestParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.RequestParameters) : undefined);\n    ret.addPropertyResult('requestTemplates', 'RequestTemplates', properties.RequestTemplates != null ? cfn_parse.FromCloudFormation.getAny(properties.RequestTemplates) : undefined);\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.ResponseParameters) : undefined);\n    ret.addPropertyResult('templateSelectionExpression', 'TemplateSelectionExpression', properties.TemplateSelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateSelectionExpression) : undefined);\n    ret.addPropertyResult('timeoutInMillis', 'TimeoutInMillis', properties.TimeoutInMillis != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMillis) : undefined);\n    ret.addPropertyResult('tlsConfig', 'TlsConfig', properties.TlsConfig != null ? CfnIntegrationTlsConfigPropertyFromCloudFormation(properties.TlsConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnIntegration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Integration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIntegration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIntegrationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIntegration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                          \n    public apiId: string;\n\nn    public integrationType: string;\n\n                                                                                                                                                                                                                                                                             \n    public connectionId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public connectionType: string | undefined;\n\nn    public contentHandlingStrategy: string | undefined;\n\nn    public credentialsArn: string | undefined;\n\n                                                                                                                                                                                                                                \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public integrationMethod: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public integrationSubtype: string | undefined;\n\nn    public integrationUri: string | undefined;\n\nn    public passthroughBehavior: string | undefined;\n\nn    public payloadFormatVersion: string | undefined;\n\nn    public requestParameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public requestTemplates: any | cdk.IResolvable | undefined;\n\nn    public responseParameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                      \n    public templateSelectionExpression: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public timeoutInMillis: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    public tlsConfig: CfnIntegration.TlsConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnIntegrationProps) {\n        super(scope, id, { type: CfnIntegration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'integrationType', this);\n\n        this.apiId = props.apiId;\n        this.integrationType = props.integrationType;\n        this.connectionId = props.connectionId;\n        this.connectionType = props.connectionType;\n        this.contentHandlingStrategy = props.contentHandlingStrategy;\n        this.credentialsArn = props.credentialsArn;\n        this.description = props.description;\n        this.integrationMethod = props.integrationMethod;\n        this.integrationSubtype = props.integrationSubtype;\n        this.integrationUri = props.integrationUri;\n        this.passthroughBehavior = props.passthroughBehavior;\n        this.payloadFormatVersion = props.payloadFormatVersion;\n        this.requestParameters = props.requestParameters;\n        this.requestTemplates = props.requestTemplates;\n        this.responseParameters = props.responseParameters;\n        this.templateSelectionExpression = props.templateSelectionExpression;\n        this.timeoutInMillis = props.timeoutInMillis;\n        this.tlsConfig = props.tlsConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIntegration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            integrationType: this.integrationType,\n            connectionId: this.connectionId,\n            connectionType: this.connectionType,\n            contentHandlingStrategy: this.contentHandlingStrategy,\n            credentialsArn: this.credentialsArn,\n            description: this.description,\n            integrationMethod: this.integrationMethod,\n            integrationSubtype: this.integrationSubtype,\n            integrationUri: this.integrationUri,\n            passthroughBehavior: this.passthroughBehavior,\n            payloadFormatVersion: this.payloadFormatVersion,\n            requestParameters: this.requestParameters,\n            requestTemplates: this.requestTemplates,\n            responseParameters: this.responseParameters,\n            templateSelectionExpression: this.templateSelectionExpression,\n            timeoutInMillis: this.timeoutInMillis,\n            tlsConfig: this.tlsConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIntegrationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnIntegration {\nn    export interface ResponseParameterProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly destination: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly source: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResponseParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ResponseParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIntegration_ResponseParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', cdk.validateString)(properties.destination));\n    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));\n    return errors.wrap('supplied properties not correct for \"ResponseParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration.ResponseParameter` resource\n *\n * @param properties - the TypeScript properties of a `ResponseParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration.ResponseParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIntegrationResponseParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIntegration_ResponseParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cdk.stringToCloudFormation(properties.destination),\n        Source: cdk.stringToCloudFormation(properties.source),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIntegrationResponseParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIntegration.ResponseParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIntegration.ResponseParameterProperty>();\n    ret.addPropertyResult('destination', 'Destination', cfn_parse.FromCloudFormation.getString(properties.Destination));\n    ret.addPropertyResult('source', 'Source', cfn_parse.FromCloudFormation.getString(properties.Source));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnIntegration {\n                                                                                                                                                                                                                                                                                     \n    export interface ResponseParameterListProperty {\nn        readonly responseParameters?: Array<CfnIntegration.ResponseParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResponseParameterListProperty`\n *\n * @param properties - the TypeScript properties of a `ResponseParameterListProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIntegration_ResponseParameterListPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.listValidator(CfnIntegration_ResponseParameterPropertyValidator))(properties.responseParameters));\n    return errors.wrap('supplied properties not correct for \"ResponseParameterListProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration.ResponseParameterList` resource\n *\n * @param properties - the TypeScript properties of a `ResponseParameterListProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration.ResponseParameterList` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIntegrationResponseParameterListPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIntegration_ResponseParameterListPropertyValidator(properties).assertSuccess();\n    return {\n        ResponseParameters: cdk.listMapper(cfnIntegrationResponseParameterPropertyToCloudFormation)(properties.responseParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIntegrationResponseParameterListPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIntegration.ResponseParameterListProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIntegration.ResponseParameterListProperty>();\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnIntegrationResponseParameterPropertyFromCloudFormation)(properties.ResponseParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnIntegration {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface TlsConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly serverNameToVerify?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TlsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TlsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIntegration_TlsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('serverNameToVerify', cdk.validateString)(properties.serverNameToVerify));\n    return errors.wrap('supplied properties not correct for \"TlsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration.TlsConfig` resource\n *\n * @param properties - the TypeScript properties of a `TlsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Integration.TlsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIntegrationTlsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIntegration_TlsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ServerNameToVerify: cdk.stringToCloudFormation(properties.serverNameToVerify),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIntegrationTlsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIntegration.TlsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIntegration.TlsConfigProperty>();\n    ret.addPropertyResult('serverNameToVerify', 'ServerNameToVerify', properties.ServerNameToVerify != null ? cfn_parse.FromCloudFormation.getString(properties.ServerNameToVerify) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnIntegrationResponseProps {\n\n                                                                                                                                                                                                                          \n    readonly apiId: string;\n\n                                                                                                                                                                                                                                  \n    readonly integrationId: string;\n\n                                                                                                                                                                                                                                                     \n    readonly integrationResponseKey: string;\n\nn    readonly contentHandlingStrategy?: string;\n\nn    readonly responseParameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly responseTemplates?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly templateSelectionExpression?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIntegrationResponseProps`\n *\n * @param properties - the TypeScript properties of a `CfnIntegrationResponseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIntegrationResponsePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('contentHandlingStrategy', cdk.validateString)(properties.contentHandlingStrategy));\n    errors.collect(cdk.propertyValidator('integrationId', cdk.requiredValidator)(properties.integrationId));\n    errors.collect(cdk.propertyValidator('integrationId', cdk.validateString)(properties.integrationId));\n    errors.collect(cdk.propertyValidator('integrationResponseKey', cdk.requiredValidator)(properties.integrationResponseKey));\n    errors.collect(cdk.propertyValidator('integrationResponseKey', cdk.validateString)(properties.integrationResponseKey));\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.validateObject)(properties.responseParameters));\n    errors.collect(cdk.propertyValidator('responseTemplates', cdk.validateObject)(properties.responseTemplates));\n    errors.collect(cdk.propertyValidator('templateSelectionExpression', cdk.validateString)(properties.templateSelectionExpression));\n    return errors.wrap('supplied properties not correct for \"CfnIntegrationResponseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::IntegrationResponse` resource\n *\n * @param properties - the TypeScript properties of a `CfnIntegrationResponseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::IntegrationResponse` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIntegrationResponsePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIntegrationResponsePropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        IntegrationId: cdk.stringToCloudFormation(properties.integrationId),\n        IntegrationResponseKey: cdk.stringToCloudFormation(properties.integrationResponseKey),\n        ContentHandlingStrategy: cdk.stringToCloudFormation(properties.contentHandlingStrategy),\n        ResponseParameters: cdk.objectToCloudFormation(properties.responseParameters),\n        ResponseTemplates: cdk.objectToCloudFormation(properties.responseTemplates),\n        TemplateSelectionExpression: cdk.stringToCloudFormation(properties.templateSelectionExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIntegrationResponsePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIntegrationResponseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIntegrationResponseProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('integrationId', 'IntegrationId', cfn_parse.FromCloudFormation.getString(properties.IntegrationId));\n    ret.addPropertyResult('integrationResponseKey', 'IntegrationResponseKey', cfn_parse.FromCloudFormation.getString(properties.IntegrationResponseKey));\n    ret.addPropertyResult('contentHandlingStrategy', 'ContentHandlingStrategy', properties.ContentHandlingStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.ContentHandlingStrategy) : undefined);\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.ResponseParameters) : undefined);\n    ret.addPropertyResult('responseTemplates', 'ResponseTemplates', properties.ResponseTemplates != null ? cfn_parse.FromCloudFormation.getAny(properties.ResponseTemplates) : undefined);\n    ret.addPropertyResult('templateSelectionExpression', 'TemplateSelectionExpression', properties.TemplateSelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateSelectionExpression) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnIntegrationResponse extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::IntegrationResponse\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIntegrationResponse {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIntegrationResponsePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIntegrationResponse(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                          \n    public apiId: string;\n\n                                                                                                                                                                                                                                  \n    public integrationId: string;\n\n                                                                                                                                                                                                                                                     \n    public integrationResponseKey: string;\n\nn    public contentHandlingStrategy: string | undefined;\n\nn    public responseParameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public responseTemplates: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                               \n    public templateSelectionExpression: string | undefined;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnIntegrationResponseProps) {\n        super(scope, id, { type: CfnIntegrationResponse.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'integrationId', this);\n        cdk.requireProperty(props, 'integrationResponseKey', this);\n\n        this.apiId = props.apiId;\n        this.integrationId = props.integrationId;\n        this.integrationResponseKey = props.integrationResponseKey;\n        this.contentHandlingStrategy = props.contentHandlingStrategy;\n        this.responseParameters = props.responseParameters;\n        this.responseTemplates = props.responseTemplates;\n        this.templateSelectionExpression = props.templateSelectionExpression;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIntegrationResponse.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            integrationId: this.integrationId,\n            integrationResponseKey: this.integrationResponseKey,\n            contentHandlingStrategy: this.contentHandlingStrategy,\n            responseParameters: this.responseParameters,\n            responseTemplates: this.responseTemplates,\n            templateSelectionExpression: this.templateSelectionExpression,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIntegrationResponsePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnModelProps {\n\n                                                                                                                                                                                              \n    readonly apiId: string;\n\n                                                                                                                                                                                                \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly schema: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    readonly contentType?: string;\n\n                                                                                                                                                                                                              \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('contentType', cdk.validateString)(properties.contentType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('schema', cdk.requiredValidator)(properties.schema));\n    errors.collect(cdk.propertyValidator('schema', cdk.validateObject)(properties.schema));\n    return errors.wrap('supplied properties not correct for \"CfnModelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Model` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Model` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelPropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Schema: cdk.objectToCloudFormation(properties.schema),\n        ContentType: cdk.stringToCloudFormation(properties.contentType),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('schema', 'Schema', cfn_parse.FromCloudFormation.getAny(properties.Schema));\n    ret.addPropertyResult('contentType', 'ContentType', properties.ContentType != null ? cfn_parse.FromCloudFormation.getString(properties.ContentType) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnModel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Model\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                              \n    public apiId: string;\n\n                                                                                                                                                                                                \n    public name: string;\n\n                                                                                                                                                                                                                                                                            \n    public schema: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    public contentType: string | undefined;\n\n                                                                                                                                                                                                              \n    public description: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnModelProps) {\n        super(scope, id, { type: CfnModel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'schema', this);\n\n        this.apiId = props.apiId;\n        this.name = props.name;\n        this.schema = props.schema;\n        this.contentType = props.contentType;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            name: this.name,\n            schema: this.schema,\n            contentType: this.contentType,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnRouteProps {\n\n                                                                                                                                                                                              \n    readonly apiId: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly routeKey: string;\n\n                                                                                                                                                                                                                                                                              \n    readonly apiKeyRequired?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly authorizationScopes?: string[];\n\nn    readonly authorizationType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly authorizerId?: string;\n\n                                                                                                                                                                                                                                                                              \n    readonly modelSelectionExpression?: string;\n\n                                                                                                                                                                                                                    \n    readonly operationName?: string;\n\n                                                                                                                                                                                                                                                       \n    readonly requestModels?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly requestParameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                               \n    readonly routeResponseSelectionExpression?: string;\n\n                                                                                                                                                                                                     \n    readonly target?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiKeyRequired', cdk.validateBoolean)(properties.apiKeyRequired));\n    errors.collect(cdk.propertyValidator('authorizationScopes', cdk.listValidator(cdk.validateString))(properties.authorizationScopes));\n    errors.collect(cdk.propertyValidator('authorizationType', cdk.validateString)(properties.authorizationType));\n    errors.collect(cdk.propertyValidator('authorizerId', cdk.validateString)(properties.authorizerId));\n    errors.collect(cdk.propertyValidator('modelSelectionExpression', cdk.validateString)(properties.modelSelectionExpression));\n    errors.collect(cdk.propertyValidator('operationName', cdk.validateString)(properties.operationName));\n    errors.collect(cdk.propertyValidator('requestModels', cdk.validateObject)(properties.requestModels));\n    errors.collect(cdk.propertyValidator('requestParameters', cdk.validateObject)(properties.requestParameters));\n    errors.collect(cdk.propertyValidator('routeKey', cdk.requiredValidator)(properties.routeKey));\n    errors.collect(cdk.propertyValidator('routeKey', cdk.validateString)(properties.routeKey));\n    errors.collect(cdk.propertyValidator('routeResponseSelectionExpression', cdk.validateString)(properties.routeResponseSelectionExpression));\n    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));\n    return errors.wrap('supplied properties not correct for \"CfnRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Route` resource\n *\n * @param properties - the TypeScript properties of a `CfnRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Route` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRoutePropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        RouteKey: cdk.stringToCloudFormation(properties.routeKey),\n        ApiKeyRequired: cdk.booleanToCloudFormation(properties.apiKeyRequired),\n        AuthorizationScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.authorizationScopes),\n        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),\n        AuthorizerId: cdk.stringToCloudFormation(properties.authorizerId),\n        ModelSelectionExpression: cdk.stringToCloudFormation(properties.modelSelectionExpression),\n        OperationName: cdk.stringToCloudFormation(properties.operationName),\n        RequestModels: cdk.objectToCloudFormation(properties.requestModels),\n        RequestParameters: cdk.objectToCloudFormation(properties.requestParameters),\n        RouteResponseSelectionExpression: cdk.stringToCloudFormation(properties.routeResponseSelectionExpression),\n        Target: cdk.stringToCloudFormation(properties.target),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('routeKey', 'RouteKey', cfn_parse.FromCloudFormation.getString(properties.RouteKey));\n    ret.addPropertyResult('apiKeyRequired', 'ApiKeyRequired', properties.ApiKeyRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApiKeyRequired) : undefined);\n    ret.addPropertyResult('authorizationScopes', 'AuthorizationScopes', properties.AuthorizationScopes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AuthorizationScopes) : undefined);\n    ret.addPropertyResult('authorizationType', 'AuthorizationType', properties.AuthorizationType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizationType) : undefined);\n    ret.addPropertyResult('authorizerId', 'AuthorizerId', properties.AuthorizerId != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerId) : undefined);\n    ret.addPropertyResult('modelSelectionExpression', 'ModelSelectionExpression', properties.ModelSelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ModelSelectionExpression) : undefined);\n    ret.addPropertyResult('operationName', 'OperationName', properties.OperationName != null ? cfn_parse.FromCloudFormation.getString(properties.OperationName) : undefined);\n    ret.addPropertyResult('requestModels', 'RequestModels', properties.RequestModels != null ? cfn_parse.FromCloudFormation.getAny(properties.RequestModels) : undefined);\n    ret.addPropertyResult('requestParameters', 'RequestParameters', properties.RequestParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.RequestParameters) : undefined);\n    ret.addPropertyResult('routeResponseSelectionExpression', 'RouteResponseSelectionExpression', properties.RouteResponseSelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.RouteResponseSelectionExpression) : undefined);\n    ret.addPropertyResult('target', 'Target', properties.Target != null ? cfn_parse.FromCloudFormation.getString(properties.Target) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                             \nexport class CfnRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Route\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                              \n    public apiId: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public routeKey: string;\n\n                                                                                                                                                                                                                                                                              \n    public apiKeyRequired: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    public authorizationScopes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public authorizationType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public authorizerId: string | undefined;\n\n                                                                                                                                                                                                                                                                              \n    public modelSelectionExpression: string | undefined;\n\n                                                                                                                                                                                                                    \n    public operationName: string | undefined;\n\n                                                                                                                                                                                                                                                       \n    public requestModels: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                               \n    public requestParameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                               \n    public routeResponseSelectionExpression: string | undefined;\n\n                                                                                                                                                                                                     \n    public target: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnRouteProps) {\n        super(scope, id, { type: CfnRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'routeKey', this);\n\n        this.apiId = props.apiId;\n        this.routeKey = props.routeKey;\n        this.apiKeyRequired = props.apiKeyRequired;\n        this.authorizationScopes = props.authorizationScopes;\n        this.authorizationType = props.authorizationType;\n        this.authorizerId = props.authorizerId;\n        this.modelSelectionExpression = props.modelSelectionExpression;\n        this.operationName = props.operationName;\n        this.requestModels = props.requestModels;\n        this.requestParameters = props.requestParameters;\n        this.routeResponseSelectionExpression = props.routeResponseSelectionExpression;\n        this.target = props.target;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            routeKey: this.routeKey,\n            apiKeyRequired: this.apiKeyRequired,\n            authorizationScopes: this.authorizationScopes,\n            authorizationType: this.authorizationType,\n            authorizerId: this.authorizerId,\n            modelSelectionExpression: this.modelSelectionExpression,\n            operationName: this.operationName,\n            requestModels: this.requestModels,\n            requestParameters: this.requestParameters,\n            routeResponseSelectionExpression: this.routeResponseSelectionExpression,\n            target: this.target,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRoutePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRoute {\n                                                                                                                                                                                                                                                                  \n    export interface ParameterConstraintsProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly required: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParameterConstraintsProperty`\n *\n * @param properties - the TypeScript properties of a `ParameterConstraintsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRoute_ParameterConstraintsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('required', cdk.requiredValidator)(properties.required));\n    errors.collect(cdk.propertyValidator('required', cdk.validateBoolean)(properties.required));\n    return errors.wrap('supplied properties not correct for \"ParameterConstraintsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Route.ParameterConstraints` resource\n *\n * @param properties - the TypeScript properties of a `ParameterConstraintsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Route.ParameterConstraints` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRouteParameterConstraintsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRoute_ParameterConstraintsPropertyValidator(properties).assertSuccess();\n    return {\n        Required: cdk.booleanToCloudFormation(properties.required),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRouteParameterConstraintsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoute.ParameterConstraintsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoute.ParameterConstraintsProperty>();\n    ret.addPropertyResult('required', 'Required', cfn_parse.FromCloudFormation.getBoolean(properties.Required));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnRouteResponseProps {\n\n                                                                                                                                                                                                              \n    readonly apiId: string;\n\n                                                                                                                                                                                                          \n    readonly routeId: string;\n\n                                                                                                                                                                                                                             \n    readonly routeResponseKey: string;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly modelSelectionExpression?: string;\n\n                                                                                                                                                                                                                                               \n    readonly responseModels?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly responseParameters?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRouteResponseProps`\n *\n * @param properties - the TypeScript properties of a `CfnRouteResponseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRouteResponsePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('modelSelectionExpression', cdk.validateString)(properties.modelSelectionExpression));\n    errors.collect(cdk.propertyValidator('responseModels', cdk.validateObject)(properties.responseModels));\n    errors.collect(cdk.propertyValidator('responseParameters', cdk.validateObject)(properties.responseParameters));\n    errors.collect(cdk.propertyValidator('routeId', cdk.requiredValidator)(properties.routeId));\n    errors.collect(cdk.propertyValidator('routeId', cdk.validateString)(properties.routeId));\n    errors.collect(cdk.propertyValidator('routeResponseKey', cdk.requiredValidator)(properties.routeResponseKey));\n    errors.collect(cdk.propertyValidator('routeResponseKey', cdk.validateString)(properties.routeResponseKey));\n    return errors.wrap('supplied properties not correct for \"CfnRouteResponseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::RouteResponse` resource\n *\n * @param properties - the TypeScript properties of a `CfnRouteResponseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::RouteResponse` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRouteResponsePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRouteResponsePropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        RouteId: cdk.stringToCloudFormation(properties.routeId),\n        RouteResponseKey: cdk.stringToCloudFormation(properties.routeResponseKey),\n        ModelSelectionExpression: cdk.stringToCloudFormation(properties.modelSelectionExpression),\n        ResponseModels: cdk.objectToCloudFormation(properties.responseModels),\n        ResponseParameters: cdk.objectToCloudFormation(properties.responseParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRouteResponsePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteResponseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteResponseProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('routeId', 'RouteId', cfn_parse.FromCloudFormation.getString(properties.RouteId));\n    ret.addPropertyResult('routeResponseKey', 'RouteResponseKey', cfn_parse.FromCloudFormation.getString(properties.RouteResponseKey));\n    ret.addPropertyResult('modelSelectionExpression', 'ModelSelectionExpression', properties.ModelSelectionExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ModelSelectionExpression) : undefined);\n    ret.addPropertyResult('responseModels', 'ResponseModels', properties.ResponseModels != null ? cfn_parse.FromCloudFormation.getAny(properties.ResponseModels) : undefined);\n    ret.addPropertyResult('responseParameters', 'ResponseParameters', properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.ResponseParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRouteResponse extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::RouteResponse\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRouteResponse {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRouteResponsePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRouteResponse(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                              \n    public apiId: string;\n\n                                                                                                                                                                                                          \n    public routeId: string;\n\n                                                                                                                                                                                                                             \n    public routeResponseKey: string;\n\n                                                                                                                                                                                                                                                                                                       \n    public modelSelectionExpression: string | undefined;\n\n                                                                                                                                                                                                                                               \n    public responseModels: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    public responseParameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnRouteResponseProps) {\n        super(scope, id, { type: CfnRouteResponse.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'routeId', this);\n        cdk.requireProperty(props, 'routeResponseKey', this);\n\n        this.apiId = props.apiId;\n        this.routeId = props.routeId;\n        this.routeResponseKey = props.routeResponseKey;\n        this.modelSelectionExpression = props.modelSelectionExpression;\n        this.responseModels = props.responseModels;\n        this.responseParameters = props.responseParameters;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRouteResponse.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            routeId: this.routeId,\n            routeResponseKey: this.routeResponseKey,\n            modelSelectionExpression: this.modelSelectionExpression,\n            responseModels: this.responseModels,\n            responseParameters: this.responseParameters,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRouteResponsePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRouteResponse {\n                                                                                                                                                                                                                                                                          \n    export interface ParameterConstraintsProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly required: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParameterConstraintsProperty`\n *\n * @param properties - the TypeScript properties of a `ParameterConstraintsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRouteResponse_ParameterConstraintsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('required', cdk.requiredValidator)(properties.required));\n    errors.collect(cdk.propertyValidator('required', cdk.validateBoolean)(properties.required));\n    return errors.wrap('supplied properties not correct for \"ParameterConstraintsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::RouteResponse.ParameterConstraints` resource\n *\n * @param properties - the TypeScript properties of a `ParameterConstraintsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::RouteResponse.ParameterConstraints` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRouteResponseParameterConstraintsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRouteResponse_ParameterConstraintsPropertyValidator(properties).assertSuccess();\n    return {\n        Required: cdk.booleanToCloudFormation(properties.required),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRouteResponseParameterConstraintsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteResponse.ParameterConstraintsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteResponse.ParameterConstraintsProperty>();\n    ret.addPropertyResult('required', 'Required', cfn_parse.FromCloudFormation.getBoolean(properties.Required));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                   \nexport interface CfnStageProps {\n\n                                                                                                                                                                                              \n    readonly apiId: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly stageName: string;\n\n                                                                                                                                                                                                                                 \n    readonly accessLogSettings?: CfnStage.AccessLogSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    readonly accessPolicyId?: string;\n\n                                                                                                                                                                                                                                                                                          \n    readonly autoDeploy?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    readonly clientCertificateId?: string;\n\n                                                                                                                                                                                                                                   \n    readonly defaultRouteSettings?: CfnStage.RouteSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                           \n    readonly deploymentId?: string;\n\n                                                                                                                                                                                                                   \n    readonly description?: string;\n\n                                                                                                                                                                                                                \n    readonly routeSettings?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly stageVariables?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly tags?: any;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStageProps`\n *\n * @param properties - the TypeScript properties of a `CfnStageProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStagePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessLogSettings', CfnStage_AccessLogSettingsPropertyValidator)(properties.accessLogSettings));\n    errors.collect(cdk.propertyValidator('accessPolicyId', cdk.validateString)(properties.accessPolicyId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.requiredValidator)(properties.apiId));\n    errors.collect(cdk.propertyValidator('apiId', cdk.validateString)(properties.apiId));\n    errors.collect(cdk.propertyValidator('autoDeploy', cdk.validateBoolean)(properties.autoDeploy));\n    errors.collect(cdk.propertyValidator('clientCertificateId', cdk.validateString)(properties.clientCertificateId));\n    errors.collect(cdk.propertyValidator('defaultRouteSettings', CfnStage_RouteSettingsPropertyValidator)(properties.defaultRouteSettings));\n    errors.collect(cdk.propertyValidator('deploymentId', cdk.validateString)(properties.deploymentId));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('routeSettings', cdk.validateObject)(properties.routeSettings));\n    errors.collect(cdk.propertyValidator('stageName', cdk.requiredValidator)(properties.stageName));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    errors.collect(cdk.propertyValidator('stageVariables', cdk.validateObject)(properties.stageVariables));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnStageProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Stage` resource\n *\n * @param properties - the TypeScript properties of a `CfnStageProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Stage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStagePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStagePropsValidator(properties).assertSuccess();\n    return {\n        ApiId: cdk.stringToCloudFormation(properties.apiId),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n        AccessLogSettings: cfnStageAccessLogSettingsPropertyToCloudFormation(properties.accessLogSettings),\n        AccessPolicyId: cdk.stringToCloudFormation(properties.accessPolicyId),\n        AutoDeploy: cdk.booleanToCloudFormation(properties.autoDeploy),\n        ClientCertificateId: cdk.stringToCloudFormation(properties.clientCertificateId),\n        DefaultRouteSettings: cfnStageRouteSettingsPropertyToCloudFormation(properties.defaultRouteSettings),\n        DeploymentId: cdk.stringToCloudFormation(properties.deploymentId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        RouteSettings: cdk.objectToCloudFormation(properties.routeSettings),\n        StageVariables: cdk.objectToCloudFormation(properties.stageVariables),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStagePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStageProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStageProps>();\n    ret.addPropertyResult('apiId', 'ApiId', cfn_parse.FromCloudFormation.getString(properties.ApiId));\n    ret.addPropertyResult('stageName', 'StageName', cfn_parse.FromCloudFormation.getString(properties.StageName));\n    ret.addPropertyResult('accessLogSettings', 'AccessLogSettings', properties.AccessLogSettings != null ? CfnStageAccessLogSettingsPropertyFromCloudFormation(properties.AccessLogSettings) : undefined);\n    ret.addPropertyResult('accessPolicyId', 'AccessPolicyId', properties.AccessPolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.AccessPolicyId) : undefined);\n    ret.addPropertyResult('autoDeploy', 'AutoDeploy', properties.AutoDeploy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoDeploy) : undefined);\n    ret.addPropertyResult('clientCertificateId', 'ClientCertificateId', properties.ClientCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCertificateId) : undefined);\n    ret.addPropertyResult('defaultRouteSettings', 'DefaultRouteSettings', properties.DefaultRouteSettings != null ? CfnStageRouteSettingsPropertyFromCloudFormation(properties.DefaultRouteSettings) : undefined);\n    ret.addPropertyResult('deploymentId', 'DeploymentId', properties.DeploymentId != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentId) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('routeSettings', 'RouteSettings', properties.RouteSettings != null ? cfn_parse.FromCloudFormation.getAny(properties.RouteSettings) : undefined);\n    ret.addPropertyResult('stageVariables', 'StageVariables', properties.StageVariables != null ? cfn_parse.FromCloudFormation.getAny(properties.StageVariables) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStage extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::Stage\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStage {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStagePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStage(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                              \n    public apiId: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public stageName: string;\n\n                                                                                                                                                                                                                                 \n    public accessLogSettings: CfnStage.AccessLogSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    public accessPolicyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                          \n    public autoDeploy: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public clientCertificateId: string | undefined;\n\n                                                                                                                                                                                                                                   \n    public defaultRouteSettings: CfnStage.RouteSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                           \n    public deploymentId: string | undefined;\n\n                                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                                                \n    public routeSettings: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public stageVariables: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnStageProps) {\n        super(scope, id, { type: CfnStage.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'apiId', this);\n        cdk.requireProperty(props, 'stageName', this);\n\n        this.apiId = props.apiId;\n        this.stageName = props.stageName;\n        this.accessLogSettings = props.accessLogSettings;\n        this.accessPolicyId = props.accessPolicyId;\n        this.autoDeploy = props.autoDeploy;\n        this.clientCertificateId = props.clientCertificateId;\n        this.defaultRouteSettings = props.defaultRouteSettings;\n        this.deploymentId = props.deploymentId;\n        this.description = props.description;\n        this.routeSettings = props.routeSettings;\n        this.stageVariables = props.stageVariables;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ApiGatewayV2::Stage\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStage.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiId: this.apiId,\n            stageName: this.stageName,\n            accessLogSettings: this.accessLogSettings,\n            accessPolicyId: this.accessPolicyId,\n            autoDeploy: this.autoDeploy,\n            clientCertificateId: this.clientCertificateId,\n            defaultRouteSettings: this.defaultRouteSettings,\n            deploymentId: this.deploymentId,\n            description: this.description,\n            routeSettings: this.routeSettings,\n            stageVariables: this.stageVariables,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStagePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStage {\n                                                                                                                                                                                                                                                          \n    export interface AccessLogSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly destinationArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly format?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessLogSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStage_AccessLogSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationArn', cdk.validateString)(properties.destinationArn));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    return errors.wrap('supplied properties not correct for \"AccessLogSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Stage.AccessLogSettings` resource\n *\n * @param properties - the TypeScript properties of a `AccessLogSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Stage.AccessLogSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStageAccessLogSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStage_AccessLogSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),\n        Format: cdk.stringToCloudFormation(properties.format),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStageAccessLogSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStage.AccessLogSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStage.AccessLogSettingsProperty>();\n    ret.addPropertyResult('destinationArn', 'DestinationArn', properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : undefined);\n    ret.addPropertyResult('format', 'Format', properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStage {\n                                                                                                                                                                                                                                                         \n    export interface RouteSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly dataTraceEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly detailedMetricsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly loggingLevel?: string;\n                                                                                                                                                                                                                                                                                 \n        readonly throttlingBurstLimit?: number;\n                                                                                                                                                                                                                                                                               \n        readonly throttlingRateLimit?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RouteSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RouteSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStage_RouteSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataTraceEnabled', cdk.validateBoolean)(properties.dataTraceEnabled));\n    errors.collect(cdk.propertyValidator('detailedMetricsEnabled', cdk.validateBoolean)(properties.detailedMetricsEnabled));\n    errors.collect(cdk.propertyValidator('loggingLevel', cdk.validateString)(properties.loggingLevel));\n    errors.collect(cdk.propertyValidator('throttlingBurstLimit', cdk.validateNumber)(properties.throttlingBurstLimit));\n    errors.collect(cdk.propertyValidator('throttlingRateLimit', cdk.validateNumber)(properties.throttlingRateLimit));\n    return errors.wrap('supplied properties not correct for \"RouteSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Stage.RouteSettings` resource\n *\n * @param properties - the TypeScript properties of a `RouteSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::Stage.RouteSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStageRouteSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStage_RouteSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),\n        DetailedMetricsEnabled: cdk.booleanToCloudFormation(properties.detailedMetricsEnabled),\n        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),\n        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),\n        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStageRouteSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStage.RouteSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStage.RouteSettingsProperty>();\n    ret.addPropertyResult('dataTraceEnabled', 'DataTraceEnabled', properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : undefined);\n    ret.addPropertyResult('detailedMetricsEnabled', 'DetailedMetricsEnabled', properties.DetailedMetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DetailedMetricsEnabled) : undefined);\n    ret.addPropertyResult('loggingLevel', 'LoggingLevel', properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : undefined);\n    ret.addPropertyResult('throttlingBurstLimit', 'ThrottlingBurstLimit', properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : undefined);\n    ret.addPropertyResult('throttlingRateLimit', 'ThrottlingRateLimit', properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnVpcLinkProps {\n\n                                                                                                                                                                                                       \n    readonly name: string;\n\n                                                                                                                                                                                                                                   \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                                        \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                                                           \n    readonly tags?: any;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVpcLinkProps`\n *\n * @param properties - the TypeScript properties of a `CfnVpcLinkProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVpcLinkPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnVpcLinkProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApiGatewayV2::VpcLink` resource\n *\n * @param properties - the TypeScript properties of a `CfnVpcLinkProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApiGatewayV2::VpcLink` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVpcLinkPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVpcLinkPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVpcLinkPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVpcLinkProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVpcLinkProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnVpcLink extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApiGatewayV2::VpcLink\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVpcLink {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVpcLinkPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVpcLink(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                       \n    public name: string;\n\n                                                                                                                                                                                                                                   \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                                        \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnVpcLinkProps) {\n        super(scope, id, { type: CfnVpcLink.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'subnetIds', this);\n\n        this.name = props.name;\n        this.subnetIds = props.subnetIds;\n        this.securityGroupIds = props.securityGroupIds;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ApiGatewayV2::VpcLink\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVpcLink.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            subnetIds: this.subnetIds,\n            securityGroupIds: this.securityGroupIds,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVpcLinkPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
