{
  "version": 3,
  "sources": ["appflow.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:27.852Z\",\"fingerprint\":\"k7PFCA5+Kqc/sf4vfuHKExdJLd/YgmbM2wqmcqN5t9A=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                    \nexport interface CfnConnectorProfileProps {\n\n                                                                                                                                                                                                                                                             \n    readonly connectionMode: string;\n\n                                                                                                                                                                                                                                                                                                            \n    readonly connectorProfileName: string;\n\n                                                                                                                                                                                                                                                               \n    readonly connectorType: string;\n\n                                                                                                                                                                                                                                                                     \n    readonly connectorProfileConfig?: CfnConnectorProfile.ConnectorProfileConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly kmsArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConnectorProfileProps`\n *\n * @param properties - the TypeScript properties of a `CfnConnectorProfileProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfilePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionMode', cdk.requiredValidator)(properties.connectionMode));\n    errors.collect(cdk.propertyValidator('connectionMode', cdk.validateString)(properties.connectionMode));\n    errors.collect(cdk.propertyValidator('connectorProfileConfig', CfnConnectorProfile_ConnectorProfileConfigPropertyValidator)(properties.connectorProfileConfig));\n    errors.collect(cdk.propertyValidator('connectorProfileName', cdk.requiredValidator)(properties.connectorProfileName));\n    errors.collect(cdk.propertyValidator('connectorProfileName', cdk.validateString)(properties.connectorProfileName));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.requiredValidator)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.validateString)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('kmsArn', cdk.validateString)(properties.kmsArn));\n    return errors.wrap('supplied properties not correct for \"CfnConnectorProfileProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile` resource\n *\n * @param properties - the TypeScript properties of a `CfnConnectorProfileProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfilePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfilePropsValidator(properties).assertSuccess();\n    return {\n        ConnectionMode: cdk.stringToCloudFormation(properties.connectionMode),\n        ConnectorProfileName: cdk.stringToCloudFormation(properties.connectorProfileName),\n        ConnectorType: cdk.stringToCloudFormation(properties.connectorType),\n        ConnectorProfileConfig: cfnConnectorProfileConnectorProfileConfigPropertyToCloudFormation(properties.connectorProfileConfig),\n        KMSArn: cdk.stringToCloudFormation(properties.kmsArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfilePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfileProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfileProps>();\n    ret.addPropertyResult('connectionMode', 'ConnectionMode', cfn_parse.FromCloudFormation.getString(properties.ConnectionMode));\n    ret.addPropertyResult('connectorProfileName', 'ConnectorProfileName', cfn_parse.FromCloudFormation.getString(properties.ConnectorProfileName));\n    ret.addPropertyResult('connectorType', 'ConnectorType', cfn_parse.FromCloudFormation.getString(properties.ConnectorType));\n    ret.addPropertyResult('connectorProfileConfig', 'ConnectorProfileConfig', properties.ConnectorProfileConfig != null ? CfnConnectorProfileConnectorProfileConfigPropertyFromCloudFormation(properties.ConnectorProfileConfig) : undefined);\n    ret.addPropertyResult('kmsArn', 'KMSArn', properties.KMSArn != null ? cfn_parse.FromCloudFormation.getString(properties.KMSArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConnectorProfile extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppFlow::ConnectorProfile\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConnectorProfile {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConnectorProfilePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConnectorProfile(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                   \n    public readonly attrConnectorProfileArn: string;\n\n                                                                                                                                          \n    public readonly attrCredentialsArn: string;\n\n                                                                                                                                                                                                                                                             \n    public connectionMode: string;\n\n                                                                                                                                                                                                                                                                                                            \n    public connectorProfileName: string;\n\n                                                                                                                                                                                                                                                               \n    public connectorType: string;\n\n                                                                                                                                                                                                                                                                     \n    public connectorProfileConfig: CfnConnectorProfile.ConnectorProfileConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public kmsArn: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnConnectorProfileProps) {\n        super(scope, id, { type: CfnConnectorProfile.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'connectionMode', this);\n        cdk.requireProperty(props, 'connectorProfileName', this);\n        cdk.requireProperty(props, 'connectorType', this);\n        this.attrConnectorProfileArn = cdk.Token.asString(this.getAtt('ConnectorProfileArn'));\n        this.attrCredentialsArn = cdk.Token.asString(this.getAtt('CredentialsArn'));\n\n        this.connectionMode = props.connectionMode;\n        this.connectorProfileName = props.connectorProfileName;\n        this.connectorType = props.connectorType;\n        this.connectorProfileConfig = props.connectorProfileConfig;\n        this.kmsArn = props.kmsArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConnectorProfile.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            connectionMode: this.connectionMode,\n            connectorProfileName: this.connectorProfileName,\n            connectorType: this.connectorType,\n            connectorProfileConfig: this.connectorProfileConfig,\n            kmsArn: this.kmsArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConnectorProfilePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                \n    export interface AmplitudeConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly apiKey: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly secretKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AmplitudeConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `AmplitudeConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiKey', cdk.requiredValidator)(properties.apiKey));\n    errors.collect(cdk.propertyValidator('apiKey', cdk.validateString)(properties.apiKey));\n    errors.collect(cdk.propertyValidator('secretKey', cdk.requiredValidator)(properties.secretKey));\n    errors.collect(cdk.propertyValidator('secretKey', cdk.validateString)(properties.secretKey));\n    return errors.wrap('supplied properties not correct for \"AmplitudeConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.AmplitudeConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `AmplitudeConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.AmplitudeConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileAmplitudeConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        ApiKey: cdk.stringToCloudFormation(properties.apiKey),\n        SecretKey: cdk.stringToCloudFormation(properties.secretKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileAmplitudeConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('apiKey', 'ApiKey', cfn_parse.FromCloudFormation.getString(properties.ApiKey));\n    ret.addPropertyResult('secretKey', 'SecretKey', cfn_parse.FromCloudFormation.getString(properties.SecretKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface ConnectorOAuthRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly authCode?: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly redirectUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectorOAuthRequestProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectorOAuthRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authCode', cdk.validateString)(properties.authCode));\n    errors.collect(cdk.propertyValidator('redirectUri', cdk.validateString)(properties.redirectUri));\n    return errors.wrap('supplied properties not correct for \"ConnectorOAuthRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorOAuthRequest` resource\n *\n * @param properties - the TypeScript properties of a `ConnectorOAuthRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorOAuthRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileConnectorOAuthRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator(properties).assertSuccess();\n    return {\n        AuthCode: cdk.stringToCloudFormation(properties.authCode),\n        RedirectUri: cdk.stringToCloudFormation(properties.redirectUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileConnectorOAuthRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ConnectorOAuthRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ConnectorOAuthRequestProperty>();\n    ret.addPropertyResult('authCode', 'AuthCode', properties.AuthCode != null ? cfn_parse.FromCloudFormation.getString(properties.AuthCode) : undefined);\n    ret.addPropertyResult('redirectUri', 'RedirectUri', properties.RedirectUri != null ? cfn_parse.FromCloudFormation.getString(properties.RedirectUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                     \n    export interface ConnectorProfileConfigProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly connectorProfileCredentials: CfnConnectorProfile.ConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly connectorProfileProperties?: CfnConnectorProfile.ConnectorProfilePropertiesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectorProfileConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectorProfileConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ConnectorProfileConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectorProfileCredentials', cdk.requiredValidator)(properties.connectorProfileCredentials));\n    errors.collect(cdk.propertyValidator('connectorProfileCredentials', CfnConnectorProfile_ConnectorProfileCredentialsPropertyValidator)(properties.connectorProfileCredentials));\n    errors.collect(cdk.propertyValidator('connectorProfileProperties', CfnConnectorProfile_ConnectorProfilePropertiesPropertyValidator)(properties.connectorProfileProperties));\n    return errors.wrap('supplied properties not correct for \"ConnectorProfileConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorProfileConfig` resource\n *\n * @param properties - the TypeScript properties of a `ConnectorProfileConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorProfileConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileConnectorProfileConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ConnectorProfileConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectorProfileCredentials: cfnConnectorProfileConnectorProfileCredentialsPropertyToCloudFormation(properties.connectorProfileCredentials),\n        ConnectorProfileProperties: cfnConnectorProfileConnectorProfilePropertiesPropertyToCloudFormation(properties.connectorProfileProperties),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileConnectorProfileConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ConnectorProfileConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ConnectorProfileConfigProperty>();\n    ret.addPropertyResult('connectorProfileCredentials', 'ConnectorProfileCredentials', CfnConnectorProfileConnectorProfileCredentialsPropertyFromCloudFormation(properties.ConnectorProfileCredentials));\n    ret.addPropertyResult('connectorProfileProperties', 'ConnectorProfileProperties', properties.ConnectorProfileProperties != null ? CfnConnectorProfileConnectorProfilePropertiesPropertyFromCloudFormation(properties.ConnectorProfileProperties) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface ConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly amplitude?: CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly datadog?: CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly dynatrace?: CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly googleAnalytics?: CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly inforNexus?: CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly marketo?: CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly redshift?: CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly sapoData?: CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly salesforce?: CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly serviceNow?: CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly singular?: CfnConnectorProfile.SingularConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly slack?: CfnConnectorProfile.SlackConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly snowflake?: CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly trendmicro?: CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly veeva?: CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly zendesk?: CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amplitude', CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyValidator)(properties.amplitude));\n    errors.collect(cdk.propertyValidator('datadog', CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyValidator)(properties.datadog));\n    errors.collect(cdk.propertyValidator('dynatrace', CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyValidator)(properties.dynatrace));\n    errors.collect(cdk.propertyValidator('googleAnalytics', CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyValidator)(properties.googleAnalytics));\n    errors.collect(cdk.propertyValidator('inforNexus', CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyValidator)(properties.inforNexus));\n    errors.collect(cdk.propertyValidator('marketo', CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyValidator)(properties.marketo));\n    errors.collect(cdk.propertyValidator('redshift', CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyValidator)(properties.redshift));\n    errors.collect(cdk.propertyValidator('sapoData', CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyValidator)(properties.sapoData));\n    errors.collect(cdk.propertyValidator('salesforce', CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyValidator)(properties.salesforce));\n    errors.collect(cdk.propertyValidator('serviceNow', CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyValidator)(properties.serviceNow));\n    errors.collect(cdk.propertyValidator('singular', CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyValidator)(properties.singular));\n    errors.collect(cdk.propertyValidator('slack', CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyValidator)(properties.slack));\n    errors.collect(cdk.propertyValidator('snowflake', CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyValidator)(properties.snowflake));\n    errors.collect(cdk.propertyValidator('trendmicro', CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyValidator)(properties.trendmicro));\n    errors.collect(cdk.propertyValidator('veeva', CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyValidator)(properties.veeva));\n    errors.collect(cdk.propertyValidator('zendesk', CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyValidator)(properties.zendesk));\n    return errors.wrap('supplied properties not correct for \"ConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `ConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        Amplitude: cfnConnectorProfileAmplitudeConnectorProfileCredentialsPropertyToCloudFormation(properties.amplitude),\n        Datadog: cfnConnectorProfileDatadogConnectorProfileCredentialsPropertyToCloudFormation(properties.datadog),\n        Dynatrace: cfnConnectorProfileDynatraceConnectorProfileCredentialsPropertyToCloudFormation(properties.dynatrace),\n        GoogleAnalytics: cfnConnectorProfileGoogleAnalyticsConnectorProfileCredentialsPropertyToCloudFormation(properties.googleAnalytics),\n        InforNexus: cfnConnectorProfileInforNexusConnectorProfileCredentialsPropertyToCloudFormation(properties.inforNexus),\n        Marketo: cfnConnectorProfileMarketoConnectorProfileCredentialsPropertyToCloudFormation(properties.marketo),\n        Redshift: cfnConnectorProfileRedshiftConnectorProfileCredentialsPropertyToCloudFormation(properties.redshift),\n        SAPOData: cfnConnectorProfileSAPODataConnectorProfileCredentialsPropertyToCloudFormation(properties.sapoData),\n        Salesforce: cfnConnectorProfileSalesforceConnectorProfileCredentialsPropertyToCloudFormation(properties.salesforce),\n        ServiceNow: cfnConnectorProfileServiceNowConnectorProfileCredentialsPropertyToCloudFormation(properties.serviceNow),\n        Singular: cfnConnectorProfileSingularConnectorProfileCredentialsPropertyToCloudFormation(properties.singular),\n        Slack: cfnConnectorProfileSlackConnectorProfileCredentialsPropertyToCloudFormation(properties.slack),\n        Snowflake: cfnConnectorProfileSnowflakeConnectorProfileCredentialsPropertyToCloudFormation(properties.snowflake),\n        Trendmicro: cfnConnectorProfileTrendmicroConnectorProfileCredentialsPropertyToCloudFormation(properties.trendmicro),\n        Veeva: cfnConnectorProfileVeevaConnectorProfileCredentialsPropertyToCloudFormation(properties.veeva),\n        Zendesk: cfnConnectorProfileZendeskConnectorProfileCredentialsPropertyToCloudFormation(properties.zendesk),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('amplitude', 'Amplitude', properties.Amplitude != null ? CfnConnectorProfileAmplitudeConnectorProfileCredentialsPropertyFromCloudFormation(properties.Amplitude) : undefined);\n    ret.addPropertyResult('datadog', 'Datadog', properties.Datadog != null ? CfnConnectorProfileDatadogConnectorProfileCredentialsPropertyFromCloudFormation(properties.Datadog) : undefined);\n    ret.addPropertyResult('dynatrace', 'Dynatrace', properties.Dynatrace != null ? CfnConnectorProfileDynatraceConnectorProfileCredentialsPropertyFromCloudFormation(properties.Dynatrace) : undefined);\n    ret.addPropertyResult('googleAnalytics', 'GoogleAnalytics', properties.GoogleAnalytics != null ? CfnConnectorProfileGoogleAnalyticsConnectorProfileCredentialsPropertyFromCloudFormation(properties.GoogleAnalytics) : undefined);\n    ret.addPropertyResult('inforNexus', 'InforNexus', properties.InforNexus != null ? CfnConnectorProfileInforNexusConnectorProfileCredentialsPropertyFromCloudFormation(properties.InforNexus) : undefined);\n    ret.addPropertyResult('marketo', 'Marketo', properties.Marketo != null ? CfnConnectorProfileMarketoConnectorProfileCredentialsPropertyFromCloudFormation(properties.Marketo) : undefined);\n    ret.addPropertyResult('redshift', 'Redshift', properties.Redshift != null ? CfnConnectorProfileRedshiftConnectorProfileCredentialsPropertyFromCloudFormation(properties.Redshift) : undefined);\n    ret.addPropertyResult('sapoData', 'SAPOData', properties.SAPOData != null ? CfnConnectorProfileSAPODataConnectorProfileCredentialsPropertyFromCloudFormation(properties.SAPOData) : undefined);\n    ret.addPropertyResult('salesforce', 'Salesforce', properties.Salesforce != null ? CfnConnectorProfileSalesforceConnectorProfileCredentialsPropertyFromCloudFormation(properties.Salesforce) : undefined);\n    ret.addPropertyResult('serviceNow', 'ServiceNow', properties.ServiceNow != null ? CfnConnectorProfileServiceNowConnectorProfileCredentialsPropertyFromCloudFormation(properties.ServiceNow) : undefined);\n    ret.addPropertyResult('singular', 'Singular', properties.Singular != null ? CfnConnectorProfileSingularConnectorProfileCredentialsPropertyFromCloudFormation(properties.Singular) : undefined);\n    ret.addPropertyResult('slack', 'Slack', properties.Slack != null ? CfnConnectorProfileSlackConnectorProfileCredentialsPropertyFromCloudFormation(properties.Slack) : undefined);\n    ret.addPropertyResult('snowflake', 'Snowflake', properties.Snowflake != null ? CfnConnectorProfileSnowflakeConnectorProfileCredentialsPropertyFromCloudFormation(properties.Snowflake) : undefined);\n    ret.addPropertyResult('trendmicro', 'Trendmicro', properties.Trendmicro != null ? CfnConnectorProfileTrendmicroConnectorProfileCredentialsPropertyFromCloudFormation(properties.Trendmicro) : undefined);\n    ret.addPropertyResult('veeva', 'Veeva', properties.Veeva != null ? CfnConnectorProfileVeevaConnectorProfileCredentialsPropertyFromCloudFormation(properties.Veeva) : undefined);\n    ret.addPropertyResult('zendesk', 'Zendesk', properties.Zendesk != null ? CfnConnectorProfileZendeskConnectorProfileCredentialsPropertyFromCloudFormation(properties.Zendesk) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                \n    export interface ConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                           \n        readonly datadog?: CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly dynatrace?: CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly inforNexus?: CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                           \n        readonly marketo?: CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly redshift?: CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly sapoData?: CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly salesforce?: CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly serviceNow?: CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                       \n        readonly slack?: CfnConnectorProfile.SlackConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly snowflake?: CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                       \n        readonly veeva?: CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                           \n        readonly zendesk?: CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('datadog', CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyValidator)(properties.datadog));\n    errors.collect(cdk.propertyValidator('dynatrace', CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyValidator)(properties.dynatrace));\n    errors.collect(cdk.propertyValidator('inforNexus', CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyValidator)(properties.inforNexus));\n    errors.collect(cdk.propertyValidator('marketo', CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyValidator)(properties.marketo));\n    errors.collect(cdk.propertyValidator('redshift', CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyValidator)(properties.redshift));\n    errors.collect(cdk.propertyValidator('sapoData', CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyValidator)(properties.sapoData));\n    errors.collect(cdk.propertyValidator('salesforce', CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyValidator)(properties.salesforce));\n    errors.collect(cdk.propertyValidator('serviceNow', CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyValidator)(properties.serviceNow));\n    errors.collect(cdk.propertyValidator('slack', CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyValidator)(properties.slack));\n    errors.collect(cdk.propertyValidator('snowflake', CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyValidator)(properties.snowflake));\n    errors.collect(cdk.propertyValidator('veeva', CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyValidator)(properties.veeva));\n    errors.collect(cdk.propertyValidator('zendesk', CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyValidator)(properties.zendesk));\n    return errors.wrap('supplied properties not correct for \"ConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `ConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Datadog: cfnConnectorProfileDatadogConnectorProfilePropertiesPropertyToCloudFormation(properties.datadog),\n        Dynatrace: cfnConnectorProfileDynatraceConnectorProfilePropertiesPropertyToCloudFormation(properties.dynatrace),\n        InforNexus: cfnConnectorProfileInforNexusConnectorProfilePropertiesPropertyToCloudFormation(properties.inforNexus),\n        Marketo: cfnConnectorProfileMarketoConnectorProfilePropertiesPropertyToCloudFormation(properties.marketo),\n        Redshift: cfnConnectorProfileRedshiftConnectorProfilePropertiesPropertyToCloudFormation(properties.redshift),\n        SAPOData: cfnConnectorProfileSAPODataConnectorProfilePropertiesPropertyToCloudFormation(properties.sapoData),\n        Salesforce: cfnConnectorProfileSalesforceConnectorProfilePropertiesPropertyToCloudFormation(properties.salesforce),\n        ServiceNow: cfnConnectorProfileServiceNowConnectorProfilePropertiesPropertyToCloudFormation(properties.serviceNow),\n        Slack: cfnConnectorProfileSlackConnectorProfilePropertiesPropertyToCloudFormation(properties.slack),\n        Snowflake: cfnConnectorProfileSnowflakeConnectorProfilePropertiesPropertyToCloudFormation(properties.snowflake),\n        Veeva: cfnConnectorProfileVeevaConnectorProfilePropertiesPropertyToCloudFormation(properties.veeva),\n        Zendesk: cfnConnectorProfileZendeskConnectorProfilePropertiesPropertyToCloudFormation(properties.zendesk),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('datadog', 'Datadog', properties.Datadog != null ? CfnConnectorProfileDatadogConnectorProfilePropertiesPropertyFromCloudFormation(properties.Datadog) : undefined);\n    ret.addPropertyResult('dynatrace', 'Dynatrace', properties.Dynatrace != null ? CfnConnectorProfileDynatraceConnectorProfilePropertiesPropertyFromCloudFormation(properties.Dynatrace) : undefined);\n    ret.addPropertyResult('inforNexus', 'InforNexus', properties.InforNexus != null ? CfnConnectorProfileInforNexusConnectorProfilePropertiesPropertyFromCloudFormation(properties.InforNexus) : undefined);\n    ret.addPropertyResult('marketo', 'Marketo', properties.Marketo != null ? CfnConnectorProfileMarketoConnectorProfilePropertiesPropertyFromCloudFormation(properties.Marketo) : undefined);\n    ret.addPropertyResult('redshift', 'Redshift', properties.Redshift != null ? CfnConnectorProfileRedshiftConnectorProfilePropertiesPropertyFromCloudFormation(properties.Redshift) : undefined);\n    ret.addPropertyResult('sapoData', 'SAPOData', properties.SAPOData != null ? CfnConnectorProfileSAPODataConnectorProfilePropertiesPropertyFromCloudFormation(properties.SAPOData) : undefined);\n    ret.addPropertyResult('salesforce', 'Salesforce', properties.Salesforce != null ? CfnConnectorProfileSalesforceConnectorProfilePropertiesPropertyFromCloudFormation(properties.Salesforce) : undefined);\n    ret.addPropertyResult('serviceNow', 'ServiceNow', properties.ServiceNow != null ? CfnConnectorProfileServiceNowConnectorProfilePropertiesPropertyFromCloudFormation(properties.ServiceNow) : undefined);\n    ret.addPropertyResult('slack', 'Slack', properties.Slack != null ? CfnConnectorProfileSlackConnectorProfilePropertiesPropertyFromCloudFormation(properties.Slack) : undefined);\n    ret.addPropertyResult('snowflake', 'Snowflake', properties.Snowflake != null ? CfnConnectorProfileSnowflakeConnectorProfilePropertiesPropertyFromCloudFormation(properties.Snowflake) : undefined);\n    ret.addPropertyResult('veeva', 'Veeva', properties.Veeva != null ? CfnConnectorProfileVeevaConnectorProfilePropertiesPropertyFromCloudFormation(properties.Veeva) : undefined);\n    ret.addPropertyResult('zendesk', 'Zendesk', properties.Zendesk != null ? CfnConnectorProfileZendeskConnectorProfilePropertiesPropertyFromCloudFormation(properties.Zendesk) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                  \n    export interface DatadogConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly apiKey: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly applicationKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DatadogConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `DatadogConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiKey', cdk.requiredValidator)(properties.apiKey));\n    errors.collect(cdk.propertyValidator('apiKey', cdk.validateString)(properties.apiKey));\n    errors.collect(cdk.propertyValidator('applicationKey', cdk.requiredValidator)(properties.applicationKey));\n    errors.collect(cdk.propertyValidator('applicationKey', cdk.validateString)(properties.applicationKey));\n    return errors.wrap('supplied properties not correct for \"DatadogConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DatadogConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `DatadogConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DatadogConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileDatadogConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        ApiKey: cdk.stringToCloudFormation(properties.apiKey),\n        ApplicationKey: cdk.stringToCloudFormation(properties.applicationKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileDatadogConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('apiKey', 'ApiKey', cfn_parse.FromCloudFormation.getString(properties.ApiKey));\n    ret.addPropertyResult('applicationKey', 'ApplicationKey', cfn_parse.FromCloudFormation.getString(properties.ApplicationKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                       \n    export interface DatadogConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DatadogConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `DatadogConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"DatadogConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DatadogConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `DatadogConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DatadogConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileDatadogConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileDatadogConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                \n    export interface DynatraceConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly apiToken: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynatraceConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `DynatraceConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiToken', cdk.requiredValidator)(properties.apiToken));\n    errors.collect(cdk.propertyValidator('apiToken', cdk.validateString)(properties.apiToken));\n    return errors.wrap('supplied properties not correct for \"DynatraceConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DynatraceConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `DynatraceConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DynatraceConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileDynatraceConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        ApiToken: cdk.stringToCloudFormation(properties.apiToken),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileDynatraceConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('apiToken', 'ApiToken', cfn_parse.FromCloudFormation.getString(properties.ApiToken));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                             \n    export interface DynatraceConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynatraceConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `DynatraceConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"DynatraceConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DynatraceConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `DynatraceConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.DynatraceConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileDynatraceConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileDynatraceConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface GoogleAnalyticsConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly accessToken?: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly clientId: string;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly clientSecret: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly connectorOAuthRequest?: CfnConnectorProfile.ConnectorOAuthRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly refreshToken?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GoogleAnalyticsConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `GoogleAnalyticsConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('clientId', cdk.requiredValidator)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.requiredValidator)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.validateString)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('connectorOAuthRequest', CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator)(properties.connectorOAuthRequest));\n    errors.collect(cdk.propertyValidator('refreshToken', cdk.validateString)(properties.refreshToken));\n    return errors.wrap('supplied properties not correct for \"GoogleAnalyticsConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.GoogleAnalyticsConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `GoogleAnalyticsConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.GoogleAnalyticsConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileGoogleAnalyticsConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        ClientSecret: cdk.stringToCloudFormation(properties.clientSecret),\n        ConnectorOAuthRequest: cfnConnectorProfileConnectorOAuthRequestPropertyToCloudFormation(properties.connectorOAuthRequest),\n        RefreshToken: cdk.stringToCloudFormation(properties.refreshToken),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileGoogleAnalyticsConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('clientId', 'ClientId', cfn_parse.FromCloudFormation.getString(properties.ClientId));\n    ret.addPropertyResult('clientSecret', 'ClientSecret', cfn_parse.FromCloudFormation.getString(properties.ClientSecret));\n    ret.addPropertyResult('connectorOAuthRequest', 'ConnectorOAuthRequest', properties.ConnectorOAuthRequest != null ? CfnConnectorProfileConnectorOAuthRequestPropertyFromCloudFormation(properties.ConnectorOAuthRequest) : undefined);\n    ret.addPropertyResult('refreshToken', 'RefreshToken', properties.RefreshToken != null ? cfn_parse.FromCloudFormation.getString(properties.RefreshToken) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface InforNexusConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly accessKeyId: string;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly datakey: string;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly secretAccessKey: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly userId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InforNexusConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `InforNexusConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessKeyId', cdk.requiredValidator)(properties.accessKeyId));\n    errors.collect(cdk.propertyValidator('accessKeyId', cdk.validateString)(properties.accessKeyId));\n    errors.collect(cdk.propertyValidator('datakey', cdk.requiredValidator)(properties.datakey));\n    errors.collect(cdk.propertyValidator('datakey', cdk.validateString)(properties.datakey));\n    errors.collect(cdk.propertyValidator('secretAccessKey', cdk.requiredValidator)(properties.secretAccessKey));\n    errors.collect(cdk.propertyValidator('secretAccessKey', cdk.validateString)(properties.secretAccessKey));\n    errors.collect(cdk.propertyValidator('userId', cdk.requiredValidator)(properties.userId));\n    errors.collect(cdk.propertyValidator('userId', cdk.validateString)(properties.userId));\n    return errors.wrap('supplied properties not correct for \"InforNexusConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.InforNexusConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `InforNexusConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.InforNexusConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileInforNexusConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessKeyId: cdk.stringToCloudFormation(properties.accessKeyId),\n        Datakey: cdk.stringToCloudFormation(properties.datakey),\n        SecretAccessKey: cdk.stringToCloudFormation(properties.secretAccessKey),\n        UserId: cdk.stringToCloudFormation(properties.userId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileInforNexusConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('accessKeyId', 'AccessKeyId', cfn_parse.FromCloudFormation.getString(properties.AccessKeyId));\n    ret.addPropertyResult('datakey', 'Datakey', cfn_parse.FromCloudFormation.getString(properties.Datakey));\n    ret.addPropertyResult('secretAccessKey', 'SecretAccessKey', cfn_parse.FromCloudFormation.getString(properties.SecretAccessKey));\n    ret.addPropertyResult('userId', 'UserId', cfn_parse.FromCloudFormation.getString(properties.UserId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface InforNexusConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InforNexusConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `InforNexusConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"InforNexusConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.InforNexusConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `InforNexusConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.InforNexusConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileInforNexusConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileInforNexusConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                          \n    export interface MarketoConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly accessToken?: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly clientId: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly clientSecret: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly connectorOAuthRequest?: CfnConnectorProfile.ConnectorOAuthRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MarketoConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `MarketoConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('clientId', cdk.requiredValidator)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.requiredValidator)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.validateString)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('connectorOAuthRequest', CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator)(properties.connectorOAuthRequest));\n    return errors.wrap('supplied properties not correct for \"MarketoConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.MarketoConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `MarketoConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.MarketoConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileMarketoConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        ClientSecret: cdk.stringToCloudFormation(properties.clientSecret),\n        ConnectorOAuthRequest: cfnConnectorProfileConnectorOAuthRequestPropertyToCloudFormation(properties.connectorOAuthRequest),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileMarketoConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('clientId', 'ClientId', cfn_parse.FromCloudFormation.getString(properties.ClientId));\n    ret.addPropertyResult('clientSecret', 'ClientSecret', cfn_parse.FromCloudFormation.getString(properties.ClientSecret));\n    ret.addPropertyResult('connectorOAuthRequest', 'ConnectorOAuthRequest', properties.ConnectorOAuthRequest != null ? CfnConnectorProfileConnectorOAuthRequestPropertyFromCloudFormation(properties.ConnectorOAuthRequest) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                               \n    export interface MarketoConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MarketoConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `MarketoConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"MarketoConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.MarketoConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `MarketoConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.MarketoConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileMarketoConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileMarketoConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                      \n    export interface OAuthPropertiesProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly authCodeUrl?: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly oAuthScopes?: string[];\n                                                                                                                                                                                                                                                                                                      \n        readonly tokenUrl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OAuthPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `OAuthPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_OAuthPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authCodeUrl', cdk.validateString)(properties.authCodeUrl));\n    errors.collect(cdk.propertyValidator('oAuthScopes', cdk.listValidator(cdk.validateString))(properties.oAuthScopes));\n    errors.collect(cdk.propertyValidator('tokenUrl', cdk.validateString)(properties.tokenUrl));\n    return errors.wrap('supplied properties not correct for \"OAuthPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.OAuthProperties` resource\n *\n * @param properties - the TypeScript properties of a `OAuthPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.OAuthProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileOAuthPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_OAuthPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        AuthCodeUrl: cdk.stringToCloudFormation(properties.authCodeUrl),\n        OAuthScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.oAuthScopes),\n        TokenUrl: cdk.stringToCloudFormation(properties.tokenUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileOAuthPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.OAuthPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.OAuthPropertiesProperty>();\n    ret.addPropertyResult('authCodeUrl', 'AuthCodeUrl', properties.AuthCodeUrl != null ? cfn_parse.FromCloudFormation.getString(properties.AuthCodeUrl) : undefined);\n    ret.addPropertyResult('oAuthScopes', 'OAuthScopes', properties.OAuthScopes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OAuthScopes) : undefined);\n    ret.addPropertyResult('tokenUrl', 'TokenUrl', properties.TokenUrl != null ? cfn_parse.FromCloudFormation.getString(properties.TokenUrl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface RedshiftConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly password: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedshiftConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `RedshiftConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"RedshiftConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.RedshiftConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `RedshiftConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.RedshiftConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileRedshiftConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileRedshiftConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                \n    export interface RedshiftConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly bucketPrefix?: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly databaseUrl: string;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly roleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedshiftConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `RedshiftConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('databaseUrl', cdk.requiredValidator)(properties.databaseUrl));\n    errors.collect(cdk.propertyValidator('databaseUrl', cdk.validateString)(properties.databaseUrl));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"RedshiftConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.RedshiftConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `RedshiftConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.RedshiftConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileRedshiftConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        DatabaseUrl: cdk.stringToCloudFormation(properties.databaseUrl),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileRedshiftConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('databaseUrl', 'DatabaseUrl', cfn_parse.FromCloudFormation.getString(properties.DatabaseUrl));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                          \n    export interface SAPODataConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly basicAuthCredentials?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly oAuthCredentials?: any | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SAPODataConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `SAPODataConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('basicAuthCredentials', cdk.validateObject)(properties.basicAuthCredentials));\n    errors.collect(cdk.propertyValidator('oAuthCredentials', cdk.validateObject)(properties.oAuthCredentials));\n    return errors.wrap('supplied properties not correct for \"SAPODataConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SAPODataConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `SAPODataConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SAPODataConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSAPODataConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        BasicAuthCredentials: cdk.objectToCloudFormation(properties.basicAuthCredentials),\n        OAuthCredentials: cdk.objectToCloudFormation(properties.oAuthCredentials),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSAPODataConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('basicAuthCredentials', 'BasicAuthCredentials', properties.BasicAuthCredentials != null ? cfn_parse.FromCloudFormation.getAny(properties.BasicAuthCredentials) : undefined);\n    ret.addPropertyResult('oAuthCredentials', 'OAuthCredentials', properties.OAuthCredentials != null ? cfn_parse.FromCloudFormation.getAny(properties.OAuthCredentials) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                         \n    export interface SAPODataConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly applicationHostUrl?: string;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly applicationServicePath?: string;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly clientNumber?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly logonLanguage?: string;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly oAuthProperties?: CfnConnectorProfile.OAuthPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly portNumber?: number;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly privateLinkServiceName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SAPODataConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SAPODataConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationHostUrl', cdk.validateString)(properties.applicationHostUrl));\n    errors.collect(cdk.propertyValidator('applicationServicePath', cdk.validateString)(properties.applicationServicePath));\n    errors.collect(cdk.propertyValidator('clientNumber', cdk.validateString)(properties.clientNumber));\n    errors.collect(cdk.propertyValidator('logonLanguage', cdk.validateString)(properties.logonLanguage));\n    errors.collect(cdk.propertyValidator('oAuthProperties', CfnConnectorProfile_OAuthPropertiesPropertyValidator)(properties.oAuthProperties));\n    errors.collect(cdk.propertyValidator('portNumber', cdk.validateNumber)(properties.portNumber));\n    errors.collect(cdk.propertyValidator('privateLinkServiceName', cdk.validateString)(properties.privateLinkServiceName));\n    return errors.wrap('supplied properties not correct for \"SAPODataConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SAPODataConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `SAPODataConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SAPODataConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSAPODataConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        ApplicationHostUrl: cdk.stringToCloudFormation(properties.applicationHostUrl),\n        ApplicationServicePath: cdk.stringToCloudFormation(properties.applicationServicePath),\n        ClientNumber: cdk.stringToCloudFormation(properties.clientNumber),\n        LogonLanguage: cdk.stringToCloudFormation(properties.logonLanguage),\n        OAuthProperties: cfnConnectorProfileOAuthPropertiesPropertyToCloudFormation(properties.oAuthProperties),\n        PortNumber: cdk.numberToCloudFormation(properties.portNumber),\n        PrivateLinkServiceName: cdk.stringToCloudFormation(properties.privateLinkServiceName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSAPODataConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('applicationHostUrl', 'ApplicationHostUrl', properties.ApplicationHostUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationHostUrl) : undefined);\n    ret.addPropertyResult('applicationServicePath', 'ApplicationServicePath', properties.ApplicationServicePath != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationServicePath) : undefined);\n    ret.addPropertyResult('clientNumber', 'ClientNumber', properties.ClientNumber != null ? cfn_parse.FromCloudFormation.getString(properties.ClientNumber) : undefined);\n    ret.addPropertyResult('logonLanguage', 'LogonLanguage', properties.LogonLanguage != null ? cfn_parse.FromCloudFormation.getString(properties.LogonLanguage) : undefined);\n    ret.addPropertyResult('oAuthProperties', 'OAuthProperties', properties.OAuthProperties != null ? CfnConnectorProfileOAuthPropertiesPropertyFromCloudFormation(properties.OAuthProperties) : undefined);\n    ret.addPropertyResult('portNumber', 'PortNumber', properties.PortNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.PortNumber) : undefined);\n    ret.addPropertyResult('privateLinkServiceName', 'PrivateLinkServiceName', properties.PrivateLinkServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateLinkServiceName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface SalesforceConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly accessToken?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly clientCredentialsArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly connectorOAuthRequest?: CfnConnectorProfile.ConnectorOAuthRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly refreshToken?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SalesforceConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `SalesforceConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('clientCredentialsArn', cdk.validateString)(properties.clientCredentialsArn));\n    errors.collect(cdk.propertyValidator('connectorOAuthRequest', CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator)(properties.connectorOAuthRequest));\n    errors.collect(cdk.propertyValidator('refreshToken', cdk.validateString)(properties.refreshToken));\n    return errors.wrap('supplied properties not correct for \"SalesforceConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SalesforceConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `SalesforceConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SalesforceConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSalesforceConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        ClientCredentialsArn: cdk.stringToCloudFormation(properties.clientCredentialsArn),\n        ConnectorOAuthRequest: cfnConnectorProfileConnectorOAuthRequestPropertyToCloudFormation(properties.connectorOAuthRequest),\n        RefreshToken: cdk.stringToCloudFormation(properties.refreshToken),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSalesforceConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('clientCredentialsArn', 'ClientCredentialsArn', properties.ClientCredentialsArn != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCredentialsArn) : undefined);\n    ret.addPropertyResult('connectorOAuthRequest', 'ConnectorOAuthRequest', properties.ConnectorOAuthRequest != null ? CfnConnectorProfileConnectorOAuthRequestPropertyFromCloudFormation(properties.ConnectorOAuthRequest) : undefined);\n    ret.addPropertyResult('refreshToken', 'RefreshToken', properties.RefreshToken != null ? cfn_parse.FromCloudFormation.getString(properties.RefreshToken) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface SalesforceConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly instanceUrl?: string;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly isSandboxEnvironment?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SalesforceConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SalesforceConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('isSandboxEnvironment', cdk.validateBoolean)(properties.isSandboxEnvironment));\n    return errors.wrap('supplied properties not correct for \"SalesforceConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SalesforceConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `SalesforceConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SalesforceConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSalesforceConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n        isSandboxEnvironment: cdk.booleanToCloudFormation(properties.isSandboxEnvironment),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSalesforceConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', properties.InstanceUrl != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceUrl) : undefined);\n    ret.addPropertyResult('isSandboxEnvironment', 'isSandboxEnvironment', properties.isSandboxEnvironment != null ? cfn_parse.FromCloudFormation.getBoolean(properties.isSandboxEnvironment) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface ServiceNowConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                           \n        readonly password: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServiceNowConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `ServiceNowConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"ServiceNowConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ServiceNowConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `ServiceNowConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ServiceNowConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileServiceNowConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileServiceNowConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface ServiceNowConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServiceNowConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ServiceNowConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"ServiceNowConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ServiceNowConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `ServiceNowConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ServiceNowConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileServiceNowConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileServiceNowConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface SingularConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly apiKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SingularConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `SingularConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiKey', cdk.requiredValidator)(properties.apiKey));\n    errors.collect(cdk.propertyValidator('apiKey', cdk.validateString)(properties.apiKey));\n    return errors.wrap('supplied properties not correct for \"SingularConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SingularConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `SingularConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SingularConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSingularConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        ApiKey: cdk.stringToCloudFormation(properties.apiKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSingularConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SingularConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SingularConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('apiKey', 'ApiKey', cfn_parse.FromCloudFormation.getString(properties.ApiKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                            \n    export interface SlackConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly accessToken?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly clientId: string;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly clientSecret: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly connectorOAuthRequest?: CfnConnectorProfile.ConnectorOAuthRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlackConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `SlackConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('clientId', cdk.requiredValidator)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.requiredValidator)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.validateString)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('connectorOAuthRequest', CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator)(properties.connectorOAuthRequest));\n    return errors.wrap('supplied properties not correct for \"SlackConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SlackConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `SlackConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SlackConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSlackConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        ClientSecret: cdk.stringToCloudFormation(properties.clientSecret),\n        ConnectorOAuthRequest: cfnConnectorProfileConnectorOAuthRequestPropertyToCloudFormation(properties.connectorOAuthRequest),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSlackConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SlackConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SlackConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('clientId', 'ClientId', cfn_parse.FromCloudFormation.getString(properties.ClientId));\n    ret.addPropertyResult('clientSecret', 'ClientSecret', cfn_parse.FromCloudFormation.getString(properties.ClientSecret));\n    ret.addPropertyResult('connectorOAuthRequest', 'ConnectorOAuthRequest', properties.ConnectorOAuthRequest != null ? CfnConnectorProfileConnectorOAuthRequestPropertyFromCloudFormation(properties.ConnectorOAuthRequest) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                         \n    export interface SlackConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlackConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SlackConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"SlackConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SlackConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `SlackConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SlackConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSlackConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSlackConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SlackConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SlackConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface SnowflakeConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly password: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnowflakeConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `SnowflakeConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"SnowflakeConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SnowflakeConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `SnowflakeConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SnowflakeConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSnowflakeConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSnowflakeConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface SnowflakeConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly accountName?: string;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly bucketPrefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly privateLinkServiceName?: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly region?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly stage: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly warehouse: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnowflakeConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SnowflakeConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountName', cdk.validateString)(properties.accountName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('privateLinkServiceName', cdk.validateString)(properties.privateLinkServiceName));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    errors.collect(cdk.propertyValidator('stage', cdk.requiredValidator)(properties.stage));\n    errors.collect(cdk.propertyValidator('stage', cdk.validateString)(properties.stage));\n    errors.collect(cdk.propertyValidator('warehouse', cdk.requiredValidator)(properties.warehouse));\n    errors.collect(cdk.propertyValidator('warehouse', cdk.validateString)(properties.warehouse));\n    return errors.wrap('supplied properties not correct for \"SnowflakeConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SnowflakeConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `SnowflakeConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.SnowflakeConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileSnowflakeConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        AccountName: cdk.stringToCloudFormation(properties.accountName),\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        PrivateLinkServiceName: cdk.stringToCloudFormation(properties.privateLinkServiceName),\n        Region: cdk.stringToCloudFormation(properties.region),\n        Stage: cdk.stringToCloudFormation(properties.stage),\n        Warehouse: cdk.stringToCloudFormation(properties.warehouse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileSnowflakeConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('accountName', 'AccountName', properties.AccountName != null ? cfn_parse.FromCloudFormation.getString(properties.AccountName) : undefined);\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('privateLinkServiceName', 'PrivateLinkServiceName', properties.PrivateLinkServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateLinkServiceName) : undefined);\n    ret.addPropertyResult('region', 'Region', properties.Region != null ? cfn_parse.FromCloudFormation.getString(properties.Region) : undefined);\n    ret.addPropertyResult('stage', 'Stage', cfn_parse.FromCloudFormation.getString(properties.Stage));\n    ret.addPropertyResult('warehouse', 'Warehouse', cfn_parse.FromCloudFormation.getString(properties.Warehouse));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface TrendmicroConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly apiSecretKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TrendmicroConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `TrendmicroConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiSecretKey', cdk.requiredValidator)(properties.apiSecretKey));\n    errors.collect(cdk.propertyValidator('apiSecretKey', cdk.validateString)(properties.apiSecretKey));\n    return errors.wrap('supplied properties not correct for \"TrendmicroConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.TrendmicroConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `TrendmicroConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.TrendmicroConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileTrendmicroConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        ApiSecretKey: cdk.stringToCloudFormation(properties.apiSecretKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileTrendmicroConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('apiSecretKey', 'ApiSecretKey', cfn_parse.FromCloudFormation.getString(properties.ApiSecretKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                            \n    export interface VeevaConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly password: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VeevaConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `VeevaConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"VeevaConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.VeevaConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `VeevaConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.VeevaConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileVeevaConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileVeevaConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                         \n    export interface VeevaConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VeevaConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `VeevaConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"VeevaConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.VeevaConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `VeevaConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.VeevaConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileVeevaConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileVeevaConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface ZendeskConnectorProfileCredentialsProperty {\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly accessToken?: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly clientId: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly clientSecret: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly connectorOAuthRequest?: CfnConnectorProfile.ConnectorOAuthRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZendeskConnectorProfileCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `ZendeskConnectorProfileCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('clientId', cdk.requiredValidator)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.requiredValidator)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('clientSecret', cdk.validateString)(properties.clientSecret));\n    errors.collect(cdk.propertyValidator('connectorOAuthRequest', CfnConnectorProfile_ConnectorOAuthRequestPropertyValidator)(properties.connectorOAuthRequest));\n    return errors.wrap('supplied properties not correct for \"ZendeskConnectorProfileCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ZendeskConnectorProfileCredentials` resource\n *\n * @param properties - the TypeScript properties of a `ZendeskConnectorProfileCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ZendeskConnectorProfileCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileZendeskConnectorProfileCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        ClientSecret: cdk.stringToCloudFormation(properties.clientSecret),\n        ConnectorOAuthRequest: cfnConnectorProfileConnectorOAuthRequestPropertyToCloudFormation(properties.connectorOAuthRequest),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileZendeskConnectorProfileCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty>();\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('clientId', 'ClientId', cfn_parse.FromCloudFormation.getString(properties.ClientId));\n    ret.addPropertyResult('clientSecret', 'ClientSecret', cfn_parse.FromCloudFormation.getString(properties.ClientSecret));\n    ret.addPropertyResult('connectorOAuthRequest', 'ConnectorOAuthRequest', properties.ConnectorOAuthRequest != null ? CfnConnectorProfileConnectorOAuthRequestPropertyFromCloudFormation(properties.ConnectorOAuthRequest) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnectorProfile {\n                                                                                                                                                                                                                                                                                                                                                                               \n    export interface ZendeskConnectorProfilePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly instanceUrl: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZendeskConnectorProfilePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ZendeskConnectorProfilePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.requiredValidator)(properties.instanceUrl));\n    errors.collect(cdk.propertyValidator('instanceUrl', cdk.validateString)(properties.instanceUrl));\n    return errors.wrap('supplied properties not correct for \"ZendeskConnectorProfilePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ZendeskConnectorProfileProperties` resource\n *\n * @param properties - the TypeScript properties of a `ZendeskConnectorProfilePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::ConnectorProfile.ZendeskConnectorProfileProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectorProfileZendeskConnectorProfilePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceUrl: cdk.stringToCloudFormation(properties.instanceUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectorProfileZendeskConnectorProfilePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty>();\n    ret.addPropertyResult('instanceUrl', 'InstanceUrl', cfn_parse.FromCloudFormation.getString(properties.InstanceUrl));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                            \nexport interface CfnFlowProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly destinationFlowConfigList: Array<CfnFlow.DestinationFlowConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                  \n    readonly flowName: string;\n\n                                                                                                                                                                                                                                                                \n    readonly sourceFlowConfig: CfnFlow.SourceFlowConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    readonly tasks: Array<CfnFlow.TaskProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly triggerConfig: CfnFlow.TriggerConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly kmsArn?: string;\n\n                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFlowProps`\n *\n * @param properties - the TypeScript properties of a `CfnFlowProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlowPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('destinationFlowConfigList', cdk.requiredValidator)(properties.destinationFlowConfigList));\n    errors.collect(cdk.propertyValidator('destinationFlowConfigList', cdk.listValidator(CfnFlow_DestinationFlowConfigPropertyValidator))(properties.destinationFlowConfigList));\n    errors.collect(cdk.propertyValidator('flowName', cdk.requiredValidator)(properties.flowName));\n    errors.collect(cdk.propertyValidator('flowName', cdk.validateString)(properties.flowName));\n    errors.collect(cdk.propertyValidator('kmsArn', cdk.validateString)(properties.kmsArn));\n    errors.collect(cdk.propertyValidator('sourceFlowConfig', cdk.requiredValidator)(properties.sourceFlowConfig));\n    errors.collect(cdk.propertyValidator('sourceFlowConfig', CfnFlow_SourceFlowConfigPropertyValidator)(properties.sourceFlowConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('tasks', cdk.requiredValidator)(properties.tasks));\n    errors.collect(cdk.propertyValidator('tasks', cdk.listValidator(CfnFlow_TaskPropertyValidator))(properties.tasks));\n    errors.collect(cdk.propertyValidator('triggerConfig', cdk.requiredValidator)(properties.triggerConfig));\n    errors.collect(cdk.propertyValidator('triggerConfig', CfnFlow_TriggerConfigPropertyValidator)(properties.triggerConfig));\n    return errors.wrap('supplied properties not correct for \"CfnFlowProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow` resource\n *\n * @param properties - the TypeScript properties of a `CfnFlowProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlowPropsValidator(properties).assertSuccess();\n    return {\n        DestinationFlowConfigList: cdk.listMapper(cfnFlowDestinationFlowConfigPropertyToCloudFormation)(properties.destinationFlowConfigList),\n        FlowName: cdk.stringToCloudFormation(properties.flowName),\n        SourceFlowConfig: cfnFlowSourceFlowConfigPropertyToCloudFormation(properties.sourceFlowConfig),\n        Tasks: cdk.listMapper(cfnFlowTaskPropertyToCloudFormation)(properties.tasks),\n        TriggerConfig: cfnFlowTriggerConfigPropertyToCloudFormation(properties.triggerConfig),\n        Description: cdk.stringToCloudFormation(properties.description),\n        KMSArn: cdk.stringToCloudFormation(properties.kmsArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlowProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlowProps>();\n    ret.addPropertyResult('destinationFlowConfigList', 'DestinationFlowConfigList', cfn_parse.FromCloudFormation.getArray(CfnFlowDestinationFlowConfigPropertyFromCloudFormation)(properties.DestinationFlowConfigList));\n    ret.addPropertyResult('flowName', 'FlowName', cfn_parse.FromCloudFormation.getString(properties.FlowName));\n    ret.addPropertyResult('sourceFlowConfig', 'SourceFlowConfig', CfnFlowSourceFlowConfigPropertyFromCloudFormation(properties.SourceFlowConfig));\n    ret.addPropertyResult('tasks', 'Tasks', cfn_parse.FromCloudFormation.getArray(CfnFlowTaskPropertyFromCloudFormation)(properties.Tasks));\n    ret.addPropertyResult('triggerConfig', 'TriggerConfig', CfnFlowTriggerConfigPropertyFromCloudFormation(properties.TriggerConfig));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('kmsArn', 'KMSArn', properties.KMSArn != null ? cfn_parse.FromCloudFormation.getString(properties.KMSArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFlow extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppFlow::Flow\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFlow {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFlowPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFlow(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                     \n    public readonly attrFlowArn: string;\n\n                                                                                                                                                                                                                                                                               \n    public destinationFlowConfigList: Array<CfnFlow.DestinationFlowConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                  \n    public flowName: string;\n\n                                                                                                                                                                                                                                                                \n    public sourceFlowConfig: CfnFlow.SourceFlowConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    public tasks: Array<CfnFlow.TaskProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    public triggerConfig: CfnFlow.TriggerConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public kmsArn: string | undefined;\n\n                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnFlowProps) {\n        super(scope, id, { type: CfnFlow.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'destinationFlowConfigList', this);\n        cdk.requireProperty(props, 'flowName', this);\n        cdk.requireProperty(props, 'sourceFlowConfig', this);\n        cdk.requireProperty(props, 'tasks', this);\n        cdk.requireProperty(props, 'triggerConfig', this);\n        this.attrFlowArn = cdk.Token.asString(this.getAtt('FlowArn'));\n\n        this.destinationFlowConfigList = props.destinationFlowConfigList;\n        this.flowName = props.flowName;\n        this.sourceFlowConfig = props.sourceFlowConfig;\n        this.tasks = props.tasks;\n        this.triggerConfig = props.triggerConfig;\n        this.description = props.description;\n        this.kmsArn = props.kmsArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppFlow::Flow\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFlow.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinationFlowConfigList: this.destinationFlowConfigList,\n            flowName: this.flowName,\n            sourceFlowConfig: this.sourceFlowConfig,\n            tasks: this.tasks,\n            triggerConfig: this.triggerConfig,\n            description: this.description,\n            kmsArn: this.kmsArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFlowPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                        \n    export interface AggregationConfigProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly aggregationType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AggregationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AggregationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_AggregationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aggregationType', cdk.validateString)(properties.aggregationType));\n    return errors.wrap('supplied properties not correct for \"AggregationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.AggregationConfig` resource\n *\n * @param properties - the TypeScript properties of a `AggregationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.AggregationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowAggregationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_AggregationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AggregationType: cdk.stringToCloudFormation(properties.aggregationType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowAggregationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.AggregationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.AggregationConfigProperty>();\n    ret.addPropertyResult('aggregationType', 'AggregationType', properties.AggregationType != null ? cfn_parse.FromCloudFormation.getString(properties.AggregationType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                              \n    export interface AmplitudeSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AmplitudeSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `AmplitudeSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_AmplitudeSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"AmplitudeSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.AmplitudeSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `AmplitudeSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.AmplitudeSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowAmplitudeSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_AmplitudeSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowAmplitudeSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.AmplitudeSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.AmplitudeSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                         \n    export interface ConnectorOperatorProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly amplitude?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly datadog?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly dynatrace?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly googleAnalytics?: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly inforNexus?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly marketo?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly s3?: string;\n                                                                                                                                                                                                                                                                        \n        readonly sapoData?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly salesforce?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly serviceNow?: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly singular?: string;\n                                                                                                                                                                                                                                                                                           \n        readonly slack?: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly trendmicro?: string;\n                                                                                                                                                                                                                                                                                           \n        readonly veeva?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly zendesk?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectorOperatorProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectorOperatorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_ConnectorOperatorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amplitude', cdk.validateString)(properties.amplitude));\n    errors.collect(cdk.propertyValidator('datadog', cdk.validateString)(properties.datadog));\n    errors.collect(cdk.propertyValidator('dynatrace', cdk.validateString)(properties.dynatrace));\n    errors.collect(cdk.propertyValidator('googleAnalytics', cdk.validateString)(properties.googleAnalytics));\n    errors.collect(cdk.propertyValidator('inforNexus', cdk.validateString)(properties.inforNexus));\n    errors.collect(cdk.propertyValidator('marketo', cdk.validateString)(properties.marketo));\n    errors.collect(cdk.propertyValidator('s3', cdk.validateString)(properties.s3));\n    errors.collect(cdk.propertyValidator('sapoData', cdk.validateString)(properties.sapoData));\n    errors.collect(cdk.propertyValidator('salesforce', cdk.validateString)(properties.salesforce));\n    errors.collect(cdk.propertyValidator('serviceNow', cdk.validateString)(properties.serviceNow));\n    errors.collect(cdk.propertyValidator('singular', cdk.validateString)(properties.singular));\n    errors.collect(cdk.propertyValidator('slack', cdk.validateString)(properties.slack));\n    errors.collect(cdk.propertyValidator('trendmicro', cdk.validateString)(properties.trendmicro));\n    errors.collect(cdk.propertyValidator('veeva', cdk.validateString)(properties.veeva));\n    errors.collect(cdk.propertyValidator('zendesk', cdk.validateString)(properties.zendesk));\n    return errors.wrap('supplied properties not correct for \"ConnectorOperatorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ConnectorOperator` resource\n *\n * @param properties - the TypeScript properties of a `ConnectorOperatorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ConnectorOperator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowConnectorOperatorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_ConnectorOperatorPropertyValidator(properties).assertSuccess();\n    return {\n        Amplitude: cdk.stringToCloudFormation(properties.amplitude),\n        Datadog: cdk.stringToCloudFormation(properties.datadog),\n        Dynatrace: cdk.stringToCloudFormation(properties.dynatrace),\n        GoogleAnalytics: cdk.stringToCloudFormation(properties.googleAnalytics),\n        InforNexus: cdk.stringToCloudFormation(properties.inforNexus),\n        Marketo: cdk.stringToCloudFormation(properties.marketo),\n        S3: cdk.stringToCloudFormation(properties.s3),\n        SAPOData: cdk.stringToCloudFormation(properties.sapoData),\n        Salesforce: cdk.stringToCloudFormation(properties.salesforce),\n        ServiceNow: cdk.stringToCloudFormation(properties.serviceNow),\n        Singular: cdk.stringToCloudFormation(properties.singular),\n        Slack: cdk.stringToCloudFormation(properties.slack),\n        Trendmicro: cdk.stringToCloudFormation(properties.trendmicro),\n        Veeva: cdk.stringToCloudFormation(properties.veeva),\n        Zendesk: cdk.stringToCloudFormation(properties.zendesk),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowConnectorOperatorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.ConnectorOperatorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.ConnectorOperatorProperty>();\n    ret.addPropertyResult('amplitude', 'Amplitude', properties.Amplitude != null ? cfn_parse.FromCloudFormation.getString(properties.Amplitude) : undefined);\n    ret.addPropertyResult('datadog', 'Datadog', properties.Datadog != null ? cfn_parse.FromCloudFormation.getString(properties.Datadog) : undefined);\n    ret.addPropertyResult('dynatrace', 'Dynatrace', properties.Dynatrace != null ? cfn_parse.FromCloudFormation.getString(properties.Dynatrace) : undefined);\n    ret.addPropertyResult('googleAnalytics', 'GoogleAnalytics', properties.GoogleAnalytics != null ? cfn_parse.FromCloudFormation.getString(properties.GoogleAnalytics) : undefined);\n    ret.addPropertyResult('inforNexus', 'InforNexus', properties.InforNexus != null ? cfn_parse.FromCloudFormation.getString(properties.InforNexus) : undefined);\n    ret.addPropertyResult('marketo', 'Marketo', properties.Marketo != null ? cfn_parse.FromCloudFormation.getString(properties.Marketo) : undefined);\n    ret.addPropertyResult('s3', 'S3', properties.S3 != null ? cfn_parse.FromCloudFormation.getString(properties.S3) : undefined);\n    ret.addPropertyResult('sapoData', 'SAPOData', properties.SAPOData != null ? cfn_parse.FromCloudFormation.getString(properties.SAPOData) : undefined);\n    ret.addPropertyResult('salesforce', 'Salesforce', properties.Salesforce != null ? cfn_parse.FromCloudFormation.getString(properties.Salesforce) : undefined);\n    ret.addPropertyResult('serviceNow', 'ServiceNow', properties.ServiceNow != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceNow) : undefined);\n    ret.addPropertyResult('singular', 'Singular', properties.Singular != null ? cfn_parse.FromCloudFormation.getString(properties.Singular) : undefined);\n    ret.addPropertyResult('slack', 'Slack', properties.Slack != null ? cfn_parse.FromCloudFormation.getString(properties.Slack) : undefined);\n    ret.addPropertyResult('trendmicro', 'Trendmicro', properties.Trendmicro != null ? cfn_parse.FromCloudFormation.getString(properties.Trendmicro) : undefined);\n    ret.addPropertyResult('veeva', 'Veeva', properties.Veeva != null ? cfn_parse.FromCloudFormation.getString(properties.Veeva) : undefined);\n    ret.addPropertyResult('zendesk', 'Zendesk', properties.Zendesk != null ? cfn_parse.FromCloudFormation.getString(properties.Zendesk) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                          \n    export interface DatadogSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DatadogSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `DatadogSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_DatadogSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"DatadogSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DatadogSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `DatadogSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DatadogSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowDatadogSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_DatadogSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowDatadogSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.DatadogSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.DatadogSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                       \n    export interface DestinationConnectorPropertiesProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly eventBridge?: CfnFlow.EventBridgeDestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                        \n        readonly lookoutMetrics?: CfnFlow.LookoutMetricsDestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly redshift?: CfnFlow.RedshiftDestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly s3?: CfnFlow.S3DestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                    \n        readonly salesforce?: CfnFlow.SalesforceDestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly snowflake?: CfnFlow.SnowflakeDestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                \n        readonly upsolver?: CfnFlow.UpsolverDestinationPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly zendesk?: CfnFlow.ZendeskDestinationPropertiesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationConnectorPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationConnectorPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_DestinationConnectorPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventBridge', CfnFlow_EventBridgeDestinationPropertiesPropertyValidator)(properties.eventBridge));\n    errors.collect(cdk.propertyValidator('lookoutMetrics', CfnFlow_LookoutMetricsDestinationPropertiesPropertyValidator)(properties.lookoutMetrics));\n    errors.collect(cdk.propertyValidator('redshift', CfnFlow_RedshiftDestinationPropertiesPropertyValidator)(properties.redshift));\n    errors.collect(cdk.propertyValidator('s3', CfnFlow_S3DestinationPropertiesPropertyValidator)(properties.s3));\n    errors.collect(cdk.propertyValidator('salesforce', CfnFlow_SalesforceDestinationPropertiesPropertyValidator)(properties.salesforce));\n    errors.collect(cdk.propertyValidator('snowflake', CfnFlow_SnowflakeDestinationPropertiesPropertyValidator)(properties.snowflake));\n    errors.collect(cdk.propertyValidator('upsolver', CfnFlow_UpsolverDestinationPropertiesPropertyValidator)(properties.upsolver));\n    errors.collect(cdk.propertyValidator('zendesk', CfnFlow_ZendeskDestinationPropertiesPropertyValidator)(properties.zendesk));\n    return errors.wrap('supplied properties not correct for \"DestinationConnectorPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DestinationConnectorProperties` resource\n *\n * @param properties - the TypeScript properties of a `DestinationConnectorPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DestinationConnectorProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowDestinationConnectorPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_DestinationConnectorPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        EventBridge: cfnFlowEventBridgeDestinationPropertiesPropertyToCloudFormation(properties.eventBridge),\n        LookoutMetrics: cfnFlowLookoutMetricsDestinationPropertiesPropertyToCloudFormation(properties.lookoutMetrics),\n        Redshift: cfnFlowRedshiftDestinationPropertiesPropertyToCloudFormation(properties.redshift),\n        S3: cfnFlowS3DestinationPropertiesPropertyToCloudFormation(properties.s3),\n        Salesforce: cfnFlowSalesforceDestinationPropertiesPropertyToCloudFormation(properties.salesforce),\n        Snowflake: cfnFlowSnowflakeDestinationPropertiesPropertyToCloudFormation(properties.snowflake),\n        Upsolver: cfnFlowUpsolverDestinationPropertiesPropertyToCloudFormation(properties.upsolver),\n        Zendesk: cfnFlowZendeskDestinationPropertiesPropertyToCloudFormation(properties.zendesk),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowDestinationConnectorPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.DestinationConnectorPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.DestinationConnectorPropertiesProperty>();\n    ret.addPropertyResult('eventBridge', 'EventBridge', properties.EventBridge != null ? CfnFlowEventBridgeDestinationPropertiesPropertyFromCloudFormation(properties.EventBridge) : undefined);\n    ret.addPropertyResult('lookoutMetrics', 'LookoutMetrics', properties.LookoutMetrics != null ? CfnFlowLookoutMetricsDestinationPropertiesPropertyFromCloudFormation(properties.LookoutMetrics) : undefined);\n    ret.addPropertyResult('redshift', 'Redshift', properties.Redshift != null ? CfnFlowRedshiftDestinationPropertiesPropertyFromCloudFormation(properties.Redshift) : undefined);\n    ret.addPropertyResult('s3', 'S3', properties.S3 != null ? CfnFlowS3DestinationPropertiesPropertyFromCloudFormation(properties.S3) : undefined);\n    ret.addPropertyResult('salesforce', 'Salesforce', properties.Salesforce != null ? CfnFlowSalesforceDestinationPropertiesPropertyFromCloudFormation(properties.Salesforce) : undefined);\n    ret.addPropertyResult('snowflake', 'Snowflake', properties.Snowflake != null ? CfnFlowSnowflakeDestinationPropertiesPropertyFromCloudFormation(properties.Snowflake) : undefined);\n    ret.addPropertyResult('upsolver', 'Upsolver', properties.Upsolver != null ? CfnFlowUpsolverDestinationPropertiesPropertyFromCloudFormation(properties.Upsolver) : undefined);\n    ret.addPropertyResult('zendesk', 'Zendesk', properties.Zendesk != null ? CfnFlowZendeskDestinationPropertiesPropertyFromCloudFormation(properties.Zendesk) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                                       \n    export interface DestinationFlowConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly connectorProfileName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly connectorType: string;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly destinationConnectorProperties: CfnFlow.DestinationConnectorPropertiesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationFlowConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationFlowConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_DestinationFlowConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectorProfileName', cdk.validateString)(properties.connectorProfileName));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.requiredValidator)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.validateString)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('destinationConnectorProperties', cdk.requiredValidator)(properties.destinationConnectorProperties));\n    errors.collect(cdk.propertyValidator('destinationConnectorProperties', CfnFlow_DestinationConnectorPropertiesPropertyValidator)(properties.destinationConnectorProperties));\n    return errors.wrap('supplied properties not correct for \"DestinationFlowConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DestinationFlowConfig` resource\n *\n * @param properties - the TypeScript properties of a `DestinationFlowConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DestinationFlowConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowDestinationFlowConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_DestinationFlowConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectorProfileName: cdk.stringToCloudFormation(properties.connectorProfileName),\n        ConnectorType: cdk.stringToCloudFormation(properties.connectorType),\n        DestinationConnectorProperties: cfnFlowDestinationConnectorPropertiesPropertyToCloudFormation(properties.destinationConnectorProperties),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowDestinationFlowConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.DestinationFlowConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.DestinationFlowConfigProperty>();\n    ret.addPropertyResult('connectorProfileName', 'ConnectorProfileName', properties.ConnectorProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectorProfileName) : undefined);\n    ret.addPropertyResult('connectorType', 'ConnectorType', cfn_parse.FromCloudFormation.getString(properties.ConnectorType));\n    ret.addPropertyResult('destinationConnectorProperties', 'DestinationConnectorProperties', CfnFlowDestinationConnectorPropertiesPropertyFromCloudFormation(properties.DestinationConnectorProperties));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                              \n    export interface DynatraceSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynatraceSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `DynatraceSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_DynatraceSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"DynatraceSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DynatraceSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `DynatraceSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.DynatraceSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowDynatraceSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_DynatraceSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowDynatraceSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.DynatraceSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.DynatraceSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\nn    export interface ErrorHandlingConfigProperty {\n                                                                                                                                                                                                                                                                             \n        readonly bucketName?: string;\n                                                                                                                                                                                                                                                                          \n        readonly bucketPrefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly failOnFirstError?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ErrorHandlingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ErrorHandlingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_ErrorHandlingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('failOnFirstError', cdk.validateBoolean)(properties.failOnFirstError));\n    return errors.wrap('supplied properties not correct for \"ErrorHandlingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ErrorHandlingConfig` resource\n *\n * @param properties - the TypeScript properties of a `ErrorHandlingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ErrorHandlingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowErrorHandlingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_ErrorHandlingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        FailOnFirstError: cdk.booleanToCloudFormation(properties.failOnFirstError),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowErrorHandlingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.ErrorHandlingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.ErrorHandlingConfigProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', properties.BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.BucketName) : undefined);\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('failOnFirstError', 'FailOnFirstError', properties.FailOnFirstError != null ? cfn_parse.FromCloudFormation.getBoolean(properties.FailOnFirstError) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                   \n    export interface EventBridgeDestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                       \n        readonly errorHandlingConfig?: CfnFlow.ErrorHandlingConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                        \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EventBridgeDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `EventBridgeDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_EventBridgeDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorHandlingConfig', CfnFlow_ErrorHandlingConfigPropertyValidator)(properties.errorHandlingConfig));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"EventBridgeDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.EventBridgeDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `EventBridgeDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.EventBridgeDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowEventBridgeDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_EventBridgeDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorHandlingConfig: cfnFlowErrorHandlingConfigPropertyToCloudFormation(properties.errorHandlingConfig),\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowEventBridgeDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.EventBridgeDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.EventBridgeDestinationPropertiesProperty>();\n    ret.addPropertyResult('errorHandlingConfig', 'ErrorHandlingConfig', properties.ErrorHandlingConfig != null ? CfnFlowErrorHandlingConfigPropertyFromCloudFormation(properties.ErrorHandlingConfig) : undefined);\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                           \n    export interface GoogleAnalyticsSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GoogleAnalyticsSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `GoogleAnalyticsSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_GoogleAnalyticsSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"GoogleAnalyticsSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.GoogleAnalyticsSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `GoogleAnalyticsSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.GoogleAnalyticsSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowGoogleAnalyticsSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_GoogleAnalyticsSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowGoogleAnalyticsSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.GoogleAnalyticsSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.GoogleAnalyticsSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                     \n    export interface IncrementalPullConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly datetimeTypeFieldName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IncrementalPullConfigProperty`\n *\n * @param properties - the TypeScript properties of a `IncrementalPullConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_IncrementalPullConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('datetimeTypeFieldName', cdk.validateString)(properties.datetimeTypeFieldName));\n    return errors.wrap('supplied properties not correct for \"IncrementalPullConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.IncrementalPullConfig` resource\n *\n * @param properties - the TypeScript properties of a `IncrementalPullConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.IncrementalPullConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowIncrementalPullConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_IncrementalPullConfigPropertyValidator(properties).assertSuccess();\n    return {\n        DatetimeTypeFieldName: cdk.stringToCloudFormation(properties.datetimeTypeFieldName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowIncrementalPullConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.IncrementalPullConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.IncrementalPullConfigProperty>();\n    ret.addPropertyResult('datetimeTypeFieldName', 'DatetimeTypeFieldName', properties.DatetimeTypeFieldName != null ? cfn_parse.FromCloudFormation.getString(properties.DatetimeTypeFieldName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                 \n    export interface InforNexusSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InforNexusSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `InforNexusSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_InforNexusSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"InforNexusSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.InforNexusSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `InforNexusSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.InforNexusSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowInforNexusSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_InforNexusSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowInforNexusSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.InforNexusSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.InforNexusSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                        \n    export interface LookoutMetricsDestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly object?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LookoutMetricsDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `LookoutMetricsDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_LookoutMetricsDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"LookoutMetricsDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.LookoutMetricsDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `LookoutMetricsDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.LookoutMetricsDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowLookoutMetricsDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_LookoutMetricsDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowLookoutMetricsDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.LookoutMetricsDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.LookoutMetricsDestinationPropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', properties.Object != null ? cfn_parse.FromCloudFormation.getString(properties.Object) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                          \n    export interface MarketoSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MarketoSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `MarketoSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_MarketoSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"MarketoSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.MarketoSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `MarketoSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.MarketoSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowMarketoSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_MarketoSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowMarketoSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.MarketoSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.MarketoSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                                                         \n    export interface PrefixConfigProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly prefixFormat?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly prefixType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrefixConfigProperty`\n *\n * @param properties - the TypeScript properties of a `PrefixConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_PrefixConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('prefixFormat', cdk.validateString)(properties.prefixFormat));\n    errors.collect(cdk.propertyValidator('prefixType', cdk.validateString)(properties.prefixType));\n    return errors.wrap('supplied properties not correct for \"PrefixConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.PrefixConfig` resource\n *\n * @param properties - the TypeScript properties of a `PrefixConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.PrefixConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowPrefixConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_PrefixConfigPropertyValidator(properties).assertSuccess();\n    return {\n        PrefixFormat: cdk.stringToCloudFormation(properties.prefixFormat),\n        PrefixType: cdk.stringToCloudFormation(properties.prefixType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowPrefixConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.PrefixConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.PrefixConfigProperty>();\n    ret.addPropertyResult('prefixFormat', 'PrefixFormat', properties.PrefixFormat != null ? cfn_parse.FromCloudFormation.getString(properties.PrefixFormat) : undefined);\n    ret.addPropertyResult('prefixType', 'PrefixType', properties.PrefixType != null ? cfn_parse.FromCloudFormation.getString(properties.PrefixType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                             \n    export interface RedshiftDestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                           \n        readonly bucketPrefix?: string;\nn        readonly errorHandlingConfig?: CfnFlow.ErrorHandlingConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly intermediateBucketName: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedshiftDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `RedshiftDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_RedshiftDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('errorHandlingConfig', CfnFlow_ErrorHandlingConfigPropertyValidator)(properties.errorHandlingConfig));\n    errors.collect(cdk.propertyValidator('intermediateBucketName', cdk.requiredValidator)(properties.intermediateBucketName));\n    errors.collect(cdk.propertyValidator('intermediateBucketName', cdk.validateString)(properties.intermediateBucketName));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"RedshiftDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.RedshiftDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `RedshiftDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.RedshiftDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowRedshiftDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_RedshiftDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        ErrorHandlingConfig: cfnFlowErrorHandlingConfigPropertyToCloudFormation(properties.errorHandlingConfig),\n        IntermediateBucketName: cdk.stringToCloudFormation(properties.intermediateBucketName),\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowRedshiftDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.RedshiftDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.RedshiftDestinationPropertiesProperty>();\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('errorHandlingConfig', 'ErrorHandlingConfig', properties.ErrorHandlingConfig != null ? CfnFlowErrorHandlingConfigPropertyFromCloudFormation(properties.ErrorHandlingConfig) : undefined);\n    ret.addPropertyResult('intermediateBucketName', 'IntermediateBucketName', cfn_parse.FromCloudFormation.getString(properties.IntermediateBucketName));\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                           \n    export interface S3DestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly bucketPrefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly s3OutputFormatConfig?: CfnFlow.S3OutputFormatConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3DestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `S3DestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_S3DestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('s3OutputFormatConfig', CfnFlow_S3OutputFormatConfigPropertyValidator)(properties.s3OutputFormatConfig));\n    return errors.wrap('supplied properties not correct for \"S3DestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3DestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `S3DestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3DestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowS3DestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_S3DestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        S3OutputFormatConfig: cfnFlowS3OutputFormatConfigPropertyToCloudFormation(properties.s3OutputFormatConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowS3DestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.S3DestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.S3DestinationPropertiesProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('s3OutputFormatConfig', 'S3OutputFormatConfig', properties.S3OutputFormatConfig != null ? CfnFlowS3OutputFormatConfigPropertyFromCloudFormation(properties.S3OutputFormatConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                              \n    export interface S3InputFormatConfigProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly s3InputFileType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3InputFormatConfigProperty`\n *\n * @param properties - the TypeScript properties of a `S3InputFormatConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_S3InputFormatConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3InputFileType', cdk.validateString)(properties.s3InputFileType));\n    return errors.wrap('supplied properties not correct for \"S3InputFormatConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3InputFormatConfig` resource\n *\n * @param properties - the TypeScript properties of a `S3InputFormatConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3InputFormatConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowS3InputFormatConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_S3InputFormatConfigPropertyValidator(properties).assertSuccess();\n    return {\n        S3InputFileType: cdk.stringToCloudFormation(properties.s3InputFileType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowS3InputFormatConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.S3InputFormatConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.S3InputFormatConfigProperty>();\n    ret.addPropertyResult('s3InputFileType', 'S3InputFileType', properties.S3InputFileType != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputFileType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface S3OutputFormatConfigProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly aggregationConfig?: CfnFlow.AggregationConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly fileType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly prefixConfig?: CfnFlow.PrefixConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputFormatConfigProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputFormatConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_S3OutputFormatConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aggregationConfig', CfnFlow_AggregationConfigPropertyValidator)(properties.aggregationConfig));\n    errors.collect(cdk.propertyValidator('fileType', cdk.validateString)(properties.fileType));\n    errors.collect(cdk.propertyValidator('prefixConfig', CfnFlow_PrefixConfigPropertyValidator)(properties.prefixConfig));\n    return errors.wrap('supplied properties not correct for \"S3OutputFormatConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3OutputFormatConfig` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputFormatConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3OutputFormatConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowS3OutputFormatConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_S3OutputFormatConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AggregationConfig: cfnFlowAggregationConfigPropertyToCloudFormation(properties.aggregationConfig),\n        FileType: cdk.stringToCloudFormation(properties.fileType),\n        PrefixConfig: cfnFlowPrefixConfigPropertyToCloudFormation(properties.prefixConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowS3OutputFormatConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.S3OutputFormatConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.S3OutputFormatConfigProperty>();\n    ret.addPropertyResult('aggregationConfig', 'AggregationConfig', properties.AggregationConfig != null ? CfnFlowAggregationConfigPropertyFromCloudFormation(properties.AggregationConfig) : undefined);\n    ret.addPropertyResult('fileType', 'FileType', properties.FileType != null ? cfn_parse.FromCloudFormation.getString(properties.FileType) : undefined);\n    ret.addPropertyResult('prefixConfig', 'PrefixConfig', properties.PrefixConfig != null ? CfnFlowPrefixConfigPropertyFromCloudFormation(properties.PrefixConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                              \n    export interface S3SourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly bucketPrefix: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly s3InputFormatConfig?: CfnFlow.S3InputFormatConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3SourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `S3SourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_S3SourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.requiredValidator)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('s3InputFormatConfig', CfnFlow_S3InputFormatConfigPropertyValidator)(properties.s3InputFormatConfig));\n    return errors.wrap('supplied properties not correct for \"S3SourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3SourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `S3SourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.S3SourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowS3SourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_S3SourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        S3InputFormatConfig: cfnFlowS3InputFormatConfigPropertyToCloudFormation(properties.s3InputFormatConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowS3SourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.S3SourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.S3SourcePropertiesProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', cfn_parse.FromCloudFormation.getString(properties.BucketPrefix));\n    ret.addPropertyResult('s3InputFormatConfig', 'S3InputFormatConfig', properties.S3InputFormatConfig != null ? CfnFlowS3InputFormatConfigPropertyFromCloudFormation(properties.S3InputFormatConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                   \n    export interface SAPODataSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                                 \n        readonly objectPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SAPODataSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SAPODataSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SAPODataSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('objectPath', cdk.requiredValidator)(properties.objectPath));\n    errors.collect(cdk.propertyValidator('objectPath', cdk.validateString)(properties.objectPath));\n    return errors.wrap('supplied properties not correct for \"SAPODataSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SAPODataSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `SAPODataSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SAPODataSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSAPODataSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SAPODataSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        ObjectPath: cdk.stringToCloudFormation(properties.objectPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSAPODataSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SAPODataSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SAPODataSourcePropertiesProperty>();\n    ret.addPropertyResult('objectPath', 'ObjectPath', cfn_parse.FromCloudFormation.getString(properties.ObjectPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                          \n    export interface SalesforceDestinationPropertiesProperty {\nn        readonly errorHandlingConfig?: CfnFlow.ErrorHandlingConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly idFieldNames?: string[];\n                                                                                                                                                                                                                                                                                                              \n        readonly object: string;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly writeOperationType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SalesforceDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SalesforceDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SalesforceDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorHandlingConfig', CfnFlow_ErrorHandlingConfigPropertyValidator)(properties.errorHandlingConfig));\n    errors.collect(cdk.propertyValidator('idFieldNames', cdk.listValidator(cdk.validateString))(properties.idFieldNames));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    errors.collect(cdk.propertyValidator('writeOperationType', cdk.validateString)(properties.writeOperationType));\n    return errors.wrap('supplied properties not correct for \"SalesforceDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SalesforceDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `SalesforceDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SalesforceDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSalesforceDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SalesforceDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorHandlingConfig: cfnFlowErrorHandlingConfigPropertyToCloudFormation(properties.errorHandlingConfig),\n        IdFieldNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.idFieldNames),\n        Object: cdk.stringToCloudFormation(properties.object),\n        WriteOperationType: cdk.stringToCloudFormation(properties.writeOperationType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSalesforceDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SalesforceDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SalesforceDestinationPropertiesProperty>();\n    ret.addPropertyResult('errorHandlingConfig', 'ErrorHandlingConfig', properties.ErrorHandlingConfig != null ? CfnFlowErrorHandlingConfigPropertyFromCloudFormation(properties.ErrorHandlingConfig) : undefined);\n    ret.addPropertyResult('idFieldNames', 'IdFieldNames', properties.IdFieldNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.IdFieldNames) : undefined);\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addPropertyResult('writeOperationType', 'WriteOperationType', properties.WriteOperationType != null ? cfn_parse.FromCloudFormation.getString(properties.WriteOperationType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                \n    export interface SalesforceSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly enableDynamicFieldUpdate?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly includeDeletedRecords?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                               \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SalesforceSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SalesforceSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SalesforceSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableDynamicFieldUpdate', cdk.validateBoolean)(properties.enableDynamicFieldUpdate));\n    errors.collect(cdk.propertyValidator('includeDeletedRecords', cdk.validateBoolean)(properties.includeDeletedRecords));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"SalesforceSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SalesforceSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `SalesforceSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SalesforceSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSalesforceSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SalesforceSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        EnableDynamicFieldUpdate: cdk.booleanToCloudFormation(properties.enableDynamicFieldUpdate),\n        IncludeDeletedRecords: cdk.booleanToCloudFormation(properties.includeDeletedRecords),\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSalesforceSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SalesforceSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SalesforceSourcePropertiesProperty>();\n    ret.addPropertyResult('enableDynamicFieldUpdate', 'EnableDynamicFieldUpdate', properties.EnableDynamicFieldUpdate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDynamicFieldUpdate) : undefined);\n    ret.addPropertyResult('includeDeletedRecords', 'IncludeDeletedRecords', properties.IncludeDeletedRecords != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeDeletedRecords) : undefined);\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface ScheduledTriggerPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly dataPullMode?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly scheduleEndTime?: number;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly scheduleExpression: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly scheduleOffset?: number;\n                                                                                                                                                                                                                                                                                                                        \n        readonly scheduleStartTime?: number;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly timeZone?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScheduledTriggerPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ScheduledTriggerPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_ScheduledTriggerPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataPullMode', cdk.validateString)(properties.dataPullMode));\n    errors.collect(cdk.propertyValidator('scheduleEndTime', cdk.validateNumber)(properties.scheduleEndTime));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.requiredValidator)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('scheduleOffset', cdk.validateNumber)(properties.scheduleOffset));\n    errors.collect(cdk.propertyValidator('scheduleStartTime', cdk.validateNumber)(properties.scheduleStartTime));\n    errors.collect(cdk.propertyValidator('timeZone', cdk.validateString)(properties.timeZone));\n    return errors.wrap('supplied properties not correct for \"ScheduledTriggerPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ScheduledTriggerProperties` resource\n *\n * @param properties - the TypeScript properties of a `ScheduledTriggerPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ScheduledTriggerProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowScheduledTriggerPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_ScheduledTriggerPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        DataPullMode: cdk.stringToCloudFormation(properties.dataPullMode),\n        ScheduleEndTime: cdk.numberToCloudFormation(properties.scheduleEndTime),\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n        ScheduleOffset: cdk.numberToCloudFormation(properties.scheduleOffset),\n        ScheduleStartTime: cdk.numberToCloudFormation(properties.scheduleStartTime),\n        TimeZone: cdk.stringToCloudFormation(properties.timeZone),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowScheduledTriggerPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.ScheduledTriggerPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.ScheduledTriggerPropertiesProperty>();\n    ret.addPropertyResult('dataPullMode', 'DataPullMode', properties.DataPullMode != null ? cfn_parse.FromCloudFormation.getString(properties.DataPullMode) : undefined);\n    ret.addPropertyResult('scheduleEndTime', 'ScheduleEndTime', properties.ScheduleEndTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScheduleEndTime) : undefined);\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression));\n    ret.addPropertyResult('scheduleOffset', 'ScheduleOffset', properties.ScheduleOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScheduleOffset) : undefined);\n    ret.addPropertyResult('scheduleStartTime', 'ScheduleStartTime', properties.ScheduleStartTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScheduleStartTime) : undefined);\n    ret.addPropertyResult('timeZone', 'TimeZone', properties.TimeZone != null ? cfn_parse.FromCloudFormation.getString(properties.TimeZone) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                \n    export interface ServiceNowSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServiceNowSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ServiceNowSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_ServiceNowSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"ServiceNowSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ServiceNowSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `ServiceNowSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ServiceNowSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowServiceNowSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_ServiceNowSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowServiceNowSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.ServiceNowSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.ServiceNowSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                            \n    export interface SingularSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                         \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SingularSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SingularSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SingularSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"SingularSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SingularSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `SingularSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SingularSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSingularSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SingularSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSingularSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SingularSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SingularSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                      \n    export interface SlackSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlackSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SlackSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SlackSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"SlackSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SlackSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `SlackSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SlackSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSlackSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SlackSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSlackSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SlackSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SlackSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                        \n    export interface SnowflakeDestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                             \n        readonly bucketPrefix?: string;\nn        readonly errorHandlingConfig?: CfnFlow.ErrorHandlingConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly intermediateBucketName: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnowflakeDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SnowflakeDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SnowflakeDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('errorHandlingConfig', CfnFlow_ErrorHandlingConfigPropertyValidator)(properties.errorHandlingConfig));\n    errors.collect(cdk.propertyValidator('intermediateBucketName', cdk.requiredValidator)(properties.intermediateBucketName));\n    errors.collect(cdk.propertyValidator('intermediateBucketName', cdk.validateString)(properties.intermediateBucketName));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"SnowflakeDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SnowflakeDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `SnowflakeDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SnowflakeDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSnowflakeDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SnowflakeDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        ErrorHandlingConfig: cfnFlowErrorHandlingConfigPropertyToCloudFormation(properties.errorHandlingConfig),\n        IntermediateBucketName: cdk.stringToCloudFormation(properties.intermediateBucketName),\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSnowflakeDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SnowflakeDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SnowflakeDestinationPropertiesProperty>();\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('errorHandlingConfig', 'ErrorHandlingConfig', properties.ErrorHandlingConfig != null ? CfnFlowErrorHandlingConfigPropertyFromCloudFormation(properties.ErrorHandlingConfig) : undefined);\n    ret.addPropertyResult('intermediateBucketName', 'IntermediateBucketName', cfn_parse.FromCloudFormation.getString(properties.IntermediateBucketName));\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                \n    export interface SourceConnectorPropertiesProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly amplitude?: CfnFlow.AmplitudeSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly datadog?: CfnFlow.DatadogSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                               \n        readonly dynatrace?: CfnFlow.DynatraceSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                            \n        readonly googleAnalytics?: CfnFlow.GoogleAnalyticsSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly inforNexus?: CfnFlow.InforNexusSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly marketo?: CfnFlow.MarketoSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly s3?: CfnFlow.S3SourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                \n        readonly sapoData?: CfnFlow.SAPODataSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly salesforce?: CfnFlow.SalesforceSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly serviceNow?: CfnFlow.ServiceNowSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly singular?: CfnFlow.SingularSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly slack?: CfnFlow.SlackSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly trendmicro?: CfnFlow.TrendmicroSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly veeva?: CfnFlow.VeevaSourcePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly zendesk?: CfnFlow.ZendeskSourcePropertiesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceConnectorPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SourceConnectorPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SourceConnectorPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amplitude', CfnFlow_AmplitudeSourcePropertiesPropertyValidator)(properties.amplitude));\n    errors.collect(cdk.propertyValidator('datadog', CfnFlow_DatadogSourcePropertiesPropertyValidator)(properties.datadog));\n    errors.collect(cdk.propertyValidator('dynatrace', CfnFlow_DynatraceSourcePropertiesPropertyValidator)(properties.dynatrace));\n    errors.collect(cdk.propertyValidator('googleAnalytics', CfnFlow_GoogleAnalyticsSourcePropertiesPropertyValidator)(properties.googleAnalytics));\n    errors.collect(cdk.propertyValidator('inforNexus', CfnFlow_InforNexusSourcePropertiesPropertyValidator)(properties.inforNexus));\n    errors.collect(cdk.propertyValidator('marketo', CfnFlow_MarketoSourcePropertiesPropertyValidator)(properties.marketo));\n    errors.collect(cdk.propertyValidator('s3', CfnFlow_S3SourcePropertiesPropertyValidator)(properties.s3));\n    errors.collect(cdk.propertyValidator('sapoData', CfnFlow_SAPODataSourcePropertiesPropertyValidator)(properties.sapoData));\n    errors.collect(cdk.propertyValidator('salesforce', CfnFlow_SalesforceSourcePropertiesPropertyValidator)(properties.salesforce));\n    errors.collect(cdk.propertyValidator('serviceNow', CfnFlow_ServiceNowSourcePropertiesPropertyValidator)(properties.serviceNow));\n    errors.collect(cdk.propertyValidator('singular', CfnFlow_SingularSourcePropertiesPropertyValidator)(properties.singular));\n    errors.collect(cdk.propertyValidator('slack', CfnFlow_SlackSourcePropertiesPropertyValidator)(properties.slack));\n    errors.collect(cdk.propertyValidator('trendmicro', CfnFlow_TrendmicroSourcePropertiesPropertyValidator)(properties.trendmicro));\n    errors.collect(cdk.propertyValidator('veeva', CfnFlow_VeevaSourcePropertiesPropertyValidator)(properties.veeva));\n    errors.collect(cdk.propertyValidator('zendesk', CfnFlow_ZendeskSourcePropertiesPropertyValidator)(properties.zendesk));\n    return errors.wrap('supplied properties not correct for \"SourceConnectorPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SourceConnectorProperties` resource\n *\n * @param properties - the TypeScript properties of a `SourceConnectorPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SourceConnectorProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSourceConnectorPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SourceConnectorPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Amplitude: cfnFlowAmplitudeSourcePropertiesPropertyToCloudFormation(properties.amplitude),\n        Datadog: cfnFlowDatadogSourcePropertiesPropertyToCloudFormation(properties.datadog),\n        Dynatrace: cfnFlowDynatraceSourcePropertiesPropertyToCloudFormation(properties.dynatrace),\n        GoogleAnalytics: cfnFlowGoogleAnalyticsSourcePropertiesPropertyToCloudFormation(properties.googleAnalytics),\n        InforNexus: cfnFlowInforNexusSourcePropertiesPropertyToCloudFormation(properties.inforNexus),\n        Marketo: cfnFlowMarketoSourcePropertiesPropertyToCloudFormation(properties.marketo),\n        S3: cfnFlowS3SourcePropertiesPropertyToCloudFormation(properties.s3),\n        SAPOData: cfnFlowSAPODataSourcePropertiesPropertyToCloudFormation(properties.sapoData),\n        Salesforce: cfnFlowSalesforceSourcePropertiesPropertyToCloudFormation(properties.salesforce),\n        ServiceNow: cfnFlowServiceNowSourcePropertiesPropertyToCloudFormation(properties.serviceNow),\n        Singular: cfnFlowSingularSourcePropertiesPropertyToCloudFormation(properties.singular),\n        Slack: cfnFlowSlackSourcePropertiesPropertyToCloudFormation(properties.slack),\n        Trendmicro: cfnFlowTrendmicroSourcePropertiesPropertyToCloudFormation(properties.trendmicro),\n        Veeva: cfnFlowVeevaSourcePropertiesPropertyToCloudFormation(properties.veeva),\n        Zendesk: cfnFlowZendeskSourcePropertiesPropertyToCloudFormation(properties.zendesk),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSourceConnectorPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SourceConnectorPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SourceConnectorPropertiesProperty>();\n    ret.addPropertyResult('amplitude', 'Amplitude', properties.Amplitude != null ? CfnFlowAmplitudeSourcePropertiesPropertyFromCloudFormation(properties.Amplitude) : undefined);\n    ret.addPropertyResult('datadog', 'Datadog', properties.Datadog != null ? CfnFlowDatadogSourcePropertiesPropertyFromCloudFormation(properties.Datadog) : undefined);\n    ret.addPropertyResult('dynatrace', 'Dynatrace', properties.Dynatrace != null ? CfnFlowDynatraceSourcePropertiesPropertyFromCloudFormation(properties.Dynatrace) : undefined);\n    ret.addPropertyResult('googleAnalytics', 'GoogleAnalytics', properties.GoogleAnalytics != null ? CfnFlowGoogleAnalyticsSourcePropertiesPropertyFromCloudFormation(properties.GoogleAnalytics) : undefined);\n    ret.addPropertyResult('inforNexus', 'InforNexus', properties.InforNexus != null ? CfnFlowInforNexusSourcePropertiesPropertyFromCloudFormation(properties.InforNexus) : undefined);\n    ret.addPropertyResult('marketo', 'Marketo', properties.Marketo != null ? CfnFlowMarketoSourcePropertiesPropertyFromCloudFormation(properties.Marketo) : undefined);\n    ret.addPropertyResult('s3', 'S3', properties.S3 != null ? CfnFlowS3SourcePropertiesPropertyFromCloudFormation(properties.S3) : undefined);\n    ret.addPropertyResult('sapoData', 'SAPOData', properties.SAPOData != null ? CfnFlowSAPODataSourcePropertiesPropertyFromCloudFormation(properties.SAPOData) : undefined);\n    ret.addPropertyResult('salesforce', 'Salesforce', properties.Salesforce != null ? CfnFlowSalesforceSourcePropertiesPropertyFromCloudFormation(properties.Salesforce) : undefined);\n    ret.addPropertyResult('serviceNow', 'ServiceNow', properties.ServiceNow != null ? CfnFlowServiceNowSourcePropertiesPropertyFromCloudFormation(properties.ServiceNow) : undefined);\n    ret.addPropertyResult('singular', 'Singular', properties.Singular != null ? CfnFlowSingularSourcePropertiesPropertyFromCloudFormation(properties.Singular) : undefined);\n    ret.addPropertyResult('slack', 'Slack', properties.Slack != null ? CfnFlowSlackSourcePropertiesPropertyFromCloudFormation(properties.Slack) : undefined);\n    ret.addPropertyResult('trendmicro', 'Trendmicro', properties.Trendmicro != null ? CfnFlowTrendmicroSourcePropertiesPropertyFromCloudFormation(properties.Trendmicro) : undefined);\n    ret.addPropertyResult('veeva', 'Veeva', properties.Veeva != null ? CfnFlowVeevaSourcePropertiesPropertyFromCloudFormation(properties.Veeva) : undefined);\n    ret.addPropertyResult('zendesk', 'Zendesk', properties.Zendesk != null ? CfnFlowZendeskSourcePropertiesPropertyFromCloudFormation(properties.Zendesk) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                  \n    export interface SourceFlowConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly connectorProfileName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly connectorType: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly incrementalPullConfig?: CfnFlow.IncrementalPullConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly sourceConnectorProperties: CfnFlow.SourceConnectorPropertiesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceFlowConfigProperty`\n *\n * @param properties - the TypeScript properties of a `SourceFlowConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_SourceFlowConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectorProfileName', cdk.validateString)(properties.connectorProfileName));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.requiredValidator)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.validateString)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('incrementalPullConfig', CfnFlow_IncrementalPullConfigPropertyValidator)(properties.incrementalPullConfig));\n    errors.collect(cdk.propertyValidator('sourceConnectorProperties', cdk.requiredValidator)(properties.sourceConnectorProperties));\n    errors.collect(cdk.propertyValidator('sourceConnectorProperties', CfnFlow_SourceConnectorPropertiesPropertyValidator)(properties.sourceConnectorProperties));\n    return errors.wrap('supplied properties not correct for \"SourceFlowConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SourceFlowConfig` resource\n *\n * @param properties - the TypeScript properties of a `SourceFlowConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.SourceFlowConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowSourceFlowConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_SourceFlowConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectorProfileName: cdk.stringToCloudFormation(properties.connectorProfileName),\n        ConnectorType: cdk.stringToCloudFormation(properties.connectorType),\n        IncrementalPullConfig: cfnFlowIncrementalPullConfigPropertyToCloudFormation(properties.incrementalPullConfig),\n        SourceConnectorProperties: cfnFlowSourceConnectorPropertiesPropertyToCloudFormation(properties.sourceConnectorProperties),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowSourceFlowConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.SourceFlowConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.SourceFlowConfigProperty>();\n    ret.addPropertyResult('connectorProfileName', 'ConnectorProfileName', properties.ConnectorProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectorProfileName) : undefined);\n    ret.addPropertyResult('connectorType', 'ConnectorType', cfn_parse.FromCloudFormation.getString(properties.ConnectorType));\n    ret.addPropertyResult('incrementalPullConfig', 'IncrementalPullConfig', properties.IncrementalPullConfig != null ? CfnFlowIncrementalPullConfigPropertyFromCloudFormation(properties.IncrementalPullConfig) : undefined);\n    ret.addPropertyResult('sourceConnectorProperties', 'SourceConnectorProperties', CfnFlowSourceConnectorPropertiesPropertyFromCloudFormation(properties.SourceConnectorProperties));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                       \n    export interface TaskProperty {\n                                                                                                                                                                                                                                                                       \n        readonly connectorOperator?: CfnFlow.ConnectorOperatorProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                     \n        readonly destinationField?: string;\n                                                                                                                                                                                                                                                              \n        readonly sourceFields: string[];\n                                                                                                                                                                                                                                                                                                                                      \n        readonly taskProperties?: Array<CfnFlow.TaskPropertiesObjectProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly taskType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TaskProperty`\n *\n * @param properties - the TypeScript properties of a `TaskProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_TaskPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectorOperator', CfnFlow_ConnectorOperatorPropertyValidator)(properties.connectorOperator));\n    errors.collect(cdk.propertyValidator('destinationField', cdk.validateString)(properties.destinationField));\n    errors.collect(cdk.propertyValidator('sourceFields', cdk.requiredValidator)(properties.sourceFields));\n    errors.collect(cdk.propertyValidator('sourceFields', cdk.listValidator(cdk.validateString))(properties.sourceFields));\n    errors.collect(cdk.propertyValidator('taskProperties', cdk.listValidator(CfnFlow_TaskPropertiesObjectPropertyValidator))(properties.taskProperties));\n    errors.collect(cdk.propertyValidator('taskType', cdk.requiredValidator)(properties.taskType));\n    errors.collect(cdk.propertyValidator('taskType', cdk.validateString)(properties.taskType));\n    return errors.wrap('supplied properties not correct for \"TaskProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.Task` resource\n *\n * @param properties - the TypeScript properties of a `TaskProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.Task` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowTaskPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_TaskPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectorOperator: cfnFlowConnectorOperatorPropertyToCloudFormation(properties.connectorOperator),\n        DestinationField: cdk.stringToCloudFormation(properties.destinationField),\n        SourceFields: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceFields),\n        TaskProperties: cdk.listMapper(cfnFlowTaskPropertiesObjectPropertyToCloudFormation)(properties.taskProperties),\n        TaskType: cdk.stringToCloudFormation(properties.taskType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowTaskPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.TaskProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.TaskProperty>();\n    ret.addPropertyResult('connectorOperator', 'ConnectorOperator', properties.ConnectorOperator != null ? CfnFlowConnectorOperatorPropertyFromCloudFormation(properties.ConnectorOperator) : undefined);\n    ret.addPropertyResult('destinationField', 'DestinationField', properties.DestinationField != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationField) : undefined);\n    ret.addPropertyResult('sourceFields', 'SourceFields', cfn_parse.FromCloudFormation.getStringArray(properties.SourceFields));\n    ret.addPropertyResult('taskProperties', 'TaskProperties', properties.TaskProperties != null ? cfn_parse.FromCloudFormation.getArray(CfnFlowTaskPropertiesObjectPropertyFromCloudFormation)(properties.TaskProperties) : undefined);\n    ret.addPropertyResult('taskType', 'TaskType', cfn_parse.FromCloudFormation.getString(properties.TaskType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface TaskPropertiesObjectProperty {\nn        readonly key: string;\n                                                                                                                                                                                                                                                       \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TaskPropertiesObjectProperty`\n *\n * @param properties - the TypeScript properties of a `TaskPropertiesObjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_TaskPropertiesObjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TaskPropertiesObjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.TaskPropertiesObject` resource\n *\n * @param properties - the TypeScript properties of a `TaskPropertiesObjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.TaskPropertiesObject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowTaskPropertiesObjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_TaskPropertiesObjectPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowTaskPropertiesObjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.TaskPropertiesObjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.TaskPropertiesObjectProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                              \n    export interface TrendmicroSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TrendmicroSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `TrendmicroSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_TrendmicroSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"TrendmicroSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.TrendmicroSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `TrendmicroSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.TrendmicroSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowTrendmicroSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_TrendmicroSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowTrendmicroSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.TrendmicroSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.TrendmicroSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                 \n    export interface TriggerConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly triggerProperties?: CfnFlow.ScheduledTriggerPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                              \n        readonly triggerType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TriggerConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TriggerConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_TriggerConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('triggerProperties', CfnFlow_ScheduledTriggerPropertiesPropertyValidator)(properties.triggerProperties));\n    errors.collect(cdk.propertyValidator('triggerType', cdk.requiredValidator)(properties.triggerType));\n    errors.collect(cdk.propertyValidator('triggerType', cdk.validateString)(properties.triggerType));\n    return errors.wrap('supplied properties not correct for \"TriggerConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.TriggerConfig` resource\n *\n * @param properties - the TypeScript properties of a `TriggerConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.TriggerConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowTriggerConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_TriggerConfigPropertyValidator(properties).assertSuccess();\n    return {\n        TriggerProperties: cfnFlowScheduledTriggerPropertiesPropertyToCloudFormation(properties.triggerProperties),\n        TriggerType: cdk.stringToCloudFormation(properties.triggerType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowTriggerConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.TriggerConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.TriggerConfigProperty>();\n    ret.addPropertyResult('triggerProperties', 'TriggerProperties', properties.TriggerProperties != null ? CfnFlowScheduledTriggerPropertiesPropertyFromCloudFormation(properties.TriggerProperties) : undefined);\n    ret.addPropertyResult('triggerType', 'TriggerType', cfn_parse.FromCloudFormation.getString(properties.TriggerType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                \n    export interface UpsolverDestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                             \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly bucketPrefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly s3OutputFormatConfig: CfnFlow.UpsolverS3OutputFormatConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UpsolverDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `UpsolverDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_UpsolverDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('s3OutputFormatConfig', cdk.requiredValidator)(properties.s3OutputFormatConfig));\n    errors.collect(cdk.propertyValidator('s3OutputFormatConfig', CfnFlow_UpsolverS3OutputFormatConfigPropertyValidator)(properties.s3OutputFormatConfig));\n    return errors.wrap('supplied properties not correct for \"UpsolverDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.UpsolverDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `UpsolverDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.UpsolverDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowUpsolverDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_UpsolverDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        S3OutputFormatConfig: cfnFlowUpsolverS3OutputFormatConfigPropertyToCloudFormation(properties.s3OutputFormatConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowUpsolverDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.UpsolverDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.UpsolverDestinationPropertiesProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('s3OutputFormatConfig', 'S3OutputFormatConfig', CfnFlowUpsolverS3OutputFormatConfigPropertyFromCloudFormation(properties.S3OutputFormatConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface UpsolverS3OutputFormatConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly aggregationConfig?: CfnFlow.AggregationConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly fileType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly prefixConfig: CfnFlow.PrefixConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UpsolverS3OutputFormatConfigProperty`\n *\n * @param properties - the TypeScript properties of a `UpsolverS3OutputFormatConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_UpsolverS3OutputFormatConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aggregationConfig', CfnFlow_AggregationConfigPropertyValidator)(properties.aggregationConfig));\n    errors.collect(cdk.propertyValidator('fileType', cdk.validateString)(properties.fileType));\n    errors.collect(cdk.propertyValidator('prefixConfig', cdk.requiredValidator)(properties.prefixConfig));\n    errors.collect(cdk.propertyValidator('prefixConfig', CfnFlow_PrefixConfigPropertyValidator)(properties.prefixConfig));\n    return errors.wrap('supplied properties not correct for \"UpsolverS3OutputFormatConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.UpsolverS3OutputFormatConfig` resource\n *\n * @param properties - the TypeScript properties of a `UpsolverS3OutputFormatConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.UpsolverS3OutputFormatConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowUpsolverS3OutputFormatConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_UpsolverS3OutputFormatConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AggregationConfig: cfnFlowAggregationConfigPropertyToCloudFormation(properties.aggregationConfig),\n        FileType: cdk.stringToCloudFormation(properties.fileType),\n        PrefixConfig: cfnFlowPrefixConfigPropertyToCloudFormation(properties.prefixConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowUpsolverS3OutputFormatConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.UpsolverS3OutputFormatConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.UpsolverS3OutputFormatConfigProperty>();\n    ret.addPropertyResult('aggregationConfig', 'AggregationConfig', properties.AggregationConfig != null ? CfnFlowAggregationConfigPropertyFromCloudFormation(properties.AggregationConfig) : undefined);\n    ret.addPropertyResult('fileType', 'FileType', properties.FileType != null ? cfn_parse.FromCloudFormation.getString(properties.FileType) : undefined);\n    ret.addPropertyResult('prefixConfig', 'PrefixConfig', CfnFlowPrefixConfigPropertyFromCloudFormation(properties.PrefixConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                   \n    export interface VeevaSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly documentType?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly includeAllVersions?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly includeRenditions?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly includeSourceFiles?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VeevaSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `VeevaSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_VeevaSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('documentType', cdk.validateString)(properties.documentType));\n    errors.collect(cdk.propertyValidator('includeAllVersions', cdk.validateBoolean)(properties.includeAllVersions));\n    errors.collect(cdk.propertyValidator('includeRenditions', cdk.validateBoolean)(properties.includeRenditions));\n    errors.collect(cdk.propertyValidator('includeSourceFiles', cdk.validateBoolean)(properties.includeSourceFiles));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"VeevaSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.VeevaSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `VeevaSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.VeevaSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowVeevaSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_VeevaSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        DocumentType: cdk.stringToCloudFormation(properties.documentType),\n        IncludeAllVersions: cdk.booleanToCloudFormation(properties.includeAllVersions),\n        IncludeRenditions: cdk.booleanToCloudFormation(properties.includeRenditions),\n        IncludeSourceFiles: cdk.booleanToCloudFormation(properties.includeSourceFiles),\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowVeevaSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.VeevaSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.VeevaSourcePropertiesProperty>();\n    ret.addPropertyResult('documentType', 'DocumentType', properties.DocumentType != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentType) : undefined);\n    ret.addPropertyResult('includeAllVersions', 'IncludeAllVersions', properties.IncludeAllVersions != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeAllVersions) : undefined);\n    ret.addPropertyResult('includeRenditions', 'IncludeRenditions', properties.IncludeRenditions != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeRenditions) : undefined);\n    ret.addPropertyResult('includeSourceFiles', 'IncludeSourceFiles', properties.IncludeSourceFiles != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeSourceFiles) : undefined);\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                       \n    export interface ZendeskDestinationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                               \n        readonly errorHandlingConfig?: CfnFlow.ErrorHandlingConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly idFieldNames?: string[];\n                                                                                                                                                                                                                                                                                                     \n        readonly object: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly writeOperationType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZendeskDestinationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ZendeskDestinationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_ZendeskDestinationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorHandlingConfig', CfnFlow_ErrorHandlingConfigPropertyValidator)(properties.errorHandlingConfig));\n    errors.collect(cdk.propertyValidator('idFieldNames', cdk.listValidator(cdk.validateString))(properties.idFieldNames));\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    errors.collect(cdk.propertyValidator('writeOperationType', cdk.validateString)(properties.writeOperationType));\n    return errors.wrap('supplied properties not correct for \"ZendeskDestinationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ZendeskDestinationProperties` resource\n *\n * @param properties - the TypeScript properties of a `ZendeskDestinationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ZendeskDestinationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowZendeskDestinationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_ZendeskDestinationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorHandlingConfig: cfnFlowErrorHandlingConfigPropertyToCloudFormation(properties.errorHandlingConfig),\n        IdFieldNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.idFieldNames),\n        Object: cdk.stringToCloudFormation(properties.object),\n        WriteOperationType: cdk.stringToCloudFormation(properties.writeOperationType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowZendeskDestinationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.ZendeskDestinationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.ZendeskDestinationPropertiesProperty>();\n    ret.addPropertyResult('errorHandlingConfig', 'ErrorHandlingConfig', properties.ErrorHandlingConfig != null ? CfnFlowErrorHandlingConfigPropertyFromCloudFormation(properties.ErrorHandlingConfig) : undefined);\n    ret.addPropertyResult('idFieldNames', 'IdFieldNames', properties.IdFieldNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.IdFieldNames) : undefined);\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addPropertyResult('writeOperationType', 'WriteOperationType', properties.WriteOperationType != null ? cfn_parse.FromCloudFormation.getString(properties.WriteOperationType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFlow {\n                                                                                                                                                                                                                                                                                       \n    export interface ZendeskSourcePropertiesProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly object: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZendeskSourcePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ZendeskSourcePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlow_ZendeskSourcePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('object', cdk.requiredValidator)(properties.object));\n    errors.collect(cdk.propertyValidator('object', cdk.validateString)(properties.object));\n    return errors.wrap('supplied properties not correct for \"ZendeskSourcePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ZendeskSourceProperties` resource\n *\n * @param properties - the TypeScript properties of a `ZendeskSourcePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppFlow::Flow.ZendeskSourceProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowZendeskSourcePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlow_ZendeskSourcePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Object: cdk.stringToCloudFormation(properties.object),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowZendeskSourcePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlow.ZendeskSourcePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlow.ZendeskSourcePropertiesProperty>();\n    ret.addPropertyResult('object', 'Object', cfn_parse.FromCloudFormation.getString(properties.Object));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
