{
  "version": 3,
  "sources": ["scalable-target.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { IResource, Lazy, Resource, withResolved } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnScalableTarget } from './applicationautoscaling.generated';\nimport { Schedule } from './schedule';\nimport { BasicStepScalingPolicyProps, StepScalingPolicy } from './step-scaling-policy';\nimport { BasicTargetTrackingScalingPolicyProps, TargetTrackingScalingPolicy } from './target-tracking-scaling-policy';\n\nexport interface IScalableTarget extends IResource {\n                           \n  readonly scalableTargetId: string;\n}\n\n                                           \nexport interface ScalableTargetProps {\n                                                                                                                     \n  readonly minCapacity: number;\n\n                                                                                                                     \n  readonly maxCapacity: number;\n\n                                                                                                                                             \n  readonly role?: iam.IRole;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n  readonly resourceId: string;\n\n                                                                                                                                                                                                                                                                                                                       \n  readonly scalableDimension: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly serviceNamespace: ServiceNamespace;\n}\n\n                                   \nexport class ScalableTarget extends Resource implements IScalableTarget {\n\n  public static fromScalableTargetId(scope: Construct, id: string, scalableTargetId: string): IScalableTarget {\n    class Import extends Resource implements IScalableTarget {\n      public readonly scalableTargetId = scalableTargetId;\n    }\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                     \n  public readonly scalableTargetId: string;\n\n                                                                               \n  public readonly role: iam.IRole;\n\n  private readonly actions = new Array<CfnScalableTarget.ScheduledActionProperty>();\n\n  constructor(scope: Construct, id: string, props: ScalableTargetProps) {\n    super(scope, id);\n\n    withResolved(props.maxCapacity, max => {\n      if (max < 0) {\n        throw new RangeError(`maxCapacity cannot be negative, got: ${props.maxCapacity}`);\n      }\n    });\n\n    withResolved(props.minCapacity, min => {\n      if (min < 0) {\n        throw new RangeError(`minCapacity cannot be negative, got: ${props.minCapacity}`);\n      }\n    });\n\n    withResolved(props.minCapacity, props.maxCapacity, (min, max) => {\n      if (max < min) {\n        throw new RangeError(`minCapacity (${props.minCapacity}) should be lower than maxCapacity (${props.maxCapacity})`);\n      }\n    });\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    });\n\n    const resource = new CfnScalableTarget(this, 'Resource', {\n      maxCapacity: props.maxCapacity,\n      minCapacity: props.minCapacity,\n      resourceId: props.resourceId,\n      roleArn: this.role.roleArn,\n      scalableDimension: props.scalableDimension,\n      scheduledActions: Lazy.any({ produce: () => this.actions }, { omitEmptyArray: true }),\n      serviceNamespace: props.serviceNamespace,\n    });\n\n    this.scalableTargetId = resource.ref;\n  }\n\n                                                            \n  public addToRolePolicy(statement: iam.PolicyStatement) {\n    this.role.addToPrincipalPolicy(statement);\n  }\n\n                                              \n  public scaleOnSchedule(id: string, action: ScalingSchedule) {\n    if (action.minCapacity === undefined && action.maxCapacity === undefined) {\n      throw new Error(`You must supply at least one of minCapacity or maxCapacity, got ${JSON.stringify(action)}`);\n    }\n    this.actions.push({\n      scheduledActionName: id,\n      schedule: action.schedule.expressionString,\n      startTime: action.startTime,\n      endTime: action.endTime,\n      scalableTargetAction: {\n        maxCapacity: action.maxCapacity,\n        minCapacity: action.minCapacity,\n      },\n    });\n  }\n\n                                                         \n  public scaleOnMetric(id: string, props: BasicStepScalingPolicyProps) {\n    return new StepScalingPolicy(this, id, { ...props, scalingTarget: this });\n  }\n\n                                                                                \n  public scaleToTrackMetric(id: string, props: BasicTargetTrackingScalingPolicyProps) {\n    return new TargetTrackingScalingPolicy(this, id, { ...props, scalingTarget: this });\n  }\n}\n\n                                     \nexport interface ScalingSchedule {\n                                             \n  readonly schedule: Schedule;\n\n                                                                                                               \n  readonly startTime?: Date\n\n                                                                                               \n  readonly endTime?: Date;\n\n                                                                                                                                                                                                                                                                                                                           \n  readonly minCapacity?: number;\n\n                                                                                                                                                                                                                                                                                                                       \n  readonly maxCapacity?: number;\n}\n\n                                                            \nexport enum ServiceNamespace {\n                                          \n  ECS = 'ecs',\n\n                                   \n  ELASTIC_MAP_REDUCE = 'elasticmapreduce',\n\n                                      \n  EC2 = 'ec2',\n\n                           \n  APPSTREAM = 'appstream',\n\n                          \n  DYNAMODB = 'dynamodb',\n\n                                            \n  RDS = 'rds',\n\n                          \n  SAGEMAKER = 'sagemaker',\n\n                                \n  CUSTOM_RESOURCE = 'custom-resource',\n\n                       \n  LAMBDA = 'lambda',\n\n                           \n  COMPREHEND = 'comprehend',\n\n                      \n  KAFKA = 'kafka',\n\n                            \n  ELASTICACHE = 'elasticache',\n}\n"],
  "mappings": "8OAAA,IAAA,QAAA,iBACA,OAAA,QAAA,cAEA,mCAAA,QAAA,sCAEA,sBAAA,QAAA,yBACA,iCAAA,QAAA,oCA6BA,4BAAoC,QAAA,QAAQ,CAiB1C,YAAY,MAAkB,GAAY,MAA0B,CAClE,MAAM,MAAO,IAHE,KAAA,QAAU,GAAI,iGAK7B,OAAA,aAAa,MAAM,YAAa,KAAM,CACpC,GAAI,IAAM,EACR,KAAM,IAAI,YAAW,wCAAwC,MAAM,iBAIvE,OAAA,aAAa,MAAM,YAAa,KAAM,CACpC,GAAI,IAAM,EACR,KAAM,IAAI,YAAW,wCAAwC,MAAM,iBAIvE,OAAA,aAAa,MAAM,YAAa,MAAM,YAAa,CAAC,IAAK,MAAO,CAC9D,GAAI,IAAM,IACR,KAAM,IAAI,YAAW,gBAAgB,MAAM,kDAAkD,MAAM,kBAIvG,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,OAAQ,CACnD,UAAW,GAAI,KAAI,iBAAiB,2CAGtC,KAAM,UAAW,GAAI,oCAAA,kBAAkB,KAAM,WAAY,CACvD,YAAa,MAAM,YACnB,YAAa,MAAM,YACnB,WAAY,MAAM,WAClB,QAAS,KAAK,KAAK,QACnB,kBAAmB,MAAM,kBACzB,iBAAkB,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,SAAW,CAAE,eAAgB,KAC9E,iBAAkB,MAAM,mBAG1B,KAAK,iBAAmB,SAAS,UAlDrB,sBAAqB,MAAkB,GAAY,iBAAwB,CACvF,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,iBAAmB,kBAErC,MAAO,IAAI,QAAO,MAAO,IAkDpB,gBAAgB,UAA8B,wEACnD,KAAK,KAAK,qBAAqB,WAI1B,gBAAgB,GAAY,OAAuB,CACxD,0FAAI,OAAO,cAAgB,QAAa,OAAO,cAAgB,OAC7D,KAAM,IAAI,OAAM,mEAAmE,KAAK,UAAU,WAEpG,KAAK,QAAQ,KAAK,CAChB,oBAAqB,GACrB,SAAU,OAAO,SAAS,iBAC1B,UAAW,OAAO,UAClB,QAAS,OAAO,QAChB,qBAAsB,CACpB,YAAa,OAAO,YACpB,YAAa,OAAO,eAMnB,cAAc,GAAY,MAAkC,0GAC1D,GAAI,uBAAA,kBAAkB,KAAM,GAAI,IAAK,MAAO,cAAe,OAI7D,mBAAmB,GAAY,MAA4C,oHACzE,GAAI,kCAAA,4BAA4B,KAAM,GAAI,IAAK,MAAO,cAAe,QApFhF,QAAA,eAAA,uIA2GA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAE1B,kBAAA,IAAA,MAGA,kBAAA,mBAAA,mBAGA,kBAAA,IAAA,MAGA,kBAAA,UAAA,YAGA,kBAAA,SAAA,WAGA,kBAAA,IAAA,MAGA,kBAAA,UAAA,YAGA,kBAAA,gBAAA,kBAGA,kBAAA,OAAA,SAGA,kBAAA,WAAA,aAGA,kBAAA,MAAA,QAGA,kBAAA,YAAA,gBAnCU,iBAAA,QAAA,kBAAA,SAAA,iBAAgB",
  "names": []
}
