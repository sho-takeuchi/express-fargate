{
  "version": 3,
  "sources": ["target-tracking-scaling-policy.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnScalingPolicy } from './applicationautoscaling.generated';\nimport { IScalableTarget } from './scalable-target';\n\n                                                                                                                                                                                                                                                                                                        \nexport interface BaseTargetTrackingProps {\n                                                                                                 \n  readonly policyName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n  readonly disableScaleIn?: boolean;\n\nn  readonly scaleInCooldown?: cdk.Duration;\n\nn  readonly scaleOutCooldown?: cdk.Duration;\n}\n\n                                                                                                 \nexport interface BasicTargetTrackingScalingPolicyProps extends BaseTargetTrackingProps {\n                                                 \n  readonly targetValue: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly predefinedMetric?: PredefinedMetric;\n\n                                                                                                                                                                                                                                                                                                            \n  readonly resourceLabel?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n  readonly customMetric?: cloudwatch.IMetric;\n}\n\n                                                                                       \nexport interface TargetTrackingScalingPolicyProps extends BasicTargetTrackingScalingPolicyProps {\n                                   \n  readonly scalingTarget: IScalableTarget;\n}\n\nexport class TargetTrackingScalingPolicy extends Construct {\n                                          \n  public readonly scalingPolicyArn: string;\n\n  constructor(scope: Construct, id: string, props: TargetTrackingScalingPolicyProps) {\n    if ((props.customMetric === undefined) === (props.predefinedMetric === undefined)) {\n      throw new Error('Exactly one of \\'customMetric\\' or \\'predefinedMetric\\' must be specified.');\n    }\n\n    if (props.customMetric && !props.customMetric.toMetricConfig().metricStat) {\n      throw new Error('Only direct metrics are supported for Target Tracking. Use Step Scaling or supply a Metric object.');\n    }\n\n    super(scope, id);\n\n    // replace dummy value in DYNAMODB_WRITE_CAPACITY_UTILIZATION due to a jsii bug (https://github.com/aws/jsii/issues/2782)\n    const predefinedMetric = props.predefinedMetric === PredefinedMetric.DYNAMODB_WRITE_CAPACITY_UTILIZATION ?\n      PredefinedMetric.DYANMODB_WRITE_CAPACITY_UTILIZATION :\n      props.predefinedMetric;\n\n    const resource = new CfnScalingPolicy(this, 'Resource', {\n      policyName: props.policyName || cdk.Names.uniqueId(this),\n      policyType: 'TargetTrackingScaling',\n      scalingTargetId: props.scalingTarget.scalableTargetId,\n      targetTrackingScalingPolicyConfiguration: {\n        customizedMetricSpecification: renderCustomMetric(props.customMetric),\n        disableScaleIn: props.disableScaleIn,\n        predefinedMetricSpecification: predefinedMetric !== undefined ? {\n          predefinedMetricType: predefinedMetric,\n          resourceLabel: props.resourceLabel,\n        } : undefined,\n        scaleInCooldown: props.scaleInCooldown && props.scaleInCooldown.toSeconds(),\n        scaleOutCooldown: props.scaleOutCooldown && props.scaleOutCooldown.toSeconds(),\n        targetValue: props.targetValue,\n      },\n    });\n\n    this.scalingPolicyArn = resource.ref;\n  }\n}\n\nfunction renderCustomMetric(metric?: cloudwatch.IMetric): CfnScalingPolicy.CustomizedMetricSpecificationProperty | undefined {\n  if (!metric) { return undefined; }\n  const c = metric.toMetricConfig().metricStat!;\n\n  if (c.statistic.startsWith('p')) {\n    throw new Error(`Cannot use statistic '${c.statistic}' for Target Tracking: only 'Average', 'Minimum', 'Maximum', 'SampleCount', and 'Sum' are supported.`);\n  }\n\n  return {\n    dimensions: c.dimensions,\n    metricName: c.metricName,\n    namespace: c.namespace,\n    statistic: c.statistic,\n    unit: c.unitFilter,\n  };\n}\n\n                                                    \nexport enum PredefinedMetric {\n                                                                                                                                                                    \n  DYNAMODB_READ_CAPACITY_UTILIZATION = 'DynamoDBReadCapacityUtilization',\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n  DYNAMODB_WRITE_CAPACITY_UTILIZATION = 'DynamoDBWriteCapacityUtilization-dummy',\n                                                                                                                                                                                                                                                  \n  DYANMODB_WRITE_CAPACITY_UTILIZATION = 'DynamoDBWriteCapacityUtilization',\n                                                                                                                                                               \n  ALB_REQUEST_COUNT_PER_TARGET = 'ALBRequestCountPerTarget',\n                                                                                                                                                                     \n  RDS_READER_AVERAGE_CPU_UTILIZATION = 'RDSReaderAverageCPUUtilization',\n                                                                                                                                                                          \n  RDS_READER_AVERAGE_DATABASE_CONNECTIONS = 'RDSReaderAverageDatabaseConnections',\n                                                                                                                                                                                 \n  EC2_SPOT_FLEET_REQUEST_AVERAGE_CPU_UTILIZATION = 'EC2SpotFleetRequestAverageCPUUtilization',\n                                                                                                                                                                            \n  EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_IN = 'EC2SpotFleetRequestAverageNetworkIn',\n                                                                                                                                                                             \n  EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_OUT = 'EC2SpotFleetRequestAverageNetworkOut',\n                                                                                                                                                                             \n  SAGEMAKER_VARIANT_INVOCATIONS_PER_INSTANCE = 'SageMakerVariantInvocationsPerInstance',\n                                                                                                                                                                      \n  ECS_SERVICE_AVERAGE_CPU_UTILIZATION = 'ECSServiceAverageCPUUtilization',\n                                                                                                                                                                         \n  ECS_SERVICE_AVERAGE_MEMORY_UTILIZATION = 'ECSServiceAverageMemoryUtilization',\n                                                                                                                                                                         \n  LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION = 'LambdaProvisionedConcurrencyUtilization',\n                                                                                                                                                                   \n  KAFKA_BROKER_STORAGE_UTILIZATION = 'KafkaBrokerStorageUtilization',\n                                                                                                                                                                               \n  ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION = 'ElastiCachePrimaryEngineCPUUtilization',\n                                                                                                                                                                               \n  ELASTICACHE_REPLICA_ENGINE_CPU_UTILIZATION = 'ElastiCacheReplicaEngineCPUUtilization',\n                                                                                                                                                                               \n  ELASTICACHE_DATABASE_MEMORY_USAGE_COUNTED_FOR_EVICT_PERCENTAGE = 'ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage',\n}\n"],
  "mappings": "2PACA,IAAA,QAAA,cACA,aAAA,QAAA,cACA,mCAAA,QAAA,sCAuCA,yCAAiD,cAAA,SAAS,CAIxD,YAAY,MAAkB,GAAY,MAAuC,CAC/E,0GAAK,MAAM,eAAiB,QAAgB,OAAM,mBAAqB,QACrE,KAAM,IAAI,OAAM,0EAGlB,GAAI,MAAM,cAAgB,CAAC,MAAM,aAAa,iBAAiB,WAC7D,KAAM,IAAI,OAAM,sGAGlB,MAAM,MAAO,IAGb,KAAM,kBAAmB,MAAM,mBAAqB,iBAAiB,oCACnE,iBAAiB,oCACjB,MAAM,iBAEF,SAAW,GAAI,oCAAA,iBAAiB,KAAM,WAAY,CACtD,WAAY,MAAM,YAAc,IAAI,MAAM,SAAS,MACnD,WAAY,wBACZ,gBAAiB,MAAM,cAAc,iBACrC,yCAA0C,CACxC,8BAA+B,mBAAmB,MAAM,cACxD,eAAgB,MAAM,eACtB,8BAA+B,mBAAqB,OAAY,CAC9D,qBAAsB,iBACtB,cAAe,MAAM,eACnB,OACJ,gBAAiB,MAAM,iBAAmB,MAAM,gBAAgB,YAChE,iBAAkB,MAAM,kBAAoB,MAAM,iBAAiB,YACnE,YAAa,MAAM,eAIvB,KAAK,iBAAmB,SAAS,KArCrC,QAAA,4BAAA,8KAyCA,4BAA4B,OAA2B,CACrD,GAAI,CAAC,OAAU,OACf,KAAM,GAAI,OAAO,iBAAiB,WAElC,GAAI,EAAE,UAAU,WAAW,KACzB,KAAM,IAAI,OAAM,yBAAyB,EAAE,iHAG7C,MAAO,CACL,WAAY,EAAE,WACd,WAAY,EAAE,WACd,UAAW,EAAE,UACb,UAAW,EAAE,UACb,KAAM,EAAE,YAKZ,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAE1B,kBAAA,mCAAA,kCAEA,kBAAA,oCAAA,yCAEA,kBAAA,oCAAA,mCAEA,kBAAA,6BAAA,2BAEA,kBAAA,mCAAA,iCAEA,kBAAA,wCAAA,sCAEA,kBAAA,+CAAA,2CAEA,kBAAA,0CAAA,sCAEA,kBAAA,2CAAA,uCAEA,kBAAA,2CAAA,yCAEA,kBAAA,oCAAA,kCAEA,kBAAA,uCAAA,qCAEA,kBAAA,2CAAA,0CAEA,kBAAA,iCAAA,gCAEA,kBAAA,2CAAA,yCAEA,kBAAA,2CAAA,yCAEA,kBAAA,+DAAA,4DAlCU,iBAAA,QAAA,kBAAA,SAAA,iBAAgB",
  "names": []
}
