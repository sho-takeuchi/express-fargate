{
  "version": 3,
  "sources": ["applicationinsights.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:27.975Z\",\"fingerprint\":\"w9mMZ51kvnt2rhSt5Ogw4Jg3Bt44B0Fw8vlZgoJ7vok=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                      \nexport interface CfnApplicationProps {\n\n                                                                                                                                                                                                                                                                         \n    readonly resourceGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly autoConfigurationEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly componentMonitoringSettings?: Array<CfnApplication.ComponentMonitoringSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                 \n    readonly customComponents?: Array<CfnApplication.CustomComponentProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly cweMonitorEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    readonly logPatternSets?: Array<CfnApplication.LogPatternSetProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    readonly opsCenterEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly opsItemSnsTopicArn?: string;\n\n                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoConfigurationEnabled', cdk.validateBoolean)(properties.autoConfigurationEnabled));\n    errors.collect(cdk.propertyValidator('cweMonitorEnabled', cdk.validateBoolean)(properties.cweMonitorEnabled));\n    errors.collect(cdk.propertyValidator('componentMonitoringSettings', cdk.listValidator(CfnApplication_ComponentMonitoringSettingPropertyValidator))(properties.componentMonitoringSettings));\n    errors.collect(cdk.propertyValidator('customComponents', cdk.listValidator(CfnApplication_CustomComponentPropertyValidator))(properties.customComponents));\n    errors.collect(cdk.propertyValidator('logPatternSets', cdk.listValidator(CfnApplication_LogPatternSetPropertyValidator))(properties.logPatternSets));\n    errors.collect(cdk.propertyValidator('opsCenterEnabled', cdk.validateBoolean)(properties.opsCenterEnabled));\n    errors.collect(cdk.propertyValidator('opsItemSnsTopicArn', cdk.validateString)(properties.opsItemSnsTopicArn));\n    errors.collect(cdk.propertyValidator('resourceGroupName', cdk.requiredValidator)(properties.resourceGroupName));\n    errors.collect(cdk.propertyValidator('resourceGroupName', cdk.validateString)(properties.resourceGroupName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationPropsValidator(properties).assertSuccess();\n    return {\n        ResourceGroupName: cdk.stringToCloudFormation(properties.resourceGroupName),\n        AutoConfigurationEnabled: cdk.booleanToCloudFormation(properties.autoConfigurationEnabled),\n        ComponentMonitoringSettings: cdk.listMapper(cfnApplicationComponentMonitoringSettingPropertyToCloudFormation)(properties.componentMonitoringSettings),\n        CustomComponents: cdk.listMapper(cfnApplicationCustomComponentPropertyToCloudFormation)(properties.customComponents),\n        CWEMonitorEnabled: cdk.booleanToCloudFormation(properties.cweMonitorEnabled),\n        LogPatternSets: cdk.listMapper(cfnApplicationLogPatternSetPropertyToCloudFormation)(properties.logPatternSets),\n        OpsCenterEnabled: cdk.booleanToCloudFormation(properties.opsCenterEnabled),\n        OpsItemSNSTopicArn: cdk.stringToCloudFormation(properties.opsItemSnsTopicArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationProps>();\n    ret.addPropertyResult('resourceGroupName', 'ResourceGroupName', cfn_parse.FromCloudFormation.getString(properties.ResourceGroupName));\n    ret.addPropertyResult('autoConfigurationEnabled', 'AutoConfigurationEnabled', properties.AutoConfigurationEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoConfigurationEnabled) : undefined);\n    ret.addPropertyResult('componentMonitoringSettings', 'ComponentMonitoringSettings', properties.ComponentMonitoringSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationComponentMonitoringSettingPropertyFromCloudFormation)(properties.ComponentMonitoringSettings) : undefined);\n    ret.addPropertyResult('customComponents', 'CustomComponents', properties.CustomComponents != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationCustomComponentPropertyFromCloudFormation)(properties.CustomComponents) : undefined);\n    ret.addPropertyResult('cweMonitorEnabled', 'CWEMonitorEnabled', properties.CWEMonitorEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CWEMonitorEnabled) : undefined);\n    ret.addPropertyResult('logPatternSets', 'LogPatternSets', properties.LogPatternSets != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationLogPatternSetPropertyFromCloudFormation)(properties.LogPatternSets) : undefined);\n    ret.addPropertyResult('opsCenterEnabled', 'OpsCenterEnabled', properties.OpsCenterEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.OpsCenterEnabled) : undefined);\n    ret.addPropertyResult('opsItemSnsTopicArn', 'OpsItemSNSTopicArn', properties.OpsItemSNSTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.OpsItemSNSTopicArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnApplication extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ApplicationInsights::Application\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplication {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplication(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                            \n    public readonly attrApplicationArn: string;\n\n                                                                                                                                                                                                                                                                         \n    public resourceGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public autoConfigurationEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public componentMonitoringSettings: Array<CfnApplication.ComponentMonitoringSettingProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                 \n    public customComponents: Array<CfnApplication.CustomComponentProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    public cweMonitorEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                   \n    public logPatternSets: Array<CfnApplication.LogPatternSetProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    public opsCenterEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public opsItemSnsTopicArn: string | undefined;\n\n                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationProps) {\n        super(scope, id, { type: CfnApplication.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'resourceGroupName', this);\n        this.attrApplicationArn = cdk.Token.asString(this.getAtt('ApplicationARN'));\n\n        this.resourceGroupName = props.resourceGroupName;\n        this.autoConfigurationEnabled = props.autoConfigurationEnabled;\n        this.componentMonitoringSettings = props.componentMonitoringSettings;\n        this.customComponents = props.customComponents;\n        this.cweMonitorEnabled = props.cweMonitorEnabled;\n        this.logPatternSets = props.logPatternSets;\n        this.opsCenterEnabled = props.opsCenterEnabled;\n        this.opsItemSnsTopicArn = props.opsItemSnsTopicArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ApplicationInsights::Application\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplication.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resourceGroupName: this.resourceGroupName,\n            autoConfigurationEnabled: this.autoConfigurationEnabled,\n            componentMonitoringSettings: this.componentMonitoringSettings,\n            customComponents: this.customComponents,\n            cweMonitorEnabled: this.cweMonitorEnabled,\n            logPatternSets: this.logPatternSets,\n            opsCenterEnabled: this.opsCenterEnabled,\n            opsItemSnsTopicArn: this.opsItemSnsTopicArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface AlarmProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly alarmName: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly severity?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AlarmProperty`\n *\n * @param properties - the TypeScript properties of a `AlarmProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_AlarmPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmName', cdk.requiredValidator)(properties.alarmName));\n    errors.collect(cdk.propertyValidator('alarmName', cdk.validateString)(properties.alarmName));\n    errors.collect(cdk.propertyValidator('severity', cdk.validateString)(properties.severity));\n    return errors.wrap('supplied properties not correct for \"AlarmProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.Alarm` resource\n *\n * @param properties - the TypeScript properties of a `AlarmProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.Alarm` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationAlarmPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_AlarmPropertyValidator(properties).assertSuccess();\n    return {\n        AlarmName: cdk.stringToCloudFormation(properties.alarmName),\n        Severity: cdk.stringToCloudFormation(properties.severity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationAlarmPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.AlarmProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.AlarmProperty>();\n    ret.addPropertyResult('alarmName', 'AlarmName', cfn_parse.FromCloudFormation.getString(properties.AlarmName));\n    ret.addPropertyResult('severity', 'Severity', properties.Severity != null ? cfn_parse.FromCloudFormation.getString(properties.Severity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface AlarmMetricProperty {\nn        readonly alarmMetricName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AlarmMetricProperty`\n *\n * @param properties - the TypeScript properties of a `AlarmMetricProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_AlarmMetricPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmMetricName', cdk.requiredValidator)(properties.alarmMetricName));\n    errors.collect(cdk.propertyValidator('alarmMetricName', cdk.validateString)(properties.alarmMetricName));\n    return errors.wrap('supplied properties not correct for \"AlarmMetricProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.AlarmMetric` resource\n *\n * @param properties - the TypeScript properties of a `AlarmMetricProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.AlarmMetric` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationAlarmMetricPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_AlarmMetricPropertyValidator(properties).assertSuccess();\n    return {\n        AlarmMetricName: cdk.stringToCloudFormation(properties.alarmMetricName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationAlarmMetricPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.AlarmMetricProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.AlarmMetricProperty>();\n    ret.addPropertyResult('alarmMetricName', 'AlarmMetricName', cfn_parse.FromCloudFormation.getString(properties.AlarmMetricName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                                          \n    export interface ComponentConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly configurationDetails?: CfnApplication.ConfigurationDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly subComponentTypeConfigurations?: Array<CfnApplication.SubComponentTypeConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_ComponentConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configurationDetails', CfnApplication_ConfigurationDetailsPropertyValidator)(properties.configurationDetails));\n    errors.collect(cdk.propertyValidator('subComponentTypeConfigurations', cdk.listValidator(CfnApplication_SubComponentTypeConfigurationPropertyValidator))(properties.subComponentTypeConfigurations));\n    return errors.wrap('supplied properties not correct for \"ComponentConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.ComponentConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ComponentConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.ComponentConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationComponentConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_ComponentConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ConfigurationDetails: cfnApplicationConfigurationDetailsPropertyToCloudFormation(properties.configurationDetails),\n        SubComponentTypeConfigurations: cdk.listMapper(cfnApplicationSubComponentTypeConfigurationPropertyToCloudFormation)(properties.subComponentTypeConfigurations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationComponentConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.ComponentConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.ComponentConfigurationProperty>();\n    ret.addPropertyResult('configurationDetails', 'ConfigurationDetails', properties.ConfigurationDetails != null ? CfnApplicationConfigurationDetailsPropertyFromCloudFormation(properties.ConfigurationDetails) : undefined);\n    ret.addPropertyResult('subComponentTypeConfigurations', 'SubComponentTypeConfigurations', properties.SubComponentTypeConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationSubComponentTypeConfigurationPropertyFromCloudFormation)(properties.SubComponentTypeConfigurations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                                              \n    export interface ComponentMonitoringSettingProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly componentArn?: string;\nn        readonly componentConfigurationMode: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly componentName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly customComponentConfiguration?: CfnApplication.ComponentConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly defaultOverwriteComponentConfiguration?: CfnApplication.ComponentConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly tier: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentMonitoringSettingProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentMonitoringSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_ComponentMonitoringSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('componentArn', cdk.validateString)(properties.componentArn));\n    errors.collect(cdk.propertyValidator('componentConfigurationMode', cdk.requiredValidator)(properties.componentConfigurationMode));\n    errors.collect(cdk.propertyValidator('componentConfigurationMode', cdk.validateString)(properties.componentConfigurationMode));\n    errors.collect(cdk.propertyValidator('componentName', cdk.validateString)(properties.componentName));\n    errors.collect(cdk.propertyValidator('customComponentConfiguration', CfnApplication_ComponentConfigurationPropertyValidator)(properties.customComponentConfiguration));\n    errors.collect(cdk.propertyValidator('defaultOverwriteComponentConfiguration', CfnApplication_ComponentConfigurationPropertyValidator)(properties.defaultOverwriteComponentConfiguration));\n    errors.collect(cdk.propertyValidator('tier', cdk.requiredValidator)(properties.tier));\n    errors.collect(cdk.propertyValidator('tier', cdk.validateString)(properties.tier));\n    return errors.wrap('supplied properties not correct for \"ComponentMonitoringSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.ComponentMonitoringSetting` resource\n *\n * @param properties - the TypeScript properties of a `ComponentMonitoringSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.ComponentMonitoringSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationComponentMonitoringSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_ComponentMonitoringSettingPropertyValidator(properties).assertSuccess();\n    return {\n        ComponentARN: cdk.stringToCloudFormation(properties.componentArn),\n        ComponentConfigurationMode: cdk.stringToCloudFormation(properties.componentConfigurationMode),\n        ComponentName: cdk.stringToCloudFormation(properties.componentName),\n        CustomComponentConfiguration: cfnApplicationComponentConfigurationPropertyToCloudFormation(properties.customComponentConfiguration),\n        DefaultOverwriteComponentConfiguration: cfnApplicationComponentConfigurationPropertyToCloudFormation(properties.defaultOverwriteComponentConfiguration),\n        Tier: cdk.stringToCloudFormation(properties.tier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationComponentMonitoringSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.ComponentMonitoringSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.ComponentMonitoringSettingProperty>();\n    ret.addPropertyResult('componentArn', 'ComponentARN', properties.ComponentARN != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentARN) : undefined);\n    ret.addPropertyResult('componentConfigurationMode', 'ComponentConfigurationMode', cfn_parse.FromCloudFormation.getString(properties.ComponentConfigurationMode));\n    ret.addPropertyResult('componentName', 'ComponentName', properties.ComponentName != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentName) : undefined);\n    ret.addPropertyResult('customComponentConfiguration', 'CustomComponentConfiguration', properties.CustomComponentConfiguration != null ? CfnApplicationComponentConfigurationPropertyFromCloudFormation(properties.CustomComponentConfiguration) : undefined);\n    ret.addPropertyResult('defaultOverwriteComponentConfiguration', 'DefaultOverwriteComponentConfiguration', properties.DefaultOverwriteComponentConfiguration != null ? CfnApplicationComponentConfigurationPropertyFromCloudFormation(properties.DefaultOverwriteComponentConfiguration) : undefined);\n    ret.addPropertyResult('tier', 'Tier', cfn_parse.FromCloudFormation.getString(properties.Tier));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                       \n    export interface ConfigurationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly alarmMetrics?: Array<CfnApplication.AlarmMetricProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly alarms?: Array<CfnApplication.AlarmProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly haClusterPrometheusExporter?: CfnApplication.HAClusterPrometheusExporterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly hanaPrometheusExporter?: CfnApplication.HANAPrometheusExporterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly jmxPrometheusExporter?: CfnApplication.JMXPrometheusExporterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly logs?: Array<CfnApplication.LogProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly windowsEvents?: Array<CfnApplication.WindowsEventProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConfigurationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `ConfigurationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_ConfigurationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmMetrics', cdk.listValidator(CfnApplication_AlarmMetricPropertyValidator))(properties.alarmMetrics));\n    errors.collect(cdk.propertyValidator('alarms', cdk.listValidator(CfnApplication_AlarmPropertyValidator))(properties.alarms));\n    errors.collect(cdk.propertyValidator('haClusterPrometheusExporter', CfnApplication_HAClusterPrometheusExporterPropertyValidator)(properties.haClusterPrometheusExporter));\n    errors.collect(cdk.propertyValidator('hanaPrometheusExporter', CfnApplication_HANAPrometheusExporterPropertyValidator)(properties.hanaPrometheusExporter));\n    errors.collect(cdk.propertyValidator('jmxPrometheusExporter', CfnApplication_JMXPrometheusExporterPropertyValidator)(properties.jmxPrometheusExporter));\n    errors.collect(cdk.propertyValidator('logs', cdk.listValidator(CfnApplication_LogPropertyValidator))(properties.logs));\n    errors.collect(cdk.propertyValidator('windowsEvents', cdk.listValidator(CfnApplication_WindowsEventPropertyValidator))(properties.windowsEvents));\n    return errors.wrap('supplied properties not correct for \"ConfigurationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.ConfigurationDetails` resource\n *\n * @param properties - the TypeScript properties of a `ConfigurationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.ConfigurationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationConfigurationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_ConfigurationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        AlarmMetrics: cdk.listMapper(cfnApplicationAlarmMetricPropertyToCloudFormation)(properties.alarmMetrics),\n        Alarms: cdk.listMapper(cfnApplicationAlarmPropertyToCloudFormation)(properties.alarms),\n        HAClusterPrometheusExporter: cfnApplicationHAClusterPrometheusExporterPropertyToCloudFormation(properties.haClusterPrometheusExporter),\n        HANAPrometheusExporter: cfnApplicationHANAPrometheusExporterPropertyToCloudFormation(properties.hanaPrometheusExporter),\n        JMXPrometheusExporter: cfnApplicationJMXPrometheusExporterPropertyToCloudFormation(properties.jmxPrometheusExporter),\n        Logs: cdk.listMapper(cfnApplicationLogPropertyToCloudFormation)(properties.logs),\n        WindowsEvents: cdk.listMapper(cfnApplicationWindowsEventPropertyToCloudFormation)(properties.windowsEvents),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationConfigurationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.ConfigurationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.ConfigurationDetailsProperty>();\n    ret.addPropertyResult('alarmMetrics', 'AlarmMetrics', properties.AlarmMetrics != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationAlarmMetricPropertyFromCloudFormation)(properties.AlarmMetrics) : undefined);\n    ret.addPropertyResult('alarms', 'Alarms', properties.Alarms != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationAlarmPropertyFromCloudFormation)(properties.Alarms) : undefined);\n    ret.addPropertyResult('haClusterPrometheusExporter', 'HAClusterPrometheusExporter', properties.HAClusterPrometheusExporter != null ? CfnApplicationHAClusterPrometheusExporterPropertyFromCloudFormation(properties.HAClusterPrometheusExporter) : undefined);\n    ret.addPropertyResult('hanaPrometheusExporter', 'HANAPrometheusExporter', properties.HANAPrometheusExporter != null ? CfnApplicationHANAPrometheusExporterPropertyFromCloudFormation(properties.HANAPrometheusExporter) : undefined);\n    ret.addPropertyResult('jmxPrometheusExporter', 'JMXPrometheusExporter', properties.JMXPrometheusExporter != null ? CfnApplicationJMXPrometheusExporterPropertyFromCloudFormation(properties.JMXPrometheusExporter) : undefined);\n    ret.addPropertyResult('logs', 'Logs', properties.Logs != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationLogPropertyFromCloudFormation)(properties.Logs) : undefined);\n    ret.addPropertyResult('windowsEvents', 'WindowsEvents', properties.WindowsEvents != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationWindowsEventPropertyFromCloudFormation)(properties.WindowsEvents) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface CustomComponentProperty {\n                                                                                                                                                                                                                                                                                             \n        readonly componentName: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly resourceList: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomComponentProperty`\n *\n * @param properties - the TypeScript properties of a `CustomComponentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_CustomComponentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('componentName', cdk.requiredValidator)(properties.componentName));\n    errors.collect(cdk.propertyValidator('componentName', cdk.validateString)(properties.componentName));\n    errors.collect(cdk.propertyValidator('resourceList', cdk.requiredValidator)(properties.resourceList));\n    errors.collect(cdk.propertyValidator('resourceList', cdk.listValidator(cdk.validateString))(properties.resourceList));\n    return errors.wrap('supplied properties not correct for \"CustomComponentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.CustomComponent` resource\n *\n * @param properties - the TypeScript properties of a `CustomComponentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.CustomComponent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationCustomComponentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_CustomComponentPropertyValidator(properties).assertSuccess();\n    return {\n        ComponentName: cdk.stringToCloudFormation(properties.componentName),\n        ResourceList: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationCustomComponentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.CustomComponentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.CustomComponentProperty>();\n    ret.addPropertyResult('componentName', 'ComponentName', cfn_parse.FromCloudFormation.getString(properties.ComponentName));\n    ret.addPropertyResult('resourceList', 'ResourceList', cfn_parse.FromCloudFormation.getStringArray(properties.ResourceList));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                         \n    export interface HAClusterPrometheusExporterProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly prometheusPort?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HAClusterPrometheusExporterProperty`\n *\n * @param properties - the TypeScript properties of a `HAClusterPrometheusExporterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_HAClusterPrometheusExporterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('prometheusPort', cdk.validateString)(properties.prometheusPort));\n    return errors.wrap('supplied properties not correct for \"HAClusterPrometheusExporterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.HAClusterPrometheusExporter` resource\n *\n * @param properties - the TypeScript properties of a `HAClusterPrometheusExporterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.HAClusterPrometheusExporter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationHAClusterPrometheusExporterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_HAClusterPrometheusExporterPropertyValidator(properties).assertSuccess();\n    return {\n        PrometheusPort: cdk.stringToCloudFormation(properties.prometheusPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationHAClusterPrometheusExporterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.HAClusterPrometheusExporterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.HAClusterPrometheusExporterProperty>();\n    ret.addPropertyResult('prometheusPort', 'PrometheusPort', properties.PrometheusPort != null ? cfn_parse.FromCloudFormation.getString(properties.PrometheusPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                    \n    export interface HANAPrometheusExporterProperty {\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly agreeToInstallHanadbClient?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly hanaPort?: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly hanasid?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly hanaSecretName?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly prometheusPort?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HANAPrometheusExporterProperty`\n *\n * @param properties - the TypeScript properties of a `HANAPrometheusExporterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_HANAPrometheusExporterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('agreeToInstallHanadbClient', cdk.validateBoolean)(properties.agreeToInstallHanadbClient));\n    errors.collect(cdk.propertyValidator('hanaPort', cdk.validateString)(properties.hanaPort));\n    errors.collect(cdk.propertyValidator('hanasid', cdk.validateString)(properties.hanasid));\n    errors.collect(cdk.propertyValidator('hanaSecretName', cdk.validateString)(properties.hanaSecretName));\n    errors.collect(cdk.propertyValidator('prometheusPort', cdk.validateString)(properties.prometheusPort));\n    return errors.wrap('supplied properties not correct for \"HANAPrometheusExporterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.HANAPrometheusExporter` resource\n *\n * @param properties - the TypeScript properties of a `HANAPrometheusExporterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.HANAPrometheusExporter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationHANAPrometheusExporterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_HANAPrometheusExporterPropertyValidator(properties).assertSuccess();\n    return {\n        AgreeToInstallHANADBClient: cdk.booleanToCloudFormation(properties.agreeToInstallHanadbClient),\n        HANAPort: cdk.stringToCloudFormation(properties.hanaPort),\n        HANASID: cdk.stringToCloudFormation(properties.hanasid),\n        HANASecretName: cdk.stringToCloudFormation(properties.hanaSecretName),\n        PrometheusPort: cdk.stringToCloudFormation(properties.prometheusPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationHANAPrometheusExporterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.HANAPrometheusExporterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.HANAPrometheusExporterProperty>();\n    ret.addPropertyResult('agreeToInstallHanadbClient', 'AgreeToInstallHANADBClient', properties.AgreeToInstallHANADBClient != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AgreeToInstallHANADBClient) : undefined);\n    ret.addPropertyResult('hanaPort', 'HANAPort', properties.HANAPort != null ? cfn_parse.FromCloudFormation.getString(properties.HANAPort) : undefined);\n    ret.addPropertyResult('hanasid', 'HANASID', properties.HANASID != null ? cfn_parse.FromCloudFormation.getString(properties.HANASID) : undefined);\n    ret.addPropertyResult('hanaSecretName', 'HANASecretName', properties.HANASecretName != null ? cfn_parse.FromCloudFormation.getString(properties.HANASecretName) : undefined);\n    ret.addPropertyResult('prometheusPort', 'PrometheusPort', properties.PrometheusPort != null ? cfn_parse.FromCloudFormation.getString(properties.PrometheusPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\nn    export interface JMXPrometheusExporterProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly hostPort?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly jmxurl?: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly prometheusPort?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JMXPrometheusExporterProperty`\n *\n * @param properties - the TypeScript properties of a `JMXPrometheusExporterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_JMXPrometheusExporterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hostPort', cdk.validateString)(properties.hostPort));\n    errors.collect(cdk.propertyValidator('jmxurl', cdk.validateString)(properties.jmxurl));\n    errors.collect(cdk.propertyValidator('prometheusPort', cdk.validateString)(properties.prometheusPort));\n    return errors.wrap('supplied properties not correct for \"JMXPrometheusExporterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.JMXPrometheusExporter` resource\n *\n * @param properties - the TypeScript properties of a `JMXPrometheusExporterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.JMXPrometheusExporter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationJMXPrometheusExporterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_JMXPrometheusExporterPropertyValidator(properties).assertSuccess();\n    return {\n        HostPort: cdk.stringToCloudFormation(properties.hostPort),\n        JMXURL: cdk.stringToCloudFormation(properties.jmxurl),\n        PrometheusPort: cdk.stringToCloudFormation(properties.prometheusPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationJMXPrometheusExporterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.JMXPrometheusExporterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.JMXPrometheusExporterProperty>();\n    ret.addPropertyResult('hostPort', 'HostPort', properties.HostPort != null ? cfn_parse.FromCloudFormation.getString(properties.HostPort) : undefined);\n    ret.addPropertyResult('jmxurl', 'JMXURL', properties.JMXURL != null ? cfn_parse.FromCloudFormation.getString(properties.JMXURL) : undefined);\n    ret.addPropertyResult('prometheusPort', 'PrometheusPort', properties.PrometheusPort != null ? cfn_parse.FromCloudFormation.getString(properties.PrometheusPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                             \n    export interface LogProperty {\nn        readonly encoding?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly logGroupName?: string;\nn        readonly logPath?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly logType: string;\n                                                                                                                                                                                                                                                            \n        readonly patternSet?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogProperty`\n *\n * @param properties - the TypeScript properties of a `LogProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_LogPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encoding', cdk.validateString)(properties.encoding));\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('logPath', cdk.validateString)(properties.logPath));\n    errors.collect(cdk.propertyValidator('logType', cdk.requiredValidator)(properties.logType));\n    errors.collect(cdk.propertyValidator('logType', cdk.validateString)(properties.logType));\n    errors.collect(cdk.propertyValidator('patternSet', cdk.validateString)(properties.patternSet));\n    return errors.wrap('supplied properties not correct for \"LogProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.Log` resource\n *\n * @param properties - the TypeScript properties of a `LogProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.Log` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationLogPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_LogPropertyValidator(properties).assertSuccess();\n    return {\n        Encoding: cdk.stringToCloudFormation(properties.encoding),\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n        LogPath: cdk.stringToCloudFormation(properties.logPath),\n        LogType: cdk.stringToCloudFormation(properties.logType),\n        PatternSet: cdk.stringToCloudFormation(properties.patternSet),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationLogPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.LogProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.LogProperty>();\n    ret.addPropertyResult('encoding', 'Encoding', properties.Encoding != null ? cfn_parse.FromCloudFormation.getString(properties.Encoding) : undefined);\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addPropertyResult('logPath', 'LogPath', properties.LogPath != null ? cfn_parse.FromCloudFormation.getString(properties.LogPath) : undefined);\n    ret.addPropertyResult('logType', 'LogType', cfn_parse.FromCloudFormation.getString(properties.LogType));\n    ret.addPropertyResult('patternSet', 'PatternSet', properties.PatternSet != null ? cfn_parse.FromCloudFormation.getString(properties.PatternSet) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface LogPatternProperty {\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly pattern: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly patternName: string;\n                                                                                                                                                                                                                                                                            \n        readonly rank: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogPatternProperty`\n *\n * @param properties - the TypeScript properties of a `LogPatternProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_LogPatternPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('pattern', cdk.requiredValidator)(properties.pattern));\n    errors.collect(cdk.propertyValidator('pattern', cdk.validateString)(properties.pattern));\n    errors.collect(cdk.propertyValidator('patternName', cdk.requiredValidator)(properties.patternName));\n    errors.collect(cdk.propertyValidator('patternName', cdk.validateString)(properties.patternName));\n    errors.collect(cdk.propertyValidator('rank', cdk.requiredValidator)(properties.rank));\n    errors.collect(cdk.propertyValidator('rank', cdk.validateNumber)(properties.rank));\n    return errors.wrap('supplied properties not correct for \"LogPatternProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.LogPattern` resource\n *\n * @param properties - the TypeScript properties of a `LogPatternProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.LogPattern` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationLogPatternPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_LogPatternPropertyValidator(properties).assertSuccess();\n    return {\n        Pattern: cdk.stringToCloudFormation(properties.pattern),\n        PatternName: cdk.stringToCloudFormation(properties.patternName),\n        Rank: cdk.numberToCloudFormation(properties.rank),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationLogPatternPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.LogPatternProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.LogPatternProperty>();\n    ret.addPropertyResult('pattern', 'Pattern', cfn_parse.FromCloudFormation.getString(properties.Pattern));\n    ret.addPropertyResult('patternName', 'PatternName', cfn_parse.FromCloudFormation.getString(properties.PatternName));\n    ret.addPropertyResult('rank', 'Rank', cfn_parse.FromCloudFormation.getNumber(properties.Rank));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface LogPatternSetProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly logPatterns: Array<CfnApplication.LogPatternProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly patternSetName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogPatternSetProperty`\n *\n * @param properties - the TypeScript properties of a `LogPatternSetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_LogPatternSetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logPatterns', cdk.requiredValidator)(properties.logPatterns));\n    errors.collect(cdk.propertyValidator('logPatterns', cdk.listValidator(CfnApplication_LogPatternPropertyValidator))(properties.logPatterns));\n    errors.collect(cdk.propertyValidator('patternSetName', cdk.requiredValidator)(properties.patternSetName));\n    errors.collect(cdk.propertyValidator('patternSetName', cdk.validateString)(properties.patternSetName));\n    return errors.wrap('supplied properties not correct for \"LogPatternSetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.LogPatternSet` resource\n *\n * @param properties - the TypeScript properties of a `LogPatternSetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.LogPatternSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationLogPatternSetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_LogPatternSetPropertyValidator(properties).assertSuccess();\n    return {\n        LogPatterns: cdk.listMapper(cfnApplicationLogPatternPropertyToCloudFormation)(properties.logPatterns),\n        PatternSetName: cdk.stringToCloudFormation(properties.patternSetName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationLogPatternSetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.LogPatternSetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.LogPatternSetProperty>();\n    ret.addPropertyResult('logPatterns', 'LogPatterns', cfn_parse.FromCloudFormation.getArray(CfnApplicationLogPatternPropertyFromCloudFormation)(properties.LogPatterns));\n    ret.addPropertyResult('patternSetName', 'PatternSetName', cfn_parse.FromCloudFormation.getString(properties.PatternSetName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface SubComponentConfigurationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly alarmMetrics?: Array<CfnApplication.AlarmMetricProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly logs?: Array<CfnApplication.LogProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly windowsEvents?: Array<CfnApplication.WindowsEventProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SubComponentConfigurationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `SubComponentConfigurationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_SubComponentConfigurationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmMetrics', cdk.listValidator(CfnApplication_AlarmMetricPropertyValidator))(properties.alarmMetrics));\n    errors.collect(cdk.propertyValidator('logs', cdk.listValidator(CfnApplication_LogPropertyValidator))(properties.logs));\n    errors.collect(cdk.propertyValidator('windowsEvents', cdk.listValidator(CfnApplication_WindowsEventPropertyValidator))(properties.windowsEvents));\n    return errors.wrap('supplied properties not correct for \"SubComponentConfigurationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.SubComponentConfigurationDetails` resource\n *\n * @param properties - the TypeScript properties of a `SubComponentConfigurationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.SubComponentConfigurationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationSubComponentConfigurationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_SubComponentConfigurationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        AlarmMetrics: cdk.listMapper(cfnApplicationAlarmMetricPropertyToCloudFormation)(properties.alarmMetrics),\n        Logs: cdk.listMapper(cfnApplicationLogPropertyToCloudFormation)(properties.logs),\n        WindowsEvents: cdk.listMapper(cfnApplicationWindowsEventPropertyToCloudFormation)(properties.windowsEvents),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationSubComponentConfigurationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.SubComponentConfigurationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.SubComponentConfigurationDetailsProperty>();\n    ret.addPropertyResult('alarmMetrics', 'AlarmMetrics', properties.AlarmMetrics != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationAlarmMetricPropertyFromCloudFormation)(properties.AlarmMetrics) : undefined);\n    ret.addPropertyResult('logs', 'Logs', properties.Logs != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationLogPropertyFromCloudFormation)(properties.Logs) : undefined);\n    ret.addPropertyResult('windowsEvents', 'WindowsEvents', properties.WindowsEvents != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationWindowsEventPropertyFromCloudFormation)(properties.WindowsEvents) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface SubComponentTypeConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly subComponentConfigurationDetails: CfnApplication.SubComponentConfigurationDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                         \n        readonly subComponentType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SubComponentTypeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SubComponentTypeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_SubComponentTypeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('subComponentConfigurationDetails', cdk.requiredValidator)(properties.subComponentConfigurationDetails));\n    errors.collect(cdk.propertyValidator('subComponentConfigurationDetails', CfnApplication_SubComponentConfigurationDetailsPropertyValidator)(properties.subComponentConfigurationDetails));\n    errors.collect(cdk.propertyValidator('subComponentType', cdk.requiredValidator)(properties.subComponentType));\n    errors.collect(cdk.propertyValidator('subComponentType', cdk.validateString)(properties.subComponentType));\n    return errors.wrap('supplied properties not correct for \"SubComponentTypeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.SubComponentTypeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SubComponentTypeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.SubComponentTypeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationSubComponentTypeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_SubComponentTypeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        SubComponentConfigurationDetails: cfnApplicationSubComponentConfigurationDetailsPropertyToCloudFormation(properties.subComponentConfigurationDetails),\n        SubComponentType: cdk.stringToCloudFormation(properties.subComponentType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationSubComponentTypeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.SubComponentTypeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.SubComponentTypeConfigurationProperty>();\n    ret.addPropertyResult('subComponentConfigurationDetails', 'SubComponentConfigurationDetails', CfnApplicationSubComponentConfigurationDetailsPropertyFromCloudFormation(properties.SubComponentConfigurationDetails));\n    ret.addPropertyResult('subComponentType', 'SubComponentType', cfn_parse.FromCloudFormation.getString(properties.SubComponentType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                                                                                         \n    export interface WindowsEventProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly eventLevels: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly eventName: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly logGroupName: string;\n                                                                                                                                                                                                                                                                              \n        readonly patternSet?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WindowsEventProperty`\n *\n * @param properties - the TypeScript properties of a `WindowsEventProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_WindowsEventPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventLevels', cdk.requiredValidator)(properties.eventLevels));\n    errors.collect(cdk.propertyValidator('eventLevels', cdk.listValidator(cdk.validateString))(properties.eventLevels));\n    errors.collect(cdk.propertyValidator('eventName', cdk.requiredValidator)(properties.eventName));\n    errors.collect(cdk.propertyValidator('eventName', cdk.validateString)(properties.eventName));\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.requiredValidator)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('patternSet', cdk.validateString)(properties.patternSet));\n    return errors.wrap('supplied properties not correct for \"WindowsEventProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.WindowsEvent` resource\n *\n * @param properties - the TypeScript properties of a `WindowsEventProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ApplicationInsights::Application.WindowsEvent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationWindowsEventPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_WindowsEventPropertyValidator(properties).assertSuccess();\n    return {\n        EventLevels: cdk.listMapper(cdk.stringToCloudFormation)(properties.eventLevels),\n        EventName: cdk.stringToCloudFormation(properties.eventName),\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n        PatternSet: cdk.stringToCloudFormation(properties.patternSet),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationWindowsEventPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.WindowsEventProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.WindowsEventProperty>();\n    ret.addPropertyResult('eventLevels', 'EventLevels', cfn_parse.FromCloudFormation.getStringArray(properties.EventLevels));\n    ret.addPropertyResult('eventName', 'EventName', cfn_parse.FromCloudFormation.getString(properties.EventName));\n    ret.addPropertyResult('logGroupName', 'LogGroupName', cfn_parse.FromCloudFormation.getString(properties.LogGroupName));\n    ret.addPropertyResult('patternSet', 'PatternSet', properties.PatternSet != null ? cfn_parse.FromCloudFormation.getString(properties.PatternSet) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
