{
  "version": 3,
  "sources": ["gateway-route-spec.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnGatewayRoute } from './appmesh.generated';\nimport { HeaderMatch } from './header-match';\nimport { HttpRouteMethod } from './http-route-method';\nimport { HttpGatewayRoutePathMatch } from './http-route-path-match';\nimport { validateGrpcMatchArrayLength, validateGrpcGatewayRouteMatch } from './private/utils';\nimport { QueryParameterMatch } from './query-parameter-match';\nimport { Protocol } from './shared-interfaces';\nimport { IVirtualService } from './virtual-service';\n\n                                                           \nexport interface GatewayRouteHostnameMatchConfig {\n                                                                    \n  readonly hostnameMatch: CfnGatewayRoute.GatewayRouteHostnameMatchProperty;\n}\n\n                                                       \nexport abstract class GatewayRouteHostnameMatch {\n                                                                                                                                         \n  public static exactly(name: string): GatewayRouteHostnameMatch {\n    return new GatewayRouteHostnameMatchImpl({ exact: name });\n  }\n\n                                                                                                                                                                                            \n  public static endsWith(suffix: string): GatewayRouteHostnameMatch {\n    return new GatewayRouteHostnameMatchImpl({ suffix });\n  }\n\n                                                                         \n  public abstract bind(scope: Construct): GatewayRouteHostnameMatchConfig;\n}\n\nclass GatewayRouteHostnameMatchImpl extends GatewayRouteHostnameMatch {\n  constructor(\n    private readonly matchProperty: CfnGatewayRoute.GatewayRouteHostnameMatchProperty,\n  ) {\n    super();\n  }\n\n  bind(_scope: Construct): GatewayRouteHostnameMatchConfig {\n    return {\n      hostnameMatch: this.matchProperty,\n    };\n  }\n}\n\n                                                                               \nexport interface HttpGatewayRouteMatch {\n                                                                                                                                         \n  readonly path?: HttpGatewayRoutePathMatch;\n\n                                                                                                                                                                                     \n  readonly headers?: HeaderMatch[];\n\n                                                                                                             \n  readonly hostname?: GatewayRouteHostnameMatch;\n\n                                                                                    \n  readonly method?: HttpRouteMethod;\n\n                                                                                                                                                                               \n  readonly queryParameters?: QueryParameterMatch[];\n\n                                                                                                                                                                                                                               \n  readonly rewriteRequestHostname?: boolean;\n}\n\n                                                                              \nexport interface GrpcGatewayRouteMatch {\n                                                                                                                     \n  readonly serviceName?: string;\n\n                                                                                                               \n  readonly hostname?: GatewayRouteHostnameMatch;\n\n                                                                                                                                                                            \n  readonly metadata?: HeaderMatch[];\n\n                                                                                                                                                                                                                               \n  readonly rewriteRequestHostname?: boolean;\n}\n\n                                                    \nexport interface CommonGatewayRouteSpecOptions {\n                                                                                                                                                                                                                                                                                                              \n  readonly priority?: number;\n}\n\n                                                           \nexport interface HttpGatewayRouteSpecOptions extends CommonGatewayRouteSpecOptions {\n                                                                                                                                                                                                                                                                     \n  readonly match?: HttpGatewayRouteMatch;\n\n                                                                        \n  readonly routeTarget: IVirtualService;\n}\n\n                                                      \nexport interface GrpcGatewayRouteSpecOptions extends CommonGatewayRouteSpecOptions {\n                                                                                    \n  readonly match: GrpcGatewayRouteMatch;\n\n                                                                        \n  readonly routeTarget: IVirtualService;\n}\n\n                                                \nexport interface GatewayRouteSpecConfig {\n                                                                                     \n  readonly httpSpecConfig?: CfnGatewayRoute.HttpGatewayRouteProperty;\n\n                                                                                       \n  readonly http2SpecConfig?: CfnGatewayRoute.HttpGatewayRouteProperty;\n\n                                                                                    \n  readonly grpcSpecConfig?: CfnGatewayRoute.GrpcGatewayRouteProperty;\n\n                                                                                                                                                                                                                                                                                                              \n  readonly priority?: number;\n}\n\n                                                                             \nexport abstract class GatewayRouteSpec {\n                                                                                                    \n  public static http(options: HttpGatewayRouteSpecOptions): GatewayRouteSpec {\n    return new HttpGatewayRouteSpec(options, Protocol.HTTP);\n  }\n\n                                                                                                      \n  public static http2(options: HttpGatewayRouteSpecOptions): GatewayRouteSpec {\n    return new HttpGatewayRouteSpec(options, Protocol.HTTP2);\n  }\n\n                                                                                                    \n  public static grpc(options: GrpcGatewayRouteSpecOptions): GatewayRouteSpec {\n    return new GrpcGatewayRouteSpec(options);\n  }\n\n                                                                                                                                            \n  public abstract bind(scope: Construct): GatewayRouteSpecConfig;\n}\n\nclass HttpGatewayRouteSpec extends GatewayRouteSpec {\n  readonly match?: HttpGatewayRouteMatch;\n\n  /**\n   * The VirtualService this GatewayRoute directs traffic to\n   */\n  readonly routeTarget: IVirtualService;\n\n  /**\n   * Type of route you are creating\n   */\n  readonly routeType: Protocol;\n  readonly priority?: number;\n\n  constructor(options: HttpGatewayRouteSpecOptions, protocol: Protocol.HTTP | Protocol.HTTP2) {\n    super();\n    this.routeTarget = options.routeTarget;\n    this.routeType = protocol;\n    this.match = options.match;\n    this.priority = options.priority;\n  }\n\n  public bind(scope: Construct): GatewayRouteSpecConfig {\n    const pathMatchConfig = (this.match?.path ?? HttpGatewayRoutePathMatch.startsWith('/')).bind(scope);\n    const rewriteRequestHostname = this.match?.rewriteRequestHostname;\n\n    const prefixPathRewrite = pathMatchConfig.prefixPathRewrite;\n    const wholePathRewrite = pathMatchConfig.wholePathRewrite;\n\n    const httpConfig: CfnGatewayRoute.HttpGatewayRouteProperty = {\n      match: {\n        prefix: pathMatchConfig.prefixPathMatch,\n        path: pathMatchConfig.wholePathMatch,\n        hostname: this.match?.hostname?.bind(scope).hostnameMatch,\n        method: this.match?.method,\n        headers: this.match?.headers?.map(header => header.bind(scope).headerMatch),\n        queryParameters: this.match?.queryParameters?.map(queryParameter => queryParameter.bind(scope).queryParameterMatch),\n      },\n      action: {\n        target: {\n          virtualService: {\n            virtualServiceName: this.routeTarget.virtualServiceName,\n          },\n        },\n        rewrite: rewriteRequestHostname !== undefined || prefixPathRewrite || wholePathRewrite\n          ? {\n            hostname: rewriteRequestHostname === undefined\n              ? undefined\n              : {\n                defaultTargetHostname: rewriteRequestHostname? 'ENABLED' : 'DISABLED',\n              },\n            prefix: prefixPathRewrite,\n            path: wholePathRewrite,\n          }\n          : undefined,\n      },\n    };\n    return {\n      priority: this.priority,\n      httpSpecConfig: this.routeType === Protocol.HTTP ? httpConfig : undefined,\n      http2SpecConfig: this.routeType === Protocol.HTTP2 ? httpConfig : undefined,\n    };\n  }\n}\n\nclass GrpcGatewayRouteSpec extends GatewayRouteSpec {\n  readonly match: GrpcGatewayRouteMatch;\n\n  /**\n   * The VirtualService this GatewayRoute directs traffic to\n   */\n  readonly routeTarget: IVirtualService;\n  readonly priority?: number;\n\n  constructor(options: GrpcGatewayRouteSpecOptions) {\n    super();\n    this.match = options.match;\n    this.routeTarget = options.routeTarget;\n    this.priority = options.priority;\n  }\n\n  public bind(scope: Construct): GatewayRouteSpecConfig {\n    const metadataMatch = this.match.metadata;\n\n    validateGrpcGatewayRouteMatch(this.match);\n    validateGrpcMatchArrayLength(metadataMatch);\n\n    return {\n      grpcSpecConfig: {\n        match: {\n          serviceName: this.match.serviceName,\n          hostname: this.match.hostname?.bind(scope).hostnameMatch,\n          metadata: metadataMatch?.map(metadata => metadata.bind(scope).headerMatch),\n        },\n        action: {\n          target: {\n            virtualService: {\n              virtualServiceName: this.routeTarget.virtualServiceName,\n            },\n          },\n          rewrite: this.match.rewriteRequestHostname === undefined\n            ? undefined\n            : {\n              hostname: {\n                defaultTargetHostname: this.match.rewriteRequestHostname ? 'ENABLED' : 'DISABLED',\n              },\n            },\n        },\n      },\n      priority: this.priority,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
