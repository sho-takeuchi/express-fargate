{
  "version": 3,
  "sources": ["health-checks.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { CfnVirtualGateway, CfnVirtualNode } from './appmesh.generated';\nimport { Protocol } from './shared-interfaces';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Properties used to define healthchecks.\n */\ninterface HealthCheckCommonOptions {\n                                                                                                                                           \n  readonly healthyThreshold?: number;\n\n                                                                                                            \n  readonly interval?: cdk.Duration;\n\n                                                                                                                                   \n  readonly timeout?: cdk.Duration;\n\n                                                                                                                                             \n  readonly unhealthyThreshold?: number;\n}\n\n                                                             \nexport interface HttpHealthCheckOptions extends HealthCheckCommonOptions {\n                                                                                        \n  readonly path?: string;\n}\n\n                                                             \nexport interface GrpcHealthCheckOptions extends HealthCheckCommonOptions { }\n\n                                                            \nexport interface TcpHealthCheckOptions extends HealthCheckCommonOptions { }\n\n                                                              \nexport interface HealthCheckConfig {\n                                                                                                      \n  readonly virtualNodeHealthCheck?: CfnVirtualNode.HealthCheckProperty;\n\n                                                                                                         \n  readonly virtualGatewayHealthCheck?: CfnVirtualGateway.VirtualGatewayHealthCheckPolicyProperty;\n}\n\n                                                            \nexport interface HealthCheckBindOptions {\n                                                                                                 \n  readonly defaultPort?: number;\n}\n\n\n                                                                                             \nexport abstract class HealthCheck {\n                                              \n  public static http(options: HttpHealthCheckOptions = {}): HealthCheck {\n    return new HealthCheckImpl(Protocol.HTTP, options.healthyThreshold, options.unhealthyThreshold, options.interval, options.timeout, options.path);\n  }\n\n                                               \n  public static http2(options: HttpHealthCheckOptions = {}): HealthCheck {\n    return new HealthCheckImpl(Protocol.HTTP2, options.healthyThreshold, options.unhealthyThreshold, options.interval, options.timeout, options.path);\n  }\n\n                                              \n  public static grpc(options: GrpcHealthCheckOptions = {}): HealthCheck {\n    return new HealthCheckImpl(Protocol.GRPC, options.healthyThreshold, options.unhealthyThreshold, options.interval, options.timeout);\n  }\n\n                                             \n  public static tcp(options: TcpHealthCheckOptions = {}): HealthCheck {\n    return new HealthCheckImpl(Protocol.TCP, options.healthyThreshold, options.unhealthyThreshold, options.interval, options.timeout);\n  }\n\n                                                                                                                                     \n  public abstract bind(scope: Construct, options: HealthCheckBindOptions): HealthCheckConfig;\n}\n\nclass HealthCheckImpl extends HealthCheck {\n  constructor(\n    private readonly protocol: Protocol,\n    private readonly healthyThreshold: number = 2,\n    private readonly unhealthyThreshold: number = 2,\n    private readonly interval: cdk.Duration = cdk.Duration.seconds(5),\n    private readonly timeout: cdk.Duration = cdk.Duration.seconds(2),\n    private readonly path?: string) {\n    super();\n    if (healthyThreshold < 2 || healthyThreshold > 10) {\n      throw new Error('healthyThreshold must be between 2 and 10');\n    }\n\n    if (unhealthyThreshold < 2 || unhealthyThreshold > 10) {\n      throw new Error('unhealthyThreshold must be between 2 and 10');\n    }\n\n    if (interval.toMilliseconds() < 5000 || interval.toMilliseconds() > 300_000) {\n      throw new Error('interval must be between 5 seconds and 300 seconds');\n    }\n\n    if (timeout.toMilliseconds() < 2000 || timeout.toMilliseconds() > 60_000) {\n      throw new Error('timeout must be between 2 seconds and 60 seconds');\n    }\n\n    // Default to / for HTTP Health Checks\n    if (path === undefined && (protocol === Protocol.HTTP || protocol === Protocol.HTTP2)) {\n      this.path = '/';\n    }\n  }\n\n  public bind(_scope: Construct, options: HealthCheckBindOptions): HealthCheckConfig {\n    return {\n      virtualNodeHealthCheck: {\n        protocol: this.protocol,\n        healthyThreshold: this.healthyThreshold,\n        unhealthyThreshold: this.unhealthyThreshold,\n        intervalMillis: this.interval.toMilliseconds(),\n        timeoutMillis: this.timeout.toMilliseconds(),\n        path: this.path,\n        port: options.defaultPort,\n      },\n      virtualGatewayHealthCheck: {\n        protocol: this.protocol,\n        healthyThreshold: this.healthyThreshold,\n        unhealthyThreshold: this.unhealthyThreshold,\n        intervalMillis: this.interval.toMilliseconds(),\n        timeoutMillis: this.timeout.toMilliseconds(),\n        path: this.path,\n        port: options.defaultPort,\n      },\n    };\n  }\n\n}\n"],
  "mappings": "kNAAA,IAAA,QAAA,cAEA,oBAAA,QAAA,uBAoDA,iBAAiC,OAEjB,MAAK,QAAkC,GAAE,wFAC9C,GAAI,iBAAgB,oBAAA,SAAS,KAAM,QAAQ,iBAAkB,QAAQ,mBAAoB,QAAQ,SAAU,QAAQ,QAAS,QAAQ,YAI/H,OAAM,QAAkC,GAAE,wFAC/C,GAAI,iBAAgB,oBAAA,SAAS,MAAO,QAAQ,iBAAkB,QAAQ,mBAAoB,QAAQ,SAAU,QAAQ,QAAS,QAAQ,YAIhI,MAAK,QAAkC,GAAE,wFAC9C,GAAI,iBAAgB,oBAAA,SAAS,KAAM,QAAQ,iBAAkB,QAAQ,mBAAoB,QAAQ,SAAU,QAAQ,eAI9G,KAAI,QAAiC,GAAE,uFAC5C,GAAI,iBAAgB,oBAAA,SAAS,IAAK,QAAQ,iBAAkB,QAAQ,mBAAoB,QAAQ,SAAU,QAAQ,UAlB7H,QAAA,YAAA,+GAyBA,6BAA8B,YAAW,CACvC,YACmB,SACA,iBAA2B,EAC3B,mBAA6B,EAC7B,SAAyB,IAAI,SAAS,QAAQ,GAC9C,QAAwB,IAAI,SAAS,QAAQ,GAC7C,KAAa,CAC9B,QACA,GAPiB,KAAA,SAAA,SACA,KAAA,iBAAA,iBACA,KAAA,mBAAA,mBACA,KAAA,SAAA,SACA,KAAA,QAAA,QACA,KAAA,KAAA,KAEb,iBAAmB,GAAK,iBAAmB,GAC7C,KAAM,IAAI,OAAM,6CAGlB,GAAI,mBAAqB,GAAK,mBAAqB,GACjD,KAAM,IAAI,OAAM,+CAGlB,GAAI,SAAS,iBAAmB,KAAQ,SAAS,iBAAmB,IAClE,KAAM,IAAI,OAAM,sDAGlB,GAAI,QAAQ,iBAAmB,KAAQ,QAAQ,iBAAmB,IAChE,KAAM,IAAI,OAAM,oDAIlB,AAAI,OAAS,QAAc,YAAa,oBAAA,SAAS,MAAQ,WAAa,oBAAA,SAAS,QAC7E,MAAK,KAAO,KAIT,KAAK,OAAmB,QAA+B,CAC5D,MAAO,CACL,uBAAwB,CACtB,SAAU,KAAK,SACf,iBAAkB,KAAK,iBACvB,mBAAoB,KAAK,mBACzB,eAAgB,KAAK,SAAS,iBAC9B,cAAe,KAAK,QAAQ,iBAC5B,KAAM,KAAK,KACX,KAAM,QAAQ,aAEhB,0BAA2B,CACzB,SAAU,KAAK,SACf,iBAAkB,KAAK,iBACvB,mBAAoB,KAAK,mBACzB,eAAgB,KAAK,SAAS,iBAC9B,cAAe,KAAK,QAAQ,iBAC5B,KAAM,KAAK,KACX,KAAM,QAAQ",
  "names": []
}
