{
  "version": 3,
  "sources": ["mesh.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnMesh } from './appmesh.generated';\nimport { VirtualGateway, VirtualGatewayBaseProps } from './virtual-gateway';\nimport { VirtualNode, VirtualNodeBaseProps } from './virtual-node';\nimport { VirtualRouter, VirtualRouterBaseProps } from './virtual-router';\n\n                                                                                                                                                                                                                   \nexport enum MeshFilterType {\n                                            \n  ALLOW_ALL = 'ALLOW_ALL',\n                                                                                                         \n  DROP_ALL = 'DROP_ALL',\n}\n\n                                                                \nexport interface IMesh extends cdk.IResource {\n                                                                  \n  readonly meshName: string;\n\n                                                                                        \n  readonly meshArn: string;\n\n                                                                                                                                                                                                  \n  addVirtualRouter(id: string, props?: VirtualRouterBaseProps): VirtualRouter;\n\n                                                                                                                                                                                              \n  addVirtualNode(id: string, props?: VirtualNodeBaseProps): VirtualNode;\n\n                                                                                                                                                                                                    \n  addVirtualGateway(id: string, props?: VirtualGatewayBaseProps): VirtualGateway;\n}\n\n/**\n * Represents a new or imported AppMesh mesh\n */\nabstract class MeshBase extends cdk.Resource implements IMesh {\n  /**\n   * The name of the AppMesh mesh\n   */\n  public abstract readonly meshName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) of the AppMesh mesh\n   */\n  public abstract readonly meshArn: string;\n\n                                                                             \n  public addVirtualRouter(id: string, props: VirtualRouterBaseProps = {}): VirtualRouter {\n    return new VirtualRouter(this, id, {\n      ...props,\n      mesh: this,\n    });\n  }\n\n                                               \n  public addVirtualNode(id: string, props: VirtualNodeBaseProps = {}): VirtualNode {\n    return new VirtualNode(this, id, {\n      ...props,\n      mesh: this,\n    });\n  }\n\n                                                  \n  addVirtualGateway(id: string, props?: VirtualGatewayBaseProps): VirtualGateway {\n    return new VirtualGateway(this, id, {\n      ...props,\n      mesh: this,\n    });\n  }\n}\n\n                                                          \nexport interface MeshProps {\n                                                                                                          \n  readonly meshName?: string;\n\n                                                                                    \n  readonly egressFilter?: MeshFilterType;\n}\n\n                                                                                                                 \nexport class Mesh extends MeshBase {\n                                               \n  public static fromMeshArn(scope: Construct, id: string, meshArn: string): IMesh {\n    const parts = cdk.Stack.of(scope).splitArn(meshArn, cdk.ArnFormat.SLASH_RESOURCE_NAME);\n\n    class Import extends MeshBase {\n      public meshName = parts.resourceName || '';\n      public meshArn = meshArn;\n    }\n\n    return new Import(scope, id, {\n      environmentFromArn: meshArn,\n    });\n  }\n\n                                                \n  public static fromMeshName(scope: Construct, id: string, meshName: string): IMesh {\n    const arn = cdk.Stack.of(scope).formatArn({\n      service: 'appmesh',\n      resource: 'mesh',\n      resourceName: meshName,\n    });\n\n    class Import extends MeshBase {\n      public meshName = meshName;\n      public meshArn = arn;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                             \n  public readonly meshName: string;\n\n                                                                   \n  public readonly meshArn: string;\n\n  constructor(scope: Construct, id: string, props: MeshProps = {}) {\n    super(scope, id, {\n      physicalName: props.meshName || cdk.Lazy.string({ produce: () => cdk.Names.uniqueId(this) }),\n    });\n\n    const mesh = new CfnMesh(this, 'Resource', {\n      meshName: this.physicalName,\n      spec: {\n        egressFilter: props.egressFilter ? {\n          type: props.egressFilter,\n        } : undefined,\n      },\n    });\n\n    this.meshName = this.getResourceNameAttribute(mesh.attrMeshName);\n    this.meshArn = this.getResourceArnAttribute(mesh.ref, {\n      service: 'appmesh',\n      resource: 'mesh',\n      resourceName: this.physicalName,\n    });\n  }\n}\n"],
  "mappings": "kOAAA,IAAA,QAAA,cAEA,oBAAA,QAAA,uBACA,kBAAA,QAAA,qBACA,eAAA,QAAA,kBACA,iBAAA,QAAA,oBAGA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,UAAA,YAEA,gBAAA,SAAA,aAJU,eAAA,QAAA,gBAAA,SAAA,eAAc,KA4B1B,sBAAgC,KAAI,QAAQ,CAYnC,iBAAiB,GAAY,MAAgC,GAAE,CACpE,MAAO,IAAI,kBAAA,cAAc,KAAM,GAAI,IAC9B,MACH,KAAM,OAKH,eAAe,GAAY,MAA8B,GAAE,CAChE,MAAO,IAAI,gBAAA,YAAY,KAAM,GAAI,IAC5B,MACH,KAAM,OAKV,kBAAkB,GAAY,MAA+B,CAC3D,MAAO,IAAI,mBAAA,eAAe,KAAM,GAAI,IAC/B,MACH,KAAM,QAeZ,kBAA0B,SAAQ,CAqChC,YAAY,MAAkB,GAAY,MAAmB,GAAE,CAC7D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,UAAY,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,IAAI,MAAM,SAAS,2EAGtF,KAAM,MAAO,GAAI,qBAAA,QAAQ,KAAM,WAAY,CACzC,SAAU,KAAK,aACf,KAAM,CACJ,aAAc,MAAM,aAAe,CACjC,KAAM,MAAM,cACV,UAIR,KAAK,SAAW,KAAK,yBAAyB,KAAK,cACnD,KAAK,QAAU,KAAK,wBAAwB,KAAK,IAAK,CACpD,QAAS,UACT,SAAU,OACV,aAAc,KAAK,qBArDT,aAAY,MAAkB,GAAY,QAAe,CACrE,KAAM,OAAQ,IAAI,MAAM,GAAG,OAAO,SAAS,QAAS,IAAI,UAAU,qBAElE,oBAAqB,SAAQ,CAA7B,aAAA,qBACS,KAAA,SAAW,MAAM,cAAgB,GACjC,KAAA,QAAU,SAGnB,MAAO,IAAI,QAAO,MAAO,GAAI,CAC3B,mBAAoB,gBAKV,cAAa,MAAkB,GAAY,SAAgB,CACvE,KAAM,KAAM,IAAI,MAAM,GAAG,OAAO,UAAU,CACxC,QAAS,UACT,SAAU,OACV,aAAc,WAGhB,oBAAqB,SAAQ,CAA7B,aAAA,qBACS,KAAA,SAAW,SACX,KAAA,QAAU,KAGnB,MAAO,IAAI,QAAO,MAAO,KA5B7B,QAAA,KAAA",
  "names": []
}
