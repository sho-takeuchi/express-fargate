{
  "version": 3,
  "sources": ["tls-validation.ts"],
  "sourcesContent": ["import * as acmpca from '../../aws-acmpca';\nimport { Construct } from 'constructs';\nimport { CfnVirtualNode } from './appmesh.generated';\n\n/**\n * Represents the properties needed to define TLS Validation context\n */\ninterface TlsValidationCommon {\nn  readonly subjectAlternativeNames?: SubjectAlternativeNames;\n}\n\n                                                                            \nexport interface TlsValidation extends TlsValidationCommon {\n                                                                \n  readonly trust: TlsValidationTrust;\n}\n\n                                                                                                                             \nexport interface MutualTlsValidation extends TlsValidationCommon {\n                                                                \n  readonly trust: MutualTlsValidationTrust;\n}\n\n                                                                                        \nexport interface TlsValidationTrustConfig {\n                                                                                       \n  readonly tlsValidationTrust: CfnVirtualNode.TlsValidationContextTrustProperty;\n}\n\n                                                    \nexport abstract class TlsValidationTrust {\n                                                                       \n  public static file(certificateChain: string): MutualTlsValidationTrust {\n    return new TlsValidationFileTrust(certificateChain);\n  }\n\n                                                                                         \n  public static acm(certificateAuthorities: acmpca.ICertificateAuthority[]): TlsValidationTrust {\n    return new TlsValidationAcmTrust(certificateAuthorities);\n  }\n\n                                                                                   \n  public static sds(secretName: string): MutualTlsValidationTrust {\n    return new TlsValidationSdsTrust(secretName);\n  }\n\n                                                           \n  public abstract bind(scope: Construct): TlsValidationTrustConfig;\n}\n\n                                                                                                     \nexport abstract class MutualTlsValidationTrust extends TlsValidationTrust {\n  // TypeScript uses structural typing, so we need a property different from TlsValidationTrust\n  protected readonly differentiator = false;\n}\n\nclass TlsValidationAcmTrust extends TlsValidationTrust {\n  /**\n   * Contains information for your private certificate authority\n   */\n  readonly certificateAuthorities: acmpca.ICertificateAuthority[];\n\n  constructor (certificateAuthorities: acmpca.ICertificateAuthority[]) {\n    super();\n    this.certificateAuthorities = certificateAuthorities;\n  }\n\n  public bind(_scope: Construct): TlsValidationTrustConfig {\n    if (this.certificateAuthorities.length === 0) {\n      throw new Error('you must provide at least one Certificate Authority when creating an ACM Trust ClientPolicy');\n    } else {\n      return {\n        tlsValidationTrust: {\n          acm: {\n            certificateAuthorityArns: this.certificateAuthorities.map(certificateArn =>\n              certificateArn.certificateAuthorityArn),\n          },\n        },\n      };\n    }\n  }\n}\n\nclass TlsValidationFileTrust extends MutualTlsValidationTrust {\n  /**\n   * Path to the Certificate Chain file on the file system where the Envoy is deployed.\n   */\n  readonly certificateChain: string;\n\n  constructor (certificateChain: string) {\n    super();\n    this.certificateChain = certificateChain;\n  }\n\n  public bind(_scope: Construct): TlsValidationTrustConfig {\n    return {\n      tlsValidationTrust: {\n        file: {\n          certificateChain: this.certificateChain,\n        },\n      },\n    };\n  }\n}\n\nclass TlsValidationSdsTrust extends MutualTlsValidationTrust {\n  /**\n   * The name of the secret for Envoy to fetch from a specific endpoint through the Secrets Discovery Protocol.\n   */\n  readonly secretName: string;\n\n  constructor (secretName: string) {\n    super();\n    this.secretName = secretName;\n  }\n\n  public bind(_scope: Construct): TlsValidationTrustConfig {\n    return {\n      tlsValidationTrust: {\n        sds: {\n          secretName: this.secretName,\n        },\n      },\n    };\n  }\n}\n\n                                                                                                    \nexport interface SubjectAlternativeNamesMatcherConfig {\n                                                                                                        \n  readonly subjectAlternativeNamesMatch: CfnVirtualNode.SubjectAlternativeNameMatchersProperty;\n}\n\n                                                              \nexport abstract class SubjectAlternativeNames {\n                                                                                                                                        \n  public static matchingExactly(...names: string[]): SubjectAlternativeNames {\n    return new SubjectAlternativeNamesImpl({ exact: names });\n  }\n\n                                                                                \n  public abstract bind(scope: Construct): SubjectAlternativeNamesMatcherConfig;\n}\n\nclass SubjectAlternativeNamesImpl extends SubjectAlternativeNames {\n  constructor(\n    private readonly matchProperty: CfnVirtualNode.SubjectAlternativeNameMatchersProperty,\n  ) { super(); }\n\n  public bind(_scope: Construct): SubjectAlternativeNamesMatcherConfig {\n    return {\n      subjectAlternativeNamesMatch: this.matchProperty,\n    };\n  }\n}\n"],
  "mappings": "qOA+BA,wBAAwC,OAExB,MAAK,iBAAwB,CACzC,MAAO,IAAI,wBAAuB,wBAItB,KAAI,uBAAsD,CACtE,MAAO,IAAI,uBAAsB,8BAIrB,KAAI,WAAkB,CAClC,MAAO,IAAI,uBAAsB,aAbrC,QAAA,mBAAA,oIAqBA,sCAAuD,mBAAkB,CAAzE,aAAA,qBAEqB,KAAA,eAAiB,IAFtC,QAAA,yBAAA,sJAKA,mCAAoC,mBAAkB,CAMpD,YAAa,uBAAsD,CACjE,QACA,KAAK,uBAAyB,uBAGzB,KAAK,OAAiB,CAC3B,GAAI,KAAK,uBAAuB,SAAW,EACzC,KAAM,IAAI,OAAM,+FAEhB,MAAO,CACL,mBAAoB,CAClB,IAAK,CACH,yBAA0B,KAAK,uBAAuB,IAAI,gBACxD,eAAe,6BAQ7B,oCAAqC,yBAAwB,CAM3D,YAAa,iBAAwB,CACnC,QACA,KAAK,iBAAmB,iBAGnB,KAAK,OAAiB,CAC3B,MAAO,CACL,mBAAoB,CAClB,KAAM,CACJ,iBAAkB,KAAK,qBAOjC,mCAAoC,yBAAwB,CAM1D,YAAa,WAAkB,CAC7B,QACA,KAAK,WAAa,WAGb,KAAK,OAAiB,CAC3B,MAAO,CACL,mBAAoB,CAClB,IAAK,CACH,WAAY,KAAK,eAc3B,6BAA6C,OAE7B,oBAAmB,MAAe,CAC9C,MAAO,IAAI,6BAA4B,CAAE,MAAO,SAHpD,QAAA,wBAAA,mJAUA,yCAA0C,wBAAuB,CAC/D,YACmB,cAAoE,CACnF,QADe,KAAA,cAAA,cAGZ,KAAK,OAAiB,CAC3B,MAAO,CACL,6BAA8B,KAAK",
  "names": []
}
