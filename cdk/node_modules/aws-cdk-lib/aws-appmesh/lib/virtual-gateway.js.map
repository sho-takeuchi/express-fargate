{
  "version": 3,
  "sources": ["virtual-gateway.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnVirtualGateway } from './appmesh.generated';\nimport { GatewayRoute, GatewayRouteBaseProps } from './gateway-route';\nimport { IMesh, Mesh } from './mesh';\nimport { renderTlsClientPolicy, renderMeshOwner } from './private/utils';\nimport { AccessLog, BackendDefaults } from './shared-interfaces';\nimport { VirtualGatewayListener, VirtualGatewayListenerConfig } from './virtual-gateway-listener';\n\n                                                                           \nexport interface IVirtualGateway extends cdk.IResource {\n                                                                \n  readonly virtualGatewayName: string;\n\n                                                                                           \n  readonly virtualGatewayArn: string;\n\n                                                             \n  readonly mesh: IMesh;\n\n                                                                               \n  addGatewayRoute(id: string, route: GatewayRouteBaseProps): GatewayRoute;\n\n                                                                             \n  grantStreamAggregatedResources(identity: iam.IGrantable): iam.Grant;\n}\n\n                                                              \nexport interface VirtualGatewayBaseProps {\n                                                                                                   \n  readonly virtualGatewayName?: string;\n\n                                                                                                                                \n  readonly listeners?: VirtualGatewayListener[];\n\n                                                                                                           \n  readonly accessLog?: AccessLog;\n\n                                                                                                                           \n  readonly backendDefaults?: BackendDefaults;\n}\n\n                                                             \nexport interface VirtualGatewayProps extends VirtualGatewayBaseProps {\n                                                             \n  readonly mesh: IMesh;\n}\n\nabstract class VirtualGatewayBase extends cdk.Resource implements IVirtualGateway {\n  /**\n   * Name of the VirtualGateway\n   */\n  public abstract readonly virtualGatewayName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) for the VirtualGateway\n   */\n  public abstract readonly virtualGatewayArn: string;\n\n  /**\n   * The Mesh which the VirtualGateway belongs to\n   */\n  public abstract readonly mesh: IMesh;\n\n                                                                               \n  public addGatewayRoute(id: string, props: GatewayRouteBaseProps): GatewayRoute {\n    return new GatewayRoute(this, id, {\n      ...props,\n      virtualGateway: this,\n    });\n  }\n\n  public grantStreamAggregatedResources(identity: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: ['appmesh:StreamAggregatedResources'],\n      resourceArns: [this.virtualGatewayArn],\n    });\n  }\n}\n\n                                                                                                                                                                                                                                                                                                        \nexport class VirtualGateway extends VirtualGatewayBase {\n                                                               \n  public static fromVirtualGatewayArn(scope: Construct, id: string, virtualGatewayArn: string): IVirtualGateway {\n    return new class extends VirtualGatewayBase {\n      private readonly parsedArn = cdk.Fn.split('/', cdk.Stack.of(scope).splitArn(virtualGatewayArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName!);\n      readonly mesh = Mesh.fromMeshName(this, 'Mesh', cdk.Fn.select(0, this.parsedArn));\n      readonly virtualGatewayArn = virtualGatewayArn;\n      readonly virtualGatewayName = cdk.Fn.select(2, this.parsedArn);\n    }(scope, id);\n  }\n\n                                                                       \n  public static fromVirtualGatewayAttributes(scope: Construct, id: string, attrs: VirtualGatewayAttributes): IVirtualGateway {\n    return new class extends VirtualGatewayBase {\n      readonly mesh = attrs.mesh;\n      readonly virtualGatewayName = attrs.virtualGatewayName;\n      readonly virtualGatewayArn = cdk.Stack.of(this).formatArn({\n        service: 'appmesh',\n        resource: `mesh/${attrs.mesh.meshName}/virtualGateway`,\n        resourceName: this.virtualGatewayName,\n      });\n    }(scope, id);\n  }\n\n                                               \n  public readonly virtualGatewayName: string;\n\n                                                                      \n  public readonly virtualGatewayArn: string;\n\n                                                            \n  public readonly mesh: IMesh;\n\n  protected readonly listeners = new Array<VirtualGatewayListenerConfig>();\n\n  constructor(scope: Construct, id: string, props: VirtualGatewayProps) {\n    super(scope, id, {\n      physicalName: props.virtualGatewayName || cdk.Lazy.string({ produce: () => cdk.Names.uniqueId(this) }),\n    });\n\n    this.mesh = props.mesh;\n\n    if (!props.listeners) {\n      // Use listener default of http listener port 8080 if no listener is defined\n      this.listeners.push(VirtualGatewayListener.http().bind(this));\n    } else {\n      props.listeners.forEach(listener => this.listeners.push(listener.bind(this)));\n    }\n\n    const accessLogging = props.accessLog?.bind(this);\n\n    const node = new CfnVirtualGateway(this, 'Resource', {\n      virtualGatewayName: this.physicalName,\n      meshName: this.mesh.meshName,\n      meshOwner: renderMeshOwner(this.env.account, this.mesh.env.account),\n      spec: {\n        listeners: this.listeners.map(listener => listener.listener),\n        backendDefaults: props.backendDefaults !== undefined\n          ? {\n            clientPolicy: {\n              tls: renderTlsClientPolicy(this, props.backendDefaults?.tlsClientPolicy),\n            },\n          }\n          : undefined,\n        logging: accessLogging !== undefined ? {\n          accessLog: accessLogging.virtualGatewayAccessLog,\n        } : undefined,\n      },\n    });\n\n    this.virtualGatewayName = this.getResourceNameAttribute(node.attrVirtualGatewayName);\n    this.virtualGatewayArn = this.getResourceArnAttribute(node.ref, {\n      service: 'appmesh',\n      resource: `mesh/${props.mesh.meshName}/virtualGateway`,\n      resourceName: this.physicalName,\n    });\n  }\n}\n\n                                                                                  \nexport interface VirtualGatewayAttributes {\n                                               \n  readonly virtualGatewayName: string;\n\n                                                            \n  readonly mesh: IMesh;\n}\n"],
  "mappings": "qNAAA,IAAA,QAAA,iBACA,IAAA,QAAA,cAEA,oBAAA,QAAA,uBACA,gBAAA,QAAA,mBACA,OAAA,QAAA,UACA,QAAA,QAAA,mBAEA,2BAAA,QAAA,8BAyCA,gCAA0C,KAAI,QAAQ,CAiB7C,gBAAgB,GAAY,MAA4B,CAC7D,MAAO,IAAI,iBAAA,aAAa,KAAM,GAAI,IAC7B,MACH,eAAgB,OAIb,+BAA+B,SAAwB,CAC5D,MAAO,KAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QAAS,CAAC,qCACV,aAAc,CAAC,KAAK,sBAM1B,4BAAoC,mBAAkB,CAmCpD,YAAY,MAAkB,GAAY,MAA0B,WAClE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,oBAAsB,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,IAAI,MAAM,SAAS,UAJ/E,KAAA,UAAY,GAAI,kFAOjC,KAAK,KAAO,MAAM,KAElB,AAAK,MAAM,UAIT,MAAM,UAAU,QAAQ,UAAY,KAAK,UAAU,KAAK,SAAS,KAAK,QAFtE,KAAK,UAAU,KAAK,2BAAA,uBAAuB,OAAO,KAAK,OAKzD,KAAM,eAAa,IAAG,MAAM,aAAS,MAAA,KAAA,OAAA,OAAA,GAAE,KAAK,MAEtC,KAAO,GAAI,qBAAA,kBAAkB,KAAM,WAAY,CACnD,mBAAoB,KAAK,aACzB,SAAU,KAAK,KAAK,SACpB,UAAW,QAAA,gBAAgB,KAAK,IAAI,QAAS,KAAK,KAAK,IAAI,SAC3D,KAAM,CACJ,UAAW,KAAK,UAAU,IAAI,UAAY,SAAS,UACnD,gBAAiB,MAAM,kBAAoB,OACvC,CACA,aAAc,CACZ,IAAK,QAAA,sBAAsB,KAAI,IAAE,MAAM,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,mBAG1D,OACJ,QAAS,gBAAkB,OAAY,CACrC,UAAW,cAAc,yBACvB,UAIR,KAAK,mBAAqB,KAAK,yBAAyB,KAAK,wBAC7D,KAAK,kBAAoB,KAAK,wBAAwB,KAAK,IAAK,CAC9D,QAAS,UACT,SAAU,QAAQ,MAAM,KAAK,0BAC7B,aAAc,KAAK,qBAxET,uBAAsB,MAAkB,GAAY,kBAAyB,CACzF,MAAO,IAAI,cAAc,mBAAkB,CAAhC,aAAA,qBACQ,KAAA,UAAY,IAAI,GAAG,MAAM,IAAK,IAAI,MAAM,GAAG,OAAO,SAAS,kBAAmB,IAAI,UAAU,qBAAqB,cACzH,KAAA,KAAO,OAAA,KAAK,aAAa,KAAM,OAAQ,IAAI,GAAG,OAAO,EAAG,KAAK,YAC7D,KAAA,kBAAoB,kBACpB,KAAA,mBAAqB,IAAI,GAAG,OAAO,EAAG,KAAK,aACpD,MAAO,UAIG,8BAA6B,MAAkB,GAAY,MAA+B,wFAC/F,GAAI,cAAc,mBAAkB,CAAhC,aAAA,qBACA,KAAA,KAAO,MAAM,KACb,KAAA,mBAAqB,MAAM,mBAC3B,KAAA,kBAAoB,IAAI,MAAM,GAAG,MAAM,UAAU,CACxD,QAAS,UACT,SAAU,QAAQ,MAAM,KAAK,0BAC7B,aAAc,KAAK,uBAErB,MAAO,KArBb,QAAA,eAAA",
  "names": []
}
