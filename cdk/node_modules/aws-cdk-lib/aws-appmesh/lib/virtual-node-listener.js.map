{
  "version": 3,
  "sources": ["virtual-node-listener.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnVirtualNode } from './appmesh.generated';\nimport { HealthCheck } from './health-checks';\nimport { ListenerTlsOptions } from './listener-tls-options';\nimport { ConnectionPoolConfig, renderListenerTlsOptions } from './private/utils';\nimport {\n  GrpcConnectionPool, GrpcTimeout, Http2ConnectionPool, HttpConnectionPool,\n  HttpTimeout, OutlierDetection, Protocol, TcpConnectionPool, TcpTimeout,\n} from './shared-interfaces';\n\n                                                \nexport interface VirtualNodeListenerConfig {\n                                                         \n  readonly listener: CfnVirtualNode.ListenerProperty,\n}\n\n/**\n * Represents the properties needed to define a Listeners for a VirtualNode\n */\ninterface VirtualNodeListenerCommonOptions {\n                                                                            \n  readonly port?: number\n\n                                                                                                  \n  readonly healthCheck?: HealthCheck;\n\n                                                                                                      \n  readonly tls?: ListenerTlsOptions;\n\n                                                                                                      \n  readonly outlierDetection?: OutlierDetection;\n}\n\ninterface CommonHttpVirtualNodeListenerOptions extends VirtualNodeListenerCommonOptions {\n                                                                    \n  readonly timeout?: HttpTimeout;\n}\n\n                                                     \nexport interface HttpVirtualNodeListenerOptions extends CommonHttpVirtualNodeListenerOptions {\n\n                                                                             \n  readonly connectionPool?: HttpConnectionPool;\n}\n\n                                                      \nexport interface Http2VirtualNodeListenerOptions extends CommonHttpVirtualNodeListenerOptions {\n                                                                              \n  readonly connectionPool?: Http2ConnectionPool;\n}\n\n                                                     \nexport interface GrpcVirtualNodeListenerOptions extends VirtualNodeListenerCommonOptions {\n                                                                    \n  readonly timeout?: GrpcTimeout;\n\n                                                                             \n  readonly connectionPool?: GrpcConnectionPool;\n}\n\n                                                    \nexport interface TcpVirtualNodeListenerOptions extends VirtualNodeListenerCommonOptions {\n                                                                   \n  readonly timeout?: TcpTimeout;\n\n                                                                             \n  readonly connectionPool?: TcpConnectionPool;\n}\n\n                                              \nexport abstract class VirtualNodeListener {\n                                                           \n  public static http(props: HttpVirtualNodeListenerOptions = {}): VirtualNodeListener {\n    return new VirtualNodeListenerImpl(Protocol.HTTP, props.healthCheck, props.timeout, props.port, props.tls, props.outlierDetection,\n      props.connectionPool);\n  }\n\n                                                            \n  public static http2(props: Http2VirtualNodeListenerOptions = {}): VirtualNodeListener {\n    return new VirtualNodeListenerImpl(Protocol.HTTP2, props.healthCheck, props.timeout, props.port, props.tls, props.outlierDetection,\n      props.connectionPool);\n  }\n\n                                                           \n  public static grpc(props: GrpcVirtualNodeListenerOptions = {}): VirtualNodeListener {\n    return new VirtualNodeListenerImpl(Protocol.GRPC, props.healthCheck, props.timeout, props.port, props.tls, props.outlierDetection,\n      props.connectionPool);\n  }\n\n                                                          \n  public static tcp(props: TcpVirtualNodeListenerOptions = {}): VirtualNodeListener {\n    return new VirtualNodeListenerImpl(Protocol.TCP, props.healthCheck, props.timeout, props.port, props.tls, props.outlierDetection,\n      props.connectionPool);\n  }\n\n                                                                               \n  public abstract bind(scope: Construct): VirtualNodeListenerConfig;\n}\n\nclass VirtualNodeListenerImpl extends VirtualNodeListener {\n  constructor(private readonly protocol: Protocol,\n    private readonly healthCheck: HealthCheck | undefined,\n    private readonly timeout: HttpTimeout | undefined,\n    private readonly port: number = 8080,\n    private readonly tls: ListenerTlsOptions | undefined,\n    private readonly outlierDetection: OutlierDetection | undefined,\n    private readonly connectionPool: ConnectionPoolConfig | undefined) { super(); }\n\n  public bind(scope: Construct): VirtualNodeListenerConfig {\n    return {\n      listener: {\n        portMapping: {\n          port: this.port,\n          protocol: this.protocol,\n        },\n        healthCheck: this.healthCheck?.bind(scope, { defaultPort: this.port }).virtualNodeHealthCheck,\n        timeout: this.timeout ? this.renderTimeout(this.timeout) : undefined,\n        tls: renderListenerTlsOptions(scope, this.tls),\n        outlierDetection: this.outlierDetection ? this.renderOutlierDetection(this.outlierDetection) : undefined,\n        connectionPool: this.connectionPool ? this.renderConnectionPool(this.connectionPool) : undefined,\n      },\n    };\n  }\n\n  private renderTimeout(timeout: HttpTimeout): CfnVirtualNode.ListenerTimeoutProperty {\n    return ({\n      [this.protocol]: {\n        idle: timeout?.idle !== undefined ? {\n          unit: 'ms',\n          value: timeout?.idle.toMilliseconds(),\n        } : undefined,\n        perRequest: timeout?.perRequest !== undefined ? {\n          unit: 'ms',\n          value: timeout?.perRequest.toMilliseconds(),\n        } : undefined,\n      },\n    });\n  }\n\n  private renderOutlierDetection(outlierDetection: OutlierDetection): CfnVirtualNode.OutlierDetectionProperty {\n    return {\n      baseEjectionDuration: {\n        unit: 'ms',\n        value: outlierDetection.baseEjectionDuration.toMilliseconds(),\n      },\n      interval: {\n        unit: 'ms',\n        value: outlierDetection.interval.toMilliseconds(),\n      },\n      maxEjectionPercent: outlierDetection.maxEjectionPercent,\n      maxServerErrors: outlierDetection.maxServerErrors,\n    };\n  }\n\n  private renderConnectionPool(connectionPool: ConnectionPoolConfig): CfnVirtualNode.VirtualNodeConnectionPoolProperty {\n    return ({\n      [this.protocol]: {\n        maxRequests: connectionPool?.maxRequests !== undefined ? connectionPool.maxRequests : undefined,\n        maxConnections: connectionPool?.maxConnections !== undefined ? connectionPool.maxConnections : undefined,\n        maxPendingRequests: connectionPool?.maxPendingRequests !== undefined ? connectionPool.maxPendingRequests : undefined,\n      },\n    });\n  }\n}\n"],
  "mappings": "0NAIA,QAAA,QAAA,mBACA,oBAAA,QAAA,uBAiEA,yBAAyC,OAEzB,MAAK,MAAwC,GAAE,8FACpD,GAAI,yBAAwB,oBAAA,SAAS,KAAM,MAAM,YAAa,MAAM,QAAS,MAAM,KAAM,MAAM,IAAK,MAAM,iBAC/G,MAAM,sBAII,OAAM,MAAyC,GAAE,+FACtD,GAAI,yBAAwB,oBAAA,SAAS,MAAO,MAAM,YAAa,MAAM,QAAS,MAAM,KAAM,MAAM,IAAK,MAAM,iBAChH,MAAM,sBAII,MAAK,MAAwC,GAAE,8FACpD,GAAI,yBAAwB,oBAAA,SAAS,KAAM,MAAM,YAAa,MAAM,QAAS,MAAM,KAAM,MAAM,IAAK,MAAM,iBAC/G,MAAM,sBAII,KAAI,MAAuC,GAAE,6FAClD,GAAI,yBAAwB,oBAAA,SAAS,IAAK,MAAM,YAAa,MAAM,QAAS,MAAM,KAAM,MAAM,IAAK,MAAM,iBAC9G,MAAM,iBAtBZ,QAAA,oBAAA,uIA6BA,qCAAsC,oBAAmB,CACvD,YAA6B,SACV,YACA,QACA,KAAe,KACf,IACA,iBACA,eAAgD,CAAI,QAN1C,KAAA,SAAA,SACV,KAAA,YAAA,YACA,KAAA,QAAA,QACA,KAAA,KAAA,KACA,KAAA,IAAA,IACA,KAAA,iBAAA,iBACA,KAAA,eAAA,eAEZ,KAAK,MAAgB,QAC1B,MAAO,CACL,SAAU,CACR,YAAa,CACX,KAAM,KAAK,KACX,SAAU,KAAK,UAEjB,YAAW,IAAE,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,KAAK,MAAO,CAAE,YAAa,KAAK,OAAQ,uBACvE,QAAS,KAAK,QAAU,KAAK,cAAc,KAAK,SAAW,OAC3D,IAAK,QAAA,yBAAyB,MAAO,KAAK,KAC1C,iBAAkB,KAAK,iBAAmB,KAAK,uBAAuB,KAAK,kBAAoB,OAC/F,eAAgB,KAAK,eAAiB,KAAK,qBAAqB,KAAK,gBAAkB,SAKrF,cAAc,QAAoB,CACxC,MAAQ,EACL,KAAK,UAAW,CACf,KAAM,UAAO,KAAA,OAAP,QAAS,QAAS,OAAY,CAClC,KAAM,KACN,MAAO,SAAO,KAAA,OAAP,QAAS,KAAK,kBACnB,OACJ,WAAY,UAAO,KAAA,OAAP,QAAS,cAAe,OAAY,CAC9C,KAAM,KACN,MAAO,SAAO,KAAA,OAAP,QAAS,WAAW,kBACzB,SAKF,uBAAuB,iBAAkC,CAC/D,MAAO,CACL,qBAAsB,CACpB,KAAM,KACN,MAAO,iBAAiB,qBAAqB,kBAE/C,SAAU,CACR,KAAM,KACN,MAAO,iBAAiB,SAAS,kBAEnC,mBAAoB,iBAAiB,mBACrC,gBAAiB,iBAAiB,iBAI9B,qBAAqB,eAAoC,CAC/D,MAAQ,EACL,KAAK,UAAW,CACf,YAAa,iBAAc,KAAA,OAAd,eAAgB,eAAgB,OAAY,eAAe,YAAc,OACtF,eAAgB,iBAAc,KAAA,OAAd,eAAgB,kBAAmB,OAAY,eAAe,eAAiB,OAC/F,mBAAoB,iBAAc,KAAA,OAAd,eAAgB,sBAAuB,OAAY,eAAe,mBAAqB",
  "names": []
}
