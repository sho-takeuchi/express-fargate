{
  "version": 3,
  "sources": ["apprunner.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:28.159Z\",\"fingerprint\":\"wymLbYU8Ks+JfUlajG9GeJGOKOcdMcnXppvtn+SMbjE=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                    \nexport interface CfnServiceProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly sourceConfiguration: CfnService.SourceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly autoScalingConfigurationArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly encryptionConfiguration?: CfnService.EncryptionConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                 \n    readonly healthCheckConfiguration?: CfnService.HealthCheckConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                          \n    readonly instanceConfiguration?: CfnService.InstanceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly serviceName?: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnServiceProps`\n *\n * @param properties - the TypeScript properties of a `CfnServiceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnServicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoScalingConfigurationArn', cdk.validateString)(properties.autoScalingConfigurationArn));\n    errors.collect(cdk.propertyValidator('encryptionConfiguration', CfnService_EncryptionConfigurationPropertyValidator)(properties.encryptionConfiguration));\n    errors.collect(cdk.propertyValidator('healthCheckConfiguration', CfnService_HealthCheckConfigurationPropertyValidator)(properties.healthCheckConfiguration));\n    errors.collect(cdk.propertyValidator('instanceConfiguration', CfnService_InstanceConfigurationPropertyValidator)(properties.instanceConfiguration));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('sourceConfiguration', cdk.requiredValidator)(properties.sourceConfiguration));\n    errors.collect(cdk.propertyValidator('sourceConfiguration', CfnService_SourceConfigurationPropertyValidator)(properties.sourceConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnServiceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service` resource\n *\n * @param properties - the TypeScript properties of a `CfnServiceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServicePropsValidator(properties).assertSuccess();\n    return {\n        SourceConfiguration: cfnServiceSourceConfigurationPropertyToCloudFormation(properties.sourceConfiguration),\n        AutoScalingConfigurationArn: cdk.stringToCloudFormation(properties.autoScalingConfigurationArn),\n        EncryptionConfiguration: cfnServiceEncryptionConfigurationPropertyToCloudFormation(properties.encryptionConfiguration),\n        HealthCheckConfiguration: cfnServiceHealthCheckConfigurationPropertyToCloudFormation(properties.healthCheckConfiguration),\n        InstanceConfiguration: cfnServiceInstanceConfigurationPropertyToCloudFormation(properties.instanceConfiguration),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServiceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServiceProps>();\n    ret.addPropertyResult('sourceConfiguration', 'SourceConfiguration', CfnServiceSourceConfigurationPropertyFromCloudFormation(properties.SourceConfiguration));\n    ret.addPropertyResult('autoScalingConfigurationArn', 'AutoScalingConfigurationArn', properties.AutoScalingConfigurationArn != null ? cfn_parse.FromCloudFormation.getString(properties.AutoScalingConfigurationArn) : undefined);\n    ret.addPropertyResult('encryptionConfiguration', 'EncryptionConfiguration', properties.EncryptionConfiguration != null ? CfnServiceEncryptionConfigurationPropertyFromCloudFormation(properties.EncryptionConfiguration) : undefined);\n    ret.addPropertyResult('healthCheckConfiguration', 'HealthCheckConfiguration', properties.HealthCheckConfiguration != null ? CfnServiceHealthCheckConfigurationPropertyFromCloudFormation(properties.HealthCheckConfiguration) : undefined);\n    ret.addPropertyResult('instanceConfiguration', 'InstanceConfiguration', properties.InstanceConfiguration != null ? CfnServiceInstanceConfigurationPropertyFromCloudFormation(properties.InstanceConfiguration) : undefined);\n    ret.addPropertyResult('serviceName', 'ServiceName', properties.ServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnService extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppRunner::Service\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnService {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnServicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnService(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrServiceArn: string;\n\n                                                                                                                                                      \n    public readonly attrServiceId: string;\n\n                                                                                                                                                                                          \n    public readonly attrServiceUrl: string;\n\nn    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                               \n    public sourceConfiguration: CfnService.SourceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public autoScalingConfigurationArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    public encryptionConfiguration: CfnService.EncryptionConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                 \n    public healthCheckConfiguration: CfnService.HealthCheckConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public instanceConfiguration: CfnService.InstanceConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public serviceName: string | undefined;\n\n                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnServiceProps) {\n        super(scope, id, { type: CfnService.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'sourceConfiguration', this);\n        this.attrServiceArn = cdk.Token.asString(this.getAtt('ServiceArn'));\n        this.attrServiceId = cdk.Token.asString(this.getAtt('ServiceId'));\n        this.attrServiceUrl = cdk.Token.asString(this.getAtt('ServiceUrl'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.sourceConfiguration = props.sourceConfiguration;\n        this.autoScalingConfigurationArn = props.autoScalingConfigurationArn;\n        this.encryptionConfiguration = props.encryptionConfiguration;\n        this.healthCheckConfiguration = props.healthCheckConfiguration;\n        this.instanceConfiguration = props.instanceConfiguration;\n        this.serviceName = props.serviceName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppRunner::Service\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnService.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            sourceConfiguration: this.sourceConfiguration,\n            autoScalingConfigurationArn: this.autoScalingConfigurationArn,\n            encryptionConfiguration: this.encryptionConfiguration,\n            healthCheckConfiguration: this.healthCheckConfiguration,\n            instanceConfiguration: this.instanceConfiguration,\n            serviceName: this.serviceName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnServicePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface AuthenticationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly accessRoleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly connectionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AuthenticationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AuthenticationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_AuthenticationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessRoleArn', cdk.validateString)(properties.accessRoleArn));\n    errors.collect(cdk.propertyValidator('connectionArn', cdk.validateString)(properties.connectionArn));\n    return errors.wrap('supplied properties not correct for \"AuthenticationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.AuthenticationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AuthenticationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.AuthenticationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceAuthenticationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_AuthenticationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AccessRoleArn: cdk.stringToCloudFormation(properties.accessRoleArn),\n        ConnectionArn: cdk.stringToCloudFormation(properties.connectionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceAuthenticationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.AuthenticationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.AuthenticationConfigurationProperty>();\n    ret.addPropertyResult('accessRoleArn', 'AccessRoleArn', properties.AccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.AccessRoleArn) : undefined);\n    ret.addPropertyResult('connectionArn', 'ConnectionArn', properties.ConnectionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                            \n    export interface CodeConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly codeConfigurationValues?: CfnService.CodeConfigurationValuesProperty | cdk.IResolvable;\nn        readonly configurationSource: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CodeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_CodeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeConfigurationValues', CfnService_CodeConfigurationValuesPropertyValidator)(properties.codeConfigurationValues));\n    errors.collect(cdk.propertyValidator('configurationSource', cdk.requiredValidator)(properties.configurationSource));\n    errors.collect(cdk.propertyValidator('configurationSource', cdk.validateString)(properties.configurationSource));\n    return errors.wrap('supplied properties not correct for \"CodeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.CodeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CodeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.CodeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceCodeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_CodeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CodeConfigurationValues: cfnServiceCodeConfigurationValuesPropertyToCloudFormation(properties.codeConfigurationValues),\n        ConfigurationSource: cdk.stringToCloudFormation(properties.configurationSource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceCodeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.CodeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.CodeConfigurationProperty>();\n    ret.addPropertyResult('codeConfigurationValues', 'CodeConfigurationValues', properties.CodeConfigurationValues != null ? CfnServiceCodeConfigurationValuesPropertyFromCloudFormation(properties.CodeConfigurationValues) : undefined);\n    ret.addPropertyResult('configurationSource', 'ConfigurationSource', cfn_parse.FromCloudFormation.getString(properties.ConfigurationSource));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface CodeConfigurationValuesProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly buildCommand?: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly port?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly runtime: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly runtimeEnvironmentVariables?: Array<CfnService.KeyValuePairProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                            \n        readonly startCommand?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeConfigurationValuesProperty`\n *\n * @param properties - the TypeScript properties of a `CodeConfigurationValuesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_CodeConfigurationValuesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('buildCommand', cdk.validateString)(properties.buildCommand));\n    errors.collect(cdk.propertyValidator('port', cdk.validateString)(properties.port));\n    errors.collect(cdk.propertyValidator('runtime', cdk.requiredValidator)(properties.runtime));\n    errors.collect(cdk.propertyValidator('runtime', cdk.validateString)(properties.runtime));\n    errors.collect(cdk.propertyValidator('runtimeEnvironmentVariables', cdk.listValidator(CfnService_KeyValuePairPropertyValidator))(properties.runtimeEnvironmentVariables));\n    errors.collect(cdk.propertyValidator('startCommand', cdk.validateString)(properties.startCommand));\n    return errors.wrap('supplied properties not correct for \"CodeConfigurationValuesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.CodeConfigurationValues` resource\n *\n * @param properties - the TypeScript properties of a `CodeConfigurationValuesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.CodeConfigurationValues` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceCodeConfigurationValuesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_CodeConfigurationValuesPropertyValidator(properties).assertSuccess();\n    return {\n        BuildCommand: cdk.stringToCloudFormation(properties.buildCommand),\n        Port: cdk.stringToCloudFormation(properties.port),\n        Runtime: cdk.stringToCloudFormation(properties.runtime),\n        RuntimeEnvironmentVariables: cdk.listMapper(cfnServiceKeyValuePairPropertyToCloudFormation)(properties.runtimeEnvironmentVariables),\n        StartCommand: cdk.stringToCloudFormation(properties.startCommand),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceCodeConfigurationValuesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.CodeConfigurationValuesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.CodeConfigurationValuesProperty>();\n    ret.addPropertyResult('buildCommand', 'BuildCommand', properties.BuildCommand != null ? cfn_parse.FromCloudFormation.getString(properties.BuildCommand) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getString(properties.Port) : undefined);\n    ret.addPropertyResult('runtime', 'Runtime', cfn_parse.FromCloudFormation.getString(properties.Runtime));\n    ret.addPropertyResult('runtimeEnvironmentVariables', 'RuntimeEnvironmentVariables', properties.RuntimeEnvironmentVariables != null ? cfn_parse.FromCloudFormation.getArray(CfnServiceKeyValuePairPropertyFromCloudFormation)(properties.RuntimeEnvironmentVariables) : undefined);\n    ret.addPropertyResult('startCommand', 'StartCommand', properties.StartCommand != null ? cfn_parse.FromCloudFormation.getString(properties.StartCommand) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                  \n    export interface CodeRepositoryProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly codeConfiguration?: CfnService.CodeConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly repositoryUrl: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly sourceCodeVersion: CfnService.SourceCodeVersionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeRepositoryProperty`\n *\n * @param properties - the TypeScript properties of a `CodeRepositoryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_CodeRepositoryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeConfiguration', CfnService_CodeConfigurationPropertyValidator)(properties.codeConfiguration));\n    errors.collect(cdk.propertyValidator('repositoryUrl', cdk.requiredValidator)(properties.repositoryUrl));\n    errors.collect(cdk.propertyValidator('repositoryUrl', cdk.validateString)(properties.repositoryUrl));\n    errors.collect(cdk.propertyValidator('sourceCodeVersion', cdk.requiredValidator)(properties.sourceCodeVersion));\n    errors.collect(cdk.propertyValidator('sourceCodeVersion', CfnService_SourceCodeVersionPropertyValidator)(properties.sourceCodeVersion));\n    return errors.wrap('supplied properties not correct for \"CodeRepositoryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.CodeRepository` resource\n *\n * @param properties - the TypeScript properties of a `CodeRepositoryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.CodeRepository` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceCodeRepositoryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_CodeRepositoryPropertyValidator(properties).assertSuccess();\n    return {\n        CodeConfiguration: cfnServiceCodeConfigurationPropertyToCloudFormation(properties.codeConfiguration),\n        RepositoryUrl: cdk.stringToCloudFormation(properties.repositoryUrl),\n        SourceCodeVersion: cfnServiceSourceCodeVersionPropertyToCloudFormation(properties.sourceCodeVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceCodeRepositoryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.CodeRepositoryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.CodeRepositoryProperty>();\n    ret.addPropertyResult('codeConfiguration', 'CodeConfiguration', properties.CodeConfiguration != null ? CfnServiceCodeConfigurationPropertyFromCloudFormation(properties.CodeConfiguration) : undefined);\n    ret.addPropertyResult('repositoryUrl', 'RepositoryUrl', cfn_parse.FromCloudFormation.getString(properties.RepositoryUrl));\n    ret.addPropertyResult('sourceCodeVersion', 'SourceCodeVersion', CfnServiceSourceCodeVersionPropertyFromCloudFormation(properties.SourceCodeVersion));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                               \n    export interface EncryptionConfigurationProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly kmsKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_EncryptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKey', cdk.requiredValidator)(properties.kmsKey));\n    errors.collect(cdk.propertyValidator('kmsKey', cdk.validateString)(properties.kmsKey));\n    return errors.wrap('supplied properties not correct for \"EncryptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.EncryptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.EncryptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceEncryptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_EncryptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKey: cdk.stringToCloudFormation(properties.kmsKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceEncryptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.EncryptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.EncryptionConfigurationProperty>();\n    ret.addPropertyResult('kmsKey', 'KmsKey', cfn_parse.FromCloudFormation.getString(properties.KmsKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface HealthCheckConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly healthyThreshold?: number;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly interval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly path?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly protocol?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly timeout?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly unhealthyThreshold?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HealthCheckConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `HealthCheckConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_HealthCheckConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('healthyThreshold', cdk.validateNumber)(properties.healthyThreshold));\n    errors.collect(cdk.propertyValidator('interval', cdk.validateNumber)(properties.interval));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    errors.collect(cdk.propertyValidator('unhealthyThreshold', cdk.validateNumber)(properties.unhealthyThreshold));\n    return errors.wrap('supplied properties not correct for \"HealthCheckConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.HealthCheckConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `HealthCheckConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.HealthCheckConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceHealthCheckConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_HealthCheckConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        HealthyThreshold: cdk.numberToCloudFormation(properties.healthyThreshold),\n        Interval: cdk.numberToCloudFormation(properties.interval),\n        Path: cdk.stringToCloudFormation(properties.path),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n        UnhealthyThreshold: cdk.numberToCloudFormation(properties.unhealthyThreshold),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceHealthCheckConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.HealthCheckConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.HealthCheckConfigurationProperty>();\n    ret.addPropertyResult('healthyThreshold', 'HealthyThreshold', properties.HealthyThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.HealthyThreshold) : undefined);\n    ret.addPropertyResult('interval', 'Interval', properties.Interval != null ? cfn_parse.FromCloudFormation.getNumber(properties.Interval) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addPropertyResult('unhealthyThreshold', 'UnhealthyThreshold', properties.UnhealthyThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.UnhealthyThreshold) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                          \n    export interface ImageConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly port?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly runtimeEnvironmentVariables?: Array<CfnService.KeyValuePairProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly startCommand?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ImageConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_ImageConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('port', cdk.validateString)(properties.port));\n    errors.collect(cdk.propertyValidator('runtimeEnvironmentVariables', cdk.listValidator(CfnService_KeyValuePairPropertyValidator))(properties.runtimeEnvironmentVariables));\n    errors.collect(cdk.propertyValidator('startCommand', cdk.validateString)(properties.startCommand));\n    return errors.wrap('supplied properties not correct for \"ImageConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.ImageConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ImageConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.ImageConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceImageConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_ImageConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Port: cdk.stringToCloudFormation(properties.port),\n        RuntimeEnvironmentVariables: cdk.listMapper(cfnServiceKeyValuePairPropertyToCloudFormation)(properties.runtimeEnvironmentVariables),\n        StartCommand: cdk.stringToCloudFormation(properties.startCommand),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceImageConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.ImageConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.ImageConfigurationProperty>();\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getString(properties.Port) : undefined);\n    ret.addPropertyResult('runtimeEnvironmentVariables', 'RuntimeEnvironmentVariables', properties.RuntimeEnvironmentVariables != null ? cfn_parse.FromCloudFormation.getArray(CfnServiceKeyValuePairPropertyFromCloudFormation)(properties.RuntimeEnvironmentVariables) : undefined);\n    ret.addPropertyResult('startCommand', 'StartCommand', properties.StartCommand != null ? cfn_parse.FromCloudFormation.getString(properties.StartCommand) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                    \n    export interface ImageRepositoryProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly imageConfiguration?: CfnService.ImageConfigurationProperty | cdk.IResolvable;\nn        readonly imageIdentifier: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly imageRepositoryType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageRepositoryProperty`\n *\n * @param properties - the TypeScript properties of a `ImageRepositoryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_ImageRepositoryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('imageConfiguration', CfnService_ImageConfigurationPropertyValidator)(properties.imageConfiguration));\n    errors.collect(cdk.propertyValidator('imageIdentifier', cdk.requiredValidator)(properties.imageIdentifier));\n    errors.collect(cdk.propertyValidator('imageIdentifier', cdk.validateString)(properties.imageIdentifier));\n    errors.collect(cdk.propertyValidator('imageRepositoryType', cdk.requiredValidator)(properties.imageRepositoryType));\n    errors.collect(cdk.propertyValidator('imageRepositoryType', cdk.validateString)(properties.imageRepositoryType));\n    return errors.wrap('supplied properties not correct for \"ImageRepositoryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.ImageRepository` resource\n *\n * @param properties - the TypeScript properties of a `ImageRepositoryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.ImageRepository` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceImageRepositoryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_ImageRepositoryPropertyValidator(properties).assertSuccess();\n    return {\n        ImageConfiguration: cfnServiceImageConfigurationPropertyToCloudFormation(properties.imageConfiguration),\n        ImageIdentifier: cdk.stringToCloudFormation(properties.imageIdentifier),\n        ImageRepositoryType: cdk.stringToCloudFormation(properties.imageRepositoryType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceImageRepositoryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.ImageRepositoryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.ImageRepositoryProperty>();\n    ret.addPropertyResult('imageConfiguration', 'ImageConfiguration', properties.ImageConfiguration != null ? CfnServiceImageConfigurationPropertyFromCloudFormation(properties.ImageConfiguration) : undefined);\n    ret.addPropertyResult('imageIdentifier', 'ImageIdentifier', cfn_parse.FromCloudFormation.getString(properties.ImageIdentifier));\n    ret.addPropertyResult('imageRepositoryType', 'ImageRepositoryType', cfn_parse.FromCloudFormation.getString(properties.ImageRepositoryType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                               \n    export interface InstanceConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly cpu?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly instanceRoleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly memory?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_InstanceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpu', cdk.validateString)(properties.cpu));\n    errors.collect(cdk.propertyValidator('instanceRoleArn', cdk.validateString)(properties.instanceRoleArn));\n    errors.collect(cdk.propertyValidator('memory', cdk.validateString)(properties.memory));\n    return errors.wrap('supplied properties not correct for \"InstanceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.InstanceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `InstanceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.InstanceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceInstanceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_InstanceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Cpu: cdk.stringToCloudFormation(properties.cpu),\n        InstanceRoleArn: cdk.stringToCloudFormation(properties.instanceRoleArn),\n        Memory: cdk.stringToCloudFormation(properties.memory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceInstanceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.InstanceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.InstanceConfigurationProperty>();\n    ret.addPropertyResult('cpu', 'Cpu', properties.Cpu != null ? cfn_parse.FromCloudFormation.getString(properties.Cpu) : undefined);\n    ret.addPropertyResult('instanceRoleArn', 'InstanceRoleArn', properties.InstanceRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceRoleArn) : undefined);\n    ret.addPropertyResult('memory', 'Memory', properties.Memory != null ? cfn_parse.FromCloudFormation.getString(properties.Memory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                             \n    export interface KeyValuePairProperty {\n                                                                                                                                                                                                                                                              \n        readonly name?: string;\n                                                                                                                                                                                                                                                                          \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KeyValuePairProperty`\n *\n * @param properties - the TypeScript properties of a `KeyValuePairProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_KeyValuePairPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"KeyValuePairProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.KeyValuePair` resource\n *\n * @param properties - the TypeScript properties of a `KeyValuePairProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.KeyValuePair` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceKeyValuePairPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_KeyValuePairPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceKeyValuePairPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.KeyValuePairProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.KeyValuePairProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                             \n    export interface SourceCodeVersionProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly type: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceCodeVersionProperty`\n *\n * @param properties - the TypeScript properties of a `SourceCodeVersionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_SourceCodeVersionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"SourceCodeVersionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.SourceCodeVersion` resource\n *\n * @param properties - the TypeScript properties of a `SourceCodeVersionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.SourceCodeVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceSourceCodeVersionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_SourceCodeVersionPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceSourceCodeVersionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.SourceCodeVersionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.SourceCodeVersionProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                        \n    export interface SourceConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly authenticationConfiguration?: CfnService.AuthenticationConfigurationProperty | cdk.IResolvable;\nn        readonly autoDeploymentsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly codeRepository?: CfnService.CodeRepositoryProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly imageRepository?: CfnService.ImageRepositoryProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SourceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_SourceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authenticationConfiguration', CfnService_AuthenticationConfigurationPropertyValidator)(properties.authenticationConfiguration));\n    errors.collect(cdk.propertyValidator('autoDeploymentsEnabled', cdk.validateBoolean)(properties.autoDeploymentsEnabled));\n    errors.collect(cdk.propertyValidator('codeRepository', CfnService_CodeRepositoryPropertyValidator)(properties.codeRepository));\n    errors.collect(cdk.propertyValidator('imageRepository', CfnService_ImageRepositoryPropertyValidator)(properties.imageRepository));\n    return errors.wrap('supplied properties not correct for \"SourceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppRunner::Service.SourceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SourceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppRunner::Service.SourceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceSourceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_SourceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AuthenticationConfiguration: cfnServiceAuthenticationConfigurationPropertyToCloudFormation(properties.authenticationConfiguration),\n        AutoDeploymentsEnabled: cdk.booleanToCloudFormation(properties.autoDeploymentsEnabled),\n        CodeRepository: cfnServiceCodeRepositoryPropertyToCloudFormation(properties.codeRepository),\n        ImageRepository: cfnServiceImageRepositoryPropertyToCloudFormation(properties.imageRepository),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceSourceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.SourceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.SourceConfigurationProperty>();\n    ret.addPropertyResult('authenticationConfiguration', 'AuthenticationConfiguration', properties.AuthenticationConfiguration != null ? CfnServiceAuthenticationConfigurationPropertyFromCloudFormation(properties.AuthenticationConfiguration) : undefined);\n    ret.addPropertyResult('autoDeploymentsEnabled', 'AutoDeploymentsEnabled', properties.AutoDeploymentsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoDeploymentsEnabled) : undefined);\n    ret.addPropertyResult('codeRepository', 'CodeRepository', properties.CodeRepository != null ? CfnServiceCodeRepositoryPropertyFromCloudFormation(properties.CodeRepository) : undefined);\n    ret.addPropertyResult('imageRepository', 'ImageRepository', properties.ImageRepository != null ? CfnServiceImageRepositoryPropertyFromCloudFormation(properties.ImageRepository) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
