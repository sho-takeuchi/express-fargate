{
  "version": 3,
  "sources": ["appstream.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:28.191Z\",\"fingerprint\":\"6MH33E8deE+z7jIWbqXciHtThlGQFWtavUkQR3zHOyg=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnAppBlockProps {\n\n                                                                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                  \n    readonly setupScriptDetails: CfnAppBlock.ScriptDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    readonly sourceS3Location: CfnAppBlock.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                                                   \n    readonly displayName?: string;\n\n                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAppBlockProps`\n *\n * @param properties - the TypeScript properties of a `CfnAppBlockProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppBlockPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('setupScriptDetails', cdk.requiredValidator)(properties.setupScriptDetails));\n    errors.collect(cdk.propertyValidator('setupScriptDetails', CfnAppBlock_ScriptDetailsPropertyValidator)(properties.setupScriptDetails));\n    errors.collect(cdk.propertyValidator('sourceS3Location', cdk.requiredValidator)(properties.sourceS3Location));\n    errors.collect(cdk.propertyValidator('sourceS3Location', CfnAppBlock_S3LocationPropertyValidator)(properties.sourceS3Location));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAppBlockProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::AppBlock` resource\n *\n * @param properties - the TypeScript properties of a `CfnAppBlockProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::AppBlock` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppBlockPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppBlockPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SetupScriptDetails: cfnAppBlockScriptDetailsPropertyToCloudFormation(properties.setupScriptDetails),\n        SourceS3Location: cfnAppBlockS3LocationPropertyToCloudFormation(properties.sourceS3Location),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppBlockPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppBlockProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppBlockProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('setupScriptDetails', 'SetupScriptDetails', CfnAppBlockScriptDetailsPropertyFromCloudFormation(properties.SetupScriptDetails));\n    ret.addPropertyResult('sourceS3Location', 'SourceS3Location', CfnAppBlockS3LocationPropertyFromCloudFormation(properties.SourceS3Location));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('displayName', 'DisplayName', properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnAppBlock extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::AppBlock\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAppBlock {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAppBlockPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAppBlock(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                    \n    public readonly attrArn: string;\n\n                                                                                                           \n    public readonly attrCreatedTime: string;\n\n                                                                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                  \n    public setupScriptDetails: CfnAppBlock.ScriptDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    public sourceS3Location: CfnAppBlock.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                   \n    public displayName: string | undefined;\n\n                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnAppBlockProps) {\n        super(scope, id, { type: CfnAppBlock.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'setupScriptDetails', this);\n        cdk.requireProperty(props, 'sourceS3Location', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n\n        this.name = props.name;\n        this.setupScriptDetails = props.setupScriptDetails;\n        this.sourceS3Location = props.sourceS3Location;\n        this.description = props.description;\n        this.displayName = props.displayName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppStream::AppBlock\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAppBlock.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            setupScriptDetails: this.setupScriptDetails,\n            sourceS3Location: this.sourceS3Location,\n            description: this.description,\n            displayName: this.displayName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAppBlockPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAppBlock {\n                                                                                                                                                                                                                                             \n    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                         \n        readonly s3Bucket: string;\n                                                                                                                                                                                                                                                                            \n        readonly s3Key: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppBlock_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.requiredValidator)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.validateString)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.requiredValidator)(properties.s3Key));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.validateString)(properties.s3Key));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::AppBlock.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::AppBlock.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppBlockS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppBlock_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),\n        S3Key: cdk.stringToCloudFormation(properties.s3Key),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppBlockS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppBlock.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppBlock.S3LocationProperty>();\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', cfn_parse.FromCloudFormation.getString(properties.S3Bucket));\n    ret.addPropertyResult('s3Key', 'S3Key', cfn_parse.FromCloudFormation.getString(properties.S3Key));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAppBlock {\n                                                                                                                                                                                                                                         \n    export interface ScriptDetailsProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly executableParameters?: string;\n                                                                                                                                                                                                                                                                  \n        readonly executablePath: string;\n                                                                                                                                                                                                                                                                             \n        readonly scriptS3Location: CfnAppBlock.S3LocationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly timeoutInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScriptDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `ScriptDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppBlock_ScriptDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('executableParameters', cdk.validateString)(properties.executableParameters));\n    errors.collect(cdk.propertyValidator('executablePath', cdk.requiredValidator)(properties.executablePath));\n    errors.collect(cdk.propertyValidator('executablePath', cdk.validateString)(properties.executablePath));\n    errors.collect(cdk.propertyValidator('scriptS3Location', cdk.requiredValidator)(properties.scriptS3Location));\n    errors.collect(cdk.propertyValidator('scriptS3Location', CfnAppBlock_S3LocationPropertyValidator)(properties.scriptS3Location));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.requiredValidator)(properties.timeoutInSeconds));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.validateNumber)(properties.timeoutInSeconds));\n    return errors.wrap('supplied properties not correct for \"ScriptDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::AppBlock.ScriptDetails` resource\n *\n * @param properties - the TypeScript properties of a `ScriptDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::AppBlock.ScriptDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppBlockScriptDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppBlock_ScriptDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        ExecutableParameters: cdk.stringToCloudFormation(properties.executableParameters),\n        ExecutablePath: cdk.stringToCloudFormation(properties.executablePath),\n        ScriptS3Location: cfnAppBlockS3LocationPropertyToCloudFormation(properties.scriptS3Location),\n        TimeoutInSeconds: cdk.numberToCloudFormation(properties.timeoutInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppBlockScriptDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppBlock.ScriptDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppBlock.ScriptDetailsProperty>();\n    ret.addPropertyResult('executableParameters', 'ExecutableParameters', properties.ExecutableParameters != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutableParameters) : undefined);\n    ret.addPropertyResult('executablePath', 'ExecutablePath', cfn_parse.FromCloudFormation.getString(properties.ExecutablePath));\n    ret.addPropertyResult('scriptS3Location', 'ScriptS3Location', CfnAppBlockS3LocationPropertyFromCloudFormation(properties.ScriptS3Location));\n    ret.addPropertyResult('timeoutInSeconds', 'TimeoutInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnApplicationProps {\n\n                                                                                                                                                                                                                                                         \n    readonly appBlockArn: string;\n\n                                                                                                                                                                                                                                  \n    readonly iconS3Location: CfnApplication.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                              \n    readonly instanceFamilies: string[];\n\n                                                                                                                                                                                                                         \n    readonly launchPath: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly platforms: string[];\n\n                                                                                                                                                                                                                                                 \n    readonly attributesToDelete?: string[];\n\n                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly displayName?: string;\n\n                                                                                                                                                                                                                                     \n    readonly launchParameters?: string;\n\n                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                     \n    readonly workingDirectory?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appBlockArn', cdk.requiredValidator)(properties.appBlockArn));\n    errors.collect(cdk.propertyValidator('appBlockArn', cdk.validateString)(properties.appBlockArn));\n    errors.collect(cdk.propertyValidator('attributesToDelete', cdk.listValidator(cdk.validateString))(properties.attributesToDelete));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('iconS3Location', cdk.requiredValidator)(properties.iconS3Location));\n    errors.collect(cdk.propertyValidator('iconS3Location', CfnApplication_S3LocationPropertyValidator)(properties.iconS3Location));\n    errors.collect(cdk.propertyValidator('instanceFamilies', cdk.requiredValidator)(properties.instanceFamilies));\n    errors.collect(cdk.propertyValidator('instanceFamilies', cdk.listValidator(cdk.validateString))(properties.instanceFamilies));\n    errors.collect(cdk.propertyValidator('launchParameters', cdk.validateString)(properties.launchParameters));\n    errors.collect(cdk.propertyValidator('launchPath', cdk.requiredValidator)(properties.launchPath));\n    errors.collect(cdk.propertyValidator('launchPath', cdk.validateString)(properties.launchPath));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('platforms', cdk.requiredValidator)(properties.platforms));\n    errors.collect(cdk.propertyValidator('platforms', cdk.listValidator(cdk.validateString))(properties.platforms));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('workingDirectory', cdk.validateString)(properties.workingDirectory));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Application` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Application` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationPropsValidator(properties).assertSuccess();\n    return {\n        AppBlockArn: cdk.stringToCloudFormation(properties.appBlockArn),\n        IconS3Location: cfnApplicationS3LocationPropertyToCloudFormation(properties.iconS3Location),\n        InstanceFamilies: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceFamilies),\n        LaunchPath: cdk.stringToCloudFormation(properties.launchPath),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Platforms: cdk.listMapper(cdk.stringToCloudFormation)(properties.platforms),\n        AttributesToDelete: cdk.listMapper(cdk.stringToCloudFormation)(properties.attributesToDelete),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        LaunchParameters: cdk.stringToCloudFormation(properties.launchParameters),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        WorkingDirectory: cdk.stringToCloudFormation(properties.workingDirectory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationProps>();\n    ret.addPropertyResult('appBlockArn', 'AppBlockArn', cfn_parse.FromCloudFormation.getString(properties.AppBlockArn));\n    ret.addPropertyResult('iconS3Location', 'IconS3Location', CfnApplicationS3LocationPropertyFromCloudFormation(properties.IconS3Location));\n    ret.addPropertyResult('instanceFamilies', 'InstanceFamilies', cfn_parse.FromCloudFormation.getStringArray(properties.InstanceFamilies));\n    ret.addPropertyResult('launchPath', 'LaunchPath', cfn_parse.FromCloudFormation.getString(properties.LaunchPath));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('platforms', 'Platforms', cfn_parse.FromCloudFormation.getStringArray(properties.Platforms));\n    ret.addPropertyResult('attributesToDelete', 'AttributesToDelete', properties.AttributesToDelete != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AttributesToDelete) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('displayName', 'DisplayName', properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined);\n    ret.addPropertyResult('launchParameters', 'LaunchParameters', properties.LaunchParameters != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchParameters) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workingDirectory', 'WorkingDirectory', properties.WorkingDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.WorkingDirectory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \nexport class CfnApplication extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::Application\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplication {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplication(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                             \n    public readonly attrCreatedTime: string;\n\n                                                                                                                                                                                                                                                         \n    public appBlockArn: string;\n\n                                                                                                                                                                                                                                  \n    public iconS3Location: CfnApplication.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                              \n    public instanceFamilies: string[];\n\n                                                                                                                                                                                                                         \n    public launchPath: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                     \n    public platforms: string[];\n\n                                                                                                                                                                                                                                                 \n    public attributesToDelete: string[] | undefined;\n\n                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public displayName: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public launchParameters: string | undefined;\n\n                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                     \n    public workingDirectory: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationProps) {\n        super(scope, id, { type: CfnApplication.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'appBlockArn', this);\n        cdk.requireProperty(props, 'iconS3Location', this);\n        cdk.requireProperty(props, 'instanceFamilies', this);\n        cdk.requireProperty(props, 'launchPath', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'platforms', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n\n        this.appBlockArn = props.appBlockArn;\n        this.iconS3Location = props.iconS3Location;\n        this.instanceFamilies = props.instanceFamilies;\n        this.launchPath = props.launchPath;\n        this.name = props.name;\n        this.platforms = props.platforms;\n        this.attributesToDelete = props.attributesToDelete;\n        this.description = props.description;\n        this.displayName = props.displayName;\n        this.launchParameters = props.launchParameters;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppStream::Application\", props.tags, { tagPropertyName: 'tags' });\n        this.workingDirectory = props.workingDirectory;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplication.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            appBlockArn: this.appBlockArn,\n            iconS3Location: this.iconS3Location,\n            instanceFamilies: this.instanceFamilies,\n            launchPath: this.launchPath,\n            name: this.name,\n            platforms: this.platforms,\n            attributesToDelete: this.attributesToDelete,\n            description: this.description,\n            displayName: this.displayName,\n            launchParameters: this.launchParameters,\n            tags: this.tags.renderTags(),\n            workingDirectory: this.workingDirectory,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                       \n    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                               \n        readonly s3Bucket: string;\n                                                                                                                                                                                                                                                         \n        readonly s3Key: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.requiredValidator)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.validateString)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.requiredValidator)(properties.s3Key));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.validateString)(properties.s3Key));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Application.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Application.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),\n        S3Key: cdk.stringToCloudFormation(properties.s3Key),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.S3LocationProperty>();\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', cfn_parse.FromCloudFormation.getString(properties.S3Bucket));\n    ret.addPropertyResult('s3Key', 'S3Key', cfn_parse.FromCloudFormation.getString(properties.S3Key));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                        \nexport interface CfnApplicationEntitlementAssociationProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly applicationIdentifier: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly entitlementName: string;\n\n                                                                                                                                                                                                                                                       \n    readonly stackName: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationEntitlementAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationEntitlementAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationEntitlementAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationIdentifier', cdk.requiredValidator)(properties.applicationIdentifier));\n    errors.collect(cdk.propertyValidator('applicationIdentifier', cdk.validateString)(properties.applicationIdentifier));\n    errors.collect(cdk.propertyValidator('entitlementName', cdk.requiredValidator)(properties.entitlementName));\n    errors.collect(cdk.propertyValidator('entitlementName', cdk.validateString)(properties.entitlementName));\n    errors.collect(cdk.propertyValidator('stackName', cdk.requiredValidator)(properties.stackName));\n    errors.collect(cdk.propertyValidator('stackName', cdk.validateString)(properties.stackName));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationEntitlementAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::ApplicationEntitlementAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationEntitlementAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::ApplicationEntitlementAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationEntitlementAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationEntitlementAssociationPropsValidator(properties).assertSuccess();\n    return {\n        ApplicationIdentifier: cdk.stringToCloudFormation(properties.applicationIdentifier),\n        EntitlementName: cdk.stringToCloudFormation(properties.entitlementName),\n        StackName: cdk.stringToCloudFormation(properties.stackName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationEntitlementAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationEntitlementAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationEntitlementAssociationProps>();\n    ret.addPropertyResult('applicationIdentifier', 'ApplicationIdentifier', cfn_parse.FromCloudFormation.getString(properties.ApplicationIdentifier));\n    ret.addPropertyResult('entitlementName', 'EntitlementName', cfn_parse.FromCloudFormation.getString(properties.EntitlementName));\n    ret.addPropertyResult('stackName', 'StackName', cfn_parse.FromCloudFormation.getString(properties.StackName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnApplicationEntitlementAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::ApplicationEntitlementAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplicationEntitlementAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationEntitlementAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplicationEntitlementAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                               \n    public applicationIdentifier: string;\n\n                                                                                                                                                                                                                                                                   \n    public entitlementName: string;\n\n                                                                                                                                                                                                                                                       \n    public stackName: string;\n\n                                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationEntitlementAssociationProps) {\n        super(scope, id, { type: CfnApplicationEntitlementAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationIdentifier', this);\n        cdk.requireProperty(props, 'entitlementName', this);\n        cdk.requireProperty(props, 'stackName', this);\n\n        this.applicationIdentifier = props.applicationIdentifier;\n        this.entitlementName = props.entitlementName;\n        this.stackName = props.stackName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplicationEntitlementAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationIdentifier: this.applicationIdentifier,\n            entitlementName: this.entitlementName,\n            stackName: this.stackName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationEntitlementAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                            \nexport interface CfnApplicationFleetAssociationProps {\n\n                                                                                                                                                                                                                                                     \n    readonly applicationArn: string;\n\n                                                                                                                                                                                                                                           \n    readonly fleetName: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationFleetAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationFleetAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationFleetAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationArn', cdk.requiredValidator)(properties.applicationArn));\n    errors.collect(cdk.propertyValidator('applicationArn', cdk.validateString)(properties.applicationArn));\n    errors.collect(cdk.propertyValidator('fleetName', cdk.requiredValidator)(properties.fleetName));\n    errors.collect(cdk.propertyValidator('fleetName', cdk.validateString)(properties.fleetName));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationFleetAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::ApplicationFleetAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationFleetAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::ApplicationFleetAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationFleetAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationFleetAssociationPropsValidator(properties).assertSuccess();\n    return {\n        ApplicationArn: cdk.stringToCloudFormation(properties.applicationArn),\n        FleetName: cdk.stringToCloudFormation(properties.fleetName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationFleetAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationFleetAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationFleetAssociationProps>();\n    ret.addPropertyResult('applicationArn', 'ApplicationArn', cfn_parse.FromCloudFormation.getString(properties.ApplicationArn));\n    ret.addPropertyResult('fleetName', 'FleetName', cfn_parse.FromCloudFormation.getString(properties.FleetName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnApplicationFleetAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::ApplicationFleetAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplicationFleetAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationFleetAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplicationFleetAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                     \n    public applicationArn: string;\n\n                                                                                                                                                                                                                                           \n    public fleetName: string;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationFleetAssociationProps) {\n        super(scope, id, { type: CfnApplicationFleetAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationArn', this);\n        cdk.requireProperty(props, 'fleetName', this);\n\n        this.applicationArn = props.applicationArn;\n        this.fleetName = props.fleetName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplicationFleetAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationArn: this.applicationArn,\n            fleetName: this.fleetName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationFleetAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                    \nexport interface CfnDirectoryConfigProps {\n\n                                                                                                                                                                                                                                                                           \n    readonly directoryName: string;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly organizationalUnitDistinguishedNames: string[];\n\nn    readonly serviceAccountCredentials: CfnDirectoryConfig.ServiceAccountCredentialsProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDirectoryConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnDirectoryConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDirectoryConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryName', cdk.requiredValidator)(properties.directoryName));\n    errors.collect(cdk.propertyValidator('directoryName', cdk.validateString)(properties.directoryName));\n    errors.collect(cdk.propertyValidator('organizationalUnitDistinguishedNames', cdk.requiredValidator)(properties.organizationalUnitDistinguishedNames));\n    errors.collect(cdk.propertyValidator('organizationalUnitDistinguishedNames', cdk.listValidator(cdk.validateString))(properties.organizationalUnitDistinguishedNames));\n    errors.collect(cdk.propertyValidator('serviceAccountCredentials', cdk.requiredValidator)(properties.serviceAccountCredentials));\n    errors.collect(cdk.propertyValidator('serviceAccountCredentials', CfnDirectoryConfig_ServiceAccountCredentialsPropertyValidator)(properties.serviceAccountCredentials));\n    return errors.wrap('supplied properties not correct for \"CfnDirectoryConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::DirectoryConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnDirectoryConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::DirectoryConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDirectoryConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDirectoryConfigPropsValidator(properties).assertSuccess();\n    return {\n        DirectoryName: cdk.stringToCloudFormation(properties.directoryName),\n        OrganizationalUnitDistinguishedNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationalUnitDistinguishedNames),\n        ServiceAccountCredentials: cfnDirectoryConfigServiceAccountCredentialsPropertyToCloudFormation(properties.serviceAccountCredentials),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDirectoryConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDirectoryConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDirectoryConfigProps>();\n    ret.addPropertyResult('directoryName', 'DirectoryName', cfn_parse.FromCloudFormation.getString(properties.DirectoryName));\n    ret.addPropertyResult('organizationalUnitDistinguishedNames', 'OrganizationalUnitDistinguishedNames', cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationalUnitDistinguishedNames));\n    ret.addPropertyResult('serviceAccountCredentials', 'ServiceAccountCredentials', CfnDirectoryConfigServiceAccountCredentialsPropertyFromCloudFormation(properties.ServiceAccountCredentials));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnDirectoryConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::DirectoryConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDirectoryConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDirectoryConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDirectoryConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                           \n    public directoryName: string;\n\n                                                                                                                                                                                                                                                                                                  \n    public organizationalUnitDistinguishedNames: string[];\n\nn    public serviceAccountCredentials: CfnDirectoryConfig.ServiceAccountCredentialsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnDirectoryConfigProps) {\n        super(scope, id, { type: CfnDirectoryConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'directoryName', this);\n        cdk.requireProperty(props, 'organizationalUnitDistinguishedNames', this);\n        cdk.requireProperty(props, 'serviceAccountCredentials', this);\n\n        this.directoryName = props.directoryName;\n        this.organizationalUnitDistinguishedNames = props.organizationalUnitDistinguishedNames;\n        this.serviceAccountCredentials = props.serviceAccountCredentials;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDirectoryConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            directoryName: this.directoryName,\n            organizationalUnitDistinguishedNames: this.organizationalUnitDistinguishedNames,\n            serviceAccountCredentials: this.serviceAccountCredentials,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDirectoryConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDirectoryConfig {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface ServiceAccountCredentialsProperty {\nn        readonly accountName: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly accountPassword: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServiceAccountCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `ServiceAccountCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDirectoryConfig_ServiceAccountCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountName', cdk.requiredValidator)(properties.accountName));\n    errors.collect(cdk.propertyValidator('accountName', cdk.validateString)(properties.accountName));\n    errors.collect(cdk.propertyValidator('accountPassword', cdk.requiredValidator)(properties.accountPassword));\n    errors.collect(cdk.propertyValidator('accountPassword', cdk.validateString)(properties.accountPassword));\n    return errors.wrap('supplied properties not correct for \"ServiceAccountCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::DirectoryConfig.ServiceAccountCredentials` resource\n *\n * @param properties - the TypeScript properties of a `ServiceAccountCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::DirectoryConfig.ServiceAccountCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDirectoryConfigServiceAccountCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDirectoryConfig_ServiceAccountCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        AccountName: cdk.stringToCloudFormation(properties.accountName),\n        AccountPassword: cdk.stringToCloudFormation(properties.accountPassword),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDirectoryConfigServiceAccountCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDirectoryConfig.ServiceAccountCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDirectoryConfig.ServiceAccountCredentialsProperty>();\n    ret.addPropertyResult('accountName', 'AccountName', cfn_parse.FromCloudFormation.getString(properties.AccountName));\n    ret.addPropertyResult('accountPassword', 'AccountPassword', cfn_parse.FromCloudFormation.getString(properties.AccountPassword));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnEntitlementProps {\n\n                                                                                                                                                                                                                                                     \n    readonly appVisibility: string;\n\n                                                                                                                                                                                                                        \n    readonly attributes: Array<CfnEntitlement.AttributeProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly name: string;\n\n                                                                                                                                                                                                           \n    readonly stackName: string;\n\n                                                                                                                                                                                                                          \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEntitlementProps`\n *\n * @param properties - the TypeScript properties of a `CfnEntitlementProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEntitlementPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appVisibility', cdk.requiredValidator)(properties.appVisibility));\n    errors.collect(cdk.propertyValidator('appVisibility', cdk.validateString)(properties.appVisibility));\n    errors.collect(cdk.propertyValidator('attributes', cdk.requiredValidator)(properties.attributes));\n    errors.collect(cdk.propertyValidator('attributes', cdk.listValidator(CfnEntitlement_AttributePropertyValidator))(properties.attributes));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('stackName', cdk.requiredValidator)(properties.stackName));\n    errors.collect(cdk.propertyValidator('stackName', cdk.validateString)(properties.stackName));\n    return errors.wrap('supplied properties not correct for \"CfnEntitlementProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Entitlement` resource\n *\n * @param properties - the TypeScript properties of a `CfnEntitlementProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Entitlement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEntitlementPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEntitlementPropsValidator(properties).assertSuccess();\n    return {\n        AppVisibility: cdk.stringToCloudFormation(properties.appVisibility),\n        Attributes: cdk.listMapper(cfnEntitlementAttributePropertyToCloudFormation)(properties.attributes),\n        Name: cdk.stringToCloudFormation(properties.name),\n        StackName: cdk.stringToCloudFormation(properties.stackName),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEntitlementPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEntitlementProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEntitlementProps>();\n    ret.addPropertyResult('appVisibility', 'AppVisibility', cfn_parse.FromCloudFormation.getString(properties.AppVisibility));\n    ret.addPropertyResult('attributes', 'Attributes', cfn_parse.FromCloudFormation.getArray(CfnEntitlementAttributePropertyFromCloudFormation)(properties.Attributes));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('stackName', 'StackName', cfn_parse.FromCloudFormation.getString(properties.StackName));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEntitlement extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::Entitlement\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEntitlement {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEntitlementPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEntitlement(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                             \n    public readonly attrCreatedTime: string;\n\n                                                                                                                        \n    public readonly attrLastModifiedTime: string;\n\n                                                                                                                                                                                                                                                     \n    public appVisibility: string;\n\n                                                                                                                                                                                                                        \n    public attributes: Array<CfnEntitlement.AttributeProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    public name: string;\n\n                                                                                                                                                                                                           \n    public stackName: string;\n\n                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnEntitlementProps) {\n        super(scope, id, { type: CfnEntitlement.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'appVisibility', this);\n        cdk.requireProperty(props, 'attributes', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'stackName', this);\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrLastModifiedTime = cdk.Token.asString(this.getAtt('LastModifiedTime'));\n\n        this.appVisibility = props.appVisibility;\n        this.attributes = props.attributes;\n        this.name = props.name;\n        this.stackName = props.stackName;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEntitlement.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            appVisibility: this.appVisibility,\n            attributes: this.attributes,\n            name: this.name,\n            stackName: this.stackName,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEntitlementPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEntitlement {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface AttributeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AttributeProperty`\n *\n * @param properties - the TypeScript properties of a `AttributeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEntitlement_AttributePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"AttributeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Entitlement.Attribute` resource\n *\n * @param properties - the TypeScript properties of a `AttributeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Entitlement.Attribute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEntitlementAttributePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEntitlement_AttributePropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEntitlementAttributePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEntitlement.AttributeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEntitlement.AttributeProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnFleetProps {\n\nn    readonly instanceType: string;\n\n                                                                                                                                                                                                \n    readonly name: string;\n\n                                                                                                                                                                                                                                                          \n    readonly computeCapacity?: CfnFleet.ComputeCapacityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                      \n    readonly description?: string;\n\nn    readonly disconnectTimeoutInSeconds?: number;\n\n                                                                                                                                                                                                     \n    readonly displayName?: string;\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly domainJoinInfo?: CfnFleet.DomainJoinInfoProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly enableDefaultInternetAccess?: boolean | cdk.IResolvable;\n\nn    readonly fleetType?: string;\n\nn    readonly iamRoleArn?: string;\n\nn    readonly idleDisconnectTimeoutInSeconds?: number;\n\n                                                                                                                                                                                                                               \n    readonly imageArn?: string;\n\n                                                                                                                                                                                                                        \n    readonly imageName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    readonly maxConcurrentSessions?: number;\n\nn    readonly maxUserDurationInSeconds?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                     \n    readonly platform?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly streamView?: string;\n\n                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly usbDeviceFilterStrings?: string[];\n\n                                                                                                                                                                                                                                                                                          \n    readonly vpcConfig?: CfnFleet.VpcConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFleetProps`\n *\n * @param properties - the TypeScript properties of a `CfnFleetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('computeCapacity', CfnFleet_ComputeCapacityPropertyValidator)(properties.computeCapacity));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('disconnectTimeoutInSeconds', cdk.validateNumber)(properties.disconnectTimeoutInSeconds));\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('domainJoinInfo', CfnFleet_DomainJoinInfoPropertyValidator)(properties.domainJoinInfo));\n    errors.collect(cdk.propertyValidator('enableDefaultInternetAccess', cdk.validateBoolean)(properties.enableDefaultInternetAccess));\n    errors.collect(cdk.propertyValidator('fleetType', cdk.validateString)(properties.fleetType));\n    errors.collect(cdk.propertyValidator('iamRoleArn', cdk.validateString)(properties.iamRoleArn));\n    errors.collect(cdk.propertyValidator('idleDisconnectTimeoutInSeconds', cdk.validateNumber)(properties.idleDisconnectTimeoutInSeconds));\n    errors.collect(cdk.propertyValidator('imageArn', cdk.validateString)(properties.imageArn));\n    errors.collect(cdk.propertyValidator('imageName', cdk.validateString)(properties.imageName));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('maxConcurrentSessions', cdk.validateNumber)(properties.maxConcurrentSessions));\n    errors.collect(cdk.propertyValidator('maxUserDurationInSeconds', cdk.validateNumber)(properties.maxUserDurationInSeconds));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('platform', cdk.validateString)(properties.platform));\n    errors.collect(cdk.propertyValidator('streamView', cdk.validateString)(properties.streamView));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('usbDeviceFilterStrings', cdk.listValidator(cdk.validateString))(properties.usbDeviceFilterStrings));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnFleet_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"CfnFleetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Fleet` resource\n *\n * @param properties - the TypeScript properties of a `CfnFleetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Fleet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleetPropsValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ComputeCapacity: cfnFleetComputeCapacityPropertyToCloudFormation(properties.computeCapacity),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisconnectTimeoutInSeconds: cdk.numberToCloudFormation(properties.disconnectTimeoutInSeconds),\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        DomainJoinInfo: cfnFleetDomainJoinInfoPropertyToCloudFormation(properties.domainJoinInfo),\n        EnableDefaultInternetAccess: cdk.booleanToCloudFormation(properties.enableDefaultInternetAccess),\n        FleetType: cdk.stringToCloudFormation(properties.fleetType),\n        IamRoleArn: cdk.stringToCloudFormation(properties.iamRoleArn),\n        IdleDisconnectTimeoutInSeconds: cdk.numberToCloudFormation(properties.idleDisconnectTimeoutInSeconds),\n        ImageArn: cdk.stringToCloudFormation(properties.imageArn),\n        ImageName: cdk.stringToCloudFormation(properties.imageName),\n        MaxConcurrentSessions: cdk.numberToCloudFormation(properties.maxConcurrentSessions),\n        MaxUserDurationInSeconds: cdk.numberToCloudFormation(properties.maxUserDurationInSeconds),\n        Platform: cdk.stringToCloudFormation(properties.platform),\n        StreamView: cdk.stringToCloudFormation(properties.streamView),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UsbDeviceFilterStrings: cdk.listMapper(cdk.stringToCloudFormation)(properties.usbDeviceFilterStrings),\n        VpcConfig: cfnFleetVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleetProps>();\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('computeCapacity', 'ComputeCapacity', properties.ComputeCapacity != null ? CfnFleetComputeCapacityPropertyFromCloudFormation(properties.ComputeCapacity) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('disconnectTimeoutInSeconds', 'DisconnectTimeoutInSeconds', properties.DisconnectTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.DisconnectTimeoutInSeconds) : undefined);\n    ret.addPropertyResult('displayName', 'DisplayName', properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined);\n    ret.addPropertyResult('domainJoinInfo', 'DomainJoinInfo', properties.DomainJoinInfo != null ? CfnFleetDomainJoinInfoPropertyFromCloudFormation(properties.DomainJoinInfo) : undefined);\n    ret.addPropertyResult('enableDefaultInternetAccess', 'EnableDefaultInternetAccess', properties.EnableDefaultInternetAccess != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDefaultInternetAccess) : undefined);\n    ret.addPropertyResult('fleetType', 'FleetType', properties.FleetType != null ? cfn_parse.FromCloudFormation.getString(properties.FleetType) : undefined);\n    ret.addPropertyResult('iamRoleArn', 'IamRoleArn', properties.IamRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.IamRoleArn) : undefined);\n    ret.addPropertyResult('idleDisconnectTimeoutInSeconds', 'IdleDisconnectTimeoutInSeconds', properties.IdleDisconnectTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.IdleDisconnectTimeoutInSeconds) : undefined);\n    ret.addPropertyResult('imageArn', 'ImageArn', properties.ImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.ImageArn) : undefined);\n    ret.addPropertyResult('imageName', 'ImageName', properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined);\n    ret.addPropertyResult('maxConcurrentSessions', 'MaxConcurrentSessions', properties.MaxConcurrentSessions != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentSessions) : undefined);\n    ret.addPropertyResult('maxUserDurationInSeconds', 'MaxUserDurationInSeconds', properties.MaxUserDurationInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxUserDurationInSeconds) : undefined);\n    ret.addPropertyResult('platform', 'Platform', properties.Platform != null ? cfn_parse.FromCloudFormation.getString(properties.Platform) : undefined);\n    ret.addPropertyResult('streamView', 'StreamView', properties.StreamView != null ? cfn_parse.FromCloudFormation.getString(properties.StreamView) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('usbDeviceFilterStrings', 'UsbDeviceFilterStrings', properties.UsbDeviceFilterStrings != null ? cfn_parse.FromCloudFormation.getStringArray(properties.UsbDeviceFilterStrings) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnFleetVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnFleet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::Fleet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFleet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFleetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFleet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public instanceType: string;\n\n                                                                                                                                                                                                \n    public name: string;\n\n                                                                                                                                                                                                                                                          \n    public computeCapacity: CfnFleet.ComputeCapacityProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                      \n    public description: string | undefined;\n\nn    public disconnectTimeoutInSeconds: number | undefined;\n\n                                                                                                                                                                                                     \n    public displayName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public domainJoinInfo: CfnFleet.DomainJoinInfoProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    public enableDefaultInternetAccess: boolean | cdk.IResolvable | undefined;\n\nn    public fleetType: string | undefined;\n\nn    public iamRoleArn: string | undefined;\n\nn    public idleDisconnectTimeoutInSeconds: number | undefined;\n\n                                                                                                                                                                                                                               \n    public imageArn: string | undefined;\n\n                                                                                                                                                                                                                        \n    public imageName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    public maxConcurrentSessions: number | undefined;\n\nn    public maxUserDurationInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                     \n    public platform: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public streamView: string | undefined;\n\n                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n    public usbDeviceFilterStrings: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                          \n    public vpcConfig: CfnFleet.VpcConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnFleetProps) {\n        super(scope, id, { type: CfnFleet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceType', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.instanceType = props.instanceType;\n        this.name = props.name;\n        this.computeCapacity = props.computeCapacity;\n        this.description = props.description;\n        this.disconnectTimeoutInSeconds = props.disconnectTimeoutInSeconds;\n        this.displayName = props.displayName;\n        this.domainJoinInfo = props.domainJoinInfo;\n        this.enableDefaultInternetAccess = props.enableDefaultInternetAccess;\n        this.fleetType = props.fleetType;\n        this.iamRoleArn = props.iamRoleArn;\n        this.idleDisconnectTimeoutInSeconds = props.idleDisconnectTimeoutInSeconds;\n        this.imageArn = props.imageArn;\n        this.imageName = props.imageName;\n        this.maxConcurrentSessions = props.maxConcurrentSessions;\n        this.maxUserDurationInSeconds = props.maxUserDurationInSeconds;\n        this.platform = props.platform;\n        this.streamView = props.streamView;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppStream::Fleet\", props.tags, { tagPropertyName: 'tags' });\n        this.usbDeviceFilterStrings = props.usbDeviceFilterStrings;\n        this.vpcConfig = props.vpcConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFleet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceType: this.instanceType,\n            name: this.name,\n            computeCapacity: this.computeCapacity,\n            description: this.description,\n            disconnectTimeoutInSeconds: this.disconnectTimeoutInSeconds,\n            displayName: this.displayName,\n            domainJoinInfo: this.domainJoinInfo,\n            enableDefaultInternetAccess: this.enableDefaultInternetAccess,\n            fleetType: this.fleetType,\n            iamRoleArn: this.iamRoleArn,\n            idleDisconnectTimeoutInSeconds: this.idleDisconnectTimeoutInSeconds,\n            imageArn: this.imageArn,\n            imageName: this.imageName,\n            maxConcurrentSessions: this.maxConcurrentSessions,\n            maxUserDurationInSeconds: this.maxUserDurationInSeconds,\n            platform: this.platform,\n            streamView: this.streamView,\n            tags: this.tags.renderTags(),\n            usbDeviceFilterStrings: this.usbDeviceFilterStrings,\n            vpcConfig: this.vpcConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFleetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFleet {\n                                                                                                                                                                                                                                               \n    export interface ComputeCapacityProperty {\n                                                                                                                                                                                                                                                                                \n        readonly desiredInstances: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComputeCapacityProperty`\n *\n * @param properties - the TypeScript properties of a `ComputeCapacityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_ComputeCapacityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('desiredInstances', cdk.requiredValidator)(properties.desiredInstances));\n    errors.collect(cdk.propertyValidator('desiredInstances', cdk.validateNumber)(properties.desiredInstances));\n    return errors.wrap('supplied properties not correct for \"ComputeCapacityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Fleet.ComputeCapacity` resource\n *\n * @param properties - the TypeScript properties of a `ComputeCapacityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Fleet.ComputeCapacity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetComputeCapacityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_ComputeCapacityPropertyValidator(properties).assertSuccess();\n    return {\n        DesiredInstances: cdk.numberToCloudFormation(properties.desiredInstances),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetComputeCapacityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.ComputeCapacityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.ComputeCapacityProperty>();\n    ret.addPropertyResult('desiredInstances', 'DesiredInstances', cfn_parse.FromCloudFormation.getNumber(properties.DesiredInstances));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface DomainJoinInfoProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly directoryName?: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly organizationalUnitDistinguishedName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DomainJoinInfoProperty`\n *\n * @param properties - the TypeScript properties of a `DomainJoinInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_DomainJoinInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryName', cdk.validateString)(properties.directoryName));\n    errors.collect(cdk.propertyValidator('organizationalUnitDistinguishedName', cdk.validateString)(properties.organizationalUnitDistinguishedName));\n    return errors.wrap('supplied properties not correct for \"DomainJoinInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Fleet.DomainJoinInfo` resource\n *\n * @param properties - the TypeScript properties of a `DomainJoinInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Fleet.DomainJoinInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetDomainJoinInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_DomainJoinInfoPropertyValidator(properties).assertSuccess();\n    return {\n        DirectoryName: cdk.stringToCloudFormation(properties.directoryName),\n        OrganizationalUnitDistinguishedName: cdk.stringToCloudFormation(properties.organizationalUnitDistinguishedName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetDomainJoinInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.DomainJoinInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.DomainJoinInfoProperty>();\n    ret.addPropertyResult('directoryName', 'DirectoryName', properties.DirectoryName != null ? cfn_parse.FromCloudFormation.getString(properties.DirectoryName) : undefined);\n    ret.addPropertyResult('organizationalUnitDistinguishedName', 'OrganizationalUnitDistinguishedName', properties.OrganizationalUnitDistinguishedName != null ? cfn_parse.FromCloudFormation.getString(properties.OrganizationalUnitDistinguishedName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\n                                                                                                                                                                                                                                                        \n    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                               \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly subnetIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Fleet.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Fleet.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnImageBuilderProps {\n\nn    readonly instanceType: string;\n\n                                                                                                                                                                                                                      \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly accessEndpoints?: Array<CfnImageBuilder.AccessEndpointProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly appstreamAgentVersion?: string;\n\n                                                                                                                                                                                                                    \n    readonly description?: string;\n\n                                                                                                                                                                                                                           \n    readonly displayName?: string;\n\n                                                                                                                                                                                                                                                                                                                           \n    readonly domainJoinInfo?: CfnImageBuilder.DomainJoinInfoProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                           \n    readonly enableDefaultInternetAccess?: boolean | cdk.IResolvable;\n\nn    readonly iamRoleArn?: string;\n\n                                                                                                                                                                                                                                             \n    readonly imageArn?: string;\n\n                                                                                                                                                                                                                                              \n    readonly imageName?: string;\n\n                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                    \n    readonly vpcConfig?: CfnImageBuilder.VpcConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnImageBuilderProps`\n *\n * @param properties - the TypeScript properties of a `CfnImageBuilderProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageBuilderPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessEndpoints', cdk.listValidator(CfnImageBuilder_AccessEndpointPropertyValidator))(properties.accessEndpoints));\n    errors.collect(cdk.propertyValidator('appstreamAgentVersion', cdk.validateString)(properties.appstreamAgentVersion));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('domainJoinInfo', CfnImageBuilder_DomainJoinInfoPropertyValidator)(properties.domainJoinInfo));\n    errors.collect(cdk.propertyValidator('enableDefaultInternetAccess', cdk.validateBoolean)(properties.enableDefaultInternetAccess));\n    errors.collect(cdk.propertyValidator('iamRoleArn', cdk.validateString)(properties.iamRoleArn));\n    errors.collect(cdk.propertyValidator('imageArn', cdk.validateString)(properties.imageArn));\n    errors.collect(cdk.propertyValidator('imageName', cdk.validateString)(properties.imageName));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnImageBuilder_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"CfnImageBuilderProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder` resource\n *\n * @param properties - the TypeScript properties of a `CfnImageBuilderProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageBuilderPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageBuilderPropsValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        AccessEndpoints: cdk.listMapper(cfnImageBuilderAccessEndpointPropertyToCloudFormation)(properties.accessEndpoints),\n        AppstreamAgentVersion: cdk.stringToCloudFormation(properties.appstreamAgentVersion),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        DomainJoinInfo: cfnImageBuilderDomainJoinInfoPropertyToCloudFormation(properties.domainJoinInfo),\n        EnableDefaultInternetAccess: cdk.booleanToCloudFormation(properties.enableDefaultInternetAccess),\n        IamRoleArn: cdk.stringToCloudFormation(properties.iamRoleArn),\n        ImageArn: cdk.stringToCloudFormation(properties.imageArn),\n        ImageName: cdk.stringToCloudFormation(properties.imageName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcConfig: cfnImageBuilderVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageBuilderPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageBuilderProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageBuilderProps>();\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('accessEndpoints', 'AccessEndpoints', properties.AccessEndpoints != null ? cfn_parse.FromCloudFormation.getArray(CfnImageBuilderAccessEndpointPropertyFromCloudFormation)(properties.AccessEndpoints) : undefined);\n    ret.addPropertyResult('appstreamAgentVersion', 'AppstreamAgentVersion', properties.AppstreamAgentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.AppstreamAgentVersion) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('displayName', 'DisplayName', properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined);\n    ret.addPropertyResult('domainJoinInfo', 'DomainJoinInfo', properties.DomainJoinInfo != null ? CfnImageBuilderDomainJoinInfoPropertyFromCloudFormation(properties.DomainJoinInfo) : undefined);\n    ret.addPropertyResult('enableDefaultInternetAccess', 'EnableDefaultInternetAccess', properties.EnableDefaultInternetAccess != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDefaultInternetAccess) : undefined);\n    ret.addPropertyResult('iamRoleArn', 'IamRoleArn', properties.IamRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.IamRoleArn) : undefined);\n    ret.addPropertyResult('imageArn', 'ImageArn', properties.ImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.ImageArn) : undefined);\n    ret.addPropertyResult('imageName', 'ImageName', properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnImageBuilderVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnImageBuilder extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::ImageBuilder\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImageBuilder {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnImageBuilderPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnImageBuilder(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                              \n    public readonly attrStreamingUrl: string;\n\nn    public instanceType: string;\n\n                                                                                                                                                                                                                      \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public accessEndpoints: Array<CfnImageBuilder.AccessEndpointProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public appstreamAgentVersion: string | undefined;\n\n                                                                                                                                                                                                                    \n    public description: string | undefined;\n\n                                                                                                                                                                                                                           \n    public displayName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                           \n    public domainJoinInfo: CfnImageBuilder.DomainJoinInfoProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                           \n    public enableDefaultInternetAccess: boolean | cdk.IResolvable | undefined;\n\nn    public iamRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                             \n    public imageArn: string | undefined;\n\n                                                                                                                                                                                                                                              \n    public imageName: string | undefined;\n\n                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                    \n    public vpcConfig: CfnImageBuilder.VpcConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnImageBuilderProps) {\n        super(scope, id, { type: CfnImageBuilder.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceType', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrStreamingUrl = cdk.Token.asString(this.getAtt('StreamingUrl'));\n\n        this.instanceType = props.instanceType;\n        this.name = props.name;\n        this.accessEndpoints = props.accessEndpoints;\n        this.appstreamAgentVersion = props.appstreamAgentVersion;\n        this.description = props.description;\n        this.displayName = props.displayName;\n        this.domainJoinInfo = props.domainJoinInfo;\n        this.enableDefaultInternetAccess = props.enableDefaultInternetAccess;\n        this.iamRoleArn = props.iamRoleArn;\n        this.imageArn = props.imageArn;\n        this.imageName = props.imageName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppStream::ImageBuilder\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcConfig = props.vpcConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnImageBuilder.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceType: this.instanceType,\n            name: this.name,\n            accessEndpoints: this.accessEndpoints,\n            appstreamAgentVersion: this.appstreamAgentVersion,\n            description: this.description,\n            displayName: this.displayName,\n            domainJoinInfo: this.domainJoinInfo,\n            enableDefaultInternetAccess: this.enableDefaultInternetAccess,\n            iamRoleArn: this.iamRoleArn,\n            imageArn: this.imageArn,\n            imageName: this.imageName,\n            tags: this.tags.renderTags(),\n            vpcConfig: this.vpcConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnImageBuilderPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnImageBuilder {\nn    export interface AccessEndpointProperty {\n                                                                                                                                                                                                                                                                             \n        readonly endpointType: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly vpceId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessEndpointProperty`\n *\n * @param properties - the TypeScript properties of a `AccessEndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageBuilder_AccessEndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointType', cdk.requiredValidator)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('vpceId', cdk.requiredValidator)(properties.vpceId));\n    errors.collect(cdk.propertyValidator('vpceId', cdk.validateString)(properties.vpceId));\n    return errors.wrap('supplied properties not correct for \"AccessEndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder.AccessEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `AccessEndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder.AccessEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageBuilderAccessEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageBuilder_AccessEndpointPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        VpceId: cdk.stringToCloudFormation(properties.vpceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageBuilderAccessEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageBuilder.AccessEndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageBuilder.AccessEndpointProperty>();\n    ret.addPropertyResult('endpointType', 'EndpointType', cfn_parse.FromCloudFormation.getString(properties.EndpointType));\n    ret.addPropertyResult('vpceId', 'VpceId', cfn_parse.FromCloudFormation.getString(properties.VpceId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageBuilder {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface DomainJoinInfoProperty {\n                                                                                                                                                                                                                                                                                                                         \n        readonly directoryName?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly organizationalUnitDistinguishedName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DomainJoinInfoProperty`\n *\n * @param properties - the TypeScript properties of a `DomainJoinInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageBuilder_DomainJoinInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryName', cdk.validateString)(properties.directoryName));\n    errors.collect(cdk.propertyValidator('organizationalUnitDistinguishedName', cdk.validateString)(properties.organizationalUnitDistinguishedName));\n    return errors.wrap('supplied properties not correct for \"DomainJoinInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder.DomainJoinInfo` resource\n *\n * @param properties - the TypeScript properties of a `DomainJoinInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder.DomainJoinInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageBuilderDomainJoinInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageBuilder_DomainJoinInfoPropertyValidator(properties).assertSuccess();\n    return {\n        DirectoryName: cdk.stringToCloudFormation(properties.directoryName),\n        OrganizationalUnitDistinguishedName: cdk.stringToCloudFormation(properties.organizationalUnitDistinguishedName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageBuilderDomainJoinInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageBuilder.DomainJoinInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageBuilder.DomainJoinInfoProperty>();\n    ret.addPropertyResult('directoryName', 'DirectoryName', properties.DirectoryName != null ? cfn_parse.FromCloudFormation.getString(properties.DirectoryName) : undefined);\n    ret.addPropertyResult('organizationalUnitDistinguishedName', 'OrganizationalUnitDistinguishedName', properties.OrganizationalUnitDistinguishedName != null ? cfn_parse.FromCloudFormation.getString(properties.OrganizationalUnitDistinguishedName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageBuilder {\n                                                                                                                                                                                                                                                           \n    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly subnetIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageBuilder_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::ImageBuilder.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageBuilderVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageBuilder_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageBuilderVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageBuilder.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageBuilder.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnStackProps {\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly accessEndpoints?: Array<CfnStack.AccessEndpointProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly applicationSettings?: CfnStack.ApplicationSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    readonly attributesToDelete?: string[];\n\n                                                                                                                                                                                                                                                                                                          \n    readonly deleteStorageConnectors?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                     \n    readonly displayName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly embedHostDomains?: string[];\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly feedbackUrl?: string;\n\n                                                                                                                                                                                          \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                   \n    readonly redirectUrl?: string;\n\n                                                                                                                                                                                                                  \n    readonly storageConnectors?: Array<CfnStack.StorageConnectorProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                      \n    readonly userSettings?: Array<CfnStack.UserSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStackProps`\n *\n * @param properties - the TypeScript properties of a `CfnStackProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessEndpoints', cdk.listValidator(CfnStack_AccessEndpointPropertyValidator))(properties.accessEndpoints));\n    errors.collect(cdk.propertyValidator('applicationSettings', CfnStack_ApplicationSettingsPropertyValidator)(properties.applicationSettings));\n    errors.collect(cdk.propertyValidator('attributesToDelete', cdk.listValidator(cdk.validateString))(properties.attributesToDelete));\n    errors.collect(cdk.propertyValidator('deleteStorageConnectors', cdk.validateBoolean)(properties.deleteStorageConnectors));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('embedHostDomains', cdk.listValidator(cdk.validateString))(properties.embedHostDomains));\n    errors.collect(cdk.propertyValidator('feedbackUrl', cdk.validateString)(properties.feedbackUrl));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('redirectUrl', cdk.validateString)(properties.redirectUrl));\n    errors.collect(cdk.propertyValidator('storageConnectors', cdk.listValidator(CfnStack_StorageConnectorPropertyValidator))(properties.storageConnectors));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userSettings', cdk.listValidator(CfnStack_UserSettingPropertyValidator))(properties.userSettings));\n    return errors.wrap('supplied properties not correct for \"CfnStackProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Stack` resource\n *\n * @param properties - the TypeScript properties of a `CfnStackProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Stack` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackPropsValidator(properties).assertSuccess();\n    return {\n        AccessEndpoints: cdk.listMapper(cfnStackAccessEndpointPropertyToCloudFormation)(properties.accessEndpoints),\n        ApplicationSettings: cfnStackApplicationSettingsPropertyToCloudFormation(properties.applicationSettings),\n        AttributesToDelete: cdk.listMapper(cdk.stringToCloudFormation)(properties.attributesToDelete),\n        DeleteStorageConnectors: cdk.booleanToCloudFormation(properties.deleteStorageConnectors),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        EmbedHostDomains: cdk.listMapper(cdk.stringToCloudFormation)(properties.embedHostDomains),\n        FeedbackURL: cdk.stringToCloudFormation(properties.feedbackUrl),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RedirectURL: cdk.stringToCloudFormation(properties.redirectUrl),\n        StorageConnectors: cdk.listMapper(cfnStackStorageConnectorPropertyToCloudFormation)(properties.storageConnectors),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UserSettings: cdk.listMapper(cfnStackUserSettingPropertyToCloudFormation)(properties.userSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackProps>();\n    ret.addPropertyResult('accessEndpoints', 'AccessEndpoints', properties.AccessEndpoints != null ? cfn_parse.FromCloudFormation.getArray(CfnStackAccessEndpointPropertyFromCloudFormation)(properties.AccessEndpoints) : undefined);\n    ret.addPropertyResult('applicationSettings', 'ApplicationSettings', properties.ApplicationSettings != null ? CfnStackApplicationSettingsPropertyFromCloudFormation(properties.ApplicationSettings) : undefined);\n    ret.addPropertyResult('attributesToDelete', 'AttributesToDelete', properties.AttributesToDelete != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AttributesToDelete) : undefined);\n    ret.addPropertyResult('deleteStorageConnectors', 'DeleteStorageConnectors', properties.DeleteStorageConnectors != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteStorageConnectors) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('displayName', 'DisplayName', properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined);\n    ret.addPropertyResult('embedHostDomains', 'EmbedHostDomains', properties.EmbedHostDomains != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EmbedHostDomains) : undefined);\n    ret.addPropertyResult('feedbackUrl', 'FeedbackURL', properties.FeedbackURL != null ? cfn_parse.FromCloudFormation.getString(properties.FeedbackURL) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('redirectUrl', 'RedirectURL', properties.RedirectURL != null ? cfn_parse.FromCloudFormation.getString(properties.RedirectURL) : undefined);\n    ret.addPropertyResult('storageConnectors', 'StorageConnectors', properties.StorageConnectors != null ? cfn_parse.FromCloudFormation.getArray(CfnStackStorageConnectorPropertyFromCloudFormation)(properties.StorageConnectors) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('userSettings', 'UserSettings', properties.UserSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnStackUserSettingPropertyFromCloudFormation)(properties.UserSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnStack extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::Stack\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStack {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStackPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStack(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                        \n    public accessEndpoints: Array<CfnStack.AccessEndpointProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public applicationSettings: CfnStack.ApplicationSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                 \n    public attributesToDelete: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                          \n    public deleteStorageConnectors: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                     \n    public displayName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public embedHostDomains: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public feedbackUrl: string | undefined;\n\n                                                                                                                                                                                          \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                   \n    public redirectUrl: string | undefined;\n\n                                                                                                                                                                                                                  \n    public storageConnectors: Array<CfnStack.StorageConnectorProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                      \n    public userSettings: Array<CfnStack.UserSettingProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnStackProps = {}) {\n        super(scope, id, { type: CfnStack.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.accessEndpoints = props.accessEndpoints;\n        this.applicationSettings = props.applicationSettings;\n        this.attributesToDelete = props.attributesToDelete;\n        this.deleteStorageConnectors = props.deleteStorageConnectors;\n        this.description = props.description;\n        this.displayName = props.displayName;\n        this.embedHostDomains = props.embedHostDomains;\n        this.feedbackUrl = props.feedbackUrl;\n        this.name = props.name;\n        this.redirectUrl = props.redirectUrl;\n        this.storageConnectors = props.storageConnectors;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::AppStream::Stack\", props.tags, { tagPropertyName: 'tags' });\n        this.userSettings = props.userSettings;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStack.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            accessEndpoints: this.accessEndpoints,\n            applicationSettings: this.applicationSettings,\n            attributesToDelete: this.attributesToDelete,\n            deleteStorageConnectors: this.deleteStorageConnectors,\n            description: this.description,\n            displayName: this.displayName,\n            embedHostDomains: this.embedHostDomains,\n            feedbackUrl: this.feedbackUrl,\n            name: this.name,\n            redirectUrl: this.redirectUrl,\n            storageConnectors: this.storageConnectors,\n            tags: this.tags.renderTags(),\n            userSettings: this.userSettings,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStackPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStack {\nn    export interface AccessEndpointProperty {\n                                                                                                                                                                                                                                                               \n        readonly endpointType: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly vpceId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessEndpointProperty`\n *\n * @param properties - the TypeScript properties of a `AccessEndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStack_AccessEndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointType', cdk.requiredValidator)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('vpceId', cdk.requiredValidator)(properties.vpceId));\n    errors.collect(cdk.propertyValidator('vpceId', cdk.validateString)(properties.vpceId));\n    return errors.wrap('supplied properties not correct for \"AccessEndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Stack.AccessEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `AccessEndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Stack.AccessEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackAccessEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStack_AccessEndpointPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        VpceId: cdk.stringToCloudFormation(properties.vpceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackAccessEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStack.AccessEndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStack.AccessEndpointProperty>();\n    ret.addPropertyResult('endpointType', 'EndpointType', cfn_parse.FromCloudFormation.getString(properties.EndpointType));\n    ret.addPropertyResult('vpceId', 'VpceId', cfn_parse.FromCloudFormation.getString(properties.VpceId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStack {\n                                                                                                                                                                                                                                                                           \n    export interface ApplicationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly enabled: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly settingsGroup?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApplicationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ApplicationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStack_ApplicationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('settingsGroup', cdk.validateString)(properties.settingsGroup));\n    return errors.wrap('supplied properties not correct for \"ApplicationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Stack.ApplicationSettings` resource\n *\n * @param properties - the TypeScript properties of a `ApplicationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Stack.ApplicationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackApplicationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStack_ApplicationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        SettingsGroup: cdk.stringToCloudFormation(properties.settingsGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackApplicationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStack.ApplicationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStack.ApplicationSettingsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('settingsGroup', 'SettingsGroup', properties.SettingsGroup != null ? cfn_parse.FromCloudFormation.getString(properties.SettingsGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStack {\n                                                                                                                                                                                                                                                                     \n    export interface StorageConnectorProperty {\n                                                                                                                                                                                                                                                                   \n        readonly connectorType: string;\n                                                                                                                                                                                                                                                                        \n        readonly domains?: string[];\n                                                                                                                                                                                                                                                                           \n        readonly resourceIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StorageConnectorProperty`\n *\n * @param properties - the TypeScript properties of a `StorageConnectorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStack_StorageConnectorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectorType', cdk.requiredValidator)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('connectorType', cdk.validateString)(properties.connectorType));\n    errors.collect(cdk.propertyValidator('domains', cdk.listValidator(cdk.validateString))(properties.domains));\n    errors.collect(cdk.propertyValidator('resourceIdentifier', cdk.validateString)(properties.resourceIdentifier));\n    return errors.wrap('supplied properties not correct for \"StorageConnectorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Stack.StorageConnector` resource\n *\n * @param properties - the TypeScript properties of a `StorageConnectorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Stack.StorageConnector` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackStorageConnectorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStack_StorageConnectorPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectorType: cdk.stringToCloudFormation(properties.connectorType),\n        Domains: cdk.listMapper(cdk.stringToCloudFormation)(properties.domains),\n        ResourceIdentifier: cdk.stringToCloudFormation(properties.resourceIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackStorageConnectorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStack.StorageConnectorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStack.StorageConnectorProperty>();\n    ret.addPropertyResult('connectorType', 'ConnectorType', cfn_parse.FromCloudFormation.getString(properties.ConnectorType));\n    ret.addPropertyResult('domains', 'Domains', properties.Domains != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Domains) : undefined);\n    ret.addPropertyResult('resourceIdentifier', 'ResourceIdentifier', properties.ResourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStack {\n                                                                                                                                                                                                                                                                                                                      \n    export interface UserSettingProperty {\n                                                                                                                                                                                                                                                           \n        readonly action: string;\n                                                                                                                                                                                                                                                                            \n        readonly permission: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserSettingProperty`\n *\n * @param properties - the TypeScript properties of a `UserSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStack_UserSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('permission', cdk.requiredValidator)(properties.permission));\n    errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));\n    return errors.wrap('supplied properties not correct for \"UserSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::Stack.UserSetting` resource\n *\n * @param properties - the TypeScript properties of a `UserSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::Stack.UserSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackUserSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStack_UserSettingPropertyValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n        Permission: cdk.stringToCloudFormation(properties.permission),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackUserSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStack.UserSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStack.UserSettingProperty>();\n    ret.addPropertyResult('action', 'Action', cfn_parse.FromCloudFormation.getString(properties.Action));\n    ret.addPropertyResult('permission', 'Permission', cfn_parse.FromCloudFormation.getString(properties.Permission));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                \nexport interface CfnStackFleetAssociationProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly fleetName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly stackName: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStackFleetAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnStackFleetAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackFleetAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fleetName', cdk.requiredValidator)(properties.fleetName));\n    errors.collect(cdk.propertyValidator('fleetName', cdk.validateString)(properties.fleetName));\n    errors.collect(cdk.propertyValidator('stackName', cdk.requiredValidator)(properties.stackName));\n    errors.collect(cdk.propertyValidator('stackName', cdk.validateString)(properties.stackName));\n    return errors.wrap('supplied properties not correct for \"CfnStackFleetAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::StackFleetAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnStackFleetAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::StackFleetAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackFleetAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackFleetAssociationPropsValidator(properties).assertSuccess();\n    return {\n        FleetName: cdk.stringToCloudFormation(properties.fleetName),\n        StackName: cdk.stringToCloudFormation(properties.stackName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackFleetAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackFleetAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackFleetAssociationProps>();\n    ret.addPropertyResult('fleetName', 'FleetName', cfn_parse.FromCloudFormation.getString(properties.FleetName));\n    ret.addPropertyResult('stackName', 'StackName', cfn_parse.FromCloudFormation.getString(properties.StackName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnStackFleetAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::StackFleetAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStackFleetAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStackFleetAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStackFleetAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public fleetName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public stackName: string;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnStackFleetAssociationProps) {\n        super(scope, id, { type: CfnStackFleetAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'fleetName', this);\n        cdk.requireProperty(props, 'stackName', this);\n\n        this.fleetName = props.fleetName;\n        this.stackName = props.stackName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStackFleetAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            fleetName: this.fleetName,\n            stackName: this.stackName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStackFleetAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                              \nexport interface CfnStackUserAssociationProps {\n\n                                                                                                                                                                                                                                                                                                                 \n    readonly authenticationType: string;\n\n                                                                                                                                                                                                                                                              \n    readonly stackName: string;\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly userName: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly sendEmailNotification?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStackUserAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnStackUserAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackUserAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authenticationType', cdk.requiredValidator)(properties.authenticationType));\n    errors.collect(cdk.propertyValidator('authenticationType', cdk.validateString)(properties.authenticationType));\n    errors.collect(cdk.propertyValidator('sendEmailNotification', cdk.validateBoolean)(properties.sendEmailNotification));\n    errors.collect(cdk.propertyValidator('stackName', cdk.requiredValidator)(properties.stackName));\n    errors.collect(cdk.propertyValidator('stackName', cdk.validateString)(properties.stackName));\n    errors.collect(cdk.propertyValidator('userName', cdk.requiredValidator)(properties.userName));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnStackUserAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::StackUserAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnStackUserAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::StackUserAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackUserAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackUserAssociationPropsValidator(properties).assertSuccess();\n    return {\n        AuthenticationType: cdk.stringToCloudFormation(properties.authenticationType),\n        StackName: cdk.stringToCloudFormation(properties.stackName),\n        UserName: cdk.stringToCloudFormation(properties.userName),\n        SendEmailNotification: cdk.booleanToCloudFormation(properties.sendEmailNotification),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackUserAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackUserAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackUserAssociationProps>();\n    ret.addPropertyResult('authenticationType', 'AuthenticationType', cfn_parse.FromCloudFormation.getString(properties.AuthenticationType));\n    ret.addPropertyResult('stackName', 'StackName', cfn_parse.FromCloudFormation.getString(properties.StackName));\n    ret.addPropertyResult('userName', 'UserName', cfn_parse.FromCloudFormation.getString(properties.UserName));\n    ret.addPropertyResult('sendEmailNotification', 'SendEmailNotification', properties.SendEmailNotification != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SendEmailNotification) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStackUserAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::StackUserAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStackUserAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStackUserAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStackUserAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                 \n    public authenticationType: string;\n\n                                                                                                                                                                                                                                                              \n    public stackName: string;\n\n                                                                                                                                                                                                                                                                                                                                \n    public userName: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    public sendEmailNotification: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnStackUserAssociationProps) {\n        super(scope, id, { type: CfnStackUserAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authenticationType', this);\n        cdk.requireProperty(props, 'stackName', this);\n        cdk.requireProperty(props, 'userName', this);\n\n        this.authenticationType = props.authenticationType;\n        this.stackName = props.stackName;\n        this.userName = props.userName;\n        this.sendEmailNotification = props.sendEmailNotification;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStackUserAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authenticationType: this.authenticationType,\n            stackName: this.stackName,\n            userName: this.userName,\n            sendEmailNotification: this.sendEmailNotification,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStackUserAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                              \nexport interface CfnUserProps {\n\n                                                                                                                                                                                                                                                \n    readonly authenticationType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly userName: string;\n\n                                                                                                                                                                                                                  \n    readonly firstName?: string;\n\n                                                                                                                                                                                                             \n    readonly lastName?: string;\n\nn    readonly messageAction?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authenticationType', cdk.requiredValidator)(properties.authenticationType));\n    errors.collect(cdk.propertyValidator('authenticationType', cdk.validateString)(properties.authenticationType));\n    errors.collect(cdk.propertyValidator('firstName', cdk.validateString)(properties.firstName));\n    errors.collect(cdk.propertyValidator('lastName', cdk.validateString)(properties.lastName));\n    errors.collect(cdk.propertyValidator('messageAction', cdk.validateString)(properties.messageAction));\n    errors.collect(cdk.propertyValidator('userName', cdk.requiredValidator)(properties.userName));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::AppStream::User` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::AppStream::User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPropsValidator(properties).assertSuccess();\n    return {\n        AuthenticationType: cdk.stringToCloudFormation(properties.authenticationType),\n        UserName: cdk.stringToCloudFormation(properties.userName),\n        FirstName: cdk.stringToCloudFormation(properties.firstName),\n        LastName: cdk.stringToCloudFormation(properties.lastName),\n        MessageAction: cdk.stringToCloudFormation(properties.messageAction),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();\n    ret.addPropertyResult('authenticationType', 'AuthenticationType', cfn_parse.FromCloudFormation.getString(properties.AuthenticationType));\n    ret.addPropertyResult('userName', 'UserName', cfn_parse.FromCloudFormation.getString(properties.UserName));\n    ret.addPropertyResult('firstName', 'FirstName', properties.FirstName != null ? cfn_parse.FromCloudFormation.getString(properties.FirstName) : undefined);\n    ret.addPropertyResult('lastName', 'LastName', properties.LastName != null ? cfn_parse.FromCloudFormation.getString(properties.LastName) : undefined);\n    ret.addPropertyResult('messageAction', 'MessageAction', properties.MessageAction != null ? cfn_parse.FromCloudFormation.getString(properties.MessageAction) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                    \nexport class CfnUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::AppStream::User\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                \n    public authenticationType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public userName: string;\n\n                                                                                                                                                                                                                  \n    public firstName: string | undefined;\n\n                                                                                                                                                                                                             \n    public lastName: string | undefined;\n\nn    public messageAction: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProps) {\n        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authenticationType', this);\n        cdk.requireProperty(props, 'userName', this);\n\n        this.authenticationType = props.authenticationType;\n        this.userName = props.userName;\n        this.firstName = props.firstName;\n        this.lastName = props.lastName;\n        this.messageAction = props.messageAction;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authenticationType: this.authenticationType,\n            userName: this.userName,\n            firstName: this.firstName,\n            lastName: this.lastName,\n            messageAction: this.messageAction,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
