{
  "version": 3,
  "sources": ["target-tracking-scaling-policy.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport { Duration } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAutoScalingGroup } from './auto-scaling-group';\nimport { CfnScalingPolicy } from './autoscaling.generated';\n\n                                                                                                                                                                                                                                                                                   \nexport interface BaseTargetTrackingProps {\n                                                                                                                                                                                                                                                                                                                                                                      \n  readonly disableScaleIn?: boolean;\n\n                                                                                                                                                                          \n  readonly cooldown?: Duration;\n\n                                                                                                                                          \n  readonly estimatedInstanceWarmup?: Duration;\n}\n\n                                                                                                 \nexport interface BasicTargetTrackingScalingPolicyProps extends BaseTargetTrackingProps {\n                                                 \n  readonly targetValue: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n  readonly predefinedMetric?: PredefinedMetric;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n  readonly customMetric?: cloudwatch.IMetric;\n\n                                                                                                                                                                                                                                                                                                                                           \n  readonly resourceLabel?: string;\n}\n\n                                                                                       \nexport interface TargetTrackingScalingPolicyProps extends BasicTargetTrackingScalingPolicyProps {\n                                      \n  readonly autoScalingGroup: IAutoScalingGroup;\n}\n\nexport class TargetTrackingScalingPolicy extends Construct {\n                                          \n  public readonly scalingPolicyArn: string;\n\n  /**\n   * The resource object\n   */\n  private resource: CfnScalingPolicy;\n\n  constructor(scope: Construct, id: string, props: TargetTrackingScalingPolicyProps) {\n    if ((props.customMetric === undefined) === (props.predefinedMetric === undefined)) {\n      throw new Error('Exactly one of \\'customMetric\\' or \\'predefinedMetric\\' must be specified.');\n    }\n\n    if (props.predefinedMetric === PredefinedMetric.ALB_REQUEST_COUNT_PER_TARGET && !props.resourceLabel) {\n      throw new Error('When tracking the ALBRequestCountPerTarget metric, the ALB identifier must be supplied in resourceLabel');\n    }\n\n    if (props.customMetric && !props.customMetric.toMetricConfig().metricStat) {\n      throw new Error('Only direct metrics are supported for Target Tracking. Use Step Scaling or supply a Metric object.');\n    }\n\n    super(scope, id);\n\n    this.resource = new CfnScalingPolicy(this, 'Resource', {\n      policyType: 'TargetTrackingScaling',\n      autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,\n      cooldown: props.cooldown && props.cooldown.toSeconds().toString(),\n      estimatedInstanceWarmup: props.estimatedInstanceWarmup && props.estimatedInstanceWarmup.toSeconds(),\n      targetTrackingConfiguration: {\n        customizedMetricSpecification: renderCustomMetric(props.customMetric),\n        disableScaleIn: props.disableScaleIn,\n        predefinedMetricSpecification: props.predefinedMetric !== undefined ? {\n          predefinedMetricType: props.predefinedMetric,\n          resourceLabel: props.resourceLabel,\n        } : undefined,\n        targetValue: props.targetValue,\n      },\n    });\n\n    this.scalingPolicyArn = this.resource.ref;\n  }\n}\n\nfunction renderCustomMetric(metric?: cloudwatch.IMetric): CfnScalingPolicy.CustomizedMetricSpecificationProperty | undefined {\n  if (!metric) { return undefined; }\n  const c = metric.toMetricConfig().metricStat!;\n\n  return {\n    dimensions: c.dimensions,\n    metricName: c.metricName,\n    namespace: c.namespace,\n    statistic: c.statistic,\n    unit: c.unitFilter,\n  };\n}\n\n                                                    \nexport enum PredefinedMetric {\n                                                                  \n  ASG_AVERAGE_CPU_UTILIZATION = 'ASGAverageCPUUtilization',\n\n                                                                                                     \n  ASG_AVERAGE_NETWORK_IN = 'ASGAverageNetworkIn',\n\n                                                                                                     \n  ASG_AVERAGE_NETWORK_OUT = 'ASGAverageNetworkOut',\n\n                                                                                                                                                                        \n  ALB_REQUEST_COUNT_PER_TARGET = 'ALBRequestCountPerTarget',\n}\n"],
  "mappings": "2PAEA,aAAA,QAAA,cAEA,wBAAA,QAAA,2BAmCA,yCAAiD,cAAA,SAAS,CASxD,YAAY,MAAkB,GAAY,MAAuC,CAC/E,+FAAK,MAAM,eAAiB,QAAgB,OAAM,mBAAqB,QACrE,KAAM,IAAI,OAAM,0EAGlB,GAAI,MAAM,mBAAqB,iBAAiB,8BAAgC,CAAC,MAAM,cACrF,KAAM,IAAI,OAAM,2GAGlB,GAAI,MAAM,cAAgB,CAAC,MAAM,aAAa,iBAAiB,WAC7D,KAAM,IAAI,OAAM,sGAGlB,MAAM,MAAO,IAEb,KAAK,SAAW,GAAI,yBAAA,iBAAiB,KAAM,WAAY,CACrD,WAAY,wBACZ,qBAAsB,MAAM,iBAAiB,qBAC7C,SAAU,MAAM,UAAY,MAAM,SAAS,YAAY,WACvD,wBAAyB,MAAM,yBAA2B,MAAM,wBAAwB,YACxF,4BAA6B,CAC3B,8BAA+B,mBAAmB,MAAM,cACxD,eAAgB,MAAM,eACtB,8BAA+B,MAAM,mBAAqB,OAAY,CACpE,qBAAsB,MAAM,iBAC5B,cAAe,MAAM,eACnB,OACJ,YAAa,MAAM,eAIvB,KAAK,iBAAmB,KAAK,SAAS,KAxC1C,QAAA,4BAAA,mKA4CA,4BAA4B,OAA2B,CACrD,GAAI,CAAC,OAAU,OACf,KAAM,GAAI,OAAO,iBAAiB,WAElC,MAAO,CACL,WAAY,EAAE,WACd,WAAY,EAAE,WACd,UAAW,EAAE,UACb,UAAW,EAAE,UACb,KAAM,EAAE,YAKZ,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAE1B,kBAAA,4BAAA,2BAGA,kBAAA,uBAAA,sBAGA,kBAAA,wBAAA,uBAGA,kBAAA,6BAAA,6BAXU,iBAAA,QAAA,kBAAA,SAAA,iBAAgB",
  "names": []
}
