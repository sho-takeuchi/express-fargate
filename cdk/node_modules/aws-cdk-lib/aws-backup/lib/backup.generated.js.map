{
  "version": 3,
  "sources": ["backup.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:07:12.233Z\",\"fingerprint\":\"fPGNlGow++VTpgO9KxzyLvNp0uIRutzaZlKHP8gh1kU=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                       \nexport interface CfnBackupPlanProps {\n\n                                                                                                                                                                                                                                                                   \n    readonly backupPlan: CfnBackupPlan.BackupPlanResourceTypeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly backupPlanTags?: { [key: string]: (string) } | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBackupPlanProps`\n *\n * @param properties - the TypeScript properties of a `CfnBackupPlanProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupPlanPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('backupPlan', cdk.requiredValidator)(properties.backupPlan));\n    errors.collect(cdk.propertyValidator('backupPlan', CfnBackupPlan_BackupPlanResourceTypePropertyValidator)(properties.backupPlan));\n    errors.collect(cdk.propertyValidator('backupPlanTags', cdk.hashValidator(cdk.validateString))(properties.backupPlanTags));\n    return errors.wrap('supplied properties not correct for \"CfnBackupPlanProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupPlan` resource\n *\n * @param properties - the TypeScript properties of a `CfnBackupPlanProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupPlan` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupPlanPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupPlanPropsValidator(properties).assertSuccess();\n    return {\n        BackupPlan: cfnBackupPlanBackupPlanResourceTypePropertyToCloudFormation(properties.backupPlan),\n        BackupPlanTags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.backupPlanTags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupPlanPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupPlanProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupPlanProps>();\n    ret.addPropertyResult('backupPlan', 'BackupPlan', CfnBackupPlanBackupPlanResourceTypePropertyFromCloudFormation(properties.BackupPlan));\n    ret.addPropertyResult('backupPlanTags', 'BackupPlanTags', properties.BackupPlanTags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.BackupPlanTags) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnBackupPlan extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Backup::BackupPlan\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBackupPlan {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBackupPlanPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBackupPlan(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                           \n    public readonly attrBackupPlanArn: string;\n\n                                                                                                      \n    public readonly attrBackupPlanId: string;\n\n                                                                                                                                                                                            \n    public readonly attrVersionId: string;\n\n                                                                                                                                                                                                                                                                   \n    public backupPlan: CfnBackupPlan.BackupPlanResourceTypeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public backupPlanTags: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnBackupPlanProps) {\n        super(scope, id, { type: CfnBackupPlan.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'backupPlan', this);\n        this.attrBackupPlanArn = cdk.Token.asString(this.getAtt('BackupPlanArn'));\n        this.attrBackupPlanId = cdk.Token.asString(this.getAtt('BackupPlanId'));\n        this.attrVersionId = cdk.Token.asString(this.getAtt('VersionId'));\n\n        this.backupPlan = props.backupPlan;\n        this.backupPlanTags = props.backupPlanTags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBackupPlan.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            backupPlan: this.backupPlan,\n            backupPlanTags: this.backupPlanTags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBackupPlanPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBackupPlan {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface AdvancedBackupSettingResourceTypeProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly backupOptions: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly resourceType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AdvancedBackupSettingResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `AdvancedBackupSettingResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupPlan_AdvancedBackupSettingResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('backupOptions', cdk.requiredValidator)(properties.backupOptions));\n    errors.collect(cdk.propertyValidator('backupOptions', cdk.validateObject)(properties.backupOptions));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    return errors.wrap('supplied properties not correct for \"AdvancedBackupSettingResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.AdvancedBackupSettingResourceType` resource\n *\n * @param properties - the TypeScript properties of a `AdvancedBackupSettingResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.AdvancedBackupSettingResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupPlanAdvancedBackupSettingResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupPlan_AdvancedBackupSettingResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        BackupOptions: cdk.objectToCloudFormation(properties.backupOptions),\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupPlanAdvancedBackupSettingResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupPlan.AdvancedBackupSettingResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupPlan.AdvancedBackupSettingResourceTypeProperty>();\n    ret.addPropertyResult('backupOptions', 'BackupOptions', cfn_parse.FromCloudFormation.getAny(properties.BackupOptions));\n    ret.addPropertyResult('resourceType', 'ResourceType', cfn_parse.FromCloudFormation.getString(properties.ResourceType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBackupPlan {\n                                                                                                                                                                                                                                                                                              \n    export interface BackupPlanResourceTypeProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly advancedBackupSettings?: Array<CfnBackupPlan.AdvancedBackupSettingResourceTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly backupPlanName: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly backupPlanRule: Array<CfnBackupPlan.BackupRuleResourceTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BackupPlanResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `BackupPlanResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupPlan_BackupPlanResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('advancedBackupSettings', cdk.listValidator(CfnBackupPlan_AdvancedBackupSettingResourceTypePropertyValidator))(properties.advancedBackupSettings));\n    errors.collect(cdk.propertyValidator('backupPlanName', cdk.requiredValidator)(properties.backupPlanName));\n    errors.collect(cdk.propertyValidator('backupPlanName', cdk.validateString)(properties.backupPlanName));\n    errors.collect(cdk.propertyValidator('backupPlanRule', cdk.requiredValidator)(properties.backupPlanRule));\n    errors.collect(cdk.propertyValidator('backupPlanRule', cdk.listValidator(CfnBackupPlan_BackupRuleResourceTypePropertyValidator))(properties.backupPlanRule));\n    return errors.wrap('supplied properties not correct for \"BackupPlanResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.BackupPlanResourceType` resource\n *\n * @param properties - the TypeScript properties of a `BackupPlanResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.BackupPlanResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupPlanBackupPlanResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupPlan_BackupPlanResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        AdvancedBackupSettings: cdk.listMapper(cfnBackupPlanAdvancedBackupSettingResourceTypePropertyToCloudFormation)(properties.advancedBackupSettings),\n        BackupPlanName: cdk.stringToCloudFormation(properties.backupPlanName),\n        BackupPlanRule: cdk.listMapper(cfnBackupPlanBackupRuleResourceTypePropertyToCloudFormation)(properties.backupPlanRule),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupPlanBackupPlanResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupPlan.BackupPlanResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupPlan.BackupPlanResourceTypeProperty>();\n    ret.addPropertyResult('advancedBackupSettings', 'AdvancedBackupSettings', properties.AdvancedBackupSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnBackupPlanAdvancedBackupSettingResourceTypePropertyFromCloudFormation)(properties.AdvancedBackupSettings) : undefined);\n    ret.addPropertyResult('backupPlanName', 'BackupPlanName', cfn_parse.FromCloudFormation.getString(properties.BackupPlanName));\n    ret.addPropertyResult('backupPlanRule', 'BackupPlanRule', cfn_parse.FromCloudFormation.getArray(CfnBackupPlanBackupRuleResourceTypePropertyFromCloudFormation)(properties.BackupPlanRule));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBackupPlan {\n                                                                                                                                                                                                                                                                                                                             \n    export interface BackupRuleResourceTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly completionWindowMinutes?: number;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly copyActions?: Array<CfnBackupPlan.CopyActionResourceTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly enableContinuousBackup?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly lifecycle?: CfnBackupPlan.LifecycleResourceTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly recoveryPointTags?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly ruleName: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly scheduleExpression?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly startWindowMinutes?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly targetBackupVault: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BackupRuleResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `BackupRuleResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupPlan_BackupRuleResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('completionWindowMinutes', cdk.validateNumber)(properties.completionWindowMinutes));\n    errors.collect(cdk.propertyValidator('copyActions', cdk.listValidator(CfnBackupPlan_CopyActionResourceTypePropertyValidator))(properties.copyActions));\n    errors.collect(cdk.propertyValidator('enableContinuousBackup', cdk.validateBoolean)(properties.enableContinuousBackup));\n    errors.collect(cdk.propertyValidator('lifecycle', CfnBackupPlan_LifecycleResourceTypePropertyValidator)(properties.lifecycle));\n    errors.collect(cdk.propertyValidator('recoveryPointTags', cdk.hashValidator(cdk.validateString))(properties.recoveryPointTags));\n    errors.collect(cdk.propertyValidator('ruleName', cdk.requiredValidator)(properties.ruleName));\n    errors.collect(cdk.propertyValidator('ruleName', cdk.validateString)(properties.ruleName));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('startWindowMinutes', cdk.validateNumber)(properties.startWindowMinutes));\n    errors.collect(cdk.propertyValidator('targetBackupVault', cdk.requiredValidator)(properties.targetBackupVault));\n    errors.collect(cdk.propertyValidator('targetBackupVault', cdk.validateString)(properties.targetBackupVault));\n    return errors.wrap('supplied properties not correct for \"BackupRuleResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.BackupRuleResourceType` resource\n *\n * @param properties - the TypeScript properties of a `BackupRuleResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.BackupRuleResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupPlanBackupRuleResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupPlan_BackupRuleResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        CompletionWindowMinutes: cdk.numberToCloudFormation(properties.completionWindowMinutes),\n        CopyActions: cdk.listMapper(cfnBackupPlanCopyActionResourceTypePropertyToCloudFormation)(properties.copyActions),\n        EnableContinuousBackup: cdk.booleanToCloudFormation(properties.enableContinuousBackup),\n        Lifecycle: cfnBackupPlanLifecycleResourceTypePropertyToCloudFormation(properties.lifecycle),\n        RecoveryPointTags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.recoveryPointTags),\n        RuleName: cdk.stringToCloudFormation(properties.ruleName),\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n        StartWindowMinutes: cdk.numberToCloudFormation(properties.startWindowMinutes),\n        TargetBackupVault: cdk.stringToCloudFormation(properties.targetBackupVault),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupPlanBackupRuleResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupPlan.BackupRuleResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupPlan.BackupRuleResourceTypeProperty>();\n    ret.addPropertyResult('completionWindowMinutes', 'CompletionWindowMinutes', properties.CompletionWindowMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.CompletionWindowMinutes) : undefined);\n    ret.addPropertyResult('copyActions', 'CopyActions', properties.CopyActions != null ? cfn_parse.FromCloudFormation.getArray(CfnBackupPlanCopyActionResourceTypePropertyFromCloudFormation)(properties.CopyActions) : undefined);\n    ret.addPropertyResult('enableContinuousBackup', 'EnableContinuousBackup', properties.EnableContinuousBackup != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableContinuousBackup) : undefined);\n    ret.addPropertyResult('lifecycle', 'Lifecycle', properties.Lifecycle != null ? CfnBackupPlanLifecycleResourceTypePropertyFromCloudFormation(properties.Lifecycle) : undefined);\n    ret.addPropertyResult('recoveryPointTags', 'RecoveryPointTags', properties.RecoveryPointTags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RecoveryPointTags) : undefined);\n    ret.addPropertyResult('ruleName', 'RuleName', cfn_parse.FromCloudFormation.getString(properties.RuleName));\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : undefined);\n    ret.addPropertyResult('startWindowMinutes', 'StartWindowMinutes', properties.StartWindowMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartWindowMinutes) : undefined);\n    ret.addPropertyResult('targetBackupVault', 'TargetBackupVault', cfn_parse.FromCloudFormation.getString(properties.TargetBackupVault));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBackupPlan {\n                                                                                                                                                                                                                                                                                \n    export interface CopyActionResourceTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly destinationBackupVaultArn: string;\nn        readonly lifecycle?: CfnBackupPlan.LifecycleResourceTypeProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CopyActionResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `CopyActionResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupPlan_CopyActionResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationBackupVaultArn', cdk.requiredValidator)(properties.destinationBackupVaultArn));\n    errors.collect(cdk.propertyValidator('destinationBackupVaultArn', cdk.validateString)(properties.destinationBackupVaultArn));\n    errors.collect(cdk.propertyValidator('lifecycle', CfnBackupPlan_LifecycleResourceTypePropertyValidator)(properties.lifecycle));\n    return errors.wrap('supplied properties not correct for \"CopyActionResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.CopyActionResourceType` resource\n *\n * @param properties - the TypeScript properties of a `CopyActionResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.CopyActionResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupPlanCopyActionResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupPlan_CopyActionResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        DestinationBackupVaultArn: cdk.stringToCloudFormation(properties.destinationBackupVaultArn),\n        Lifecycle: cfnBackupPlanLifecycleResourceTypePropertyToCloudFormation(properties.lifecycle),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupPlanCopyActionResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupPlan.CopyActionResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupPlan.CopyActionResourceTypeProperty>();\n    ret.addPropertyResult('destinationBackupVaultArn', 'DestinationBackupVaultArn', cfn_parse.FromCloudFormation.getString(properties.DestinationBackupVaultArn));\n    ret.addPropertyResult('lifecycle', 'Lifecycle', properties.Lifecycle != null ? CfnBackupPlanLifecycleResourceTypePropertyFromCloudFormation(properties.Lifecycle) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBackupPlan {\n                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface LifecycleResourceTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly deleteAfterDays?: number;\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly moveToColdStorageAfterDays?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LifecycleResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `LifecycleResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupPlan_LifecycleResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteAfterDays', cdk.validateNumber)(properties.deleteAfterDays));\n    errors.collect(cdk.propertyValidator('moveToColdStorageAfterDays', cdk.validateNumber)(properties.moveToColdStorageAfterDays));\n    return errors.wrap('supplied properties not correct for \"LifecycleResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.LifecycleResourceType` resource\n *\n * @param properties - the TypeScript properties of a `LifecycleResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupPlan.LifecycleResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupPlanLifecycleResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupPlan_LifecycleResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        DeleteAfterDays: cdk.numberToCloudFormation(properties.deleteAfterDays),\n        MoveToColdStorageAfterDays: cdk.numberToCloudFormation(properties.moveToColdStorageAfterDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupPlanLifecycleResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupPlan.LifecycleResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupPlan.LifecycleResourceTypeProperty>();\n    ret.addPropertyResult('deleteAfterDays', 'DeleteAfterDays', properties.DeleteAfterDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.DeleteAfterDays) : undefined);\n    ret.addPropertyResult('moveToColdStorageAfterDays', 'MoveToColdStorageAfterDays', properties.MoveToColdStorageAfterDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.MoveToColdStorageAfterDays) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                 \nexport interface CfnBackupSelectionProps {\n\n                                                                                                                                                                                                                            \n    readonly backupPlanId: string;\n\nn    readonly backupSelection: CfnBackupSelection.BackupSelectionResourceTypeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBackupSelectionProps`\n *\n * @param properties - the TypeScript properties of a `CfnBackupSelectionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupSelectionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('backupPlanId', cdk.requiredValidator)(properties.backupPlanId));\n    errors.collect(cdk.propertyValidator('backupPlanId', cdk.validateString)(properties.backupPlanId));\n    errors.collect(cdk.propertyValidator('backupSelection', cdk.requiredValidator)(properties.backupSelection));\n    errors.collect(cdk.propertyValidator('backupSelection', CfnBackupSelection_BackupSelectionResourceTypePropertyValidator)(properties.backupSelection));\n    return errors.wrap('supplied properties not correct for \"CfnBackupSelectionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupSelection` resource\n *\n * @param properties - the TypeScript properties of a `CfnBackupSelectionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupSelectionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupSelectionPropsValidator(properties).assertSuccess();\n    return {\n        BackupPlanId: cdk.stringToCloudFormation(properties.backupPlanId),\n        BackupSelection: cfnBackupSelectionBackupSelectionResourceTypePropertyToCloudFormation(properties.backupSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupSelectionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupSelectionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupSelectionProps>();\n    ret.addPropertyResult('backupPlanId', 'BackupPlanId', cfn_parse.FromCloudFormation.getString(properties.BackupPlanId));\n    ret.addPropertyResult('backupSelection', 'BackupSelection', CfnBackupSelectionBackupSelectionResourceTypePropertyFromCloudFormation(properties.BackupSelection));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnBackupSelection extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Backup::BackupSelection\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBackupSelection {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBackupSelectionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBackupSelection(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                      \n    public readonly attrBackupPlanId: string;\n\n                                                                                                   \n    public readonly attrId: string;\n\n                                                                                                                                               \n    public readonly attrSelectionId: string;\n\n                                                                                                                                                                                                                            \n    public backupPlanId: string;\n\nn    public backupSelection: CfnBackupSelection.BackupSelectionResourceTypeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnBackupSelectionProps) {\n        super(scope, id, { type: CfnBackupSelection.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'backupPlanId', this);\n        cdk.requireProperty(props, 'backupSelection', this);\n        this.attrBackupPlanId = cdk.Token.asString(this.getAtt('BackupPlanId'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrSelectionId = cdk.Token.asString(this.getAtt('SelectionId'));\n\n        this.backupPlanId = props.backupPlanId;\n        this.backupSelection = props.backupSelection;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBackupSelection.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            backupPlanId: this.backupPlanId,\n            backupSelection: this.backupSelection,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBackupSelectionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBackupSelection {\n                                                                                                                                                                                                                                                                                                                              \n    export interface BackupSelectionResourceTypeProperty {\nn        readonly conditions?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly iamRoleArn: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly listOfTags?: Array<CfnBackupSelection.ConditionResourceTypeProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly notResources?: string[];\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly resources?: string[];\n                                                                                                                                                                                                                                                                                                                           \n        readonly selectionName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BackupSelectionResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `BackupSelectionResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupSelection_BackupSelectionResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('conditions', cdk.validateObject)(properties.conditions));\n    errors.collect(cdk.propertyValidator('iamRoleArn', cdk.requiredValidator)(properties.iamRoleArn));\n    errors.collect(cdk.propertyValidator('iamRoleArn', cdk.validateString)(properties.iamRoleArn));\n    errors.collect(cdk.propertyValidator('listOfTags', cdk.listValidator(CfnBackupSelection_ConditionResourceTypePropertyValidator))(properties.listOfTags));\n    errors.collect(cdk.propertyValidator('notResources', cdk.listValidator(cdk.validateString))(properties.notResources));\n    errors.collect(cdk.propertyValidator('resources', cdk.listValidator(cdk.validateString))(properties.resources));\n    errors.collect(cdk.propertyValidator('selectionName', cdk.requiredValidator)(properties.selectionName));\n    errors.collect(cdk.propertyValidator('selectionName', cdk.validateString)(properties.selectionName));\n    return errors.wrap('supplied properties not correct for \"BackupSelectionResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupSelection.BackupSelectionResourceType` resource\n *\n * @param properties - the TypeScript properties of a `BackupSelectionResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupSelection.BackupSelectionResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupSelectionBackupSelectionResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupSelection_BackupSelectionResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        Conditions: cdk.objectToCloudFormation(properties.conditions),\n        IamRoleArn: cdk.stringToCloudFormation(properties.iamRoleArn),\n        ListOfTags: cdk.listMapper(cfnBackupSelectionConditionResourceTypePropertyToCloudFormation)(properties.listOfTags),\n        NotResources: cdk.listMapper(cdk.stringToCloudFormation)(properties.notResources),\n        Resources: cdk.listMapper(cdk.stringToCloudFormation)(properties.resources),\n        SelectionName: cdk.stringToCloudFormation(properties.selectionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupSelectionBackupSelectionResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupSelection.BackupSelectionResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupSelection.BackupSelectionResourceTypeProperty>();\n    ret.addPropertyResult('conditions', 'Conditions', properties.Conditions != null ? cfn_parse.FromCloudFormation.getAny(properties.Conditions) : undefined);\n    ret.addPropertyResult('iamRoleArn', 'IamRoleArn', cfn_parse.FromCloudFormation.getString(properties.IamRoleArn));\n    ret.addPropertyResult('listOfTags', 'ListOfTags', properties.ListOfTags != null ? cfn_parse.FromCloudFormation.getArray(CfnBackupSelectionConditionResourceTypePropertyFromCloudFormation)(properties.ListOfTags) : undefined);\n    ret.addPropertyResult('notResources', 'NotResources', properties.NotResources != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NotResources) : undefined);\n    ret.addPropertyResult('resources', 'Resources', properties.Resources != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Resources) : undefined);\n    ret.addPropertyResult('selectionName', 'SelectionName', cfn_parse.FromCloudFormation.getString(properties.SelectionName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBackupSelection {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface ConditionResourceTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly conditionKey: string;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly conditionType: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly conditionValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConditionResourceTypeProperty`\n *\n * @param properties - the TypeScript properties of a `ConditionResourceTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupSelection_ConditionResourceTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('conditionKey', cdk.requiredValidator)(properties.conditionKey));\n    errors.collect(cdk.propertyValidator('conditionKey', cdk.validateString)(properties.conditionKey));\n    errors.collect(cdk.propertyValidator('conditionType', cdk.requiredValidator)(properties.conditionType));\n    errors.collect(cdk.propertyValidator('conditionType', cdk.validateString)(properties.conditionType));\n    errors.collect(cdk.propertyValidator('conditionValue', cdk.requiredValidator)(properties.conditionValue));\n    errors.collect(cdk.propertyValidator('conditionValue', cdk.validateString)(properties.conditionValue));\n    return errors.wrap('supplied properties not correct for \"ConditionResourceTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupSelection.ConditionResourceType` resource\n *\n * @param properties - the TypeScript properties of a `ConditionResourceTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupSelection.ConditionResourceType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupSelectionConditionResourceTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupSelection_ConditionResourceTypePropertyValidator(properties).assertSuccess();\n    return {\n        ConditionKey: cdk.stringToCloudFormation(properties.conditionKey),\n        ConditionType: cdk.stringToCloudFormation(properties.conditionType),\n        ConditionValue: cdk.stringToCloudFormation(properties.conditionValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupSelectionConditionResourceTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupSelection.ConditionResourceTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupSelection.ConditionResourceTypeProperty>();\n    ret.addPropertyResult('conditionKey', 'ConditionKey', cfn_parse.FromCloudFormation.getString(properties.ConditionKey));\n    ret.addPropertyResult('conditionType', 'ConditionType', cfn_parse.FromCloudFormation.getString(properties.ConditionType));\n    ret.addPropertyResult('conditionValue', 'ConditionValue', cfn_parse.FromCloudFormation.getString(properties.ConditionValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnBackupVaultProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly backupVaultName: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly accessPolicy?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                               \n    readonly backupVaultTags?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    readonly encryptionKeyArn?: string;\n\n                                                                                                                                                                                                                                                                                                          \n    readonly lockConfiguration?: CfnBackupVault.LockConfigurationTypeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                              \n    readonly notifications?: CfnBackupVault.NotificationObjectTypeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBackupVaultProps`\n *\n * @param properties - the TypeScript properties of a `CfnBackupVaultProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupVaultPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessPolicy', cdk.validateObject)(properties.accessPolicy));\n    errors.collect(cdk.propertyValidator('backupVaultName', cdk.requiredValidator)(properties.backupVaultName));\n    errors.collect(cdk.propertyValidator('backupVaultName', cdk.validateString)(properties.backupVaultName));\n    errors.collect(cdk.propertyValidator('backupVaultTags', cdk.hashValidator(cdk.validateString))(properties.backupVaultTags));\n    errors.collect(cdk.propertyValidator('encryptionKeyArn', cdk.validateString)(properties.encryptionKeyArn));\n    errors.collect(cdk.propertyValidator('lockConfiguration', CfnBackupVault_LockConfigurationTypePropertyValidator)(properties.lockConfiguration));\n    errors.collect(cdk.propertyValidator('notifications', CfnBackupVault_NotificationObjectTypePropertyValidator)(properties.notifications));\n    return errors.wrap('supplied properties not correct for \"CfnBackupVaultProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupVault` resource\n *\n * @param properties - the TypeScript properties of a `CfnBackupVaultProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupVault` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupVaultPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupVaultPropsValidator(properties).assertSuccess();\n    return {\n        BackupVaultName: cdk.stringToCloudFormation(properties.backupVaultName),\n        AccessPolicy: cdk.objectToCloudFormation(properties.accessPolicy),\n        BackupVaultTags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.backupVaultTags),\n        EncryptionKeyArn: cdk.stringToCloudFormation(properties.encryptionKeyArn),\n        LockConfiguration: cfnBackupVaultLockConfigurationTypePropertyToCloudFormation(properties.lockConfiguration),\n        Notifications: cfnBackupVaultNotificationObjectTypePropertyToCloudFormation(properties.notifications),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupVaultPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupVaultProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupVaultProps>();\n    ret.addPropertyResult('backupVaultName', 'BackupVaultName', cfn_parse.FromCloudFormation.getString(properties.BackupVaultName));\n    ret.addPropertyResult('accessPolicy', 'AccessPolicy', properties.AccessPolicy != null ? cfn_parse.FromCloudFormation.getAny(properties.AccessPolicy) : undefined);\n    ret.addPropertyResult('backupVaultTags', 'BackupVaultTags', properties.BackupVaultTags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.BackupVaultTags) : undefined);\n    ret.addPropertyResult('encryptionKeyArn', 'EncryptionKeyArn', properties.EncryptionKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionKeyArn) : undefined);\n    ret.addPropertyResult('lockConfiguration', 'LockConfiguration', properties.LockConfiguration != null ? CfnBackupVaultLockConfigurationTypePropertyFromCloudFormation(properties.LockConfiguration) : undefined);\n    ret.addPropertyResult('notifications', 'Notifications', properties.Notifications != null ? CfnBackupVaultNotificationObjectTypePropertyFromCloudFormation(properties.Notifications) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnBackupVault extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Backup::BackupVault\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBackupVault {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBackupVaultPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBackupVault(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                             \n    public readonly attrBackupVaultArn: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public readonly attrBackupVaultName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public backupVaultName: string;\n\n                                                                                                                                                                                                                                                                               \n    public accessPolicy: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                               \n    public backupVaultTags: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    public encryptionKeyArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                          \n    public lockConfiguration: CfnBackupVault.LockConfigurationTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                              \n    public notifications: CfnBackupVault.NotificationObjectTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnBackupVaultProps) {\n        super(scope, id, { type: CfnBackupVault.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'backupVaultName', this);\n        this.attrBackupVaultArn = cdk.Token.asString(this.getAtt('BackupVaultArn'));\n        this.attrBackupVaultName = cdk.Token.asString(this.getAtt('BackupVaultName'));\n\n        this.backupVaultName = props.backupVaultName;\n        this.accessPolicy = props.accessPolicy;\n        this.backupVaultTags = props.backupVaultTags;\n        this.encryptionKeyArn = props.encryptionKeyArn;\n        this.lockConfiguration = props.lockConfiguration;\n        this.notifications = props.notifications;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::Backup::BackupVault\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBackupVault.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            backupVaultName: this.backupVaultName,\n            accessPolicy: this.accessPolicy,\n            backupVaultTags: this.backupVaultTags,\n            encryptionKeyArn: this.encryptionKeyArn,\n            lockConfiguration: this.lockConfiguration,\n            notifications: this.notifications,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBackupVaultPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBackupVault {\n                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface LockConfigurationTypeProperty {\nn        readonly changeableForDays?: number;\nn        readonly maxRetentionDays?: number;\nn        readonly minRetentionDays: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LockConfigurationTypeProperty`\n *\n * @param properties - the TypeScript properties of a `LockConfigurationTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupVault_LockConfigurationTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('changeableForDays', cdk.validateNumber)(properties.changeableForDays));\n    errors.collect(cdk.propertyValidator('maxRetentionDays', cdk.validateNumber)(properties.maxRetentionDays));\n    errors.collect(cdk.propertyValidator('minRetentionDays', cdk.requiredValidator)(properties.minRetentionDays));\n    errors.collect(cdk.propertyValidator('minRetentionDays', cdk.validateNumber)(properties.minRetentionDays));\n    return errors.wrap('supplied properties not correct for \"LockConfigurationTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupVault.LockConfigurationType` resource\n *\n * @param properties - the TypeScript properties of a `LockConfigurationTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupVault.LockConfigurationType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupVaultLockConfigurationTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupVault_LockConfigurationTypePropertyValidator(properties).assertSuccess();\n    return {\n        ChangeableForDays: cdk.numberToCloudFormation(properties.changeableForDays),\n        MaxRetentionDays: cdk.numberToCloudFormation(properties.maxRetentionDays),\n        MinRetentionDays: cdk.numberToCloudFormation(properties.minRetentionDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupVaultLockConfigurationTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupVault.LockConfigurationTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupVault.LockConfigurationTypeProperty>();\n    ret.addPropertyResult('changeableForDays', 'ChangeableForDays', properties.ChangeableForDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.ChangeableForDays) : undefined);\n    ret.addPropertyResult('maxRetentionDays', 'MaxRetentionDays', properties.MaxRetentionDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRetentionDays) : undefined);\n    ret.addPropertyResult('minRetentionDays', 'MinRetentionDays', cfn_parse.FromCloudFormation.getNumber(properties.MinRetentionDays));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBackupVault {\n                                                                                                                                                                                                                                                                                                                     \n    export interface NotificationObjectTypeProperty {\nn        readonly backupVaultEvents: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly snsTopicArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationObjectTypeProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationObjectTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBackupVault_NotificationObjectTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('backupVaultEvents', cdk.requiredValidator)(properties.backupVaultEvents));\n    errors.collect(cdk.propertyValidator('backupVaultEvents', cdk.listValidator(cdk.validateString))(properties.backupVaultEvents));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.requiredValidator)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    return errors.wrap('supplied properties not correct for \"NotificationObjectTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::BackupVault.NotificationObjectType` resource\n *\n * @param properties - the TypeScript properties of a `NotificationObjectTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::BackupVault.NotificationObjectType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBackupVaultNotificationObjectTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBackupVault_NotificationObjectTypePropertyValidator(properties).assertSuccess();\n    return {\n        BackupVaultEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.backupVaultEvents),\n        SNSTopicArn: cdk.stringToCloudFormation(properties.snsTopicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBackupVaultNotificationObjectTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBackupVault.NotificationObjectTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBackupVault.NotificationObjectTypeProperty>();\n    ret.addPropertyResult('backupVaultEvents', 'BackupVaultEvents', cfn_parse.FromCloudFormation.getStringArray(properties.BackupVaultEvents));\n    ret.addPropertyResult('snsTopicArn', 'SNSTopicArn', cfn_parse.FromCloudFormation.getString(properties.SNSTopicArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                     \nexport interface CfnFrameworkProps {\n\n                                                                                                                                                                                                                                                                                                            \n    readonly frameworkControls: Array<CfnFramework.FrameworkControlProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly frameworkDescription?: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly frameworkName?: string;\n\n                                                                                                                                                                                                                               \n    readonly frameworkTags?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFrameworkProps`\n *\n * @param properties - the TypeScript properties of a `CfnFrameworkProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFrameworkPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('frameworkControls', cdk.requiredValidator)(properties.frameworkControls));\n    errors.collect(cdk.propertyValidator('frameworkControls', cdk.listValidator(CfnFramework_FrameworkControlPropertyValidator))(properties.frameworkControls));\n    errors.collect(cdk.propertyValidator('frameworkDescription', cdk.validateString)(properties.frameworkDescription));\n    errors.collect(cdk.propertyValidator('frameworkName', cdk.validateString)(properties.frameworkName));\n    errors.collect(cdk.propertyValidator('frameworkTags', cdk.listValidator(cdk.validateCfnTag))(properties.frameworkTags));\n    return errors.wrap('supplied properties not correct for \"CfnFrameworkProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::Framework` resource\n *\n * @param properties - the TypeScript properties of a `CfnFrameworkProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::Framework` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFrameworkPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFrameworkPropsValidator(properties).assertSuccess();\n    return {\n        FrameworkControls: cdk.listMapper(cfnFrameworkFrameworkControlPropertyToCloudFormation)(properties.frameworkControls),\n        FrameworkDescription: cdk.stringToCloudFormation(properties.frameworkDescription),\n        FrameworkName: cdk.stringToCloudFormation(properties.frameworkName),\n        FrameworkTags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.frameworkTags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFrameworkPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFrameworkProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFrameworkProps>();\n    ret.addPropertyResult('frameworkControls', 'FrameworkControls', cfn_parse.FromCloudFormation.getArray(CfnFrameworkFrameworkControlPropertyFromCloudFormation)(properties.FrameworkControls));\n    ret.addPropertyResult('frameworkDescription', 'FrameworkDescription', properties.FrameworkDescription != null ? cfn_parse.FromCloudFormation.getString(properties.FrameworkDescription) : undefined);\n    ret.addPropertyResult('frameworkName', 'FrameworkName', properties.FrameworkName != null ? cfn_parse.FromCloudFormation.getString(properties.FrameworkName) : undefined);\n    ret.addPropertyResult('frameworkTags', 'FrameworkTags', properties.FrameworkTags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.FrameworkTags) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFramework extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Backup::Framework\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFramework {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFrameworkPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFramework(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrCreationTime: cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly attrDeploymentStatus: string;\n\n                                                                                                                     \n    public readonly attrFrameworkArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly attrFrameworkStatus: string;\n\n                                                                                                                                                                                                                                                                                                            \n    public frameworkControls: Array<CfnFramework.FrameworkControlProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    public frameworkDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public frameworkName: string | undefined;\n\n                                                                                                                                                                                                                               \n    public frameworkTags: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnFrameworkProps) {\n        super(scope, id, { type: CfnFramework.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'frameworkControls', this);\n        this.attrCreationTime = this.getAtt('CreationTime');\n        this.attrDeploymentStatus = cdk.Token.asString(this.getAtt('DeploymentStatus'));\n        this.attrFrameworkArn = cdk.Token.asString(this.getAtt('FrameworkArn'));\n        this.attrFrameworkStatus = cdk.Token.asString(this.getAtt('FrameworkStatus'));\n\n        this.frameworkControls = props.frameworkControls;\n        this.frameworkDescription = props.frameworkDescription;\n        this.frameworkName = props.frameworkName;\n        this.frameworkTags = props.frameworkTags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFramework.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            frameworkControls: this.frameworkControls,\n            frameworkDescription: this.frameworkDescription,\n            frameworkName: this.frameworkName,\n            frameworkTags: this.frameworkTags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFrameworkPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFramework {\nn    export interface ControlInputParameterProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly parameterName: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly parameterValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ControlInputParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ControlInputParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFramework_ControlInputParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parameterName', cdk.requiredValidator)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterName', cdk.validateString)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.requiredValidator)(properties.parameterValue));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"ControlInputParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::Framework.ControlInputParameter` resource\n *\n * @param properties - the TypeScript properties of a `ControlInputParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::Framework.ControlInputParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFrameworkControlInputParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFramework_ControlInputParameterPropertyValidator(properties).assertSuccess();\n    return {\n        ParameterName: cdk.stringToCloudFormation(properties.parameterName),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFrameworkControlInputParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFramework.ControlInputParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFramework.ControlInputParameterProperty>();\n    ret.addPropertyResult('parameterName', 'ParameterName', cfn_parse.FromCloudFormation.getString(properties.ParameterName));\n    ret.addPropertyResult('parameterValue', 'ParameterValue', cfn_parse.FromCloudFormation.getString(properties.ParameterValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFramework {\n                                                                                                                                                                                                                                                                                                                                         \n    export interface FrameworkControlProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly controlInputParameters?: Array<CfnFramework.ControlInputParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly controlName: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly controlScope?: any | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameworkControlProperty`\n *\n * @param properties - the TypeScript properties of a `FrameworkControlProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFramework_FrameworkControlPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('controlInputParameters', cdk.listValidator(CfnFramework_ControlInputParameterPropertyValidator))(properties.controlInputParameters));\n    errors.collect(cdk.propertyValidator('controlName', cdk.requiredValidator)(properties.controlName));\n    errors.collect(cdk.propertyValidator('controlName', cdk.validateString)(properties.controlName));\n    errors.collect(cdk.propertyValidator('controlScope', cdk.validateObject)(properties.controlScope));\n    return errors.wrap('supplied properties not correct for \"FrameworkControlProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::Framework.FrameworkControl` resource\n *\n * @param properties - the TypeScript properties of a `FrameworkControlProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::Framework.FrameworkControl` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFrameworkFrameworkControlPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFramework_FrameworkControlPropertyValidator(properties).assertSuccess();\n    return {\n        ControlInputParameters: cdk.listMapper(cfnFrameworkControlInputParameterPropertyToCloudFormation)(properties.controlInputParameters),\n        ControlName: cdk.stringToCloudFormation(properties.controlName),\n        ControlScope: cdk.objectToCloudFormation(properties.controlScope),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFrameworkFrameworkControlPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFramework.FrameworkControlProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFramework.FrameworkControlProperty>();\n    ret.addPropertyResult('controlInputParameters', 'ControlInputParameters', properties.ControlInputParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnFrameworkControlInputParameterPropertyFromCloudFormation)(properties.ControlInputParameters) : undefined);\n    ret.addPropertyResult('controlName', 'ControlName', cfn_parse.FromCloudFormation.getString(properties.ControlName));\n    ret.addPropertyResult('controlScope', 'ControlScope', properties.ControlScope != null ? cfn_parse.FromCloudFormation.getAny(properties.ControlScope) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnReportPlanProps {\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly reportDeliveryChannel: any | cdk.IResolvable;\n\nn    readonly reportSetting: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                    \n    readonly reportPlanDescription?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly reportPlanName?: string;\n\n                                                                                                                                                                                                                         \n    readonly reportPlanTags?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReportPlanProps`\n *\n * @param properties - the TypeScript properties of a `CfnReportPlanProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReportPlanPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('reportDeliveryChannel', cdk.requiredValidator)(properties.reportDeliveryChannel));\n    errors.collect(cdk.propertyValidator('reportDeliveryChannel', cdk.validateObject)(properties.reportDeliveryChannel));\n    errors.collect(cdk.propertyValidator('reportPlanDescription', cdk.validateString)(properties.reportPlanDescription));\n    errors.collect(cdk.propertyValidator('reportPlanName', cdk.validateString)(properties.reportPlanName));\n    errors.collect(cdk.propertyValidator('reportPlanTags', cdk.listValidator(cdk.validateCfnTag))(properties.reportPlanTags));\n    errors.collect(cdk.propertyValidator('reportSetting', cdk.requiredValidator)(properties.reportSetting));\n    errors.collect(cdk.propertyValidator('reportSetting', cdk.validateObject)(properties.reportSetting));\n    return errors.wrap('supplied properties not correct for \"CfnReportPlanProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Backup::ReportPlan` resource\n *\n * @param properties - the TypeScript properties of a `CfnReportPlanProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Backup::ReportPlan` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReportPlanPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReportPlanPropsValidator(properties).assertSuccess();\n    return {\n        ReportDeliveryChannel: cdk.objectToCloudFormation(properties.reportDeliveryChannel),\n        ReportSetting: cdk.objectToCloudFormation(properties.reportSetting),\n        ReportPlanDescription: cdk.stringToCloudFormation(properties.reportPlanDescription),\n        ReportPlanName: cdk.stringToCloudFormation(properties.reportPlanName),\n        ReportPlanTags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.reportPlanTags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReportPlanPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReportPlanProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReportPlanProps>();\n    ret.addPropertyResult('reportDeliveryChannel', 'ReportDeliveryChannel', cfn_parse.FromCloudFormation.getAny(properties.ReportDeliveryChannel));\n    ret.addPropertyResult('reportSetting', 'ReportSetting', cfn_parse.FromCloudFormation.getAny(properties.ReportSetting));\n    ret.addPropertyResult('reportPlanDescription', 'ReportPlanDescription', properties.ReportPlanDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ReportPlanDescription) : undefined);\n    ret.addPropertyResult('reportPlanName', 'ReportPlanName', properties.ReportPlanName != null ? cfn_parse.FromCloudFormation.getString(properties.ReportPlanName) : undefined);\n    ret.addPropertyResult('reportPlanTags', 'ReportPlanTags', properties.ReportPlanTags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.ReportPlanTags) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnReportPlan extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Backup::ReportPlan\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReportPlan {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReportPlanPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReportPlan(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                        \n    public readonly attrReportPlanArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public reportDeliveryChannel: any | cdk.IResolvable;\n\nn    public reportSetting: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                    \n    public reportPlanDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public reportPlanName: string | undefined;\n\n                                                                                                                                                                                                                         \n    public reportPlanTags: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnReportPlanProps) {\n        super(scope, id, { type: CfnReportPlan.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'reportDeliveryChannel', this);\n        cdk.requireProperty(props, 'reportSetting', this);\n        this.attrReportPlanArn = cdk.Token.asString(this.getAtt('ReportPlanArn'));\n\n        this.reportDeliveryChannel = props.reportDeliveryChannel;\n        this.reportSetting = props.reportSetting;\n        this.reportPlanDescription = props.reportPlanDescription;\n        this.reportPlanName = props.reportPlanName;\n        this.reportPlanTags = props.reportPlanTags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReportPlan.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            reportDeliveryChannel: this.reportDeliveryChannel,\n            reportSetting: this.reportSetting,\n            reportPlanDescription: this.reportPlanDescription,\n            reportPlanName: this.reportPlanName,\n            reportPlanTags: this.reportPlanTags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReportPlanPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
