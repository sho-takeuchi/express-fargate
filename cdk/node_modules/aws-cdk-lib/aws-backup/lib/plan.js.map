{
  "version": 3,
  "sources": ["plan.ts"],
  "sourcesContent": ["import { IResource, Lazy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnBackupPlan } from './backup.generated';\nimport { BackupPlanRule } from './rule';\nimport { BackupSelection, BackupSelectionOptions } from './selection';\nimport { BackupVault, IBackupVault } from './vault';\n\n                        \nexport interface IBackupPlan extends IResource {\n                                                                        \n  readonly backupPlanId: string;\n}\n\n                                      \nexport interface BackupPlanProps {\n                                                                                               \n  readonly backupPlanName?: string;\n\n                                                                                                                                                                                            \n  readonly backupVault?: IBackupVault;\n\n                                                                                                                                                    \n  readonly backupPlanRules?: BackupPlanRule[];\n\n                                                                                                                                                               \n  readonly windowsVss?: boolean;\n}\n\n                        \nexport class BackupPlan extends Resource implements IBackupPlan {\n                                               \n  public static fromBackupPlanId(scope: Construct, id: string, backupPlanId: string): IBackupPlan {\n    class Import extends Resource implements IBackupPlan {\n      public readonly backupPlanId = backupPlanId;\n    }\n    return new Import(scope, id);\n  }\n\n                                            \n  public static daily35DayRetention(scope: Construct, id: string, backupVault?: IBackupVault) {\n    const plan = new BackupPlan(scope, id, { backupVault });\n    plan.addRule(BackupPlanRule.daily());\n    return plan;\n  }\n\n                                                        \n  public static dailyMonthly1YearRetention(scope: Construct, id: string, backupVault?: IBackupVault) {\n    const plan = new BackupPlan(scope, id, { backupVault });\n    plan.addRule(BackupPlanRule.daily());\n    plan.addRule(BackupPlanRule.monthly1Year());\n    return plan;\n  }\n\n                                                                \n  public static dailyWeeklyMonthly5YearRetention(scope: Construct, id: string, backupVault?: IBackupVault) {\n    const plan = new BackupPlan(scope, id, { backupVault });\n    plan.addRule(BackupPlanRule.daily());\n    plan.addRule(BackupPlanRule.weekly());\n    plan.addRule(BackupPlanRule.monthly5Year());\n    return plan;\n  }\n\n                                                                \n  public static dailyWeeklyMonthly7YearRetention(scope: Construct, id: string, backupVault?: IBackupVault) {\n    const plan = new BackupPlan(scope, id, { backupVault });\n    plan.addRule(BackupPlanRule.daily());\n    plan.addRule(BackupPlanRule.weekly());\n    plan.addRule(BackupPlanRule.monthly7Year());\n    return plan;\n  }\n\n  public readonly backupPlanId: string;\n\n                                                                \n  public readonly backupPlanArn: string;\n\n                                                \n  public readonly versionId: string;\n\n  private readonly rules: CfnBackupPlan.BackupRuleResourceTypeProperty[] = [];\n  private _backupVault?: IBackupVault;\n\n  constructor(scope: Construct, id: string, props: BackupPlanProps = {}) {\n    super(scope, id);\n\n    const plan = new CfnBackupPlan(this, 'Resource', {\n      backupPlan: {\n        advancedBackupSettings: this.advancedBackupSettings(props),\n        backupPlanName: props.backupPlanName || id,\n        backupPlanRule: Lazy.any({ produce: () => this.rules }, { omitEmptyArray: true }),\n      },\n    });\n\n    this.backupPlanId = plan.attrBackupPlanId;\n    this.backupPlanArn = plan.attrBackupPlanArn;\n    this.versionId = plan.attrVersionId;\n\n    this._backupVault = props.backupVault;\n\n    for (const rule of props.backupPlanRules || []) {\n      this.addRule(rule);\n    }\n\n    this.node.addValidation({ validate: () => this.validatePlan() });\n  }\n\n  private advancedBackupSettings(props: BackupPlanProps) {\n    if (!props.windowsVss) {\n      return undefined;\n    }\n    return [{\n      backupOptions: {\n        WindowsVSS: 'enabled',\n      },\n      resourceType: 'EC2',\n    }];\n  }\n\n                                                                            \n  public addRule(rule: BackupPlanRule) {\n    let vault: IBackupVault;\n    if (rule.props.backupVault) {\n      vault = rule.props.backupVault;\n    } else if (this._backupVault) {\n      vault = this._backupVault;\n    } else {\n      this._backupVault = new BackupVault(this, 'Vault');\n      vault = this._backupVault;\n    }\n\n    this.rules.push({\n      completionWindowMinutes: rule.props.completionWindow?.toMinutes(),\n      lifecycle: (rule.props.deleteAfter || rule.props.moveToColdStorageAfter) && {\n        deleteAfterDays: rule.props.deleteAfter?.toDays(),\n        moveToColdStorageAfterDays: rule.props.moveToColdStorageAfter?.toDays(),\n      },\n      ruleName: rule.props.ruleName ?? `${this.node.id}Rule${this.rules.length}`,\n      scheduleExpression: rule.props.scheduleExpression?.expressionString,\n      startWindowMinutes: rule.props.startWindow?.toMinutes(),\n      enableContinuousBackup: rule.props.enableContinuousBackup,\n      targetBackupVault: vault.backupVaultName,\n    });\n  }\n\n                                                                                                \n  public get backupVault(): IBackupVault {\n    if (!this._backupVault) {\n      // This cannot happen but is here to make TypeScript happy\n      throw new Error('No backup vault!');\n    }\n\n    return this._backupVault;\n  }\n\n                                              \n  public addSelection(id: string, options: BackupSelectionOptions): BackupSelection {\n    return new BackupSelection(this, id, {\n      backupPlan: this,\n      ...options,\n    });\n  }\n\n  private validatePlan() {\n    if (this.rules.length === 0) {\n      return ['A backup plan must have at least 1 rule.'];\n    }\n\n    return [];\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
