{
  "version": 3,
  "sources": ["resource.ts"],
  "sourcesContent": ["import * as dynamodb from '../../aws-dynamodb';\nimport * as ec2 from '../../aws-ec2';\nimport * as efs from '../../aws-efs';\nimport * as rds from '../../aws-rds';\nimport { Stack } from '../../core';\nimport { Construct } from 'constructs';\n\n                                                           \nexport enum TagOperation {\n                             \n  STRING_EQUALS = 'STRINGEQUALS',\n\n                             \n  DUMMY = 'dummy'\n}\n\n                          \nexport interface TagCondition {\n                                                                                                                                                                   \n  readonly key: string;\n\n                                                                                                                                                \n  readonly operation?: TagOperation;\n\n                                                                                                                                                       \n  readonly value: string;\n}\n\n                               \nexport class BackupResource {\n                                                                                                                                    \n  public static fromConstruct(construct: Construct) {\n    return new BackupResource(undefined, undefined, construct);\n  }\n\n                                 \n  public static fromDynamoDbTable(table: dynamodb.ITable) {\n    return BackupResource.fromArn(table.tableArn);\n  }\n\n                                \n  public static fromEc2Instance(instance: ec2.IInstance) {\n    return BackupResource.fromArn(Stack.of(instance).formatArn({\n      service: 'ec2',\n      resource: 'instance',\n      resourceName: instance.instanceId,\n    }));\n  }\n\n                                   \n  public static fromEfsFileSystem(fileSystem: efs.IFileSystem) {\n    return BackupResource.fromArn(Stack.of(fileSystem).formatArn({\n      service: 'elasticfilesystem',\n      resource: 'file-system',\n      resourceName: fileSystem.fileSystemId,\n    }));\n  }\n\n                                        \n  public static fromRdsDatabaseInstance(instance: rds.IDatabaseInstance) {\n    return BackupResource.fromArn(instance.instanceArn);\n  }\n\n                                                                                                            \n  public static fromArn(arn: string) {\n    return new BackupResource(arn);\n  }\n\n                                \n  public static fromTag(key: string, value: string, operation?: TagOperation) {\n    return new BackupResource(undefined, {\n      key,\n      value,\n      operation,\n    });\n  }\n\n                           \n  public readonly resource?: string;\n\n                                     \n  public readonly tagCondition?: TagCondition;\n\n                            \n  public readonly construct?: Construct;\n\n  constructor(resource?: string, tagCondition?: TagCondition, construct?: Construct) {\n    this.resource = resource;\n    this.tagCondition = tagCondition;\n    this.construct = construct;\n  }\n}\n"],
  "mappings": "0OAIA,OAAA,QAAA,cAIA,GAAY,cAAZ,AAAA,UAAY,cAAY,CAEtB,cAAA,cAAA,eAGA,cAAA,MAAA,UALU,aAAA,QAAA,cAAA,SAAA,aAAY,KAqBxB,oBAA2B,CAyDzB,YAAY,SAAmB,aAA6B,UAAqB,2EAC/E,KAAK,SAAW,SAChB,KAAK,aAAe,aACpB,KAAK,UAAY,gBA1DL,eAAc,UAAoB,CAC9C,MAAO,IAAI,gBAAe,OAAW,OAAW,iBAIpC,mBAAkB,MAAsB,uEAC7C,eAAe,QAAQ,MAAM,gBAIxB,iBAAgB,SAAuB,wEAC5C,eAAe,QAAQ,OAAA,MAAM,GAAG,UAAU,UAAU,CACzD,QAAS,MACT,SAAU,WACV,aAAc,SAAS,oBAKb,mBAAkB,WAA2B,4EAClD,eAAe,QAAQ,OAAA,MAAM,GAAG,YAAY,UAAU,CAC3D,QAAS,oBACT,SAAU,cACV,aAAc,WAAW,sBAKf,yBAAwB,SAA+B,gFAC5D,eAAe,QAAQ,SAAS,mBAI3B,SAAQ,IAAW,CAC/B,MAAO,IAAI,gBAAe,WAId,SAAQ,IAAa,MAAe,UAAwB,+EACjE,GAAI,gBAAe,OAAW,CACnC,IACA,MACA,aA5CN,QAAA,eAAA",
  "names": []
}
