import * as iam from '../../aws-iam';
import * as kms from '../../aws-kms';
import * as sns from '../../aws-sns';
import { IResource, RemovalPolicy, Resource } from '../../core';
import { Construct } from 'constructs';
/**
 * A backup vault.
 *
 * @stability stable
 */
export interface IBackupVault extends IResource {
    /**
     * The name of a logical container where backups are stored.
     *
     * @stability stable
     * @attribute true
     */
    readonly backupVaultName: string;
    /**
     * The ARN of the backup vault.
     *
     * @stability stable
     * @attribute true
     */
    readonly backupVaultArn: string;
    /**
     * Grant the actions defined in actions to the given grantee on this backup vault.
     *
     * @stability stable
     */
    grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;
}
/**
 * Properties for a BackupVault.
 *
 * @stability stable
 */
export interface BackupVaultProps {
    /**
     * The name of a logical container where backups are stored.
     *
     * Backup vaults
     * are identified by names that are unique to the account used to create
     * them and the AWS Region where they are created.
     *
     * @default - A CDK generated name
     * @stability stable
     */
    readonly backupVaultName?: string;
    /**
     * A resource-based policy that is used to manage access permissions on the backup vault.
     *
     * @default - access is not restricted
     * @stability stable
     */
    readonly accessPolicy?: iam.PolicyDocument;
    /**
     * The server-side encryption key to use to protect your backups.
     *
     * @default - an Amazon managed KMS key
     * @stability stable
     */
    readonly encryptionKey?: kms.IKey;
    /**
     * A SNS topic to send vault events to.
     *
     * @default - no notifications
     * @see https://docs.aws.amazon.com/aws-backup/latest/devguide/sns-notifications.html
     * @stability stable
     */
    readonly notificationTopic?: sns.ITopic;
    /**
     * The vault events to send.
     *
     * @default - all vault events if `notificationTopic` is defined
     * @see https://docs.aws.amazon.com/aws-backup/latest/devguide/sns-notifications.html
     * @stability stable
     */
    readonly notificationEvents?: BackupVaultEvents[];
    /**
     * The removal policy to apply to the vault.
     *
     * Note that removing a vault
     * that contains recovery points will fail.
     *
     * @default RemovalPolicy.RETAIN
     * @stability stable
     */
    readonly removalPolicy?: RemovalPolicy;
    /**
     * Whether to add statements to the vault access policy that prevents anyone from deleting a recovery point.
     *
     * @default false
     * @stability stable
     */
    readonly blockRecoveryPointDeletion?: boolean;
}
/**
 * Backup vault events.
 *
 * @stability stable
 */
export declare enum BackupVaultEvents {
    /**
     * BACKUP_JOB_STARTED.
     *
     * @stability stable
     */
    BACKUP_JOB_STARTED = "BACKUP_JOB_STARTED",
    /**
     * BACKUP_JOB_COMPLETED.
     *
     * @stability stable
     */
    BACKUP_JOB_COMPLETED = "BACKUP_JOB_COMPLETED",
    /**
     * BACKUP_JOB_SUCCESSFUL.
     *
     * @stability stable
     */
    BACKUP_JOB_SUCCESSFUL = "BACKUP_JOB_SUCCESSFUL",
    /**
     * BACKUP_JOB_FAILED.
     *
     * @stability stable
     */
    BACKUP_JOB_FAILED = "BACKUP_JOB_FAILED",
    /**
     * BACKUP_JOB_EXPIRED.
     *
     * @stability stable
     */
    BACKUP_JOB_EXPIRED = "BACKUP_JOB_EXPIRED",
    /**
     * RESTORE_JOB_STARTED.
     *
     * @stability stable
     */
    RESTORE_JOB_STARTED = "RESTORE_JOB_STARTED",
    /**
     * RESTORE_JOB_COMPLETED.
     *
     * @stability stable
     */
    RESTORE_JOB_COMPLETED = "RESTORE_JOB_COMPLETED",
    /**
     * RESTORE_JOB_SUCCESSFUL.
     *
     * @stability stable
     */
    RESTORE_JOB_SUCCESSFUL = "RESTORE_JOB_SUCCESSFUL",
    /**
     * RESTORE_JOB_FAILED.
     *
     * @stability stable
     */
    RESTORE_JOB_FAILED = "RESTORE_JOB_FAILED",
    /**
     * COPY_JOB_STARTED.
     *
     * @stability stable
     */
    COPY_JOB_STARTED = "COPY_JOB_STARTED",
    /**
     * COPY_JOB_SUCCESSFUL.
     *
     * @stability stable
     */
    COPY_JOB_SUCCESSFUL = "COPY_JOB_SUCCESSFUL",
    /**
     * COPY_JOB_FAILED.
     *
     * @stability stable
     */
    COPY_JOB_FAILED = "COPY_JOB_FAILED",
    /**
     * RECOVERY_POINT_MODIFIED.
     *
     * @stability stable
     */
    RECOVERY_POINT_MODIFIED = "RECOVERY_POINT_MODIFIED",
    /**
     * BACKUP_PLAN_CREATED.
     *
     * @stability stable
     */
    BACKUP_PLAN_CREATED = "BACKUP_PLAN_CREATED",
    /**
     * BACKUP_PLAN_MODIFIED.
     *
     * @stability stable
     */
    BACKUP_PLAN_MODIFIED = "BACKUP_PLAN_MODIFIED"
}
declare abstract class BackupVaultBase extends Resource implements IBackupVault {
    abstract readonly backupVaultName: string;
    abstract readonly backupVaultArn: string;
    /**
     * Grant the actions defined in actions to the given grantee on this Backup Vault resource.
     *
     * @param grantee Principal to grant right to.
     * @param actions The actions to grant.
     * @stability stable
     */
    grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;
}
/**
 * A backup vault.
 *
 * @stability stable
 */
export declare class BackupVault extends BackupVaultBase {
    /**
     * Import an existing backup vault by name.
     *
     * @stability stable
     */
    static fromBackupVaultName(scope: Construct, id: string, backupVaultName: string): IBackupVault;
    /**
     * Import an existing backup vault by arn.
     *
     * @stability stable
     */
    static fromBackupVaultArn(scope: Construct, id: string, backupVaultArn: string): IBackupVault;
    /**
     * The name of a logical container where backups are stored.
     *
     * @stability stable
     */
    readonly backupVaultName: string;
    /**
     * The ARN of the backup vault.
     *
     * @stability stable
     */
    readonly backupVaultArn: string;
    private readonly accessPolicy;
    /**
     * @stability stable
     */
    constructor(scope: Construct, id: string, props?: BackupVaultProps);
    /**
     * Adds a statement to the vault access policy.
     *
     * @stability stable
     */
    addToAccessPolicy(statement: iam.PolicyStatement): void;
    /**
     * Adds a statement to the vault access policy that prevents anyone from deleting a recovery point.
     *
     * @stability stable
     */
    blockRecoveryPointDeletion(): void;
    private uniqueVaultName;
}
export {};
