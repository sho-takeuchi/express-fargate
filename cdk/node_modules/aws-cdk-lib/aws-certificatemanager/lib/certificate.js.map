{
  "version": 3,
  "sources": ["certificate.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as route53 from '../../aws-route53';\nimport { IResource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CertificateBase } from './certificate-base';\nimport { CfnCertificate } from './certificatemanager.generated';\nimport { apexDomain } from './util';\n\n                                                              \nexport interface ICertificate extends IResource {\n                                                           \n  readonly certificateArn: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n  metricDaysToExpiry(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n}\n\n                                          \nexport interface CertificateProps {\n                                                                                                                                     \n  readonly domainName: string;\n\n                                                                                                                                                                                                                                           \n  readonly subjectAlternativeNames?: string[];\n\n                                                                                                                                                                                                                                                                 \n  readonly validationDomains?: {[domainName: string]: string};\n\n                                                                                                                                                       \n  readonly validationMethod?: ValidationMethod;\n\n                                                                                                      \n  readonly validation?: CertificateValidation;\n}\n\n                                                \nexport interface CertificationValidationProps {\n                                                                            \n  readonly method?: ValidationMethod;\n\n                                                                                                \n  readonly hostedZone?: route53.IHostedZone;\n\n                                                                                                      \n  readonly hostedZones?: { [domainName: string]: route53.IHostedZone };\n\n                                                                                                \n  readonly validationDomains?: { [domainName: string]: string };\n}\n\n                                        \nexport class CertificateValidation {\n                                                                                                                                                                                                                                                                                                          \n  public static fromDns(hostedZone?: route53.IHostedZone) {\n    return new CertificateValidation({\n      method: ValidationMethod.DNS,\n      hostedZone,\n    });\n  }\n\n                                                                                                                                                                                                                                                            \n  public static fromDnsMultiZone(hostedZones: { [domainName: string]: route53.IHostedZone }) {\n    return new CertificateValidation({\n      method: ValidationMethod.DNS,\n      hostedZones,\n    });\n  }\n\nn  public static fromEmail(validationDomains?: { [domainName: string]: string }) {\n    return new CertificateValidation({\n      method: ValidationMethod.EMAIL,\n      validationDomains,\n    });\n  }\n\n                                      \n  public readonly method: ValidationMethod;\n\n  /** @param props Certification validation properties */\n  private constructor(public readonly props: CertificationValidationProps) {\n    this.method = props.method ?? ValidationMethod.EMAIL;\n  }\n}\n\n                                                           \nexport class Certificate extends CertificateBase implements ICertificate {\n                                     \n  public static fromCertificateArn(scope: Construct, id: string, certificateArn: string): ICertificate {\n    class Import extends CertificateBase {\n      public readonly certificateArn = certificateArn;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                      \n  public readonly certificateArn: string;\n\n  constructor(scope: Construct, id: string, props: CertificateProps) {\n    super(scope, id);\n\n    let validation: CertificateValidation;\n    if (props.validation) {\n      validation = props.validation;\n    } else { // Deprecated props\n      if (props.validationMethod === ValidationMethod.DNS) {\n        validation = CertificateValidation.fromDns();\n      } else {\n        validation = CertificateValidation.fromEmail(props.validationDomains);\n      }\n    }\n\n    const allDomainNames = [props.domainName].concat(props.subjectAlternativeNames || []);\n\n    const cert = new CfnCertificate(this, 'Resource', {\n      domainName: props.domainName,\n      subjectAlternativeNames: props.subjectAlternativeNames,\n      domainValidationOptions: renderDomainValidation(validation, allDomainNames),\n      validationMethod: validation.method,\n    });\n\n    this.certificateArn = cert.ref;\n  }\n}\n\n                                                        \nexport enum ValidationMethod {\n                                                                                                                                                                                \n  EMAIL = 'EMAIL',\n\n                                                                                                                                                              \n  DNS = 'DNS',\n}\n\n// eslint-disable-next-line max-len\nfunction renderDomainValidation(validation: CertificateValidation, domainNames: string[]): CfnCertificate.DomainValidationOptionProperty[] | undefined {\n  const domainValidation: CfnCertificate.DomainValidationOptionProperty[] = [];\n\n  switch (validation.method) {\n    case ValidationMethod.DNS:\n      for (const domainName of getUniqueDnsDomainNames(domainNames)) {\n        const hostedZone = validation.props.hostedZones?.[domainName] ?? validation.props.hostedZone;\n        if (hostedZone) {\n          domainValidation.push({ domainName, hostedZoneId: hostedZone.hostedZoneId });\n        }\n      }\n      break;\n    case ValidationMethod.EMAIL:\n      for (const domainName of domainNames) {\n        const validationDomain = validation.props.validationDomains?.[domainName];\n        if (!validationDomain && Token.isUnresolved(domainName)) {\n          throw new Error('When using Tokens for domain names, \\'validationDomains\\' needs to be supplied');\n        }\n        domainValidation.push({ domainName, validationDomain: validationDomain ?? apexDomain(domainName) });\n      }\n      break;\n    default:\n      throw new Error(`Unknown validation method ${validation.method}`);\n  }\n\n  return domainValidation.length !== 0 ? domainValidation : undefined;\n}\n\n/**\n * Removes wildcard domains (*.example.com) where the base domain (example.com) is present.\n * This is because the DNS validation treats them as the same thing, and the automated CloudFormation\n * DNS validation errors out with the duplicate records.\n */\nfunction getUniqueDnsDomainNames(domainNames: string[]) {\n  return domainNames.filter(domain => {\n    return Token.isUnresolved(domain) || !domain.startsWith('*.') || !domainNames.includes(domain.replace('*.', ''));\n  });\n}\n"],
  "mappings": "4QAEA,OAAA,QAAA,cAEA,mBAAA,QAAA,sBACA,+BAAA,QAAA,kCACA,OAAA,QAAA,UA6CA,2BAAkC,CA6BhC,YAAoC,MAAmC,QAAnC,KAAA,MAAA,MAClC,KAAK,OAAM,IAAG,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,iBAAiB,YA5BnC,SAAQ,WAAgC,gFAC7C,GAAI,uBAAsB,CAC/B,OAAQ,iBAAiB,IACzB,mBAKU,kBAAiB,YAA0D,CACvF,MAAO,IAAI,uBAAsB,CAC/B,OAAQ,iBAAiB,IACzB,oBAKU,WAAU,kBAAoD,CAC1E,MAAO,IAAI,uBAAsB,CAC/B,OAAQ,iBAAiB,MACzB,qBArBN,QAAA,sBAAA,wJAmCA,yBAAiC,oBAAA,eAAe,CAa9C,YAAY,MAAkB,GAAY,MAAuB,CAC/D,MAAM,MAAO,uFAEb,GAAI,YACJ,AAAI,MAAM,WACR,WAAa,MAAM,WAEnB,AAAI,MAAM,mBAAqB,iBAAiB,IAC9C,WAAa,sBAAsB,UAEnC,WAAa,sBAAsB,UAAU,MAAM,mBAIvD,KAAM,gBAAiB,CAAC,MAAM,YAAY,OAAO,MAAM,yBAA2B,IAE5E,KAAO,GAAI,gCAAA,eAAe,KAAM,WAAY,CAChD,WAAY,MAAM,WAClB,wBAAyB,MAAM,wBAC/B,wBAAyB,uBAAuB,WAAY,gBAC5D,iBAAkB,WAAW,SAG/B,KAAK,eAAiB,KAAK,UAlCf,oBAAmB,MAAkB,GAAY,eAAsB,CACnF,oBAAqB,oBAAA,eAAe,CAApC,aAAA,qBACkB,KAAA,eAAiB,gBAGnC,MAAO,IAAI,QAAO,MAAO,KAP7B,QAAA,YAAA,0HAyCA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAE1B,kBAAA,MAAA,QAGA,kBAAA,IAAA,QALU,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,KAS5B,gCAAgC,WAAmC,YAAqB,cACtF,KAAM,kBAAoE,GAE1E,OAAQ,WAAW,YACZ,kBAAiB,IACpB,SAAW,cAAc,yBAAwB,aAAc,CAC7D,KAAM,YAAU,IAAA,IAAG,WAAW,MAAM,eAAW,MAAA,KAAA,OAAA,OAAA,GAAG,eAAU,MAAA,KAAA,OAAA,GAAK,WAAW,MAAM,WAClF,AAAI,YACF,iBAAiB,KAAK,CAAE,WAAY,aAAc,WAAW,eAGjE,UACG,kBAAiB,MACpB,SAAW,cAAc,aAAa,CACpC,KAAM,kBAAgB,IAAG,WAAW,MAAM,qBAAiB,MAAA,KAAA,OAAA,OAAA,GAAG,YAC9D,GAAI,CAAC,kBAAoB,OAAA,MAAM,aAAa,YAC1C,KAAM,IAAI,OAAM,gFAElB,iBAAiB,KAAK,CAAE,WAAY,iBAAkB,kBAAgB,KAAhB,iBAAoB,OAAA,WAAW,cAEvF,cAEA,KAAM,IAAI,OAAM,6BAA6B,WAAW,UAG5D,MAAO,kBAAiB,SAAW,EAAI,iBAAmB,OAQ5D,iCAAiC,YAAqB,CACpD,MAAO,aAAY,OAAO,QACjB,OAAA,MAAM,aAAa,SAAW,CAAC,OAAO,WAAW,OAAS,CAAC,YAAY,SAAS,OAAO,QAAQ,KAAM",
  "names": []
}
