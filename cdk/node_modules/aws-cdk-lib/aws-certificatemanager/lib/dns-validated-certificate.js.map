{
  "version": 3,
  "sources": ["dns-validated-certificate.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport * as route53 from '../../aws-route53';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CertificateProps, ICertificate } from './certificate';\nimport { CertificateBase } from './certificate-base';\n\n                                                                                                 \nexport interface DnsValidatedCertificateProps extends CertificateProps {\n                                                                                                                                                                                   \n  readonly hostedZone: route53.IHostedZone;\n                                                                                                                                                                                                                                                     \n  readonly region?: string;\n\nn  readonly route53Endpoint?: string;\n\n                                                                                                                                           \n  readonly customResourceRole?: iam.IRole;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly cleanupRoute53Records?: boolean;\n}\n\n                                                                                                                                                                                                                      \nexport class DnsValidatedCertificate extends CertificateBase implements ICertificate, cdk.ITaggable {\n  public readonly certificateArn: string;\n\n                                                                                                                                                                                              \n\n  public readonly tags: cdk.TagManager;\n  protected readonly region?: string;\n  private normalizedZoneName: string;\n  private hostedZoneId: string;\n  private domainName: string;\n\n  constructor(scope: Construct, id: string, props: DnsValidatedCertificateProps) {\n    super(scope, id);\n\n    this.region = props.region;\n\n    this.domainName = props.domainName;\n    this.normalizedZoneName = props.hostedZone.zoneName;\n    // Remove trailing `.` from zone name\n    if (this.normalizedZoneName.endsWith('.')) {\n      this.normalizedZoneName = this.normalizedZoneName.substring(0, this.normalizedZoneName.length - 1);\n    }\n\n    // Remove any `/hostedzone/` prefix from the Hosted Zone ID\n    this.hostedZoneId = props.hostedZone.hostedZoneId.replace(/^\\/hostedzone\\//, '');\n    this.tags = new cdk.TagManager(cdk.TagType.MAP, 'AWS::CertificateManager::Certificate');\n\n    const requestorFunction = new lambda.Function(this, 'CertificateRequestorFunction', {\n      code: lambda.Code.fromAsset(path.resolve(__dirname, '..', 'lambda-packages', 'dns_validated_certificate_handler', 'lib')),\n      handler: 'index.certificateRequestHandler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n      timeout: cdk.Duration.minutes(15),\n      role: props.customResourceRole,\n    });\n    requestorFunction.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['acm:RequestCertificate', 'acm:DescribeCertificate', 'acm:DeleteCertificate', 'acm:AddTagsToCertificate'],\n      resources: ['*'],\n    }));\n    requestorFunction.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['route53:GetChange'],\n      resources: ['*'],\n    }));\n    requestorFunction.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['route53:changeResourceRecordSets'],\n      resources: [`arn:${cdk.Stack.of(requestorFunction).partition}:route53:::hostedzone/${this.hostedZoneId}`],\n    }));\n\n    const certificate = new cdk.CustomResource(this, 'CertificateRequestorResource', {\n      serviceToken: requestorFunction.functionArn,\n      properties: {\n        DomainName: props.domainName,\n        SubjectAlternativeNames: cdk.Lazy.list({ produce: () => props.subjectAlternativeNames }, { omitEmpty: true }),\n        HostedZoneId: this.hostedZoneId,\n        Region: props.region,\n        Route53Endpoint: props.route53Endpoint,\n        // Custom resources properties are always converted to strings; might as well be explict here.\n        CleanupRecords: props.cleanupRoute53Records ? 'true' : undefined,\n        Tags: cdk.Lazy.list({ produce: () => this.tags.renderTags() }),\n      },\n    });\n\n    this.certificateArn = certificate.getAtt('Arn').toString();\n\n    this.node.addValidation({ validate: () => this.validateDnsValidatedCertificate() });\n  }\n\n  private validateDnsValidatedCertificate(): string[] {\n    const errors: string[] = [];\n    // Ensure the zone name is a parent zone of the certificate domain name\n    if (!cdk.Token.isUnresolved(this.normalizedZoneName) &&\n      this.domainName !== this.normalizedZoneName &&\n      !this.domainName.endsWith('.' + this.normalizedZoneName)) {\n      errors.push(`DNS zone ${this.normalizedZoneName} is not authoritative for certificate domain name ${this.domainName}`);\n    }\n    return errors;\n  }\n}\n"],
  "mappings": "8NAAA,KAAA,QAAA,QACA,IAAA,QAAA,iBACA,OAAA,QAAA,oBAEA,IAAA,QAAA,cAGA,mBAAA,QAAA,sBAoBA,qCAA6C,oBAAA,eAAe,CAW1D,YAAY,MAAkB,GAAY,MAAmC,CAC3E,MAAM,MAAO,mGAEb,KAAK,OAAS,MAAM,OAEpB,KAAK,WAAa,MAAM,WACxB,KAAK,mBAAqB,MAAM,WAAW,SAEvC,KAAK,mBAAmB,SAAS,MACnC,MAAK,mBAAqB,KAAK,mBAAmB,UAAU,EAAG,KAAK,mBAAmB,OAAS,IAIlG,KAAK,aAAe,MAAM,WAAW,aAAa,QAAQ,kBAAmB,IAC7E,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,IAAK,wCAEhD,KAAM,mBAAoB,GAAI,QAAO,SAAS,KAAM,+BAAgC,CAClF,KAAM,OAAO,KAAK,UAAU,KAAK,QAAQ,UAAW,KAAM,kBAAmB,oCAAqC,QAClH,QAAS,kCACT,QAAS,OAAO,QAAQ,YACxB,QAAS,IAAI,SAAS,QAAQ,IAC9B,KAAM,MAAM,qBAEd,kBAAkB,gBAAgB,GAAI,KAAI,gBAAgB,CACxD,QAAS,CAAC,yBAA0B,0BAA2B,wBAAyB,4BACxF,UAAW,CAAC,QAEd,kBAAkB,gBAAgB,GAAI,KAAI,gBAAgB,CACxD,QAAS,CAAC,qBACV,UAAW,CAAC,QAEd,kBAAkB,gBAAgB,GAAI,KAAI,gBAAgB,CACxD,QAAS,CAAC,oCACV,UAAW,CAAC,OAAO,IAAI,MAAM,GAAG,mBAAmB,kCAAkC,KAAK,mBAG5F,KAAM,aAAc,GAAI,KAAI,eAAe,KAAM,+BAAgC,CAC/E,aAAc,kBAAkB,YAChC,WAAY,CACV,WAAY,MAAM,WAClB,wBAAyB,IAAI,KAAK,KAAK,CAAE,QAAS,IAAM,MAAM,yBAA2B,CAAE,UAAW,KACtG,aAAc,KAAK,aACnB,OAAQ,MAAM,OACd,gBAAiB,MAAM,gBAEvB,eAAgB,MAAM,sBAAwB,OAAS,OACvD,KAAM,IAAI,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,KAAK,kBAInD,KAAK,eAAiB,YAAY,OAAO,OAAO,WAEhD,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,KAAK,oCAGzC,iCAA+B,CACrC,KAAM,QAAmB,GAEzB,MAAI,CAAC,IAAI,MAAM,aAAa,KAAK,qBAC/B,KAAK,aAAe,KAAK,oBACzB,CAAC,KAAK,WAAW,SAAS,IAAM,KAAK,qBACrC,OAAO,KAAK,YAAY,KAAK,uEAAuE,KAAK,cAEpG,QA1EX,QAAA,wBAAA",
  "names": []
}
