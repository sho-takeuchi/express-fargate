{
  "version": 3,
  "sources": ["cloudformation.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:59:37.380Z\",\"fingerprint\":\"fyl8IHq1+rVhveiA/7HxVuxz4aTrXcaKaikhzcEyiPI=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                            \nexport interface CfnCustomResourceProps {\n\nn    readonly serviceToken: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCustomResourceProps`\n *\n * @param properties - the TypeScript properties of a `CfnCustomResourceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomResourcePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('serviceToken', cdk.requiredValidator)(properties.serviceToken));\n    errors.collect(cdk.propertyValidator('serviceToken', cdk.validateString)(properties.serviceToken));\n    return errors.wrap('supplied properties not correct for \"CfnCustomResourceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::CustomResource` resource\n *\n * @param properties - the TypeScript properties of a `CfnCustomResourceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::CustomResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomResourcePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomResourcePropsValidator(properties).assertSuccess();\n    return {\n        ServiceToken: cdk.stringToCloudFormation(properties.serviceToken),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomResourcePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomResourceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomResourceProps>();\n    ret.addPropertyResult('serviceToken', 'ServiceToken', cfn_parse.FromCloudFormation.getString(properties.ServiceToken));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCustomResource extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::CustomResource\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCustomResource {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCustomResourcePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCustomResource(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public serviceToken: string;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnCustomResourceProps) {\n        super(scope, id, { type: CfnCustomResource.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'serviceToken', this);\n\n        this.serviceToken = props.serviceToken;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCustomResource.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            serviceToken: this.serviceToken,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCustomResourcePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                     \nexport interface CfnMacroProps {\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly functionName: string;\n\n                                                                                                                                                                                                                                                                           \n    readonly name: string;\n\n                                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly logGroupName?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly logRoleArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMacroProps`\n *\n * @param properties - the TypeScript properties of a `CfnMacroProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMacroPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('functionName', cdk.requiredValidator)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('logRoleArn', cdk.validateString)(properties.logRoleArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnMacroProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::Macro` resource\n *\n * @param properties - the TypeScript properties of a `CfnMacroProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::Macro` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMacroPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMacroPropsValidator(properties).assertSuccess();\n    return {\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n        LogRoleARN: cdk.stringToCloudFormation(properties.logRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMacroPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMacroProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMacroProps>();\n    ret.addPropertyResult('functionName', 'FunctionName', cfn_parse.FromCloudFormation.getString(properties.FunctionName));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addPropertyResult('logRoleArn', 'LogRoleARN', properties.LogRoleARN != null ? cfn_parse.FromCloudFormation.getString(properties.LogRoleARN) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMacro extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::Macro\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMacro {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMacroPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMacro(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                            \n    public functionName: string;\n\n                                                                                                                                                                                                                                                                           \n    public name: string;\n\n                                                                                                                                                                                                                \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public logGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public logRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnMacroProps) {\n        super(scope, id, { type: CfnMacro.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'functionName', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.functionName = props.functionName;\n        this.name = props.name;\n        this.description = props.description;\n        this.logGroupName = props.logGroupName;\n        this.logRoleArn = props.logRoleArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMacro.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            functionName: this.functionName,\n            name: this.name,\n            description: this.description,\n            logGroupName: this.logGroupName,\n            logRoleArn: this.logRoleArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMacroPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                   \nexport interface CfnModuleDefaultVersionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly arn?: string;\n\n                                                                                                                                                                                                                                                                                                                                      \n    readonly moduleName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    readonly versionId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModuleDefaultVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnModuleDefaultVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModuleDefaultVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('moduleName', cdk.validateString)(properties.moduleName));\n    errors.collect(cdk.propertyValidator('versionId', cdk.validateString)(properties.versionId));\n    return errors.wrap('supplied properties not correct for \"CfnModuleDefaultVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::ModuleDefaultVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnModuleDefaultVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::ModuleDefaultVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModuleDefaultVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModuleDefaultVersionPropsValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        ModuleName: cdk.stringToCloudFormation(properties.moduleName),\n        VersionId: cdk.stringToCloudFormation(properties.versionId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModuleDefaultVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModuleDefaultVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModuleDefaultVersionProps>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addPropertyResult('moduleName', 'ModuleName', properties.ModuleName != null ? cfn_parse.FromCloudFormation.getString(properties.ModuleName) : undefined);\n    ret.addPropertyResult('versionId', 'VersionId', properties.VersionId != null ? cfn_parse.FromCloudFormation.getString(properties.VersionId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnModuleDefaultVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::ModuleDefaultVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModuleDefaultVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModuleDefaultVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModuleDefaultVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    public arn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                      \n    public moduleName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    public versionId: string | undefined;\n\n                                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnModuleDefaultVersionProps = {}) {\n        super(scope, id, { type: CfnModuleDefaultVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.arn = props.arn;\n        this.moduleName = props.moduleName;\n        this.versionId = props.versionId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModuleDefaultVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            arn: this.arn,\n            moduleName: this.moduleName,\n            versionId: this.versionId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModuleDefaultVersionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnModuleVersionProps {\n\n                                                                                                                                                                                                                                            \n    readonly moduleName: string;\n\nn    readonly modulePackage: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModuleVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnModuleVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModuleVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('moduleName', cdk.requiredValidator)(properties.moduleName));\n    errors.collect(cdk.propertyValidator('moduleName', cdk.validateString)(properties.moduleName));\n    errors.collect(cdk.propertyValidator('modulePackage', cdk.requiredValidator)(properties.modulePackage));\n    errors.collect(cdk.propertyValidator('modulePackage', cdk.validateString)(properties.modulePackage));\n    return errors.wrap('supplied properties not correct for \"CfnModuleVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::ModuleVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnModuleVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::ModuleVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModuleVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModuleVersionPropsValidator(properties).assertSuccess();\n    return {\n        ModuleName: cdk.stringToCloudFormation(properties.moduleName),\n        ModulePackage: cdk.stringToCloudFormation(properties.modulePackage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModuleVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModuleVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModuleVersionProps>();\n    ret.addPropertyResult('moduleName', 'ModuleName', cfn_parse.FromCloudFormation.getString(properties.ModuleName));\n    ret.addPropertyResult('modulePackage', 'ModulePackage', cfn_parse.FromCloudFormation.getString(properties.ModulePackage));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnModuleVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::ModuleVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModuleVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModuleVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModuleVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                        \n    public readonly attrArn: string;\n\n                                                                                                 \n    public readonly attrDescription: string;\n\n                                                                                                                                           \n    public readonly attrDocumentationUrl: string;\n\n                                                                                                                                           \n    public readonly attrIsDefaultVersion: cdk.IResolvable;\n\n                                                                                                 \n    public readonly attrSchema: string;\n\n                                                                                                                    \n    public readonly attrTimeCreated: string;\n\n                                                                                                      \n    public readonly attrVersionId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public readonly attrVisibility: string;\n\n                                                                                                                                                                                                                                            \n    public moduleName: string;\n\nn    public modulePackage: string;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnModuleVersionProps) {\n        super(scope, id, { type: CfnModuleVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'moduleName', this);\n        cdk.requireProperty(props, 'modulePackage', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDescription = cdk.Token.asString(this.getAtt('Description'));\n        this.attrDocumentationUrl = cdk.Token.asString(this.getAtt('DocumentationUrl'));\n        this.attrIsDefaultVersion = this.getAtt('IsDefaultVersion');\n        this.attrSchema = cdk.Token.asString(this.getAtt('Schema'));\n        this.attrTimeCreated = cdk.Token.asString(this.getAtt('TimeCreated'));\n        this.attrVersionId = cdk.Token.asString(this.getAtt('VersionId'));\n        this.attrVisibility = cdk.Token.asString(this.getAtt('Visibility'));\n\n        this.moduleName = props.moduleName;\n        this.modulePackage = props.modulePackage;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModuleVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            moduleName: this.moduleName,\n            modulePackage: this.modulePackage,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModuleVersionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                             \nexport interface CfnPublicTypeVersionProps {\n\n                                                                                                                                                                                                                                                                                                                                      \n    readonly arn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly logDeliveryBucket?: string;\n\nn    readonly publicVersionNumber?: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly type?: string;\n\n                                                                                                                                                                                                                                                                                                                           \n    readonly typeName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPublicTypeVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnPublicTypeVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPublicTypeVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('logDeliveryBucket', cdk.validateString)(properties.logDeliveryBucket));\n    errors.collect(cdk.propertyValidator('publicVersionNumber', cdk.validateString)(properties.publicVersionNumber));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('typeName', cdk.validateString)(properties.typeName));\n    return errors.wrap('supplied properties not correct for \"CfnPublicTypeVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::PublicTypeVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnPublicTypeVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::PublicTypeVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPublicTypeVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPublicTypeVersionPropsValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        LogDeliveryBucket: cdk.stringToCloudFormation(properties.logDeliveryBucket),\n        PublicVersionNumber: cdk.stringToCloudFormation(properties.publicVersionNumber),\n        Type: cdk.stringToCloudFormation(properties.type),\n        TypeName: cdk.stringToCloudFormation(properties.typeName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPublicTypeVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPublicTypeVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPublicTypeVersionProps>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addPropertyResult('logDeliveryBucket', 'LogDeliveryBucket', properties.LogDeliveryBucket != null ? cfn_parse.FromCloudFormation.getString(properties.LogDeliveryBucket) : undefined);\n    ret.addPropertyResult('publicVersionNumber', 'PublicVersionNumber', properties.PublicVersionNumber != null ? cfn_parse.FromCloudFormation.getString(properties.PublicVersionNumber) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('typeName', 'TypeName', properties.TypeName != null ? cfn_parse.FromCloudFormation.getString(properties.TypeName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPublicTypeVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::PublicTypeVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPublicTypeVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPublicTypeVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPublicTypeVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                        \n    public readonly attrPublicTypeArn: string;\n\n                                                                                                               \n    public readonly attrPublisherId: string;\n\n                                                                                                                                                 \n    public readonly attrTypeVersionArn: string;\n\n                                                                                                                                                                                                                                                                                                                                      \n    public arn: string | undefined;\n\nn    public logDeliveryBucket: string | undefined;\n\nn    public publicVersionNumber: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                       \n    public type: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                           \n    public typeName: string | undefined;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnPublicTypeVersionProps = {}) {\n        super(scope, id, { type: CfnPublicTypeVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrPublicTypeArn = cdk.Token.asString(this.getAtt('PublicTypeArn'));\n        this.attrPublisherId = cdk.Token.asString(this.getAtt('PublisherId'));\n        this.attrTypeVersionArn = cdk.Token.asString(this.getAtt('TypeVersionArn'));\n\n        this.arn = props.arn;\n        this.logDeliveryBucket = props.logDeliveryBucket;\n        this.publicVersionNumber = props.publicVersionNumber;\n        this.type = props.type;\n        this.typeName = props.typeName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPublicTypeVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            arn: this.arn,\n            logDeliveryBucket: this.logDeliveryBucket,\n            publicVersionNumber: this.publicVersionNumber,\n            type: this.type,\n            typeName: this.typeName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPublicTypeVersionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                             \nexport interface CfnPublisherProps {\n\nn    readonly acceptTermsAndConditions: boolean | cdk.IResolvable;\n\nn    readonly connectionArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPublisherProps`\n *\n * @param properties - the TypeScript properties of a `CfnPublisherProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPublisherPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceptTermsAndConditions', cdk.requiredValidator)(properties.acceptTermsAndConditions));\n    errors.collect(cdk.propertyValidator('acceptTermsAndConditions', cdk.validateBoolean)(properties.acceptTermsAndConditions));\n    errors.collect(cdk.propertyValidator('connectionArn', cdk.validateString)(properties.connectionArn));\n    return errors.wrap('supplied properties not correct for \"CfnPublisherProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::Publisher` resource\n *\n * @param properties - the TypeScript properties of a `CfnPublisherProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::Publisher` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPublisherPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPublisherPropsValidator(properties).assertSuccess();\n    return {\n        AcceptTermsAndConditions: cdk.booleanToCloudFormation(properties.acceptTermsAndConditions),\n        ConnectionArn: cdk.stringToCloudFormation(properties.connectionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPublisherPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPublisherProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPublisherProps>();\n    ret.addPropertyResult('acceptTermsAndConditions', 'AcceptTermsAndConditions', cfn_parse.FromCloudFormation.getBoolean(properties.AcceptTermsAndConditions));\n    ret.addPropertyResult('connectionArn', 'ConnectionArn', properties.ConnectionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPublisher extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::Publisher\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPublisher {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPublisherPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPublisher(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                          \n    public readonly attrIdentityProvider: string;\n\n                                                                                                                                                                    \n    public readonly attrPublisherId: string;\n\n                                                                                                                                      \n    public readonly attrPublisherProfile: string;\n\n                                                                                                         \n    public readonly attrPublisherStatus: string;\n\nn    public acceptTermsAndConditions: boolean | cdk.IResolvable;\n\nn    public connectionArn: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnPublisherProps) {\n        super(scope, id, { type: CfnPublisher.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'acceptTermsAndConditions', this);\n        this.attrIdentityProvider = cdk.Token.asString(this.getAtt('IdentityProvider'));\n        this.attrPublisherId = cdk.Token.asString(this.getAtt('PublisherId'));\n        this.attrPublisherProfile = cdk.Token.asString(this.getAtt('PublisherProfile'));\n        this.attrPublisherStatus = cdk.Token.asString(this.getAtt('PublisherStatus'));\n\n        this.acceptTermsAndConditions = props.acceptTermsAndConditions;\n        this.connectionArn = props.connectionArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPublisher.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            acceptTermsAndConditions: this.acceptTermsAndConditions,\n            connectionArn: this.connectionArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPublisherPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                       \nexport interface CfnResourceDefaultVersionProps {\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly typeName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly typeVersionArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly versionId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourceDefaultVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourceDefaultVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceDefaultVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('typeName', cdk.validateString)(properties.typeName));\n    errors.collect(cdk.propertyValidator('typeVersionArn', cdk.validateString)(properties.typeVersionArn));\n    errors.collect(cdk.propertyValidator('versionId', cdk.validateString)(properties.versionId));\n    return errors.wrap('supplied properties not correct for \"CfnResourceDefaultVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::ResourceDefaultVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourceDefaultVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::ResourceDefaultVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceDefaultVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceDefaultVersionPropsValidator(properties).assertSuccess();\n    return {\n        TypeName: cdk.stringToCloudFormation(properties.typeName),\n        TypeVersionArn: cdk.stringToCloudFormation(properties.typeVersionArn),\n        VersionId: cdk.stringToCloudFormation(properties.versionId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceDefaultVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceDefaultVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceDefaultVersionProps>();\n    ret.addPropertyResult('typeName', 'TypeName', properties.TypeName != null ? cfn_parse.FromCloudFormation.getString(properties.TypeName) : undefined);\n    ret.addPropertyResult('typeVersionArn', 'TypeVersionArn', properties.TypeVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.TypeVersionArn) : undefined);\n    ret.addPropertyResult('versionId', 'VersionId', properties.VersionId != null ? cfn_parse.FromCloudFormation.getString(properties.VersionId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnResourceDefaultVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::ResourceDefaultVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResourceDefaultVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourceDefaultVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResourceDefaultVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public typeName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public typeVersionArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public versionId: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnResourceDefaultVersionProps = {}) {\n        super(scope, id, { type: CfnResourceDefaultVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.typeName = props.typeName;\n        this.typeVersionArn = props.typeVersionArn;\n        this.versionId = props.versionId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResourceDefaultVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            typeName: this.typeName,\n            typeVersionArn: this.typeVersionArn,\n            versionId: this.versionId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourceDefaultVersionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnResourceVersionProps {\n\nn    readonly schemaHandlerPackage: string;\n\nn    readonly typeName: string;\n\nn    readonly executionRoleArn?: string;\n\n                                                                                                                                                                                                                                                            \n    readonly loggingConfig?: CfnResourceVersion.LoggingConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourceVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourceVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('executionRoleArn', cdk.validateString)(properties.executionRoleArn));\n    errors.collect(cdk.propertyValidator('loggingConfig', CfnResourceVersion_LoggingConfigPropertyValidator)(properties.loggingConfig));\n    errors.collect(cdk.propertyValidator('schemaHandlerPackage', cdk.requiredValidator)(properties.schemaHandlerPackage));\n    errors.collect(cdk.propertyValidator('schemaHandlerPackage', cdk.validateString)(properties.schemaHandlerPackage));\n    errors.collect(cdk.propertyValidator('typeName', cdk.requiredValidator)(properties.typeName));\n    errors.collect(cdk.propertyValidator('typeName', cdk.validateString)(properties.typeName));\n    return errors.wrap('supplied properties not correct for \"CfnResourceVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::ResourceVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourceVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::ResourceVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceVersionPropsValidator(properties).assertSuccess();\n    return {\n        SchemaHandlerPackage: cdk.stringToCloudFormation(properties.schemaHandlerPackage),\n        TypeName: cdk.stringToCloudFormation(properties.typeName),\n        ExecutionRoleArn: cdk.stringToCloudFormation(properties.executionRoleArn),\n        LoggingConfig: cfnResourceVersionLoggingConfigPropertyToCloudFormation(properties.loggingConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceVersionProps>();\n    ret.addPropertyResult('schemaHandlerPackage', 'SchemaHandlerPackage', cfn_parse.FromCloudFormation.getString(properties.SchemaHandlerPackage));\n    ret.addPropertyResult('typeName', 'TypeName', cfn_parse.FromCloudFormation.getString(properties.TypeName));\n    ret.addPropertyResult('executionRoleArn', 'ExecutionRoleArn', properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : undefined);\n    ret.addPropertyResult('loggingConfig', 'LoggingConfig', properties.LoggingConfig != null ? CfnResourceVersionLoggingConfigPropertyFromCloudFormation(properties.LoggingConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResourceVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::ResourceVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResourceVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourceVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResourceVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                  \n    public readonly attrArn: string;\n\n                                                                                                                                   \n    public readonly attrIsDefaultVersion: cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public readonly attrProvisioningType: string;\n\n                                                                                                              \n    public readonly attrTypeArn: string;\n\n                                                                                                                                                                                                                                               \n    public readonly attrVersionId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly attrVisibility: string;\n\nn    public schemaHandlerPackage: string;\n\nn    public typeName: string;\n\nn    public executionRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                                            \n    public loggingConfig: CfnResourceVersion.LoggingConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnResourceVersionProps) {\n        super(scope, id, { type: CfnResourceVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'schemaHandlerPackage', this);\n        cdk.requireProperty(props, 'typeName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrIsDefaultVersion = this.getAtt('IsDefaultVersion');\n        this.attrProvisioningType = cdk.Token.asString(this.getAtt('ProvisioningType'));\n        this.attrTypeArn = cdk.Token.asString(this.getAtt('TypeArn'));\n        this.attrVersionId = cdk.Token.asString(this.getAtt('VersionId'));\n        this.attrVisibility = cdk.Token.asString(this.getAtt('Visibility'));\n\n        this.schemaHandlerPackage = props.schemaHandlerPackage;\n        this.typeName = props.typeName;\n        this.executionRoleArn = props.executionRoleArn;\n        this.loggingConfig = props.loggingConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResourceVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            schemaHandlerPackage: this.schemaHandlerPackage,\n            typeName: this.typeName,\n            executionRoleArn: this.executionRoleArn,\n            loggingConfig: this.loggingConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourceVersionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnResourceVersion {\n                                                                                                                                                                                                                                                                            \n    export interface LoggingConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly logGroupName?: string;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly logRoleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceVersion_LoggingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('logRoleArn', cdk.validateString)(properties.logRoleArn));\n    return errors.wrap('supplied properties not correct for \"LoggingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::ResourceVersion.LoggingConfig` resource\n *\n * @param properties - the TypeScript properties of a `LoggingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::ResourceVersion.LoggingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceVersionLoggingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceVersion_LoggingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n        LogRoleArn: cdk.stringToCloudFormation(properties.logRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceVersionLoggingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceVersion.LoggingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceVersion.LoggingConfigProperty>();\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addPropertyResult('logRoleArn', 'LogRoleArn', properties.LogRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.LogRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                        \nexport interface CfnStackProps {\n\nn    readonly templateUrl: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly notificationArns?: string[];\n\nn    readonly parameters?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    readonly tags?: cdk.CfnTag[];\n\nn    readonly timeoutInMinutes?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStackProps`\n *\n * @param properties - the TypeScript properties of a `CfnStackProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notificationArns', cdk.listValidator(cdk.validateString))(properties.notificationArns));\n    errors.collect(cdk.propertyValidator('parameters', cdk.hashValidator(cdk.validateString))(properties.parameters));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('templateUrl', cdk.requiredValidator)(properties.templateUrl));\n    errors.collect(cdk.propertyValidator('templateUrl', cdk.validateString)(properties.templateUrl));\n    errors.collect(cdk.propertyValidator('timeoutInMinutes', cdk.validateNumber)(properties.timeoutInMinutes));\n    return errors.wrap('supplied properties not correct for \"CfnStackProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::Stack` resource\n *\n * @param properties - the TypeScript properties of a `CfnStackProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::Stack` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackPropsValidator(properties).assertSuccess();\n    return {\n        TemplateURL: cdk.stringToCloudFormation(properties.templateUrl),\n        NotificationARNs: cdk.listMapper(cdk.stringToCloudFormation)(properties.notificationArns),\n        Parameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.parameters),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TimeoutInMinutes: cdk.numberToCloudFormation(properties.timeoutInMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackProps>();\n    ret.addPropertyResult('templateUrl', 'TemplateURL', cfn_parse.FromCloudFormation.getString(properties.TemplateURL));\n    ret.addPropertyResult('notificationArns', 'NotificationARNs', properties.NotificationARNs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NotificationARNs) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Parameters) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeoutInMinutes', 'TimeoutInMinutes', properties.TimeoutInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMinutes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStack extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::Stack\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStack {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStackPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStack(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public templateUrl: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public notificationArns: string[] | undefined;\n\nn    public parameters: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    public readonly tags: cdk.TagManager;\n\nn    public timeoutInMinutes: number | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnStackProps) {\n        super(scope, id, { type: CfnStack.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'templateUrl', this);\n\n        this.templateUrl = props.templateUrl;\n        this.notificationArns = props.notificationArns;\n        this.parameters = props.parameters;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CloudFormation::Stack\", props.tags, { tagPropertyName: 'tags' });\n        this.timeoutInMinutes = props.timeoutInMinutes;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::CloudFormation::Stack\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStack.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            templateUrl: this.templateUrl,\n            notificationArns: this.notificationArns,\n            parameters: this.parameters,\n            tags: this.tags.renderTags(),\n            timeoutInMinutes: this.timeoutInMinutes,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStackPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                           \nexport interface CfnStackSetProps {\n\nn    readonly permissionModel: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly stackSetName: string;\n\nn    readonly administrationRoleArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly autoDeployment?: CfnStackSet.AutoDeploymentProperty | cdk.IResolvable;\n\nn    readonly callAs?: string;\n\nn    readonly capabilities?: string[];\n\n                                                                                                                                                                                                                                                                                         \n    readonly description?: string;\n\nn    readonly executionRoleName?: string;\n\nn    readonly managedExecution?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                             \n    readonly operationPreferences?: CfnStackSet.OperationPreferencesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly parameters?: Array<CfnStackSet.ParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                    \n    readonly stackInstancesGroup?: Array<CfnStackSet.StackInstancesProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly templateBody?: string;\n\nn    readonly templateUrl?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStackSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnStackSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('administrationRoleArn', cdk.validateString)(properties.administrationRoleArn));\n    errors.collect(cdk.propertyValidator('autoDeployment', CfnStackSet_AutoDeploymentPropertyValidator)(properties.autoDeployment));\n    errors.collect(cdk.propertyValidator('callAs', cdk.validateString)(properties.callAs));\n    errors.collect(cdk.propertyValidator('capabilities', cdk.listValidator(cdk.validateString))(properties.capabilities));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('executionRoleName', cdk.validateString)(properties.executionRoleName));\n    errors.collect(cdk.propertyValidator('managedExecution', cdk.validateObject)(properties.managedExecution));\n    errors.collect(cdk.propertyValidator('operationPreferences', CfnStackSet_OperationPreferencesPropertyValidator)(properties.operationPreferences));\n    errors.collect(cdk.propertyValidator('parameters', cdk.listValidator(CfnStackSet_ParameterPropertyValidator))(properties.parameters));\n    errors.collect(cdk.propertyValidator('permissionModel', cdk.requiredValidator)(properties.permissionModel));\n    errors.collect(cdk.propertyValidator('permissionModel', cdk.validateString)(properties.permissionModel));\n    errors.collect(cdk.propertyValidator('stackInstancesGroup', cdk.listValidator(CfnStackSet_StackInstancesPropertyValidator))(properties.stackInstancesGroup));\n    errors.collect(cdk.propertyValidator('stackSetName', cdk.requiredValidator)(properties.stackSetName));\n    errors.collect(cdk.propertyValidator('stackSetName', cdk.validateString)(properties.stackSetName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('templateBody', cdk.validateString)(properties.templateBody));\n    errors.collect(cdk.propertyValidator('templateUrl', cdk.validateString)(properties.templateUrl));\n    return errors.wrap('supplied properties not correct for \"CfnStackSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnStackSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackSetPropsValidator(properties).assertSuccess();\n    return {\n        PermissionModel: cdk.stringToCloudFormation(properties.permissionModel),\n        StackSetName: cdk.stringToCloudFormation(properties.stackSetName),\n        AdministrationRoleARN: cdk.stringToCloudFormation(properties.administrationRoleArn),\n        AutoDeployment: cfnStackSetAutoDeploymentPropertyToCloudFormation(properties.autoDeployment),\n        CallAs: cdk.stringToCloudFormation(properties.callAs),\n        Capabilities: cdk.listMapper(cdk.stringToCloudFormation)(properties.capabilities),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ExecutionRoleName: cdk.stringToCloudFormation(properties.executionRoleName),\n        ManagedExecution: cdk.objectToCloudFormation(properties.managedExecution),\n        OperationPreferences: cfnStackSetOperationPreferencesPropertyToCloudFormation(properties.operationPreferences),\n        Parameters: cdk.listMapper(cfnStackSetParameterPropertyToCloudFormation)(properties.parameters),\n        StackInstancesGroup: cdk.listMapper(cfnStackSetStackInstancesPropertyToCloudFormation)(properties.stackInstancesGroup),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TemplateBody: cdk.stringToCloudFormation(properties.templateBody),\n        TemplateURL: cdk.stringToCloudFormation(properties.templateUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackSetProps>();\n    ret.addPropertyResult('permissionModel', 'PermissionModel', cfn_parse.FromCloudFormation.getString(properties.PermissionModel));\n    ret.addPropertyResult('stackSetName', 'StackSetName', cfn_parse.FromCloudFormation.getString(properties.StackSetName));\n    ret.addPropertyResult('administrationRoleArn', 'AdministrationRoleARN', properties.AdministrationRoleARN != null ? cfn_parse.FromCloudFormation.getString(properties.AdministrationRoleARN) : undefined);\n    ret.addPropertyResult('autoDeployment', 'AutoDeployment', properties.AutoDeployment != null ? CfnStackSetAutoDeploymentPropertyFromCloudFormation(properties.AutoDeployment) : undefined);\n    ret.addPropertyResult('callAs', 'CallAs', properties.CallAs != null ? cfn_parse.FromCloudFormation.getString(properties.CallAs) : undefined);\n    ret.addPropertyResult('capabilities', 'Capabilities', properties.Capabilities != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Capabilities) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('executionRoleName', 'ExecutionRoleName', properties.ExecutionRoleName != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleName) : undefined);\n    ret.addPropertyResult('managedExecution', 'ManagedExecution', properties.ManagedExecution != null ? cfn_parse.FromCloudFormation.getAny(properties.ManagedExecution) : undefined);\n    ret.addPropertyResult('operationPreferences', 'OperationPreferences', properties.OperationPreferences != null ? CfnStackSetOperationPreferencesPropertyFromCloudFormation(properties.OperationPreferences) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getArray(CfnStackSetParameterPropertyFromCloudFormation)(properties.Parameters) : undefined);\n    ret.addPropertyResult('stackInstancesGroup', 'StackInstancesGroup', properties.StackInstancesGroup != null ? cfn_parse.FromCloudFormation.getArray(CfnStackSetStackInstancesPropertyFromCloudFormation)(properties.StackInstancesGroup) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('templateBody', 'TemplateBody', properties.TemplateBody != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateBody) : undefined);\n    ret.addPropertyResult('templateUrl', 'TemplateURL', properties.TemplateURL != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateURL) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStackSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::StackSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStackSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStackSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStackSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                           \n    public readonly attrStackSetId: string;\n\nn    public permissionModel: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public stackSetName: string;\n\nn    public administrationRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    public autoDeployment: CfnStackSet.AutoDeploymentProperty | cdk.IResolvable | undefined;\n\nn    public callAs: string | undefined;\n\nn    public capabilities: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                         \n    public description: string | undefined;\n\nn    public executionRoleName: string | undefined;\n\nn    public managedExecution: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                             \n    public operationPreferences: CfnStackSet.OperationPreferencesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    public parameters: Array<CfnStackSet.ParameterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public stackInstancesGroup: Array<CfnStackSet.StackInstancesProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\nn    public templateBody: string | undefined;\n\nn    public templateUrl: string | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnStackSetProps) {\n        super(scope, id, { type: CfnStackSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'permissionModel', this);\n        cdk.requireProperty(props, 'stackSetName', this);\n        this.attrStackSetId = cdk.Token.asString(this.getAtt('StackSetId'));\n\n        this.permissionModel = props.permissionModel;\n        this.stackSetName = props.stackSetName;\n        this.administrationRoleArn = props.administrationRoleArn;\n        this.autoDeployment = props.autoDeployment;\n        this.callAs = props.callAs;\n        this.capabilities = props.capabilities;\n        this.description = props.description;\n        this.executionRoleName = props.executionRoleName;\n        this.managedExecution = props.managedExecution;\n        this.operationPreferences = props.operationPreferences;\n        this.parameters = props.parameters;\n        this.stackInstancesGroup = props.stackInstancesGroup;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CloudFormation::StackSet\", props.tags, { tagPropertyName: 'tags' });\n        this.templateBody = props.templateBody;\n        this.templateUrl = props.templateUrl;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStackSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            permissionModel: this.permissionModel,\n            stackSetName: this.stackSetName,\n            administrationRoleArn: this.administrationRoleArn,\n            autoDeployment: this.autoDeployment,\n            callAs: this.callAs,\n            capabilities: this.capabilities,\n            description: this.description,\n            executionRoleName: this.executionRoleName,\n            managedExecution: this.managedExecution,\n            operationPreferences: this.operationPreferences,\n            parameters: this.parameters,\n            stackInstancesGroup: this.stackInstancesGroup,\n            tags: this.tags.renderTags(),\n            templateBody: this.templateBody,\n            templateUrl: this.templateUrl,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStackSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStackSet {\n                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface AutoDeploymentProperty {\nn        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly retainStacksOnAccountRemoval?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoDeploymentProperty`\n *\n * @param properties - the TypeScript properties of a `AutoDeploymentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackSet_AutoDeploymentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('retainStacksOnAccountRemoval', cdk.validateBoolean)(properties.retainStacksOnAccountRemoval));\n    return errors.wrap('supplied properties not correct for \"AutoDeploymentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.AutoDeployment` resource\n *\n * @param properties - the TypeScript properties of a `AutoDeploymentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.AutoDeployment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackSetAutoDeploymentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackSet_AutoDeploymentPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        RetainStacksOnAccountRemoval: cdk.booleanToCloudFormation(properties.retainStacksOnAccountRemoval),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackSetAutoDeploymentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackSet.AutoDeploymentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackSet.AutoDeploymentProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('retainStacksOnAccountRemoval', 'RetainStacksOnAccountRemoval', properties.RetainStacksOnAccountRemoval != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RetainStacksOnAccountRemoval) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStackSet {\n                                                                                                                                                                                                                                                                                                                               \n    export interface DeploymentTargetsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly accounts?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly organizationalUnitIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentTargetsProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentTargetsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackSet_DeploymentTargetsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accounts', cdk.listValidator(cdk.validateString))(properties.accounts));\n    errors.collect(cdk.propertyValidator('organizationalUnitIds', cdk.listValidator(cdk.validateString))(properties.organizationalUnitIds));\n    return errors.wrap('supplied properties not correct for \"DeploymentTargetsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.DeploymentTargets` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentTargetsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.DeploymentTargets` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackSetDeploymentTargetsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackSet_DeploymentTargetsPropertyValidator(properties).assertSuccess();\n    return {\n        Accounts: cdk.listMapper(cdk.stringToCloudFormation)(properties.accounts),\n        OrganizationalUnitIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationalUnitIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackSetDeploymentTargetsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackSet.DeploymentTargetsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackSet.DeploymentTargetsProperty>();\n    ret.addPropertyResult('accounts', 'Accounts', properties.Accounts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Accounts) : undefined);\n    ret.addPropertyResult('organizationalUnitIds', 'OrganizationalUnitIds', properties.OrganizationalUnitIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationalUnitIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStackSet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface OperationPreferencesProperty {\nn        readonly failureToleranceCount?: number;\nn        readonly failureTolerancePercentage?: number;\nn        readonly maxConcurrentCount?: number;\nn        readonly maxConcurrentPercentage?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly regionConcurrencyType?: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly regionOrder?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OperationPreferencesProperty`\n *\n * @param properties - the TypeScript properties of a `OperationPreferencesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackSet_OperationPreferencesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('failureToleranceCount', cdk.validateNumber)(properties.failureToleranceCount));\n    errors.collect(cdk.propertyValidator('failureTolerancePercentage', cdk.validateNumber)(properties.failureTolerancePercentage));\n    errors.collect(cdk.propertyValidator('maxConcurrentCount', cdk.validateNumber)(properties.maxConcurrentCount));\n    errors.collect(cdk.propertyValidator('maxConcurrentPercentage', cdk.validateNumber)(properties.maxConcurrentPercentage));\n    errors.collect(cdk.propertyValidator('regionConcurrencyType', cdk.validateString)(properties.regionConcurrencyType));\n    errors.collect(cdk.propertyValidator('regionOrder', cdk.listValidator(cdk.validateString))(properties.regionOrder));\n    return errors.wrap('supplied properties not correct for \"OperationPreferencesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.OperationPreferences` resource\n *\n * @param properties - the TypeScript properties of a `OperationPreferencesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.OperationPreferences` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackSetOperationPreferencesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackSet_OperationPreferencesPropertyValidator(properties).assertSuccess();\n    return {\n        FailureToleranceCount: cdk.numberToCloudFormation(properties.failureToleranceCount),\n        FailureTolerancePercentage: cdk.numberToCloudFormation(properties.failureTolerancePercentage),\n        MaxConcurrentCount: cdk.numberToCloudFormation(properties.maxConcurrentCount),\n        MaxConcurrentPercentage: cdk.numberToCloudFormation(properties.maxConcurrentPercentage),\n        RegionConcurrencyType: cdk.stringToCloudFormation(properties.regionConcurrencyType),\n        RegionOrder: cdk.listMapper(cdk.stringToCloudFormation)(properties.regionOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackSetOperationPreferencesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackSet.OperationPreferencesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackSet.OperationPreferencesProperty>();\n    ret.addPropertyResult('failureToleranceCount', 'FailureToleranceCount', properties.FailureToleranceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.FailureToleranceCount) : undefined);\n    ret.addPropertyResult('failureTolerancePercentage', 'FailureTolerancePercentage', properties.FailureTolerancePercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.FailureTolerancePercentage) : undefined);\n    ret.addPropertyResult('maxConcurrentCount', 'MaxConcurrentCount', properties.MaxConcurrentCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentCount) : undefined);\n    ret.addPropertyResult('maxConcurrentPercentage', 'MaxConcurrentPercentage', properties.MaxConcurrentPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentPercentage) : undefined);\n    ret.addPropertyResult('regionConcurrencyType', 'RegionConcurrencyType', properties.RegionConcurrencyType != null ? cfn_parse.FromCloudFormation.getString(properties.RegionConcurrencyType) : undefined);\n    ret.addPropertyResult('regionOrder', 'RegionOrder', properties.RegionOrder != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RegionOrder) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStackSet {\n                                                                                                                                                                                                                                        \n    export interface ParameterProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly parameterKey: string;\n                                                                                                                                                                                                                                                                                      \n        readonly parameterValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackSet_ParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parameterKey', cdk.requiredValidator)(properties.parameterKey));\n    errors.collect(cdk.propertyValidator('parameterKey', cdk.validateString)(properties.parameterKey));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.requiredValidator)(properties.parameterValue));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"ParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.Parameter` resource\n *\n * @param properties - the TypeScript properties of a `ParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.Parameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackSetParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackSet_ParameterPropertyValidator(properties).assertSuccess();\n    return {\n        ParameterKey: cdk.stringToCloudFormation(properties.parameterKey),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackSetParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackSet.ParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackSet.ParameterProperty>();\n    ret.addPropertyResult('parameterKey', 'ParameterKey', cfn_parse.FromCloudFormation.getString(properties.ParameterKey));\n    ret.addPropertyResult('parameterValue', 'ParameterValue', cfn_parse.FromCloudFormation.getString(properties.ParameterValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStackSet {\n                                                                                                                                                                                                                                                                           \n    export interface StackInstancesProperty {\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly deploymentTargets: CfnStackSet.DeploymentTargetsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly parameterOverrides?: Array<CfnStackSet.ParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly regions: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StackInstancesProperty`\n *\n * @param properties - the TypeScript properties of a `StackInstancesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStackSet_StackInstancesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentTargets', cdk.requiredValidator)(properties.deploymentTargets));\n    errors.collect(cdk.propertyValidator('deploymentTargets', CfnStackSet_DeploymentTargetsPropertyValidator)(properties.deploymentTargets));\n    errors.collect(cdk.propertyValidator('parameterOverrides', cdk.listValidator(CfnStackSet_ParameterPropertyValidator))(properties.parameterOverrides));\n    errors.collect(cdk.propertyValidator('regions', cdk.requiredValidator)(properties.regions));\n    errors.collect(cdk.propertyValidator('regions', cdk.listValidator(cdk.validateString))(properties.regions));\n    return errors.wrap('supplied properties not correct for \"StackInstancesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.StackInstances` resource\n *\n * @param properties - the TypeScript properties of a `StackInstancesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::StackSet.StackInstances` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStackSetStackInstancesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStackSet_StackInstancesPropertyValidator(properties).assertSuccess();\n    return {\n        DeploymentTargets: cfnStackSetDeploymentTargetsPropertyToCloudFormation(properties.deploymentTargets),\n        ParameterOverrides: cdk.listMapper(cfnStackSetParameterPropertyToCloudFormation)(properties.parameterOverrides),\n        Regions: cdk.listMapper(cdk.stringToCloudFormation)(properties.regions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStackSetStackInstancesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStackSet.StackInstancesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStackSet.StackInstancesProperty>();\n    ret.addPropertyResult('deploymentTargets', 'DeploymentTargets', CfnStackSetDeploymentTargetsPropertyFromCloudFormation(properties.DeploymentTargets));\n    ret.addPropertyResult('parameterOverrides', 'ParameterOverrides', properties.ParameterOverrides != null ? cfn_parse.FromCloudFormation.getArray(CfnStackSetParameterPropertyFromCloudFormation)(properties.ParameterOverrides) : undefined);\n    ret.addPropertyResult('regions', 'Regions', cfn_parse.FromCloudFormation.getStringArray(properties.Regions));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnTypeActivationProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly autoUpdate?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    readonly executionRoleArn?: string;\n\n                                                                                                                                                                                                                                                                      \n    readonly loggingConfig?: CfnTypeActivation.LoggingConfigProperty | cdk.IResolvable;\n\nn    readonly majorVersion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                             \n    readonly publicTypeArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    readonly publisherId?: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly type?: string;\n\n                                                                                                                                                                                                                                                                                                                                         \n    readonly typeName?: string;\n\nn    readonly typeNameAlias?: string;\n\nn    readonly versionBump?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTypeActivationProps`\n *\n * @param properties - the TypeScript properties of a `CfnTypeActivationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTypeActivationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoUpdate', cdk.validateBoolean)(properties.autoUpdate));\n    errors.collect(cdk.propertyValidator('executionRoleArn', cdk.validateString)(properties.executionRoleArn));\n    errors.collect(cdk.propertyValidator('loggingConfig', CfnTypeActivation_LoggingConfigPropertyValidator)(properties.loggingConfig));\n    errors.collect(cdk.propertyValidator('majorVersion', cdk.validateString)(properties.majorVersion));\n    errors.collect(cdk.propertyValidator('publicTypeArn', cdk.validateString)(properties.publicTypeArn));\n    errors.collect(cdk.propertyValidator('publisherId', cdk.validateString)(properties.publisherId));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('typeName', cdk.validateString)(properties.typeName));\n    errors.collect(cdk.propertyValidator('typeNameAlias', cdk.validateString)(properties.typeNameAlias));\n    errors.collect(cdk.propertyValidator('versionBump', cdk.validateString)(properties.versionBump));\n    return errors.wrap('supplied properties not correct for \"CfnTypeActivationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::TypeActivation` resource\n *\n * @param properties - the TypeScript properties of a `CfnTypeActivationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::TypeActivation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTypeActivationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTypeActivationPropsValidator(properties).assertSuccess();\n    return {\n        AutoUpdate: cdk.booleanToCloudFormation(properties.autoUpdate),\n        ExecutionRoleArn: cdk.stringToCloudFormation(properties.executionRoleArn),\n        LoggingConfig: cfnTypeActivationLoggingConfigPropertyToCloudFormation(properties.loggingConfig),\n        MajorVersion: cdk.stringToCloudFormation(properties.majorVersion),\n        PublicTypeArn: cdk.stringToCloudFormation(properties.publicTypeArn),\n        PublisherId: cdk.stringToCloudFormation(properties.publisherId),\n        Type: cdk.stringToCloudFormation(properties.type),\n        TypeName: cdk.stringToCloudFormation(properties.typeName),\n        TypeNameAlias: cdk.stringToCloudFormation(properties.typeNameAlias),\n        VersionBump: cdk.stringToCloudFormation(properties.versionBump),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTypeActivationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTypeActivationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTypeActivationProps>();\n    ret.addPropertyResult('autoUpdate', 'AutoUpdate', properties.AutoUpdate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoUpdate) : undefined);\n    ret.addPropertyResult('executionRoleArn', 'ExecutionRoleArn', properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : undefined);\n    ret.addPropertyResult('loggingConfig', 'LoggingConfig', properties.LoggingConfig != null ? CfnTypeActivationLoggingConfigPropertyFromCloudFormation(properties.LoggingConfig) : undefined);\n    ret.addPropertyResult('majorVersion', 'MajorVersion', properties.MajorVersion != null ? cfn_parse.FromCloudFormation.getString(properties.MajorVersion) : undefined);\n    ret.addPropertyResult('publicTypeArn', 'PublicTypeArn', properties.PublicTypeArn != null ? cfn_parse.FromCloudFormation.getString(properties.PublicTypeArn) : undefined);\n    ret.addPropertyResult('publisherId', 'PublisherId', properties.PublisherId != null ? cfn_parse.FromCloudFormation.getString(properties.PublisherId) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('typeName', 'TypeName', properties.TypeName != null ? cfn_parse.FromCloudFormation.getString(properties.TypeName) : undefined);\n    ret.addPropertyResult('typeNameAlias', 'TypeNameAlias', properties.TypeNameAlias != null ? cfn_parse.FromCloudFormation.getString(properties.TypeNameAlias) : undefined);\n    ret.addPropertyResult('versionBump', 'VersionBump', properties.VersionBump != null ? cfn_parse.FromCloudFormation.getString(properties.VersionBump) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTypeActivation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::TypeActivation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTypeActivation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTypeActivationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTypeActivation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                   \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public autoUpdate: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public executionRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public loggingConfig: CfnTypeActivation.LoggingConfigProperty | cdk.IResolvable | undefined;\n\nn    public majorVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                             \n    public publicTypeArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    public publisherId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                              \n    public type: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                         \n    public typeName: string | undefined;\n\nn    public typeNameAlias: string | undefined;\n\nn    public versionBump: string | undefined;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnTypeActivationProps = {}) {\n        super(scope, id, { type: CfnTypeActivation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.autoUpdate = props.autoUpdate;\n        this.executionRoleArn = props.executionRoleArn;\n        this.loggingConfig = props.loggingConfig;\n        this.majorVersion = props.majorVersion;\n        this.publicTypeArn = props.publicTypeArn;\n        this.publisherId = props.publisherId;\n        this.type = props.type;\n        this.typeName = props.typeName;\n        this.typeNameAlias = props.typeNameAlias;\n        this.versionBump = props.versionBump;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTypeActivation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            autoUpdate: this.autoUpdate,\n            executionRoleArn: this.executionRoleArn,\n            loggingConfig: this.loggingConfig,\n            majorVersion: this.majorVersion,\n            publicTypeArn: this.publicTypeArn,\n            publisherId: this.publisherId,\n            type: this.type,\n            typeName: this.typeName,\n            typeNameAlias: this.typeNameAlias,\n            versionBump: this.versionBump,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTypeActivationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTypeActivation {\n                                                                                                                                                                                                                                                                                      \n    export interface LoggingConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly logGroupName?: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly logRoleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTypeActivation_LoggingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('logRoleArn', cdk.validateString)(properties.logRoleArn));\n    return errors.wrap('supplied properties not correct for \"LoggingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::TypeActivation.LoggingConfig` resource\n *\n * @param properties - the TypeScript properties of a `LoggingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::TypeActivation.LoggingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTypeActivationLoggingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTypeActivation_LoggingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n        LogRoleArn: cdk.stringToCloudFormation(properties.logRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTypeActivationLoggingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTypeActivation.LoggingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTypeActivation.LoggingConfigProperty>();\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addPropertyResult('logRoleArn', 'LogRoleArn', properties.LogRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.LogRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                        \nexport interface CfnWaitConditionProps {\n\nn    readonly count?: number;\n\nn    readonly handle?: string;\n\nn    readonly timeout?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnWaitConditionProps`\n *\n * @param properties - the TypeScript properties of a `CfnWaitConditionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnWaitConditionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('count', cdk.validateNumber)(properties.count));\n    errors.collect(cdk.propertyValidator('handle', cdk.validateString)(properties.handle));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateString)(properties.timeout));\n    return errors.wrap('supplied properties not correct for \"CfnWaitConditionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFormation::WaitCondition` resource\n *\n * @param properties - the TypeScript properties of a `CfnWaitConditionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFormation::WaitCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWaitConditionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWaitConditionPropsValidator(properties).assertSuccess();\n    return {\n        Count: cdk.numberToCloudFormation(properties.count),\n        Handle: cdk.stringToCloudFormation(properties.handle),\n        Timeout: cdk.stringToCloudFormation(properties.timeout),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWaitConditionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWaitConditionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWaitConditionProps>();\n    ret.addPropertyResult('count', 'Count', properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : undefined);\n    ret.addPropertyResult('handle', 'Handle', properties.Handle != null ? cfn_parse.FromCloudFormation.getString(properties.Handle) : undefined);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getString(properties.Timeout) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnWaitCondition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::WaitCondition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWaitCondition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnWaitConditionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnWaitCondition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public readonly attrData: cdk.IResolvable;\n\nn    public count: number | undefined;\n\nn    public handle: string | undefined;\n\nn    public timeout: string | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnWaitConditionProps = {}) {\n        super(scope, id, { type: CfnWaitCondition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrData = this.getAtt('Data');\n\n        this.count = props.count;\n        this.handle = props.handle;\n        this.timeout = props.timeout;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWaitCondition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            count: this.count,\n            handle: this.handle,\n            timeout: this.timeout,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnWaitConditionPropsToCloudFormation(props);\n    }\n}\n\nnexport class CfnWaitConditionHandle extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFormation::WaitConditionHandle\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWaitConditionHandle {\n        resourceAttributes = resourceAttributes || {};\n        const ret = new CfnWaitConditionHandle(scope, id);\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string) {\n        super(scope, id, { type: CfnWaitConditionHandle.CFN_RESOURCE_TYPE_NAME });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWaitConditionHandle.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
