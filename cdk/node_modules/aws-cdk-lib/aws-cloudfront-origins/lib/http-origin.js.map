{
  "version": 3,
  "sources": ["http-origin.ts"],
  "sourcesContent": ["import * as cloudfront from '../../aws-cloudfront';\nimport * as cdk from '../../core';\n\n                                                                                                                    \nexport interface HttpOriginProps extends cloudfront.OriginProps {\n                                                                                                                                                         \n  readonly protocolPolicy?: cloudfront.OriginProtocolPolicy;\n\n                                                                                                                      \n  readonly originSslProtocols?: cloudfront.OriginSslPolicy[];\n\n                                                                                                   \n  readonly httpPort?: number;\n\n                                                                                                     \n  readonly httpsPort?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n  readonly readTimeout?: cdk.Duration;\n\n                                                                                                                                                                                                  \n  readonly keepaliveTimeout?: cdk.Duration;\n}\n\n                                                                                    \nexport class HttpOrigin extends cloudfront.OriginBase {\n\n  constructor(domainName: string, private readonly props: HttpOriginProps = {}) {\n    super(domainName, props);\n\n    validateSecondsInRangeOrUndefined('readTimeout', 1, 180, props.readTimeout);\n    validateSecondsInRangeOrUndefined('keepaliveTimeout', 1, 60, props.keepaliveTimeout);\n  }\n\n  protected renderCustomOriginConfig(): cloudfront.CfnDistribution.CustomOriginConfigProperty | undefined {\n    return {\n      originSslProtocols: this.props.originSslProtocols ?? [cloudfront.OriginSslPolicy.TLS_V1_2],\n      originProtocolPolicy: this.props.protocolPolicy ?? cloudfront.OriginProtocolPolicy.HTTPS_ONLY,\n      httpPort: this.props.httpPort,\n      httpsPort: this.props.httpsPort,\n      originReadTimeout: this.props.readTimeout?.toSeconds(),\n      originKeepaliveTimeout: this.props.keepaliveTimeout?.toSeconds(),\n    };\n  }\n}\n\n/**\n * Throws an error if a duration is defined and not an integer number of seconds within a range.\n */\nfunction validateSecondsInRangeOrUndefined(name: string, min: number, max: number, duration?: cdk.Duration) {\n  if (duration === undefined) { return; }\n  const value = duration.toSeconds();\n  if (!Number.isInteger(value) || value < min || value > max) {\n    throw new Error(`${name}: Must be an int between ${min} and ${max} seconds (inclusive); received ${value}.`);\n  }\n}\n"],
  "mappings": "iNAAA,WAAA,QAAA,wBAyBA,wBAAgC,YAAW,UAAU,CAEnD,YAAY,WAAqC,MAAyB,GAAE,CAC1E,MAAM,WAAY,OAD6B,KAAA,MAAA,wFAG/C,kCAAkC,cAAe,EAAG,IAAK,MAAM,aAC/D,kCAAkC,mBAAoB,EAAG,GAAI,MAAM,kBAG3D,0BAAwB,iBAChC,MAAO,CACL,mBAAkB,IAAE,KAAK,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,CAAC,WAAW,gBAAgB,UACjF,qBAAoB,IAAE,KAAK,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,WAAW,qBAAqB,WACnF,SAAU,KAAK,MAAM,SACrB,UAAW,KAAK,MAAM,UACtB,kBAAiB,IAAE,KAAK,MAAM,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,YAC3C,uBAAsB,IAAE,KAAK,MAAM,oBAAgB,MAAA,KAAA,OAAA,OAAA,GAAE,cAhB3D,QAAA,WAAA,uHAwBA,2CAA2C,KAAc,IAAa,IAAa,SAAuB,CACxG,GAAI,WAAa,OAAa,OAC9B,KAAM,OAAQ,SAAS,YACvB,GAAI,CAAC,OAAO,UAAU,QAAU,MAAQ,KAAO,MAAQ,IACrD,KAAM,IAAI,OAAM,GAAG,gCAAgC,WAAW,qCAAqC",
  "names": []
}
