{
  "version": 3,
  "sources": ["cache-policy.ts"],
  "sourcesContent": ["import { Duration, Names, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnCachePolicy } from './cloudfront.generated';\n\n                                    \nexport interface ICachePolicy {\n                                                           \n  readonly cachePolicyId: string;\n}\n\n                                                 \nexport interface CachePolicyProps {\n                                                                                                                                                                          \n  readonly cachePolicyName?: string;\n\n                                                                                   \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                           \n  readonly defaultTtl?: Duration;\n\n                                                                                                                          \n  readonly minTtl?: Duration;\n\n                                                                                                                                                                                                                                                              \n  readonly maxTtl?: Duration;\n\n                                                                                                                                                                                                                     \n  readonly cookieBehavior?: CacheCookieBehavior;\n\n                                                                                                                                                                                                       \n  readonly headerBehavior?: CacheHeaderBehavior;\n\n                                                                                                                                                                                                             \n  readonly queryStringBehavior?: CacheQueryStringBehavior;\n\n                                                                                                                                                                \n  readonly enableAcceptEncodingGzip?: boolean;\n\n                                                                                                                                                              \n  readonly enableAcceptEncodingBrotli?: boolean;\n}\n\n                                                                                                                                                                                                   \nexport class CachePolicy extends Resource implements ICachePolicy {\n                                                                                               \n  public static readonly AMPLIFY = CachePolicy.fromManagedCachePolicy('2e54312d-136d-493c-8eb9-b001f22f67d2');\n                                                                                                                                                                                                                                              \n  public static readonly CACHING_OPTIMIZED = CachePolicy.fromManagedCachePolicy('658327ea-f89d-4fab-a63d-7e88639e58f6');\n                                                                                                                                                                                                                                                                               \n  public static readonly CACHING_OPTIMIZED_FOR_UNCOMPRESSED_OBJECTS = CachePolicy.fromManagedCachePolicy('b2884449-e4de-46a7-ac36-70bc7f1ddd6d');\n                                                                                                             \n  public static readonly CACHING_DISABLED = CachePolicy.fromManagedCachePolicy('4135ea2d-6df8-44a3-9df3-4b5a84be39ad');\n                                                                                        \n  public static readonly ELEMENTAL_MEDIA_PACKAGE = CachePolicy.fromManagedCachePolicy('08627262-05a9-4f76-9ded-b50ca2e3a84f');\n\n                                            \n  public static fromCachePolicyId(scope: Construct, id: string, cachePolicyId: string): ICachePolicy {\n    return new class extends Resource implements ICachePolicy {\n      public readonly cachePolicyId = cachePolicyId;\n    }(scope, id);\n  }\n\n  /** Use an existing managed cache policy. */\n  private static fromManagedCachePolicy(managedCachePolicyId: string): ICachePolicy {\n    return new class implements ICachePolicy {\n      public readonly cachePolicyId = managedCachePolicyId;\n    }();\n  }\n\n  public readonly cachePolicyId: string;\n\n  constructor(scope: Construct, id: string, props: CachePolicyProps = {}) {\n    super(scope, id, {\n      physicalName: props.cachePolicyName,\n    });\n\n    const cachePolicyName = props.cachePolicyName ?? `${Names.uniqueId(this)}-${Stack.of(this).region}`;\n    if (!Token.isUnresolved(cachePolicyName) && !cachePolicyName.match(/^[\\w-]+$/i)) {\n      throw new Error(`'cachePolicyName' can only include '-', '_', and alphanumeric characters, got: '${props.cachePolicyName}'`);\n    }\n\n    const minTtl = (props.minTtl ?? Duration.seconds(0)).toSeconds();\n    const defaultTtl = Math.max((props.defaultTtl ?? Duration.days(1)).toSeconds(), minTtl);\n    const maxTtl = Math.max((props.maxTtl ?? Duration.days(365)).toSeconds(), defaultTtl);\n\n    const resource = new CfnCachePolicy(this, 'Resource', {\n      cachePolicyConfig: {\n        name: cachePolicyName,\n        comment: props.comment,\n        minTtl,\n        maxTtl,\n        defaultTtl,\n        parametersInCacheKeyAndForwardedToOrigin: this.renderCacheKey(props),\n      },\n    });\n\n    this.cachePolicyId = resource.ref;\n  }\n\n  private renderCacheKey(props: CachePolicyProps): CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty {\n    const cookies = props.cookieBehavior ?? CacheCookieBehavior.none();\n    const headers = props.headerBehavior ?? CacheHeaderBehavior.none();\n    const queryStrings = props.queryStringBehavior ?? CacheQueryStringBehavior.none();\n\n    return {\n      cookiesConfig: {\n        cookieBehavior: cookies.behavior,\n        cookies: cookies.cookies,\n      },\n      headersConfig: {\n        headerBehavior: headers.behavior,\n        headers: headers.headers,\n      },\n      enableAcceptEncodingGzip: props.enableAcceptEncodingGzip ?? false,\n      enableAcceptEncodingBrotli: props.enableAcceptEncodingBrotli ?? false,\n      queryStringsConfig: {\n        queryStringBehavior: queryStrings.behavior,\n        queryStrings: queryStrings.queryStrings,\n      },\n    };\n  }\n}\n\n                                                                                                                                                                         \nexport class CacheCookieBehavior {\n                                                                                                                                                                      \n  public static none() { return new CacheCookieBehavior('none'); }\n\n                                                                                                                                                             \n  public static all() { return new CacheCookieBehavior('all'); }\n\n                                                                                                                                                      \n  public static allowList(...cookies: string[]) {\n    if (cookies.length === 0) {\n      throw new Error('At least one cookie to allow must be provided');\n    }\n    return new CacheCookieBehavior('whitelist', cookies);\n  }\n\n                                                                                                                                                                         \n  public static denyList(...cookies: string[]) {\n    if (cookies.length === 0) {\n      throw new Error('At least one cookie to deny must be provided');\n    }\n    return new CacheCookieBehavior('allExcept', cookies);\n  }\n\n                                                                                 \n  public readonly behavior: string;\n                                                                                \n  public readonly cookies?: string[];\n\n  private constructor(behavior: string, cookies?: string[]) {\n    this.behavior = behavior;\n    this.cookies = cookies;\n  }\n}\n\n                                                                                                                                                        \nexport class CacheHeaderBehavior {\n                                                                                                                                           \n  public static none() { return new CacheHeaderBehavior('none'); }\n                                                                                                                                     \n  public static allowList(...headers: string[]) {\n    if (headers.length === 0) {\n      throw new Error('At least one header to allow must be provided');\n    }\n    return new CacheHeaderBehavior('whitelist', headers);\n  }\n\n                                                                   \n  public readonly behavior: string;\n                                                            \n  public readonly headers?: string[];\n\n  private constructor(behavior: string, headers?: string[]) {\n    this.behavior = behavior;\n    this.headers = headers;\n  }\n}\n\n                                                                                                                                                                                   \nexport class CacheQueryStringBehavior {\n                                                                                                                                                                            \n  public static none() { return new CacheQueryStringBehavior('none'); }\n\n                                                                                                                                                                   \n  public static all() { return new CacheQueryStringBehavior('all'); }\n\n                                                                                                                                                           \n  public static allowList(...queryStrings: string[]) {\n    if (queryStrings.length === 0) {\n      throw new Error('At least one query string to allow must be provided');\n    }\n    return new CacheQueryStringBehavior('whitelist', queryStrings);\n  }\n\n                                                                                                                                                                                    \n  public static denyList(...queryStrings: string[]) {\n    if (queryStrings.length === 0) {\n      throw new Error('At least one query string to deny must be provided');\n    }\n    return new CacheQueryStringBehavior('allExcept', queryStrings);\n  }\n\n                                                                                              \n  public readonly behavior: string;\n                                                                                      \n  public readonly queryStrings?: string[];\n\n  private constructor(behavior: string, queryStrings?: string[]) {\n    this.behavior = behavior;\n    this.queryStrings = queryStrings;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
