{
  "version": 3,
  "sources": ["cloudfront.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:01:52.388Z\",\"fingerprint\":\"nQeR6s0W/W82UnEiB3SKuUfYfBmjN3BUEX/+opyk5L0=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                             \nexport interface CfnCachePolicyProps {\n\n                                                                                                                                                                                                                              \n    readonly cachePolicyConfig: CfnCachePolicy.CachePolicyConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCachePolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnCachePolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCachePolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cachePolicyConfig', cdk.requiredValidator)(properties.cachePolicyConfig));\n    errors.collect(cdk.propertyValidator('cachePolicyConfig', CfnCachePolicy_CachePolicyConfigPropertyValidator)(properties.cachePolicyConfig));\n    return errors.wrap('supplied properties not correct for \"CfnCachePolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnCachePolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCachePolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCachePolicyPropsValidator(properties).assertSuccess();\n    return {\n        CachePolicyConfig: cfnCachePolicyCachePolicyConfigPropertyToCloudFormation(properties.cachePolicyConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCachePolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCachePolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCachePolicyProps>();\n    ret.addPropertyResult('cachePolicyConfig', 'CachePolicyConfig', CfnCachePolicyCachePolicyConfigPropertyFromCloudFormation(properties.CachePolicyConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCachePolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::CachePolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCachePolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCachePolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCachePolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                           \n    public readonly attrId: string;\n\n                                                                                                                                  \n    public readonly attrLastModifiedTime: string;\n\n                                                                                                                                                                                                                              \n    public cachePolicyConfig: CfnCachePolicy.CachePolicyConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnCachePolicyProps) {\n        super(scope, id, { type: CfnCachePolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cachePolicyConfig', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrLastModifiedTime = cdk.Token.asString(this.getAtt('LastModifiedTime'));\n\n        this.cachePolicyConfig = props.cachePolicyConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCachePolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cachePolicyConfig: this.cachePolicyConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCachePolicyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCachePolicy {\nn    export interface CachePolicyConfigProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly comment?: string;\nn        readonly defaultTtl: number;\nn        readonly maxTtl: number;\nn        readonly minTtl: number;\n                                                                                                                                                                                                                                                                                       \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly parametersInCacheKeyAndForwardedToOrigin: CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CachePolicyConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CachePolicyConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCachePolicy_CachePolicyConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('defaultTtl', cdk.requiredValidator)(properties.defaultTtl));\n    errors.collect(cdk.propertyValidator('defaultTtl', cdk.validateNumber)(properties.defaultTtl));\n    errors.collect(cdk.propertyValidator('maxTtl', cdk.requiredValidator)(properties.maxTtl));\n    errors.collect(cdk.propertyValidator('maxTtl', cdk.validateNumber)(properties.maxTtl));\n    errors.collect(cdk.propertyValidator('minTtl', cdk.requiredValidator)(properties.minTtl));\n    errors.collect(cdk.propertyValidator('minTtl', cdk.validateNumber)(properties.minTtl));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parametersInCacheKeyAndForwardedToOrigin', cdk.requiredValidator)(properties.parametersInCacheKeyAndForwardedToOrigin));\n    errors.collect(cdk.propertyValidator('parametersInCacheKeyAndForwardedToOrigin', CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyValidator)(properties.parametersInCacheKeyAndForwardedToOrigin));\n    return errors.wrap('supplied properties not correct for \"CachePolicyConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.CachePolicyConfig` resource\n *\n * @param properties - the TypeScript properties of a `CachePolicyConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.CachePolicyConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCachePolicyCachePolicyConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCachePolicy_CachePolicyConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        DefaultTTL: cdk.numberToCloudFormation(properties.defaultTtl),\n        MaxTTL: cdk.numberToCloudFormation(properties.maxTtl),\n        MinTTL: cdk.numberToCloudFormation(properties.minTtl),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ParametersInCacheKeyAndForwardedToOrigin: cfnCachePolicyParametersInCacheKeyAndForwardedToOriginPropertyToCloudFormation(properties.parametersInCacheKeyAndForwardedToOrigin),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCachePolicyCachePolicyConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCachePolicy.CachePolicyConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCachePolicy.CachePolicyConfigProperty>();\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('defaultTtl', 'DefaultTTL', cfn_parse.FromCloudFormation.getNumber(properties.DefaultTTL));\n    ret.addPropertyResult('maxTtl', 'MaxTTL', cfn_parse.FromCloudFormation.getNumber(properties.MaxTTL));\n    ret.addPropertyResult('minTtl', 'MinTTL', cfn_parse.FromCloudFormation.getNumber(properties.MinTTL));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('parametersInCacheKeyAndForwardedToOrigin', 'ParametersInCacheKeyAndForwardedToOrigin', CfnCachePolicyParametersInCacheKeyAndForwardedToOriginPropertyFromCloudFormation(properties.ParametersInCacheKeyAndForwardedToOrigin));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCachePolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface CookiesConfigProperty {\nn        readonly cookieBehavior: string;\n                                                                                                                                                                                                                                                                       \n        readonly cookies?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CookiesConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CookiesConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCachePolicy_CookiesConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookieBehavior', cdk.requiredValidator)(properties.cookieBehavior));\n    errors.collect(cdk.propertyValidator('cookieBehavior', cdk.validateString)(properties.cookieBehavior));\n    errors.collect(cdk.propertyValidator('cookies', cdk.listValidator(cdk.validateString))(properties.cookies));\n    return errors.wrap('supplied properties not correct for \"CookiesConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.CookiesConfig` resource\n *\n * @param properties - the TypeScript properties of a `CookiesConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.CookiesConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCachePolicyCookiesConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCachePolicy_CookiesConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CookieBehavior: cdk.stringToCloudFormation(properties.cookieBehavior),\n        Cookies: cdk.listMapper(cdk.stringToCloudFormation)(properties.cookies),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCachePolicyCookiesConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCachePolicy.CookiesConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCachePolicy.CookiesConfigProperty>();\n    ret.addPropertyResult('cookieBehavior', 'CookieBehavior', cfn_parse.FromCloudFormation.getString(properties.CookieBehavior));\n    ret.addPropertyResult('cookies', 'Cookies', properties.Cookies != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Cookies) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCachePolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface HeadersConfigProperty {\nn        readonly headerBehavior: string;\n                                                                                                                                                                                                                                                                            \n        readonly headers?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HeadersConfigProperty`\n *\n * @param properties - the TypeScript properties of a `HeadersConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCachePolicy_HeadersConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('headerBehavior', cdk.requiredValidator)(properties.headerBehavior));\n    errors.collect(cdk.propertyValidator('headerBehavior', cdk.validateString)(properties.headerBehavior));\n    errors.collect(cdk.propertyValidator('headers', cdk.listValidator(cdk.validateString))(properties.headers));\n    return errors.wrap('supplied properties not correct for \"HeadersConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.HeadersConfig` resource\n *\n * @param properties - the TypeScript properties of a `HeadersConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.HeadersConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCachePolicyHeadersConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCachePolicy_HeadersConfigPropertyValidator(properties).assertSuccess();\n    return {\n        HeaderBehavior: cdk.stringToCloudFormation(properties.headerBehavior),\n        Headers: cdk.listMapper(cdk.stringToCloudFormation)(properties.headers),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCachePolicyHeadersConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCachePolicy.HeadersConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCachePolicy.HeadersConfigProperty>();\n    ret.addPropertyResult('headerBehavior', 'HeaderBehavior', cfn_parse.FromCloudFormation.getString(properties.HeaderBehavior));\n    ret.addPropertyResult('headers', 'Headers', properties.Headers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Headers) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCachePolicy {\nn    export interface ParametersInCacheKeyAndForwardedToOriginProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly cookiesConfig: CfnCachePolicy.CookiesConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly enableAcceptEncodingBrotli?: boolean | cdk.IResolvable;\nn        readonly enableAcceptEncodingGzip: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly headersConfig: CfnCachePolicy.HeadersConfigProperty | cdk.IResolvable;\nn        readonly queryStringsConfig: CfnCachePolicy.QueryStringsConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParametersInCacheKeyAndForwardedToOriginProperty`\n *\n * @param properties - the TypeScript properties of a `ParametersInCacheKeyAndForwardedToOriginProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookiesConfig', cdk.requiredValidator)(properties.cookiesConfig));\n    errors.collect(cdk.propertyValidator('cookiesConfig', CfnCachePolicy_CookiesConfigPropertyValidator)(properties.cookiesConfig));\n    errors.collect(cdk.propertyValidator('enableAcceptEncodingBrotli', cdk.validateBoolean)(properties.enableAcceptEncodingBrotli));\n    errors.collect(cdk.propertyValidator('enableAcceptEncodingGzip', cdk.requiredValidator)(properties.enableAcceptEncodingGzip));\n    errors.collect(cdk.propertyValidator('enableAcceptEncodingGzip', cdk.validateBoolean)(properties.enableAcceptEncodingGzip));\n    errors.collect(cdk.propertyValidator('headersConfig', cdk.requiredValidator)(properties.headersConfig));\n    errors.collect(cdk.propertyValidator('headersConfig', CfnCachePolicy_HeadersConfigPropertyValidator)(properties.headersConfig));\n    errors.collect(cdk.propertyValidator('queryStringsConfig', cdk.requiredValidator)(properties.queryStringsConfig));\n    errors.collect(cdk.propertyValidator('queryStringsConfig', CfnCachePolicy_QueryStringsConfigPropertyValidator)(properties.queryStringsConfig));\n    return errors.wrap('supplied properties not correct for \"ParametersInCacheKeyAndForwardedToOriginProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.ParametersInCacheKeyAndForwardedToOrigin` resource\n *\n * @param properties - the TypeScript properties of a `ParametersInCacheKeyAndForwardedToOriginProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.ParametersInCacheKeyAndForwardedToOrigin` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCachePolicyParametersInCacheKeyAndForwardedToOriginPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyValidator(properties).assertSuccess();\n    return {\n        CookiesConfig: cfnCachePolicyCookiesConfigPropertyToCloudFormation(properties.cookiesConfig),\n        EnableAcceptEncodingBrotli: cdk.booleanToCloudFormation(properties.enableAcceptEncodingBrotli),\n        EnableAcceptEncodingGzip: cdk.booleanToCloudFormation(properties.enableAcceptEncodingGzip),\n        HeadersConfig: cfnCachePolicyHeadersConfigPropertyToCloudFormation(properties.headersConfig),\n        QueryStringsConfig: cfnCachePolicyQueryStringsConfigPropertyToCloudFormation(properties.queryStringsConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCachePolicyParametersInCacheKeyAndForwardedToOriginPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty>();\n    ret.addPropertyResult('cookiesConfig', 'CookiesConfig', CfnCachePolicyCookiesConfigPropertyFromCloudFormation(properties.CookiesConfig));\n    ret.addPropertyResult('enableAcceptEncodingBrotli', 'EnableAcceptEncodingBrotli', properties.EnableAcceptEncodingBrotli != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableAcceptEncodingBrotli) : undefined);\n    ret.addPropertyResult('enableAcceptEncodingGzip', 'EnableAcceptEncodingGzip', cfn_parse.FromCloudFormation.getBoolean(properties.EnableAcceptEncodingGzip));\n    ret.addPropertyResult('headersConfig', 'HeadersConfig', CfnCachePolicyHeadersConfigPropertyFromCloudFormation(properties.HeadersConfig));\n    ret.addPropertyResult('queryStringsConfig', 'QueryStringsConfig', CfnCachePolicyQueryStringsConfigPropertyFromCloudFormation(properties.QueryStringsConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCachePolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface QueryStringsConfigProperty {\nn        readonly queryStringBehavior: string;\n                                                                                                                                                                                                                                                                                            \n        readonly queryStrings?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QueryStringsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `QueryStringsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCachePolicy_QueryStringsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('queryStringBehavior', cdk.requiredValidator)(properties.queryStringBehavior));\n    errors.collect(cdk.propertyValidator('queryStringBehavior', cdk.validateString)(properties.queryStringBehavior));\n    errors.collect(cdk.propertyValidator('queryStrings', cdk.listValidator(cdk.validateString))(properties.queryStrings));\n    return errors.wrap('supplied properties not correct for \"QueryStringsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.QueryStringsConfig` resource\n *\n * @param properties - the TypeScript properties of a `QueryStringsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CachePolicy.QueryStringsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCachePolicyQueryStringsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCachePolicy_QueryStringsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        QueryStringBehavior: cdk.stringToCloudFormation(properties.queryStringBehavior),\n        QueryStrings: cdk.listMapper(cdk.stringToCloudFormation)(properties.queryStrings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCachePolicyQueryStringsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCachePolicy.QueryStringsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCachePolicy.QueryStringsConfigProperty>();\n    ret.addPropertyResult('queryStringBehavior', 'QueryStringBehavior', cfn_parse.FromCloudFormation.getString(properties.QueryStringBehavior));\n    ret.addPropertyResult('queryStrings', 'QueryStrings', properties.QueryStrings != null ? cfn_parse.FromCloudFormation.getStringArray(properties.QueryStrings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                   \nexport interface CfnCloudFrontOriginAccessIdentityProps {\n\n                                                                                                                                                                                                                                                                                                               \n    readonly cloudFrontOriginAccessIdentityConfig: CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCloudFrontOriginAccessIdentityProps`\n *\n * @param properties - the TypeScript properties of a `CfnCloudFrontOriginAccessIdentityProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCloudFrontOriginAccessIdentityPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudFrontOriginAccessIdentityConfig', cdk.requiredValidator)(properties.cloudFrontOriginAccessIdentityConfig));\n    errors.collect(cdk.propertyValidator('cloudFrontOriginAccessIdentityConfig', CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyValidator)(properties.cloudFrontOriginAccessIdentityConfig));\n    return errors.wrap('supplied properties not correct for \"CfnCloudFrontOriginAccessIdentityProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CloudFrontOriginAccessIdentity` resource\n *\n * @param properties - the TypeScript properties of a `CfnCloudFrontOriginAccessIdentityProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CloudFrontOriginAccessIdentity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCloudFrontOriginAccessIdentityPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCloudFrontOriginAccessIdentityPropsValidator(properties).assertSuccess();\n    return {\n        CloudFrontOriginAccessIdentityConfig: cfnCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfigPropertyToCloudFormation(properties.cloudFrontOriginAccessIdentityConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCloudFrontOriginAccessIdentityPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCloudFrontOriginAccessIdentityProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCloudFrontOriginAccessIdentityProps>();\n    ret.addPropertyResult('cloudFrontOriginAccessIdentityConfig', 'CloudFrontOriginAccessIdentityConfig', CfnCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfigPropertyFromCloudFormation(properties.CloudFrontOriginAccessIdentityConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCloudFrontOriginAccessIdentity extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::CloudFrontOriginAccessIdentity\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCloudFrontOriginAccessIdentity {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCloudFrontOriginAccessIdentityPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCloudFrontOriginAccessIdentity(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    public readonly attrS3CanonicalUserId: string;\n\n                                                                                                                                                                                                                                                                                                               \n    public cloudFrontOriginAccessIdentityConfig: CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnCloudFrontOriginAccessIdentityProps) {\n        super(scope, id, { type: CfnCloudFrontOriginAccessIdentity.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cloudFrontOriginAccessIdentityConfig', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrS3CanonicalUserId = cdk.Token.asString(this.getAtt('S3CanonicalUserId'));\n\n        this.cloudFrontOriginAccessIdentityConfig = props.cloudFrontOriginAccessIdentityConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCloudFrontOriginAccessIdentity.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cloudFrontOriginAccessIdentityConfig: this.cloudFrontOriginAccessIdentityConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCloudFrontOriginAccessIdentityPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCloudFrontOriginAccessIdentity {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface CloudFrontOriginAccessIdentityConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly comment: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudFrontOriginAccessIdentityConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CloudFrontOriginAccessIdentityConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.requiredValidator)(properties.comment));\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    return errors.wrap('supplied properties not correct for \"CloudFrontOriginAccessIdentityConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig` resource\n *\n * @param properties - the TypeScript properties of a `CloudFrontOriginAccessIdentityConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty>();\n    ret.addPropertyResult('comment', 'Comment', cfn_parse.FromCloudFormation.getString(properties.Comment));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                               \nexport interface CfnDistributionProps {\n\n                                                                                                                                                                                                                                                                                                                                                        \n    readonly distributionConfig: CfnDistribution.DistributionConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDistributionProps`\n *\n * @param properties - the TypeScript properties of a `CfnDistributionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistributionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('distributionConfig', cdk.requiredValidator)(properties.distributionConfig));\n    errors.collect(cdk.propertyValidator('distributionConfig', CfnDistribution_DistributionConfigPropertyValidator)(properties.distributionConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDistributionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution` resource\n *\n * @param properties - the TypeScript properties of a `CfnDistributionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistributionPropsValidator(properties).assertSuccess();\n    return {\n        DistributionConfig: cfnDistributionDistributionConfigPropertyToCloudFormation(properties.distributionConfig),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistributionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistributionProps>();\n    ret.addPropertyResult('distributionConfig', 'DistributionConfig', CfnDistributionDistributionConfigPropertyFromCloudFormation(properties.DistributionConfig));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnDistribution extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::Distribution\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDistribution {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDistributionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDistribution(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                            \n    public readonly attrDomainName: string;\n\n                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    public distributionConfig: CfnDistribution.DistributionConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnDistributionProps) {\n        super(scope, id, { type: CfnDistribution.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'distributionConfig', this);\n        this.attrDomainName = cdk.Token.asString(this.getAtt('DomainName'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.distributionConfig = props.distributionConfig;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CloudFront::Distribution\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDistribution.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            distributionConfig: this.distributionConfig,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDistributionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDistribution {\nn    export interface CacheBehaviorProperty {\nn        readonly allowedMethods?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly cachePolicyId?: string;\nn        readonly cachedMethods?: string[];\nn        readonly compress?: boolean | cdk.IResolvable;\nn        readonly defaultTtl?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly fieldLevelEncryptionId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly forwardedValues?: CfnDistribution.ForwardedValuesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly functionAssociations?: Array<CfnDistribution.FunctionAssociationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly lambdaFunctionAssociations?: Array<CfnDistribution.LambdaFunctionAssociationProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly maxTtl?: number;\nn        readonly minTtl?: number;\nn        readonly originRequestPolicyId?: string;\nn        readonly pathPattern: string;\nn        readonly realtimeLogConfigArn?: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly responseHeadersPolicyId?: string;\nn        readonly smoothStreaming?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly targetOriginId: string;\nn        readonly trustedKeyGroups?: string[];\nn        readonly trustedSigners?: string[];\nn        readonly viewerProtocolPolicy: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CacheBehaviorProperty`\n *\n * @param properties - the TypeScript properties of a `CacheBehaviorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CacheBehaviorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedMethods', cdk.listValidator(cdk.validateString))(properties.allowedMethods));\n    errors.collect(cdk.propertyValidator('cachePolicyId', cdk.validateString)(properties.cachePolicyId));\n    errors.collect(cdk.propertyValidator('cachedMethods', cdk.listValidator(cdk.validateString))(properties.cachedMethods));\n    errors.collect(cdk.propertyValidator('compress', cdk.validateBoolean)(properties.compress));\n    errors.collect(cdk.propertyValidator('defaultTtl', cdk.validateNumber)(properties.defaultTtl));\n    errors.collect(cdk.propertyValidator('fieldLevelEncryptionId', cdk.validateString)(properties.fieldLevelEncryptionId));\n    errors.collect(cdk.propertyValidator('forwardedValues', CfnDistribution_ForwardedValuesPropertyValidator)(properties.forwardedValues));\n    errors.collect(cdk.propertyValidator('functionAssociations', cdk.listValidator(CfnDistribution_FunctionAssociationPropertyValidator))(properties.functionAssociations));\n    errors.collect(cdk.propertyValidator('lambdaFunctionAssociations', cdk.listValidator(CfnDistribution_LambdaFunctionAssociationPropertyValidator))(properties.lambdaFunctionAssociations));\n    errors.collect(cdk.propertyValidator('maxTtl', cdk.validateNumber)(properties.maxTtl));\n    errors.collect(cdk.propertyValidator('minTtl', cdk.validateNumber)(properties.minTtl));\n    errors.collect(cdk.propertyValidator('originRequestPolicyId', cdk.validateString)(properties.originRequestPolicyId));\n    errors.collect(cdk.propertyValidator('pathPattern', cdk.requiredValidator)(properties.pathPattern));\n    errors.collect(cdk.propertyValidator('pathPattern', cdk.validateString)(properties.pathPattern));\n    errors.collect(cdk.propertyValidator('realtimeLogConfigArn', cdk.validateString)(properties.realtimeLogConfigArn));\n    errors.collect(cdk.propertyValidator('responseHeadersPolicyId', cdk.validateString)(properties.responseHeadersPolicyId));\n    errors.collect(cdk.propertyValidator('smoothStreaming', cdk.validateBoolean)(properties.smoothStreaming));\n    errors.collect(cdk.propertyValidator('targetOriginId', cdk.requiredValidator)(properties.targetOriginId));\n    errors.collect(cdk.propertyValidator('targetOriginId', cdk.validateString)(properties.targetOriginId));\n    errors.collect(cdk.propertyValidator('trustedKeyGroups', cdk.listValidator(cdk.validateString))(properties.trustedKeyGroups));\n    errors.collect(cdk.propertyValidator('trustedSigners', cdk.listValidator(cdk.validateString))(properties.trustedSigners));\n    errors.collect(cdk.propertyValidator('viewerProtocolPolicy', cdk.requiredValidator)(properties.viewerProtocolPolicy));\n    errors.collect(cdk.propertyValidator('viewerProtocolPolicy', cdk.validateString)(properties.viewerProtocolPolicy));\n    return errors.wrap('supplied properties not correct for \"CacheBehaviorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.CacheBehavior` resource\n *\n * @param properties - the TypeScript properties of a `CacheBehaviorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.CacheBehavior` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCacheBehaviorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CacheBehaviorPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedMethods),\n        CachePolicyId: cdk.stringToCloudFormation(properties.cachePolicyId),\n        CachedMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.cachedMethods),\n        Compress: cdk.booleanToCloudFormation(properties.compress),\n        DefaultTTL: cdk.numberToCloudFormation(properties.defaultTtl),\n        FieldLevelEncryptionId: cdk.stringToCloudFormation(properties.fieldLevelEncryptionId),\n        ForwardedValues: cfnDistributionForwardedValuesPropertyToCloudFormation(properties.forwardedValues),\n        FunctionAssociations: cdk.listMapper(cfnDistributionFunctionAssociationPropertyToCloudFormation)(properties.functionAssociations),\n        LambdaFunctionAssociations: cdk.listMapper(cfnDistributionLambdaFunctionAssociationPropertyToCloudFormation)(properties.lambdaFunctionAssociations),\n        MaxTTL: cdk.numberToCloudFormation(properties.maxTtl),\n        MinTTL: cdk.numberToCloudFormation(properties.minTtl),\n        OriginRequestPolicyId: cdk.stringToCloudFormation(properties.originRequestPolicyId),\n        PathPattern: cdk.stringToCloudFormation(properties.pathPattern),\n        RealtimeLogConfigArn: cdk.stringToCloudFormation(properties.realtimeLogConfigArn),\n        ResponseHeadersPolicyId: cdk.stringToCloudFormation(properties.responseHeadersPolicyId),\n        SmoothStreaming: cdk.booleanToCloudFormation(properties.smoothStreaming),\n        TargetOriginId: cdk.stringToCloudFormation(properties.targetOriginId),\n        TrustedKeyGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.trustedKeyGroups),\n        TrustedSigners: cdk.listMapper(cdk.stringToCloudFormation)(properties.trustedSigners),\n        ViewerProtocolPolicy: cdk.stringToCloudFormation(properties.viewerProtocolPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCacheBehaviorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CacheBehaviorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CacheBehaviorProperty>();\n    ret.addPropertyResult('allowedMethods', 'AllowedMethods', properties.AllowedMethods != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedMethods) : undefined);\n    ret.addPropertyResult('cachePolicyId', 'CachePolicyId', properties.CachePolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.CachePolicyId) : undefined);\n    ret.addPropertyResult('cachedMethods', 'CachedMethods', properties.CachedMethods != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CachedMethods) : undefined);\n    ret.addPropertyResult('compress', 'Compress', properties.Compress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Compress) : undefined);\n    ret.addPropertyResult('defaultTtl', 'DefaultTTL', properties.DefaultTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultTTL) : undefined);\n    ret.addPropertyResult('fieldLevelEncryptionId', 'FieldLevelEncryptionId', properties.FieldLevelEncryptionId != null ? cfn_parse.FromCloudFormation.getString(properties.FieldLevelEncryptionId) : undefined);\n    ret.addPropertyResult('forwardedValues', 'ForwardedValues', properties.ForwardedValues != null ? CfnDistributionForwardedValuesPropertyFromCloudFormation(properties.ForwardedValues) : undefined);\n    ret.addPropertyResult('functionAssociations', 'FunctionAssociations', properties.FunctionAssociations != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionFunctionAssociationPropertyFromCloudFormation)(properties.FunctionAssociations) : undefined);\n    ret.addPropertyResult('lambdaFunctionAssociations', 'LambdaFunctionAssociations', properties.LambdaFunctionAssociations != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionLambdaFunctionAssociationPropertyFromCloudFormation)(properties.LambdaFunctionAssociations) : undefined);\n    ret.addPropertyResult('maxTtl', 'MaxTTL', properties.MaxTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxTTL) : undefined);\n    ret.addPropertyResult('minTtl', 'MinTTL', properties.MinTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinTTL) : undefined);\n    ret.addPropertyResult('originRequestPolicyId', 'OriginRequestPolicyId', properties.OriginRequestPolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.OriginRequestPolicyId) : undefined);\n    ret.addPropertyResult('pathPattern', 'PathPattern', cfn_parse.FromCloudFormation.getString(properties.PathPattern));\n    ret.addPropertyResult('realtimeLogConfigArn', 'RealtimeLogConfigArn', properties.RealtimeLogConfigArn != null ? cfn_parse.FromCloudFormation.getString(properties.RealtimeLogConfigArn) : undefined);\n    ret.addPropertyResult('responseHeadersPolicyId', 'ResponseHeadersPolicyId', properties.ResponseHeadersPolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.ResponseHeadersPolicyId) : undefined);\n    ret.addPropertyResult('smoothStreaming', 'SmoothStreaming', properties.SmoothStreaming != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SmoothStreaming) : undefined);\n    ret.addPropertyResult('targetOriginId', 'TargetOriginId', cfn_parse.FromCloudFormation.getString(properties.TargetOriginId));\n    ret.addPropertyResult('trustedKeyGroups', 'TrustedKeyGroups', properties.TrustedKeyGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TrustedKeyGroups) : undefined);\n    ret.addPropertyResult('trustedSigners', 'TrustedSigners', properties.TrustedSigners != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TrustedSigners) : undefined);\n    ret.addPropertyResult('viewerProtocolPolicy', 'ViewerProtocolPolicy', cfn_parse.FromCloudFormation.getString(properties.ViewerProtocolPolicy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface CookiesProperty {\nn        readonly forward: string;\nn        readonly whitelistedNames?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CookiesProperty`\n *\n * @param properties - the TypeScript properties of a `CookiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CookiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('forward', cdk.requiredValidator)(properties.forward));\n    errors.collect(cdk.propertyValidator('forward', cdk.validateString)(properties.forward));\n    errors.collect(cdk.propertyValidator('whitelistedNames', cdk.listValidator(cdk.validateString))(properties.whitelistedNames));\n    return errors.wrap('supplied properties not correct for \"CookiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Cookies` resource\n *\n * @param properties - the TypeScript properties of a `CookiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Cookies` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCookiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CookiesPropertyValidator(properties).assertSuccess();\n    return {\n        Forward: cdk.stringToCloudFormation(properties.forward),\n        WhitelistedNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.whitelistedNames),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCookiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CookiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CookiesProperty>();\n    ret.addPropertyResult('forward', 'Forward', cfn_parse.FromCloudFormation.getString(properties.Forward));\n    ret.addPropertyResult('whitelistedNames', 'WhitelistedNames', properties.WhitelistedNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.WhitelistedNames) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface CustomErrorResponseProperty {\nn        readonly errorCachingMinTtl?: number;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly errorCode: number;\nn        readonly responseCode?: number;\nn        readonly responsePagePath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomErrorResponseProperty`\n *\n * @param properties - the TypeScript properties of a `CustomErrorResponseProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CustomErrorResponsePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorCachingMinTtl', cdk.validateNumber)(properties.errorCachingMinTtl));\n    errors.collect(cdk.propertyValidator('errorCode', cdk.requiredValidator)(properties.errorCode));\n    errors.collect(cdk.propertyValidator('errorCode', cdk.validateNumber)(properties.errorCode));\n    errors.collect(cdk.propertyValidator('responseCode', cdk.validateNumber)(properties.responseCode));\n    errors.collect(cdk.propertyValidator('responsePagePath', cdk.validateString)(properties.responsePagePath));\n    return errors.wrap('supplied properties not correct for \"CustomErrorResponseProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.CustomErrorResponse` resource\n *\n * @param properties - the TypeScript properties of a `CustomErrorResponseProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.CustomErrorResponse` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCustomErrorResponsePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CustomErrorResponsePropertyValidator(properties).assertSuccess();\n    return {\n        ErrorCachingMinTTL: cdk.numberToCloudFormation(properties.errorCachingMinTtl),\n        ErrorCode: cdk.numberToCloudFormation(properties.errorCode),\n        ResponseCode: cdk.numberToCloudFormation(properties.responseCode),\n        ResponsePagePath: cdk.stringToCloudFormation(properties.responsePagePath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCustomErrorResponsePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CustomErrorResponseProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CustomErrorResponseProperty>();\n    ret.addPropertyResult('errorCachingMinTtl', 'ErrorCachingMinTTL', properties.ErrorCachingMinTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.ErrorCachingMinTTL) : undefined);\n    ret.addPropertyResult('errorCode', 'ErrorCode', cfn_parse.FromCloudFormation.getNumber(properties.ErrorCode));\n    ret.addPropertyResult('responseCode', 'ResponseCode', properties.ResponseCode != null ? cfn_parse.FromCloudFormation.getNumber(properties.ResponseCode) : undefined);\n    ret.addPropertyResult('responsePagePath', 'ResponsePagePath', properties.ResponsePagePath != null ? cfn_parse.FromCloudFormation.getString(properties.ResponsePagePath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface CustomOriginConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly httpPort?: number;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly httpsPort?: number;\nn        readonly originKeepaliveTimeout?: number;\nn        readonly originProtocolPolicy: string;\nn        readonly originReadTimeout?: number;\nn        readonly originSslProtocols?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomOriginConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CustomOriginConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CustomOriginConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('httpPort', cdk.validateNumber)(properties.httpPort));\n    errors.collect(cdk.propertyValidator('httpsPort', cdk.validateNumber)(properties.httpsPort));\n    errors.collect(cdk.propertyValidator('originKeepaliveTimeout', cdk.validateNumber)(properties.originKeepaliveTimeout));\n    errors.collect(cdk.propertyValidator('originProtocolPolicy', cdk.requiredValidator)(properties.originProtocolPolicy));\n    errors.collect(cdk.propertyValidator('originProtocolPolicy', cdk.validateString)(properties.originProtocolPolicy));\n    errors.collect(cdk.propertyValidator('originReadTimeout', cdk.validateNumber)(properties.originReadTimeout));\n    errors.collect(cdk.propertyValidator('originSslProtocols', cdk.listValidator(cdk.validateString))(properties.originSslProtocols));\n    return errors.wrap('supplied properties not correct for \"CustomOriginConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.CustomOriginConfig` resource\n *\n * @param properties - the TypeScript properties of a `CustomOriginConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.CustomOriginConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCustomOriginConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CustomOriginConfigPropertyValidator(properties).assertSuccess();\n    return {\n        HTTPPort: cdk.numberToCloudFormation(properties.httpPort),\n        HTTPSPort: cdk.numberToCloudFormation(properties.httpsPort),\n        OriginKeepaliveTimeout: cdk.numberToCloudFormation(properties.originKeepaliveTimeout),\n        OriginProtocolPolicy: cdk.stringToCloudFormation(properties.originProtocolPolicy),\n        OriginReadTimeout: cdk.numberToCloudFormation(properties.originReadTimeout),\n        OriginSSLProtocols: cdk.listMapper(cdk.stringToCloudFormation)(properties.originSslProtocols),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCustomOriginConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CustomOriginConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CustomOriginConfigProperty>();\n    ret.addPropertyResult('httpPort', 'HTTPPort', properties.HTTPPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.HTTPPort) : undefined);\n    ret.addPropertyResult('httpsPort', 'HTTPSPort', properties.HTTPSPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.HTTPSPort) : undefined);\n    ret.addPropertyResult('originKeepaliveTimeout', 'OriginKeepaliveTimeout', properties.OriginKeepaliveTimeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.OriginKeepaliveTimeout) : undefined);\n    ret.addPropertyResult('originProtocolPolicy', 'OriginProtocolPolicy', cfn_parse.FromCloudFormation.getString(properties.OriginProtocolPolicy));\n    ret.addPropertyResult('originReadTimeout', 'OriginReadTimeout', properties.OriginReadTimeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.OriginReadTimeout) : undefined);\n    ret.addPropertyResult('originSslProtocols', 'OriginSSLProtocols', properties.OriginSSLProtocols != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OriginSSLProtocols) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface DefaultCacheBehaviorProperty {\nn        readonly allowedMethods?: string[];\nn        readonly cachePolicyId?: string;\nn        readonly cachedMethods?: string[];\nn        readonly compress?: boolean | cdk.IResolvable;\nn        readonly defaultTtl?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly fieldLevelEncryptionId?: string;\nn        readonly forwardedValues?: CfnDistribution.ForwardedValuesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly functionAssociations?: Array<CfnDistribution.FunctionAssociationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly lambdaFunctionAssociations?: Array<CfnDistribution.LambdaFunctionAssociationProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly maxTtl?: number;\nn        readonly minTtl?: number;\nn        readonly originRequestPolicyId?: string;\nn        readonly realtimeLogConfigArn?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly responseHeadersPolicyId?: string;\nn        readonly smoothStreaming?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly targetOriginId: string;\nn        readonly trustedKeyGroups?: string[];\nn        readonly trustedSigners?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly viewerProtocolPolicy: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DefaultCacheBehaviorProperty`\n *\n * @param properties - the TypeScript properties of a `DefaultCacheBehaviorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_DefaultCacheBehaviorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedMethods', cdk.listValidator(cdk.validateString))(properties.allowedMethods));\n    errors.collect(cdk.propertyValidator('cachePolicyId', cdk.validateString)(properties.cachePolicyId));\n    errors.collect(cdk.propertyValidator('cachedMethods', cdk.listValidator(cdk.validateString))(properties.cachedMethods));\n    errors.collect(cdk.propertyValidator('compress', cdk.validateBoolean)(properties.compress));\n    errors.collect(cdk.propertyValidator('defaultTtl', cdk.validateNumber)(properties.defaultTtl));\n    errors.collect(cdk.propertyValidator('fieldLevelEncryptionId', cdk.validateString)(properties.fieldLevelEncryptionId));\n    errors.collect(cdk.propertyValidator('forwardedValues', CfnDistribution_ForwardedValuesPropertyValidator)(properties.forwardedValues));\n    errors.collect(cdk.propertyValidator('functionAssociations', cdk.listValidator(CfnDistribution_FunctionAssociationPropertyValidator))(properties.functionAssociations));\n    errors.collect(cdk.propertyValidator('lambdaFunctionAssociations', cdk.listValidator(CfnDistribution_LambdaFunctionAssociationPropertyValidator))(properties.lambdaFunctionAssociations));\n    errors.collect(cdk.propertyValidator('maxTtl', cdk.validateNumber)(properties.maxTtl));\n    errors.collect(cdk.propertyValidator('minTtl', cdk.validateNumber)(properties.minTtl));\n    errors.collect(cdk.propertyValidator('originRequestPolicyId', cdk.validateString)(properties.originRequestPolicyId));\n    errors.collect(cdk.propertyValidator('realtimeLogConfigArn', cdk.validateString)(properties.realtimeLogConfigArn));\n    errors.collect(cdk.propertyValidator('responseHeadersPolicyId', cdk.validateString)(properties.responseHeadersPolicyId));\n    errors.collect(cdk.propertyValidator('smoothStreaming', cdk.validateBoolean)(properties.smoothStreaming));\n    errors.collect(cdk.propertyValidator('targetOriginId', cdk.requiredValidator)(properties.targetOriginId));\n    errors.collect(cdk.propertyValidator('targetOriginId', cdk.validateString)(properties.targetOriginId));\n    errors.collect(cdk.propertyValidator('trustedKeyGroups', cdk.listValidator(cdk.validateString))(properties.trustedKeyGroups));\n    errors.collect(cdk.propertyValidator('trustedSigners', cdk.listValidator(cdk.validateString))(properties.trustedSigners));\n    errors.collect(cdk.propertyValidator('viewerProtocolPolicy', cdk.requiredValidator)(properties.viewerProtocolPolicy));\n    errors.collect(cdk.propertyValidator('viewerProtocolPolicy', cdk.validateString)(properties.viewerProtocolPolicy));\n    return errors.wrap('supplied properties not correct for \"DefaultCacheBehaviorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.DefaultCacheBehavior` resource\n *\n * @param properties - the TypeScript properties of a `DefaultCacheBehaviorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.DefaultCacheBehavior` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionDefaultCacheBehaviorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_DefaultCacheBehaviorPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedMethods),\n        CachePolicyId: cdk.stringToCloudFormation(properties.cachePolicyId),\n        CachedMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.cachedMethods),\n        Compress: cdk.booleanToCloudFormation(properties.compress),\n        DefaultTTL: cdk.numberToCloudFormation(properties.defaultTtl),\n        FieldLevelEncryptionId: cdk.stringToCloudFormation(properties.fieldLevelEncryptionId),\n        ForwardedValues: cfnDistributionForwardedValuesPropertyToCloudFormation(properties.forwardedValues),\n        FunctionAssociations: cdk.listMapper(cfnDistributionFunctionAssociationPropertyToCloudFormation)(properties.functionAssociations),\n        LambdaFunctionAssociations: cdk.listMapper(cfnDistributionLambdaFunctionAssociationPropertyToCloudFormation)(properties.lambdaFunctionAssociations),\n        MaxTTL: cdk.numberToCloudFormation(properties.maxTtl),\n        MinTTL: cdk.numberToCloudFormation(properties.minTtl),\n        OriginRequestPolicyId: cdk.stringToCloudFormation(properties.originRequestPolicyId),\n        RealtimeLogConfigArn: cdk.stringToCloudFormation(properties.realtimeLogConfigArn),\n        ResponseHeadersPolicyId: cdk.stringToCloudFormation(properties.responseHeadersPolicyId),\n        SmoothStreaming: cdk.booleanToCloudFormation(properties.smoothStreaming),\n        TargetOriginId: cdk.stringToCloudFormation(properties.targetOriginId),\n        TrustedKeyGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.trustedKeyGroups),\n        TrustedSigners: cdk.listMapper(cdk.stringToCloudFormation)(properties.trustedSigners),\n        ViewerProtocolPolicy: cdk.stringToCloudFormation(properties.viewerProtocolPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionDefaultCacheBehaviorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.DefaultCacheBehaviorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.DefaultCacheBehaviorProperty>();\n    ret.addPropertyResult('allowedMethods', 'AllowedMethods', properties.AllowedMethods != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedMethods) : undefined);\n    ret.addPropertyResult('cachePolicyId', 'CachePolicyId', properties.CachePolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.CachePolicyId) : undefined);\n    ret.addPropertyResult('cachedMethods', 'CachedMethods', properties.CachedMethods != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CachedMethods) : undefined);\n    ret.addPropertyResult('compress', 'Compress', properties.Compress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Compress) : undefined);\n    ret.addPropertyResult('defaultTtl', 'DefaultTTL', properties.DefaultTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultTTL) : undefined);\n    ret.addPropertyResult('fieldLevelEncryptionId', 'FieldLevelEncryptionId', properties.FieldLevelEncryptionId != null ? cfn_parse.FromCloudFormation.getString(properties.FieldLevelEncryptionId) : undefined);\n    ret.addPropertyResult('forwardedValues', 'ForwardedValues', properties.ForwardedValues != null ? CfnDistributionForwardedValuesPropertyFromCloudFormation(properties.ForwardedValues) : undefined);\n    ret.addPropertyResult('functionAssociations', 'FunctionAssociations', properties.FunctionAssociations != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionFunctionAssociationPropertyFromCloudFormation)(properties.FunctionAssociations) : undefined);\n    ret.addPropertyResult('lambdaFunctionAssociations', 'LambdaFunctionAssociations', properties.LambdaFunctionAssociations != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionLambdaFunctionAssociationPropertyFromCloudFormation)(properties.LambdaFunctionAssociations) : undefined);\n    ret.addPropertyResult('maxTtl', 'MaxTTL', properties.MaxTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxTTL) : undefined);\n    ret.addPropertyResult('minTtl', 'MinTTL', properties.MinTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinTTL) : undefined);\n    ret.addPropertyResult('originRequestPolicyId', 'OriginRequestPolicyId', properties.OriginRequestPolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.OriginRequestPolicyId) : undefined);\n    ret.addPropertyResult('realtimeLogConfigArn', 'RealtimeLogConfigArn', properties.RealtimeLogConfigArn != null ? cfn_parse.FromCloudFormation.getString(properties.RealtimeLogConfigArn) : undefined);\n    ret.addPropertyResult('responseHeadersPolicyId', 'ResponseHeadersPolicyId', properties.ResponseHeadersPolicyId != null ? cfn_parse.FromCloudFormation.getString(properties.ResponseHeadersPolicyId) : undefined);\n    ret.addPropertyResult('smoothStreaming', 'SmoothStreaming', properties.SmoothStreaming != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SmoothStreaming) : undefined);\n    ret.addPropertyResult('targetOriginId', 'TargetOriginId', cfn_parse.FromCloudFormation.getString(properties.TargetOriginId));\n    ret.addPropertyResult('trustedKeyGroups', 'TrustedKeyGroups', properties.TrustedKeyGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TrustedKeyGroups) : undefined);\n    ret.addPropertyResult('trustedSigners', 'TrustedSigners', properties.TrustedSigners != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TrustedSigners) : undefined);\n    ret.addPropertyResult('viewerProtocolPolicy', 'ViewerProtocolPolicy', cfn_parse.FromCloudFormation.getString(properties.ViewerProtocolPolicy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                      \n    export interface DistributionConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly aliases?: string[];\n                                                                                                                                                                                                                                                                                                     \n        readonly cnamEs?: string[];\n                                                                                                                                                                                                                                                                                                                             \n        readonly cacheBehaviors?: Array<CfnDistribution.CacheBehaviorProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly comment?: string;\nn        readonly customErrorResponses?: Array<CfnDistribution.CustomErrorResponseProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly customOrigin?: CfnDistribution.LegacyCustomOriginProperty | cdk.IResolvable;\nn        readonly defaultCacheBehavior?: CfnDistribution.DefaultCacheBehaviorProperty | cdk.IResolvable;\nn        readonly defaultRootObject?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly enabled: boolean | cdk.IResolvable;\nn        readonly httpVersion?: string;\nn        readonly ipv6Enabled?: boolean | cdk.IResolvable;\nn        readonly logging?: CfnDistribution.LoggingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly originGroups?: CfnDistribution.OriginGroupsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                \n        readonly origins?: Array<CfnDistribution.OriginProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly priceClass?: string;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly restrictions?: CfnDistribution.RestrictionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                         \n        readonly s3Origin?: CfnDistribution.LegacyS3OriginProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly viewerCertificate?: CfnDistribution.ViewerCertificateProperty | cdk.IResolvable;\nn        readonly webAclId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DistributionConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DistributionConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_DistributionConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aliases', cdk.listValidator(cdk.validateString))(properties.aliases));\n    errors.collect(cdk.propertyValidator('cnamEs', cdk.listValidator(cdk.validateString))(properties.cnamEs));\n    errors.collect(cdk.propertyValidator('cacheBehaviors', cdk.listValidator(CfnDistribution_CacheBehaviorPropertyValidator))(properties.cacheBehaviors));\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('customErrorResponses', cdk.listValidator(CfnDistribution_CustomErrorResponsePropertyValidator))(properties.customErrorResponses));\n    errors.collect(cdk.propertyValidator('customOrigin', CfnDistribution_LegacyCustomOriginPropertyValidator)(properties.customOrigin));\n    errors.collect(cdk.propertyValidator('defaultCacheBehavior', CfnDistribution_DefaultCacheBehaviorPropertyValidator)(properties.defaultCacheBehavior));\n    errors.collect(cdk.propertyValidator('defaultRootObject', cdk.validateString)(properties.defaultRootObject));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('httpVersion', cdk.validateString)(properties.httpVersion));\n    errors.collect(cdk.propertyValidator('ipv6Enabled', cdk.validateBoolean)(properties.ipv6Enabled));\n    errors.collect(cdk.propertyValidator('logging', CfnDistribution_LoggingPropertyValidator)(properties.logging));\n    errors.collect(cdk.propertyValidator('originGroups', CfnDistribution_OriginGroupsPropertyValidator)(properties.originGroups));\n    errors.collect(cdk.propertyValidator('origins', cdk.listValidator(CfnDistribution_OriginPropertyValidator))(properties.origins));\n    errors.collect(cdk.propertyValidator('priceClass', cdk.validateString)(properties.priceClass));\n    errors.collect(cdk.propertyValidator('restrictions', CfnDistribution_RestrictionsPropertyValidator)(properties.restrictions));\n    errors.collect(cdk.propertyValidator('s3Origin', CfnDistribution_LegacyS3OriginPropertyValidator)(properties.s3Origin));\n    errors.collect(cdk.propertyValidator('viewerCertificate', CfnDistribution_ViewerCertificatePropertyValidator)(properties.viewerCertificate));\n    errors.collect(cdk.propertyValidator('webAclId', cdk.validateString)(properties.webAclId));\n    return errors.wrap('supplied properties not correct for \"DistributionConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.DistributionConfig` resource\n *\n * @param properties - the TypeScript properties of a `DistributionConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.DistributionConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionDistributionConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_DistributionConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Aliases: cdk.listMapper(cdk.stringToCloudFormation)(properties.aliases),\n        CNAMEs: cdk.listMapper(cdk.stringToCloudFormation)(properties.cnamEs),\n        CacheBehaviors: cdk.listMapper(cfnDistributionCacheBehaviorPropertyToCloudFormation)(properties.cacheBehaviors),\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        CustomErrorResponses: cdk.listMapper(cfnDistributionCustomErrorResponsePropertyToCloudFormation)(properties.customErrorResponses),\n        CustomOrigin: cfnDistributionLegacyCustomOriginPropertyToCloudFormation(properties.customOrigin),\n        DefaultCacheBehavior: cfnDistributionDefaultCacheBehaviorPropertyToCloudFormation(properties.defaultCacheBehavior),\n        DefaultRootObject: cdk.stringToCloudFormation(properties.defaultRootObject),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        HttpVersion: cdk.stringToCloudFormation(properties.httpVersion),\n        IPV6Enabled: cdk.booleanToCloudFormation(properties.ipv6Enabled),\n        Logging: cfnDistributionLoggingPropertyToCloudFormation(properties.logging),\n        OriginGroups: cfnDistributionOriginGroupsPropertyToCloudFormation(properties.originGroups),\n        Origins: cdk.listMapper(cfnDistributionOriginPropertyToCloudFormation)(properties.origins),\n        PriceClass: cdk.stringToCloudFormation(properties.priceClass),\n        Restrictions: cfnDistributionRestrictionsPropertyToCloudFormation(properties.restrictions),\n        S3Origin: cfnDistributionLegacyS3OriginPropertyToCloudFormation(properties.s3Origin),\n        ViewerCertificate: cfnDistributionViewerCertificatePropertyToCloudFormation(properties.viewerCertificate),\n        WebACLId: cdk.stringToCloudFormation(properties.webAclId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionDistributionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.DistributionConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.DistributionConfigProperty>();\n    ret.addPropertyResult('aliases', 'Aliases', properties.Aliases != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Aliases) : undefined);\n    ret.addPropertyResult('cnamEs', 'CNAMEs', properties.CNAMEs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CNAMEs) : undefined);\n    ret.addPropertyResult('cacheBehaviors', 'CacheBehaviors', properties.CacheBehaviors != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionCacheBehaviorPropertyFromCloudFormation)(properties.CacheBehaviors) : undefined);\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('customErrorResponses', 'CustomErrorResponses', properties.CustomErrorResponses != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionCustomErrorResponsePropertyFromCloudFormation)(properties.CustomErrorResponses) : undefined);\n    ret.addPropertyResult('customOrigin', 'CustomOrigin', properties.CustomOrigin != null ? CfnDistributionLegacyCustomOriginPropertyFromCloudFormation(properties.CustomOrigin) : undefined);\n    ret.addPropertyResult('defaultCacheBehavior', 'DefaultCacheBehavior', properties.DefaultCacheBehavior != null ? CfnDistributionDefaultCacheBehaviorPropertyFromCloudFormation(properties.DefaultCacheBehavior) : undefined);\n    ret.addPropertyResult('defaultRootObject', 'DefaultRootObject', properties.DefaultRootObject != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultRootObject) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('httpVersion', 'HttpVersion', properties.HttpVersion != null ? cfn_parse.FromCloudFormation.getString(properties.HttpVersion) : undefined);\n    ret.addPropertyResult('ipv6Enabled', 'IPV6Enabled', properties.IPV6Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IPV6Enabled) : undefined);\n    ret.addPropertyResult('logging', 'Logging', properties.Logging != null ? CfnDistributionLoggingPropertyFromCloudFormation(properties.Logging) : undefined);\n    ret.addPropertyResult('originGroups', 'OriginGroups', properties.OriginGroups != null ? CfnDistributionOriginGroupsPropertyFromCloudFormation(properties.OriginGroups) : undefined);\n    ret.addPropertyResult('origins', 'Origins', properties.Origins != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionOriginPropertyFromCloudFormation)(properties.Origins) : undefined);\n    ret.addPropertyResult('priceClass', 'PriceClass', properties.PriceClass != null ? cfn_parse.FromCloudFormation.getString(properties.PriceClass) : undefined);\n    ret.addPropertyResult('restrictions', 'Restrictions', properties.Restrictions != null ? CfnDistributionRestrictionsPropertyFromCloudFormation(properties.Restrictions) : undefined);\n    ret.addPropertyResult('s3Origin', 'S3Origin', properties.S3Origin != null ? CfnDistributionLegacyS3OriginPropertyFromCloudFormation(properties.S3Origin) : undefined);\n    ret.addPropertyResult('viewerCertificate', 'ViewerCertificate', properties.ViewerCertificate != null ? CfnDistributionViewerCertificatePropertyFromCloudFormation(properties.ViewerCertificate) : undefined);\n    ret.addPropertyResult('webAclId', 'WebACLId', properties.WebACLId != null ? cfn_parse.FromCloudFormation.getString(properties.WebACLId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface ForwardedValuesProperty {\nn        readonly cookies?: CfnDistribution.CookiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly headers?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly queryString: boolean | cdk.IResolvable;\nn        readonly queryStringCacheKeys?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ForwardedValuesProperty`\n *\n * @param properties - the TypeScript properties of a `ForwardedValuesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_ForwardedValuesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookies', CfnDistribution_CookiesPropertyValidator)(properties.cookies));\n    errors.collect(cdk.propertyValidator('headers', cdk.listValidator(cdk.validateString))(properties.headers));\n    errors.collect(cdk.propertyValidator('queryString', cdk.requiredValidator)(properties.queryString));\n    errors.collect(cdk.propertyValidator('queryString', cdk.validateBoolean)(properties.queryString));\n    errors.collect(cdk.propertyValidator('queryStringCacheKeys', cdk.listValidator(cdk.validateString))(properties.queryStringCacheKeys));\n    return errors.wrap('supplied properties not correct for \"ForwardedValuesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.ForwardedValues` resource\n *\n * @param properties - the TypeScript properties of a `ForwardedValuesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.ForwardedValues` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionForwardedValuesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_ForwardedValuesPropertyValidator(properties).assertSuccess();\n    return {\n        Cookies: cfnDistributionCookiesPropertyToCloudFormation(properties.cookies),\n        Headers: cdk.listMapper(cdk.stringToCloudFormation)(properties.headers),\n        QueryString: cdk.booleanToCloudFormation(properties.queryString),\n        QueryStringCacheKeys: cdk.listMapper(cdk.stringToCloudFormation)(properties.queryStringCacheKeys),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionForwardedValuesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.ForwardedValuesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.ForwardedValuesProperty>();\n    ret.addPropertyResult('cookies', 'Cookies', properties.Cookies != null ? CfnDistributionCookiesPropertyFromCloudFormation(properties.Cookies) : undefined);\n    ret.addPropertyResult('headers', 'Headers', properties.Headers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Headers) : undefined);\n    ret.addPropertyResult('queryString', 'QueryString', cfn_parse.FromCloudFormation.getBoolean(properties.QueryString));\n    ret.addPropertyResult('queryStringCacheKeys', 'QueryStringCacheKeys', properties.QueryStringCacheKeys != null ? cfn_parse.FromCloudFormation.getStringArray(properties.QueryStringCacheKeys) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                      \n    export interface FunctionAssociationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly eventType?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly functionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FunctionAssociationProperty`\n *\n * @param properties - the TypeScript properties of a `FunctionAssociationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_FunctionAssociationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventType', cdk.validateString)(properties.eventType));\n    errors.collect(cdk.propertyValidator('functionArn', cdk.validateString)(properties.functionArn));\n    return errors.wrap('supplied properties not correct for \"FunctionAssociationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.FunctionAssociation` resource\n *\n * @param properties - the TypeScript properties of a `FunctionAssociationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.FunctionAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionFunctionAssociationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_FunctionAssociationPropertyValidator(properties).assertSuccess();\n    return {\n        EventType: cdk.stringToCloudFormation(properties.eventType),\n        FunctionARN: cdk.stringToCloudFormation(properties.functionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionFunctionAssociationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.FunctionAssociationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.FunctionAssociationProperty>();\n    ret.addPropertyResult('eventType', 'EventType', properties.EventType != null ? cfn_parse.FromCloudFormation.getString(properties.EventType) : undefined);\n    ret.addPropertyResult('functionArn', 'FunctionARN', properties.FunctionARN != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionARN) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface GeoRestrictionProperty {\nn        readonly locations?: string[];\nn        readonly restrictionType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GeoRestrictionProperty`\n *\n * @param properties - the TypeScript properties of a `GeoRestrictionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_GeoRestrictionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('locations', cdk.listValidator(cdk.validateString))(properties.locations));\n    errors.collect(cdk.propertyValidator('restrictionType', cdk.requiredValidator)(properties.restrictionType));\n    errors.collect(cdk.propertyValidator('restrictionType', cdk.validateString)(properties.restrictionType));\n    return errors.wrap('supplied properties not correct for \"GeoRestrictionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.GeoRestriction` resource\n *\n * @param properties - the TypeScript properties of a `GeoRestrictionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.GeoRestriction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionGeoRestrictionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_GeoRestrictionPropertyValidator(properties).assertSuccess();\n    return {\n        Locations: cdk.listMapper(cdk.stringToCloudFormation)(properties.locations),\n        RestrictionType: cdk.stringToCloudFormation(properties.restrictionType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionGeoRestrictionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.GeoRestrictionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.GeoRestrictionProperty>();\n    ret.addPropertyResult('locations', 'Locations', properties.Locations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Locations) : undefined);\n    ret.addPropertyResult('restrictionType', 'RestrictionType', cfn_parse.FromCloudFormation.getString(properties.RestrictionType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                \n    export interface LambdaFunctionAssociationProperty {\nn        readonly eventType?: string;\nn        readonly includeBody?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly lambdaFunctionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaFunctionAssociationProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaFunctionAssociationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_LambdaFunctionAssociationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventType', cdk.validateString)(properties.eventType));\n    errors.collect(cdk.propertyValidator('includeBody', cdk.validateBoolean)(properties.includeBody));\n    errors.collect(cdk.propertyValidator('lambdaFunctionArn', cdk.validateString)(properties.lambdaFunctionArn));\n    return errors.wrap('supplied properties not correct for \"LambdaFunctionAssociationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.LambdaFunctionAssociation` resource\n *\n * @param properties - the TypeScript properties of a `LambdaFunctionAssociationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.LambdaFunctionAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionLambdaFunctionAssociationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_LambdaFunctionAssociationPropertyValidator(properties).assertSuccess();\n    return {\n        EventType: cdk.stringToCloudFormation(properties.eventType),\n        IncludeBody: cdk.booleanToCloudFormation(properties.includeBody),\n        LambdaFunctionARN: cdk.stringToCloudFormation(properties.lambdaFunctionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionLambdaFunctionAssociationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.LambdaFunctionAssociationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.LambdaFunctionAssociationProperty>();\n    ret.addPropertyResult('eventType', 'EventType', properties.EventType != null ? cfn_parse.FromCloudFormation.getString(properties.EventType) : undefined);\n    ret.addPropertyResult('includeBody', 'IncludeBody', properties.IncludeBody != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeBody) : undefined);\n    ret.addPropertyResult('lambdaFunctionArn', 'LambdaFunctionARN', properties.LambdaFunctionARN != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaFunctionARN) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                        \n    export interface LegacyCustomOriginProperty {\n                                                                                                                                                                                                                                                                                                       \n        readonly dnsName: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly httpPort?: number;\n                                                                                                                                                                                                                                                                                                           \n        readonly httpsPort?: number;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly originProtocolPolicy: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly originSslProtocols: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LegacyCustomOriginProperty`\n *\n * @param properties - the TypeScript properties of a `LegacyCustomOriginProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_LegacyCustomOriginPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dnsName', cdk.requiredValidator)(properties.dnsName));\n    errors.collect(cdk.propertyValidator('dnsName', cdk.validateString)(properties.dnsName));\n    errors.collect(cdk.propertyValidator('httpPort', cdk.validateNumber)(properties.httpPort));\n    errors.collect(cdk.propertyValidator('httpsPort', cdk.validateNumber)(properties.httpsPort));\n    errors.collect(cdk.propertyValidator('originProtocolPolicy', cdk.requiredValidator)(properties.originProtocolPolicy));\n    errors.collect(cdk.propertyValidator('originProtocolPolicy', cdk.validateString)(properties.originProtocolPolicy));\n    errors.collect(cdk.propertyValidator('originSslProtocols', cdk.requiredValidator)(properties.originSslProtocols));\n    errors.collect(cdk.propertyValidator('originSslProtocols', cdk.listValidator(cdk.validateString))(properties.originSslProtocols));\n    return errors.wrap('supplied properties not correct for \"LegacyCustomOriginProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.LegacyCustomOrigin` resource\n *\n * @param properties - the TypeScript properties of a `LegacyCustomOriginProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.LegacyCustomOrigin` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionLegacyCustomOriginPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_LegacyCustomOriginPropertyValidator(properties).assertSuccess();\n    return {\n        DNSName: cdk.stringToCloudFormation(properties.dnsName),\n        HTTPPort: cdk.numberToCloudFormation(properties.httpPort),\n        HTTPSPort: cdk.numberToCloudFormation(properties.httpsPort),\n        OriginProtocolPolicy: cdk.stringToCloudFormation(properties.originProtocolPolicy),\n        OriginSSLProtocols: cdk.listMapper(cdk.stringToCloudFormation)(properties.originSslProtocols),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionLegacyCustomOriginPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.LegacyCustomOriginProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.LegacyCustomOriginProperty>();\n    ret.addPropertyResult('dnsName', 'DNSName', cfn_parse.FromCloudFormation.getString(properties.DNSName));\n    ret.addPropertyResult('httpPort', 'HTTPPort', properties.HTTPPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.HTTPPort) : undefined);\n    ret.addPropertyResult('httpsPort', 'HTTPSPort', properties.HTTPSPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.HTTPSPort) : undefined);\n    ret.addPropertyResult('originProtocolPolicy', 'OriginProtocolPolicy', cfn_parse.FromCloudFormation.getString(properties.OriginProtocolPolicy));\n    ret.addPropertyResult('originSslProtocols', 'OriginSSLProtocols', cfn_parse.FromCloudFormation.getStringArray(properties.OriginSSLProtocols));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                    \n    export interface LegacyS3OriginProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly dnsName: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly originAccessIdentity?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LegacyS3OriginProperty`\n *\n * @param properties - the TypeScript properties of a `LegacyS3OriginProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_LegacyS3OriginPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dnsName', cdk.requiredValidator)(properties.dnsName));\n    errors.collect(cdk.propertyValidator('dnsName', cdk.validateString)(properties.dnsName));\n    errors.collect(cdk.propertyValidator('originAccessIdentity', cdk.validateString)(properties.originAccessIdentity));\n    return errors.wrap('supplied properties not correct for \"LegacyS3OriginProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.LegacyS3Origin` resource\n *\n * @param properties - the TypeScript properties of a `LegacyS3OriginProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.LegacyS3Origin` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionLegacyS3OriginPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_LegacyS3OriginPropertyValidator(properties).assertSuccess();\n    return {\n        DNSName: cdk.stringToCloudFormation(properties.dnsName),\n        OriginAccessIdentity: cdk.stringToCloudFormation(properties.originAccessIdentity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionLegacyS3OriginPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.LegacyS3OriginProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.LegacyS3OriginProperty>();\n    ret.addPropertyResult('dnsName', 'DNSName', cfn_parse.FromCloudFormation.getString(properties.DNSName));\n    ret.addPropertyResult('originAccessIdentity', 'OriginAccessIdentity', properties.OriginAccessIdentity != null ? cfn_parse.FromCloudFormation.getString(properties.OriginAccessIdentity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                \n    export interface LoggingProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly bucket: string;\nn        readonly includeCookies?: boolean | cdk.IResolvable;\nn        readonly prefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_LoggingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('includeCookies', cdk.validateBoolean)(properties.includeCookies));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    return errors.wrap('supplied properties not correct for \"LoggingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Logging` resource\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Logging` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionLoggingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_LoggingPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        IncludeCookies: cdk.booleanToCloudFormation(properties.includeCookies),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionLoggingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.LoggingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.LoggingProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('includeCookies', 'IncludeCookies', properties.IncludeCookies != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeCookies) : undefined);\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface OriginProperty {\nn        readonly connectionAttempts?: number;\nn        readonly connectionTimeout?: number;\nn        readonly customOriginConfig?: CfnDistribution.CustomOriginConfigProperty | cdk.IResolvable;\nn        readonly domainName: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly id: string;\nn        readonly originCustomHeaders?: Array<CfnDistribution.OriginCustomHeaderProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly originPath?: string;\nn        readonly originShield?: CfnDistribution.OriginShieldProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly s3OriginConfig?: CfnDistribution.S3OriginConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginProperty`\n *\n * @param properties - the TypeScript properties of a `OriginProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionAttempts', cdk.validateNumber)(properties.connectionAttempts));\n    errors.collect(cdk.propertyValidator('connectionTimeout', cdk.validateNumber)(properties.connectionTimeout));\n    errors.collect(cdk.propertyValidator('customOriginConfig', CfnDistribution_CustomOriginConfigPropertyValidator)(properties.customOriginConfig));\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('originCustomHeaders', cdk.listValidator(CfnDistribution_OriginCustomHeaderPropertyValidator))(properties.originCustomHeaders));\n    errors.collect(cdk.propertyValidator('originPath', cdk.validateString)(properties.originPath));\n    errors.collect(cdk.propertyValidator('originShield', CfnDistribution_OriginShieldPropertyValidator)(properties.originShield));\n    errors.collect(cdk.propertyValidator('s3OriginConfig', CfnDistribution_S3OriginConfigPropertyValidator)(properties.s3OriginConfig));\n    return errors.wrap('supplied properties not correct for \"OriginProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Origin` resource\n *\n * @param properties - the TypeScript properties of a `OriginProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Origin` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionAttempts: cdk.numberToCloudFormation(properties.connectionAttempts),\n        ConnectionTimeout: cdk.numberToCloudFormation(properties.connectionTimeout),\n        CustomOriginConfig: cfnDistributionCustomOriginConfigPropertyToCloudFormation(properties.customOriginConfig),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        Id: cdk.stringToCloudFormation(properties.id),\n        OriginCustomHeaders: cdk.listMapper(cfnDistributionOriginCustomHeaderPropertyToCloudFormation)(properties.originCustomHeaders),\n        OriginPath: cdk.stringToCloudFormation(properties.originPath),\n        OriginShield: cfnDistributionOriginShieldPropertyToCloudFormation(properties.originShield),\n        S3OriginConfig: cfnDistributionS3OriginConfigPropertyToCloudFormation(properties.s3OriginConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginProperty>();\n    ret.addPropertyResult('connectionAttempts', 'ConnectionAttempts', properties.ConnectionAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionAttempts) : undefined);\n    ret.addPropertyResult('connectionTimeout', 'ConnectionTimeout', properties.ConnectionTimeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionTimeout) : undefined);\n    ret.addPropertyResult('customOriginConfig', 'CustomOriginConfig', properties.CustomOriginConfig != null ? CfnDistributionCustomOriginConfigPropertyFromCloudFormation(properties.CustomOriginConfig) : undefined);\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('originCustomHeaders', 'OriginCustomHeaders', properties.OriginCustomHeaders != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionOriginCustomHeaderPropertyFromCloudFormation)(properties.OriginCustomHeaders) : undefined);\n    ret.addPropertyResult('originPath', 'OriginPath', properties.OriginPath != null ? cfn_parse.FromCloudFormation.getString(properties.OriginPath) : undefined);\n    ret.addPropertyResult('originShield', 'OriginShield', properties.OriginShield != null ? CfnDistributionOriginShieldPropertyFromCloudFormation(properties.OriginShield) : undefined);\n    ret.addPropertyResult('s3OriginConfig', 'S3OriginConfig', properties.S3OriginConfig != null ? CfnDistributionS3OriginConfigPropertyFromCloudFormation(properties.S3OriginConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                             \n    export interface OriginCustomHeaderProperty {\nn        readonly headerName: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly headerValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginCustomHeaderProperty`\n *\n * @param properties - the TypeScript properties of a `OriginCustomHeaderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginCustomHeaderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('headerName', cdk.requiredValidator)(properties.headerName));\n    errors.collect(cdk.propertyValidator('headerName', cdk.validateString)(properties.headerName));\n    errors.collect(cdk.propertyValidator('headerValue', cdk.requiredValidator)(properties.headerValue));\n    errors.collect(cdk.propertyValidator('headerValue', cdk.validateString)(properties.headerValue));\n    return errors.wrap('supplied properties not correct for \"OriginCustomHeaderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginCustomHeader` resource\n *\n * @param properties - the TypeScript properties of a `OriginCustomHeaderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginCustomHeader` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginCustomHeaderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginCustomHeaderPropertyValidator(properties).assertSuccess();\n    return {\n        HeaderName: cdk.stringToCloudFormation(properties.headerName),\n        HeaderValue: cdk.stringToCloudFormation(properties.headerValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginCustomHeaderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginCustomHeaderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginCustomHeaderProperty>();\n    ret.addPropertyResult('headerName', 'HeaderName', cfn_parse.FromCloudFormation.getString(properties.HeaderName));\n    ret.addPropertyResult('headerValue', 'HeaderValue', cfn_parse.FromCloudFormation.getString(properties.HeaderValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface OriginGroupProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly failoverCriteria: CfnDistribution.OriginGroupFailoverCriteriaProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                      \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly members: CfnDistribution.OriginGroupMembersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginGroupProperty`\n *\n * @param properties - the TypeScript properties of a `OriginGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('failoverCriteria', cdk.requiredValidator)(properties.failoverCriteria));\n    errors.collect(cdk.propertyValidator('failoverCriteria', CfnDistribution_OriginGroupFailoverCriteriaPropertyValidator)(properties.failoverCriteria));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('members', cdk.requiredValidator)(properties.members));\n    errors.collect(cdk.propertyValidator('members', CfnDistribution_OriginGroupMembersPropertyValidator)(properties.members));\n    return errors.wrap('supplied properties not correct for \"OriginGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroup` resource\n *\n * @param properties - the TypeScript properties of a `OriginGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginGroupPropertyValidator(properties).assertSuccess();\n    return {\n        FailoverCriteria: cfnDistributionOriginGroupFailoverCriteriaPropertyToCloudFormation(properties.failoverCriteria),\n        Id: cdk.stringToCloudFormation(properties.id),\n        Members: cfnDistributionOriginGroupMembersPropertyToCloudFormation(properties.members),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginGroupProperty>();\n    ret.addPropertyResult('failoverCriteria', 'FailoverCriteria', CfnDistributionOriginGroupFailoverCriteriaPropertyFromCloudFormation(properties.FailoverCriteria));\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('members', 'Members', CfnDistributionOriginGroupMembersPropertyFromCloudFormation(properties.Members));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface OriginGroupFailoverCriteriaProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly statusCodes: CfnDistribution.StatusCodesProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginGroupFailoverCriteriaProperty`\n *\n * @param properties - the TypeScript properties of a `OriginGroupFailoverCriteriaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginGroupFailoverCriteriaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('statusCodes', cdk.requiredValidator)(properties.statusCodes));\n    errors.collect(cdk.propertyValidator('statusCodes', CfnDistribution_StatusCodesPropertyValidator)(properties.statusCodes));\n    return errors.wrap('supplied properties not correct for \"OriginGroupFailoverCriteriaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroupFailoverCriteria` resource\n *\n * @param properties - the TypeScript properties of a `OriginGroupFailoverCriteriaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroupFailoverCriteria` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginGroupFailoverCriteriaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginGroupFailoverCriteriaPropertyValidator(properties).assertSuccess();\n    return {\n        StatusCodes: cfnDistributionStatusCodesPropertyToCloudFormation(properties.statusCodes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginGroupFailoverCriteriaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginGroupFailoverCriteriaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginGroupFailoverCriteriaProperty>();\n    ret.addPropertyResult('statusCodes', 'StatusCodes', CfnDistributionStatusCodesPropertyFromCloudFormation(properties.StatusCodes));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                     \n    export interface OriginGroupMemberProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly originId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginGroupMemberProperty`\n *\n * @param properties - the TypeScript properties of a `OriginGroupMemberProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginGroupMemberPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('originId', cdk.requiredValidator)(properties.originId));\n    errors.collect(cdk.propertyValidator('originId', cdk.validateString)(properties.originId));\n    return errors.wrap('supplied properties not correct for \"OriginGroupMemberProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroupMember` resource\n *\n * @param properties - the TypeScript properties of a `OriginGroupMemberProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroupMember` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginGroupMemberPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginGroupMemberPropertyValidator(properties).assertSuccess();\n    return {\n        OriginId: cdk.stringToCloudFormation(properties.originId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginGroupMemberPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginGroupMemberProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginGroupMemberProperty>();\n    ret.addPropertyResult('originId', 'OriginId', cfn_parse.FromCloudFormation.getString(properties.OriginId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                         \n    export interface OriginGroupMembersProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly items: Array<CfnDistribution.OriginGroupMemberProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly quantity: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginGroupMembersProperty`\n *\n * @param properties - the TypeScript properties of a `OriginGroupMembersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginGroupMembersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(CfnDistribution_OriginGroupMemberPropertyValidator))(properties.items));\n    errors.collect(cdk.propertyValidator('quantity', cdk.requiredValidator)(properties.quantity));\n    errors.collect(cdk.propertyValidator('quantity', cdk.validateNumber)(properties.quantity));\n    return errors.wrap('supplied properties not correct for \"OriginGroupMembersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroupMembers` resource\n *\n * @param properties - the TypeScript properties of a `OriginGroupMembersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroupMembers` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginGroupMembersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginGroupMembersPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cfnDistributionOriginGroupMemberPropertyToCloudFormation)(properties.items),\n        Quantity: cdk.numberToCloudFormation(properties.quantity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginGroupMembersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginGroupMembersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginGroupMembersProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getArray(CfnDistributionOriginGroupMemberPropertyFromCloudFormation)(properties.Items));\n    ret.addPropertyResult('quantity', 'Quantity', cfn_parse.FromCloudFormation.getNumber(properties.Quantity));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                          \n    export interface OriginGroupsProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly items?: Array<CfnDistribution.OriginGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                    \n        readonly quantity: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginGroupsProperty`\n *\n * @param properties - the TypeScript properties of a `OriginGroupsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginGroupsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(CfnDistribution_OriginGroupPropertyValidator))(properties.items));\n    errors.collect(cdk.propertyValidator('quantity', cdk.requiredValidator)(properties.quantity));\n    errors.collect(cdk.propertyValidator('quantity', cdk.validateNumber)(properties.quantity));\n    return errors.wrap('supplied properties not correct for \"OriginGroupsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroups` resource\n *\n * @param properties - the TypeScript properties of a `OriginGroupsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginGroups` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginGroupsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginGroupsPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cfnDistributionOriginGroupPropertyToCloudFormation)(properties.items),\n        Quantity: cdk.numberToCloudFormation(properties.quantity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginGroupsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginGroupsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginGroupsProperty>();\n    ret.addPropertyResult('items', 'Items', properties.Items != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionOriginGroupPropertyFromCloudFormation)(properties.Items) : undefined);\n    ret.addPropertyResult('quantity', 'Quantity', cfn_parse.FromCloudFormation.getNumber(properties.Quantity));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface OriginShieldProperty {\nn        readonly enabled?: boolean | cdk.IResolvable;\nn        readonly originShieldRegion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginShieldProperty`\n *\n * @param properties - the TypeScript properties of a `OriginShieldProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_OriginShieldPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('originShieldRegion', cdk.validateString)(properties.originShieldRegion));\n    return errors.wrap('supplied properties not correct for \"OriginShieldProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginShield` resource\n *\n * @param properties - the TypeScript properties of a `OriginShieldProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.OriginShield` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionOriginShieldPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_OriginShieldPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        OriginShieldRegion: cdk.stringToCloudFormation(properties.originShieldRegion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionOriginShieldPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.OriginShieldProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.OriginShieldProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('originShieldRegion', 'OriginShieldRegion', properties.OriginShieldRegion != null ? cfn_parse.FromCloudFormation.getString(properties.OriginShieldRegion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                  \n    export interface RestrictionsProperty {\nn        readonly geoRestriction: CfnDistribution.GeoRestrictionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RestrictionsProperty`\n *\n * @param properties - the TypeScript properties of a `RestrictionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_RestrictionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('geoRestriction', cdk.requiredValidator)(properties.geoRestriction));\n    errors.collect(cdk.propertyValidator('geoRestriction', CfnDistribution_GeoRestrictionPropertyValidator)(properties.geoRestriction));\n    return errors.wrap('supplied properties not correct for \"RestrictionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Restrictions` resource\n *\n * @param properties - the TypeScript properties of a `RestrictionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.Restrictions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionRestrictionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_RestrictionsPropertyValidator(properties).assertSuccess();\n    return {\n        GeoRestriction: cfnDistributionGeoRestrictionPropertyToCloudFormation(properties.geoRestriction),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionRestrictionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.RestrictionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.RestrictionsProperty>();\n    ret.addPropertyResult('geoRestriction', 'GeoRestriction', CfnDistributionGeoRestrictionPropertyFromCloudFormation(properties.GeoRestriction));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface S3OriginConfigProperty {\nn        readonly originAccessIdentity?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OriginConfigProperty`\n *\n * @param properties - the TypeScript properties of a `S3OriginConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_S3OriginConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('originAccessIdentity', cdk.validateString)(properties.originAccessIdentity));\n    return errors.wrap('supplied properties not correct for \"S3OriginConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.S3OriginConfig` resource\n *\n * @param properties - the TypeScript properties of a `S3OriginConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.S3OriginConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionS3OriginConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_S3OriginConfigPropertyValidator(properties).assertSuccess();\n    return {\n        OriginAccessIdentity: cdk.stringToCloudFormation(properties.originAccessIdentity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionS3OriginConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.S3OriginConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.S3OriginConfigProperty>();\n    ret.addPropertyResult('originAccessIdentity', 'OriginAccessIdentity', properties.OriginAccessIdentity != null ? cfn_parse.FromCloudFormation.getString(properties.OriginAccessIdentity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\n                                                                                                                                                                                                                                                                                                                                                                       \n    export interface StatusCodesProperty {\n                                                                                                                                                                                                                                                                                \n        readonly items: number[] | cdk.IResolvable;\n                                                                                                                                                                                                                                                                 \n        readonly quantity: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StatusCodesProperty`\n *\n * @param properties - the TypeScript properties of a `StatusCodesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_StatusCodesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(cdk.validateNumber))(properties.items));\n    errors.collect(cdk.propertyValidator('quantity', cdk.requiredValidator)(properties.quantity));\n    errors.collect(cdk.propertyValidator('quantity', cdk.validateNumber)(properties.quantity));\n    return errors.wrap('supplied properties not correct for \"StatusCodesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.StatusCodes` resource\n *\n * @param properties - the TypeScript properties of a `StatusCodesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.StatusCodes` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionStatusCodesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_StatusCodesPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cdk.numberToCloudFormation)(properties.items),\n        Quantity: cdk.numberToCloudFormation(properties.quantity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionStatusCodesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.StatusCodesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.StatusCodesProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getNumber)(properties.Items));\n    ret.addPropertyResult('quantity', 'Quantity', cfn_parse.FromCloudFormation.getNumber(properties.Quantity));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface ViewerCertificateProperty {\nn        readonly acmCertificateArn?: string;\nn        readonly cloudFrontDefaultCertificate?: boolean | cdk.IResolvable;\nn        readonly iamCertificateId?: string;\nn        readonly minimumProtocolVersion?: string;\nn        readonly sslSupportMethod?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ViewerCertificateProperty`\n *\n * @param properties - the TypeScript properties of a `ViewerCertificateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_ViewerCertificatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acmCertificateArn', cdk.validateString)(properties.acmCertificateArn));\n    errors.collect(cdk.propertyValidator('cloudFrontDefaultCertificate', cdk.validateBoolean)(properties.cloudFrontDefaultCertificate));\n    errors.collect(cdk.propertyValidator('iamCertificateId', cdk.validateString)(properties.iamCertificateId));\n    errors.collect(cdk.propertyValidator('minimumProtocolVersion', cdk.validateString)(properties.minimumProtocolVersion));\n    errors.collect(cdk.propertyValidator('sslSupportMethod', cdk.validateString)(properties.sslSupportMethod));\n    return errors.wrap('supplied properties not correct for \"ViewerCertificateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.ViewerCertificate` resource\n *\n * @param properties - the TypeScript properties of a `ViewerCertificateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Distribution.ViewerCertificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionViewerCertificatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_ViewerCertificatePropertyValidator(properties).assertSuccess();\n    return {\n        AcmCertificateArn: cdk.stringToCloudFormation(properties.acmCertificateArn),\n        CloudFrontDefaultCertificate: cdk.booleanToCloudFormation(properties.cloudFrontDefaultCertificate),\n        IamCertificateId: cdk.stringToCloudFormation(properties.iamCertificateId),\n        MinimumProtocolVersion: cdk.stringToCloudFormation(properties.minimumProtocolVersion),\n        SslSupportMethod: cdk.stringToCloudFormation(properties.sslSupportMethod),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionViewerCertificatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.ViewerCertificateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.ViewerCertificateProperty>();\n    ret.addPropertyResult('acmCertificateArn', 'AcmCertificateArn', properties.AcmCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.AcmCertificateArn) : undefined);\n    ret.addPropertyResult('cloudFrontDefaultCertificate', 'CloudFrontDefaultCertificate', properties.CloudFrontDefaultCertificate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CloudFrontDefaultCertificate) : undefined);\n    ret.addPropertyResult('iamCertificateId', 'IamCertificateId', properties.IamCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.IamCertificateId) : undefined);\n    ret.addPropertyResult('minimumProtocolVersion', 'MinimumProtocolVersion', properties.MinimumProtocolVersion != null ? cfn_parse.FromCloudFormation.getString(properties.MinimumProtocolVersion) : undefined);\n    ret.addPropertyResult('sslSupportMethod', 'SslSupportMethod', properties.SslSupportMethod != null ? cfn_parse.FromCloudFormation.getString(properties.SslSupportMethod) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnFunctionProps {\n\n                                                                                                                                                                                                            \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    readonly autoPublish?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly functionCode?: string;\n\n                                                                                                                                                                                                                                                     \n    readonly functionConfig?: CfnFunction.FunctionConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFunctionProps`\n *\n * @param properties - the TypeScript properties of a `CfnFunctionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunctionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoPublish', cdk.validateBoolean)(properties.autoPublish));\n    errors.collect(cdk.propertyValidator('functionCode', cdk.validateString)(properties.functionCode));\n    errors.collect(cdk.propertyValidator('functionConfig', CfnFunction_FunctionConfigPropertyValidator)(properties.functionConfig));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnFunctionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Function` resource\n *\n * @param properties - the TypeScript properties of a `CfnFunctionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Function` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunctionPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        AutoPublish: cdk.booleanToCloudFormation(properties.autoPublish),\n        FunctionCode: cdk.stringToCloudFormation(properties.functionCode),\n        FunctionConfig: cfnFunctionFunctionConfigPropertyToCloudFormation(properties.functionConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunctionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunctionProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('autoPublish', 'AutoPublish', properties.AutoPublish != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoPublish) : undefined);\n    ret.addPropertyResult('functionCode', 'FunctionCode', properties.FunctionCode != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionCode) : undefined);\n    ret.addPropertyResult('functionConfig', 'FunctionConfig', properties.FunctionConfig != null ? CfnFunctionFunctionConfigPropertyFromCloudFormation(properties.FunctionConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFunction extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::Function\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFunction {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFunctionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFunction(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                 \n    public readonly attrFunctionArn: string;\n\n                                                                                   \n    public readonly attrFunctionMetadataFunctionArn: string;\n\n                                                            \n    public readonly attrStage: string;\n\n                                                                                                                                                                                                            \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    public autoPublish: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public functionCode: string | undefined;\n\n                                                                                                                                                                                                                                                     \n    public functionConfig: CfnFunction.FunctionConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnFunctionProps) {\n        super(scope, id, { type: CfnFunction.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrFunctionArn = cdk.Token.asString(this.getAtt('FunctionARN'));\n        this.attrFunctionMetadataFunctionArn = cdk.Token.asString(this.getAtt('FunctionMetadata.FunctionARN'));\n        this.attrStage = cdk.Token.asString(this.getAtt('Stage'));\n\n        this.name = props.name;\n        this.autoPublish = props.autoPublish;\n        this.functionCode = props.functionCode;\n        this.functionConfig = props.functionConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFunction.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            autoPublish: this.autoPublish,\n            functionCode: this.functionCode,\n            functionConfig: this.functionConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFunctionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                                \n    export interface FunctionConfigProperty {\n                                                                                                                                                                                                                                                                      \n        readonly comment: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly runtime: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FunctionConfigProperty`\n *\n * @param properties - the TypeScript properties of a `FunctionConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_FunctionConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.requiredValidator)(properties.comment));\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('runtime', cdk.requiredValidator)(properties.runtime));\n    errors.collect(cdk.propertyValidator('runtime', cdk.validateString)(properties.runtime));\n    return errors.wrap('supplied properties not correct for \"FunctionConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Function.FunctionConfig` resource\n *\n * @param properties - the TypeScript properties of a `FunctionConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Function.FunctionConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionFunctionConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_FunctionConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        Runtime: cdk.stringToCloudFormation(properties.runtime),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionFunctionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.FunctionConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.FunctionConfigProperty>();\n    ret.addPropertyResult('comment', 'Comment', cfn_parse.FromCloudFormation.getString(properties.Comment));\n    ret.addPropertyResult('runtime', 'Runtime', cfn_parse.FromCloudFormation.getString(properties.Runtime));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                 \n    export interface FunctionMetadataProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly functionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FunctionMetadataProperty`\n *\n * @param properties - the TypeScript properties of a `FunctionMetadataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_FunctionMetadataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('functionArn', cdk.validateString)(properties.functionArn));\n    return errors.wrap('supplied properties not correct for \"FunctionMetadataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::Function.FunctionMetadata` resource\n *\n * @param properties - the TypeScript properties of a `FunctionMetadataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::Function.FunctionMetadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionFunctionMetadataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_FunctionMetadataPropertyValidator(properties).assertSuccess();\n    return {\n        FunctionARN: cdk.stringToCloudFormation(properties.functionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionFunctionMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.FunctionMetadataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.FunctionMetadataProperty>();\n    ret.addPropertyResult('functionArn', 'FunctionARN', properties.FunctionARN != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionARN) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnKeyGroupProps {\n\n                                                                                                                                                                                                                  \n    readonly keyGroupConfig: CfnKeyGroup.KeyGroupConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnKeyGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnKeyGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnKeyGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('keyGroupConfig', cdk.requiredValidator)(properties.keyGroupConfig));\n    errors.collect(cdk.propertyValidator('keyGroupConfig', CfnKeyGroup_KeyGroupConfigPropertyValidator)(properties.keyGroupConfig));\n    return errors.wrap('supplied properties not correct for \"CfnKeyGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::KeyGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnKeyGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::KeyGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKeyGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKeyGroupPropsValidator(properties).assertSuccess();\n    return {\n        KeyGroupConfig: cfnKeyGroupKeyGroupConfigPropertyToCloudFormation(properties.keyGroupConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKeyGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKeyGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKeyGroupProps>();\n    ret.addPropertyResult('keyGroupConfig', 'KeyGroupConfig', CfnKeyGroupKeyGroupConfigPropertyFromCloudFormation(properties.KeyGroupConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnKeyGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::KeyGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnKeyGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnKeyGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnKeyGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                           \n    public readonly attrId: string;\n\n                                                                                                                               \n    public readonly attrLastModifiedTime: string;\n\n                                                                                                                                                                                                                  \n    public keyGroupConfig: CfnKeyGroup.KeyGroupConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnKeyGroupProps) {\n        super(scope, id, { type: CfnKeyGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'keyGroupConfig', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrLastModifiedTime = cdk.Token.asString(this.getAtt('LastModifiedTime'));\n\n        this.keyGroupConfig = props.keyGroupConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnKeyGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            keyGroupConfig: this.keyGroupConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnKeyGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnKeyGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface KeyGroupConfigProperty {\n                                                                                                                                                                                                                                                                                                                         \n        readonly comment?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly items: string[];\n                                                                                                                                                                                                                                                                 \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KeyGroupConfigProperty`\n *\n * @param properties - the TypeScript properties of a `KeyGroupConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnKeyGroup_KeyGroupConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(cdk.validateString))(properties.items));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"KeyGroupConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::KeyGroup.KeyGroupConfig` resource\n *\n * @param properties - the TypeScript properties of a `KeyGroupConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::KeyGroup.KeyGroupConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKeyGroupKeyGroupConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKeyGroup_KeyGroupConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        Items: cdk.listMapper(cdk.stringToCloudFormation)(properties.items),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKeyGroupKeyGroupConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKeyGroup.KeyGroupConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKeyGroup.KeyGroupConfigProperty>();\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getStringArray(properties.Items));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                             \nexport interface CfnOriginRequestPolicyProps {\n\n                                                                                                                                                                                                                                                               \n    readonly originRequestPolicyConfig: CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnOriginRequestPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnOriginRequestPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginRequestPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('originRequestPolicyConfig', cdk.requiredValidator)(properties.originRequestPolicyConfig));\n    errors.collect(cdk.propertyValidator('originRequestPolicyConfig', CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyValidator)(properties.originRequestPolicyConfig));\n    return errors.wrap('supplied properties not correct for \"CfnOriginRequestPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnOriginRequestPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginRequestPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginRequestPolicyPropsValidator(properties).assertSuccess();\n    return {\n        OriginRequestPolicyConfig: cfnOriginRequestPolicyOriginRequestPolicyConfigPropertyToCloudFormation(properties.originRequestPolicyConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginRequestPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginRequestPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginRequestPolicyProps>();\n    ret.addPropertyResult('originRequestPolicyConfig', 'OriginRequestPolicyConfig', CfnOriginRequestPolicyOriginRequestPolicyConfigPropertyFromCloudFormation(properties.OriginRequestPolicyConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnOriginRequestPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::OriginRequestPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnOriginRequestPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnOriginRequestPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnOriginRequestPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                    \n    public readonly attrId: string;\n\n                                                                                                                                           \n    public readonly attrLastModifiedTime: string;\n\n                                                                                                                                                                                                                                                               \n    public originRequestPolicyConfig: CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnOriginRequestPolicyProps) {\n        super(scope, id, { type: CfnOriginRequestPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'originRequestPolicyConfig', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrLastModifiedTime = cdk.Token.asString(this.getAtt('LastModifiedTime'));\n\n        this.originRequestPolicyConfig = props.originRequestPolicyConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnOriginRequestPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            originRequestPolicyConfig: this.originRequestPolicyConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnOriginRequestPolicyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnOriginRequestPolicy {\n                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface CookiesConfigProperty {\nn        readonly cookieBehavior: string;\n                                                                                                                                                                                                                                                                                       \n        readonly cookies?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CookiesConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CookiesConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginRequestPolicy_CookiesConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookieBehavior', cdk.requiredValidator)(properties.cookieBehavior));\n    errors.collect(cdk.propertyValidator('cookieBehavior', cdk.validateString)(properties.cookieBehavior));\n    errors.collect(cdk.propertyValidator('cookies', cdk.listValidator(cdk.validateString))(properties.cookies));\n    return errors.wrap('supplied properties not correct for \"CookiesConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.CookiesConfig` resource\n *\n * @param properties - the TypeScript properties of a `CookiesConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.CookiesConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginRequestPolicyCookiesConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginRequestPolicy_CookiesConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CookieBehavior: cdk.stringToCloudFormation(properties.cookieBehavior),\n        Cookies: cdk.listMapper(cdk.stringToCloudFormation)(properties.cookies),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginRequestPolicyCookiesConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginRequestPolicy.CookiesConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginRequestPolicy.CookiesConfigProperty>();\n    ret.addPropertyResult('cookieBehavior', 'CookieBehavior', cfn_parse.FromCloudFormation.getString(properties.CookieBehavior));\n    ret.addPropertyResult('cookies', 'Cookies', properties.Cookies != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Cookies) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginRequestPolicy {\n                                                                                                                                                                                                                                                                                                                                                                      \n    export interface HeadersConfigProperty {\nn        readonly headerBehavior: string;\n                                                                                                                                                                                                                                                                                            \n        readonly headers?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HeadersConfigProperty`\n *\n * @param properties - the TypeScript properties of a `HeadersConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginRequestPolicy_HeadersConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('headerBehavior', cdk.requiredValidator)(properties.headerBehavior));\n    errors.collect(cdk.propertyValidator('headerBehavior', cdk.validateString)(properties.headerBehavior));\n    errors.collect(cdk.propertyValidator('headers', cdk.listValidator(cdk.validateString))(properties.headers));\n    return errors.wrap('supplied properties not correct for \"HeadersConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.HeadersConfig` resource\n *\n * @param properties - the TypeScript properties of a `HeadersConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.HeadersConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginRequestPolicyHeadersConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginRequestPolicy_HeadersConfigPropertyValidator(properties).assertSuccess();\n    return {\n        HeaderBehavior: cdk.stringToCloudFormation(properties.headerBehavior),\n        Headers: cdk.listMapper(cdk.stringToCloudFormation)(properties.headers),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginRequestPolicyHeadersConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginRequestPolicy.HeadersConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginRequestPolicy.HeadersConfigProperty>();\n    ret.addPropertyResult('headerBehavior', 'HeaderBehavior', cfn_parse.FromCloudFormation.getString(properties.HeaderBehavior));\n    ret.addPropertyResult('headers', 'Headers', properties.Headers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Headers) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginRequestPolicy {\nn    export interface OriginRequestPolicyConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly comment?: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly cookiesConfig: CfnOriginRequestPolicy.CookiesConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly headersConfig: CfnOriginRequestPolicy.HeadersConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly queryStringsConfig: CfnOriginRequestPolicy.QueryStringsConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OriginRequestPolicyConfigProperty`\n *\n * @param properties - the TypeScript properties of a `OriginRequestPolicyConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('cookiesConfig', cdk.requiredValidator)(properties.cookiesConfig));\n    errors.collect(cdk.propertyValidator('cookiesConfig', CfnOriginRequestPolicy_CookiesConfigPropertyValidator)(properties.cookiesConfig));\n    errors.collect(cdk.propertyValidator('headersConfig', cdk.requiredValidator)(properties.headersConfig));\n    errors.collect(cdk.propertyValidator('headersConfig', CfnOriginRequestPolicy_HeadersConfigPropertyValidator)(properties.headersConfig));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('queryStringsConfig', cdk.requiredValidator)(properties.queryStringsConfig));\n    errors.collect(cdk.propertyValidator('queryStringsConfig', CfnOriginRequestPolicy_QueryStringsConfigPropertyValidator)(properties.queryStringsConfig));\n    return errors.wrap('supplied properties not correct for \"OriginRequestPolicyConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.OriginRequestPolicyConfig` resource\n *\n * @param properties - the TypeScript properties of a `OriginRequestPolicyConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.OriginRequestPolicyConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginRequestPolicyOriginRequestPolicyConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        CookiesConfig: cfnOriginRequestPolicyCookiesConfigPropertyToCloudFormation(properties.cookiesConfig),\n        HeadersConfig: cfnOriginRequestPolicyHeadersConfigPropertyToCloudFormation(properties.headersConfig),\n        Name: cdk.stringToCloudFormation(properties.name),\n        QueryStringsConfig: cfnOriginRequestPolicyQueryStringsConfigPropertyToCloudFormation(properties.queryStringsConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginRequestPolicyOriginRequestPolicyConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty>();\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('cookiesConfig', 'CookiesConfig', CfnOriginRequestPolicyCookiesConfigPropertyFromCloudFormation(properties.CookiesConfig));\n    ret.addPropertyResult('headersConfig', 'HeadersConfig', CfnOriginRequestPolicyHeadersConfigPropertyFromCloudFormation(properties.HeadersConfig));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('queryStringsConfig', 'QueryStringsConfig', CfnOriginRequestPolicyQueryStringsConfigPropertyFromCloudFormation(properties.QueryStringsConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginRequestPolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface QueryStringsConfigProperty {\nn        readonly queryStringBehavior: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly queryStrings?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QueryStringsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `QueryStringsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginRequestPolicy_QueryStringsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('queryStringBehavior', cdk.requiredValidator)(properties.queryStringBehavior));\n    errors.collect(cdk.propertyValidator('queryStringBehavior', cdk.validateString)(properties.queryStringBehavior));\n    errors.collect(cdk.propertyValidator('queryStrings', cdk.listValidator(cdk.validateString))(properties.queryStrings));\n    return errors.wrap('supplied properties not correct for \"QueryStringsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.QueryStringsConfig` resource\n *\n * @param properties - the TypeScript properties of a `QueryStringsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::OriginRequestPolicy.QueryStringsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginRequestPolicyQueryStringsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginRequestPolicy_QueryStringsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        QueryStringBehavior: cdk.stringToCloudFormation(properties.queryStringBehavior),\n        QueryStrings: cdk.listMapper(cdk.stringToCloudFormation)(properties.queryStrings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginRequestPolicyQueryStringsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginRequestPolicy.QueryStringsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginRequestPolicy.QueryStringsConfigProperty>();\n    ret.addPropertyResult('queryStringBehavior', 'QueryStringBehavior', cfn_parse.FromCloudFormation.getString(properties.QueryStringBehavior));\n    ret.addPropertyResult('queryStrings', 'QueryStrings', properties.QueryStrings != null ? cfn_parse.FromCloudFormation.getStringArray(properties.QueryStrings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnPublicKeyProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly publicKeyConfig: CfnPublicKey.PublicKeyConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPublicKeyProps`\n *\n * @param properties - the TypeScript properties of a `CfnPublicKeyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPublicKeyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('publicKeyConfig', cdk.requiredValidator)(properties.publicKeyConfig));\n    errors.collect(cdk.propertyValidator('publicKeyConfig', CfnPublicKey_PublicKeyConfigPropertyValidator)(properties.publicKeyConfig));\n    return errors.wrap('supplied properties not correct for \"CfnPublicKeyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::PublicKey` resource\n *\n * @param properties - the TypeScript properties of a `CfnPublicKeyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::PublicKey` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPublicKeyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPublicKeyPropsValidator(properties).assertSuccess();\n    return {\n        PublicKeyConfig: cfnPublicKeyPublicKeyConfigPropertyToCloudFormation(properties.publicKeyConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPublicKeyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPublicKeyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPublicKeyProps>();\n    ret.addPropertyResult('publicKeyConfig', 'PublicKeyConfig', CfnPublicKeyPublicKeyConfigPropertyFromCloudFormation(properties.PublicKeyConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPublicKey extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::PublicKey\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPublicKey {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPublicKeyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPublicKey(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                      \n    public readonly attrCreatedTime: string;\n\n                                                                                           \n    public readonly attrId: string;\n\nn    public publicKeyConfig: CfnPublicKey.PublicKeyConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnPublicKeyProps) {\n        super(scope, id, { type: CfnPublicKey.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'publicKeyConfig', this);\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.publicKeyConfig = props.publicKeyConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPublicKey.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            publicKeyConfig: this.publicKeyConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPublicKeyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPublicKey {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface PublicKeyConfigProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly callerReference: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly comment?: string;\nn        readonly encodedKey: string;\n                                                                                                                                                                                                                                                                           \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PublicKeyConfigProperty`\n *\n * @param properties - the TypeScript properties of a `PublicKeyConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPublicKey_PublicKeyConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('callerReference', cdk.requiredValidator)(properties.callerReference));\n    errors.collect(cdk.propertyValidator('callerReference', cdk.validateString)(properties.callerReference));\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('encodedKey', cdk.requiredValidator)(properties.encodedKey));\n    errors.collect(cdk.propertyValidator('encodedKey', cdk.validateString)(properties.encodedKey));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"PublicKeyConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::PublicKey.PublicKeyConfig` resource\n *\n * @param properties - the TypeScript properties of a `PublicKeyConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::PublicKey.PublicKeyConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPublicKeyPublicKeyConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPublicKey_PublicKeyConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CallerReference: cdk.stringToCloudFormation(properties.callerReference),\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        EncodedKey: cdk.stringToCloudFormation(properties.encodedKey),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPublicKeyPublicKeyConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPublicKey.PublicKeyConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPublicKey.PublicKeyConfigProperty>();\n    ret.addPropertyResult('callerReference', 'CallerReference', cfn_parse.FromCloudFormation.getString(properties.CallerReference));\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('encodedKey', 'EncodedKey', cfn_parse.FromCloudFormation.getString(properties.EncodedKey));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnRealtimeLogConfigProps {\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly endPoints: Array<CfnRealtimeLogConfig.EndPointProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly fields: string[];\n\n                                                                                                                                                                                                                                                  \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly samplingRate: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRealtimeLogConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnRealtimeLogConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRealtimeLogConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endPoints', cdk.requiredValidator)(properties.endPoints));\n    errors.collect(cdk.propertyValidator('endPoints', cdk.listValidator(CfnRealtimeLogConfig_EndPointPropertyValidator))(properties.endPoints));\n    errors.collect(cdk.propertyValidator('fields', cdk.requiredValidator)(properties.fields));\n    errors.collect(cdk.propertyValidator('fields', cdk.listValidator(cdk.validateString))(properties.fields));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('samplingRate', cdk.requiredValidator)(properties.samplingRate));\n    errors.collect(cdk.propertyValidator('samplingRate', cdk.validateNumber)(properties.samplingRate));\n    return errors.wrap('supplied properties not correct for \"CfnRealtimeLogConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::RealtimeLogConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnRealtimeLogConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::RealtimeLogConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRealtimeLogConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRealtimeLogConfigPropsValidator(properties).assertSuccess();\n    return {\n        EndPoints: cdk.listMapper(cfnRealtimeLogConfigEndPointPropertyToCloudFormation)(properties.endPoints),\n        Fields: cdk.listMapper(cdk.stringToCloudFormation)(properties.fields),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SamplingRate: cdk.numberToCloudFormation(properties.samplingRate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRealtimeLogConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRealtimeLogConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRealtimeLogConfigProps>();\n    ret.addPropertyResult('endPoints', 'EndPoints', cfn_parse.FromCloudFormation.getArray(CfnRealtimeLogConfigEndPointPropertyFromCloudFormation)(properties.EndPoints));\n    ret.addPropertyResult('fields', 'Fields', cfn_parse.FromCloudFormation.getStringArray(properties.Fields));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('samplingRate', 'SamplingRate', cfn_parse.FromCloudFormation.getNumber(properties.SamplingRate));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                      \nexport class CfnRealtimeLogConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::RealtimeLogConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRealtimeLogConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRealtimeLogConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRealtimeLogConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                   \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public endPoints: Array<CfnRealtimeLogConfig.EndPointProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    public fields: string[];\n\n                                                                                                                                                                                                                                                  \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public samplingRate: number;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnRealtimeLogConfigProps) {\n        super(scope, id, { type: CfnRealtimeLogConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'endPoints', this);\n        cdk.requireProperty(props, 'fields', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'samplingRate', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.endPoints = props.endPoints;\n        this.fields = props.fields;\n        this.name = props.name;\n        this.samplingRate = props.samplingRate;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRealtimeLogConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            endPoints: this.endPoints,\n            fields: this.fields,\n            name: this.name,\n            samplingRate: this.samplingRate,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRealtimeLogConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRealtimeLogConfig {\n                                                                                                                                                                                                                                                                                                                                                        \n    export interface EndPointProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly kinesisStreamConfig: CfnRealtimeLogConfig.KinesisStreamConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly streamType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndPointProperty`\n *\n * @param properties - the TypeScript properties of a `EndPointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRealtimeLogConfig_EndPointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kinesisStreamConfig', cdk.requiredValidator)(properties.kinesisStreamConfig));\n    errors.collect(cdk.propertyValidator('kinesisStreamConfig', CfnRealtimeLogConfig_KinesisStreamConfigPropertyValidator)(properties.kinesisStreamConfig));\n    errors.collect(cdk.propertyValidator('streamType', cdk.requiredValidator)(properties.streamType));\n    errors.collect(cdk.propertyValidator('streamType', cdk.validateString)(properties.streamType));\n    return errors.wrap('supplied properties not correct for \"EndPointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::RealtimeLogConfig.EndPoint` resource\n *\n * @param properties - the TypeScript properties of a `EndPointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::RealtimeLogConfig.EndPoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRealtimeLogConfigEndPointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRealtimeLogConfig_EndPointPropertyValidator(properties).assertSuccess();\n    return {\n        KinesisStreamConfig: cfnRealtimeLogConfigKinesisStreamConfigPropertyToCloudFormation(properties.kinesisStreamConfig),\n        StreamType: cdk.stringToCloudFormation(properties.streamType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRealtimeLogConfigEndPointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRealtimeLogConfig.EndPointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRealtimeLogConfig.EndPointProperty>();\n    ret.addPropertyResult('kinesisStreamConfig', 'KinesisStreamConfig', CfnRealtimeLogConfigKinesisStreamConfigPropertyFromCloudFormation(properties.KinesisStreamConfig));\n    ret.addPropertyResult('streamType', 'StreamType', cfn_parse.FromCloudFormation.getString(properties.StreamType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRealtimeLogConfig {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface KinesisStreamConfigProperty {\nn        readonly roleArn: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly streamArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisStreamConfigProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisStreamConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRealtimeLogConfig_KinesisStreamConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('streamArn', cdk.requiredValidator)(properties.streamArn));\n    errors.collect(cdk.propertyValidator('streamArn', cdk.validateString)(properties.streamArn));\n    return errors.wrap('supplied properties not correct for \"KinesisStreamConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::RealtimeLogConfig.KinesisStreamConfig` resource\n *\n * @param properties - the TypeScript properties of a `KinesisStreamConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::RealtimeLogConfig.KinesisStreamConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRealtimeLogConfigKinesisStreamConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRealtimeLogConfig_KinesisStreamConfigPropertyValidator(properties).assertSuccess();\n    return {\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        StreamArn: cdk.stringToCloudFormation(properties.streamArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRealtimeLogConfigKinesisStreamConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRealtimeLogConfig.KinesisStreamConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRealtimeLogConfig.KinesisStreamConfigProperty>();\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('streamArn', 'StreamArn', cfn_parse.FromCloudFormation.getString(properties.StreamArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                 \nexport interface CfnResponseHeadersPolicyProps {\n\nn    readonly responseHeadersPolicyConfig: CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResponseHeadersPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnResponseHeadersPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('responseHeadersPolicyConfig', cdk.requiredValidator)(properties.responseHeadersPolicyConfig));\n    errors.collect(cdk.propertyValidator('responseHeadersPolicyConfig', CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyValidator)(properties.responseHeadersPolicyConfig));\n    return errors.wrap('supplied properties not correct for \"CfnResponseHeadersPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnResponseHeadersPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicyPropsValidator(properties).assertSuccess();\n    return {\n        ResponseHeadersPolicyConfig: cfnResponseHeadersPolicyResponseHeadersPolicyConfigPropertyToCloudFormation(properties.responseHeadersPolicyConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicyProps>();\n    ret.addPropertyResult('responseHeadersPolicyConfig', 'ResponseHeadersPolicyConfig', CfnResponseHeadersPolicyResponseHeadersPolicyConfigPropertyFromCloudFormation(properties.ResponseHeadersPolicyConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResponseHeadersPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::ResponseHeadersPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResponseHeadersPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResponseHeadersPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResponseHeadersPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                           \n    public readonly attrId: string;\n\n                                                                                                                                             \n    public readonly attrLastModifiedTime: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public responseHeadersPolicyConfig: CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnResponseHeadersPolicyProps) {\n        super(scope, id, { type: CfnResponseHeadersPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'responseHeadersPolicyConfig', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrLastModifiedTime = cdk.Token.asString(this.getAtt('LastModifiedTime'));\n\n        this.responseHeadersPolicyConfig = props.responseHeadersPolicyConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResponseHeadersPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            responseHeadersPolicyConfig: this.responseHeadersPolicyConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResponseHeadersPolicyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface AccessControlAllowHeadersProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly items: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessControlAllowHeadersProperty`\n *\n * @param properties - the TypeScript properties of a `AccessControlAllowHeadersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(cdk.validateString))(properties.items));\n    return errors.wrap('supplied properties not correct for \"AccessControlAllowHeadersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlAllowHeaders` resource\n *\n * @param properties - the TypeScript properties of a `AccessControlAllowHeadersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlAllowHeaders` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyAccessControlAllowHeadersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cdk.stringToCloudFormation)(properties.items),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyAccessControlAllowHeadersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getStringArray(properties.Items));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface AccessControlAllowMethodsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly items: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessControlAllowMethodsProperty`\n *\n * @param properties - the TypeScript properties of a `AccessControlAllowMethodsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(cdk.validateString))(properties.items));\n    return errors.wrap('supplied properties not correct for \"AccessControlAllowMethodsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlAllowMethods` resource\n *\n * @param properties - the TypeScript properties of a `AccessControlAllowMethodsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlAllowMethods` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyAccessControlAllowMethodsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cdk.stringToCloudFormation)(properties.items),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyAccessControlAllowMethodsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getStringArray(properties.Items));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface AccessControlAllowOriginsProperty {\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly items: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessControlAllowOriginsProperty`\n *\n * @param properties - the TypeScript properties of a `AccessControlAllowOriginsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(cdk.validateString))(properties.items));\n    return errors.wrap('supplied properties not correct for \"AccessControlAllowOriginsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlAllowOrigins` resource\n *\n * @param properties - the TypeScript properties of a `AccessControlAllowOriginsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlAllowOrigins` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyAccessControlAllowOriginsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cdk.stringToCloudFormation)(properties.items),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyAccessControlAllowOriginsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getStringArray(properties.Items));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface AccessControlExposeHeadersProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly items: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessControlExposeHeadersProperty`\n *\n * @param properties - the TypeScript properties of a `AccessControlExposeHeadersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(cdk.validateString))(properties.items));\n    return errors.wrap('supplied properties not correct for \"AccessControlExposeHeadersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlExposeHeaders` resource\n *\n * @param properties - the TypeScript properties of a `AccessControlExposeHeadersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.AccessControlExposeHeaders` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyAccessControlExposeHeadersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cdk.stringToCloudFormation)(properties.items),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyAccessControlExposeHeadersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getStringArray(properties.Items));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface ContentSecurityPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly contentSecurityPolicy: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly override: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContentSecurityPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `ContentSecurityPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contentSecurityPolicy', cdk.requiredValidator)(properties.contentSecurityPolicy));\n    errors.collect(cdk.propertyValidator('contentSecurityPolicy', cdk.validateString)(properties.contentSecurityPolicy));\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    return errors.wrap('supplied properties not correct for \"ContentSecurityPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ContentSecurityPolicy` resource\n *\n * @param properties - the TypeScript properties of a `ContentSecurityPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ContentSecurityPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyContentSecurityPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        ContentSecurityPolicy: cdk.stringToCloudFormation(properties.contentSecurityPolicy),\n        Override: cdk.booleanToCloudFormation(properties.override),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyContentSecurityPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.ContentSecurityPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.ContentSecurityPolicyProperty>();\n    ret.addPropertyResult('contentSecurityPolicy', 'ContentSecurityPolicy', cfn_parse.FromCloudFormation.getString(properties.ContentSecurityPolicy));\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface ContentTypeOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly override: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContentTypeOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `ContentTypeOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_ContentTypeOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    return errors.wrap('supplied properties not correct for \"ContentTypeOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ContentTypeOptions` resource\n *\n * @param properties - the TypeScript properties of a `ContentTypeOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ContentTypeOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyContentTypeOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_ContentTypeOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Override: cdk.booleanToCloudFormation(properties.override),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyContentTypeOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.ContentTypeOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.ContentTypeOptionsProperty>();\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface CorsConfigProperty {\nn        readonly accessControlAllowCredentials: boolean | cdk.IResolvable;\nn        readonly accessControlAllowHeaders: CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty | cdk.IResolvable;\nn        readonly accessControlAllowMethods: CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty | cdk.IResolvable;\nn        readonly accessControlAllowOrigins: CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty | cdk.IResolvable;\nn        readonly accessControlExposeHeaders?: CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly accessControlMaxAgeSec?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly originOverride: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CorsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CorsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_CorsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessControlAllowCredentials', cdk.requiredValidator)(properties.accessControlAllowCredentials));\n    errors.collect(cdk.propertyValidator('accessControlAllowCredentials', cdk.validateBoolean)(properties.accessControlAllowCredentials));\n    errors.collect(cdk.propertyValidator('accessControlAllowHeaders', cdk.requiredValidator)(properties.accessControlAllowHeaders));\n    errors.collect(cdk.propertyValidator('accessControlAllowHeaders', CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyValidator)(properties.accessControlAllowHeaders));\n    errors.collect(cdk.propertyValidator('accessControlAllowMethods', cdk.requiredValidator)(properties.accessControlAllowMethods));\n    errors.collect(cdk.propertyValidator('accessControlAllowMethods', CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyValidator)(properties.accessControlAllowMethods));\n    errors.collect(cdk.propertyValidator('accessControlAllowOrigins', cdk.requiredValidator)(properties.accessControlAllowOrigins));\n    errors.collect(cdk.propertyValidator('accessControlAllowOrigins', CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyValidator)(properties.accessControlAllowOrigins));\n    errors.collect(cdk.propertyValidator('accessControlExposeHeaders', CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyValidator)(properties.accessControlExposeHeaders));\n    errors.collect(cdk.propertyValidator('accessControlMaxAgeSec', cdk.validateNumber)(properties.accessControlMaxAgeSec));\n    errors.collect(cdk.propertyValidator('originOverride', cdk.requiredValidator)(properties.originOverride));\n    errors.collect(cdk.propertyValidator('originOverride', cdk.validateBoolean)(properties.originOverride));\n    return errors.wrap('supplied properties not correct for \"CorsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.CorsConfig` resource\n *\n * @param properties - the TypeScript properties of a `CorsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.CorsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyCorsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_CorsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AccessControlAllowCredentials: cdk.booleanToCloudFormation(properties.accessControlAllowCredentials),\n        AccessControlAllowHeaders: cfnResponseHeadersPolicyAccessControlAllowHeadersPropertyToCloudFormation(properties.accessControlAllowHeaders),\n        AccessControlAllowMethods: cfnResponseHeadersPolicyAccessControlAllowMethodsPropertyToCloudFormation(properties.accessControlAllowMethods),\n        AccessControlAllowOrigins: cfnResponseHeadersPolicyAccessControlAllowOriginsPropertyToCloudFormation(properties.accessControlAllowOrigins),\n        AccessControlExposeHeaders: cfnResponseHeadersPolicyAccessControlExposeHeadersPropertyToCloudFormation(properties.accessControlExposeHeaders),\n        AccessControlMaxAgeSec: cdk.numberToCloudFormation(properties.accessControlMaxAgeSec),\n        OriginOverride: cdk.booleanToCloudFormation(properties.originOverride),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyCorsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.CorsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.CorsConfigProperty>();\n    ret.addPropertyResult('accessControlAllowCredentials', 'AccessControlAllowCredentials', cfn_parse.FromCloudFormation.getBoolean(properties.AccessControlAllowCredentials));\n    ret.addPropertyResult('accessControlAllowHeaders', 'AccessControlAllowHeaders', CfnResponseHeadersPolicyAccessControlAllowHeadersPropertyFromCloudFormation(properties.AccessControlAllowHeaders));\n    ret.addPropertyResult('accessControlAllowMethods', 'AccessControlAllowMethods', CfnResponseHeadersPolicyAccessControlAllowMethodsPropertyFromCloudFormation(properties.AccessControlAllowMethods));\n    ret.addPropertyResult('accessControlAllowOrigins', 'AccessControlAllowOrigins', CfnResponseHeadersPolicyAccessControlAllowOriginsPropertyFromCloudFormation(properties.AccessControlAllowOrigins));\n    ret.addPropertyResult('accessControlExposeHeaders', 'AccessControlExposeHeaders', properties.AccessControlExposeHeaders != null ? CfnResponseHeadersPolicyAccessControlExposeHeadersPropertyFromCloudFormation(properties.AccessControlExposeHeaders) : undefined);\n    ret.addPropertyResult('accessControlMaxAgeSec', 'AccessControlMaxAgeSec', properties.AccessControlMaxAgeSec != null ? cfn_parse.FromCloudFormation.getNumber(properties.AccessControlMaxAgeSec) : undefined);\n    ret.addPropertyResult('originOverride', 'OriginOverride', cfn_parse.FromCloudFormation.getBoolean(properties.OriginOverride));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface CustomHeaderProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly header: string;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly override: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                              \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomHeaderProperty`\n *\n * @param properties - the TypeScript properties of a `CustomHeaderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_CustomHeaderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('header', cdk.requiredValidator)(properties.header));\n    errors.collect(cdk.propertyValidator('header', cdk.validateString)(properties.header));\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"CustomHeaderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.CustomHeader` resource\n *\n * @param properties - the TypeScript properties of a `CustomHeaderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.CustomHeader` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyCustomHeaderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_CustomHeaderPropertyValidator(properties).assertSuccess();\n    return {\n        Header: cdk.stringToCloudFormation(properties.header),\n        Override: cdk.booleanToCloudFormation(properties.override),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyCustomHeaderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.CustomHeaderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.CustomHeaderProperty>();\n    ret.addPropertyResult('header', 'Header', cfn_parse.FromCloudFormation.getString(properties.Header));\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface CustomHeadersConfigProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly items: Array<CfnResponseHeadersPolicy.CustomHeaderProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomHeadersConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CustomHeadersConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_CustomHeadersConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('items', cdk.requiredValidator)(properties.items));\n    errors.collect(cdk.propertyValidator('items', cdk.listValidator(CfnResponseHeadersPolicy_CustomHeaderPropertyValidator))(properties.items));\n    return errors.wrap('supplied properties not correct for \"CustomHeadersConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.CustomHeadersConfig` resource\n *\n * @param properties - the TypeScript properties of a `CustomHeadersConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.CustomHeadersConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyCustomHeadersConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_CustomHeadersConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Items: cdk.listMapper(cfnResponseHeadersPolicyCustomHeaderPropertyToCloudFormation)(properties.items),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyCustomHeadersConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.CustomHeadersConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.CustomHeadersConfigProperty>();\n    ret.addPropertyResult('items', 'Items', cfn_parse.FromCloudFormation.getArray(CfnResponseHeadersPolicyCustomHeaderPropertyFromCloudFormation)(properties.Items));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface FrameOptionsProperty {\nn        readonly frameOption: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly override: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_FrameOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('frameOption', cdk.requiredValidator)(properties.frameOption));\n    errors.collect(cdk.propertyValidator('frameOption', cdk.validateString)(properties.frameOption));\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    return errors.wrap('supplied properties not correct for \"FrameOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.FrameOptions` resource\n *\n * @param properties - the TypeScript properties of a `FrameOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.FrameOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyFrameOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_FrameOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        FrameOption: cdk.stringToCloudFormation(properties.frameOption),\n        Override: cdk.booleanToCloudFormation(properties.override),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyFrameOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.FrameOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.FrameOptionsProperty>();\n    ret.addPropertyResult('frameOption', 'FrameOption', cfn_parse.FromCloudFormation.getString(properties.FrameOption));\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface ReferrerPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly override: boolean | cdk.IResolvable;\nn        readonly referrerPolicy: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReferrerPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `ReferrerPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_ReferrerPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    errors.collect(cdk.propertyValidator('referrerPolicy', cdk.requiredValidator)(properties.referrerPolicy));\n    errors.collect(cdk.propertyValidator('referrerPolicy', cdk.validateString)(properties.referrerPolicy));\n    return errors.wrap('supplied properties not correct for \"ReferrerPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ReferrerPolicy` resource\n *\n * @param properties - the TypeScript properties of a `ReferrerPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ReferrerPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyReferrerPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_ReferrerPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        Override: cdk.booleanToCloudFormation(properties.override),\n        ReferrerPolicy: cdk.stringToCloudFormation(properties.referrerPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyReferrerPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.ReferrerPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.ReferrerPolicyProperty>();\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addPropertyResult('referrerPolicy', 'ReferrerPolicy', cfn_parse.FromCloudFormation.getString(properties.ReferrerPolicy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface ResponseHeadersPolicyConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly comment?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly corsConfig?: CfnResponseHeadersPolicy.CorsConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly customHeadersConfig?: CfnResponseHeadersPolicy.CustomHeadersConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly securityHeadersConfig?: CfnResponseHeadersPolicy.SecurityHeadersConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResponseHeadersPolicyConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ResponseHeadersPolicyConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('corsConfig', CfnResponseHeadersPolicy_CorsConfigPropertyValidator)(properties.corsConfig));\n    errors.collect(cdk.propertyValidator('customHeadersConfig', CfnResponseHeadersPolicy_CustomHeadersConfigPropertyValidator)(properties.customHeadersConfig));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('securityHeadersConfig', CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyValidator)(properties.securityHeadersConfig));\n    return errors.wrap('supplied properties not correct for \"ResponseHeadersPolicyConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ResponseHeadersPolicyConfig` resource\n *\n * @param properties - the TypeScript properties of a `ResponseHeadersPolicyConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.ResponseHeadersPolicyConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyResponseHeadersPolicyConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        CorsConfig: cfnResponseHeadersPolicyCorsConfigPropertyToCloudFormation(properties.corsConfig),\n        CustomHeadersConfig: cfnResponseHeadersPolicyCustomHeadersConfigPropertyToCloudFormation(properties.customHeadersConfig),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SecurityHeadersConfig: cfnResponseHeadersPolicySecurityHeadersConfigPropertyToCloudFormation(properties.securityHeadersConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyResponseHeadersPolicyConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty>();\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('corsConfig', 'CorsConfig', properties.CorsConfig != null ? CfnResponseHeadersPolicyCorsConfigPropertyFromCloudFormation(properties.CorsConfig) : undefined);\n    ret.addPropertyResult('customHeadersConfig', 'CustomHeadersConfig', properties.CustomHeadersConfig != null ? CfnResponseHeadersPolicyCustomHeadersConfigPropertyFromCloudFormation(properties.CustomHeadersConfig) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('securityHeadersConfig', 'SecurityHeadersConfig', properties.SecurityHeadersConfig != null ? CfnResponseHeadersPolicySecurityHeadersConfigPropertyFromCloudFormation(properties.SecurityHeadersConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface SecurityHeadersConfigProperty {\nn        readonly contentSecurityPolicy?: CfnResponseHeadersPolicy.ContentSecurityPolicyProperty | cdk.IResolvable;\nn        readonly contentTypeOptions?: CfnResponseHeadersPolicy.ContentTypeOptionsProperty | cdk.IResolvable;\nn        readonly frameOptions?: CfnResponseHeadersPolicy.FrameOptionsProperty | cdk.IResolvable;\nn        readonly referrerPolicy?: CfnResponseHeadersPolicy.ReferrerPolicyProperty | cdk.IResolvable;\nn        readonly strictTransportSecurity?: CfnResponseHeadersPolicy.StrictTransportSecurityProperty | cdk.IResolvable;\nn        readonly xssProtection?: CfnResponseHeadersPolicy.XSSProtectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SecurityHeadersConfigProperty`\n *\n * @param properties - the TypeScript properties of a `SecurityHeadersConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contentSecurityPolicy', CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyValidator)(properties.contentSecurityPolicy));\n    errors.collect(cdk.propertyValidator('contentTypeOptions', CfnResponseHeadersPolicy_ContentTypeOptionsPropertyValidator)(properties.contentTypeOptions));\n    errors.collect(cdk.propertyValidator('frameOptions', CfnResponseHeadersPolicy_FrameOptionsPropertyValidator)(properties.frameOptions));\n    errors.collect(cdk.propertyValidator('referrerPolicy', CfnResponseHeadersPolicy_ReferrerPolicyPropertyValidator)(properties.referrerPolicy));\n    errors.collect(cdk.propertyValidator('strictTransportSecurity', CfnResponseHeadersPolicy_StrictTransportSecurityPropertyValidator)(properties.strictTransportSecurity));\n    errors.collect(cdk.propertyValidator('xssProtection', CfnResponseHeadersPolicy_XSSProtectionPropertyValidator)(properties.xssProtection));\n    return errors.wrap('supplied properties not correct for \"SecurityHeadersConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.SecurityHeadersConfig` resource\n *\n * @param properties - the TypeScript properties of a `SecurityHeadersConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.SecurityHeadersConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicySecurityHeadersConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ContentSecurityPolicy: cfnResponseHeadersPolicyContentSecurityPolicyPropertyToCloudFormation(properties.contentSecurityPolicy),\n        ContentTypeOptions: cfnResponseHeadersPolicyContentTypeOptionsPropertyToCloudFormation(properties.contentTypeOptions),\n        FrameOptions: cfnResponseHeadersPolicyFrameOptionsPropertyToCloudFormation(properties.frameOptions),\n        ReferrerPolicy: cfnResponseHeadersPolicyReferrerPolicyPropertyToCloudFormation(properties.referrerPolicy),\n        StrictTransportSecurity: cfnResponseHeadersPolicyStrictTransportSecurityPropertyToCloudFormation(properties.strictTransportSecurity),\n        XSSProtection: cfnResponseHeadersPolicyXSSProtectionPropertyToCloudFormation(properties.xssProtection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicySecurityHeadersConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.SecurityHeadersConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.SecurityHeadersConfigProperty>();\n    ret.addPropertyResult('contentSecurityPolicy', 'ContentSecurityPolicy', properties.ContentSecurityPolicy != null ? CfnResponseHeadersPolicyContentSecurityPolicyPropertyFromCloudFormation(properties.ContentSecurityPolicy) : undefined);\n    ret.addPropertyResult('contentTypeOptions', 'ContentTypeOptions', properties.ContentTypeOptions != null ? CfnResponseHeadersPolicyContentTypeOptionsPropertyFromCloudFormation(properties.ContentTypeOptions) : undefined);\n    ret.addPropertyResult('frameOptions', 'FrameOptions', properties.FrameOptions != null ? CfnResponseHeadersPolicyFrameOptionsPropertyFromCloudFormation(properties.FrameOptions) : undefined);\n    ret.addPropertyResult('referrerPolicy', 'ReferrerPolicy', properties.ReferrerPolicy != null ? CfnResponseHeadersPolicyReferrerPolicyPropertyFromCloudFormation(properties.ReferrerPolicy) : undefined);\n    ret.addPropertyResult('strictTransportSecurity', 'StrictTransportSecurity', properties.StrictTransportSecurity != null ? CfnResponseHeadersPolicyStrictTransportSecurityPropertyFromCloudFormation(properties.StrictTransportSecurity) : undefined);\n    ret.addPropertyResult('xssProtection', 'XSSProtection', properties.XSSProtection != null ? CfnResponseHeadersPolicyXSSProtectionPropertyFromCloudFormation(properties.XSSProtection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface StrictTransportSecurityProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly accessControlMaxAgeSec: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly includeSubdomains?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly override: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly preload?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StrictTransportSecurityProperty`\n *\n * @param properties - the TypeScript properties of a `StrictTransportSecurityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_StrictTransportSecurityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessControlMaxAgeSec', cdk.requiredValidator)(properties.accessControlMaxAgeSec));\n    errors.collect(cdk.propertyValidator('accessControlMaxAgeSec', cdk.validateNumber)(properties.accessControlMaxAgeSec));\n    errors.collect(cdk.propertyValidator('includeSubdomains', cdk.validateBoolean)(properties.includeSubdomains));\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    errors.collect(cdk.propertyValidator('preload', cdk.validateBoolean)(properties.preload));\n    return errors.wrap('supplied properties not correct for \"StrictTransportSecurityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.StrictTransportSecurity` resource\n *\n * @param properties - the TypeScript properties of a `StrictTransportSecurityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.StrictTransportSecurity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyStrictTransportSecurityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_StrictTransportSecurityPropertyValidator(properties).assertSuccess();\n    return {\n        AccessControlMaxAgeSec: cdk.numberToCloudFormation(properties.accessControlMaxAgeSec),\n        IncludeSubdomains: cdk.booleanToCloudFormation(properties.includeSubdomains),\n        Override: cdk.booleanToCloudFormation(properties.override),\n        Preload: cdk.booleanToCloudFormation(properties.preload),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyStrictTransportSecurityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.StrictTransportSecurityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.StrictTransportSecurityProperty>();\n    ret.addPropertyResult('accessControlMaxAgeSec', 'AccessControlMaxAgeSec', cfn_parse.FromCloudFormation.getNumber(properties.AccessControlMaxAgeSec));\n    ret.addPropertyResult('includeSubdomains', 'IncludeSubdomains', properties.IncludeSubdomains != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeSubdomains) : undefined);\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addPropertyResult('preload', 'Preload', properties.Preload != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Preload) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResponseHeadersPolicy {\nn    export interface XSSProtectionProperty {\nn        readonly modeBlock?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly override: boolean | cdk.IResolvable;\nn        readonly protection: boolean | cdk.IResolvable;\nn        readonly reportUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `XSSProtectionProperty`\n *\n * @param properties - the TypeScript properties of a `XSSProtectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResponseHeadersPolicy_XSSProtectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('modeBlock', cdk.validateBoolean)(properties.modeBlock));\n    errors.collect(cdk.propertyValidator('override', cdk.requiredValidator)(properties.override));\n    errors.collect(cdk.propertyValidator('override', cdk.validateBoolean)(properties.override));\n    errors.collect(cdk.propertyValidator('protection', cdk.requiredValidator)(properties.protection));\n    errors.collect(cdk.propertyValidator('protection', cdk.validateBoolean)(properties.protection));\n    errors.collect(cdk.propertyValidator('reportUri', cdk.validateString)(properties.reportUri));\n    return errors.wrap('supplied properties not correct for \"XSSProtectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.XSSProtection` resource\n *\n * @param properties - the TypeScript properties of a `XSSProtectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::ResponseHeadersPolicy.XSSProtection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResponseHeadersPolicyXSSProtectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResponseHeadersPolicy_XSSProtectionPropertyValidator(properties).assertSuccess();\n    return {\n        ModeBlock: cdk.booleanToCloudFormation(properties.modeBlock),\n        Override: cdk.booleanToCloudFormation(properties.override),\n        Protection: cdk.booleanToCloudFormation(properties.protection),\n        ReportUri: cdk.stringToCloudFormation(properties.reportUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResponseHeadersPolicyXSSProtectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResponseHeadersPolicy.XSSProtectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResponseHeadersPolicy.XSSProtectionProperty>();\n    ret.addPropertyResult('modeBlock', 'ModeBlock', properties.ModeBlock != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ModeBlock) : undefined);\n    ret.addPropertyResult('override', 'Override', cfn_parse.FromCloudFormation.getBoolean(properties.Override));\n    ret.addPropertyResult('protection', 'Protection', cfn_parse.FromCloudFormation.getBoolean(properties.Protection));\n    ret.addPropertyResult('reportUri', 'ReportUri', properties.ReportUri != null ? cfn_parse.FromCloudFormation.getString(properties.ReportUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                 \nexport interface CfnStreamingDistributionProps {\n\n                                                                                                                                                                                                                                                                                             \n    readonly streamingDistributionConfig: CfnStreamingDistribution.StreamingDistributionConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly tags: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStreamingDistributionProps`\n *\n * @param properties - the TypeScript properties of a `CfnStreamingDistributionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamingDistributionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('streamingDistributionConfig', cdk.requiredValidator)(properties.streamingDistributionConfig));\n    errors.collect(cdk.propertyValidator('streamingDistributionConfig', CfnStreamingDistribution_StreamingDistributionConfigPropertyValidator)(properties.streamingDistributionConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.requiredValidator)(properties.tags));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnStreamingDistributionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution` resource\n *\n * @param properties - the TypeScript properties of a `CfnStreamingDistributionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamingDistributionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamingDistributionPropsValidator(properties).assertSuccess();\n    return {\n        StreamingDistributionConfig: cfnStreamingDistributionStreamingDistributionConfigPropertyToCloudFormation(properties.streamingDistributionConfig),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamingDistributionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamingDistributionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamingDistributionProps>();\n    ret.addPropertyResult('streamingDistributionConfig', 'StreamingDistributionConfig', CfnStreamingDistributionStreamingDistributionConfigPropertyFromCloudFormation(properties.StreamingDistributionConfig));\n    ret.addPropertyResult('tags', 'Tags', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStreamingDistribution extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CloudFront::StreamingDistribution\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStreamingDistribution {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStreamingDistributionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStreamingDistribution(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                            \n    public readonly attrDomainName: string;\n\n                                                                                                                                                                                                                                                                                             \n    public streamingDistributionConfig: CfnStreamingDistribution.StreamingDistributionConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnStreamingDistributionProps) {\n        super(scope, id, { type: CfnStreamingDistribution.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'streamingDistributionConfig', this);\n        cdk.requireProperty(props, 'tags', this);\n        this.attrDomainName = cdk.Token.asString(this.getAtt('DomainName'));\n\n        this.streamingDistributionConfig = props.streamingDistributionConfig;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CloudFront::StreamingDistribution\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStreamingDistribution.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            streamingDistributionConfig: this.streamingDistributionConfig,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStreamingDistributionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStreamingDistribution {\n                                                                                                                                                                                                                                                                                                                   \n    export interface LoggingProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly bucket: string;\nn        readonly enabled: boolean | cdk.IResolvable;\nn        readonly prefix: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamingDistribution_LoggingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('prefix', cdk.requiredValidator)(properties.prefix));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    return errors.wrap('supplied properties not correct for \"LoggingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.Logging` resource\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.Logging` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamingDistributionLoggingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamingDistribution_LoggingPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamingDistributionLoggingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamingDistribution.LoggingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamingDistribution.LoggingProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('prefix', 'Prefix', cfn_parse.FromCloudFormation.getString(properties.Prefix));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStreamingDistribution {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface S3OriginProperty {\n                                                                                                                                                                                                                                                                                         \n        readonly domainName: string;\nn        readonly originAccessIdentity: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OriginProperty`\n *\n * @param properties - the TypeScript properties of a `S3OriginProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamingDistribution_S3OriginPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('originAccessIdentity', cdk.requiredValidator)(properties.originAccessIdentity));\n    errors.collect(cdk.propertyValidator('originAccessIdentity', cdk.validateString)(properties.originAccessIdentity));\n    return errors.wrap('supplied properties not correct for \"S3OriginProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.S3Origin` resource\n *\n * @param properties - the TypeScript properties of a `S3OriginProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.S3Origin` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamingDistributionS3OriginPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamingDistribution_S3OriginPropertyValidator(properties).assertSuccess();\n    return {\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        OriginAccessIdentity: cdk.stringToCloudFormation(properties.originAccessIdentity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamingDistributionS3OriginPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamingDistribution.S3OriginProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamingDistribution.S3OriginProperty>();\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('originAccessIdentity', 'OriginAccessIdentity', cfn_parse.FromCloudFormation.getString(properties.OriginAccessIdentity));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStreamingDistribution {\n                                                                                                                                                                                                                                                                                             \n    export interface StreamingDistributionConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly aliases?: string[];\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly comment: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly enabled: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly logging?: CfnStreamingDistribution.LoggingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly priceClass?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly s3Origin: CfnStreamingDistribution.S3OriginProperty | cdk.IResolvable;\nn        readonly trustedSigners: CfnStreamingDistribution.TrustedSignersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StreamingDistributionConfigProperty`\n *\n * @param properties - the TypeScript properties of a `StreamingDistributionConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamingDistribution_StreamingDistributionConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aliases', cdk.listValidator(cdk.validateString))(properties.aliases));\n    errors.collect(cdk.propertyValidator('comment', cdk.requiredValidator)(properties.comment));\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('logging', CfnStreamingDistribution_LoggingPropertyValidator)(properties.logging));\n    errors.collect(cdk.propertyValidator('priceClass', cdk.validateString)(properties.priceClass));\n    errors.collect(cdk.propertyValidator('s3Origin', cdk.requiredValidator)(properties.s3Origin));\n    errors.collect(cdk.propertyValidator('s3Origin', CfnStreamingDistribution_S3OriginPropertyValidator)(properties.s3Origin));\n    errors.collect(cdk.propertyValidator('trustedSigners', cdk.requiredValidator)(properties.trustedSigners));\n    errors.collect(cdk.propertyValidator('trustedSigners', CfnStreamingDistribution_TrustedSignersPropertyValidator)(properties.trustedSigners));\n    return errors.wrap('supplied properties not correct for \"StreamingDistributionConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig` resource\n *\n * @param properties - the TypeScript properties of a `StreamingDistributionConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamingDistributionStreamingDistributionConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamingDistribution_StreamingDistributionConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Aliases: cdk.listMapper(cdk.stringToCloudFormation)(properties.aliases),\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        Logging: cfnStreamingDistributionLoggingPropertyToCloudFormation(properties.logging),\n        PriceClass: cdk.stringToCloudFormation(properties.priceClass),\n        S3Origin: cfnStreamingDistributionS3OriginPropertyToCloudFormation(properties.s3Origin),\n        TrustedSigners: cfnStreamingDistributionTrustedSignersPropertyToCloudFormation(properties.trustedSigners),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamingDistributionStreamingDistributionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamingDistribution.StreamingDistributionConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamingDistribution.StreamingDistributionConfigProperty>();\n    ret.addPropertyResult('aliases', 'Aliases', properties.Aliases != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Aliases) : undefined);\n    ret.addPropertyResult('comment', 'Comment', cfn_parse.FromCloudFormation.getString(properties.Comment));\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('logging', 'Logging', properties.Logging != null ? CfnStreamingDistributionLoggingPropertyFromCloudFormation(properties.Logging) : undefined);\n    ret.addPropertyResult('priceClass', 'PriceClass', properties.PriceClass != null ? cfn_parse.FromCloudFormation.getString(properties.PriceClass) : undefined);\n    ret.addPropertyResult('s3Origin', 'S3Origin', CfnStreamingDistributionS3OriginPropertyFromCloudFormation(properties.S3Origin));\n    ret.addPropertyResult('trustedSigners', 'TrustedSigners', CfnStreamingDistributionTrustedSignersPropertyFromCloudFormation(properties.TrustedSigners));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStreamingDistribution {\n                                                                                                                                                                                                                                                                                                                                                     \n    export interface TrustedSignersProperty {\nn        readonly awsAccountNumbers?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly enabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TrustedSignersProperty`\n *\n * @param properties - the TypeScript properties of a `TrustedSignersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamingDistribution_TrustedSignersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsAccountNumbers', cdk.listValidator(cdk.validateString))(properties.awsAccountNumbers));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"TrustedSignersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.TrustedSigners` resource\n *\n * @param properties - the TypeScript properties of a `TrustedSignersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CloudFront::StreamingDistribution.TrustedSigners` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamingDistributionTrustedSignersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamingDistribution_TrustedSignersPropertyValidator(properties).assertSuccess();\n    return {\n        AwsAccountNumbers: cdk.listMapper(cdk.stringToCloudFormation)(properties.awsAccountNumbers),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamingDistributionTrustedSignersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamingDistribution.TrustedSignersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamingDistribution.TrustedSignersProperty>();\n    ret.addPropertyResult('awsAccountNumbers', 'AwsAccountNumbers', properties.AwsAccountNumbers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AwsAccountNumbers) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
