{
  "version": 3,
  "sources": ["distribution.ts"],
  "sourcesContent": ["import * as acm from '../../aws-certificatemanager';\nimport * as lambda from '../../aws-lambda';\nimport * as s3 from '../../aws-s3';\nimport { ArnFormat, IResource, Lazy, Resource, Stack, Token, Duration, Names, FeatureFlags } from '../../core';\nimport { CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021 } from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { ICachePolicy } from './cache-policy';\nimport { CfnDistribution } from './cloudfront.generated';\nimport { FunctionAssociation } from './function';\nimport { GeoRestriction } from './geo-restriction';\nimport { IKeyGroup } from './key-group';\nimport { IOrigin, OriginBindConfig, OriginBindOptions } from './origin';\nimport { IOriginRequestPolicy } from './origin-request-policy';\nimport { CacheBehavior } from './private/cache-behavior';\nimport { IResponseHeadersPolicy } from './response-headers-policy';\n\n                                                 \nexport interface IDistribution extends IResource {\n                                                                                                                                                                          \n  readonly domainName: string;\n\n                                                                                                                 \n  readonly distributionDomainName: string;\n\n                                                                                \n  readonly distributionId: string;\n}\n\n                                                    \nexport interface DistributionAttributes {\n                                                                                                                           \n  readonly domainName: string;\n\n                                                                                \n  readonly distributionId: string;\n}\n\ninterface BoundOrigin extends OriginBindOptions, OriginBindConfig {\n  readonly origin: IOrigin;\n  readonly originGroupId?: string;\n}\n\n                                        \nexport interface DistributionProps {\n                                                           \n  readonly defaultBehavior: BehaviorOptions;\n\n                                                                                                                                                                                                     \n  readonly additionalBehaviors?: Record<string, BehaviorOptions>;\n\n                                                                                                                                                                                                                        \n  readonly certificate?: acm.ICertificate;\n\n                                                                                                         \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                                                                                    \n  readonly defaultRootObject?: string;\n\nn  readonly domainNames?: string[];\n\n                                                                            \n  readonly enabled?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                         \n  readonly enableIpv6?: boolean;\n\n                                                                                                                         \n  readonly enableLogging?: boolean;\n\n                                                                                                                             \n  readonly geoRestriction?: GeoRestriction;\n\n                                                                                                                                                                                                                                                                                                 \n  readonly httpVersion?: HttpVersion;\n\n                                                                                                                                      \n  readonly logBucket?: s3.IBucket;\n\n                                                                                                                 \n  readonly logIncludesCookies?: boolean;\n\n                                                                                                                                                        \n  readonly logFilePrefix?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n  readonly priceClass?: PriceClass;\n\nn  readonly webAclId?: string;\n\n                                                                                                                                                    \n  readonly errorResponses?: ErrorResponse[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly minimumProtocolVersion?: SecurityPolicyProtocol;\n}\n\n                                                                                       \nexport class Distribution extends Resource implements IDistribution {\n\n                                                                                                      \n  public static fromDistributionAttributes(scope: Construct, id: string, attrs: DistributionAttributes): IDistribution {\n    return new class extends Resource implements IDistribution {\n      public readonly domainName: string;\n      public readonly distributionDomainName: string;\n      public readonly distributionId: string;\n\n      constructor() {\n        super(scope, id);\n        this.domainName = attrs.domainName;\n        this.distributionDomainName = attrs.domainName;\n        this.distributionId = attrs.distributionId;\n      }\n    }();\n  }\n\n  public readonly domainName: string;\n  public readonly distributionDomainName: string;\n  public readonly distributionId: string;\n\n  private readonly defaultBehavior: CacheBehavior;\n  private readonly additionalBehaviors: CacheBehavior[] = [];\n  private readonly boundOrigins: BoundOrigin[] = [];\n  private readonly originGroups: CfnDistribution.OriginGroupProperty[] = [];\n\n  private readonly errorResponses: ErrorResponse[];\n  private readonly certificate?: acm.ICertificate;\n\n  constructor(scope: Construct, id: string, props: DistributionProps) {\n    super(scope, id);\n\n    if (props.certificate) {\n      const certificateRegion = Stack.of(this).splitArn(props.certificate.certificateArn, ArnFormat.SLASH_RESOURCE_NAME).region;\n      if (!Token.isUnresolved(certificateRegion) && certificateRegion !== 'us-east-1') {\n        throw new Error(`Distribution certificates must be in the us-east-1 region and the certificate you provided is in ${certificateRegion}.`);\n      }\n\n      if ((props.domainNames ?? []).length === 0) {\n        throw new Error('Must specify at least one domain name to use a certificate with a distribution');\n      }\n    }\n\n    const originId = this.addOrigin(props.defaultBehavior.origin);\n    this.defaultBehavior = new CacheBehavior(originId, { pathPattern: '*', ...props.defaultBehavior });\n    if (props.additionalBehaviors) {\n      Object.entries(props.additionalBehaviors).forEach(([pathPattern, behaviorOptions]) => {\n        this.addBehavior(pathPattern, behaviorOptions.origin, behaviorOptions);\n      });\n    }\n\n    this.certificate = props.certificate;\n    this.errorResponses = props.errorResponses ?? [];\n\n    // Comments have an undocumented limit of 128 characters\n    const trimmedComment =\n      props.comment && props.comment.length > 128\n        ? `${props.comment.substr(0, 128 - 3)}...`\n        : props.comment;\n\n    const distribution = new CfnDistribution(this, 'Resource', {\n      distributionConfig: {\n        enabled: props.enabled ?? true,\n        origins: Lazy.any({ produce: () => this.renderOrigins() }),\n        originGroups: Lazy.any({ produce: () => this.renderOriginGroups() }),\n        defaultCacheBehavior: this.defaultBehavior._renderBehavior(),\n        aliases: props.domainNames,\n        cacheBehaviors: Lazy.any({ produce: () => this.renderCacheBehaviors() }),\n        comment: trimmedComment,\n        customErrorResponses: this.renderErrorResponses(),\n        defaultRootObject: props.defaultRootObject,\n        httpVersion: props.httpVersion ?? HttpVersion.HTTP2,\n        ipv6Enabled: props.enableIpv6 ?? true,\n        logging: this.renderLogging(props),\n        priceClass: props.priceClass ?? undefined,\n        restrictions: this.renderRestrictions(props.geoRestriction),\n        viewerCertificate: this.certificate ? this.renderViewerCertificate(this.certificate, props.minimumProtocolVersion) : undefined,\n        webAclId: props.webAclId,\n      },\n    });\n\n    this.domainName = distribution.attrDomainName;\n    this.distributionDomainName = distribution.attrDomainName;\n    this.distributionId = distribution.ref;\n  }\n\n                                                                                                                                                                                                                                                                                                                                           \n  public addBehavior(pathPattern: string, origin: IOrigin, behaviorOptions: AddBehaviorOptions = {}) {\n    if (pathPattern === '*') {\n      throw new Error('Only the default behavior can have a path pattern of \\'*\\'');\n    }\n    const originId = this.addOrigin(origin);\n    this.additionalBehaviors.push(new CacheBehavior(originId, { pathPattern, ...behaviorOptions }));\n  }\n\n  private addOrigin(origin: IOrigin, isFailoverOrigin: boolean = false): string {\n    const ORIGIN_ID_MAX_LENGTH = 128;\n\n    const existingOrigin = this.boundOrigins.find(boundOrigin => boundOrigin.origin === origin);\n    if (existingOrigin) {\n      return existingOrigin.originGroupId ?? existingOrigin.originId;\n    } else {\n      const originIndex = this.boundOrigins.length + 1;\n      const scope = new Construct(this, `Origin${originIndex}`);\n      const originId = Names.uniqueId(scope).slice(-ORIGIN_ID_MAX_LENGTH);\n      const originBindConfig = origin.bind(scope, { originId });\n      if (!originBindConfig.failoverConfig) {\n        this.boundOrigins.push({ origin, originId, ...originBindConfig });\n      } else {\n        if (isFailoverOrigin) {\n          throw new Error('An Origin cannot use an Origin with its own failover configuration as its fallback origin!');\n        }\n        const groupIndex = this.originGroups.length + 1;\n        const originGroupId = Names.uniqueId(new Construct(this, `OriginGroup${groupIndex}`)).slice(-ORIGIN_ID_MAX_LENGTH);\n        this.boundOrigins.push({ origin, originId, originGroupId, ...originBindConfig });\n\n        const failoverOriginId = this.addOrigin(originBindConfig.failoverConfig.failoverOrigin, true);\n        this.addOriginGroup(originGroupId, originBindConfig.failoverConfig.statusCodes, originId, failoverOriginId);\n        return originGroupId;\n      }\n      return originId;\n    }\n  }\n\n  private addOriginGroup(originGroupId: string, statusCodes: number[] | undefined, originId: string, failoverOriginId: string): void {\n    statusCodes = statusCodes ?? [500, 502, 503, 504];\n    if (statusCodes.length === 0) {\n      throw new Error('fallbackStatusCodes cannot be empty');\n    }\n    this.originGroups.push({\n      failoverCriteria: {\n        statusCodes: {\n          items: statusCodes,\n          quantity: statusCodes.length,\n        },\n      },\n      id: originGroupId,\n      members: {\n        items: [\n          { originId },\n          { originId: failoverOriginId },\n        ],\n        quantity: 2,\n      },\n    });\n  }\n\n  private renderOrigins(): CfnDistribution.OriginProperty[] {\n    const renderedOrigins: CfnDistribution.OriginProperty[] = [];\n    this.boundOrigins.forEach(boundOrigin => {\n      if (boundOrigin.originProperty) {\n        renderedOrigins.push(boundOrigin.originProperty);\n      }\n    });\n    return renderedOrigins;\n  }\n\n  private renderOriginGroups(): CfnDistribution.OriginGroupsProperty | undefined {\n    return this.originGroups.length === 0\n      ? undefined\n      : {\n        items: this.originGroups,\n        quantity: this.originGroups.length,\n      };\n  }\n\n  private renderCacheBehaviors(): CfnDistribution.CacheBehaviorProperty[] | undefined {\n    if (this.additionalBehaviors.length === 0) { return undefined; }\n    return this.additionalBehaviors.map(behavior => behavior._renderBehavior());\n  }\n\n  private renderErrorResponses(): CfnDistribution.CustomErrorResponseProperty[] | undefined {\n    if (this.errorResponses.length === 0) { return undefined; }\n\n    return this.errorResponses.map(errorConfig => {\n      if (!errorConfig.responseHttpStatus && !errorConfig.ttl && !errorConfig.responsePagePath) {\n        throw new Error('A custom error response without either a \\'responseHttpStatus\\', \\'ttl\\' or \\'responsePagePath\\' is not valid.');\n      }\n\n      return {\n        errorCachingMinTtl: errorConfig.ttl?.toSeconds(),\n        errorCode: errorConfig.httpStatus,\n        responseCode: errorConfig.responsePagePath\n          ? errorConfig.responseHttpStatus ?? errorConfig.httpStatus\n          : errorConfig.responseHttpStatus,\n        responsePagePath: errorConfig.responsePagePath,\n      };\n    });\n  }\n\n  private renderLogging(props: DistributionProps): CfnDistribution.LoggingProperty | undefined {\n    if (!props.enableLogging && !props.logBucket) { return undefined; }\n    if (props.enableLogging === false && props.logBucket) {\n      throw new Error('Explicitly disabled logging but provided a logging bucket.');\n    }\n\n    const bucket = props.logBucket ?? new s3.Bucket(this, 'LoggingBucket', {\n      encryption: s3.BucketEncryption.S3_MANAGED,\n      enforceSSL: true,\n    });\n    return {\n      bucket: bucket.bucketRegionalDomainName,\n      includeCookies: props.logIncludesCookies,\n      prefix: props.logFilePrefix,\n    };\n  }\n\n  private renderRestrictions(geoRestriction?: GeoRestriction) {\n    return geoRestriction ? {\n      geoRestriction: {\n        restrictionType: geoRestriction.restrictionType,\n        locations: geoRestriction.locations,\n      },\n    } : undefined;\n  }\n\n  private renderViewerCertificate(certificate: acm.ICertificate,\n    minimumProtocolVersionProp?: SecurityPolicyProtocol): CfnDistribution.ViewerCertificateProperty {\n\n    const defaultVersion = FeatureFlags.of(this).isEnabled(CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021)\n      ? SecurityPolicyProtocol.TLS_V1_2_2021 : SecurityPolicyProtocol.TLS_V1_2_2019;\n    const minimumProtocolVersion = minimumProtocolVersionProp ?? defaultVersion;\n\n    return {\n      acmCertificateArn: certificate.certificateArn,\n      sslSupportMethod: SSLMethod.SNI,\n      minimumProtocolVersion: minimumProtocolVersion,\n    };\n  }\n}\n\n                                      \nexport enum HttpVersion {\n                 \n  HTTP1_1 = 'http1.1',\n               \n  HTTP2 = 'http2'\n}\n\n                                                                                                                                                                                              \nexport enum PriceClass {\n                                      \n  PRICE_CLASS_100 = 'PriceClass_100',\n                                                                                                                            \n  PRICE_CLASS_200 = 'PriceClass_200',\n                      \n  PRICE_CLASS_ALL = 'PriceClass_All'\n}\n\n                                                              \nexport enum ViewerProtocolPolicy {\n                   \n  HTTPS_ONLY = 'https-only',\n                                             \n  REDIRECT_TO_HTTPS = 'redirect-to-https',\n                                      \n  ALLOW_ALL = 'allow-all'\n}\n\n                                                                              \nexport enum OriginProtocolPolicy {\n                             \n  HTTP_ONLY = 'http-only',\n                                                     \n  MATCH_VIEWER = 'match-viewer',\n                              \n  HTTPS_ONLY = 'https-only',\n}\n\nnexport enum SSLMethod {\n  SNI = 'sni-only',\n  VIP = 'vip'\n}\n\n                                                                                                                                                                                                                               \nexport enum SecurityPolicyProtocol {\n  SSL_V3 = 'SSLv3',\n  TLS_V1 = 'TLSv1',\n  TLS_V1_2016 = 'TLSv1_2016',\n  TLS_V1_1_2016 = 'TLSv1.1_2016',\n  TLS_V1_2_2018 = 'TLSv1.2_2018',\n  TLS_V1_2_2019 = 'TLSv1.2_2019',\n  TLS_V1_2_2021 = 'TLSv1.2_2021'\n}\n\n                                                                      \nexport class AllowedMethods {\n                     \n  public static readonly ALLOW_GET_HEAD = new AllowedMethods(['GET', 'HEAD']);\n                               \n  public static readonly ALLOW_GET_HEAD_OPTIONS = new AllowedMethods(['GET', 'HEAD', 'OPTIONS']);\n                                   \n  public static readonly ALLOW_ALL = new AllowedMethods(['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE']);\n\n                               \n  public readonly methods: string[];\n\n  private constructor(methods: string[]) { this.methods = methods; }\n}\n\n                                                                     \nexport class CachedMethods {\n                     \n  public static readonly CACHE_GET_HEAD = new CachedMethods(['GET', 'HEAD']);\n                               \n  public static readonly CACHE_GET_HEAD_OPTIONS = new CachedMethods(['GET', 'HEAD', 'OPTIONS']);\n\n                               \n  public readonly methods: string[];\n\n  private constructor(methods: string[]) { this.methods = methods; }\n}\n\n                                                          \nexport interface ErrorResponse {\n                                                                                                                                                                                                     \n  readonly ttl?: Duration;\n                                                                                                                  \n  readonly httpStatus: number;\n                                                                                                                                                                                                                                                                                                                    \n  readonly responseHttpStatus?: number;\n                                                                                                                                                                                                                                                            \n  readonly responsePagePath?: string;\n}\n\n                                                                                        \nexport enum LambdaEdgeEventType {\n                                                                                               \n  ORIGIN_REQUEST = 'origin-request',\n\n                                                                                                   \n  ORIGIN_RESPONSE = 'origin-response',\n\n                                                                  \n  VIEWER_REQUEST = 'viewer-request',\n\n                                                                    \n  VIEWER_RESPONSE = 'viewer-response',\n}\n\n                                                                                                                                                          \nexport interface EdgeLambda {\n                                                                                                                                                                      \n  readonly functionVersion: lambda.IVersion;\n\n                                                                               \n  readonly eventType: LambdaEdgeEventType;\n\n                                                                                                                                                                                                                                                                                                         \n  readonly includeBody?: boolean;\n}\n\n                                                               \nexport interface AddBehaviorOptions {\n                                                                                                          \n  readonly allowedMethods?: AllowedMethods;\n\n                                                                                                         \n  readonly cachedMethods?: CachedMethods;\n\n                                                                                                                                                                                                                                                                                                                                               \n  readonly cachePolicy?: ICachePolicy;\n\n                                                                                                                                                                                                                                                                                                                                    \n  readonly compress?: boolean;\n\n                                                                                                                                                                                                                                     \n  readonly originRequestPolicy?: IOriginRequestPolicy;\n\n                                                                                                                                                                        \n  readonly responseHeadersPolicy?: IResponseHeadersPolicy;\n\n                                                                                                                                                                       \n  readonly smoothStreaming?: boolean;\n\n                                                                                                                                                     \n  readonly viewerProtocolPolicy?: ViewerProtocolPolicy;\n\n                                                                                                                                  \n  readonly functionAssociations?: FunctionAssociation[];\n\n                                                                                                                                                                                       \n  readonly edgeLambdas?: EdgeLambda[];\n\n                                                                                                                                                                                                                                                                              \n  readonly trustedKeyGroups?: IKeyGroup[];\n}\n\n                                               \nexport interface BehaviorOptions extends AddBehaviorOptions {\n                                                                                                        \n  readonly origin: IOrigin;\n}\n"],
  "mappings": "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",
  "names": []
}
