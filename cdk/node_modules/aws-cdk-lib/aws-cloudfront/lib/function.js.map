{
  "version": 3,
  "sources": ["function.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport { IResource, Names, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnFunction } from './cloudfront.generated';\n\n                                                \nexport abstract class FunctionCode {\n\n                                                                                                                               \n  public static fromInline(code: string): FunctionCode {\n    return new InlineCode(code);\n  }\n\n                                                                                                                                                              \n  public static fromFile(options: FileCodeOptions): FunctionCode {\n    return new FileCode(options);\n  }\n\n                                          \n  public abstract render(): string;\n}\n\n                                                                         \nexport interface FileCodeOptions {\n                                                           \n  readonly filePath: string;\n}\n\n/**\n * Represents the function's source code as inline code\n */\nclass InlineCode extends FunctionCode {\n\n  constructor(private code: string) {\n    super();\n  }\n\n  public render(): string {\n    return this.code;\n  }\n}\n\n\n/**\n * Represents the function's source code loaded from an external file\n */\nclass FileCode extends FunctionCode {\n\n  constructor(private options: FileCodeOptions) {\n    super();\n  }\n\n  public render(): string {\n    return fs.readFileSync(this.options.filePath, { encoding: 'utf-8' });\n  }\n}\n\n                                           \nexport interface IFunction extends IResource {\n                                                          \n  readonly functionName: string;\n\n                                                         \n  readonly functionArn: string;\n}\n\n                                                                     \nexport interface FunctionAttributes {\n                                          \n  readonly functionName: string;\n\n                                         \n  readonly functionArn: string;\n}\n\n                                                        \nexport interface FunctionProps {\n                                                                                         \n  readonly functionName?: string;\n\n                                                                                           \n  readonly comment?: string;\n\n                                                 \n  readonly code: FunctionCode;\n}\n\n                                                                          \nexport class Function extends Resource implements IFunction {\n\n                                               \n  public static fromFunctionAttributes(scope: Construct, id: string, attrs: FunctionAttributes): IFunction {\n    return new class extends Resource implements IFunction {\n      public readonly functionName = attrs.functionName;\n      public readonly functionArn = attrs.functionArn;\n    }(scope, id);\n  }\n\n                                                                    \n  public readonly functionName: string;\n                                                                   \n  public readonly functionArn: string;\n                                                                                \n  public readonly functionStage: string;\n\n  constructor(scope: Construct, id: string, props: FunctionProps) {\n    super(scope, id);\n\n    this.functionName = props.functionName ?? this.generateName();\n\n    const resource = new CfnFunction(this, 'Resource', {\n      autoPublish: true,\n      functionCode: props.code.render(),\n      functionConfig: {\n        comment: props.comment ?? this.functionName,\n        runtime: 'cloudfront-js-1.0',\n      },\n      name: this.functionName,\n    });\n\n    this.functionArn = resource.attrFunctionArn;\n    this.functionStage = resource.attrStage;\n  }\n\n  private generateName(): string {\n    const name = Stack.of(this).region + Names.uniqueId(this);\n    if (name.length > 64) {\n      return name.substring(0, 32) + name.substring(name.length - 32);\n    }\n    return name;\n  }\n}\n\n                                                                                       \nexport enum FunctionEventType {\n\n                                                                  \n  VIEWER_REQUEST = 'viewer-request',\n\n                                                                    \n  VIEWER_RESPONSE = 'viewer-response',\n}\n\n                                                                                                                                                                \nexport interface FunctionAssociation {\n                                                              \n  readonly function: IFunction;\n\n                                                            \n  readonly eventType: FunctionEventType;\n}\n"],
  "mappings": "iQAAA,GAAA,QAAA,MACA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BAGA,kBAAkC,OAGlB,YAAW,KAAY,CACnC,MAAO,IAAI,YAAW,YAIV,UAAS,QAAwB,oFACtC,GAAI,UAAS,UATxB,QAAA,aAAA,qHAyBA,wBAAyB,aAAY,CAEnC,YAAoB,KAAY,CAC9B,QADkB,KAAA,KAAA,KAIb,QAAM,CACX,MAAO,MAAK,MAQhB,sBAAuB,aAAY,CAEjC,YAAoB,QAAwB,CAC1C,QADkB,KAAA,QAAA,QAIb,QAAM,CACX,MAAO,IAAG,aAAa,KAAK,QAAQ,SAAU,CAAE,SAAU,WAmC9D,sBAA8B,QAAA,QAAQ,CAiBpC,YAAY,MAAkB,GAAY,MAAoB,WAC5D,MAAM,MAAO,4EAEb,KAAK,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,KAAK,eAE/C,KAAM,UAAW,GAAI,wBAAA,YAAY,KAAM,WAAY,CACjD,YAAa,GACb,aAAc,MAAM,KAAK,SACzB,eAAgB,CACd,QAAO,IAAE,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,KAAK,aAC/B,QAAS,qBAEX,KAAM,KAAK,eAGb,KAAK,YAAc,SAAS,gBAC5B,KAAK,cAAgB,SAAS,gBA9BlB,wBAAuB,MAAkB,GAAY,MAAyB,qFACnF,GAAI,cAAc,QAAA,QAAQ,CAAtB,aAAA,qBACO,KAAA,aAAe,MAAM,aACrB,KAAA,YAAc,MAAM,cACpC,MAAO,IA6BH,cAAY,CAClB,KAAM,MAAO,OAAA,MAAM,GAAG,MAAM,OAAS,OAAA,MAAM,SAAS,MACpD,MAAI,MAAK,OAAS,GACT,KAAK,UAAU,EAAG,IAAM,KAAK,UAAU,KAAK,OAAS,IAEvD,MAzCX,QAAA,SAAA,yGA8CA,GAAY,mBAAZ,AAAA,UAAY,mBAAiB,CAG3B,mBAAA,eAAA,iBAGA,mBAAA,gBAAA,oBANU,kBAAA,QAAA,mBAAA,SAAA,kBAAiB",
  "names": []
}
