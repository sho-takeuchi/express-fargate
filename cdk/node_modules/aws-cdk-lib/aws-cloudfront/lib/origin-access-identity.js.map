{
  "version": 3,
  "sources": ["origin-access-identity.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnCloudFrontOriginAccessIdentity } from './cloudfront.generated';\n\n                                                        \nexport interface OriginAccessIdentityProps {\n                                                                                                                                              \n  readonly comment?: string;\n}\n\n                                                        \nexport interface IOriginAccessIdentity extends cdk.IResource, iam.IGrantable {\n                                                \n  readonly originAccessIdentityName: string;\n}\n\nabstract class OriginAccessIdentityBase extends cdk.Resource {\n  /**\n   * The Origin Access Identity Name (physical id)\n   */\n  public abstract readonly originAccessIdentityName: string;\n  /**\n   * Derived principal value for bucket access\n   */\n  public abstract readonly grantPrincipal: iam.IPrincipal;\n\n                                                                                  \n  protected arn(): string {\n    return cdk.Stack.of(this).formatArn(\n      {\n        service: 'iam',\n        region: '', // global\n        account: 'cloudfront',\n        resource: 'user',\n        resourceName: `CloudFront Origin Access Identity ${this.originAccessIdentityName}`,\n      },\n    );\n  }\n}\n\n                                                                                                                                                                                                                                                         \nexport class OriginAccessIdentity extends OriginAccessIdentityBase implements IOriginAccessIdentity {\n                                                                                         \n  public static fromOriginAccessIdentityName(\n    scope: Construct,\n    id: string,\n    originAccessIdentityName: string): IOriginAccessIdentity {\n\n    class Import extends OriginAccessIdentityBase {\n      public readonly originAccessIdentityName = originAccessIdentityName;\n      public readonly grantPrincipal = new iam.ArnPrincipal(this.arn());\n      constructor(s: Construct, i: string) {\n        super(s, i, { physicalName: originAccessIdentityName });\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                      \n  public readonly cloudFrontOriginAccessIdentityS3CanonicalUserId: string;\n\n                                                          \n  public readonly grantPrincipal: iam.IPrincipal;\n\n                                                                                   \n  public readonly originAccessIdentityName: string;\n\n  /**\n   * CDK L1 resource\n   */\n  private readonly resource: CfnCloudFrontOriginAccessIdentity;\n\n  constructor(scope: Construct, id: string, props?: OriginAccessIdentityProps) {\n    super(scope, id);\n\n    // Comment has a max length of 128.\n    const comment = (props?.comment ?? 'Allows CloudFront to reach the bucket').substr(0, 128);\n    this.resource = new CfnCloudFrontOriginAccessIdentity(this, 'Resource', {\n      cloudFrontOriginAccessIdentityConfig: { comment },\n    });\n    // physical id - OAI name\n    this.originAccessIdentityName = this.getResourceNameAttribute(this.resource.ref);\n\n    // Canonical user to grant access to in the S3 Bucket Policy\n    this.cloudFrontOriginAccessIdentityS3CanonicalUserId = this.resource.attrS3CanonicalUserId;\n    // The principal for must be either the canonical user or a special ARN\n    // with the CloudFront Origin Access Id (see `arn()` method). For\n    // import/export the OAI is anyway required so the principal is constructed\n    // with it. But for the normal case the S3 Canonical User as a nicer\n    // interface and does not require constructing the ARN.\n    this.grantPrincipal = new iam.CanonicalUserPrincipal(this.cloudFrontOriginAccessIdentityS3CanonicalUserId);\n  }\n}\n"],
  "mappings": "2NAAA,IAAA,QAAA,iBACA,IAAA,QAAA,cAEA,uBAAA,QAAA,0BAcA,sCAAgD,KAAI,QAAQ,CAWhD,KAAG,CACX,MAAO,KAAI,MAAM,GAAG,MAAM,UACxB,CACE,QAAS,MACT,OAAQ,GACR,QAAS,aACT,SAAU,OACV,aAAc,qCAAqC,KAAK,8BAOhE,kCAA0C,yBAAwB,CAgChE,YAAY,MAAkB,GAAY,MAAiC,QACzE,MAAM,MAAO,wFAGb,KAAM,SAAU,KAAC,OAAK,KAAA,OAAL,MAAO,WAAO,MAAA,KAAA,OAAA,GAAI,yCAAyC,OAAO,EAAG,KACtF,KAAK,SAAW,GAAI,wBAAA,kCAAkC,KAAM,WAAY,CACtE,qCAAsC,CAAE,WAG1C,KAAK,yBAA2B,KAAK,yBAAyB,KAAK,SAAS,KAG5E,KAAK,gDAAkD,KAAK,SAAS,sBAMrE,KAAK,eAAiB,GAAI,KAAI,uBAAuB,KAAK,uDAhD9C,8BACZ,MACA,GACA,yBAAgC,CAEhC,oBAAqB,yBAAwB,CAG3C,YAAY,EAAc,EAAS,CACjC,MAAM,EAAG,EAAG,CAAE,aAAc,2BAHd,KAAA,yBAA2B,yBAC3B,KAAA,eAAiB,GAAI,KAAI,aAAa,KAAK,QAM7D,MAAO,IAAI,QAAO,MAAO,KAf7B,QAAA,qBAAA",
  "names": []
}
