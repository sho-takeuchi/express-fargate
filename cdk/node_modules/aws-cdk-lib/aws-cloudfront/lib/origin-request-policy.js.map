{
  "version": 3,
  "sources": ["origin-request-policy.ts"],
  "sourcesContent": ["import { Names, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnOriginRequestPolicy } from './cloudfront.generated';\n\n                                             \nexport interface IOriginRequestPolicy {\n                                                                    \n  readonly originRequestPolicyId: string;\n}\n\n                                                          \nexport interface OriginRequestPolicyProps {\n                                                                                                                                                                                   \n  readonly originRequestPolicyName?: string;\n\n                                                                                            \n  readonly comment?: string;\n\n                                                                                                                                 \n  readonly cookieBehavior?: OriginRequestCookieBehavior;\n\n                                                                                                                                                                                                            \n  readonly headerBehavior?: OriginRequestHeaderBehavior;\n\n                                                                                                                                                \n  readonly queryStringBehavior?: OriginRequestQueryStringBehavior;\n}\n\n                                                                                                      \nexport class OriginRequestPolicy extends Resource implements IOriginRequestPolicy {\n\n                                                                                                                       \n  public static readonly USER_AGENT_REFERER_HEADERS = OriginRequestPolicy.fromManagedOriginRequestPolicy('acba4595-bd28-49b8-b9fe-13317c0390fa');\n                                                                                                                                       \n  public static readonly CORS_CUSTOM_ORIGIN = OriginRequestPolicy.fromManagedOriginRequestPolicy('59781a5b-3903-41f3-afcb-af62929ccde1');\n                                                                                                                                           \n  public static readonly CORS_S3_ORIGIN = OriginRequestPolicy.fromManagedOriginRequestPolicy('88a5eaf4-2fd4-4709-b370-b4c650ea3fcf');\n                                                                                                     \n  public static readonly ALL_VIEWER = OriginRequestPolicy.fromManagedOriginRequestPolicy('216adef6-5c7f-47e4-b989-5492eafa07d3');\n                                                                                                      \n  public static readonly ELEMENTAL_MEDIA_TAILOR = OriginRequestPolicy.fromManagedOriginRequestPolicy('775133bc-15f2-49f9-abea-afb2e0bf67d2');\n\n                                                     \n  public static fromOriginRequestPolicyId(scope: Construct, id: string, originRequestPolicyId: string): IOriginRequestPolicy {\n    return new class extends Resource implements IOriginRequestPolicy {\n      public readonly originRequestPolicyId = originRequestPolicyId;\n    }(scope, id);\n  }\n\n  /** Use an existing managed origin request policy. */\n  private static fromManagedOriginRequestPolicy(managedOriginRequestPolicyId: string): IOriginRequestPolicy {\n    return new class implements IOriginRequestPolicy {\n      public readonly originRequestPolicyId = managedOriginRequestPolicyId;\n    }();\n  }\n\n  public readonly originRequestPolicyId: string;\n\n  constructor(scope: Construct, id: string, props: OriginRequestPolicyProps = {}) {\n    super(scope, id, {\n      physicalName: props.originRequestPolicyName,\n    });\n\n    const originRequestPolicyName = props.originRequestPolicyName ?? Names.uniqueId(this);\n    if (!Token.isUnresolved(originRequestPolicyName) && !originRequestPolicyName.match(/^[\\w-]+$/i)) {\n      throw new Error(`'originRequestPolicyName' can only include '-', '_', and alphanumeric characters, got: '${props.originRequestPolicyName}'`);\n    }\n\n    const cookies = props.cookieBehavior ?? OriginRequestCookieBehavior.none();\n    const headers = props.headerBehavior ?? OriginRequestHeaderBehavior.none();\n    const queryStrings = props.queryStringBehavior ?? OriginRequestQueryStringBehavior.none();\n\n    const resource = new CfnOriginRequestPolicy(this, 'Resource', {\n      originRequestPolicyConfig: {\n        name: originRequestPolicyName,\n        comment: props.comment,\n        cookiesConfig: {\n          cookieBehavior: cookies.behavior,\n          cookies: cookies.cookies,\n        },\n        headersConfig: {\n          headerBehavior: headers.behavior,\n          headers: headers.headers,\n        },\n        queryStringsConfig: {\n          queryStringBehavior: queryStrings.behavior,\n          queryStrings: queryStrings.queryStrings,\n        },\n      },\n    });\n\n    this.originRequestPolicyId = resource.ref;\n  }\n}\n\n                                                                                                                                                        \nexport class OriginRequestCookieBehavior {\n                                                                                                                                                                                                      \n  public static none() { return new OriginRequestCookieBehavior('none'); }\n\n                                                                                                     \n  public static all() { return new OriginRequestCookieBehavior('all'); }\n\n                                                                                                  \n  public static allowList(...cookies: string[]) {\n    if (cookies.length === 0) {\n      throw new Error('At least one cookie to allow must be provided');\n    }\n    return new OriginRequestCookieBehavior('whitelist', cookies);\n  }\n\n                                                                   \n  public readonly behavior: string;\n                                                                \n  public readonly cookies?: string[];\n\n  private constructor(behavior: string, cookies?: string[]) {\n    this.behavior = behavior;\n    this.cookies = cookies;\n  }\n}\n\n                                                                                                                                       \nexport class OriginRequestHeaderBehavior {\n                                                                                                                                                                                        \n  public static none() { return new OriginRequestHeaderBehavior('none'); }\n\n                                                                                                                                                                                                                                                                                                                                                         \n  public static all(...cloudfrontHeaders: string[]) {\n    if (cloudfrontHeaders.length > 0) {\n      if (!cloudfrontHeaders.every(header => header.startsWith('CloudFront-'))) {\n        throw new Error('additional CloudFront headers passed to `OriginRequestHeaderBehavior.all()` must begin with \\'CloudFront-\\'');\n      }\n      return new OriginRequestHeaderBehavior('allViewerAndWhitelistCloudFront', cloudfrontHeaders);\n    } else {\n      return new OriginRequestHeaderBehavior('allViewer');\n    }\n  }\n\n                                                                                     \n  public static allowList(...headers: string[]) {\n    if (headers.length === 0) {\n      throw new Error('At least one header to allow must be provided');\n    }\n    if (headers.map(header => header.toLowerCase()).some(header => ['authorization', 'accept-encoding'].includes(header))) {\n      throw new Error('you cannot pass `Authorization` or `Accept-Encoding` as header values; use a CachePolicy to forward these headers instead');\n    }\n    return new OriginRequestHeaderBehavior('whitelist', headers);\n  }\n\n                                                                   \n  public readonly behavior: string;\n                                                                                          \n  public readonly headers?: string[];\n\n  private constructor(behavior: string, headers?: string[]) {\n    this.behavior = behavior;\n    this.headers = headers;\n  }\n}\n\n                                                                                                                                                                        \nexport class OriginRequestQueryStringBehavior {\n                                                                                                                                                                                                                  \n  public static none() { return new OriginRequestQueryStringBehavior('none'); }\n\n                                                                                                           \n  public static all() { return new OriginRequestQueryStringBehavior('all'); }\n\n                                                                                                       \n  public static allowList(...queryStrings: string[]) {\n    if (queryStrings.length === 0) {\n      throw new Error('At least one query string to allow must be provided');\n    }\n    return new OriginRequestQueryStringBehavior('whitelist', queryStrings);\n  }\n\n                                                                                 \n  public readonly behavior: string;\n                                                                      \n  public readonly queryStrings?: string[];\n\n  private constructor(behavior: string, queryStrings?: string[]) {\n    this.behavior = behavior;\n    this.queryStrings = queryStrings;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
