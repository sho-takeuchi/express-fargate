{
  "version": 3,
  "sources": ["public-key.ts"],
  "sourcesContent": ["import { IResource, Names, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnPublicKey } from './cloudfront.generated';\n\n                                  \nexport interface IPublicKey extends IResource {\n                                                         \n  readonly publicKeyId: string;\n}\n\n                                               \nexport interface PublicKeyProps {\n                                                                                           \n  readonly publicKeyName?: string;\n\n                                                                                 \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly encodedKey: string;\n}\n\n                                                                                \nexport class PublicKey extends Resource implements IPublicKey {\n\n                                          \n  public static fromPublicKeyId(scope: Construct, id: string, publicKeyId: string): IPublicKey {\n    return new class extends Resource implements IPublicKey {\n      public readonly publicKeyId = publicKeyId;\n    }(scope, id);\n  }\n\n  public readonly publicKeyId: string;\n\n  constructor(scope: Construct, id: string, props: PublicKeyProps) {\n    super(scope, id);\n\n    if (!Token.isUnresolved(props.encodedKey) && !/^-----BEGIN PUBLIC KEY-----/.test(props.encodedKey)) {\n      throw new Error(`Public key must be in PEM format (with the BEGIN/END PUBLIC KEY lines); got ${props.encodedKey}`);\n    }\n\n    const resource = new CfnPublicKey(this, 'Resource', {\n      publicKeyConfig: {\n        name: props.publicKeyName ?? this.generateName(),\n        callerReference: this.node.addr,\n        encodedKey: props.encodedKey,\n        comment: props.comment,\n      },\n    });\n\n    this.publicKeyId = resource.ref;\n  }\n\n  private generateName(): string {\n    const name = Names.uniqueId(this);\n    if (name.length > 80) {\n      return name.substring(0, 40) + name.substring(name.length - 40);\n    }\n    return name;\n  }\n}"],
  "mappings": "gNAAA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BAqBA,uBAA+B,QAAA,QAAQ,CAWrC,YAAY,MAAkB,GAAY,MAAqB,QAC7D,MAAM,MAAO,IAEb,4EAAI,CAAC,OAAA,MAAM,aAAa,MAAM,aAAe,CAAC,8BAA8B,KAAK,MAAM,YACrF,KAAM,IAAI,OAAM,+EAA+E,MAAM,cAGvG,KAAM,UAAW,GAAI,wBAAA,aAAa,KAAM,WAAY,CAClD,gBAAiB,CACf,KAAI,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,KAAK,eAClC,gBAAiB,KAAK,KAAK,KAC3B,WAAY,MAAM,WAClB,QAAS,MAAM,WAInB,KAAK,YAAc,SAAS,UAxBhB,iBAAgB,MAAkB,GAAY,YAAmB,CAC7E,MAAO,IAAI,cAAc,QAAA,QAAQ,CAAtB,aAAA,qBACO,KAAA,YAAc,cAC9B,MAAO,IAwBH,cAAY,CAClB,KAAM,MAAO,OAAA,MAAM,SAAS,MAC5B,MAAI,MAAK,OAAS,GACT,KAAK,UAAU,EAAG,IAAM,KAAK,UAAU,KAAK,OAAS,IAEvD,MAnCX,QAAA,UAAA",
  "names": []
}
