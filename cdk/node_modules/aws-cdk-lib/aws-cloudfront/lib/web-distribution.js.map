{
  "version": 3,
  "sources": ["web-distribution.ts"],
  "sourcesContent": ["import * as certificatemanager from '../../aws-certificatemanager';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDistribution } from './cloudfront.generated';\nimport { HttpVersion, IDistribution, LambdaEdgeEventType, OriginProtocolPolicy, PriceClass, ViewerProtocolPolicy, SSLMethod, SecurityPolicyProtocol } from './distribution';\nimport { FunctionAssociation } from './function';\nimport { GeoRestriction } from './geo-restriction';\nimport { IKeyGroup } from './key-group';\nimport { IOriginAccessIdentity } from './origin-access-identity';\n\n                                                        \nexport enum FailoverStatusCode {\n                                \n  FORBIDDEN = 403,\n\n                                \n  NOT_FOUND = 404,\n\n                                            \n  INTERNAL_SERVER_ERROR = 500,\n\n                                  \n  BAD_GATEWAY = 502,\n\n                                          \n  SERVICE_UNAVAILABLE = 503,\n\n                                      \n  GATEWAY_TIMEOUT = 504,\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport interface AliasConfiguration {\n                                                                     \n  readonly acmCertRef: string;\n\n                                                                                                               \n  readonly names: string[];\n\n                                                                                                                                                                                                                                                                                  \n  readonly sslMethod?: SSLMethod;\n\n                                                                                                                                                                                                                                                                                                                     \n  readonly securityPolicy?: SecurityPolicyProtocol;\n}\n\n                                                      \nexport interface LoggingConfiguration {\n                                                                                                          \n  readonly bucket?: s3.IBucket,\n\n                                                                                    \n  readonly includeCookies?: boolean,\n\n                                                                                  \n  readonly prefix?: string\n}\n\n// Subset of SourceConfiguration for rendering properties internally\ninterface SourceConfigurationRender {\n  readonly connectionAttempts?: number;\n  readonly connectionTimeout?: cdk.Duration;\n  readonly s3OriginSource?: S3OriginConfig;\n  readonly customOriginSource?: CustomOriginConfig;\n  readonly originPath?: string;\n  readonly originHeaders?: { [key: string]: string };\n  readonly originShieldRegion?: string\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport interface SourceConfiguration {\n                                                                                                                                                                       \n  readonly connectionAttempts?: number;\n\n                                                                                                                                                                                                                                    \n  readonly connectionTimeout?: cdk.Duration;\n\n                                                                         \n  readonly s3OriginSource?: S3OriginConfig;\n\n                                                                 \n  readonly customOriginSource?: CustomOriginConfig;\n\n                                                                                                                                                       \n  readonly failoverS3OriginSource?: S3OriginConfig;\n\n                                                                                                                                                          \n  readonly failoverCustomOriginSource?: CustomOriginConfig;\n\n                                                                                                      \n  readonly failoverCriteriaStatusCodes?: FailoverStatusCode[];\n\n                                                                                                                  \n  readonly behaviors: Behavior[];\n\n                                                                                                                                                                      \n  readonly originPath?: string;\n\n                                                                                                                                                                                               \n  readonly originHeaders?: { [key: string]: string };\n\n                                                                                                                                                                                                                                                                                                       \n  readonly originShieldRegion?: string;\n}\n\n                                        \nexport interface CustomOriginConfig {\n                                                                                                                                     \n  readonly domainName: string,\n\n                                                           \n  readonly httpPort?: number,\n\n                                                             \n  readonly httpsPort?: number,\n\n                                                                                                            \n  readonly originKeepaliveTimeout?: cdk.Duration,\n\n                                                                                                                                               \n  readonly originProtocolPolicy?: OriginProtocolPolicy,\n\n                                                                                                            \n  readonly originReadTimeout?: cdk.Duration\n\n                                                                                                                      \n  readonly allowedOriginSSLVersions?: OriginSslPolicy[];\n\n                                                                                              \n  readonly originPath?: string;\n\n                                                                                                                    \n  readonly originHeaders?: { [key: string]: string };\n\n                                                                                                                                                                                                  \n  readonly originShieldRegion?: string;\n}\n\nexport enum OriginSslPolicy {\n  SSL_V3 = 'SSLv3',\n  TLS_V1 = 'TLSv1',\n  TLS_V1_1 = 'TLSv1.1',\n  TLS_V1_2 = 'TLSv1.2',\n}\n\n                                                 \nexport interface S3OriginConfig {\n                                                        \n  readonly s3BucketSource: s3.IBucket;\n\n                                                                                                                                                                                                                              \n  readonly originAccessIdentity?: IOriginAccessIdentity;\n\n                                                                                              \n  readonly originPath?: string;\n\n                                                                                                                    \n  readonly originHeaders?: { [key: string]: string };\n\n                                                                                                                                                                                                  \n  readonly originShieldRegion?: string;\n}\n\n                                                                          \nexport enum CloudFrontAllowedMethods {\n  GET_HEAD = 'GH',\n  GET_HEAD_OPTIONS = 'GHO',\n  ALL = 'ALL'\n}\n\n                                                      \nexport enum CloudFrontAllowedCachedMethods {\n  GET_HEAD = 'GH',\n  GET_HEAD_OPTIONS = 'GHO',\n}\n\n                                         \nexport interface Behavior {\n\n                                                                                                        \n  readonly compress?: boolean;\n\n                                                                                                                                                                                                                                          \n  readonly isDefaultBehavior?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly trustedSigners?: string[];\n\n                                                                                                                                                                                                                                                                              \n  readonly trustedKeyGroups?: IKeyGroup[];\n\n                                                                                                                                                                                                                                                                                           \n  readonly defaultTtl?: cdk.Duration;\n\n                                                                                                 \n  readonly allowedMethods?: CloudFrontAllowedMethods;\n\n                                                                                                                                                                      \n  readonly pathPattern?: string;\n\n                                                                                               \n  readonly cachedMethods?: CloudFrontAllowedCachedMethods;\n\n                                                                                                                                               \n  readonly forwardedValues?: CfnDistribution.ForwardedValuesProperty;\n\n                                                                                                                                  \n  readonly minTtl?: cdk.Duration;\n\n                                                                                                                                                                                  \n  readonly maxTtl?: cdk.Duration;\n\n                                                                                                                                            \n  readonly lambdaFunctionAssociations?: LambdaFunctionAssociation[];\n\n                                                                                                                                  \n  readonly functionAssociations?: FunctionAssociation[];\n\n                                                                                                                                    \n  readonly viewerProtocolPolicy?: ViewerProtocolPolicy;\n}\n\nexport interface LambdaFunctionAssociation {\n\n                                                                                                                    \n  readonly eventType: LambdaEdgeEventType;\n\n                                                     \n  readonly lambdaFunction: lambda.IVersion;\n\n                                                                                                                                                                                                                                                                                                         \n  readonly includeBody?: boolean;\n}\n\nexport interface ViewerCertificateOptions {\n                                                                                                                                                                                                                                                                                  \n  readonly sslMethod?: SSLMethod;\n\n                                                                                                                                                                                                                                                                                                                     \n  readonly securityPolicy?: SecurityPolicyProtocol;\n\n                                                                                                      \n  readonly aliases?: string[];\n}\n\n                                                 \nexport class ViewerCertificate {\n                                                                                                                                                                                                                                                                                                                                                               \n  public static fromAcmCertificate(certificate: certificatemanager.ICertificate, options: ViewerCertificateOptions = {}) {\n    const {\n      sslMethod: sslSupportMethod = SSLMethod.SNI,\n      securityPolicy: minimumProtocolVersion,\n      aliases,\n    } = options;\n\n    return new ViewerCertificate({\n      acmCertificateArn: certificate.certificateArn, sslSupportMethod, minimumProtocolVersion,\n    }, aliases);\n  }\n\n                                                                                                                                                                                           \n  public static fromIamCertificate(iamCertificateId: string, options: ViewerCertificateOptions = {}) {\n    const {\n      sslMethod: sslSupportMethod = SSLMethod.SNI,\n      securityPolicy: minimumProtocolVersion,\n      aliases,\n    } = options;\n\n    return new ViewerCertificate({\n      iamCertificateId, sslSupportMethod, minimumProtocolVersion,\n    }, aliases);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                  \n  public static fromCloudFrontDefaultCertificate(...aliases: string[]) {\n    return new ViewerCertificate({ cloudFrontDefaultCertificate: true }, aliases);\n  }\n\n  private constructor(\n    public readonly props: CfnDistribution.ViewerCertificateProperty,\n    public readonly aliases: string[] = []) { }\n}\n\nexport interface CloudFrontWebDistributionProps {\n\n                                                                                                                                                                                                                                                                          \n  readonly aliasConfiguration?: AliasConfiguration;\n\n                                                                                                                                     \n  readonly comment?: string;\n\n                                                                            \n  readonly enabled?: boolean;\n\n                                                                                          \n  readonly defaultRootObject?: string;\n\n                                                                                       \n  readonly enableIpV6?: boolean;\n\n                                                                                      \n  readonly httpVersion?: HttpVersion;\n\n                                                                                                                                                                                                                                                 \n  readonly priceClass?: PriceClass;\n\n                                                                                                   \n  readonly viewerProtocolPolicy?: ViewerProtocolPolicy;\n\n                                                                                                     \n  readonly originConfigs: SourceConfiguration[];\n\n                                                                                                                                                                                                                                                                         \n  readonly loggingConfig?: LoggingConfiguration;\n\n                                                                                                                                                                                                                                                                                                                               \n  readonly errorConfigurations?: CfnDistribution.CustomErrorResponseProperty[];\n\nn  readonly webACLId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly viewerCertificate?: ViewerCertificate;\n\n                                                                                                                   \n  readonly geoRestriction?: GeoRestriction;\n}\n\n/**\n * Internal only - just adds the originId string to the Behavior\n */\ninterface BehaviorWithOrigin extends Behavior {\n  readonly targetOriginId: string;\n}\n\n                                                    \nexport interface CloudFrontWebDistributionAttributes {\n                                                                                                                           \n  readonly domainName: string;\n\n                                                                                \n  readonly distributionId: string;\n}\n\nnexport class CloudFrontWebDistribution extends cdk.Resource implements IDistribution {\n\n                                                                                         \n  public static fromDistributionAttributes(scope: Construct, id: string, attrs: CloudFrontWebDistributionAttributes): IDistribution {\n    return new class extends cdk.Resource implements IDistribution {\n      public readonly domainName: string;\n      public readonly distributionDomainName: string;\n      public readonly distributionId: string;\n\n      constructor() {\n        super(scope, id);\n        this.domainName = attrs.domainName;\n        this.distributionDomainName = attrs.domainName;\n        this.distributionId = attrs.distributionId;\n      }\n    }();\n  }\n\n                                                                                                                                                             \n  public readonly loggingBucket?: s3.IBucket;\n\n                                                                                                                                                                                                                                                                                                                                         \n  public readonly domainName: string;\n\n                                                                                                                                                                                                                                                                           \n  public readonly distributionDomainName: string;\n\n                                                           \n  public readonly distributionId: string;\n\n  /**\n   * Maps our methods to the string arrays they are\n   */\n  private readonly METHOD_LOOKUP_MAP = {\n    GH: ['GET', 'HEAD'],\n    GHO: ['GET', 'HEAD', 'OPTIONS'],\n    ALL: ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT'],\n  };\n\n  /**\n   * Maps for which SecurityPolicyProtocol are available to which SSLMethods\n   */\n  private readonly VALID_SSL_PROTOCOLS: { [method in SSLMethod]: string[] } = {\n    [SSLMethod.SNI]: [\n      SecurityPolicyProtocol.TLS_V1, SecurityPolicyProtocol.TLS_V1_1_2016,\n      SecurityPolicyProtocol.TLS_V1_2016, SecurityPolicyProtocol.TLS_V1_2_2018,\n      SecurityPolicyProtocol.TLS_V1_2_2019, SecurityPolicyProtocol.TLS_V1_2_2021,\n    ],\n    [SSLMethod.VIP]: [SecurityPolicyProtocol.SSL_V3, SecurityPolicyProtocol.TLS_V1],\n  };\n\n  constructor(scope: Construct, id: string, props: CloudFrontWebDistributionProps) {\n    super(scope, id);\n\n    // Comments have an undocumented limit of 128 characters\n    const trimmedComment =\n      props.comment && props.comment.length > 128\n        ? `${props.comment.substr(0, 128 - 3)}...`\n        : props.comment;\n\n    let distributionConfig: CfnDistribution.DistributionConfigProperty = {\n      comment: trimmedComment,\n      enabled: props.enabled ?? true,\n      defaultRootObject: props.defaultRootObject ?? 'index.html',\n      httpVersion: props.httpVersion || HttpVersion.HTTP2,\n      priceClass: props.priceClass || PriceClass.PRICE_CLASS_100,\n      ipv6Enabled: props.enableIpV6 ?? true,\n      // eslint-disable-next-line max-len\n      customErrorResponses: props.errorConfigurations, // TODO: validation : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-customerrorresponse.html#cfn-cloudfront-distribution-customerrorresponse-errorcachingminttl\n      webAclId: props.webACLId,\n    };\n\n    const behaviors: BehaviorWithOrigin[] = [];\n\n    const origins: CfnDistribution.OriginProperty[] = [];\n\n    const originGroups: CfnDistribution.OriginGroupProperty[] = [];\n\n    let originIndex = 1;\n    for (const originConfig of props.originConfigs) {\n      let originId = `origin${originIndex}`;\n      const originProperty = this.toOriginProperty(originConfig, originId);\n\n      if (originConfig.failoverCustomOriginSource || originConfig.failoverS3OriginSource) {\n        const originSecondaryId = `originSecondary${originIndex}`;\n        const originSecondaryProperty = this.toOriginProperty(\n          {\n            s3OriginSource: originConfig.failoverS3OriginSource,\n            customOriginSource: originConfig.failoverCustomOriginSource,\n            originPath: originConfig.originPath,\n            originHeaders: originConfig.originHeaders,\n            originShieldRegion: originConfig.originShieldRegion,\n          },\n          originSecondaryId,\n        );\n        const originGroupsId = `OriginGroup${originIndex}`;\n        const failoverCodes = originConfig.failoverCriteriaStatusCodes ?? [500, 502, 503, 504];\n        originGroups.push({\n          id: originGroupsId,\n          members: {\n            items: [{ originId }, { originId: originSecondaryId }],\n            quantity: 2,\n          },\n          failoverCriteria: {\n            statusCodes: {\n              items: failoverCodes,\n              quantity: failoverCodes.length,\n            },\n          },\n        });\n        originId = originGroupsId;\n        origins.push(originSecondaryProperty);\n      }\n\n      for (const behavior of originConfig.behaviors) {\n        behaviors.push({ ...behavior, targetOriginId: originId });\n      }\n\n      origins.push(originProperty);\n      originIndex++;\n    }\n\n    origins.forEach(origin => {\n      if (!origin.s3OriginConfig && !origin.customOriginConfig) {\n        throw new Error(`Origin ${origin.domainName} is missing either S3OriginConfig or CustomOriginConfig. At least 1 must be specified.`);\n      }\n    });\n    const originGroupsDistConfig =\n      originGroups.length > 0\n        ? {\n          items: originGroups,\n          quantity: originGroups.length,\n        }\n        : undefined;\n    distributionConfig = {\n      ...distributionConfig,\n      origins,\n      originGroups: originGroupsDistConfig,\n    };\n\n    const defaultBehaviors = behaviors.filter(behavior => behavior.isDefaultBehavior);\n    if (defaultBehaviors.length !== 1) {\n      throw new Error('There can only be one default behavior across all sources. [ One default behavior per distribution ].');\n    }\n\n    distributionConfig = { ...distributionConfig, defaultCacheBehavior: this.toBehavior(defaultBehaviors[0], props.viewerProtocolPolicy) };\n\n    const otherBehaviors: CfnDistribution.CacheBehaviorProperty[] = [];\n    for (const behavior of behaviors.filter(b => !b.isDefaultBehavior)) {\n      if (!behavior.pathPattern) {\n        throw new Error('pathPattern is required for all non-default behaviors');\n      }\n      otherBehaviors.push(this.toBehavior(behavior, props.viewerProtocolPolicy) as CfnDistribution.CacheBehaviorProperty);\n    }\n\n    distributionConfig = { ...distributionConfig, cacheBehaviors: otherBehaviors.length > 0 ? otherBehaviors : undefined };\n\n    if (props.aliasConfiguration && props.viewerCertificate) {\n      throw new Error([\n        'You cannot set both aliasConfiguration and viewerCertificate properties.',\n        'Please only use viewerCertificate, as aliasConfiguration is deprecated.',\n      ].join(' '));\n    }\n\n    let _viewerCertificate = props.viewerCertificate;\n    if (props.aliasConfiguration) {\n      const { acmCertRef, securityPolicy, sslMethod, names: aliases } = props.aliasConfiguration;\n\n      _viewerCertificate = ViewerCertificate.fromAcmCertificate(\n        certificatemanager.Certificate.fromCertificateArn(this, 'AliasConfigurationCert', acmCertRef),\n        { securityPolicy, sslMethod, aliases },\n      );\n    }\n\n    if (_viewerCertificate) {\n      const { props: viewerCertificate, aliases } = _viewerCertificate;\n      Object.assign(distributionConfig, { aliases, viewerCertificate });\n\n      const { minimumProtocolVersion, sslSupportMethod } = viewerCertificate;\n\n      if (minimumProtocolVersion != null && sslSupportMethod != null) {\n        const validProtocols = this.VALID_SSL_PROTOCOLS[sslSupportMethod as SSLMethod];\n\n        if (validProtocols.indexOf(minimumProtocolVersion.toString()) === -1) {\n          // eslint-disable-next-line max-len\n          throw new Error(`${minimumProtocolVersion} is not compabtible with sslMethod ${sslSupportMethod}.\\n\\tValid Protocols are: ${validProtocols.join(', ')}`);\n        }\n      }\n    } else {\n      distributionConfig = {\n        ...distributionConfig,\n        viewerCertificate: { cloudFrontDefaultCertificate: true },\n      };\n    }\n\n    if (props.loggingConfig) {\n      this.loggingBucket = props.loggingConfig.bucket || new s3.Bucket(this, 'LoggingBucket', {\n        encryption: s3.BucketEncryption.S3_MANAGED,\n        enforceSSL: true,\n      });\n      distributionConfig = {\n        ...distributionConfig,\n        logging: {\n          bucket: this.loggingBucket.bucketRegionalDomainName,\n          includeCookies: props.loggingConfig.includeCookies || false,\n          prefix: props.loggingConfig.prefix,\n        },\n      };\n    }\n\n    if (props.geoRestriction) {\n      distributionConfig = {\n        ...distributionConfig,\n        restrictions: {\n          geoRestriction: {\n            restrictionType: props.geoRestriction.restrictionType,\n            locations: props.geoRestriction.locations,\n          },\n        },\n      };\n    }\n\n    const distribution = new CfnDistribution(this, 'CFDistribution', { distributionConfig });\n    this.node.defaultChild = distribution;\n    this.domainName = distribution.attrDomainName;\n    this.distributionDomainName = distribution.attrDomainName;\n    this.distributionId = distribution.ref;\n  }\n\n  private toBehavior(input: BehaviorWithOrigin, protoPolicy?: ViewerProtocolPolicy) {\n    let toReturn = {\n      allowedMethods: this.METHOD_LOOKUP_MAP[input.allowedMethods || CloudFrontAllowedMethods.GET_HEAD],\n      cachedMethods: this.METHOD_LOOKUP_MAP[input.cachedMethods || CloudFrontAllowedCachedMethods.GET_HEAD],\n      compress: input.compress !== false,\n      defaultTtl: input.defaultTtl && input.defaultTtl.toSeconds(),\n      forwardedValues: input.forwardedValues || { queryString: false, cookies: { forward: 'none' } },\n      maxTtl: input.maxTtl && input.maxTtl.toSeconds(),\n      minTtl: input.minTtl && input.minTtl.toSeconds(),\n      trustedKeyGroups: input.trustedKeyGroups?.map(key => key.keyGroupId),\n      trustedSigners: input.trustedSigners,\n      targetOriginId: input.targetOriginId,\n      viewerProtocolPolicy: input.viewerProtocolPolicy || protoPolicy || ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n    };\n    if (!input.isDefaultBehavior) {\n      toReturn = Object.assign(toReturn, { pathPattern: input.pathPattern });\n    }\n    if (input.functionAssociations) {\n      toReturn = Object.assign(toReturn, {\n        functionAssociations: input.functionAssociations.map(association => ({\n          functionArn: association.function.functionArn,\n          eventType: association.eventType.toString(),\n        })),\n      });\n    }\n    if (input.lambdaFunctionAssociations) {\n      const includeBodyEventTypes = [LambdaEdgeEventType.ORIGIN_REQUEST, LambdaEdgeEventType.VIEWER_REQUEST];\n      if (input.lambdaFunctionAssociations.some(fna => fna.includeBody && !includeBodyEventTypes.includes(fna.eventType))) {\n        throw new Error('\\'includeBody\\' can only be true for ORIGIN_REQUEST or VIEWER_REQUEST event types.');\n      }\n\n      toReturn = Object.assign(toReturn, {\n        lambdaFunctionAssociations: input.lambdaFunctionAssociations\n          .map(fna => ({\n            eventType: fna.eventType,\n            lambdaFunctionArn: fna.lambdaFunction && fna.lambdaFunction.edgeArn,\n            includeBody: fna.includeBody,\n          })),\n      });\n\n      // allow edgelambda.amazonaws.com to assume the functions' execution role.\n      for (const a of input.lambdaFunctionAssociations) {\n        if (a.lambdaFunction.role && a.lambdaFunction.role instanceof iam.Role && a.lambdaFunction.role.assumeRolePolicy) {\n          a.lambdaFunction.role.assumeRolePolicy.addStatements(new iam.PolicyStatement({\n            actions: ['sts:AssumeRole'],\n            principals: [new iam.ServicePrincipal('edgelambda.amazonaws.com')],\n          }));\n        }\n      }\n    }\n    return toReturn;\n  }\n\n  private toOriginProperty(originConfig: SourceConfigurationRender, originId: string): CfnDistribution.OriginProperty {\n    if (\n      !originConfig.s3OriginSource &&\n      !originConfig.customOriginSource\n    ) {\n      throw new Error(\n        'There must be at least one origin source - either an s3OriginSource, a customOriginSource',\n      );\n    }\n    if (originConfig.customOriginSource && originConfig.s3OriginSource) {\n      throw new Error(\n        'There cannot be both an s3OriginSource and a customOriginSource in the same SourceConfiguration.',\n      );\n    }\n\n    if ([\n      originConfig.originHeaders,\n      originConfig.s3OriginSource?.originHeaders,\n      originConfig.customOriginSource?.originHeaders,\n    ].filter(x => x).length > 1) {\n      throw new Error('Only one originHeaders field allowed across origin and failover origins');\n    }\n\n    if ([\n      originConfig.originPath,\n      originConfig.s3OriginSource?.originPath,\n      originConfig.customOriginSource?.originPath,\n    ].filter(x => x).length > 1) {\n      throw new Error('Only one originPath field allowed across origin and failover origins');\n    }\n\n    if ([\n      originConfig.originShieldRegion,\n      originConfig.s3OriginSource?.originShieldRegion,\n      originConfig.customOriginSource?.originShieldRegion,\n    ].filter(x => x).length > 1) {\n      throw new Error('Only one originShieldRegion field allowed across origin and failover origins');\n    }\n\n    const headers = originConfig.originHeaders ?? originConfig.s3OriginSource?.originHeaders ?? originConfig.customOriginSource?.originHeaders;\n\n    const originHeaders: CfnDistribution.OriginCustomHeaderProperty[] = [];\n    if (headers) {\n      Object.keys(headers).forEach((key) => {\n        const oHeader: CfnDistribution.OriginCustomHeaderProperty = {\n          headerName: key,\n          headerValue: headers[key],\n        };\n        originHeaders.push(oHeader);\n      });\n    }\n\n    let s3OriginConfig: CfnDistribution.S3OriginConfigProperty | undefined;\n    if (originConfig.s3OriginSource) {\n      // first case for backwards compatibility\n      if (originConfig.s3OriginSource.originAccessIdentity) {\n        // grant CloudFront OriginAccessIdentity read access to S3 bucket\n        // Used rather than `grantRead` because `grantRead` will grant overly-permissive policies.\n        // Only GetObject is needed to retrieve objects for the distribution.\n        // This also excludes KMS permissions; currently, OAI only supports SSE-S3 for buckets.\n        // Source: https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/\n        originConfig.s3OriginSource.s3BucketSource.addToResourcePolicy(new iam.PolicyStatement({\n          resources: [originConfig.s3OriginSource.s3BucketSource.arnForObjects('*')],\n          actions: ['s3:GetObject'],\n          principals: [originConfig.s3OriginSource.originAccessIdentity.grantPrincipal],\n        }));\n\n        s3OriginConfig = {\n          originAccessIdentity: `origin-access-identity/cloudfront/${originConfig.s3OriginSource.originAccessIdentity.originAccessIdentityName}`,\n        };\n      } else {\n        s3OriginConfig = {};\n      }\n    }\n\n    const connectionAttempts = originConfig.connectionAttempts ?? 3;\n    if (connectionAttempts < 1 || 3 < connectionAttempts || !Number.isInteger(connectionAttempts)) {\n      throw new Error('connectionAttempts: You can specify 1, 2, or 3 as the number of attempts.');\n    }\n\n    const connectionTimeout = (originConfig.connectionTimeout || cdk.Duration.seconds(10)).toSeconds();\n    if (connectionTimeout < 1 || 10 < connectionTimeout || !Number.isInteger(connectionTimeout)) {\n      throw new Error('connectionTimeout: You can specify a number of seconds between 1 and 10 (inclusive).');\n    }\n\n    const originProperty: CfnDistribution.OriginProperty = {\n      id: originId,\n      domainName: originConfig.s3OriginSource\n        ? originConfig.s3OriginSource.s3BucketSource.bucketRegionalDomainName\n        : originConfig.customOriginSource!.domainName,\n      originPath: originConfig.originPath ?? originConfig.customOriginSource?.originPath ?? originConfig.s3OriginSource?.originPath,\n      originCustomHeaders:\n        originHeaders.length > 0 ? originHeaders : undefined,\n      s3OriginConfig,\n      originShield: this.toOriginShieldProperty(originConfig),\n      customOriginConfig: originConfig.customOriginSource\n        ? {\n          httpPort: originConfig.customOriginSource.httpPort || 80,\n          httpsPort: originConfig.customOriginSource.httpsPort || 443,\n          originKeepaliveTimeout:\n            (originConfig.customOriginSource.originKeepaliveTimeout &&\n              originConfig.customOriginSource.originKeepaliveTimeout.toSeconds()) ||\n            5,\n          originReadTimeout:\n            (originConfig.customOriginSource.originReadTimeout &&\n              originConfig.customOriginSource.originReadTimeout.toSeconds()) ||\n            30,\n          originProtocolPolicy:\n            originConfig.customOriginSource.originProtocolPolicy ||\n            OriginProtocolPolicy.HTTPS_ONLY,\n          originSslProtocols: originConfig.customOriginSource\n            .allowedOriginSSLVersions || [OriginSslPolicy.TLS_V1_2],\n        }\n        : undefined,\n      connectionAttempts,\n      connectionTimeout,\n    };\n\n    return originProperty;\n  }\n\n  /**\n   * Takes origin shield region from props and converts to CfnDistribution.OriginShieldProperty\n   */\n  private toOriginShieldProperty(originConfig:SourceConfigurationRender): CfnDistribution.OriginShieldProperty | undefined {\n    const originShieldRegion = originConfig.originShieldRegion ??\n    originConfig.customOriginSource?.originShieldRegion ??\n    originConfig.s3OriginSource?.originShieldRegion;\n    return originShieldRegion\n      ? { enabled: true, originShieldRegion }\n      : undefined;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
