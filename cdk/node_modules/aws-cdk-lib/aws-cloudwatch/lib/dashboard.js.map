{
  "version": 3,
  "sources": ["dashboard.ts"],
  "sourcesContent": ["import { Lazy, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDashboard } from './cloudwatch.generated';\nimport { Column, Row } from './layout';\nimport { IWidget } from './widget';\n\n                                                                            \nexport enum PeriodOverride {\n                                                                                                              \n  AUTO = 'auto',\n                                                       \n  INHERIT = 'inherit',\n}\n\n                                                         \nexport interface DashboardProps {\n                                                                                                                                                                        \n  readonly dashboardName?: string;\n\nn  readonly start?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                           \n  readonly end?: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n  readonly periodOverride?: PeriodOverride;\n\n                                                                                                                                         \n  readonly widgets?: IWidget[][]\n}\n\n                                 \nexport class Dashboard extends Resource {\n  private readonly rows: IWidget[] = [];\n\n  constructor(scope: Construct, id: string, props: DashboardProps = {}) {\n    super(scope, id, {\n      physicalName: props.dashboardName,\n    });\n\n    {\n      const { dashboardName } = props;\n      if (dashboardName && !Token.isUnresolved(dashboardName) && !dashboardName.match(/^[\\w-]+$/)) {\n        throw new Error([\n          `The value ${dashboardName} for field dashboardName contains invalid characters.`,\n          'It can only contain alphanumerics, dash (-) and underscore (_).',\n        ].join(' '));\n      }\n    }\n\n    new CfnDashboard(this, 'Resource', {\n      dashboardName: this.physicalName,\n      dashboardBody: Lazy.string({\n        produce: () => {\n          const column = new Column(...this.rows);\n          column.position(0, 0);\n          return Stack.of(this).toJsonString({\n            start: props.start,\n            end: props.end,\n            periodOverride: props.periodOverride,\n            widgets: column.toJson(),\n          });\n        },\n      }),\n    });\n\n    (props.widgets || []).forEach(row => {\n      this.addWidgets(...row);\n    });\n  }\n\n                                                                                                                                                                                                                                                           \n  public addWidgets(...widgets: IWidget[]) {\n    if (widgets.length === 0) {\n      return;\n    }\n\n    const w = widgets.length > 1 ? new Row(...widgets) : widgets[0];\n    this.rows.push(w);\n  }\n}\n"],
  "mappings": "uOAAA,OAAA,QAAA,cAEA,uBAAA,QAAA,0BACA,SAAA,QAAA,YAIA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,KAAA,OAEA,gBAAA,QAAA,YAJU,eAAA,QAAA,gBAAA,SAAA,eAAc,KA0B1B,uBAA+B,QAAA,QAAQ,CAGrC,YAAY,MAAkB,GAAY,MAAwB,GAAE,CAClE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,gBAJP,KAAA,KAAkB,4EAOjC,CACE,KAAM,CAAE,eAAkB,MAC1B,GAAI,eAAiB,CAAC,OAAA,MAAM,aAAa,gBAAkB,CAAC,cAAc,MAAM,YAC9E,KAAM,IAAI,OAAM,CACd,aAAa,qEACb,mEACA,KAAK,MAIX,GAAI,wBAAA,aAAa,KAAM,WAAY,CACjC,cAAe,KAAK,aACpB,cAAe,OAAA,KAAK,OAAO,CACzB,QAAS,IAAK,CACZ,KAAM,QAAS,GAAI,UAAA,OAAO,GAAG,KAAK,MAClC,cAAO,SAAS,EAAG,GACZ,OAAA,MAAM,GAAG,MAAM,aAAa,CACjC,MAAO,MAAM,MACb,IAAK,MAAM,IACX,eAAgB,MAAM,eACtB,QAAS,OAAO,gBAMvB,OAAM,SAAW,IAAI,QAAQ,KAAM,CAClC,KAAK,WAAW,GAAG,OAKhB,cAAc,QAAkB,CACrC,uEAAI,QAAQ,SAAW,EACrB,OAGF,KAAM,GAAI,QAAQ,OAAS,EAAI,GAAI,UAAA,IAAI,GAAG,SAAW,QAAQ,GAC7D,KAAK,KAAK,KAAK,IA9CnB,QAAA,UAAA",
  "names": []
}
