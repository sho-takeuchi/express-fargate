{
  "version": 3,
  "sources": ["graph.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { IAlarm } from './alarm-base';\nimport { IMetric } from './metric-types';\nimport { allMetricsGraphJson } from './private/rendering';\nimport { ConcreteWidget } from './widget';\n\n                                                            \nexport interface MetricWidgetProps {\n                                                              \n  readonly title?: string;\n\n                                                                                                              \n  readonly region?: string;\n\n                                                                                     \n  readonly width?: number;\n\n                                                                                                                                                                             \n  readonly height?: number;\n}\n\n                                  \nexport interface YAxisProps {\n                                                   \n  readonly min?: number;\n\n                                                                    \n  readonly max?: number;\n\n                                                        \n  readonly label?: string;\n\n                                                              \n  readonly showUnits?: boolean;\n}\n\n                                        \nexport interface AlarmWidgetProps extends MetricWidgetProps {\n                                  \n  readonly alarm: IAlarm;\n\n                                                                                                  \n  readonly leftYAxis?: YAxisProps;\n}\n\n                                                                                \nexport class AlarmWidget extends ConcreteWidget {\n  private readonly props: AlarmWidgetProps;\n\n  constructor(props: AlarmWidgetProps) {\n    super(props.width || 6, props.height || 6);\n    this.props = props;\n  }\n\n  public toJson(): any[] {\n    return [{\n      type: 'metric',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: {\n        view: 'timeSeries',\n        title: this.props.title,\n        region: this.props.region || cdk.Aws.REGION,\n        annotations: {\n          alarms: [this.props.alarm.alarmArn],\n        },\n        yAxis: {\n          left: this.props.leftYAxis ?? undefined,\n        },\n      },\n    }];\n  }\n}\n\n                        \nexport enum GraphWidgetView {\n                                         \n  TIME_SERIES = 'timeSeries',\n                                        \n  BAR = 'bar',\n                                        \n  PIE = 'pie',\n}\n\n                                       \nexport interface GraphWidgetProps extends MetricWidgetProps {\n                                                                                  \n  readonly left?: IMetric[];\n\n                                                                                   \n  readonly right?: IMetric[];\n\n                                                                                    \n  readonly leftAnnotations?: HorizontalAnnotation[];\n\n                                                                                     \n  readonly rightAnnotations?: HorizontalAnnotation[];\n\n                                                                                            \n  readonly stacked?: boolean;\n\n                                                      \n  readonly leftYAxis?: YAxisProps;\n\n                                                       \n  readonly rightYAxis?: YAxisProps;\n\n                                                                   \n  readonly legendPosition?: LegendPosition;\n\n                                                                                 \n  readonly liveData?: boolean;\n\n                                                                  \n  readonly view?: GraphWidgetView;\n\n                                                                                                                                                                                                                                                                                           \n  readonly setPeriodToTimeRange?: boolean;\n\n                                                                                                                                                                                                                                                                     \n  readonly period?: cdk.Duration;\n\n                                                                                                                                                                                                                      \n  readonly statistic?: string;\n}\n\n                                                   \nexport class GraphWidget extends ConcreteWidget {\n\n  private readonly props: GraphWidgetProps;\n\n  private readonly leftMetrics: IMetric[];\n  private readonly rightMetrics: IMetric[];\n\n  constructor(props: GraphWidgetProps) {\n    super(props.width || 6, props.height || 6);\n    this.props = props;\n    this.leftMetrics = props.left ?? [];\n    this.rightMetrics = props.right ?? [];\n  }\n\n                                                                                                                   \n  public addLeftMetric(metric: IMetric) {\n    this.leftMetrics.push(metric);\n  }\n\n                                                                                                                    \n  public addRightMetric(metric: IMetric) {\n    this.rightMetrics.push(metric);\n  }\n\n  public toJson(): any[] {\n    const horizontalAnnotations = [\n      ...(this.props.leftAnnotations || []).map(mapAnnotation('left')),\n      ...(this.props.rightAnnotations || []).map(mapAnnotation('right')),\n    ];\n\n    const metrics = allMetricsGraphJson(this.leftMetrics, this.rightMetrics);\n    return [{\n      type: 'metric',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: {\n        view: this.props.view ?? GraphWidgetView.TIME_SERIES,\n        title: this.props.title,\n        region: this.props.region || cdk.Aws.REGION,\n        stacked: this.props.stacked,\n        metrics: metrics.length > 0 ? metrics : undefined,\n        annotations: horizontalAnnotations.length > 0 ? { horizontal: horizontalAnnotations } : undefined,\n        yAxis: {\n          left: this.props.leftYAxis ?? undefined,\n          right: this.props.rightYAxis ?? undefined,\n        },\n        legend: this.props.legendPosition !== undefined ? { position: this.props.legendPosition } : undefined,\n        liveData: this.props.liveData,\n        setPeriodToTimeRange: this.props.setPeriodToTimeRange,\n        period: this.props.period?.toSeconds(),\n        stat: this.props.statistic,\n      },\n    }];\n  }\n}\n\n                                             \nexport interface SingleValueWidgetProps extends MetricWidgetProps {\n                                   \n  readonly metrics: IMetric[];\n\n                                                                                               \n  readonly setPeriodToTimeRange?: boolean;\n\n                                                                                                     \n  readonly fullPrecision?: boolean;\n}\n\n                                                                                  \nexport class SingleValueWidget extends ConcreteWidget {\n  private readonly props: SingleValueWidgetProps;\n\n  constructor(props: SingleValueWidgetProps) {\n    super(props.width || 6, props.height || 3);\n    this.props = props;\n  }\n\n  public toJson(): any[] {\n    return [{\n      type: 'metric',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: {\n        view: 'singleValue',\n        title: this.props.title,\n        region: this.props.region || cdk.Aws.REGION,\n        metrics: allMetricsGraphJson(this.props.metrics, []),\n        setPeriodToTimeRange: this.props.setPeriodToTimeRange,\n        singleValueFullPrecision: this.props.fullPrecision,\n      },\n    }];\n  }\n}\n\n                                                       \nexport interface HorizontalAnnotation {\n                                            \n  readonly value: number;\n\n                                                                       \n  readonly label?: string;\n\n                                                                                                                                                                                                                       \n  readonly color?: string;\n\n                                                                                        \n  readonly fill?: Shading;\n\n                                                                          \n  readonly visible?: boolean;\n}\n\n                                                                    \nexport enum Shading {\n                                  \n  NONE = 'none',\n\n                                                 \n  ABOVE = 'above',\n\n                                                 \n  BELOW = 'below'\n}\n\n                                                                                      \nexport class Color {\n                           \n  public static readonly BLUE = '#1f77b4';\n\n                            \n  public static readonly BROWN = '#8c564b';\n\n                            \n  public static readonly GREEN = '#2ca02c';\n\n                           \n  public static readonly GREY = '#7f7f7f';\n\n                             \n  public static readonly ORANGE = '#ff7f0e';\n\n                           \n  public static readonly PINK = '#e377c2';\n\n                             \n  public static readonly PURPLE = '#9467bd';\n\n                          \n  public static readonly RED = '#d62728';\n}\n\n                                                       \nexport enum LegendPosition {\n                                                          \n  BOTTOM = 'bottom',\n\n                                                 \n  RIGHT = 'right',\n\n                                                 \n  HIDDEN = 'hidden'\n}\n\nfunction mapAnnotation(yAxis: string): ((x: HorizontalAnnotation) => any) {\n  return (a: HorizontalAnnotation) => {\n    return { ...a, yAxis };\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
