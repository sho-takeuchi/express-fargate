{
  "version": 3,
  "sources": ["log-query.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { ConcreteWidget } from './widget';\n\n                        \nexport enum LogQueryVisualizationType {\n                           \n  TABLE = 'table',\n                          \n  LINE = 'line',\n                                  \n  STACKEDAREA = 'stackedarea',\n                         \n  BAR = 'bar',\n                         \n  PIE = 'pie',\n}\n\n                                        \nexport interface LogQueryWidgetProps {\n                                                                 \n  readonly title?: string;\n\n                                             \n  readonly logGroupNames: string[];\n\n                                                                                                                                                                                                                            \n  readonly queryString?: string;\n\n                                                                                                                                                                                                                        \n  readonly queryLines?: string[];\n\n                                                                                                             \n  readonly region?: string;\n\n                                                                                           \n  readonly view?: LogQueryVisualizationType;\n\n                                                                                     \n  readonly width?: number;\n\n                                                          \n  readonly height?: number;\n}\n\n                                                   \nexport class LogQueryWidget extends ConcreteWidget {\n  private readonly props: LogQueryWidgetProps;\n\n  constructor(props: LogQueryWidgetProps) {\n    super(props.width || 6, props.height || 6);\n    this.props = props;\n\n    if (props.logGroupNames.length === 0) {\n      throw new Error('Specify at least one log group name.');\n    }\n\n    if (!!props.queryString === !!props.queryLines) {\n      throw new Error('Specify exactly one of \\'queryString\\' and \\'queryLines\\'');\n    }\n  }\n\n  public toJson(): any[] {\n    const sources = this.props.logGroupNames.map(l => `SOURCE '${l}'`).join(' | ');\n    const query = this.props.queryLines\n      ? this.props.queryLines.join('\\n| ')\n      : this.props.queryString;\n\n    const properties: any = {\n      view: this.props.view? this.props.view : LogQueryVisualizationType.TABLE,\n      title: this.props.title,\n      region: this.props.region || cdk.Aws.REGION,\n      query: `${sources} | ${query}`,\n    };\n\n    // adding stacked property in case of LINE or STACKEDAREA\n    if (this.props.view === LogQueryVisualizationType.LINE || this.props.view === LogQueryVisualizationType.STACKEDAREA) {\n      // assign the right native view value. both types share the same value\n      properties.view = 'timeSeries',\n      properties.stacked = this.props.view === LogQueryVisualizationType.STACKEDAREA ? true : false;\n    }\n\n    return [{\n      type: 'log',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: properties,\n    }];\n  }\n}\n"],
  "mappings": "uPAAA,IAAA,QAAA,cACA,SAAA,QAAA,YAGA,GAAY,2BAAZ,AAAA,UAAY,2BAAyB,CAEnC,2BAAA,MAAA,QAEA,2BAAA,KAAA,OAEA,2BAAA,YAAA,cAEA,2BAAA,IAAA,MAEA,2BAAA,IAAA,QAVU,0BAAA,QAAA,2BAAA,SAAA,0BAAyB,KAyCrC,4BAAoC,UAAA,cAAc,CAGhD,YAAY,MAA0B,CACpC,MAAM,MAAM,OAAS,EAAG,MAAM,QAAU,GAGxC,iFAFA,KAAK,MAAQ,MAET,MAAM,cAAc,SAAW,EACjC,KAAM,IAAI,OAAM,wCAGlB,GAAI,CAAC,CAAC,MAAM,aAAgB,CAAC,CAAC,MAAM,WAClC,KAAM,IAAI,OAAM,yDAIb,QAAM,CACX,KAAM,SAAU,KAAK,MAAM,cAAc,IAAI,GAAK,WAAW,MAAM,KAAK,OAClE,MAAQ,KAAK,MAAM,WACrB,KAAK,MAAM,WAAW,KAAK;KAC3B,KAAK,MAAM,YAET,WAAkB,CACtB,KAAM,KAAK,MAAM,KAAM,KAAK,MAAM,KAAO,0BAA0B,MACnE,MAAO,KAAK,MAAM,MAClB,OAAQ,KAAK,MAAM,QAAU,IAAI,IAAI,OACrC,MAAO,GAAG,aAAa,SAIzB,MAAI,MAAK,MAAM,OAAS,0BAA0B,MAAQ,KAAK,MAAM,OAAS,0BAA0B,cAEtG,YAAW,KAAO,aAClB,WAAW,QAAU,KAAK,MAAM,OAAS,0BAA0B,aAG9D,CAAC,CACN,KAAM,MACN,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,EAAG,KAAK,EACR,EAAG,KAAK,EACR,cA1CN,QAAA,eAAA",
  "names": []
}
