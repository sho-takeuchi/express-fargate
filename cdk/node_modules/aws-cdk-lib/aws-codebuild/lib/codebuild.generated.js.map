{
  "version": 3,
  "sources": ["codebuild.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:59:39.121Z\",\"fingerprint\":\"/aKygzqbKlGGQcSlW7TgW16zQMEZiEsytb4sblBMnoM=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                    \nexport interface CfnProjectProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly artifacts: CfnProject.ArtifactsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                          \n    readonly environment: CfnProject.EnvironmentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly serviceRole: string;\n\n                                                                                                                                                                                                                                                                           \n    readonly source: CfnProject.SourceProperty | cdk.IResolvable;\n\nn    readonly badgeEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                            \n    readonly buildBatchConfig?: CfnProject.ProjectBuildBatchConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                \n    readonly cache?: CfnProject.ProjectCacheProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly concurrentBuildLimit?: number;\n\n                                                                                                                                                                                                                                           \n    readonly description?: string;\n\nn    readonly encryptionKey?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly fileSystemLocations?: Array<CfnProject.ProjectFileSystemLocationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                \n    readonly logsConfig?: CfnProject.LogsConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                               \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly queuedTimeoutInMinutes?: number;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly resourceAccessRole?: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly secondaryArtifacts?: Array<CfnProject.ArtifactsProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly secondarySources?: Array<CfnProject.SourceProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                \n    readonly secondarySourceVersions?: Array<CfnProject.ProjectSourceVersionProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly sourceVersion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly timeoutInMinutes?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly triggers?: CfnProject.ProjectTriggersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly visibility?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly vpcConfig?: CfnProject.VpcConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnProjectProps`\n *\n * @param properties - the TypeScript properties of a `CfnProjectProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnProjectPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('artifacts', cdk.requiredValidator)(properties.artifacts));\n    errors.collect(cdk.propertyValidator('artifacts', CfnProject_ArtifactsPropertyValidator)(properties.artifacts));\n    errors.collect(cdk.propertyValidator('badgeEnabled', cdk.validateBoolean)(properties.badgeEnabled));\n    errors.collect(cdk.propertyValidator('buildBatchConfig', CfnProject_ProjectBuildBatchConfigPropertyValidator)(properties.buildBatchConfig));\n    errors.collect(cdk.propertyValidator('cache', CfnProject_ProjectCachePropertyValidator)(properties.cache));\n    errors.collect(cdk.propertyValidator('concurrentBuildLimit', cdk.validateNumber)(properties.concurrentBuildLimit));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('encryptionKey', cdk.validateString)(properties.encryptionKey));\n    errors.collect(cdk.propertyValidator('environment', cdk.requiredValidator)(properties.environment));\n    errors.collect(cdk.propertyValidator('environment', CfnProject_EnvironmentPropertyValidator)(properties.environment));\n    errors.collect(cdk.propertyValidator('fileSystemLocations', cdk.listValidator(CfnProject_ProjectFileSystemLocationPropertyValidator))(properties.fileSystemLocations));\n    errors.collect(cdk.propertyValidator('logsConfig', CfnProject_LogsConfigPropertyValidator)(properties.logsConfig));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('queuedTimeoutInMinutes', cdk.validateNumber)(properties.queuedTimeoutInMinutes));\n    errors.collect(cdk.propertyValidator('resourceAccessRole', cdk.validateString)(properties.resourceAccessRole));\n    errors.collect(cdk.propertyValidator('secondaryArtifacts', cdk.listValidator(CfnProject_ArtifactsPropertyValidator))(properties.secondaryArtifacts));\n    errors.collect(cdk.propertyValidator('secondarySourceVersions', cdk.listValidator(CfnProject_ProjectSourceVersionPropertyValidator))(properties.secondarySourceVersions));\n    errors.collect(cdk.propertyValidator('secondarySources', cdk.listValidator(CfnProject_SourcePropertyValidator))(properties.secondarySources));\n    errors.collect(cdk.propertyValidator('serviceRole', cdk.requiredValidator)(properties.serviceRole));\n    errors.collect(cdk.propertyValidator('serviceRole', cdk.validateString)(properties.serviceRole));\n    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('source', CfnProject_SourcePropertyValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('sourceVersion', cdk.validateString)(properties.sourceVersion));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('timeoutInMinutes', cdk.validateNumber)(properties.timeoutInMinutes));\n    errors.collect(cdk.propertyValidator('triggers', CfnProject_ProjectTriggersPropertyValidator)(properties.triggers));\n    errors.collect(cdk.propertyValidator('visibility', cdk.validateString)(properties.visibility));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnProject_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"CfnProjectProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project` resource\n *\n * @param properties - the TypeScript properties of a `CfnProjectProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProjectPropsValidator(properties).assertSuccess();\n    return {\n        Artifacts: cfnProjectArtifactsPropertyToCloudFormation(properties.artifacts),\n        Environment: cfnProjectEnvironmentPropertyToCloudFormation(properties.environment),\n        ServiceRole: cdk.stringToCloudFormation(properties.serviceRole),\n        Source: cfnProjectSourcePropertyToCloudFormation(properties.source),\n        BadgeEnabled: cdk.booleanToCloudFormation(properties.badgeEnabled),\n        BuildBatchConfig: cfnProjectProjectBuildBatchConfigPropertyToCloudFormation(properties.buildBatchConfig),\n        Cache: cfnProjectProjectCachePropertyToCloudFormation(properties.cache),\n        ConcurrentBuildLimit: cdk.numberToCloudFormation(properties.concurrentBuildLimit),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EncryptionKey: cdk.stringToCloudFormation(properties.encryptionKey),\n        FileSystemLocations: cdk.listMapper(cfnProjectProjectFileSystemLocationPropertyToCloudFormation)(properties.fileSystemLocations),\n        LogsConfig: cfnProjectLogsConfigPropertyToCloudFormation(properties.logsConfig),\n        Name: cdk.stringToCloudFormation(properties.name),\n        QueuedTimeoutInMinutes: cdk.numberToCloudFormation(properties.queuedTimeoutInMinutes),\n        ResourceAccessRole: cdk.stringToCloudFormation(properties.resourceAccessRole),\n        SecondaryArtifacts: cdk.listMapper(cfnProjectArtifactsPropertyToCloudFormation)(properties.secondaryArtifacts),\n        SecondarySources: cdk.listMapper(cfnProjectSourcePropertyToCloudFormation)(properties.secondarySources),\n        SecondarySourceVersions: cdk.listMapper(cfnProjectProjectSourceVersionPropertyToCloudFormation)(properties.secondarySourceVersions),\n        SourceVersion: cdk.stringToCloudFormation(properties.sourceVersion),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TimeoutInMinutes: cdk.numberToCloudFormation(properties.timeoutInMinutes),\n        Triggers: cfnProjectProjectTriggersPropertyToCloudFormation(properties.triggers),\n        Visibility: cdk.stringToCloudFormation(properties.visibility),\n        VpcConfig: cfnProjectVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProjectProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProjectProps>();\n    ret.addPropertyResult('artifacts', 'Artifacts', CfnProjectArtifactsPropertyFromCloudFormation(properties.Artifacts));\n    ret.addPropertyResult('environment', 'Environment', CfnProjectEnvironmentPropertyFromCloudFormation(properties.Environment));\n    ret.addPropertyResult('serviceRole', 'ServiceRole', cfn_parse.FromCloudFormation.getString(properties.ServiceRole));\n    ret.addPropertyResult('source', 'Source', CfnProjectSourcePropertyFromCloudFormation(properties.Source));\n    ret.addPropertyResult('badgeEnabled', 'BadgeEnabled', properties.BadgeEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BadgeEnabled) : undefined);\n    ret.addPropertyResult('buildBatchConfig', 'BuildBatchConfig', properties.BuildBatchConfig != null ? CfnProjectProjectBuildBatchConfigPropertyFromCloudFormation(properties.BuildBatchConfig) : undefined);\n    ret.addPropertyResult('cache', 'Cache', properties.Cache != null ? CfnProjectProjectCachePropertyFromCloudFormation(properties.Cache) : undefined);\n    ret.addPropertyResult('concurrentBuildLimit', 'ConcurrentBuildLimit', properties.ConcurrentBuildLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConcurrentBuildLimit) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('encryptionKey', 'EncryptionKey', properties.EncryptionKey != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionKey) : undefined);\n    ret.addPropertyResult('fileSystemLocations', 'FileSystemLocations', properties.FileSystemLocations != null ? cfn_parse.FromCloudFormation.getArray(CfnProjectProjectFileSystemLocationPropertyFromCloudFormation)(properties.FileSystemLocations) : undefined);\n    ret.addPropertyResult('logsConfig', 'LogsConfig', properties.LogsConfig != null ? CfnProjectLogsConfigPropertyFromCloudFormation(properties.LogsConfig) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('queuedTimeoutInMinutes', 'QueuedTimeoutInMinutes', properties.QueuedTimeoutInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.QueuedTimeoutInMinutes) : undefined);\n    ret.addPropertyResult('resourceAccessRole', 'ResourceAccessRole', properties.ResourceAccessRole != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceAccessRole) : undefined);\n    ret.addPropertyResult('secondaryArtifacts', 'SecondaryArtifacts', properties.SecondaryArtifacts != null ? cfn_parse.FromCloudFormation.getArray(CfnProjectArtifactsPropertyFromCloudFormation)(properties.SecondaryArtifacts) : undefined);\n    ret.addPropertyResult('secondarySources', 'SecondarySources', properties.SecondarySources != null ? cfn_parse.FromCloudFormation.getArray(CfnProjectSourcePropertyFromCloudFormation)(properties.SecondarySources) : undefined);\n    ret.addPropertyResult('secondarySourceVersions', 'SecondarySourceVersions', properties.SecondarySourceVersions != null ? cfn_parse.FromCloudFormation.getArray(CfnProjectProjectSourceVersionPropertyFromCloudFormation)(properties.SecondarySourceVersions) : undefined);\n    ret.addPropertyResult('sourceVersion', 'SourceVersion', properties.SourceVersion != null ? cfn_parse.FromCloudFormation.getString(properties.SourceVersion) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeoutInMinutes', 'TimeoutInMinutes', properties.TimeoutInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMinutes) : undefined);\n    ret.addPropertyResult('triggers', 'Triggers', properties.Triggers != null ? CfnProjectProjectTriggersPropertyFromCloudFormation(properties.Triggers) : undefined);\n    ret.addPropertyResult('visibility', 'Visibility', properties.Visibility != null ? cfn_parse.FromCloudFormation.getString(properties.Visibility) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnProjectVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \nexport class CfnProject extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeBuild::Project\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnProject {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnProjectPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnProject(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public artifacts: CfnProject.ArtifactsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                          \n    public environment: CfnProject.EnvironmentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                       \n    public serviceRole: string;\n\n                                                                                                                                                                                                                                                                           \n    public source: CfnProject.SourceProperty | cdk.IResolvable;\n\nn    public badgeEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public buildBatchConfig: CfnProject.ProjectBuildBatchConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                \n    public cache: CfnProject.ProjectCacheProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public concurrentBuildLimit: number | undefined;\n\n                                                                                                                                                                                                                                           \n    public description: string | undefined;\n\nn    public encryptionKey: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public fileSystemLocations: Array<CfnProject.ProjectFileSystemLocationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                \n    public logsConfig: CfnProject.LogsConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public queuedTimeoutInMinutes: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public resourceAccessRole: string | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public secondaryArtifacts: Array<CfnProject.ArtifactsProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    public secondarySources: Array<CfnProject.SourceProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                \n    public secondarySourceVersions: Array<CfnProject.ProjectSourceVersionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public sourceVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public timeoutInMinutes: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    public triggers: CfnProject.ProjectTriggersProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    public visibility: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public vpcConfig: CfnProject.VpcConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnProjectProps) {\n        super(scope, id, { type: CfnProject.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'artifacts', this);\n        cdk.requireProperty(props, 'environment', this);\n        cdk.requireProperty(props, 'serviceRole', this);\n        cdk.requireProperty(props, 'source', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.artifacts = props.artifacts;\n        this.environment = props.environment;\n        this.serviceRole = props.serviceRole;\n        this.source = props.source;\n        this.badgeEnabled = props.badgeEnabled;\n        this.buildBatchConfig = props.buildBatchConfig;\n        this.cache = props.cache;\n        this.concurrentBuildLimit = props.concurrentBuildLimit;\n        this.description = props.description;\n        this.encryptionKey = props.encryptionKey;\n        this.fileSystemLocations = props.fileSystemLocations;\n        this.logsConfig = props.logsConfig;\n        this.name = props.name;\n        this.queuedTimeoutInMinutes = props.queuedTimeoutInMinutes;\n        this.resourceAccessRole = props.resourceAccessRole;\n        this.secondaryArtifacts = props.secondaryArtifacts;\n        this.secondarySources = props.secondarySources;\n        this.secondarySourceVersions = props.secondarySourceVersions;\n        this.sourceVersion = props.sourceVersion;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CodeBuild::Project\", props.tags, { tagPropertyName: 'tags' });\n        this.timeoutInMinutes = props.timeoutInMinutes;\n        this.triggers = props.triggers;\n        this.visibility = props.visibility;\n        this.vpcConfig = props.vpcConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnProject.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            artifacts: this.artifacts,\n            environment: this.environment,\n            serviceRole: this.serviceRole,\n            source: this.source,\n            badgeEnabled: this.badgeEnabled,\n            buildBatchConfig: this.buildBatchConfig,\n            cache: this.cache,\n            concurrentBuildLimit: this.concurrentBuildLimit,\n            description: this.description,\n            encryptionKey: this.encryptionKey,\n            fileSystemLocations: this.fileSystemLocations,\n            logsConfig: this.logsConfig,\n            name: this.name,\n            queuedTimeoutInMinutes: this.queuedTimeoutInMinutes,\n            resourceAccessRole: this.resourceAccessRole,\n            secondaryArtifacts: this.secondaryArtifacts,\n            secondarySources: this.secondarySources,\n            secondarySourceVersions: this.secondarySourceVersions,\n            sourceVersion: this.sourceVersion,\n            tags: this.tags.renderTags(),\n            timeoutInMinutes: this.timeoutInMinutes,\n            triggers: this.triggers,\n            visibility: this.visibility,\n            vpcConfig: this.vpcConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnProjectPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface ArtifactsProperty {\n                                                                                                                                                                                                                                                                           \n        readonly artifactIdentifier?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly encryptionDisabled?: boolean | cdk.IResolvable;\nn        readonly location?: string;\nn        readonly name?: string;\nn        readonly namespaceType?: string;\nn        readonly overrideArtifactName?: boolean | cdk.IResolvable;\nn        readonly packaging?: string;\nn        readonly path?: string;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArtifactsProperty`\n *\n * @param properties - the TypeScript properties of a `ArtifactsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_ArtifactsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('artifactIdentifier', cdk.validateString)(properties.artifactIdentifier));\n    errors.collect(cdk.propertyValidator('encryptionDisabled', cdk.validateBoolean)(properties.encryptionDisabled));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('namespaceType', cdk.validateString)(properties.namespaceType));\n    errors.collect(cdk.propertyValidator('overrideArtifactName', cdk.validateBoolean)(properties.overrideArtifactName));\n    errors.collect(cdk.propertyValidator('packaging', cdk.validateString)(properties.packaging));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ArtifactsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.Artifacts` resource\n *\n * @param properties - the TypeScript properties of a `ArtifactsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.Artifacts` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectArtifactsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_ArtifactsPropertyValidator(properties).assertSuccess();\n    return {\n        ArtifactIdentifier: cdk.stringToCloudFormation(properties.artifactIdentifier),\n        EncryptionDisabled: cdk.booleanToCloudFormation(properties.encryptionDisabled),\n        Location: cdk.stringToCloudFormation(properties.location),\n        Name: cdk.stringToCloudFormation(properties.name),\n        NamespaceType: cdk.stringToCloudFormation(properties.namespaceType),\n        OverrideArtifactName: cdk.booleanToCloudFormation(properties.overrideArtifactName),\n        Packaging: cdk.stringToCloudFormation(properties.packaging),\n        Path: cdk.stringToCloudFormation(properties.path),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectArtifactsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.ArtifactsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ArtifactsProperty>();\n    ret.addPropertyResult('artifactIdentifier', 'ArtifactIdentifier', properties.ArtifactIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ArtifactIdentifier) : undefined);\n    ret.addPropertyResult('encryptionDisabled', 'EncryptionDisabled', properties.EncryptionDisabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EncryptionDisabled) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? cfn_parse.FromCloudFormation.getString(properties.Location) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('namespaceType', 'NamespaceType', properties.NamespaceType != null ? cfn_parse.FromCloudFormation.getString(properties.NamespaceType) : undefined);\n    ret.addPropertyResult('overrideArtifactName', 'OverrideArtifactName', properties.OverrideArtifactName != null ? cfn_parse.FromCloudFormation.getBoolean(properties.OverrideArtifactName) : undefined);\n    ret.addPropertyResult('packaging', 'Packaging', properties.Packaging != null ? cfn_parse.FromCloudFormation.getString(properties.Packaging) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                             \n    export interface BatchRestrictionsProperty {\nn        readonly computeTypesAllowed?: string[];\n                                                                                                                                                                                                                                                                                                 \n        readonly maximumBuildsAllowed?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BatchRestrictionsProperty`\n *\n * @param properties - the TypeScript properties of a `BatchRestrictionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_BatchRestrictionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('computeTypesAllowed', cdk.listValidator(cdk.validateString))(properties.computeTypesAllowed));\n    errors.collect(cdk.propertyValidator('maximumBuildsAllowed', cdk.validateNumber)(properties.maximumBuildsAllowed));\n    return errors.wrap('supplied properties not correct for \"BatchRestrictionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.BatchRestrictions` resource\n *\n * @param properties - the TypeScript properties of a `BatchRestrictionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.BatchRestrictions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectBatchRestrictionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_BatchRestrictionsPropertyValidator(properties).assertSuccess();\n    return {\n        ComputeTypesAllowed: cdk.listMapper(cdk.stringToCloudFormation)(properties.computeTypesAllowed),\n        MaximumBuildsAllowed: cdk.numberToCloudFormation(properties.maximumBuildsAllowed),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectBatchRestrictionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.BatchRestrictionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.BatchRestrictionsProperty>();\n    ret.addPropertyResult('computeTypesAllowed', 'ComputeTypesAllowed', properties.ComputeTypesAllowed != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ComputeTypesAllowed) : undefined);\n    ret.addPropertyResult('maximumBuildsAllowed', 'MaximumBuildsAllowed', properties.MaximumBuildsAllowed != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumBuildsAllowed) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                        \n    export interface BuildStatusConfigProperty {\nn        readonly context?: string;\nn        readonly targetUrl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BuildStatusConfigProperty`\n *\n * @param properties - the TypeScript properties of a `BuildStatusConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_BuildStatusConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('context', cdk.validateString)(properties.context));\n    errors.collect(cdk.propertyValidator('targetUrl', cdk.validateString)(properties.targetUrl));\n    return errors.wrap('supplied properties not correct for \"BuildStatusConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.BuildStatusConfig` resource\n *\n * @param properties - the TypeScript properties of a `BuildStatusConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.BuildStatusConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectBuildStatusConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_BuildStatusConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Context: cdk.stringToCloudFormation(properties.context),\n        TargetUrl: cdk.stringToCloudFormation(properties.targetUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectBuildStatusConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.BuildStatusConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.BuildStatusConfigProperty>();\n    ret.addPropertyResult('context', 'Context', properties.Context != null ? cfn_parse.FromCloudFormation.getString(properties.Context) : undefined);\n    ret.addPropertyResult('targetUrl', 'TargetUrl', properties.TargetUrl != null ? cfn_parse.FromCloudFormation.getString(properties.TargetUrl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface CloudWatchLogsConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly groupName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly status: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly streamName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchLogsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_CloudWatchLogsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));\n    return errors.wrap('supplied properties not correct for \"CloudWatchLogsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.CloudWatchLogsConfig` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.CloudWatchLogsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectCloudWatchLogsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_CloudWatchLogsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        Status: cdk.stringToCloudFormation(properties.status),\n        StreamName: cdk.stringToCloudFormation(properties.streamName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectCloudWatchLogsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.CloudWatchLogsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.CloudWatchLogsConfigProperty>();\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface EnvironmentProperty {\nn        readonly certificate?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly computeType: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly environmentVariables?: Array<CfnProject.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly image: string;\nn        readonly imagePullCredentialsType?: string;\nn        readonly privilegedMode?: boolean | cdk.IResolvable;\nn        readonly registryCredential?: CfnProject.RegistryCredentialProperty | cdk.IResolvable;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_EnvironmentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificate', cdk.validateString)(properties.certificate));\n    errors.collect(cdk.propertyValidator('computeType', cdk.requiredValidator)(properties.computeType));\n    errors.collect(cdk.propertyValidator('computeType', cdk.validateString)(properties.computeType));\n    errors.collect(cdk.propertyValidator('environmentVariables', cdk.listValidator(CfnProject_EnvironmentVariablePropertyValidator))(properties.environmentVariables));\n    errors.collect(cdk.propertyValidator('image', cdk.requiredValidator)(properties.image));\n    errors.collect(cdk.propertyValidator('image', cdk.validateString)(properties.image));\n    errors.collect(cdk.propertyValidator('imagePullCredentialsType', cdk.validateString)(properties.imagePullCredentialsType));\n    errors.collect(cdk.propertyValidator('privilegedMode', cdk.validateBoolean)(properties.privilegedMode));\n    errors.collect(cdk.propertyValidator('registryCredential', CfnProject_RegistryCredentialPropertyValidator)(properties.registryCredential));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"EnvironmentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.Environment` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.Environment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectEnvironmentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_EnvironmentPropertyValidator(properties).assertSuccess();\n    return {\n        Certificate: cdk.stringToCloudFormation(properties.certificate),\n        ComputeType: cdk.stringToCloudFormation(properties.computeType),\n        EnvironmentVariables: cdk.listMapper(cfnProjectEnvironmentVariablePropertyToCloudFormation)(properties.environmentVariables),\n        Image: cdk.stringToCloudFormation(properties.image),\n        ImagePullCredentialsType: cdk.stringToCloudFormation(properties.imagePullCredentialsType),\n        PrivilegedMode: cdk.booleanToCloudFormation(properties.privilegedMode),\n        RegistryCredential: cfnProjectRegistryCredentialPropertyToCloudFormation(properties.registryCredential),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectEnvironmentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.EnvironmentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.EnvironmentProperty>();\n    ret.addPropertyResult('certificate', 'Certificate', properties.Certificate != null ? cfn_parse.FromCloudFormation.getString(properties.Certificate) : undefined);\n    ret.addPropertyResult('computeType', 'ComputeType', cfn_parse.FromCloudFormation.getString(properties.ComputeType));\n    ret.addPropertyResult('environmentVariables', 'EnvironmentVariables', properties.EnvironmentVariables != null ? cfn_parse.FromCloudFormation.getArray(CfnProjectEnvironmentVariablePropertyFromCloudFormation)(properties.EnvironmentVariables) : undefined);\n    ret.addPropertyResult('image', 'Image', cfn_parse.FromCloudFormation.getString(properties.Image));\n    ret.addPropertyResult('imagePullCredentialsType', 'ImagePullCredentialsType', properties.ImagePullCredentialsType != null ? cfn_parse.FromCloudFormation.getString(properties.ImagePullCredentialsType) : undefined);\n    ret.addPropertyResult('privilegedMode', 'PrivilegedMode', properties.PrivilegedMode != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PrivilegedMode) : undefined);\n    ret.addPropertyResult('registryCredential', 'RegistryCredential', properties.RegistryCredential != null ? CfnProjectRegistryCredentialPropertyFromCloudFormation(properties.RegistryCredential) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface EnvironmentVariableProperty {\n                                                                                                                                                                                                                                                                                  \n        readonly name: string;\nn        readonly type?: string;\nn        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentVariableProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_EnvironmentVariablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"EnvironmentVariableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.EnvironmentVariable` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.EnvironmentVariable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectEnvironmentVariablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_EnvironmentVariablePropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectEnvironmentVariablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.EnvironmentVariableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.EnvironmentVariableProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface GitSubmodulesConfigProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly fetchSubmodules: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GitSubmodulesConfigProperty`\n *\n * @param properties - the TypeScript properties of a `GitSubmodulesConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_GitSubmodulesConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fetchSubmodules', cdk.requiredValidator)(properties.fetchSubmodules));\n    errors.collect(cdk.propertyValidator('fetchSubmodules', cdk.validateBoolean)(properties.fetchSubmodules));\n    return errors.wrap('supplied properties not correct for \"GitSubmodulesConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.GitSubmodulesConfig` resource\n *\n * @param properties - the TypeScript properties of a `GitSubmodulesConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.GitSubmodulesConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectGitSubmodulesConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_GitSubmodulesConfigPropertyValidator(properties).assertSuccess();\n    return {\n        FetchSubmodules: cdk.booleanToCloudFormation(properties.fetchSubmodules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectGitSubmodulesConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.GitSubmodulesConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.GitSubmodulesConfigProperty>();\n    ret.addPropertyResult('fetchSubmodules', 'FetchSubmodules', cfn_parse.FromCloudFormation.getBoolean(properties.FetchSubmodules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface LogsConfigProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly cloudWatchLogs?: CfnProject.CloudWatchLogsConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                           \n        readonly s3Logs?: CfnProject.S3LogsConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LogsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_LogsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogs', CfnProject_CloudWatchLogsConfigPropertyValidator)(properties.cloudWatchLogs));\n    errors.collect(cdk.propertyValidator('s3Logs', CfnProject_S3LogsConfigPropertyValidator)(properties.s3Logs));\n    return errors.wrap('supplied properties not correct for \"LogsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.LogsConfig` resource\n *\n * @param properties - the TypeScript properties of a `LogsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.LogsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectLogsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_LogsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogs: cfnProjectCloudWatchLogsConfigPropertyToCloudFormation(properties.cloudWatchLogs),\n        S3Logs: cfnProjectS3LogsConfigPropertyToCloudFormation(properties.s3Logs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectLogsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.LogsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.LogsConfigProperty>();\n    ret.addPropertyResult('cloudWatchLogs', 'CloudWatchLogs', properties.CloudWatchLogs != null ? CfnProjectCloudWatchLogsConfigPropertyFromCloudFormation(properties.CloudWatchLogs) : undefined);\n    ret.addPropertyResult('s3Logs', 'S3Logs', properties.S3Logs != null ? CfnProjectS3LogsConfigPropertyFromCloudFormation(properties.S3Logs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                       \n    export interface ProjectBuildBatchConfigProperty {\nn        readonly batchReportMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly combineArtifacts?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly restrictions?: CfnProject.BatchRestrictionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                \n        readonly serviceRole?: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly timeoutInMins?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProjectBuildBatchConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ProjectBuildBatchConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_ProjectBuildBatchConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('batchReportMode', cdk.validateString)(properties.batchReportMode));\n    errors.collect(cdk.propertyValidator('combineArtifacts', cdk.validateBoolean)(properties.combineArtifacts));\n    errors.collect(cdk.propertyValidator('restrictions', CfnProject_BatchRestrictionsPropertyValidator)(properties.restrictions));\n    errors.collect(cdk.propertyValidator('serviceRole', cdk.validateString)(properties.serviceRole));\n    errors.collect(cdk.propertyValidator('timeoutInMins', cdk.validateNumber)(properties.timeoutInMins));\n    return errors.wrap('supplied properties not correct for \"ProjectBuildBatchConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectBuildBatchConfig` resource\n *\n * @param properties - the TypeScript properties of a `ProjectBuildBatchConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectBuildBatchConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectProjectBuildBatchConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_ProjectBuildBatchConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BatchReportMode: cdk.stringToCloudFormation(properties.batchReportMode),\n        CombineArtifacts: cdk.booleanToCloudFormation(properties.combineArtifacts),\n        Restrictions: cfnProjectBatchRestrictionsPropertyToCloudFormation(properties.restrictions),\n        ServiceRole: cdk.stringToCloudFormation(properties.serviceRole),\n        TimeoutInMins: cdk.numberToCloudFormation(properties.timeoutInMins),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectProjectBuildBatchConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.ProjectBuildBatchConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ProjectBuildBatchConfigProperty>();\n    ret.addPropertyResult('batchReportMode', 'BatchReportMode', properties.BatchReportMode != null ? cfn_parse.FromCloudFormation.getString(properties.BatchReportMode) : undefined);\n    ret.addPropertyResult('combineArtifacts', 'CombineArtifacts', properties.CombineArtifacts != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CombineArtifacts) : undefined);\n    ret.addPropertyResult('restrictions', 'Restrictions', properties.Restrictions != null ? CfnProjectBatchRestrictionsPropertyFromCloudFormation(properties.Restrictions) : undefined);\n    ret.addPropertyResult('serviceRole', 'ServiceRole', properties.ServiceRole != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceRole) : undefined);\n    ret.addPropertyResult('timeoutInMins', 'TimeoutInMins', properties.TimeoutInMins != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMins) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface ProjectCacheProperty {\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly location?: string;\nn        readonly modes?: string[];\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProjectCacheProperty`\n *\n * @param properties - the TypeScript properties of a `ProjectCacheProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_ProjectCachePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('modes', cdk.listValidator(cdk.validateString))(properties.modes));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ProjectCacheProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectCache` resource\n *\n * @param properties - the TypeScript properties of a `ProjectCacheProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectCache` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectProjectCachePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_ProjectCachePropertyValidator(properties).assertSuccess();\n    return {\n        Location: cdk.stringToCloudFormation(properties.location),\n        Modes: cdk.listMapper(cdk.stringToCloudFormation)(properties.modes),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectProjectCachePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.ProjectCacheProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ProjectCacheProperty>();\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? cfn_parse.FromCloudFormation.getString(properties.Location) : undefined);\n    ret.addPropertyResult('modes', 'Modes', properties.Modes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Modes) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface ProjectFileSystemLocationProperty {\nn        readonly identifier: string;\nn        readonly location: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly mountOptions?: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly mountPoint: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProjectFileSystemLocationProperty`\n *\n * @param properties - the TypeScript properties of a `ProjectFileSystemLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_ProjectFileSystemLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('identifier', cdk.requiredValidator)(properties.identifier));\n    errors.collect(cdk.propertyValidator('identifier', cdk.validateString)(properties.identifier));\n    errors.collect(cdk.propertyValidator('location', cdk.requiredValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('mountOptions', cdk.validateString)(properties.mountOptions));\n    errors.collect(cdk.propertyValidator('mountPoint', cdk.requiredValidator)(properties.mountPoint));\n    errors.collect(cdk.propertyValidator('mountPoint', cdk.validateString)(properties.mountPoint));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ProjectFileSystemLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectFileSystemLocation` resource\n *\n * @param properties - the TypeScript properties of a `ProjectFileSystemLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectFileSystemLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectProjectFileSystemLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_ProjectFileSystemLocationPropertyValidator(properties).assertSuccess();\n    return {\n        Identifier: cdk.stringToCloudFormation(properties.identifier),\n        Location: cdk.stringToCloudFormation(properties.location),\n        MountOptions: cdk.stringToCloudFormation(properties.mountOptions),\n        MountPoint: cdk.stringToCloudFormation(properties.mountPoint),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectProjectFileSystemLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.ProjectFileSystemLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ProjectFileSystemLocationProperty>();\n    ret.addPropertyResult('identifier', 'Identifier', cfn_parse.FromCloudFormation.getString(properties.Identifier));\n    ret.addPropertyResult('location', 'Location', cfn_parse.FromCloudFormation.getString(properties.Location));\n    ret.addPropertyResult('mountOptions', 'MountOptions', properties.MountOptions != null ? cfn_parse.FromCloudFormation.getString(properties.MountOptions) : undefined);\n    ret.addPropertyResult('mountPoint', 'MountPoint', cfn_parse.FromCloudFormation.getString(properties.MountPoint));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                       \n    export interface ProjectSourceVersionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly sourceIdentifier: string;\nn        readonly sourceVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProjectSourceVersionProperty`\n *\n * @param properties - the TypeScript properties of a `ProjectSourceVersionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_ProjectSourceVersionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourceIdentifier', cdk.requiredValidator)(properties.sourceIdentifier));\n    errors.collect(cdk.propertyValidator('sourceIdentifier', cdk.validateString)(properties.sourceIdentifier));\n    errors.collect(cdk.propertyValidator('sourceVersion', cdk.validateString)(properties.sourceVersion));\n    return errors.wrap('supplied properties not correct for \"ProjectSourceVersionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectSourceVersion` resource\n *\n * @param properties - the TypeScript properties of a `ProjectSourceVersionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectSourceVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectProjectSourceVersionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_ProjectSourceVersionPropertyValidator(properties).assertSuccess();\n    return {\n        SourceIdentifier: cdk.stringToCloudFormation(properties.sourceIdentifier),\n        SourceVersion: cdk.stringToCloudFormation(properties.sourceVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectProjectSourceVersionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.ProjectSourceVersionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ProjectSourceVersionProperty>();\n    ret.addPropertyResult('sourceIdentifier', 'SourceIdentifier', cfn_parse.FromCloudFormation.getString(properties.SourceIdentifier));\n    ret.addPropertyResult('sourceVersion', 'SourceVersion', properties.SourceVersion != null ? cfn_parse.FromCloudFormation.getString(properties.SourceVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface ProjectTriggersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly buildType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly filterGroups?: Array<Array<CfnProject.WebhookFilterProperty | cdk.IResolvable> | cdk.IResolvable | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly webhook?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProjectTriggersProperty`\n *\n * @param properties - the TypeScript properties of a `ProjectTriggersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_ProjectTriggersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('buildType', cdk.validateString)(properties.buildType));\n    errors.collect(cdk.propertyValidator('filterGroups', cdk.listValidator(cdk.listValidator(CfnProject_WebhookFilterPropertyValidator)))(properties.filterGroups));\n    errors.collect(cdk.propertyValidator('webhook', cdk.validateBoolean)(properties.webhook));\n    return errors.wrap('supplied properties not correct for \"ProjectTriggersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectTriggers` resource\n *\n * @param properties - the TypeScript properties of a `ProjectTriggersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.ProjectTriggers` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectProjectTriggersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_ProjectTriggersPropertyValidator(properties).assertSuccess();\n    return {\n        BuildType: cdk.stringToCloudFormation(properties.buildType),\n        FilterGroups: cdk.listMapper(cdk.listMapper(cfnProjectWebhookFilterPropertyToCloudFormation))(properties.filterGroups),\n        Webhook: cdk.booleanToCloudFormation(properties.webhook),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectProjectTriggersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.ProjectTriggersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ProjectTriggersProperty>();\n    ret.addPropertyResult('buildType', 'BuildType', properties.BuildType != null ? cfn_parse.FromCloudFormation.getString(properties.BuildType) : undefined);\n    ret.addPropertyResult('filterGroups', 'FilterGroups', properties.FilterGroups != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getArray(CfnProjectWebhookFilterPropertyFromCloudFormation))(properties.FilterGroups) : undefined);\n    ret.addPropertyResult('webhook', 'Webhook', properties.Webhook != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Webhook) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface RegistryCredentialProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly credential: string;\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly credentialProvider: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RegistryCredentialProperty`\n *\n * @param properties - the TypeScript properties of a `RegistryCredentialProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_RegistryCredentialPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('credential', cdk.requiredValidator)(properties.credential));\n    errors.collect(cdk.propertyValidator('credential', cdk.validateString)(properties.credential));\n    errors.collect(cdk.propertyValidator('credentialProvider', cdk.requiredValidator)(properties.credentialProvider));\n    errors.collect(cdk.propertyValidator('credentialProvider', cdk.validateString)(properties.credentialProvider));\n    return errors.wrap('supplied properties not correct for \"RegistryCredentialProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.RegistryCredential` resource\n *\n * @param properties - the TypeScript properties of a `RegistryCredentialProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.RegistryCredential` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectRegistryCredentialPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_RegistryCredentialPropertyValidator(properties).assertSuccess();\n    return {\n        Credential: cdk.stringToCloudFormation(properties.credential),\n        CredentialProvider: cdk.stringToCloudFormation(properties.credentialProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectRegistryCredentialPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.RegistryCredentialProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.RegistryCredentialProperty>();\n    ret.addPropertyResult('credential', 'Credential', cfn_parse.FromCloudFormation.getString(properties.Credential));\n    ret.addPropertyResult('credentialProvider', 'CredentialProvider', cfn_parse.FromCloudFormation.getString(properties.CredentialProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface S3LogsConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly encryptionDisabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly location?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LogsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `S3LogsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_S3LogsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionDisabled', cdk.validateBoolean)(properties.encryptionDisabled));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"S3LogsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.S3LogsConfig` resource\n *\n * @param properties - the TypeScript properties of a `S3LogsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.S3LogsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectS3LogsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_S3LogsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EncryptionDisabled: cdk.booleanToCloudFormation(properties.encryptionDisabled),\n        Location: cdk.stringToCloudFormation(properties.location),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectS3LogsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.S3LogsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.S3LogsConfigProperty>();\n    ret.addPropertyResult('encryptionDisabled', 'EncryptionDisabled', properties.EncryptionDisabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EncryptionDisabled) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? cfn_parse.FromCloudFormation.getString(properties.Location) : undefined);\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface SourceProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly auth?: CfnProject.SourceAuthProperty | cdk.IResolvable;\nn        readonly buildSpec?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly buildStatusConfig?: CfnProject.BuildStatusConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly gitCloneDepth?: number;\n                                                                                                                                                                                                                                                                                                    \n        readonly gitSubmodulesConfig?: CfnProject.GitSubmodulesConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly insecureSsl?: boolean | cdk.IResolvable;\nn        readonly location?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly reportBuildStatus?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly sourceIdentifier?: string;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceProperty`\n *\n * @param properties - the TypeScript properties of a `SourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_SourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('auth', CfnProject_SourceAuthPropertyValidator)(properties.auth));\n    errors.collect(cdk.propertyValidator('buildSpec', cdk.validateString)(properties.buildSpec));\n    errors.collect(cdk.propertyValidator('buildStatusConfig', CfnProject_BuildStatusConfigPropertyValidator)(properties.buildStatusConfig));\n    errors.collect(cdk.propertyValidator('gitCloneDepth', cdk.validateNumber)(properties.gitCloneDepth));\n    errors.collect(cdk.propertyValidator('gitSubmodulesConfig', CfnProject_GitSubmodulesConfigPropertyValidator)(properties.gitSubmodulesConfig));\n    errors.collect(cdk.propertyValidator('insecureSsl', cdk.validateBoolean)(properties.insecureSsl));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('reportBuildStatus', cdk.validateBoolean)(properties.reportBuildStatus));\n    errors.collect(cdk.propertyValidator('sourceIdentifier', cdk.validateString)(properties.sourceIdentifier));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"SourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.Source` resource\n *\n * @param properties - the TypeScript properties of a `SourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.Source` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_SourcePropertyValidator(properties).assertSuccess();\n    return {\n        Auth: cfnProjectSourceAuthPropertyToCloudFormation(properties.auth),\n        BuildSpec: cdk.stringToCloudFormation(properties.buildSpec),\n        BuildStatusConfig: cfnProjectBuildStatusConfigPropertyToCloudFormation(properties.buildStatusConfig),\n        GitCloneDepth: cdk.numberToCloudFormation(properties.gitCloneDepth),\n        GitSubmodulesConfig: cfnProjectGitSubmodulesConfigPropertyToCloudFormation(properties.gitSubmodulesConfig),\n        InsecureSsl: cdk.booleanToCloudFormation(properties.insecureSsl),\n        Location: cdk.stringToCloudFormation(properties.location),\n        ReportBuildStatus: cdk.booleanToCloudFormation(properties.reportBuildStatus),\n        SourceIdentifier: cdk.stringToCloudFormation(properties.sourceIdentifier),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.SourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.SourceProperty>();\n    ret.addPropertyResult('auth', 'Auth', properties.Auth != null ? CfnProjectSourceAuthPropertyFromCloudFormation(properties.Auth) : undefined);\n    ret.addPropertyResult('buildSpec', 'BuildSpec', properties.BuildSpec != null ? cfn_parse.FromCloudFormation.getString(properties.BuildSpec) : undefined);\n    ret.addPropertyResult('buildStatusConfig', 'BuildStatusConfig', properties.BuildStatusConfig != null ? CfnProjectBuildStatusConfigPropertyFromCloudFormation(properties.BuildStatusConfig) : undefined);\n    ret.addPropertyResult('gitCloneDepth', 'GitCloneDepth', properties.GitCloneDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.GitCloneDepth) : undefined);\n    ret.addPropertyResult('gitSubmodulesConfig', 'GitSubmodulesConfig', properties.GitSubmodulesConfig != null ? CfnProjectGitSubmodulesConfigPropertyFromCloudFormation(properties.GitSubmodulesConfig) : undefined);\n    ret.addPropertyResult('insecureSsl', 'InsecureSsl', properties.InsecureSsl != null ? cfn_parse.FromCloudFormation.getBoolean(properties.InsecureSsl) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? cfn_parse.FromCloudFormation.getString(properties.Location) : undefined);\n    ret.addPropertyResult('reportBuildStatus', 'ReportBuildStatus', properties.ReportBuildStatus != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReportBuildStatus) : undefined);\n    ret.addPropertyResult('sourceIdentifier', 'SourceIdentifier', properties.SourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.SourceIdentifier) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface SourceAuthProperty {\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly resource?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceAuthProperty`\n *\n * @param properties - the TypeScript properties of a `SourceAuthProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_SourceAuthPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resource', cdk.validateString)(properties.resource));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"SourceAuthProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.SourceAuth` resource\n *\n * @param properties - the TypeScript properties of a `SourceAuthProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.SourceAuth` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectSourceAuthPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_SourceAuthPropertyValidator(properties).assertSuccess();\n    return {\n        Resource: cdk.stringToCloudFormation(properties.resource),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectSourceAuthPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.SourceAuthProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.SourceAuthProperty>();\n    ret.addPropertyResult('resource', 'Resource', properties.Resource != null ? cfn_parse.FromCloudFormation.getString(properties.Resource) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                  \n        readonly subnets?: string[];\n                                                                                                                                                                                                                                            \n        readonly vpcId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnets', 'Subnets', properties.Subnets != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Subnets) : undefined);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\nn    export interface WebhookFilterProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly excludeMatchedPattern?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly pattern: string;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WebhookFilterProperty`\n *\n * @param properties - the TypeScript properties of a `WebhookFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_WebhookFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('excludeMatchedPattern', cdk.validateBoolean)(properties.excludeMatchedPattern));\n    errors.collect(cdk.propertyValidator('pattern', cdk.requiredValidator)(properties.pattern));\n    errors.collect(cdk.propertyValidator('pattern', cdk.validateString)(properties.pattern));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"WebhookFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::Project.WebhookFilter` resource\n *\n * @param properties - the TypeScript properties of a `WebhookFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::Project.WebhookFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectWebhookFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_WebhookFilterPropertyValidator(properties).assertSuccess();\n    return {\n        ExcludeMatchedPattern: cdk.booleanToCloudFormation(properties.excludeMatchedPattern),\n        Pattern: cdk.stringToCloudFormation(properties.pattern),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectWebhookFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.WebhookFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.WebhookFilterProperty>();\n    ret.addPropertyResult('excludeMatchedPattern', 'ExcludeMatchedPattern', properties.ExcludeMatchedPattern != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ExcludeMatchedPattern) : undefined);\n    ret.addPropertyResult('pattern', 'Pattern', cfn_parse.FromCloudFormation.getString(properties.Pattern));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnReportGroupProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly exportConfig: CfnReportGroup.ReportExportConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly type: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly deleteReports?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                               \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReportGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnReportGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReportGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteReports', cdk.validateBoolean)(properties.deleteReports));\n    errors.collect(cdk.propertyValidator('exportConfig', cdk.requiredValidator)(properties.exportConfig));\n    errors.collect(cdk.propertyValidator('exportConfig', CfnReportGroup_ReportExportConfigPropertyValidator)(properties.exportConfig));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnReportGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::ReportGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnReportGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::ReportGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReportGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReportGroupPropsValidator(properties).assertSuccess();\n    return {\n        ExportConfig: cfnReportGroupReportExportConfigPropertyToCloudFormation(properties.exportConfig),\n        Type: cdk.stringToCloudFormation(properties.type),\n        DeleteReports: cdk.booleanToCloudFormation(properties.deleteReports),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReportGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReportGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReportGroupProps>();\n    ret.addPropertyResult('exportConfig', 'ExportConfig', CfnReportGroupReportExportConfigPropertyFromCloudFormation(properties.ExportConfig));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('deleteReports', 'DeleteReports', properties.DeleteReports != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteReports) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                              \nexport class CfnReportGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeBuild::ReportGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReportGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReportGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReportGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                               \n    public exportConfig: CfnReportGroup.ReportExportConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public type: string;\n\nn    public deleteReports: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                               \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnReportGroupProps) {\n        super(scope, id, { type: CfnReportGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'exportConfig', this);\n        cdk.requireProperty(props, 'type', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.exportConfig = props.exportConfig;\n        this.type = props.type;\n        this.deleteReports = props.deleteReports;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CodeBuild::ReportGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReportGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            exportConfig: this.exportConfig,\n            type: this.type,\n            deleteReports: this.deleteReports,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReportGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnReportGroup {\n                                                                                                                                                                                                                                                                                            \n    export interface ReportExportConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly exportConfigType: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly s3Destination?: CfnReportGroup.S3ReportExportConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReportExportConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ReportExportConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReportGroup_ReportExportConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('exportConfigType', cdk.requiredValidator)(properties.exportConfigType));\n    errors.collect(cdk.propertyValidator('exportConfigType', cdk.validateString)(properties.exportConfigType));\n    errors.collect(cdk.propertyValidator('s3Destination', CfnReportGroup_S3ReportExportConfigPropertyValidator)(properties.s3Destination));\n    return errors.wrap('supplied properties not correct for \"ReportExportConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::ReportGroup.ReportExportConfig` resource\n *\n * @param properties - the TypeScript properties of a `ReportExportConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::ReportGroup.ReportExportConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReportGroupReportExportConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReportGroup_ReportExportConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ExportConfigType: cdk.stringToCloudFormation(properties.exportConfigType),\n        S3Destination: cfnReportGroupS3ReportExportConfigPropertyToCloudFormation(properties.s3Destination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReportGroupReportExportConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReportGroup.ReportExportConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReportGroup.ReportExportConfigProperty>();\n    ret.addPropertyResult('exportConfigType', 'ExportConfigType', cfn_parse.FromCloudFormation.getString(properties.ExportConfigType));\n    ret.addPropertyResult('s3Destination', 'S3Destination', properties.S3Destination != null ? CfnReportGroupS3ReportExportConfigPropertyFromCloudFormation(properties.S3Destination) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReportGroup {\n                                                                                                                                                                                                                                                                                                     \n    export interface S3ReportExportConfigProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly bucket: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly bucketOwner?: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly encryptionDisabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                \n        readonly encryptionKey?: string;\nn        readonly packaging?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly path?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ReportExportConfigProperty`\n *\n * @param properties - the TypeScript properties of a `S3ReportExportConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReportGroup_S3ReportExportConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucketOwner', cdk.validateString)(properties.bucketOwner));\n    errors.collect(cdk.propertyValidator('encryptionDisabled', cdk.validateBoolean)(properties.encryptionDisabled));\n    errors.collect(cdk.propertyValidator('encryptionKey', cdk.validateString)(properties.encryptionKey));\n    errors.collect(cdk.propertyValidator('packaging', cdk.validateString)(properties.packaging));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    return errors.wrap('supplied properties not correct for \"S3ReportExportConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::ReportGroup.S3ReportExportConfig` resource\n *\n * @param properties - the TypeScript properties of a `S3ReportExportConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::ReportGroup.S3ReportExportConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReportGroupS3ReportExportConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReportGroup_S3ReportExportConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        BucketOwner: cdk.stringToCloudFormation(properties.bucketOwner),\n        EncryptionDisabled: cdk.booleanToCloudFormation(properties.encryptionDisabled),\n        EncryptionKey: cdk.stringToCloudFormation(properties.encryptionKey),\n        Packaging: cdk.stringToCloudFormation(properties.packaging),\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReportGroupS3ReportExportConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReportGroup.S3ReportExportConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReportGroup.S3ReportExportConfigProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('bucketOwner', 'BucketOwner', properties.BucketOwner != null ? cfn_parse.FromCloudFormation.getString(properties.BucketOwner) : undefined);\n    ret.addPropertyResult('encryptionDisabled', 'EncryptionDisabled', properties.EncryptionDisabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EncryptionDisabled) : undefined);\n    ret.addPropertyResult('encryptionKey', 'EncryptionKey', properties.EncryptionKey != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionKey) : undefined);\n    ret.addPropertyResult('packaging', 'Packaging', properties.Packaging != null ? cfn_parse.FromCloudFormation.getString(properties.Packaging) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnSourceCredentialProps {\n\n                                                                                                                                                                                                                                                                                                                \n    readonly authType: string;\n\n                                                                                                                                                                                                                                                                                           \n    readonly serverType: string;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly token: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly username?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSourceCredentialProps`\n *\n * @param properties - the TypeScript properties of a `CfnSourceCredentialProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSourceCredentialPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authType', cdk.requiredValidator)(properties.authType));\n    errors.collect(cdk.propertyValidator('authType', cdk.validateString)(properties.authType));\n    errors.collect(cdk.propertyValidator('serverType', cdk.requiredValidator)(properties.serverType));\n    errors.collect(cdk.propertyValidator('serverType', cdk.validateString)(properties.serverType));\n    errors.collect(cdk.propertyValidator('token', cdk.requiredValidator)(properties.token));\n    errors.collect(cdk.propertyValidator('token', cdk.validateString)(properties.token));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"CfnSourceCredentialProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeBuild::SourceCredential` resource\n *\n * @param properties - the TypeScript properties of a `CfnSourceCredentialProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeBuild::SourceCredential` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSourceCredentialPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSourceCredentialPropsValidator(properties).assertSuccess();\n    return {\n        AuthType: cdk.stringToCloudFormation(properties.authType),\n        ServerType: cdk.stringToCloudFormation(properties.serverType),\n        Token: cdk.stringToCloudFormation(properties.token),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSourceCredentialPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSourceCredentialProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSourceCredentialProps>();\n    ret.addPropertyResult('authType', 'AuthType', cfn_parse.FromCloudFormation.getString(properties.AuthType));\n    ret.addPropertyResult('serverType', 'ServerType', cfn_parse.FromCloudFormation.getString(properties.ServerType));\n    ret.addPropertyResult('token', 'Token', cfn_parse.FromCloudFormation.getString(properties.Token));\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSourceCredential extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeBuild::SourceCredential\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSourceCredential {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSourceCredentialPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSourceCredential(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                \n    public authType: string;\n\n                                                                                                                                                                                                                                                                                           \n    public serverType: string;\n\n                                                                                                                                                                                                                                                                                                       \n    public token: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public username: string | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnSourceCredentialProps) {\n        super(scope, id, { type: CfnSourceCredential.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authType', this);\n        cdk.requireProperty(props, 'serverType', this);\n        cdk.requireProperty(props, 'token', this);\n\n        this.authType = props.authType;\n        this.serverType = props.serverType;\n        this.token = props.token;\n        this.username = props.username;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSourceCredential.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authType: this.authType,\n            serverType: this.serverType,\n            token: this.token,\n            username: this.username,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSourceCredentialPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
