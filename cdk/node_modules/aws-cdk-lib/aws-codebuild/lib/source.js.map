{
  "version": 3,
  "sources": ["source.ts"],
  "sourcesContent": ["import * as codecommit from '../../aws-codecommit';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport { Construct } from 'constructs';\nimport { CfnProject } from './codebuild.generated';\nimport { IProject } from './project';\nimport {\n  BITBUCKET_SOURCE_TYPE,\n  CODECOMMIT_SOURCE_TYPE,\n  GITHUB_ENTERPRISE_SOURCE_TYPE,\n  GITHUB_SOURCE_TYPE,\n  S3_SOURCE_TYPE,\n} from './source-types';\n\n                                                       \nexport interface SourceConfig {\n  readonly sourceProperty: CfnProject.SourceProperty;\n\n  readonly buildTriggers?: CfnProject.ProjectTriggersProperty;\n\n                                                                                                                                                                                                                                         \n  readonly sourceVersion?: string;\n}\n\n                                                                                          \nexport interface ISource {\n  readonly identifier?: string;\n\n  readonly type: string;\n\n  readonly badgeSupported: boolean;\n\n  bind(scope: Construct, project: IProject): SourceConfig;\n}\n\n                                                   \nexport interface SourceProps {\n                                                                                            \n  readonly identifier?: string;\n}\n\n                                                              \nexport abstract class Source implements ISource {\n  public static s3(props: S3SourceProps): ISource {\n    return new S3Source(props);\n  }\n\n  public static codeCommit(props: CodeCommitSourceProps): ISource {\n    return new CodeCommitSource(props);\n  }\n\n  public static gitHub(props: GitHubSourceProps): ISource {\n    return new GitHubSource(props);\n  }\n\n  public static gitHubEnterprise(props: GitHubEnterpriseSourceProps): ISource {\n    return new GitHubEnterpriseSource(props);\n  }\n\n  public static bitBucket(props: BitBucketSourceProps): ISource {\n    return new BitBucketSource(props);\n  }\n\n  public readonly identifier?: string;\n  public abstract readonly type: string;\n  public readonly badgeSupported: boolean = false;\n\n  protected constructor(props: SourceProps) {\n    this.identifier = props.identifier;\n  }\n\n                                                                                                                                                                                                                                      \n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    return {\n      sourceProperty: {\n        sourceIdentifier: this.identifier,\n        type: this.type,\n      },\n    };\n  }\n}\n\n/**\n * The construction properties common to all build sources that are backed by Git.\n */\ninterface GitSourceProps extends SourceProps {\n                                                                                                                                                                                                          \n  readonly cloneDepth?: number;\n\n                                                                                                                                                                                                                                           \n  readonly branchOrRef?: string;\n\n                                                                                             \n  readonly fetchSubmodules?: boolean;\n}\n\n/**\n * A common superclass of all build sources that are backed by Git.\n */\nabstract class GitSource extends Source {\n  private readonly cloneDepth?: number;\n  private readonly branchOrRef?: string;\n  private readonly fetchSubmodules?: boolean;\n\n  protected constructor(props: GitSourceProps) {\n    super(props);\n\n    this.cloneDepth = props.cloneDepth;\n    this.branchOrRef = props.branchOrRef;\n    this.fetchSubmodules = props.fetchSubmodules;\n  }\n\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    const superConfig = super.bind(_scope, _project);\n    return {\n      sourceVersion: this.branchOrRef,\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        gitCloneDepth: this.cloneDepth,\n        gitSubmodulesConfig: this.fetchSubmodules ? {\n          fetchSubmodules: this.fetchSubmodules,\n        } : undefined,\n      },\n    };\n  }\n}\n\n                                              \nexport enum EventAction {\n                                                                  \n  PUSH = 'PUSH',\n\n                                         \n  PULL_REQUEST_CREATED = 'PULL_REQUEST_CREATED',\n\n                                         \n  PULL_REQUEST_UPDATED = 'PULL_REQUEST_UPDATED',\n\n                                        \n  PULL_REQUEST_MERGED = 'PULL_REQUEST_MERGED',\n\n                                                                                                                                                  \n  PULL_REQUEST_REOPENED = 'PULL_REQUEST_REOPENED',\n}\n\nenum WebhookFilterTypes {\n  FILE_PATH = 'FILE_PATH',\n  COMMIT_MESSAGE = 'COMMIT_MESSAGE',\n  HEAD_REF = 'HEAD_REF',\n  ACTOR_ACCOUNT_ID = 'ACTOR_ACCOUNT_ID',\n  BASE_REF = 'BASE_REF',\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class FilterGroup {\n                                                                                                                                                             \n  public static inEventOf(...actions: EventAction[]): FilterGroup {\n    return new FilterGroup(new Set(actions), []);\n  }\n\n  private readonly actions: Set<EventAction>;\n  private readonly filters: CfnProject.WebhookFilterProperty[];\n\n  private constructor(actions: Set<EventAction>, filters: CfnProject.WebhookFilterProperty[]) {\n    if (actions.size === 0) {\n      throw new Error('A filter group must contain at least one event action');\n    }\n    this.actions = actions;\n    this.filters = filters;\n  }\n\n                                                                                                                                                                                                \n  public andBranchIs(branchName: string): FilterGroup {\n    return this.addHeadBranchFilter(branchName, true);\n  }\n\n                                                                                                                                                                                                    \n  public andBranchIsNot(branchName: string): FilterGroup {\n    return this.addHeadBranchFilter(branchName, false);\n  }\n\n                                                                                                                                                                                                                   \n  public andCommitMessageIs(commitMessage: string): FilterGroup {\n    return this.addCommitMessageFilter(commitMessage, true);\n  }\n\n                                                                                                                                                                                                                       \n  public andCommitMessageIsNot(commitMessage: string): FilterGroup {\n    return this.addCommitMessageFilter(commitMessage, false);\n  }\n\n                                                                                                                                                                                       \n  public andTagIs(tagName: string): FilterGroup {\n    return this.addHeadTagFilter(tagName, true);\n  }\n\n                                                                                                                                                                                           \n  public andTagIsNot(tagName: string): FilterGroup {\n    return this.addHeadTagFilter(tagName, false);\n  }\n\n                                                                                                                                                                                                                         \n  public andHeadRefIs(pattern: string) {\n    return this.addHeadRefFilter(pattern, true);\n  }\n\n                                                                                                                                                                                                                             \n  public andHeadRefIsNot(pattern: string) {\n    return this.addHeadRefFilter(pattern, false);\n  }\n\n                                                                                                                                                                                                    \n  public andActorAccountIs(pattern: string): FilterGroup {\n    return this.addActorAccountId(pattern, true);\n  }\n\n                                                                                                                                                                                                        \n  public andActorAccountIsNot(pattern: string): FilterGroup {\n    return this.addActorAccountId(pattern, false);\n  }\n\n                                                                                                                                                                                                                                                                                                                                      \n  public andBaseBranchIs(branchName: string): FilterGroup {\n    return this.addBaseBranchFilter(branchName, true);\n  }\n\n                                                                                                                                                                                                                                                                                                                                          \n  public andBaseBranchIsNot(branchName: string): FilterGroup {\n    return this.addBaseBranchFilter(branchName, false);\n  }\n\n                                                                                                                                                                                                                                                                                                     \n  public andBaseRefIs(pattern: string): FilterGroup {\n    return this.addBaseRefFilter(pattern, true);\n  }\n\n                                                                                                                                                                                                                                                                                                         \n  public andBaseRefIsNot(pattern: string): FilterGroup {\n    return this.addBaseRefFilter(pattern, false);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n  public andFilePathIs(pattern: string): FilterGroup {\n    return this.addFilePathFilter(pattern, true);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n  public andFilePathIsNot(pattern: string): FilterGroup {\n    return this.addFilePathFilter(pattern, false);\n  }\n\n  /** @internal */\n  public get _actions(): EventAction[] {\n    return set2Array(this.actions);\n  }\n\n  /** @internal */\n  public get _filters(): CfnProject.WebhookFilterProperty[] {\n    return this.filters.slice();\n  }\n\n  /** @internal */\n  public _toJson(): CfnProject.WebhookFilterProperty[] {\n    const eventFilter: CfnProject.WebhookFilterProperty = {\n      type: 'EVENT',\n      pattern: set2Array(this.actions).join(', '),\n    };\n    return [eventFilter].concat(this.filters);\n  }\n\n  private addCommitMessageFilter(commitMessage: string, include: boolean): FilterGroup {\n    return this.addFilter(WebhookFilterTypes.COMMIT_MESSAGE, commitMessage, include);\n  }\n\n  private addHeadBranchFilter(branchName: string, include: boolean): FilterGroup {\n    return this.addHeadRefFilter(`refs/heads/${branchName}`, include);\n  }\n\n  private addHeadTagFilter(tagName: string, include: boolean): FilterGroup {\n    return this.addHeadRefFilter(`refs/tags/${tagName}`, include);\n  }\n\n  private addHeadRefFilter(refName: string, include: boolean) {\n    return this.addFilter(WebhookFilterTypes.HEAD_REF, refName, include);\n  }\n\n  private addActorAccountId(accountId: string, include: boolean) {\n    return this.addFilter(WebhookFilterTypes.ACTOR_ACCOUNT_ID, accountId, include);\n  }\n\n  private addBaseBranchFilter(branchName: string, include: boolean): FilterGroup {\n    return this.addBaseRefFilter(`refs/heads/${branchName}`, include);\n  }\n\n  private addBaseRefFilter(refName: string, include: boolean) {\n    if (this.actions.has(EventAction.PUSH)) {\n      throw new Error('A base reference condition cannot be added if a Group contains a PUSH event action');\n    }\n    return this.addFilter(WebhookFilterTypes.BASE_REF, refName, include);\n  }\n\n  private addFilePathFilter(pattern: string, include: boolean): FilterGroup {\n    return this.addFilter(WebhookFilterTypes.FILE_PATH, pattern, include);\n  }\n\n  private addFilter(type: WebhookFilterTypes, pattern: string, include: boolean) {\n    return new FilterGroup(this.actions, this.filters.concat([{\n      type,\n      pattern,\n      excludeMatchedPattern: include ? undefined : true,\n    }]));\n  }\n}\n\n/**\n * The construction properties common to all third-party build sources that are backed by Git.\n */\ninterface ThirdPartyGitSourceProps extends GitSourceProps {\n                                                                                                     \n  readonly reportBuildStatus?: boolean;\n\n                                                                                                                                                                                                    \n  readonly webhook?: boolean;\n\n                                                                                                                                                                                    \n  readonly webhookTriggersBatchBuild?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                         \n  readonly webhookFilters?: FilterGroup[];\n}\n\n/**\n * A common superclass of all third-party build sources that are backed by Git.\n */\nabstract class ThirdPartyGitSource extends GitSource {\n  public readonly badgeSupported: boolean = true;\n  protected readonly webhookFilters: FilterGroup[];\n  private readonly reportBuildStatus: boolean;\n  private readonly webhook?: boolean;\n  private readonly webhookTriggersBatchBuild?: boolean;\n\n  protected constructor(props: ThirdPartyGitSourceProps) {\n    super(props);\n\n    this.webhook = props.webhook;\n    this.reportBuildStatus = props.reportBuildStatus ?? true;\n    this.webhookFilters = props.webhookFilters || [];\n    this.webhookTriggersBatchBuild = props.webhookTriggersBatchBuild;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    const anyFilterGroupsProvided = this.webhookFilters.length > 0;\n    const webhook = this.webhook ?? (anyFilterGroupsProvided ? true : undefined);\n\n    if (!webhook && anyFilterGroupsProvided) {\n      throw new Error('`webhookFilters` cannot be used when `webhook` is `false`');\n    }\n\n    if (!webhook && this.webhookTriggersBatchBuild) {\n      throw new Error('`webhookTriggersBatchBuild` cannot be used when `webhook` is `false`');\n    }\n\n    const superConfig = super.bind(_scope, project);\n\n    if (this.webhookTriggersBatchBuild) {\n      project.enableBatchBuilds();\n    }\n\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        reportBuildStatus: this.reportBuildStatus,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: webhook === undefined ? undefined : {\n        webhook,\n        buildType: this.webhookTriggersBatchBuild ? 'BUILD_BATCH' : undefined,\n        filterGroups: anyFilterGroupsProvided ? this.webhookFilters.map(fg => fg._toJson()) : undefined,\n      },\n    };\n  }\n}\n\n                                                                \nexport interface CodeCommitSourceProps extends GitSourceProps {\n  readonly repository: codecommit.IRepository;\n}\n\n/**\n * CodeCommit Source definition for a CodeBuild project.\n */\nclass CodeCommitSource extends GitSource {\n  public readonly badgeSupported = true;\n  public readonly type = CODECOMMIT_SOURCE_TYPE;\n  private readonly repo: codecommit.IRepository;\n\n  constructor(props: CodeCommitSourceProps) {\n    super(props);\n    this.repo = props.repository;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    // https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html\n    project.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['codecommit:GitPull'],\n      resources: [this.repo.repositoryArn],\n    }));\n\n    const superConfig = super.bind(_scope, project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.repo.repositoryCloneUrlHttp,\n      },\n      sourceVersion: superConfig.sourceVersion,\n    };\n  }\n}\n\n                                                        \nexport interface S3SourceProps extends SourceProps {\n  readonly bucket: s3.IBucket;\n  readonly path: string;\n\n                                                                                                                         \n  readonly version?: string;\n}\n\n/**\n * S3 bucket definition for a CodeBuild project.\n */\nclass S3Source extends Source {\n  public readonly type = S3_SOURCE_TYPE;\n  private readonly bucket: s3.IBucket;\n  private readonly path: string;\n  private readonly version?: string;\n\n  constructor(props: S3SourceProps) {\n    super(props);\n    this.bucket = props.bucket;\n    this.path = props.path;\n    this.version = props.version;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    this.bucket.grantRead(project, this.path);\n\n    const superConfig = super.bind(_scope, project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: `${this.bucket.bucketName}/${this.path}`,\n      },\n      sourceVersion: this.version,\n    };\n  }\n}\n\n                                                                                               \nexport interface GitHubSourceProps extends ThirdPartyGitSourceProps {\n                                                                                         \n  readonly owner: string;\n\n                                                                                          \n  readonly repo: string;\n}\n\n/**\n * GitHub Source definition for a CodeBuild project.\n */\nclass GitHubSource extends ThirdPartyGitSource {\n  public readonly type = GITHUB_SOURCE_TYPE;\n  private readonly httpsCloneUrl: string;\n\n  constructor(props: GitHubSourceProps) {\n    super(props);\n    this.httpsCloneUrl = `https://github.com/${props.owner}/${props.repo}.git`;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    const superConfig = super.bind(_scope, project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.httpsCloneUrl,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: superConfig.buildTriggers,\n    };\n  }\n}\n\n                                                                      \nexport interface GitHubEnterpriseSourceProps extends ThirdPartyGitSourceProps {\n                                                                                        \n  readonly httpsCloneUrl: string;\n\n                                                                                                         \n  readonly ignoreSslErrors?: boolean;\n}\n\n/**\n * GitHub Enterprise Source definition for a CodeBuild project.\n */\nclass GitHubEnterpriseSource extends ThirdPartyGitSource {\n  public readonly type = GITHUB_ENTERPRISE_SOURCE_TYPE;\n  private readonly httpsCloneUrl: string;\n  private readonly ignoreSslErrors?: boolean;\n\n  constructor(props: GitHubEnterpriseSourceProps) {\n    super(props);\n    this.httpsCloneUrl = props.httpsCloneUrl;\n    this.ignoreSslErrors = props.ignoreSslErrors;\n  }\n\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    if (this.hasCommitMessageFilterAndPrEvent()) {\n      throw new Error('COMMIT_MESSAGE filters cannot be used with GitHub Enterprise Server pull request events');\n    }\n\n    if (this.hasFilePathFilterAndPrEvent()) {\n      throw new Error('FILE_PATH filters cannot be used with GitHub Enterprise Server pull request events');\n    }\n\n    const superConfig = super.bind(_scope, _project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.httpsCloneUrl,\n        insecureSsl: this.ignoreSslErrors,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: superConfig.buildTriggers,\n    };\n  }\n\n  private hasCommitMessageFilterAndPrEvent() {\n    return this.webhookFilters.some(fg => (\n      fg._filters.some(fp => fp.type === WebhookFilterTypes.COMMIT_MESSAGE) &&\n      this.hasPrEvent(fg._actions)));\n  }\n  private hasFilePathFilterAndPrEvent() {\n    return this.webhookFilters.some(fg => (\n      fg._filters.some(fp => fp.type === WebhookFilterTypes.FILE_PATH) &&\n      this.hasPrEvent(fg._actions)));\n  }\n  private hasPrEvent(actions: EventAction[]) {\n    return actions.includes(\n      EventAction.PULL_REQUEST_CREATED ||\n      EventAction.PULL_REQUEST_MERGED ||\n      EventAction.PULL_REQUEST_REOPENED ||\n      EventAction.PULL_REQUEST_UPDATED);\n  }\n}\n\n                                                               \nexport interface BitBucketSourceProps extends ThirdPartyGitSourceProps {\n                                                                                            \n  readonly owner: string;\n\n                                                                                          \n  readonly repo: string;\n}\n\n/**\n * BitBucket Source definition for a CodeBuild project.\n */\nclass BitBucketSource extends ThirdPartyGitSource {\n  public readonly type = BITBUCKET_SOURCE_TYPE;\n  private readonly httpsCloneUrl: any;\n\n  constructor(props: BitBucketSourceProps) {\n    super(props);\n    this.httpsCloneUrl = `https://bitbucket.org/${props.owner}/${props.repo}.git`;\n  }\n\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    // BitBucket sources don't support the PULL_REQUEST_REOPENED event action\n    if (this.anyWebhookFilterContainsPrReopenedEventAction()) {\n      throw new Error('BitBucket sources do not support the PULL_REQUEST_REOPENED webhook event action');\n    }\n\n    const superConfig = super.bind(_scope, _project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.httpsCloneUrl,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: superConfig.buildTriggers,\n    };\n  }\n\n  private anyWebhookFilterContainsPrReopenedEventAction() {\n    return this.webhookFilters.findIndex(fg => {\n      return fg._actions.findIndex(a => a === EventAction.PULL_REQUEST_REOPENED) !== -1;\n    }) !== -1;\n  }\n}\n\nfunction set2Array<T>(set: Set<T>): T[] {\n  const ret: T[] = [];\n  set.forEach(el => ret.push(el));\n  return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
