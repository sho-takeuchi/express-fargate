{
  "version": 3,
  "sources": ["codedeploy.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:03:10.791Z\",\"fingerprint\":\"5I9Td0i3WvvyM2+0mzBXwpegGNqOH2aF53nHNnNE57I=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                             \nexport interface CfnApplicationProps {\n\nn    readonly applicationName?: string;\n\n                                                                                                                                                                                                                                                             \n    readonly computePlatform?: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationName', cdk.validateString)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('computePlatform', cdk.validateString)(properties.computePlatform));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::Application` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::Application` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationPropsValidator(properties).assertSuccess();\n    return {\n        ApplicationName: cdk.stringToCloudFormation(properties.applicationName),\n        ComputePlatform: cdk.stringToCloudFormation(properties.computePlatform),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationProps>();\n    ret.addPropertyResult('applicationName', 'ApplicationName', properties.ApplicationName != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationName) : undefined);\n    ret.addPropertyResult('computePlatform', 'ComputePlatform', properties.ComputePlatform != null ? cfn_parse.FromCloudFormation.getString(properties.ComputePlatform) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApplication extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeDeploy::Application\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplication {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplication(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public applicationName: string | undefined;\n\n                                                                                                                                                                                                                                                             \n    public computePlatform: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationProps = {}) {\n        super(scope, id, { type: CfnApplication.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.applicationName = props.applicationName;\n        this.computePlatform = props.computePlatform;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CodeDeploy::Application\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplication.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationName: this.applicationName,\n            computePlatform: this.computePlatform,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnDeploymentConfigProps {\n\n                                                                                                                                                                                                                                                                                           \n    readonly computePlatform?: string;\n\nn    readonly deploymentConfigName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly minimumHealthyHosts?: CfnDeploymentConfig.MinimumHealthyHostsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    readonly trafficRoutingConfig?: CfnDeploymentConfig.TrafficRoutingConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeploymentConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('computePlatform', cdk.validateString)(properties.computePlatform));\n    errors.collect(cdk.propertyValidator('deploymentConfigName', cdk.validateString)(properties.deploymentConfigName));\n    errors.collect(cdk.propertyValidator('minimumHealthyHosts', CfnDeploymentConfig_MinimumHealthyHostsPropertyValidator)(properties.minimumHealthyHosts));\n    errors.collect(cdk.propertyValidator('trafficRoutingConfig', CfnDeploymentConfig_TrafficRoutingConfigPropertyValidator)(properties.trafficRoutingConfig));\n    return errors.wrap('supplied properties not correct for \"CfnDeploymentConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentConfigPropsValidator(properties).assertSuccess();\n    return {\n        ComputePlatform: cdk.stringToCloudFormation(properties.computePlatform),\n        DeploymentConfigName: cdk.stringToCloudFormation(properties.deploymentConfigName),\n        MinimumHealthyHosts: cfnDeploymentConfigMinimumHealthyHostsPropertyToCloudFormation(properties.minimumHealthyHosts),\n        TrafficRoutingConfig: cfnDeploymentConfigTrafficRoutingConfigPropertyToCloudFormation(properties.trafficRoutingConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentConfigProps>();\n    ret.addPropertyResult('computePlatform', 'ComputePlatform', properties.ComputePlatform != null ? cfn_parse.FromCloudFormation.getString(properties.ComputePlatform) : undefined);\n    ret.addPropertyResult('deploymentConfigName', 'DeploymentConfigName', properties.DeploymentConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentConfigName) : undefined);\n    ret.addPropertyResult('minimumHealthyHosts', 'MinimumHealthyHosts', properties.MinimumHealthyHosts != null ? CfnDeploymentConfigMinimumHealthyHostsPropertyFromCloudFormation(properties.MinimumHealthyHosts) : undefined);\n    ret.addPropertyResult('trafficRoutingConfig', 'TrafficRoutingConfig', properties.TrafficRoutingConfig != null ? CfnDeploymentConfigTrafficRoutingConfigPropertyFromCloudFormation(properties.TrafficRoutingConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDeploymentConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeDeploy::DeploymentConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeploymentConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDeploymentConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDeploymentConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                           \n    public computePlatform: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public deploymentConfigName: string | undefined;\n\nn    public minimumHealthyHosts: CfnDeploymentConfig.MinimumHealthyHostsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public trafficRoutingConfig: CfnDeploymentConfig.TrafficRoutingConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnDeploymentConfigProps = {}) {\n        super(scope, id, { type: CfnDeploymentConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.computePlatform = props.computePlatform;\n        this.deploymentConfigName = props.deploymentConfigName;\n        this.minimumHealthyHosts = props.minimumHealthyHosts;\n        this.trafficRoutingConfig = props.trafficRoutingConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDeploymentConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            computePlatform: this.computePlatform,\n            deploymentConfigName: this.deploymentConfigName,\n            minimumHealthyHosts: this.minimumHealthyHosts,\n            trafficRoutingConfig: this.trafficRoutingConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDeploymentConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDeploymentConfig {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface MinimumHealthyHostsProperty {\nn        readonly type: string;\n                                                                                                                                                                                                                                                                                              \n        readonly value: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MinimumHealthyHostsProperty`\n *\n * @param properties - the TypeScript properties of a `MinimumHealthyHostsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentConfig_MinimumHealthyHostsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateNumber)(properties.value));\n    return errors.wrap('supplied properties not correct for \"MinimumHealthyHostsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts` resource\n *\n * @param properties - the TypeScript properties of a `MinimumHealthyHostsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentConfigMinimumHealthyHostsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentConfig_MinimumHealthyHostsPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.numberToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentConfigMinimumHealthyHostsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentConfig.MinimumHealthyHostsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentConfig.MinimumHealthyHostsProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getNumber(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentConfig {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface TimeBasedCanaryProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly canaryInterval: number;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly canaryPercentage: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TimeBasedCanaryProperty`\n *\n * @param properties - the TypeScript properties of a `TimeBasedCanaryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentConfig_TimeBasedCanaryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('canaryInterval', cdk.requiredValidator)(properties.canaryInterval));\n    errors.collect(cdk.propertyValidator('canaryInterval', cdk.validateNumber)(properties.canaryInterval));\n    errors.collect(cdk.propertyValidator('canaryPercentage', cdk.requiredValidator)(properties.canaryPercentage));\n    errors.collect(cdk.propertyValidator('canaryPercentage', cdk.validateNumber)(properties.canaryPercentage));\n    return errors.wrap('supplied properties not correct for \"TimeBasedCanaryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.TimeBasedCanary` resource\n *\n * @param properties - the TypeScript properties of a `TimeBasedCanaryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.TimeBasedCanary` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentConfigTimeBasedCanaryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentConfig_TimeBasedCanaryPropertyValidator(properties).assertSuccess();\n    return {\n        CanaryInterval: cdk.numberToCloudFormation(properties.canaryInterval),\n        CanaryPercentage: cdk.numberToCloudFormation(properties.canaryPercentage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentConfigTimeBasedCanaryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentConfig.TimeBasedCanaryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentConfig.TimeBasedCanaryProperty>();\n    ret.addPropertyResult('canaryInterval', 'CanaryInterval', cfn_parse.FromCloudFormation.getNumber(properties.CanaryInterval));\n    ret.addPropertyResult('canaryPercentage', 'CanaryPercentage', cfn_parse.FromCloudFormation.getNumber(properties.CanaryPercentage));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentConfig {\nn    export interface TimeBasedLinearProperty {\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly linearInterval: number;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly linearPercentage: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TimeBasedLinearProperty`\n *\n * @param properties - the TypeScript properties of a `TimeBasedLinearProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentConfig_TimeBasedLinearPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('linearInterval', cdk.requiredValidator)(properties.linearInterval));\n    errors.collect(cdk.propertyValidator('linearInterval', cdk.validateNumber)(properties.linearInterval));\n    errors.collect(cdk.propertyValidator('linearPercentage', cdk.requiredValidator)(properties.linearPercentage));\n    errors.collect(cdk.propertyValidator('linearPercentage', cdk.validateNumber)(properties.linearPercentage));\n    return errors.wrap('supplied properties not correct for \"TimeBasedLinearProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.TimeBasedLinear` resource\n *\n * @param properties - the TypeScript properties of a `TimeBasedLinearProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.TimeBasedLinear` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentConfigTimeBasedLinearPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentConfig_TimeBasedLinearPropertyValidator(properties).assertSuccess();\n    return {\n        LinearInterval: cdk.numberToCloudFormation(properties.linearInterval),\n        LinearPercentage: cdk.numberToCloudFormation(properties.linearPercentage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentConfigTimeBasedLinearPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentConfig.TimeBasedLinearProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentConfig.TimeBasedLinearProperty>();\n    ret.addPropertyResult('linearInterval', 'LinearInterval', cfn_parse.FromCloudFormation.getNumber(properties.LinearInterval));\n    ret.addPropertyResult('linearPercentage', 'LinearPercentage', cfn_parse.FromCloudFormation.getNumber(properties.LinearPercentage));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentConfig {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface TrafficRoutingConfigProperty {\nn        readonly timeBasedCanary?: CfnDeploymentConfig.TimeBasedCanaryProperty | cdk.IResolvable;\nn        readonly timeBasedLinear?: CfnDeploymentConfig.TimeBasedLinearProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TrafficRoutingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TrafficRoutingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentConfig_TrafficRoutingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('timeBasedCanary', CfnDeploymentConfig_TimeBasedCanaryPropertyValidator)(properties.timeBasedCanary));\n    errors.collect(cdk.propertyValidator('timeBasedLinear', CfnDeploymentConfig_TimeBasedLinearPropertyValidator)(properties.timeBasedLinear));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"TrafficRoutingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.TrafficRoutingConfig` resource\n *\n * @param properties - the TypeScript properties of a `TrafficRoutingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentConfig.TrafficRoutingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentConfigTrafficRoutingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentConfig_TrafficRoutingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        TimeBasedCanary: cfnDeploymentConfigTimeBasedCanaryPropertyToCloudFormation(properties.timeBasedCanary),\n        TimeBasedLinear: cfnDeploymentConfigTimeBasedLinearPropertyToCloudFormation(properties.timeBasedLinear),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentConfigTrafficRoutingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentConfig.TrafficRoutingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentConfig.TrafficRoutingConfigProperty>();\n    ret.addPropertyResult('timeBasedCanary', 'TimeBasedCanary', properties.TimeBasedCanary != null ? CfnDeploymentConfigTimeBasedCanaryPropertyFromCloudFormation(properties.TimeBasedCanary) : undefined);\n    ret.addPropertyResult('timeBasedLinear', 'TimeBasedLinear', properties.TimeBasedLinear != null ? CfnDeploymentConfigTimeBasedLinearPropertyFromCloudFormation(properties.TimeBasedLinear) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnDeploymentGroupProps {\n\n                                                                                                                                                                                                                                                                                            \n    readonly applicationName: string;\n\nn    readonly serviceRoleArn: string;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly alarmConfiguration?: CfnDeploymentGroup.AlarmConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly autoRollbackConfiguration?: CfnDeploymentGroup.AutoRollbackConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly autoScalingGroups?: string[];\n\n                                                                                                                                                                                                                                                                                             \n    readonly blueGreenDeploymentConfiguration?: CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly deployment?: CfnDeploymentGroup.DeploymentProperty | cdk.IResolvable;\n\nn    readonly deploymentConfigName?: string;\n\nn    readonly deploymentGroupName?: string;\n\nn    readonly deploymentStyle?: CfnDeploymentGroup.DeploymentStyleProperty | cdk.IResolvable;\n\nn    readonly ec2TagFilters?: Array<CfnDeploymentGroup.EC2TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly ec2TagSet?: CfnDeploymentGroup.EC2TagSetProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly ecsServices?: Array<CfnDeploymentGroup.ECSServiceProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly loadBalancerInfo?: CfnDeploymentGroup.LoadBalancerInfoProperty | cdk.IResolvable;\n\nn    readonly onPremisesInstanceTagFilters?: Array<CfnDeploymentGroup.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly onPremisesTagSet?: CfnDeploymentGroup.OnPremisesTagSetProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly triggerConfigurations?: Array<CfnDeploymentGroup.TriggerConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeploymentGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmConfiguration', CfnDeploymentGroup_AlarmConfigurationPropertyValidator)(properties.alarmConfiguration));\n    errors.collect(cdk.propertyValidator('applicationName', cdk.requiredValidator)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('applicationName', cdk.validateString)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('autoRollbackConfiguration', CfnDeploymentGroup_AutoRollbackConfigurationPropertyValidator)(properties.autoRollbackConfiguration));\n    errors.collect(cdk.propertyValidator('autoScalingGroups', cdk.listValidator(cdk.validateString))(properties.autoScalingGroups));\n    errors.collect(cdk.propertyValidator('blueGreenDeploymentConfiguration', CfnDeploymentGroup_BlueGreenDeploymentConfigurationPropertyValidator)(properties.blueGreenDeploymentConfiguration));\n    errors.collect(cdk.propertyValidator('deployment', CfnDeploymentGroup_DeploymentPropertyValidator)(properties.deployment));\n    errors.collect(cdk.propertyValidator('deploymentConfigName', cdk.validateString)(properties.deploymentConfigName));\n    errors.collect(cdk.propertyValidator('deploymentGroupName', cdk.validateString)(properties.deploymentGroupName));\n    errors.collect(cdk.propertyValidator('deploymentStyle', CfnDeploymentGroup_DeploymentStylePropertyValidator)(properties.deploymentStyle));\n    errors.collect(cdk.propertyValidator('ecsServices', cdk.listValidator(CfnDeploymentGroup_ECSServicePropertyValidator))(properties.ecsServices));\n    errors.collect(cdk.propertyValidator('ec2TagFilters', cdk.listValidator(CfnDeploymentGroup_EC2TagFilterPropertyValidator))(properties.ec2TagFilters));\n    errors.collect(cdk.propertyValidator('ec2TagSet', CfnDeploymentGroup_EC2TagSetPropertyValidator)(properties.ec2TagSet));\n    errors.collect(cdk.propertyValidator('loadBalancerInfo', CfnDeploymentGroup_LoadBalancerInfoPropertyValidator)(properties.loadBalancerInfo));\n    errors.collect(cdk.propertyValidator('onPremisesInstanceTagFilters', cdk.listValidator(CfnDeploymentGroup_TagFilterPropertyValidator))(properties.onPremisesInstanceTagFilters));\n    errors.collect(cdk.propertyValidator('onPremisesTagSet', CfnDeploymentGroup_OnPremisesTagSetPropertyValidator)(properties.onPremisesTagSet));\n    errors.collect(cdk.propertyValidator('serviceRoleArn', cdk.requiredValidator)(properties.serviceRoleArn));\n    errors.collect(cdk.propertyValidator('serviceRoleArn', cdk.validateString)(properties.serviceRoleArn));\n    errors.collect(cdk.propertyValidator('triggerConfigurations', cdk.listValidator(CfnDeploymentGroup_TriggerConfigPropertyValidator))(properties.triggerConfigurations));\n    return errors.wrap('supplied properties not correct for \"CfnDeploymentGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeploymentGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroupPropsValidator(properties).assertSuccess();\n    return {\n        ApplicationName: cdk.stringToCloudFormation(properties.applicationName),\n        ServiceRoleArn: cdk.stringToCloudFormation(properties.serviceRoleArn),\n        AlarmConfiguration: cfnDeploymentGroupAlarmConfigurationPropertyToCloudFormation(properties.alarmConfiguration),\n        AutoRollbackConfiguration: cfnDeploymentGroupAutoRollbackConfigurationPropertyToCloudFormation(properties.autoRollbackConfiguration),\n        AutoScalingGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.autoScalingGroups),\n        BlueGreenDeploymentConfiguration: cfnDeploymentGroupBlueGreenDeploymentConfigurationPropertyToCloudFormation(properties.blueGreenDeploymentConfiguration),\n        Deployment: cfnDeploymentGroupDeploymentPropertyToCloudFormation(properties.deployment),\n        DeploymentConfigName: cdk.stringToCloudFormation(properties.deploymentConfigName),\n        DeploymentGroupName: cdk.stringToCloudFormation(properties.deploymentGroupName),\n        DeploymentStyle: cfnDeploymentGroupDeploymentStylePropertyToCloudFormation(properties.deploymentStyle),\n        Ec2TagFilters: cdk.listMapper(cfnDeploymentGroupEC2TagFilterPropertyToCloudFormation)(properties.ec2TagFilters),\n        Ec2TagSet: cfnDeploymentGroupEC2TagSetPropertyToCloudFormation(properties.ec2TagSet),\n        ECSServices: cdk.listMapper(cfnDeploymentGroupECSServicePropertyToCloudFormation)(properties.ecsServices),\n        LoadBalancerInfo: cfnDeploymentGroupLoadBalancerInfoPropertyToCloudFormation(properties.loadBalancerInfo),\n        OnPremisesInstanceTagFilters: cdk.listMapper(cfnDeploymentGroupTagFilterPropertyToCloudFormation)(properties.onPremisesInstanceTagFilters),\n        OnPremisesTagSet: cfnDeploymentGroupOnPremisesTagSetPropertyToCloudFormation(properties.onPremisesTagSet),\n        TriggerConfigurations: cdk.listMapper(cfnDeploymentGroupTriggerConfigPropertyToCloudFormation)(properties.triggerConfigurations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroupProps>();\n    ret.addPropertyResult('applicationName', 'ApplicationName', cfn_parse.FromCloudFormation.getString(properties.ApplicationName));\n    ret.addPropertyResult('serviceRoleArn', 'ServiceRoleArn', cfn_parse.FromCloudFormation.getString(properties.ServiceRoleArn));\n    ret.addPropertyResult('alarmConfiguration', 'AlarmConfiguration', properties.AlarmConfiguration != null ? CfnDeploymentGroupAlarmConfigurationPropertyFromCloudFormation(properties.AlarmConfiguration) : undefined);\n    ret.addPropertyResult('autoRollbackConfiguration', 'AutoRollbackConfiguration', properties.AutoRollbackConfiguration != null ? CfnDeploymentGroupAutoRollbackConfigurationPropertyFromCloudFormation(properties.AutoRollbackConfiguration) : undefined);\n    ret.addPropertyResult('autoScalingGroups', 'AutoScalingGroups', properties.AutoScalingGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AutoScalingGroups) : undefined);\n    ret.addPropertyResult('blueGreenDeploymentConfiguration', 'BlueGreenDeploymentConfiguration', properties.BlueGreenDeploymentConfiguration != null ? CfnDeploymentGroupBlueGreenDeploymentConfigurationPropertyFromCloudFormation(properties.BlueGreenDeploymentConfiguration) : undefined);\n    ret.addPropertyResult('deployment', 'Deployment', properties.Deployment != null ? CfnDeploymentGroupDeploymentPropertyFromCloudFormation(properties.Deployment) : undefined);\n    ret.addPropertyResult('deploymentConfigName', 'DeploymentConfigName', properties.DeploymentConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentConfigName) : undefined);\n    ret.addPropertyResult('deploymentGroupName', 'DeploymentGroupName', properties.DeploymentGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentGroupName) : undefined);\n    ret.addPropertyResult('deploymentStyle', 'DeploymentStyle', properties.DeploymentStyle != null ? CfnDeploymentGroupDeploymentStylePropertyFromCloudFormation(properties.DeploymentStyle) : undefined);\n    ret.addPropertyResult('ec2TagFilters', 'Ec2TagFilters', properties.Ec2TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupEC2TagFilterPropertyFromCloudFormation)(properties.Ec2TagFilters) : undefined);\n    ret.addPropertyResult('ec2TagSet', 'Ec2TagSet', properties.Ec2TagSet != null ? CfnDeploymentGroupEC2TagSetPropertyFromCloudFormation(properties.Ec2TagSet) : undefined);\n    ret.addPropertyResult('ecsServices', 'ECSServices', properties.ECSServices != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupECSServicePropertyFromCloudFormation)(properties.ECSServices) : undefined);\n    ret.addPropertyResult('loadBalancerInfo', 'LoadBalancerInfo', properties.LoadBalancerInfo != null ? CfnDeploymentGroupLoadBalancerInfoPropertyFromCloudFormation(properties.LoadBalancerInfo) : undefined);\n    ret.addPropertyResult('onPremisesInstanceTagFilters', 'OnPremisesInstanceTagFilters', properties.OnPremisesInstanceTagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupTagFilterPropertyFromCloudFormation)(properties.OnPremisesInstanceTagFilters) : undefined);\n    ret.addPropertyResult('onPremisesTagSet', 'OnPremisesTagSet', properties.OnPremisesTagSet != null ? CfnDeploymentGroupOnPremisesTagSetPropertyFromCloudFormation(properties.OnPremisesTagSet) : undefined);\n    ret.addPropertyResult('triggerConfigurations', 'TriggerConfigurations', properties.TriggerConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupTriggerConfigPropertyFromCloudFormation)(properties.TriggerConfigurations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnDeploymentGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeDeploy::DeploymentGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeploymentGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDeploymentGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDeploymentGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                            \n    public applicationName: string;\n\nn    public serviceRoleArn: string;\n\n                                                                                                                                                                                                                                                                                                     \n    public alarmConfiguration: CfnDeploymentGroup.AlarmConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public autoRollbackConfiguration: CfnDeploymentGroup.AutoRollbackConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public autoScalingGroups: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                             \n    public blueGreenDeploymentConfiguration: CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public deployment: CfnDeploymentGroup.DeploymentProperty | cdk.IResolvable | undefined;\n\nn    public deploymentConfigName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public deploymentGroupName: string | undefined;\n\nn    public deploymentStyle: CfnDeploymentGroup.DeploymentStyleProperty | cdk.IResolvable | undefined;\n\nn    public ec2TagFilters: Array<CfnDeploymentGroup.EC2TagFilterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public ec2TagSet: CfnDeploymentGroup.EC2TagSetProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public ecsServices: Array<CfnDeploymentGroup.ECSServiceProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public loadBalancerInfo: CfnDeploymentGroup.LoadBalancerInfoProperty | cdk.IResolvable | undefined;\n\nn    public onPremisesInstanceTagFilters: Array<CfnDeploymentGroup.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public onPremisesTagSet: CfnDeploymentGroup.OnPremisesTagSetProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                      \n    public triggerConfigurations: Array<CfnDeploymentGroup.TriggerConfigProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnDeploymentGroupProps) {\n        super(scope, id, { type: CfnDeploymentGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationName', this);\n        cdk.requireProperty(props, 'serviceRoleArn', this);\n\n        this.applicationName = props.applicationName;\n        this.serviceRoleArn = props.serviceRoleArn;\n        this.alarmConfiguration = props.alarmConfiguration;\n        this.autoRollbackConfiguration = props.autoRollbackConfiguration;\n        this.autoScalingGroups = props.autoScalingGroups;\n        this.blueGreenDeploymentConfiguration = props.blueGreenDeploymentConfiguration;\n        this.deployment = props.deployment;\n        this.deploymentConfigName = props.deploymentConfigName;\n        this.deploymentGroupName = props.deploymentGroupName;\n        this.deploymentStyle = props.deploymentStyle;\n        this.ec2TagFilters = props.ec2TagFilters;\n        this.ec2TagSet = props.ec2TagSet;\n        this.ecsServices = props.ecsServices;\n        this.loadBalancerInfo = props.loadBalancerInfo;\n        this.onPremisesInstanceTagFilters = props.onPremisesInstanceTagFilters;\n        this.onPremisesTagSet = props.onPremisesTagSet;\n        this.triggerConfigurations = props.triggerConfigurations;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDeploymentGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationName: this.applicationName,\n            serviceRoleArn: this.serviceRoleArn,\n            alarmConfiguration: this.alarmConfiguration,\n            autoRollbackConfiguration: this.autoRollbackConfiguration,\n            autoScalingGroups: this.autoScalingGroups,\n            blueGreenDeploymentConfiguration: this.blueGreenDeploymentConfiguration,\n            deployment: this.deployment,\n            deploymentConfigName: this.deploymentConfigName,\n            deploymentGroupName: this.deploymentGroupName,\n            deploymentStyle: this.deploymentStyle,\n            ec2TagFilters: this.ec2TagFilters,\n            ec2TagSet: this.ec2TagSet,\n            ecsServices: this.ecsServices,\n            loadBalancerInfo: this.loadBalancerInfo,\n            onPremisesInstanceTagFilters: this.onPremisesInstanceTagFilters,\n            onPremisesTagSet: this.onPremisesTagSet,\n            triggerConfigurations: this.triggerConfigurations,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDeploymentGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface AlarmProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AlarmProperty`\n *\n * @param properties - the TypeScript properties of a `AlarmProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_AlarmPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"AlarmProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.Alarm` resource\n *\n * @param properties - the TypeScript properties of a `AlarmProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.Alarm` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupAlarmPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_AlarmPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupAlarmPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.AlarmProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.AlarmProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface AlarmConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly alarms?: Array<CfnDeploymentGroup.AlarmProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                              \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly ignorePollAlarmFailure?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AlarmConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AlarmConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_AlarmConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarms', cdk.listValidator(CfnDeploymentGroup_AlarmPropertyValidator))(properties.alarms));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('ignorePollAlarmFailure', cdk.validateBoolean)(properties.ignorePollAlarmFailure));\n    return errors.wrap('supplied properties not correct for \"AlarmConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AlarmConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupAlarmConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_AlarmConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Alarms: cdk.listMapper(cfnDeploymentGroupAlarmPropertyToCloudFormation)(properties.alarms),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        IgnorePollAlarmFailure: cdk.booleanToCloudFormation(properties.ignorePollAlarmFailure),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupAlarmConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.AlarmConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.AlarmConfigurationProperty>();\n    ret.addPropertyResult('alarms', 'Alarms', properties.Alarms != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupAlarmPropertyFromCloudFormation)(properties.Alarms) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('ignorePollAlarmFailure', 'IgnorePollAlarmFailure', properties.IgnorePollAlarmFailure != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePollAlarmFailure) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface AutoRollbackConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly events?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoRollbackConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AutoRollbackConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_AutoRollbackConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('events', cdk.listValidator(cdk.validateString))(properties.events));\n    return errors.wrap('supplied properties not correct for \"AutoRollbackConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AutoRollbackConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupAutoRollbackConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_AutoRollbackConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        Events: cdk.listMapper(cdk.stringToCloudFormation)(properties.events),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupAutoRollbackConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.AutoRollbackConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.AutoRollbackConfigurationProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('events', 'Events', properties.Events != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Events) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                 \n    export interface BlueGreenDeploymentConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly deploymentReadyOption?: CfnDeploymentGroup.DeploymentReadyOptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly greenFleetProvisioningOption?: CfnDeploymentGroup.GreenFleetProvisioningOptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly terminateBlueInstancesOnDeploymentSuccess?: CfnDeploymentGroup.BlueInstanceTerminationOptionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlueGreenDeploymentConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `BlueGreenDeploymentConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_BlueGreenDeploymentConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentReadyOption', CfnDeploymentGroup_DeploymentReadyOptionPropertyValidator)(properties.deploymentReadyOption));\n    errors.collect(cdk.propertyValidator('greenFleetProvisioningOption', CfnDeploymentGroup_GreenFleetProvisioningOptionPropertyValidator)(properties.greenFleetProvisioningOption));\n    errors.collect(cdk.propertyValidator('terminateBlueInstancesOnDeploymentSuccess', CfnDeploymentGroup_BlueInstanceTerminationOptionPropertyValidator)(properties.terminateBlueInstancesOnDeploymentSuccess));\n    return errors.wrap('supplied properties not correct for \"BlueGreenDeploymentConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.BlueGreenDeploymentConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `BlueGreenDeploymentConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.BlueGreenDeploymentConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupBlueGreenDeploymentConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_BlueGreenDeploymentConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DeploymentReadyOption: cfnDeploymentGroupDeploymentReadyOptionPropertyToCloudFormation(properties.deploymentReadyOption),\n        GreenFleetProvisioningOption: cfnDeploymentGroupGreenFleetProvisioningOptionPropertyToCloudFormation(properties.greenFleetProvisioningOption),\n        TerminateBlueInstancesOnDeploymentSuccess: cfnDeploymentGroupBlueInstanceTerminationOptionPropertyToCloudFormation(properties.terminateBlueInstancesOnDeploymentSuccess),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupBlueGreenDeploymentConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty>();\n    ret.addPropertyResult('deploymentReadyOption', 'DeploymentReadyOption', properties.DeploymentReadyOption != null ? CfnDeploymentGroupDeploymentReadyOptionPropertyFromCloudFormation(properties.DeploymentReadyOption) : undefined);\n    ret.addPropertyResult('greenFleetProvisioningOption', 'GreenFleetProvisioningOption', properties.GreenFleetProvisioningOption != null ? CfnDeploymentGroupGreenFleetProvisioningOptionPropertyFromCloudFormation(properties.GreenFleetProvisioningOption) : undefined);\n    ret.addPropertyResult('terminateBlueInstancesOnDeploymentSuccess', 'TerminateBlueInstancesOnDeploymentSuccess', properties.TerminateBlueInstancesOnDeploymentSuccess != null ? CfnDeploymentGroupBlueInstanceTerminationOptionPropertyFromCloudFormation(properties.TerminateBlueInstancesOnDeploymentSuccess) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface BlueInstanceTerminationOptionProperty {\nn        readonly action?: string;\nn        readonly terminationWaitTimeInMinutes?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlueInstanceTerminationOptionProperty`\n *\n * @param properties - the TypeScript properties of a `BlueInstanceTerminationOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_BlueInstanceTerminationOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('terminationWaitTimeInMinutes', cdk.validateNumber)(properties.terminationWaitTimeInMinutes));\n    return errors.wrap('supplied properties not correct for \"BlueInstanceTerminationOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.BlueInstanceTerminationOption` resource\n *\n * @param properties - the TypeScript properties of a `BlueInstanceTerminationOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.BlueInstanceTerminationOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupBlueInstanceTerminationOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_BlueInstanceTerminationOptionPropertyValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n        TerminationWaitTimeInMinutes: cdk.numberToCloudFormation(properties.terminationWaitTimeInMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupBlueInstanceTerminationOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.BlueInstanceTerminationOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.BlueInstanceTerminationOptionProperty>();\n    ret.addPropertyResult('action', 'Action', properties.Action != null ? cfn_parse.FromCloudFormation.getString(properties.Action) : undefined);\n    ret.addPropertyResult('terminationWaitTimeInMinutes', 'TerminationWaitTimeInMinutes', properties.TerminationWaitTimeInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationWaitTimeInMinutes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface DeploymentProperty {\n                                                                                                                                                                                                                                                                                       \n        readonly description?: string;\nn        readonly ignoreApplicationStopFailures?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly revision: CfnDeploymentGroup.RevisionLocationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_DeploymentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('ignoreApplicationStopFailures', cdk.validateBoolean)(properties.ignoreApplicationStopFailures));\n    errors.collect(cdk.propertyValidator('revision', cdk.requiredValidator)(properties.revision));\n    errors.collect(cdk.propertyValidator('revision', CfnDeploymentGroup_RevisionLocationPropertyValidator)(properties.revision));\n    return errors.wrap('supplied properties not correct for \"DeploymentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.Deployment` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.Deployment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupDeploymentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_DeploymentPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        IgnoreApplicationStopFailures: cdk.booleanToCloudFormation(properties.ignoreApplicationStopFailures),\n        Revision: cfnDeploymentGroupRevisionLocationPropertyToCloudFormation(properties.revision),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupDeploymentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.DeploymentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.DeploymentProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('ignoreApplicationStopFailures', 'IgnoreApplicationStopFailures', properties.IgnoreApplicationStopFailures != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnoreApplicationStopFailures) : undefined);\n    ret.addPropertyResult('revision', 'Revision', CfnDeploymentGroupRevisionLocationPropertyFromCloudFormation(properties.Revision));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface DeploymentReadyOptionProperty {\nn        readonly actionOnTimeout?: string;\nn        readonly waitTimeInMinutes?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentReadyOptionProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentReadyOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_DeploymentReadyOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actionOnTimeout', cdk.validateString)(properties.actionOnTimeout));\n    errors.collect(cdk.propertyValidator('waitTimeInMinutes', cdk.validateNumber)(properties.waitTimeInMinutes));\n    return errors.wrap('supplied properties not correct for \"DeploymentReadyOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.DeploymentReadyOption` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentReadyOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.DeploymentReadyOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupDeploymentReadyOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_DeploymentReadyOptionPropertyValidator(properties).assertSuccess();\n    return {\n        ActionOnTimeout: cdk.stringToCloudFormation(properties.actionOnTimeout),\n        WaitTimeInMinutes: cdk.numberToCloudFormation(properties.waitTimeInMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupDeploymentReadyOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.DeploymentReadyOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.DeploymentReadyOptionProperty>();\n    ret.addPropertyResult('actionOnTimeout', 'ActionOnTimeout', properties.ActionOnTimeout != null ? cfn_parse.FromCloudFormation.getString(properties.ActionOnTimeout) : undefined);\n    ret.addPropertyResult('waitTimeInMinutes', 'WaitTimeInMinutes', properties.WaitTimeInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.WaitTimeInMinutes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface DeploymentStyleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly deploymentOption?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly deploymentType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentStyleProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_DeploymentStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentOption', cdk.validateString)(properties.deploymentOption));\n    errors.collect(cdk.propertyValidator('deploymentType', cdk.validateString)(properties.deploymentType));\n    return errors.wrap('supplied properties not correct for \"DeploymentStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.DeploymentStyle` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.DeploymentStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupDeploymentStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_DeploymentStylePropertyValidator(properties).assertSuccess();\n    return {\n        DeploymentOption: cdk.stringToCloudFormation(properties.deploymentOption),\n        DeploymentType: cdk.stringToCloudFormation(properties.deploymentType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupDeploymentStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.DeploymentStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.DeploymentStyleProperty>();\n    ret.addPropertyResult('deploymentOption', 'DeploymentOption', properties.DeploymentOption != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentOption) : undefined);\n    ret.addPropertyResult('deploymentType', 'DeploymentType', properties.DeploymentType != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface EC2TagFilterProperty {\n                                                                                                                                                                                                                                                            \n        readonly key?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly type?: string;\n                                                                                                                                                                                                                                                                \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EC2TagFilterProperty`\n *\n * @param properties - the TypeScript properties of a `EC2TagFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_EC2TagFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"EC2TagFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.EC2TagFilter` resource\n *\n * @param properties - the TypeScript properties of a `EC2TagFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.EC2TagFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupEC2TagFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_EC2TagFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupEC2TagFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.EC2TagFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.EC2TagFilterProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface EC2TagSetProperty {\nn        readonly ec2TagSetList?: Array<CfnDeploymentGroup.EC2TagSetListObjectProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EC2TagSetProperty`\n *\n * @param properties - the TypeScript properties of a `EC2TagSetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_EC2TagSetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ec2TagSetList', cdk.listValidator(CfnDeploymentGroup_EC2TagSetListObjectPropertyValidator))(properties.ec2TagSetList));\n    return errors.wrap('supplied properties not correct for \"EC2TagSetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.EC2TagSet` resource\n *\n * @param properties - the TypeScript properties of a `EC2TagSetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.EC2TagSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupEC2TagSetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_EC2TagSetPropertyValidator(properties).assertSuccess();\n    return {\n        Ec2TagSetList: cdk.listMapper(cfnDeploymentGroupEC2TagSetListObjectPropertyToCloudFormation)(properties.ec2TagSetList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupEC2TagSetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.EC2TagSetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.EC2TagSetProperty>();\n    ret.addPropertyResult('ec2TagSetList', 'Ec2TagSetList', properties.Ec2TagSetList != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupEC2TagSetListObjectPropertyFromCloudFormation)(properties.Ec2TagSetList) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface EC2TagSetListObjectProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly ec2TagGroup?: Array<CfnDeploymentGroup.EC2TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EC2TagSetListObjectProperty`\n *\n * @param properties - the TypeScript properties of a `EC2TagSetListObjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_EC2TagSetListObjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ec2TagGroup', cdk.listValidator(CfnDeploymentGroup_EC2TagFilterPropertyValidator))(properties.ec2TagGroup));\n    return errors.wrap('supplied properties not correct for \"EC2TagSetListObjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject` resource\n *\n * @param properties - the TypeScript properties of a `EC2TagSetListObjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupEC2TagSetListObjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_EC2TagSetListObjectPropertyValidator(properties).assertSuccess();\n    return {\n        Ec2TagGroup: cdk.listMapper(cfnDeploymentGroupEC2TagFilterPropertyToCloudFormation)(properties.ec2TagGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupEC2TagSetListObjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.EC2TagSetListObjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.EC2TagSetListObjectProperty>();\n    ret.addPropertyResult('ec2TagGroup', 'Ec2TagGroup', properties.Ec2TagGroup != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupEC2TagFilterPropertyFromCloudFormation)(properties.Ec2TagGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                              \n    export interface ECSServiceProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly clusterName: string;\n                                                                                                                                                                                                                                                                                       \n        readonly serviceName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ECSServiceProperty`\n *\n * @param properties - the TypeScript properties of a `ECSServiceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_ECSServicePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterName', cdk.requiredValidator)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.requiredValidator)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    return errors.wrap('supplied properties not correct for \"ECSServiceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.ECSService` resource\n *\n * @param properties - the TypeScript properties of a `ECSServiceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.ECSService` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupECSServicePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_ECSServicePropertyValidator(properties).assertSuccess();\n    return {\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupECSServicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.ECSServiceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.ECSServiceProperty>();\n    ret.addPropertyResult('clusterName', 'ClusterName', cfn_parse.FromCloudFormation.getString(properties.ClusterName));\n    ret.addPropertyResult('serviceName', 'ServiceName', cfn_parse.FromCloudFormation.getString(properties.ServiceName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface ELBInfoProperty {\nn        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ELBInfoProperty`\n *\n * @param properties - the TypeScript properties of a `ELBInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_ELBInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"ELBInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.ELBInfo` resource\n *\n * @param properties - the TypeScript properties of a `ELBInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.ELBInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupELBInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_ELBInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupELBInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.ELBInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.ELBInfoProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface GitHubLocationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly commitId: string;\nn        readonly repository: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GitHubLocationProperty`\n *\n * @param properties - the TypeScript properties of a `GitHubLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_GitHubLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('commitId', cdk.requiredValidator)(properties.commitId));\n    errors.collect(cdk.propertyValidator('commitId', cdk.validateString)(properties.commitId));\n    errors.collect(cdk.propertyValidator('repository', cdk.requiredValidator)(properties.repository));\n    errors.collect(cdk.propertyValidator('repository', cdk.validateString)(properties.repository));\n    return errors.wrap('supplied properties not correct for \"GitHubLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.GitHubLocation` resource\n *\n * @param properties - the TypeScript properties of a `GitHubLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.GitHubLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupGitHubLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_GitHubLocationPropertyValidator(properties).assertSuccess();\n    return {\n        CommitId: cdk.stringToCloudFormation(properties.commitId),\n        Repository: cdk.stringToCloudFormation(properties.repository),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupGitHubLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.GitHubLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.GitHubLocationProperty>();\n    ret.addPropertyResult('commitId', 'CommitId', cfn_parse.FromCloudFormation.getString(properties.CommitId));\n    ret.addPropertyResult('repository', 'Repository', cfn_parse.FromCloudFormation.getString(properties.Repository));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                                            \n    export interface GreenFleetProvisioningOptionProperty {\nn        readonly action?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GreenFleetProvisioningOptionProperty`\n *\n * @param properties - the TypeScript properties of a `GreenFleetProvisioningOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_GreenFleetProvisioningOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    return errors.wrap('supplied properties not correct for \"GreenFleetProvisioningOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.GreenFleetProvisioningOption` resource\n *\n * @param properties - the TypeScript properties of a `GreenFleetProvisioningOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.GreenFleetProvisioningOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupGreenFleetProvisioningOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_GreenFleetProvisioningOptionPropertyValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupGreenFleetProvisioningOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.GreenFleetProvisioningOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.GreenFleetProvisioningOptionProperty>();\n    ret.addPropertyResult('action', 'Action', properties.Action != null ? cfn_parse.FromCloudFormation.getString(properties.Action) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface LoadBalancerInfoProperty {\nn        readonly elbInfoList?: Array<CfnDeploymentGroup.ELBInfoProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly targetGroupInfoList?: Array<CfnDeploymentGroup.TargetGroupInfoProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoadBalancerInfoProperty`\n *\n * @param properties - the TypeScript properties of a `LoadBalancerInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_LoadBalancerInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('elbInfoList', cdk.listValidator(CfnDeploymentGroup_ELBInfoPropertyValidator))(properties.elbInfoList));\n    errors.collect(cdk.propertyValidator('targetGroupInfoList', cdk.listValidator(CfnDeploymentGroup_TargetGroupInfoPropertyValidator))(properties.targetGroupInfoList));\n    return errors.wrap('supplied properties not correct for \"LoadBalancerInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo` resource\n *\n * @param properties - the TypeScript properties of a `LoadBalancerInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupLoadBalancerInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_LoadBalancerInfoPropertyValidator(properties).assertSuccess();\n    return {\n        ElbInfoList: cdk.listMapper(cfnDeploymentGroupELBInfoPropertyToCloudFormation)(properties.elbInfoList),\n        TargetGroupInfoList: cdk.listMapper(cfnDeploymentGroupTargetGroupInfoPropertyToCloudFormation)(properties.targetGroupInfoList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupLoadBalancerInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.LoadBalancerInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.LoadBalancerInfoProperty>();\n    ret.addPropertyResult('elbInfoList', 'ElbInfoList', properties.ElbInfoList != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupELBInfoPropertyFromCloudFormation)(properties.ElbInfoList) : undefined);\n    ret.addPropertyResult('targetGroupInfoList', 'TargetGroupInfoList', properties.TargetGroupInfoList != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupTargetGroupInfoPropertyFromCloudFormation)(properties.TargetGroupInfoList) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface OnPremisesTagSetProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly onPremisesTagSetList?: Array<CfnDeploymentGroup.OnPremisesTagSetListObjectProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnPremisesTagSetProperty`\n *\n * @param properties - the TypeScript properties of a `OnPremisesTagSetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_OnPremisesTagSetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('onPremisesTagSetList', cdk.listValidator(CfnDeploymentGroup_OnPremisesTagSetListObjectPropertyValidator))(properties.onPremisesTagSetList));\n    return errors.wrap('supplied properties not correct for \"OnPremisesTagSetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet` resource\n *\n * @param properties - the TypeScript properties of a `OnPremisesTagSetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupOnPremisesTagSetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_OnPremisesTagSetPropertyValidator(properties).assertSuccess();\n    return {\n        OnPremisesTagSetList: cdk.listMapper(cfnDeploymentGroupOnPremisesTagSetListObjectPropertyToCloudFormation)(properties.onPremisesTagSetList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupOnPremisesTagSetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.OnPremisesTagSetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.OnPremisesTagSetProperty>();\n    ret.addPropertyResult('onPremisesTagSetList', 'OnPremisesTagSetList', properties.OnPremisesTagSetList != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupOnPremisesTagSetListObjectPropertyFromCloudFormation)(properties.OnPremisesTagSetList) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface OnPremisesTagSetListObjectProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly onPremisesTagGroup?: Array<CfnDeploymentGroup.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnPremisesTagSetListObjectProperty`\n *\n * @param properties - the TypeScript properties of a `OnPremisesTagSetListObjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_OnPremisesTagSetListObjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('onPremisesTagGroup', cdk.listValidator(CfnDeploymentGroup_TagFilterPropertyValidator))(properties.onPremisesTagGroup));\n    return errors.wrap('supplied properties not correct for \"OnPremisesTagSetListObjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject` resource\n *\n * @param properties - the TypeScript properties of a `OnPremisesTagSetListObjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupOnPremisesTagSetListObjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_OnPremisesTagSetListObjectPropertyValidator(properties).assertSuccess();\n    return {\n        OnPremisesTagGroup: cdk.listMapper(cfnDeploymentGroupTagFilterPropertyToCloudFormation)(properties.onPremisesTagGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupOnPremisesTagSetListObjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.OnPremisesTagSetListObjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.OnPremisesTagSetListObjectProperty>();\n    ret.addPropertyResult('onPremisesTagGroup', 'OnPremisesTagGroup', properties.OnPremisesTagGroup != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentGroupTagFilterPropertyFromCloudFormation)(properties.OnPremisesTagGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                                         \n    export interface RevisionLocationProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly gitHubLocation?: CfnDeploymentGroup.GitHubLocationProperty | cdk.IResolvable;\nn        readonly revisionType?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly s3Location?: CfnDeploymentGroup.S3LocationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RevisionLocationProperty`\n *\n * @param properties - the TypeScript properties of a `RevisionLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_RevisionLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gitHubLocation', CfnDeploymentGroup_GitHubLocationPropertyValidator)(properties.gitHubLocation));\n    errors.collect(cdk.propertyValidator('revisionType', cdk.validateString)(properties.revisionType));\n    errors.collect(cdk.propertyValidator('s3Location', CfnDeploymentGroup_S3LocationPropertyValidator)(properties.s3Location));\n    return errors.wrap('supplied properties not correct for \"RevisionLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.RevisionLocation` resource\n *\n * @param properties - the TypeScript properties of a `RevisionLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.RevisionLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupRevisionLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_RevisionLocationPropertyValidator(properties).assertSuccess();\n    return {\n        GitHubLocation: cfnDeploymentGroupGitHubLocationPropertyToCloudFormation(properties.gitHubLocation),\n        RevisionType: cdk.stringToCloudFormation(properties.revisionType),\n        S3Location: cfnDeploymentGroupS3LocationPropertyToCloudFormation(properties.s3Location),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupRevisionLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.RevisionLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.RevisionLocationProperty>();\n    ret.addPropertyResult('gitHubLocation', 'GitHubLocation', properties.GitHubLocation != null ? CfnDeploymentGroupGitHubLocationPropertyFromCloudFormation(properties.GitHubLocation) : undefined);\n    ret.addPropertyResult('revisionType', 'RevisionType', properties.RevisionType != null ? cfn_parse.FromCloudFormation.getString(properties.RevisionType) : undefined);\n    ret.addPropertyResult('s3Location', 'S3Location', properties.S3Location != null ? CfnDeploymentGroupS3LocationPropertyFromCloudFormation(properties.S3Location) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly bucket: string;\nn        readonly bundleType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly eTag?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly key: string;\nn        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bundleType', cdk.validateString)(properties.bundleType));\n    errors.collect(cdk.propertyValidator('eTag', cdk.validateString)(properties.eTag));\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        BundleType: cdk.stringToCloudFormation(properties.bundleType),\n        ETag: cdk.stringToCloudFormation(properties.eTag),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.S3LocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('bundleType', 'BundleType', properties.BundleType != null ? cfn_parse.FromCloudFormation.getString(properties.BundleType) : undefined);\n    ret.addPropertyResult('eTag', 'ETag', properties.ETag != null ? cfn_parse.FromCloudFormation.getString(properties.ETag) : undefined);\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface TagFilterProperty {\n                                                                                                                                                                                                                                                                           \n        readonly key?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly type?: string;\n                                                                                                                                                                                                                                                                               \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagFilterProperty`\n *\n * @param properties - the TypeScript properties of a `TagFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_TagFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.TagFilter` resource\n *\n * @param properties - the TypeScript properties of a `TagFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.TagFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupTagFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_TagFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupTagFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.TagFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.TagFilterProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\nn    export interface TargetGroupInfoProperty {\nn        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetGroupInfoProperty`\n *\n * @param properties - the TypeScript properties of a `TargetGroupInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_TargetGroupInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"TargetGroupInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo` resource\n *\n * @param properties - the TypeScript properties of a `TargetGroupInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupTargetGroupInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_TargetGroupInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupTargetGroupInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.TargetGroupInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.TargetGroupInfoProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDeploymentGroup {\n                                                                                                                                                                                                                                                                                        \n    export interface TriggerConfigProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly triggerEvents?: string[];\n                                                                                                                                                                                                                                                                                        \n        readonly triggerName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly triggerTargetArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TriggerConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TriggerConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeploymentGroup_TriggerConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('triggerEvents', cdk.listValidator(cdk.validateString))(properties.triggerEvents));\n    errors.collect(cdk.propertyValidator('triggerName', cdk.validateString)(properties.triggerName));\n    errors.collect(cdk.propertyValidator('triggerTargetArn', cdk.validateString)(properties.triggerTargetArn));\n    return errors.wrap('supplied properties not correct for \"TriggerConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.TriggerConfig` resource\n *\n * @param properties - the TypeScript properties of a `TriggerConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeDeploy::DeploymentGroup.TriggerConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeploymentGroupTriggerConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeploymentGroup_TriggerConfigPropertyValidator(properties).assertSuccess();\n    return {\n        TriggerEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.triggerEvents),\n        TriggerName: cdk.stringToCloudFormation(properties.triggerName),\n        TriggerTargetArn: cdk.stringToCloudFormation(properties.triggerTargetArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeploymentGroupTriggerConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeploymentGroup.TriggerConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeploymentGroup.TriggerConfigProperty>();\n    ret.addPropertyResult('triggerEvents', 'TriggerEvents', properties.TriggerEvents != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TriggerEvents) : undefined);\n    ret.addPropertyResult('triggerName', 'TriggerName', properties.TriggerName != null ? cfn_parse.FromCloudFormation.getString(properties.TriggerName) : undefined);\n    ret.addPropertyResult('triggerTargetArn', 'TriggerTargetArn', properties.TriggerTargetArn != null ? cfn_parse.FromCloudFormation.getString(properties.TriggerTargetArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
