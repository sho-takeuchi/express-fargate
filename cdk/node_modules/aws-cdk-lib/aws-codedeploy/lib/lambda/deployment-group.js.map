{
  "version": 3,
  "sources": ["deployment-group.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { CfnDeploymentGroup } from '../codedeploy.generated';\nimport { AutoRollbackConfig } from '../rollback-config';\nimport { arnForDeploymentGroup, renderAlarmConfiguration, renderAutoRollbackConfiguration } from '../utils';\nimport { ILambdaApplication, LambdaApplication } from './application';\nimport { ILambdaDeploymentConfig, LambdaDeploymentConfig } from './deployment-config';\n\n                                                    \nexport interface ILambdaDeploymentGroup extends cdk.IResource {\n                                                                                                          \n  readonly application: ILambdaApplication;\n\n                                                                                      \n  readonly deploymentGroupName: string;\n\n                                                                  \n  readonly deploymentGroupArn: string;\n\n                                                              \n  readonly deploymentConfig: ILambdaDeploymentConfig;\n}\n\n                                                                     \nexport interface LambdaDeploymentGroupProps {\n                                                                                                                                                            \n  readonly application?: ILambdaApplication;\n\n                                                                                                                                                \n  readonly deploymentGroupName?: string;\n\n                                                                                                                                             \n  readonly deploymentConfig?: ILambdaDeploymentConfig;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly alarms?: cloudwatch.IAlarm[];\n\n                                                                                                            \n  readonly role?: iam.IRole;\n\n                                                                                                                                                                                                                                       \n  readonly alias: lambda.Alias;\n\n                                                                                                     \n  readonly preHook?: lambda.IFunction;\n\n                                                                                                    \n  readonly postHook?: lambda.IFunction;\n\n                                                                                                                                    \n  readonly ignorePollAlarmsFailure?: boolean;\n\n                                                                                                                            \n  readonly autoRollback?: AutoRollbackConfig;\n}\n\n                                                     \nexport class LambdaDeploymentGroup extends cdk.Resource implements ILambdaDeploymentGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                  \n  public static fromLambdaDeploymentGroupAttributes(\n    scope: Construct,\n    id: string,\n    attrs: LambdaDeploymentGroupAttributes): ILambdaDeploymentGroup {\n    return new ImportedLambdaDeploymentGroup(scope, id, attrs);\n  }\n\n  public readonly application: ILambdaApplication;\n  public readonly deploymentGroupName: string;\n  public readonly deploymentGroupArn: string;\n  public readonly deploymentConfig: ILambdaDeploymentConfig;\n  public readonly role: iam.IRole;\n\n  private readonly alarms: cloudwatch.IAlarm[];\n  private preHook?: lambda.IFunction;\n  private postHook?: lambda.IFunction;\n\n  constructor(scope: Construct, id: string, props: LambdaDeploymentGroupProps) {\n    super(scope, id, {\n      physicalName: props.deploymentGroupName,\n    });\n\n    this.application = props.application || new LambdaApplication(this, 'Application');\n    this.alarms = props.alarms || [];\n\n    this.role = props.role || new iam.Role(this, 'ServiceRole', {\n      assumedBy: new iam.ServicePrincipal('codedeploy.amazonaws.com'),\n    });\n\n    this.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSCodeDeployRoleForLambdaLimited'));\n    this.deploymentConfig = props.deploymentConfig || LambdaDeploymentConfig.CANARY_10PERCENT_5MINUTES;\n\n    const resource = new CfnDeploymentGroup(this, 'Resource', {\n      applicationName: this.application.applicationName,\n      serviceRoleArn: this.role.roleArn,\n      deploymentGroupName: this.physicalName,\n      deploymentConfigName: this.deploymentConfig.deploymentConfigName,\n      deploymentStyle: {\n        deploymentType: 'BLUE_GREEN',\n        deploymentOption: 'WITH_TRAFFIC_CONTROL',\n      },\n      alarmConfiguration: cdk.Lazy.any({ produce: () => renderAlarmConfiguration(this.alarms, props.ignorePollAlarmsFailure) }),\n      autoRollbackConfiguration: cdk.Lazy.any({ produce: () => renderAutoRollbackConfiguration(this.alarms, props.autoRollback) }),\n    });\n\n    this.deploymentGroupName = this.getResourceNameAttribute(resource.ref);\n    this.deploymentGroupArn = this.getResourceArnAttribute(arnForDeploymentGroup(this.application.applicationName, resource.ref), {\n      service: 'codedeploy',\n      resource: 'deploymentgroup',\n      resourceName: `${this.application.applicationName}/${this.physicalName}`,\n      arnFormat: cdk.ArnFormat.COLON_RESOURCE_NAME,\n    });\n\n    if (props.preHook) {\n      this.addPreHook(props.preHook);\n    }\n    if (props.postHook) {\n      this.addPostHook(props.postHook);\n    }\n\n    (props.alias.node.defaultChild as lambda.CfnAlias).cfnOptions.updatePolicy = {\n      codeDeployLambdaAliasUpdate: {\n        applicationName: this.application.applicationName,\n        deploymentGroupName: resource.ref,\n        beforeAllowTrafficHook: cdk.Lazy.string({ produce: () => this.preHook && this.preHook.functionName }),\n        afterAllowTrafficHook: cdk.Lazy.string({ produce: () => this.postHook && this.postHook.functionName }),\n      },\n    };\n\n    // If the deployment config is a construct, add a dependency to ensure the deployment config\n    // is created before the deployment group is.\n    if (this.deploymentConfig instanceof Construct) {\n      this.node.addDependency(this.deploymentConfig);\n    }\n  }\n\n                                                                                                                                                    \n  public addAlarm(alarm: cloudwatch.IAlarm): void {\n    this.alarms.push(alarm);\n  }\n\n                                                                                                                                                                                                      \n  public addPreHook(preHook: lambda.IFunction): void {\n    if (this.preHook !== undefined) {\n      throw new Error('A pre-hook function is already defined for this deployment group');\n    }\n    this.preHook = preHook;\n    this.grantPutLifecycleEventHookExecutionStatus(this.preHook);\n    this.preHook.grantInvoke(this.role);\n  }\n\n                                                                                                                                                                                                            \n  public addPostHook(postHook: lambda.IFunction): void {\n    if (this.postHook !== undefined) {\n      throw new Error('A post-hook function is already defined for this deployment group');\n    }\n    this.postHook = postHook;\n    this.grantPutLifecycleEventHookExecutionStatus(this.postHook);\n    this.postHook.grantInvoke(this.role);\n  }\n\n                                                                                                                                                                                   \n  public grantPutLifecycleEventHookExecutionStatus(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      resourceArns: [this.deploymentGroupArn],\n      actions: ['codedeploy:PutLifecycleEventHookExecutionStatus'],\n    });\n  }\n}\n\n                                                                                                                                                  \nexport interface LambdaDeploymentGroupAttributes {\n                                                                                                               \n  readonly application: ILambdaApplication;\n\n                                                                                                                          \n  readonly deploymentGroupName: string;\n\n                                                                                                                                             \n  readonly deploymentConfig?: ILambdaDeploymentConfig;\n}\n\nclass ImportedLambdaDeploymentGroup extends cdk.Resource implements ILambdaDeploymentGroup {\n  public readonly application: ILambdaApplication;\n  public readonly deploymentGroupName: string;\n  public readonly deploymentGroupArn: string;\n  public readonly deploymentConfig: ILambdaDeploymentConfig;\n\n  constructor(scope:Construct, id: string, props: LambdaDeploymentGroupAttributes) {\n    super(scope, id);\n    this.application = props.application;\n    this.deploymentGroupName = props.deploymentGroupName;\n    this.deploymentGroupArn = arnForDeploymentGroup(props.application.applicationName, props.deploymentGroupName);\n    this.deploymentConfig = props.deploymentConfig || LambdaDeploymentConfig.CANARY_10PERCENT_5MINUTES;\n  }\n}\n"],
  "mappings": "+NACA,IAAA,QAAA,oBAEA,IAAA,QAAA,iBACA,aAAA,QAAA,cACA,uBAAA,QAAA,2BAEA,QAAA,QAAA,YACA,cAAA,QAAA,iBACA,oBAAA,QAAA,uBAmDA,mCAA2C,KAAI,QAAQ,CAmBrD,YAAY,MAAkB,GAAY,MAAiC,CACzE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,2GAGtB,KAAK,YAAc,MAAM,aAAe,GAAI,eAAA,kBAAkB,KAAM,eACpE,KAAK,OAAS,MAAM,QAAU,GAE9B,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,cAAe,CAC1D,UAAW,GAAI,KAAI,iBAAiB,8BAGtC,KAAK,KAAK,iBAAiB,IAAI,cAAc,yBAAyB,mDACtE,KAAK,iBAAmB,MAAM,kBAAoB,oBAAA,uBAAuB,0BAEzE,KAAM,UAAW,GAAI,wBAAA,mBAAmB,KAAM,WAAY,CACxD,gBAAiB,KAAK,YAAY,gBAClC,eAAgB,KAAK,KAAK,QAC1B,oBAAqB,KAAK,aAC1B,qBAAsB,KAAK,iBAAiB,qBAC5C,gBAAiB,CACf,eAAgB,aAChB,iBAAkB,wBAEpB,mBAAoB,IAAI,KAAK,IAAI,CAAE,QAAS,IAAM,QAAA,yBAAyB,KAAK,OAAQ,MAAM,2BAC9F,0BAA2B,IAAI,KAAK,IAAI,CAAE,QAAS,IAAM,QAAA,gCAAgC,KAAK,OAAQ,MAAM,kBAG9G,KAAK,oBAAsB,KAAK,yBAAyB,SAAS,KAClE,KAAK,mBAAqB,KAAK,wBAAwB,QAAA,sBAAsB,KAAK,YAAY,gBAAiB,SAAS,KAAM,CAC5H,QAAS,aACT,SAAU,kBACV,aAAc,GAAG,KAAK,YAAY,mBAAmB,KAAK,eAC1D,UAAW,IAAI,UAAU,sBAGvB,MAAM,SACR,KAAK,WAAW,MAAM,SAEpB,MAAM,UACR,KAAK,YAAY,MAAM,UAGxB,MAAM,MAAM,KAAK,aAAiC,WAAW,aAAe,CAC3E,4BAA6B,CAC3B,gBAAiB,KAAK,YAAY,gBAClC,oBAAqB,SAAS,IAC9B,uBAAwB,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,SAAW,KAAK,QAAQ,eACtF,sBAAuB,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,UAAY,KAAK,SAAS,iBAMvF,KAAK,2BAA4B,cAAA,WACnC,KAAK,KAAK,cAAc,KAAK,wBAxEnB,qCACZ,MACA,GACA,MAAsC,kGAC/B,GAAI,+BAA8B,MAAO,GAAI,OAyE/C,SAAS,MAAwB,kEACtC,KAAK,OAAO,KAAK,OAIZ,WAAW,QAAyB,CACzC,qEAAI,KAAK,UAAY,OACnB,KAAM,IAAI,OAAM,oEAElB,KAAK,QAAU,QACf,KAAK,0CAA0C,KAAK,SACpD,KAAK,QAAQ,YAAY,KAAK,MAIzB,YAAY,SAA0B,CAC3C,sEAAI,KAAK,WAAa,OACpB,KAAM,IAAI,OAAM,qEAElB,KAAK,SAAW,SAChB,KAAK,0CAA0C,KAAK,UACpD,KAAK,SAAS,YAAY,KAAK,MAI1B,0CAA0C,QAAuB,wEAC/D,IAAI,MAAM,eAAe,CAC9B,QACA,aAAc,CAAC,KAAK,oBACpB,QAAS,CAAC,sDA5GhB,QAAA,sBAAA,gJA6HA,2CAA4C,KAAI,QAAQ,CAMtD,YAAY,MAAiB,GAAY,MAAsC,CAC7E,MAAM,MAAO,IACb,KAAK,YAAc,MAAM,YACzB,KAAK,oBAAsB,MAAM,oBACjC,KAAK,mBAAqB,QAAA,sBAAsB,MAAM,YAAY,gBAAiB,MAAM,qBACzF,KAAK,iBAAmB,MAAM,kBAAoB,oBAAA,uBAAuB",
  "names": []
}
