{
  "version": 3,
  "sources": ["deployment-config.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { CfnDeploymentConfig } from '../codedeploy.generated';\nimport { arnForDeploymentConfig } from '../utils';\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \nexport interface IServerDeploymentConfig {\n                           \n  readonly deploymentConfigName: string;\n\n                           \n  readonly deploymentConfigArn: string;\n}\n\n                                                                   \nexport class MinimumHealthyHosts {\n\n                                                                                     \n  public static count(value: number): MinimumHealthyHosts {\n    return new MinimumHealthyHosts({\n      type: 'HOST_COUNT',\n      value,\n    });\n  }\n\n                                                                                           \n  public static percentage(value: number): MinimumHealthyHosts {\n    return new MinimumHealthyHosts({\n      type: 'FLEET_PERCENT',\n      value,\n    });\n  }\n\n  private constructor(private readonly json: CfnDeploymentConfig.MinimumHealthyHostsProperty) { }\n\n  /**\n   * @internal\n   */\n  public get _json() {\n    return this.json;\n  }\n}\n\n                                                                     \nexport interface ServerDeploymentConfigProps {\n                                                                                                                                    \n  readonly deploymentConfigName?: string;\n\n                                                 \n  readonly minimumHealthyHosts: MinimumHealthyHosts;\n}\n\n                                                                                                                                      \nexport class ServerDeploymentConfig extends cdk.Resource implements IServerDeploymentConfig {\n  public static readonly ONE_AT_A_TIME = deploymentConfig('CodeDeployDefault.OneAtATime');\n  public static readonly HALF_AT_A_TIME = deploymentConfig('CodeDeployDefault.HalfAtATime');\n  public static readonly ALL_AT_ONCE = deploymentConfig('CodeDeployDefault.AllAtOnce');\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n  public static fromServerDeploymentConfigName(\n    scope: Construct,\n    id: string,\n    serverDeploymentConfigName: string): IServerDeploymentConfig {\n\n    ignore(scope);\n    ignore(id);\n    return deploymentConfig(serverDeploymentConfigName);\n  }\n\n  public readonly deploymentConfigName: string;\n  public readonly deploymentConfigArn: string;\n\n  constructor(scope: Construct, id: string, props: ServerDeploymentConfigProps) {\n    super(scope, id, {\n      physicalName: props.deploymentConfigName,\n    });\n\n    const resource = new CfnDeploymentConfig(this, 'Resource', {\n      deploymentConfigName: this.physicalName,\n      minimumHealthyHosts: props.minimumHealthyHosts._json,\n    });\n\n    this.deploymentConfigName = resource.ref;\n    this.deploymentConfigArn = arnForDeploymentConfig(this.deploymentConfigName);\n  }\n}\n\nfunction deploymentConfig(name: string): IServerDeploymentConfig {\n  return {\n    deploymentConfigName: name,\n    deploymentConfigArn: arnForDeploymentConfig(name),\n  };\n}\n\nfunction ignore(_x: any) { return; }\n"],
  "mappings": "+PAAA,IAAA,QAAA,iBAEA,uBAAA,QAAA,2BACA,QAAA,QAAA,YAYA,yBAAgC,CAkB9B,YAAqC,KAAqD,CAArD,KAAA,KAAA,WAfvB,OAAM,MAAa,CAC/B,MAAO,IAAI,qBAAoB,CAC7B,KAAM,aACN,cAKU,YAAW,MAAa,CACpC,MAAO,IAAI,qBAAoB,CAC7B,KAAM,gBACN,WASO,QAAK,CACd,MAAO,MAAK,MAxBhB,QAAA,oBAAA,0IAsCA,oCAA4C,KAAI,QAAQ,CAmBtD,YAAY,MAAkB,GAAY,MAAkC,CAC1E,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,6GAGtB,KAAM,UAAW,GAAI,wBAAA,oBAAoB,KAAM,WAAY,CACzD,qBAAsB,KAAK,aAC3B,oBAAqB,MAAM,oBAAoB,QAGjD,KAAK,qBAAuB,SAAS,IACrC,KAAK,oBAAsB,QAAA,uBAAuB,KAAK,4BAxB3C,gCACZ,MACA,GACA,2BAAkC,CAElC,MAEO,kBAAiB,6BAb5B,QAAA,uBAAA,mJACyB,uBAAA,cAAgB,iBAAiB,gCACjC,uBAAA,eAAiB,iBAAiB,iCAClC,uBAAA,YAAc,iBAAiB,+BA+BxD,0BAA0B,KAAY,CACpC,MAAO,CACL,qBAAsB,KACtB,oBAAqB,QAAA,uBAAuB,OAIhD,gBAAgB,GAAO",
  "names": []
}
