{
  "version": 3,
  "sources": ["deployment-group.ts"],
  "sourcesContent": ["import * as autoscaling from '../../../aws-autoscaling';\nimport * as cloudwatch from '../../../aws-cloudwatch';\nimport * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as s3 from '../../../aws-s3';\nimport * as cdk from '../../../core';\nimport { ArnFormat } from '../../../core';\nimport { Construct } from 'constructs';\nimport { CfnDeploymentGroup } from '../codedeploy.generated';\nimport { AutoRollbackConfig } from '../rollback-config';\nimport { arnForDeploymentGroup, renderAlarmConfiguration, renderAutoRollbackConfiguration } from '../utils';\nimport { IServerApplication, ServerApplication } from './application';\nimport { IServerDeploymentConfig, ServerDeploymentConfig } from './deployment-config';\nimport { LoadBalancer, LoadBalancerGeneration } from './load-balancer';\n\nexport interface IServerDeploymentGroup extends cdk.IResource {\n  readonly application: IServerApplication;\n  readonly role?: iam.IRole;\n                           \n  readonly deploymentGroupName: string;\n\n                           \n  readonly deploymentGroupArn: string;\n  readonly deploymentConfig: IServerDeploymentConfig;\n  readonly autoScalingGroups?: autoscaling.IAutoScalingGroup[];\n}\n\n                                                                                                                             \nexport interface ServerDeploymentGroupAttributes {\n                                                                                                                       \n  readonly application: IServerApplication;\n\n                                                                                                                                  \n  readonly deploymentGroupName: string;\n\n                                                                                                                              \n  readonly deploymentConfig?: IServerDeploymentConfig;\n}\n\n/**\n * Represents a reference to a CodeDeploy EC2/on-premise Deployment Group.\n *\n * If you're managing the Deployment Group alongside the rest of your CDK resources,\n * use the {@link ServerDeploymentGroup} class.\n *\n * If you want to reference an already existing Deployment Group,\n * or one defined in a different CDK Stack,\n * use the {@link #import} method.\n */\nabstract class ServerDeploymentGroupBase extends cdk.Resource implements IServerDeploymentGroup {\n  public abstract readonly application: IServerApplication;\n  public abstract readonly role?: iam.IRole;\n  public abstract readonly deploymentGroupName: string;\n  public abstract readonly deploymentGroupArn: string;\n  public readonly deploymentConfig: IServerDeploymentConfig;\n  public abstract readonly autoScalingGroups?: autoscaling.IAutoScalingGroup[];\n\n  constructor(scope: Construct, id: string, deploymentConfig?: IServerDeploymentConfig, props?: cdk.ResourceProps) {\n    super(scope, id, props);\n    this.deploymentConfig = deploymentConfig || ServerDeploymentConfig.ONE_AT_A_TIME;\n  }\n}\n\nclass ImportedServerDeploymentGroup extends ServerDeploymentGroupBase {\n  public readonly application: IServerApplication;\n  public readonly role?: iam.Role = undefined;\n  public readonly deploymentGroupName: string;\n  public readonly deploymentGroupArn: string;\n  public readonly autoScalingGroups?: autoscaling.AutoScalingGroup[] = undefined;\n\n  constructor(scope: Construct, id: string, props: ServerDeploymentGroupAttributes) {\n    super(scope, id, props.deploymentConfig);\n\n    this.application = props.application;\n    this.deploymentGroupName = props.deploymentGroupName;\n    this.deploymentGroupArn = arnForDeploymentGroup(props.application.applicationName, props.deploymentGroupName);\n  }\n}\n\n/**\n * Represents a group of instance tags.\n * An instance will match a group if it has a tag matching\n * any of the group's tags by key and any of the provided values -\n * in other words, tag groups follow 'or' semantics.\n * If the value for a given key is an empty array,\n * an instance will match when it has a tag with the given key,\n * regardless of the value.\n * If the key is an empty string, any tag,\n * regardless of its key, with any of the given values, will match.\n */\nexport type InstanceTagGroup = {[key: string]: string[]};\n\n                                                                                                                                                                                                                                        \nexport class InstanceTagSet {\n  private readonly _instanceTagGroups: InstanceTagGroup[];\n\n  constructor(...instanceTagGroups: InstanceTagGroup[]) {\n    if (instanceTagGroups.length > 3) {\n      throw new Error('An instance tag set can have a maximum of 3 instance tag groups, ' +\n        `but ${instanceTagGroups.length} were provided`);\n    }\n    this._instanceTagGroups = instanceTagGroups;\n  }\n\n  public get instanceTagGroups(): InstanceTagGroup[] {\n    return this._instanceTagGroups.slice();\n  }\n}\n\n                                                                     \nexport interface ServerDeploymentGroupProps {\n                                                                                                                                                    \n  readonly application?: IServerApplication;\n\n                                                                                                            \n  readonly role?: iam.IRole;\n\n                                                                                                                                                \n  readonly deploymentGroupName?: string;\n\n                                                                                                                                                   \n  readonly deploymentConfig?: IServerDeploymentConfig;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n  readonly autoScalingGroups?: autoscaling.IAutoScalingGroup[];\n\n                                                                                                                                                                                                                                                                                                                                                 \n  readonly installAgent?: boolean;\n\n                                                                                                                                                                                                                                                                                                       \n  readonly loadBalancer?: LoadBalancer;\n\n                                                                                                                                                                                                                          \n  readonly ec2InstanceTags?: InstanceTagSet;\n\n                                                                                                                                                                                                                                        \n  readonly onPremiseInstanceTags?: InstanceTagSet;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly alarms?: cloudwatch.IAlarm[];\n\n                                                                                                                                    \n  readonly ignorePollAlarmsFailure?: boolean;\n\n                                                                                                                            \n  readonly autoRollback?: AutoRollbackConfig;\n}\n\n                                                                                                                                \nexport class ServerDeploymentGroup extends ServerDeploymentGroupBase {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n  public static fromServerDeploymentGroupAttributes(\n    scope: Construct,\n    id: string,\n    attrs: ServerDeploymentGroupAttributes): IServerDeploymentGroup {\n    return new ImportedServerDeploymentGroup(scope, id, attrs);\n  }\n\n  public readonly application: IServerApplication;\n  public readonly role?: iam.IRole;\n  public readonly deploymentGroupArn: string;\n  public readonly deploymentGroupName: string;\n\n  private readonly _autoScalingGroups: autoscaling.IAutoScalingGroup[];\n  private readonly installAgent: boolean;\n  private readonly codeDeployBucket: s3.IBucket;\n  private readonly alarms: cloudwatch.IAlarm[];\n\n  constructor(scope: Construct, id: string, props: ServerDeploymentGroupProps = {}) {\n    super(scope, id, props.deploymentConfig, {\n      physicalName: props.deploymentGroupName,\n    });\n\n    this.application = props.application || new ServerApplication(this, 'Application', {\n      applicationName: props.deploymentGroupName === cdk.PhysicalName.GENERATE_IF_NEEDED ? cdk.PhysicalName.GENERATE_IF_NEEDED : undefined,\n    });\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('codedeploy.amazonaws.com'),\n      managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSCodeDeployRole')],\n    });\n\n    this._autoScalingGroups = props.autoScalingGroups || [];\n    this.installAgent = props.installAgent ?? true;\n    this.codeDeployBucket = s3.Bucket.fromBucketName(this, 'Bucket', `aws-codedeploy-${cdk.Stack.of(this).region}`);\n    for (const asg of this._autoScalingGroups) {\n      this.addCodeDeployAgentInstallUserData(asg);\n    }\n\n    this.alarms = props.alarms || [];\n\n    const resource = new CfnDeploymentGroup(this, 'Resource', {\n      applicationName: this.application.applicationName,\n      deploymentGroupName: this.physicalName,\n      serviceRoleArn: this.role.roleArn,\n      deploymentConfigName: props.deploymentConfig &&\n        props.deploymentConfig.deploymentConfigName,\n      autoScalingGroups: cdk.Lazy.list({ produce: () => this._autoScalingGroups.map(asg => asg.autoScalingGroupName) }, { omitEmpty: true }),\n      loadBalancerInfo: this.loadBalancerInfo(props.loadBalancer),\n      deploymentStyle: props.loadBalancer === undefined\n        ? undefined\n        : {\n          deploymentOption: 'WITH_TRAFFIC_CONTROL',\n        },\n      ec2TagSet: this.ec2TagSet(props.ec2InstanceTags),\n      onPremisesTagSet: this.onPremiseTagSet(props.onPremiseInstanceTags),\n      alarmConfiguration: cdk.Lazy.any({ produce: () => renderAlarmConfiguration(this.alarms, props.ignorePollAlarmsFailure) }),\n      autoRollbackConfiguration: cdk.Lazy.any({ produce: () => renderAutoRollbackConfiguration(this.alarms, props.autoRollback) }),\n    });\n\n    this.deploymentGroupName = this.getResourceNameAttribute(resource.ref);\n    this.deploymentGroupArn = this.getResourceArnAttribute(arnForDeploymentGroup(this.application.applicationName, resource.ref), {\n      service: 'codedeploy',\n      resource: 'deploymentgroup',\n      resourceName: `${this.application.applicationName}/${this.physicalName}`,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n  }\n\n                                                                                                                                                                                                                                                                                               \n  public addAutoScalingGroup(asg: autoscaling.AutoScalingGroup): void {\n    this._autoScalingGroups.push(asg);\n    this.addCodeDeployAgentInstallUserData(asg);\n  }\n\n                                                                                                                                                    \n  public addAlarm(alarm: cloudwatch.IAlarm): void {\n    this.alarms.push(alarm);\n  }\n\n  public get autoScalingGroups(): autoscaling.IAutoScalingGroup[] | undefined {\n    return this._autoScalingGroups.slice();\n  }\n\n  private addCodeDeployAgentInstallUserData(asg: autoscaling.IAutoScalingGroup): void {\n    if (!this.installAgent) {\n      return;\n    }\n\n    this.codeDeployBucket.grantRead(asg, 'latest/*');\n\n    switch (asg.osType) {\n      case ec2.OperatingSystemType.LINUX:\n        asg.addUserData(\n          'set +e', // make sure we don't exit on the `which` failing\n          'PKG_CMD=`which yum 2>/dev/null`',\n          'set -e', // continue with failing on error\n          'if [ -z \"$PKG_CMD\" ]; then',\n          'PKG_CMD=apt-get',\n          'else',\n          'PKG_CMD=yum',\n          'fi',\n          '$PKG_CMD update -y',\n          'set +e', // make sure we don't exit on the next command failing (we check its exit code below)\n          '$PKG_CMD install -y ruby2.0',\n          'RUBY2_INSTALL=$?',\n          'set -e', // continue with failing on error\n          'if [ $RUBY2_INSTALL -ne 0 ]; then',\n          '$PKG_CMD install -y ruby',\n          'fi',\n          'AWS_CLI_PACKAGE_NAME=awscli',\n          'if [ \"$PKG_CMD\" = \"yum\" ]; then',\n          'AWS_CLI_PACKAGE_NAME=aws-cli',\n          'fi',\n          '$PKG_CMD install -y $AWS_CLI_PACKAGE_NAME',\n          'TMP_DIR=`mktemp -d`',\n          'cd $TMP_DIR',\n          `aws s3 cp s3://aws-codedeploy-${cdk.Stack.of(this).region}/latest/install . --region ${cdk.Stack.of(this).region}`,\n          'chmod +x ./install',\n          './install auto',\n          'rm -fr $TMP_DIR',\n        );\n        break;\n      case ec2.OperatingSystemType.WINDOWS:\n        asg.addUserData(\n          'Set-Variable -Name TEMPDIR -Value (New-TemporaryFile).DirectoryName',\n          `aws s3 cp s3://aws-codedeploy-${cdk.Stack.of(this).region}/latest/codedeploy-agent.msi $TEMPDIR\\\\codedeploy-agent.msi`,\n          'cd $TEMPDIR',\n          '.\\\\codedeploy-agent.msi /quiet /l c:\\\\temp\\\\host-agent-install-log.txt',\n        );\n        break;\n    }\n  }\n\n  private loadBalancerInfo(loadBalancer?: LoadBalancer):\n  CfnDeploymentGroup.LoadBalancerInfoProperty | undefined {\n    if (!loadBalancer) {\n      return undefined;\n    }\n\n    switch (loadBalancer.generation) {\n      case LoadBalancerGeneration.FIRST:\n        return {\n          elbInfoList: [\n            { name: loadBalancer.name },\n          ],\n        };\n      case LoadBalancerGeneration.SECOND:\n        return {\n          targetGroupInfoList: [\n            { name: loadBalancer.name },\n          ],\n        };\n    }\n  }\n\n  private ec2TagSet(tagSet?: InstanceTagSet):\n  CfnDeploymentGroup.EC2TagSetProperty | undefined {\n    if (!tagSet || tagSet.instanceTagGroups.length === 0) {\n      return undefined;\n    }\n\n    return {\n      ec2TagSetList: tagSet.instanceTagGroups.map(tagGroup => {\n        return {\n          ec2TagGroup: this.tagGroup2TagsArray(tagGroup) as\n            CfnDeploymentGroup.EC2TagFilterProperty[],\n        };\n      }),\n    };\n  }\n\n  private onPremiseTagSet(tagSet?: InstanceTagSet):\n  CfnDeploymentGroup.OnPremisesTagSetProperty | undefined {\n    if (!tagSet || tagSet.instanceTagGroups.length === 0) {\n      return undefined;\n    }\n\n    return {\n      onPremisesTagSetList: tagSet.instanceTagGroups.map(tagGroup => {\n        return {\n          onPremisesTagGroup: this.tagGroup2TagsArray(tagGroup),\n        };\n      }),\n    };\n  }\n\n  private tagGroup2TagsArray(tagGroup: InstanceTagGroup): CfnDeploymentGroup.TagFilterProperty[] {\n    const tagsInGroup = new Array<CfnDeploymentGroup.TagFilterProperty>();\n    for (const tagKey in tagGroup) {\n      if (tagGroup.hasOwnProperty(tagKey)) {\n        const tagValues = tagGroup[tagKey];\n        if (tagKey.length > 0) {\n          if (tagValues.length > 0) {\n            for (const tagValue of tagValues) {\n              tagsInGroup.push({\n                key: tagKey,\n                value: tagValue,\n                type: 'KEY_AND_VALUE',\n              });\n            }\n          } else {\n            tagsInGroup.push({\n              key: tagKey,\n              type: 'KEY_ONLY',\n            });\n          }\n        } else {\n          if (tagValues.length > 0) {\n            for (const tagValue of tagValues) {\n              tagsInGroup.push({\n                value: tagValue,\n                type: 'VALUE_ONLY',\n              });\n            }\n          } else {\n            throw new Error('Cannot specify both an empty key and no values for an instance tag filter');\n          }\n        }\n      }\n    }\n    return tagsInGroup;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
