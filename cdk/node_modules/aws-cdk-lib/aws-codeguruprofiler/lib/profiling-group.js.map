{
  "version": 3,
  "sources": ["profiling-group.ts"],
  "sourcesContent": ["import { Grant, IGrantable } from '../../aws-iam';\nimport { ArnFormat, IResource, Lazy, Names, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnProfilingGroup } from './codeguruprofiler.generated';\n\n                                                       \nexport enum ComputePlatform {\n                                                                       \n  AWS_LAMBDA = 'AWSLambda',\n\n                                                                                                                                                                                     \n  DEFAULT = 'Default',\n}\n\n                                                  \nexport interface IProfilingGroup extends IResource {\n\n                                                                     \n  readonly profilingGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                        \n  grantPublish(grantee: IGrantable): Grant;\n\n                                                                                                                                                                                                                                                                                                                      \n  grantRead(grantee: IGrantable): Grant;\n\n}\n\nabstract class ProfilingGroupBase extends Resource implements IProfilingGroup {\n\n  public abstract readonly profilingGroupName: string;\n\n  public abstract readonly profilingGroupArn: string;\n\n                                                                                                                                                                                                                                                                                                                        \n  public grantPublish(grantee: IGrantable) {\n    // https://docs.aws.amazon.com/codeguru/latest/profiler-ug/security-iam.html#security-iam-access-control\n    return Grant.addToPrincipal({\n      grantee,\n      actions: ['codeguru-profiler:ConfigureAgent', 'codeguru-profiler:PostAgentProfile'],\n      resourceArns: [this.profilingGroupArn],\n    });\n  }\n\n                                                                                                                                                                                                                                                                                                                      \n  public grantRead(grantee: IGrantable) {\n    // https://docs.aws.amazon.com/codeguru/latest/profiler-ug/security-iam.html#security-iam-access-control\n    return Grant.addToPrincipal({\n      grantee,\n      actions: ['codeguru-profiler:GetProfile', 'codeguru-profiler:DescribeProfilingGroup'],\n      resourceArns: [this.profilingGroupArn],\n    });\n  }\n\n}\n\n                                                         \nexport interface ProfilingGroupProps {\n\n                                                                                              \n  readonly profilingGroupName?: string;\n\n                                                                                                        \n  readonly computePlatform?: ComputePlatform;\n\n}\n\n                                 \nexport class ProfilingGroup extends ProfilingGroupBase {\n\n                                                                                                                                                                                                                                 \n  public static fromProfilingGroupName(scope: Construct, id: string, profilingGroupName: string): IProfilingGroup {\n    const stack = Stack.of(scope);\n\n    return this.fromProfilingGroupArn(scope, id, stack.formatArn({\n      service: 'codeguru-profiler',\n      resource: 'profilingGroup',\n      resourceName: profilingGroupName,\n    }));\n  }\n\n                                                                                                                                                                                                               \n  public static fromProfilingGroupArn(scope: Construct, id: string, profilingGroupArn: string): IProfilingGroup {\n    class Import extends ProfilingGroupBase {\n      public readonly profilingGroupName = Stack.of(scope).splitArn(profilingGroupArn, ArnFormat.SLASH_RESOURCE_NAME).resource;\n      public readonly profilingGroupArn = profilingGroupArn;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                      \n  public readonly profilingGroupName: string;\n\n                                                                     \n  public readonly profilingGroupArn: string;\n\n  constructor(scope: Construct, id: string, props: ProfilingGroupProps = {}) {\n    super(scope, id, {\n      physicalName: props.profilingGroupName ?? Lazy.string({ produce: () => this.generateUniqueId() }),\n    });\n\n    const profilingGroup = new CfnProfilingGroup(this, 'ProfilingGroup', {\n      profilingGroupName: this.physicalName,\n      computePlatform: props.computePlatform,\n    });\n\n    this.profilingGroupName = this.getResourceNameAttribute(profilingGroup.ref);\n\n    this.profilingGroupArn = this.getResourceArnAttribute(profilingGroup.attrArn, {\n      service: 'codeguru-profiler',\n      resource: 'profilingGroup',\n      resourceName: this.physicalName,\n    });\n  }\n\n  private generateUniqueId(): string {\n    const name = Names.uniqueId(this);\n    if (name.length > 240) {\n      return name.substring(0, 120) + name.substring(name.length - 120);\n    }\n    return name;\n  }\n\n}\n"],
  "mappings": "6OAAA,UAAA,QAAA,iBACA,OAAA,QAAA,cAEA,6BAAA,QAAA,gCAGA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAEzB,iBAAA,WAAA,YAGA,iBAAA,QAAA,YALU,gBAAA,QAAA,iBAAA,SAAA,gBAAe,KAsB3B,gCAA0C,QAAA,QAAQ,CAOzC,aAAa,QAAmB,CAErC,MAAO,WAAA,MAAM,eAAe,CAC1B,QACA,QAAS,CAAC,mCAAoC,sCAC9C,aAAc,CAAC,KAAK,qBAKjB,UAAU,QAAmB,CAElC,MAAO,WAAA,MAAM,eAAe,CAC1B,QACA,QAAS,CAAC,+BAAgC,4CAC1C,aAAc,CAAC,KAAK,sBAkB1B,4BAAoC,mBAAkB,CA6BpD,YAAY,MAAkB,GAAY,MAA6B,GAAE,QACvE,MAAM,MAAO,GAAI,CACf,aAAY,IAAE,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,2GAG9E,KAAM,gBAAiB,GAAI,8BAAA,kBAAkB,KAAM,iBAAkB,CACnE,mBAAoB,KAAK,aACzB,gBAAiB,MAAM,kBAGzB,KAAK,mBAAqB,KAAK,yBAAyB,eAAe,KAEvE,KAAK,kBAAoB,KAAK,wBAAwB,eAAe,QAAS,CAC5E,QAAS,oBACT,SAAU,iBACV,aAAc,KAAK,qBAzCT,wBAAuB,MAAkB,GAAY,mBAA0B,CAC3F,KAAM,OAAQ,OAAA,MAAM,GAAG,OAEvB,MAAO,MAAK,sBAAsB,MAAO,GAAI,MAAM,UAAU,CAC3D,QAAS,oBACT,SAAU,iBACV,aAAc,4BAKJ,uBAAsB,MAAkB,GAAY,kBAAyB,CACzF,oBAAqB,mBAAkB,CAAvC,aAAA,qBACkB,KAAA,mBAAqB,OAAA,MAAM,GAAG,OAAO,SAAS,kBAAmB,OAAA,UAAU,qBAAqB,SAChG,KAAA,kBAAoB,mBAGtC,MAAO,IAAI,QAAO,MAAO,IA4BnB,kBAAgB,CACtB,KAAM,MAAO,OAAA,MAAM,SAAS,MAC5B,MAAI,MAAK,OAAS,IACT,KAAK,UAAU,EAAG,KAAO,KAAK,UAAU,KAAK,OAAS,KAExD,MArDX,QAAA,eAAA",
  "names": []
}
