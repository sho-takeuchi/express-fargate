{
  "version": 3,
  "sources": ["pipeline-actions.ts"],
  "sourcesContent": ["import * as cloudformation from '../../../aws-cloudformation';\nimport * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Action } from '../action';\n\n/**\n * Properties common to all CloudFormation actions\n */\ninterface CloudFormationActionProps extends codepipeline.CommonAwsActionProps {\n                                                              \n  readonly stackName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n  readonly outputFileName?: string;\n\n                                                                                                                                                                                 \n  readonly output?: codepipeline.Artifact;\n\nn  readonly region?: string;\n\n                                                                                                                                                                                                                                                                                          \n  readonly account?: string;\n}\n\n/**\n * Base class for Actions that execute CloudFormation\n */\nabstract class CloudFormationAction extends Action {\n  private readonly props: CloudFormationActionProps;\n\n  constructor(props: CloudFormationActionProps, inputs: codepipeline.Artifact[] | undefined) {\n    super({\n      ...props,\n      provider: 'CloudFormation',\n      category: codepipeline.ActionCategory.DEPLOY,\n      artifactBounds: {\n        minInputs: 0,\n        maxInputs: 10,\n        minOutputs: 0,\n        maxOutputs: 1,\n      },\n      inputs,\n      outputs: props.outputFileName\n        ? [props.output || new codepipeline.Artifact(`${props.actionName}_${props.stackName}_Artifact`)]\n        : undefined,\n    });\n\n    this.props = props;\n  }\n\n  protected bound(_scope: Construct, _stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    const singletonPolicy = SingletonPolicy.forRole(options.role);\n\n    if ((this.actionProperties.outputs || []).length > 0) {\n      options.bucket.grantReadWrite(singletonPolicy);\n    } else if ((this.actionProperties.inputs || []).length > 0) {\n      options.bucket.grantRead(singletonPolicy);\n    }\n\n    return {\n      configuration: {\n        StackName: this.props.stackName,\n        OutputFileName: this.props.outputFileName,\n      },\n    };\n  }\n}\n\n                                                                   \nexport interface CloudFormationExecuteChangeSetActionProps extends CloudFormationActionProps {\n                                                   \n  readonly changeSetName: string;\n}\n\n                                                                \nexport class CloudFormationExecuteChangeSetAction extends CloudFormationAction {\n  private readonly props2: CloudFormationExecuteChangeSetActionProps;\n\n  constructor(props: CloudFormationExecuteChangeSetActionProps) {\n    super(props, undefined);\n\n    this.props2 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    SingletonPolicy.forRole(options.role).grantExecuteChangeSet(this.props2);\n\n    const actionConfig = super.bound(scope, stage, options);\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: 'CHANGE_SET_EXECUTE',\n        ChangeSetName: this.props2.changeSetName,\n      },\n    };\n  }\n}\n\n/**\n * Properties common to CloudFormation actions that stage deployments\n */\ninterface CloudFormationDeployActionProps extends CloudFormationActionProps {\n                                                                                                                                                                                                                                                                                                                                                                      \n  readonly deploymentRole?: iam.IRole;\n\nn  readonly capabilities?: cloudformation.CloudFormationCapabilities[];\n\nn  readonly cfnCapabilities?: cdk.CfnCapabilities[];\n\nn  readonly adminPermissions: boolean;\n\nn  readonly templateConfiguration?: codepipeline.ArtifactPath;\n\nn  readonly parameterOverrides?: { [name: string]: any };\n\nn  readonly extraInputs?: codepipeline.Artifact[];\n}\n\n/**\n * Base class for all CloudFormation actions that execute or stage deployments.\n */\nabstract class CloudFormationDeployAction extends CloudFormationAction {\n  private _deploymentRole?: iam.IRole;\n  private readonly props2: CloudFormationDeployActionProps;\n\n  constructor(props: CloudFormationDeployActionProps, inputs: codepipeline.Artifact[] | undefined) {\n    super(props, (props.extraInputs || []).concat(inputs || []));\n\n    this.props2 = props;\n  }\n\n                                                                                                         \n  public addToDeploymentRolePolicy(statement: iam.PolicyStatement) {\n    return this.getDeploymentRole('method addToRolePolicy()').addToPolicy(statement);\n  }\n\n  public get deploymentRole(): iam.IRole {\n    return this.getDeploymentRole('property role()');\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    if (this.props2.deploymentRole) {\n      this._deploymentRole = this.props2.deploymentRole;\n    } else {\n      const roleStack = cdk.Stack.of(options.role);\n      const pipelineStack = cdk.Stack.of(scope);\n      if (roleStack.account !== pipelineStack.account) {\n        // pass role is not allowed for cross-account access - so,\n        // create the deployment Role in the other account!\n        this._deploymentRole = new iam.Role(roleStack,\n          `${cdk.Names.nodeUniqueId(stage.pipeline.node)}-${stage.stageName}-${this.actionProperties.actionName}-DeploymentRole`, {\n            assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com'),\n            roleName: cdk.PhysicalName.GENERATE_IF_NEEDED,\n          });\n      } else {\n        this._deploymentRole = new iam.Role(scope, 'Role', {\n          assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com'),\n        });\n      }\n\n      // the deployment role might need read access to the pipeline's bucket\n      // (for example, if it's deploying a Lambda function),\n      // and even if it has admin permissions, it won't be enough,\n      // as it needs to be added to the key's resource policy\n      // (and the bucket's, if the access is cross-account)\n      options.bucket.grantRead(this._deploymentRole);\n\n      if (this.props2.adminPermissions) {\n        this._deploymentRole.addToPolicy(new iam.PolicyStatement({\n          actions: ['*'],\n          resources: ['*'],\n        }));\n      }\n    }\n\n    SingletonPolicy.forRole(options.role).grantPassRole(this._deploymentRole);\n\n    const providedCapabilities = this.props2.cfnCapabilities ??\n      this.props2.capabilities?.map(c => {\n        switch (c) {\n          case cloudformation.CloudFormationCapabilities.NONE: return cdk.CfnCapabilities.NONE;\n          case cloudformation.CloudFormationCapabilities.ANONYMOUS_IAM: return cdk.CfnCapabilities.ANONYMOUS_IAM;\n          case cloudformation.CloudFormationCapabilities.NAMED_IAM: return cdk.CfnCapabilities.NAMED_IAM;\n          case cloudformation.CloudFormationCapabilities.AUTO_EXPAND: return cdk.CfnCapabilities.AUTO_EXPAND;\n        }\n      });\n    const capabilities = this.props2.adminPermissions && providedCapabilities === undefined\n      ? [cdk.CfnCapabilities.NAMED_IAM]\n      : providedCapabilities;\n\n    const actionConfig = super.bound(scope, stage, options);\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        // None evaluates to empty string which is falsey and results in undefined\n        Capabilities: parseCapabilities(capabilities),\n        RoleArn: this.deploymentRole.roleArn,\n        ParameterOverrides: cdk.Stack.of(scope).toJsonString(this.props2.parameterOverrides),\n        TemplateConfiguration: this.props2.templateConfiguration\n          ? this.props2.templateConfiguration.location\n          : undefined,\n        StackName: this.props2.stackName,\n      },\n    };\n  }\n\n  private getDeploymentRole(member: string): iam.IRole {\n    if (this._deploymentRole) {\n      return this._deploymentRole;\n    } else {\n      throw new Error(`Cannot use the ${member} before the Action has been added to a Pipeline`);\n    }\n  }\n}\n\n                                                                         \nexport interface CloudFormationCreateReplaceChangeSetActionProps extends CloudFormationDeployActionProps {\n                                                            \n  readonly changeSetName: string;\n\n                                                                            \n  readonly templatePath: codepipeline.ArtifactPath;\n}\n\n                                                                                                                                                                                                                                                      \nexport class CloudFormationCreateReplaceChangeSetAction extends CloudFormationDeployAction {\n  private readonly props3: CloudFormationCreateReplaceChangeSetActionProps;\n\n  constructor(props: CloudFormationCreateReplaceChangeSetActionProps) {\n    super(props, props.templateConfiguration\n      ? [props.templatePath.artifact, props.templateConfiguration.artifact]\n      : [props.templatePath.artifact]);\n\n    this.props3 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // the super call order is to preserve the existing order of statements in policies\n    const actionConfig = super.bound(scope, stage, options);\n\n    SingletonPolicy.forRole(options.role).grantCreateReplaceChangeSet(this.props3);\n\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: 'CHANGE_SET_REPLACE',\n        ChangeSetName: this.props3.changeSetName,\n        TemplatePath: this.props3.templatePath.location,\n      },\n    };\n  }\n}\n\n                                                                    \nexport interface CloudFormationCreateUpdateStackActionProps extends CloudFormationDeployActionProps {\n                                                                          \n  readonly templatePath: codepipeline.ArtifactPath;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n  readonly replaceOnFailure?: boolean;\n}\n\nnexport class CloudFormationCreateUpdateStackAction extends CloudFormationDeployAction {\n  private readonly props3: CloudFormationCreateUpdateStackActionProps;\n\n  constructor(props: CloudFormationCreateUpdateStackActionProps) {\n    super(props, props.templateConfiguration\n      ? [props.templatePath.artifact, props.templateConfiguration.artifact]\n      : [props.templatePath.artifact]);\n\n    this.props3 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // the super call order is to preserve the existing order of statements in policies\n    const actionConfig = super.bound(scope, stage, options);\n\n    SingletonPolicy.forRole(options.role).grantCreateUpdateStack(this.props3);\n\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: this.props3.replaceOnFailure ? 'REPLACE_ON_FAILURE' : 'CREATE_UPDATE',\n        TemplatePath: this.props3.templatePath.location,\n      },\n    };\n  }\n}\n\n                                                              \nexport interface CloudFormationDeleteStackActionProps extends CloudFormationDeployActionProps {\n}\n\n                                                                                                                                                                                  \nexport class CloudFormationDeleteStackAction extends CloudFormationDeployAction {\n  private readonly props3: CloudFormationDeleteStackActionProps;\n\n  constructor(props: CloudFormationDeleteStackActionProps) {\n    super(props, undefined);\n\n    this.props3 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // the super call order is to preserve the existing order of statements in policies\n    const actionConfig = super.bound(scope, stage, options);\n\n    SingletonPolicy.forRole(options.role).grantDeleteStack(this.props3);\n\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: 'DELETE_ONLY',\n      },\n    };\n  }\n}\n\n/**\n * Manages a bunch of singleton-y statements on the policy of an IAM Role.\n * Dedicated methods can be used to add specific permissions to the role policy\n * using as few statements as possible (adding resources to existing compatible\n * statements instead of adding new statements whenever possible).\n *\n * Statements created outside of this class are not considered when adding new\n * permissions.\n */\nclass SingletonPolicy extends Construct implements iam.IGrantable {\n  /**\n   * Obtain a SingletonPolicy for a given role.\n   * @param role the Role this policy is bound to.\n   * @returns the SingletonPolicy for this role.\n   */\n  public static forRole(role: iam.IRole): SingletonPolicy {\n    const found = role.node.tryFindChild(SingletonPolicy.UUID);\n    return (found as SingletonPolicy) || new SingletonPolicy(role);\n  }\n\n  private static readonly UUID = '8389e75f-0810-4838-bf64-d6f85a95cf83';\n\n  public readonly grantPrincipal: iam.IPrincipal;\n\n  private statements: { [key: string]: iam.PolicyStatement } = {};\n\n  private constructor(private readonly role: iam.IRole) {\n    super(role as unknown as Construct, SingletonPolicy.UUID);\n    this.grantPrincipal = role;\n  }\n\n  public grantExecuteChangeSet(props: { stackName: string, changeSetName: string, region?: string }): void {\n    this.statementFor({\n      actions: [\n        'cloudformation:DescribeStacks',\n        'cloudformation:DescribeChangeSet',\n        'cloudformation:ExecuteChangeSet',\n      ],\n      conditions: {\u00A0StringEqualsIfExists: { 'cloudformation:ChangeSetName': props.changeSetName } },\n    }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantCreateReplaceChangeSet(props: { stackName: string, changeSetName: string, region?: string }): void {\n    this.statementFor({\n      actions: [\n        'cloudformation:CreateChangeSet',\n        'cloudformation:DeleteChangeSet',\n        'cloudformation:DescribeChangeSet',\n        'cloudformation:DescribeStacks',\n      ],\n      conditions: { StringEqualsIfExists: { 'cloudformation:ChangeSetName': props.changeSetName } },\n    }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantCreateUpdateStack(props: { stackName: string, replaceOnFailure?: boolean, region?: string }): void {\n    const actions = [\n      'cloudformation:DescribeStack*',\n      'cloudformation:CreateStack',\n      'cloudformation:UpdateStack',\n      'cloudformation:GetTemplate*',\n      'cloudformation:ValidateTemplate',\n      'cloudformation:GetStackPolicy',\n      'cloudformation:SetStackPolicy',\n    ];\n    if (props.replaceOnFailure) {\n      actions.push('cloudformation:DeleteStack');\n    }\n    this.statementFor({ actions }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantDeleteStack(props: { stackName: string, region?: string }): void {\n    this.statementFor({\n      actions: [\n        'cloudformation:DescribeStack*',\n        'cloudformation:DeleteStack',\n      ],\n    }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantPassRole(role: iam.IRole): void {\n    this.statementFor({ actions: ['iam:PassRole'] }).addResources(role.roleArn);\n  }\n\n  private statementFor(template: StatementTemplate): iam.PolicyStatement {\n    const key = keyFor(template);\n    if (!(key in this.statements)) {\n      this.statements[key] = new iam.PolicyStatement({ actions: template.actions });\n      if (template.conditions) {\n        this.statements[key].addConditions(template.conditions);\n      }\n      this.role.addToPolicy(this.statements[key]);\n    }\n    return this.statements[key];\n\n    function keyFor(props: StatementTemplate): string {\n      const actions = `${props.actions.sort().join('\\x1F')}`;\n      const conditions = formatConditions(props.conditions);\n      return `${actions}\\x1D${conditions}`;\n\n      function formatConditions(cond?: StatementCondition): string {\n        if (cond == null) { return ''; }\n        let result = '';\n        for (const op of Object.keys(cond).sort()) {\n          result += `${op}\\x1E`;\n          const condition = cond[op];\n          for (const attribute of Object.keys(condition).sort()) {\n            const value = condition[attribute];\n            result += `${value}\\x1F`;\n          }\n        }\n        return result;\n      }\n    }\n  }\n\n  private stackArnFromProps(props: { stackName: string, region?: string }): string {\n    return cdk.Stack.of(this).formatArn({\n      region: props.region,\n      service: 'cloudformation',\n      resource: 'stack',\n      resourceName: `${props.stackName}/*`,\n    });\n  }\n}\n\ninterface StatementTemplate {\n  actions: string[];\n  conditions?: StatementCondition;\n}\n\ntype StatementCondition = { [op: string]: { [attribute: string]: string } };\n\nfunction parseCapabilities(capabilities: cdk.CfnCapabilities[] | undefined): string | undefined {\n  if (capabilities === undefined) {\n    return undefined;\n  } else if (capabilities.length === 1) {\n    const capability = capabilities.toString();\n    return (capability === '') ? undefined : capability;\n  } else if (capabilities.length > 1) {\n    return capabilities.join(',');\n  }\n\n  return undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
