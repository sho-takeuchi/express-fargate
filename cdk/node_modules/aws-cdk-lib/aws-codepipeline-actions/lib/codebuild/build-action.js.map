{
  "version": 3,
  "sources": ["build-action.ts"],
  "sourcesContent": ["import * as codebuild from '../../../aws-codebuild';\nimport * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { CodeStarConnectionsSourceAction } from '..';\nimport { Construct } from 'constructs';\nimport { Action } from '../action';\nimport { CodeCommitSourceAction } from '../codecommit/source-action';\n\n                                                                                                                                   \nexport enum CodeBuildActionType {\n                                                                                   \n  BUILD,\n\n                                                        \n  TEST\n}\n\n                                                                                                      \nexport interface CodeBuildActionProps extends codepipeline.CommonAwsActionProps {\n                                                            \n  readonly input: codepipeline.Artifact;\n\nn  readonly extraInputs?: codepipeline.Artifact[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n  readonly outputs?: codepipeline.Artifact[];\n\n                                      \n  readonly project: codebuild.IProject;\n\n                                                                                                                                                     \n  readonly type?: CodeBuildActionType;\n\n                                                                                                                                                                                                                                                                                                       \n  readonly environmentVariables?: { [name: string]: codebuild.BuildEnvironmentVariable };\n\nn  readonly checkSecretsInPlainTextEnvVariables?: boolean;\n\n                                                                                                                                           \n  readonly executeBatchBuild?: boolean;\n\n                                                                                                                                                                                                                                                                       \n  readonly combineBatchBuildArtifacts?: boolean;\n}\n\n                                                             \nexport class CodeBuildAction extends Action {\n  private readonly props: CodeBuildActionProps;\n\n  constructor(props: CodeBuildActionProps) {\n    super({\n      ...props,\n      category: props.type === CodeBuildActionType.TEST\n        ? codepipeline.ActionCategory.TEST\n        : codepipeline.ActionCategory.BUILD,\n      provider: 'CodeBuild',\n      artifactBounds: { minInputs: 1, maxInputs: 5, minOutputs: 0, maxOutputs: 5 },\n      inputs: [props.input, ...props.extraInputs || []],\n      resource: props.project,\n    });\n\n    this.props = props;\n  }\n\nn  public variable(variableName: string): string {\n    return this.variableExpression(variableName);\n  }\n\n  protected bound(scope: Construct, _stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // check for a cross-account action if there are any outputs\n    if ((this.actionProperties.outputs || []).length > 0) {\n      const pipelineStack = cdk.Stack.of(scope);\n      const projectStack = cdk.Stack.of(this.props.project);\n      if (pipelineStack.account !== projectStack.account) {\n        throw new Error('A cross-account CodeBuild action cannot have outputs. ' +\n          'This is a known CodeBuild limitation. ' +\n          'See https://github.com/aws/aws-cdk/issues/4169 for details');\n      }\n    }\n\n    // grant the Pipeline role the required permissions to this Project\n    options.role.addToPolicy(new iam.PolicyStatement({\n      resources: [this.props.project.projectArn],\n      actions: [\n        `codebuild:${this.props.executeBatchBuild ? 'BatchGetBuildBatches' : 'BatchGetBuilds'}`,\n        `codebuild:${this.props.executeBatchBuild ? 'StartBuildBatch' : 'StartBuild'}`,\n        `codebuild:${this.props.executeBatchBuild ? 'StopBuildBatch' : 'StopBuild'}`,\n      ],\n    }));\n\n    // allow the Project access to the Pipeline's artifact Bucket\n    // but only if the project is not imported\n    // (ie., has a role) - otherwise, the IAM library throws an error\n    if (this.props.project.role) {\n      if ((this.actionProperties.outputs || []).length > 0) {\n        options.bucket.grantReadWrite(this.props.project);\n      } else {\n        options.bucket.grantRead(this.props.project);\n      }\n    }\n\n    if (this.props.project instanceof codebuild.Project) {\n      this.props.project.bindToCodePipeline(scope, {\n        artifactBucket: options.bucket,\n      });\n    }\n\n    for (const inputArtifact of this.actionProperties.inputs || []) {\n      // if any of the inputs come from the CodeStarConnectionsSourceAction\n      // with codeBuildCloneOutput=true,\n      // grant the Project's Role to use the connection\n      const connectionArn = inputArtifact.getMetadata(CodeStarConnectionsSourceAction._CONNECTION_ARN_PROPERTY);\n      if (connectionArn) {\n        this.props.project.addToRolePolicy(new iam.PolicyStatement({\n          actions: ['codestar-connections:UseConnection'],\n          resources: [connectionArn],\n        }));\n      }\n\n      // if any of the inputs come from the CodeCommitSourceAction\n      // with codeBuildCloneOutput=true,\n      // grant the Project's Role git pull access to the repository\n      const codecommitRepositoryArn = inputArtifact.getMetadata(CodeCommitSourceAction._FULL_CLONE_ARN_PROPERTY);\n      if (codecommitRepositoryArn) {\n        this.props.project.addToRolePolicy(new iam.PolicyStatement({\n          actions: ['codecommit:GitPull'],\n          resources: [codecommitRepositoryArn],\n        }));\n      }\n    }\n\n    const configuration: any = {\n      ProjectName: this.props.project.projectName,\n      EnvironmentVariables: this.props.environmentVariables &&\n        cdk.Stack.of(scope).toJsonString(codebuild.Project.serializeEnvVariables(this.props.environmentVariables,\n          this.props.checkSecretsInPlainTextEnvVariables ?? true, this.props.project)),\n    };\n    if ((this.actionProperties.inputs || []).length > 1) {\n      // lazy, because the Artifact name might be generated lazily\n      configuration.PrimarySource = cdk.Lazy.string({ produce: () => this.props.input.artifactName });\n    }\n    if (this.props.executeBatchBuild) {\n      configuration.BatchEnabled = 'true';\n      this.props.project.enableBatchBuilds();\n\n      if (this.props.combineBatchBuildArtifacts) {\n        configuration.CombineArtifacts = 'true';\n      }\n    }\n    return {\n      configuration,\n    };\n  }\n}\n"],
  "mappings": "qPAAA,UAAA,QAAA,0BACA,aAAA,QAAA,6BACA,IAAA,QAAA,oBACA,IAAA,QAAA,iBACA,IAAA,QAAA,MAEA,SAAA,QAAA,aACA,gBAAA,QAAA,+BAGA,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAE7B,qBAAA,qBAAA,MAAA,GAAA,QAGA,qBAAA,qBAAA,KAAA,GAAA,SALU,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,KAuC/B,6BAAqC,UAAA,MAAM,CAGzC,YAAY,MAA2B,CACrC,MAAM,IACD,MACH,SAAU,MAAM,OAAS,oBAAoB,KACzC,aAAa,eAAe,KAC5B,aAAa,eAAe,MAChC,SAAU,YACV,eAAgB,CAAE,UAAW,EAAG,UAAW,EAAG,WAAY,EAAG,WAAY,GACzE,OAAQ,CAAC,MAAM,MAAO,GAAG,MAAM,aAAe,IAC9C,SAAU,MAAM,mGAGlB,KAAK,MAAQ,MAIR,SAAS,aAAoB,CAClC,MAAO,MAAK,mBAAmB,cAGvB,MAAM,MAAkB,OAA6B,QAAuC,QAGpG,uJAAK,MAAK,iBAAiB,SAAW,IAAI,OAAS,EAAG,CACpD,KAAM,eAAgB,IAAI,MAAM,GAAG,OAC7B,aAAe,IAAI,MAAM,GAAG,KAAK,MAAM,SAC7C,GAAI,cAAc,UAAY,aAAa,QACzC,KAAM,IAAI,OAAM,0JAOpB,QAAQ,KAAK,YAAY,GAAI,KAAI,gBAAgB,CAC/C,UAAW,CAAC,KAAK,MAAM,QAAQ,YAC/B,QAAS,CACP,aAAa,KAAK,MAAM,kBAAoB,uBAAyB,mBACrE,aAAa,KAAK,MAAM,kBAAoB,kBAAoB,eAChE,aAAa,KAAK,MAAM,kBAAoB,iBAAmB,kBAO/D,KAAK,MAAM,QAAQ,MACrB,CAAK,MAAK,iBAAiB,SAAW,IAAI,OAAS,EACjD,QAAQ,OAAO,eAAe,KAAK,MAAM,SAEzC,QAAQ,OAAO,UAAU,KAAK,MAAM,UAIpC,KAAK,MAAM,kBAAmB,WAAU,SAC1C,KAAK,MAAM,QAAQ,mBAAmB,MAAO,CAC3C,eAAgB,QAAQ,SAI5B,SAAW,iBAAiB,MAAK,iBAAiB,QAAU,GAAI,CAI9D,KAAM,eAAgB,cAAc,YAAY,IAAA,gCAAgC,0BAChF,AAAI,eACF,KAAK,MAAM,QAAQ,gBAAgB,GAAI,KAAI,gBAAgB,CACzD,QAAS,CAAC,sCACV,UAAW,CAAC,kBAOhB,KAAM,yBAA0B,cAAc,YAAY,gBAAA,uBAAuB,0BACjF,AAAI,yBACF,KAAK,MAAM,QAAQ,gBAAgB,GAAI,KAAI,gBAAgB,CACzD,QAAS,CAAC,sBACV,UAAW,CAAC,4BAKlB,KAAM,eAAqB,CACzB,YAAa,KAAK,MAAM,QAAQ,YAChC,qBAAsB,KAAK,MAAM,sBAC/B,IAAI,MAAM,GAAG,OAAO,aAAa,UAAU,QAAQ,sBAAsB,KAAK,MAAM,qBAAoB,IACtG,KAAK,MAAM,uCAAmC,MAAA,KAAA,OAAA,GAAI,GAAM,KAAK,MAAM,WAEzE,MAAK,MAAK,iBAAiB,QAAU,IAAI,OAAS,GAEhD,eAAc,cAAgB,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,MAAM,MAAM,gBAE9E,KAAK,MAAM,mBACb,eAAc,aAAe,OAC7B,KAAK,MAAM,QAAQ,oBAEf,KAAK,MAAM,4BACb,eAAc,iBAAmB,SAG9B,CACL,gBA1GN,QAAA,gBAAA",
  "names": []
}
