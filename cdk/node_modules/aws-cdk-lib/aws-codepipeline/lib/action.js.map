{
  "version": 3,
  "sources": ["action.ts"],
  "sourcesContent": ["import * as notifications from '../../aws-codestarnotifications';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport { IResource, Lazy } from '../../core';\nimport { Artifact } from './artifact';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\nexport enum ActionCategory {\n  SOURCE = 'Source',\n  BUILD = 'Build',\n  TEST = 'Test',\n  APPROVAL = 'Approval',\n  DEPLOY = 'Deploy',\n  INVOKE = 'Invoke'\n}\n\n                                                                                                                                                                                                                                                                                                                  \nexport interface ActionArtifactBounds {\n  readonly minInputs: number;\n  readonly maxInputs: number;\n  readonly minOutputs: number;\n  readonly maxOutputs: number;\n}\n\n                                                                                                                                                                                                                                              \nexport class GlobalVariables {\n                                                          \n  public static readonly executionId = '#{codepipeline.PipelineExecutionId}';\n}\n\nexport interface ActionProperties {\n  readonly actionName: string;\n  readonly role?: iam.IRole;\n\nn  readonly region?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly account?: string;\n\n                                                                                                                                                                                         \n  readonly resource?: IResource;\n\n                                                                                                                                                       \n  readonly category: ActionCategory;\n\n                                                            \n  readonly provider: string;\n  readonly owner?: string;\n  readonly version?: string;\n\n                                                                                                                                                                                                                                                                \n  readonly runOrder?: number;\n  readonly artifactBounds: ActionArtifactBounds;\n  readonly inputs?: Artifact[];\n  readonly outputs?: Artifact[];\n\n                                                                                                                                                                          \n  readonly variablesNamespace?: string;\n}\n\nexport interface ActionBindOptions {\n  readonly role: iam.IRole;\n\n  readonly bucket: s3.IBucket;\n}\n\nexport interface ActionConfig {\n  readonly configuration?: any;\n}\n\n                                                               \nexport interface PipelineNotifyOnOptions extends notifications.NotificationRuleOptions {\n                                                                                                                                                                                                                                                                                                                          \n  readonly events: PipelineNotificationEvents[];\n}\n\n                                                                                                                                                              \nexport interface IAction {\n                                                                                                                                                                   \n  readonly actionProperties: ActionProperties;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n  bind(scope: Construct, stage: IStage, options: ActionBindOptions): ActionConfig;\n\n                                                                                                                                                                                                                                                                                                       \n  onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule;\n}\n\n                                                                                                                                                                                                  \nexport interface IPipeline extends IResource, notifications.INotificationRuleSource {\n                                                               \n  readonly pipelineName: string;\n\n                                                              \n  readonly pipelineArn: string;\n\n                                                                                                                                                                                              \n  onEvent(id: string, options?: events.OnEventOptions): events.Rule;\n\n                                                                                                                                                                                                                                                                     \n  onStateChange(id: string, options?: events.OnEventOptions): events.Rule;\n\nn  notifyOn(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options: PipelineNotifyOnOptions,\n  ): notifications.INotificationRule;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  notifyOnExecutionStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n  notifyOnAnyStageStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  notifyOnAnyActionStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n  notifyOnAnyManualApprovalStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n}\n\n                                                                              \nexport interface IStage {\n                                                                          \n  readonly stageName: string;\n\n  readonly pipeline: IPipeline;\n\n                                                     \n  readonly actions: IAction[];\n\n  addAction(action: IAction): void;\n\n  onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule;\n}\n\n                                                   \nexport interface CommonActionProps {\n                                                                                                                                   \n  readonly actionName: string;\n\n                                                                                                                                                                                                                                                                                   \n  readonly runOrder?: number;\n\n                                                                                                                                                                                                                                                                                \n  readonly variablesNamespace?: string;\n}\n\n                                                                                                                                              \nexport interface CommonAwsActionProps extends CommonActionProps {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly role?: iam.IRole;\n}\n\n                                                                                                                                                                                                                                                                                \nexport abstract class Action implements IAction {\n                                                                                            \n  protected abstract readonly providedActionProperties: ActionProperties;\n\n  private __actionProperties?: ActionProperties;\n  private __pipeline?: IPipeline;\n  private __stage?: IStage;\n  private __scope?: Construct;\n  private readonly _namespaceToken: string;\n  private _customerProvidedNamespace?: string;\n  private _actualNamespace?: string;\n\n  private _variableReferenced = false;\n\n  protected constructor() {\n    this._namespaceToken = Lazy.string({\n      produce: () => {\n        // make sure the action was bound (= added to a pipeline)\n        if (this._actualNamespace === undefined) {\n          throw new Error(`Cannot reference variables of action '${this.actionProperties.actionName}', ` +\n            'as that action was never added to a pipeline');\n        } else {\n          return this._customerProvidedNamespace !== undefined\n            // if a customer passed a namespace explicitly, always use that\n            ? this._customerProvidedNamespace\n            // otherwise, only return a namespace if any variable was referenced\n            : (this._variableReferenced ? this._actualNamespace : undefined);\n        }\n      },\n    });\n  }\n\n  public get actionProperties(): ActionProperties {\n    if (this.__actionProperties === undefined) {\n      const actionProperties = this.providedActionProperties;\n      this._customerProvidedNamespace = actionProperties.variablesNamespace;\n      this.__actionProperties = {\n        ...actionProperties,\n        variablesNamespace: this._customerProvidedNamespace === undefined\n          ? this._namespaceToken\n          : this._customerProvidedNamespace,\n      };\n    }\n    return this.__actionProperties;\n  }\n\n  public bind(scope: Construct, stage: IStage, options: ActionBindOptions): ActionConfig {\n    this.__pipeline = stage.pipeline;\n    this.__stage = stage;\n    this.__scope = scope;\n\n    this._actualNamespace = this._customerProvidedNamespace === undefined\n      // default a namespace name, based on the stage and action names\n      ? `${stage.stageName}_${this.actionProperties.actionName}_NS`\n      : this._customerProvidedNamespace;\n\n    return this.bound(scope, stage, options);\n  }\n\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps) {\n    const rule = new events.Rule(this._scope, name, options);\n    rule.addTarget(target);\n    rule.addEventPattern({\n      detailType: ['CodePipeline Action Execution State Change'],\n      source: ['aws.codepipeline'],\n      resources: [this._pipeline.pipelineArn],\n      detail: {\n        stage: [this._stage.stageName],\n        action: [this.actionProperties.actionName],\n      },\n    });\n    return rule;\n  }\n\n  protected variableExpression(variableName: string): string {\n    this._variableReferenced = true;\n    return `#{${this._namespaceToken}.${variableName}}`;\n  }\n\n                                                                              \n  protected abstract bound(scope: Construct, stage: IStage, options: ActionBindOptions): ActionConfig;\n\n  private get _pipeline(): IPipeline {\n    if (this.__pipeline) {\n      return this.__pipeline;\n    } else {\n      throw new Error('Action must be added to a stage that is part of a pipeline before using onStateChange');\n    }\n  }\n\n  private get _stage(): IStage {\n    if (this.__stage) {\n      return this.__stage;\n    } else {\n      throw new Error('Action must be added to a stage that is part of a pipeline before using onStateChange');\n    }\n  }\n\n  /**\n   * Retrieves the Construct scope of this Action.\n   * Only available after the Action has been added to a Stage,\n   * and that Stage to a Pipeline.\n   */\n  private get _scope(): Construct {\n    if (this.__scope) {\n      return this.__scope;\n    } else {\n      throw new Error('Action must be added to a stage that is part of a pipeline first');\n    }\n  }\n}\n\n                                                                                                                                                                 \nexport enum PipelineNotificationEvents {\n                                                                    \n  PIPELINE_EXECUTION_FAILED = 'codepipeline-pipeline-pipeline-execution-failed',\n\n                                                                      \n  PIPELINE_EXECUTION_CANCELED = 'codepipeline-pipeline-pipeline-execution-canceled',\n\n                                                                     \n  PIPELINE_EXECUTION_STARTED = 'codepipeline-pipeline-pipeline-execution-started',\n\n                                                                     \n  PIPELINE_EXECUTION_RESUMED = 'codepipeline-pipeline-pipeline-execution-resumed',\n\n                                                                       \n  PIPELINE_EXECUTION_SUCCEEDED = 'codepipeline-pipeline-pipeline-execution-succeeded',\n\n                                                                        \n  PIPELINE_EXECUTION_SUPERSEDED = 'codepipeline-pipeline-pipeline-execution-superseded',\n\n                                                                           \n  STAGE_EXECUTION_STARTED = 'codepipeline-pipeline-stage-execution-started',\n\n                                                                           \n  STAGE_EXECUTION_SUCCEEDED = 'codepipeline-pipeline-stage-execution-succeeded',\n\n                                                                         \n  STAGE_EXECUTION_RESUMED = 'codepipeline-pipeline-stage-execution-resumed',\n\n                                                                          \n  STAGE_EXECUTION_CANCELED = 'codepipeline-pipeline-stage-execution-canceled',\n\n                                                                        \n  STAGE_EXECUTION_FAILED = 'codepipeline-pipeline-stage-execution-failed',\n\n                                                                              \n  ACTION_EXECUTION_SUCCEEDED = 'codepipeline-pipeline-action-execution-succeeded',\n\n                                                                           \n  ACTION_EXECUTION_FAILED = 'codepipeline-pipeline-action-execution-failed',\n\n                                                                             \n  ACTION_EXECUTION_CANCELED = 'codepipeline-pipeline-action-execution-canceled',\n\n                                                                            \n  ACTION_EXECUTION_STARTED = 'codepipeline-pipeline-action-execution-started',\n\n                                                                          \n  MANUAL_APPROVAL_FAILED = 'codepipeline-pipeline-manual-approval-failed',\n\n                                                                          \n  MANUAL_APPROVAL_NEEDED = 'codepipeline-pipeline-manual-approval-needed',\n\n                                                                             \n  MANUAL_APPROVAL_SUCCEEDED = 'codepipeline-pipeline-manual-approval-succeeded',\n}\n"],
  "mappings": "kSACA,OAAA,QAAA,oBAGA,OAAA,QAAA,cAOA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CACxB,gBAAA,OAAA,SACA,gBAAA,MAAA,QACA,gBAAA,KAAA,OACA,gBAAA,SAAA,WACA,gBAAA,OAAA,SACA,gBAAA,OAAA,WANU,eAAA,QAAA,gBAAA,SAAA,eAAc,KAkB1B,qBAA4B,EAA5B,QAAA,gBAAA,gIAEyB,gBAAA,YAAc,sCAkJvC,YAA4B,CAc1B,aAAA,CAFQ,KAAA,oBAAsB,GAG5B,KAAK,gBAAkB,OAAA,KAAK,OAAO,CACjC,QAAS,IAAK,CAEZ,GAAI,KAAK,mBAAqB,OAC5B,KAAM,IAAI,OAAM,yCAAyC,KAAK,iBAAiB,6DAG/E,MAAO,MAAK,6BAA+B,OAEvC,KAAK,2BAEJ,KAAK,oBAAsB,KAAK,iBAAmB,aAMrD,mBAAgB,CACzB,GAAI,KAAK,qBAAuB,OAAW,CACzC,KAAM,kBAAmB,KAAK,yBAC9B,KAAK,2BAA6B,iBAAiB,mBACnD,KAAK,mBAAqB,IACrB,iBACH,mBAAoB,KAAK,6BAA+B,OACpD,KAAK,gBACL,KAAK,4BAGb,MAAO,MAAK,mBAGP,KAAK,MAAkB,MAAe,QAA0B,2JACrE,KAAK,WAAa,MAAM,SACxB,KAAK,QAAU,MACf,KAAK,QAAU,MAEf,KAAK,iBAAmB,KAAK,6BAA+B,OAExD,GAAG,MAAM,aAAa,KAAK,iBAAiB,gBAC5C,KAAK,2BAEF,KAAK,MAAM,MAAO,MAAO,SAG3B,cAAc,KAAc,OAA6B,QAA0B,sIACxF,KAAM,MAAO,GAAI,QAAO,KAAK,KAAK,OAAQ,KAAM,SAChD,YAAK,UAAU,QACf,KAAK,gBAAgB,CACnB,WAAY,CAAC,8CACb,OAAQ,CAAC,oBACT,UAAW,CAAC,KAAK,UAAU,aAC3B,OAAQ,CACN,MAAO,CAAC,KAAK,OAAO,WACpB,OAAQ,CAAC,KAAK,iBAAiB,eAG5B,KAGC,mBAAmB,aAAoB,CAC/C,YAAK,oBAAsB,GACpB,KAAK,KAAK,mBAAmB,mBAM1B,YAAS,CACnB,GAAI,KAAK,WACP,MAAO,MAAK,WAEZ,KAAM,IAAI,OAAM,4FAIR,SAAM,CAChB,GAAI,KAAK,QACP,MAAO,MAAK,QAEZ,KAAM,IAAI,OAAM,4FASR,SAAM,CAChB,GAAI,KAAK,QACP,MAAO,MAAK,QAEZ,KAAM,IAAI,OAAM,qEA3GtB,QAAA,OAAA,qGAiHA,GAAY,4BAAZ,AAAA,UAAY,4BAA0B,CAEpC,4BAAA,0BAAA,kDAGA,4BAAA,4BAAA,oDAGA,4BAAA,2BAAA,mDAGA,4BAAA,2BAAA,mDAGA,4BAAA,6BAAA,qDAGA,4BAAA,8BAAA,sDAGA,4BAAA,wBAAA,gDAGA,4BAAA,0BAAA,kDAGA,4BAAA,wBAAA,gDAGA,4BAAA,yBAAA,iDAGA,4BAAA,uBAAA,+CAGA,4BAAA,2BAAA,mDAGA,4BAAA,wBAAA,gDAGA,4BAAA,0BAAA,kDAGA,4BAAA,yBAAA,iDAGA,4BAAA,uBAAA,+CAGA,4BAAA,uBAAA,+CAGA,4BAAA,0BAAA,oDArDU,2BAAA,QAAA,4BAAA,SAAA,2BAA0B",
  "names": []
}
