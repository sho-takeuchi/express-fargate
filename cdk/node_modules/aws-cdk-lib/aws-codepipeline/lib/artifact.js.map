{
  "version": 3,
  "sources": ["artifact.ts"],
  "sourcesContent": ["import * as s3 from '../../aws-s3';\nimport { Lazy, Token } from '../../core';\nimport * as validation from './private/validation';\n\n                                                                                           \nexport class Artifact {\n                                                                                                                                                                                             \n  public static artifact(name: string): Artifact {\n    return new Artifact(name);\n  }\n\n  private _artifactName?: string;\n  private readonly metadata: { [key: string]: any } = {};\n\n  constructor(artifactName?: string) {\n    validation.validateArtifactName(artifactName);\n\n    this._artifactName = artifactName;\n  }\n\n  public get artifactName(): string | undefined {\n    return this._artifactName;\n  }\n\n                                                                                                                                                                                \n  public atPath(fileName: string): ArtifactPath {\n    return new ArtifactPath(this, fileName);\n  }\n\n                                                                                                   \n  public get bucketName() {\n    return artifactAttribute(this, 'BucketName');\n  }\n\n                                                                                                                                                                 \n  public get objectKey() {\n    return artifactAttribute(this, 'ObjectKey');\n  }\n\n                                                                                                                                                                                                                           \n  public get url() {\n    return artifactAttribute(this, 'URL');\n  }\n\n                                                                                                                                                                \n  public getParam(jsonFile: string, keyName: string) {\n    return artifactGetParam(this, jsonFile, keyName);\n  }\n\n                                                                                                                                                                            \n  public get s3Location(): s3.Location {\n    return {\n      bucketName: this.bucketName,\n      objectKey: this.objectKey,\n    };\n  }\n\n                                                                                                                                                                                                                                                                               \n  public setMetadata(key: string, value: any): void {\n    this.metadata[key] = value;\n  }\n\n                                                                                                                                                                        \n  public getMetadata(key: string): any {\n    return this.metadata[key];\n  }\n\n  public toString() {\n    return this.artifactName;\n  }\n\n  /** @internal */\n  protected _setName(name: string) {\n    if (this._artifactName) {\n      throw new Error(`Artifact already has name '${this._artifactName}', cannot override it`);\n    } else {\n      this._artifactName = name;\n    }\n  }\n}\n\n                                                                                                                                                             \nexport class ArtifactPath {\n  public static artifactPath(artifactName: string, fileName: string): ArtifactPath {\n    return new ArtifactPath(Artifact.artifact(artifactName), fileName);\n  }\n\n  constructor(readonly artifact: Artifact, readonly fileName: string) {\n\n  }\n\n  public get location() {\n    const artifactName = this.artifact.artifactName\n      ? this.artifact.artifactName\n      : Lazy.string({ produce: () => this.artifact.artifactName });\n    return `${artifactName}::${this.fileName}`;\n  }\n}\n\nfunction artifactAttribute(artifact: Artifact, attributeName: string) {\n  const lazyArtifactName = Lazy.string({ produce: () => artifact.artifactName });\n  return Token.asString({ 'Fn::GetArtifactAtt': [lazyArtifactName, attributeName] });\n}\n\nfunction artifactGetParam(artifact: Artifact, jsonFile: string, keyName: string) {\n  const lazyArtifactName = Lazy.string({ produce: () => artifact.artifactName });\n  return Token.asString({ 'Fn::GetParam': [lazyArtifactName, jsonFile, keyName] });\n}\n"],
  "mappings": "uOACA,OAAA,QAAA,cACA,WAAA,QAAA,wBAGA,cAAqB,CASnB,YAAY,aAAqB,CAFhB,KAAA,SAAmC,GAGlD,WAAW,qBAAqB,cAEhC,KAAK,cAAgB,mBAVT,UAAS,KAAY,CACjC,MAAO,IAAI,UAAS,SAYX,eAAY,CACrB,MAAO,MAAK,cAIP,OAAO,SAAgB,CAC5B,MAAO,IAAI,cAAa,KAAM,aAIrB,aAAU,CACnB,MAAO,mBAAkB,KAAM,iBAItB,YAAS,CAClB,MAAO,mBAAkB,KAAM,gBAItB,MAAG,CACZ,MAAO,mBAAkB,KAAM,OAI1B,SAAS,SAAkB,QAAe,CAC/C,MAAO,kBAAiB,KAAM,SAAU,YAI/B,aAAU,CACnB,MAAO,CACL,WAAY,KAAK,WACjB,UAAW,KAAK,WAKb,YAAY,IAAa,MAAU,CACxC,KAAK,SAAS,KAAO,MAIhB,YAAY,IAAW,CAC5B,MAAO,MAAK,SAAS,KAGhB,UAAQ,CACb,MAAO,MAAK,aAIJ,SAAS,KAAY,CAC7B,GAAI,KAAK,cACP,KAAM,IAAI,OAAM,8BAA8B,KAAK,sCAEnD,KAAK,cAAgB,MAvE3B,QAAA,SAAA,2GA6EA,kBAAyB,CAKvB,YAAqB,SAA6B,SAAgB,CAA7C,KAAA,SAAA,SAA6B,KAAA,SAAA,uFAJpC,cAAa,aAAsB,SAAgB,CAC/D,MAAO,IAAI,cAAa,SAAS,SAAS,cAAe,aAOhD,WAAQ,CAIjB,MAAO,GAHc,KAAK,SAAS,aAC/B,KAAK,SAAS,aACd,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,SAAS,mBACpB,KAAK,YAbpC,QAAA,aAAA,uHAiBA,2BAA2B,SAAoB,cAAqB,CAClE,KAAM,kBAAmB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,SAAS,eAC/D,MAAO,QAAA,MAAM,SAAS,CAAE,qBAAsB,CAAC,iBAAkB,iBAGnE,0BAA0B,SAAoB,SAAkB,QAAe,CAC7E,KAAM,kBAAmB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,SAAS,eAC/D,MAAO,QAAA,MAAM,SAAS,CAAE,eAAgB,CAAC,iBAAkB,SAAU",
  "names": []
}
