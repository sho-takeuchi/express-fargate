{
  "version": 3,
  "sources": ["codepipeline.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:54:59.976Z\",\"fingerprint\":\"zLl568tegzANQ38PLnJH31THailKe3us3MRojDNv9mo=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                         \nexport interface CfnCustomActionTypeProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly category: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly inputArtifactDetails: CfnCustomActionType.ArtifactDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                         \n    readonly outputArtifactDetails: CfnCustomActionType.ArtifactDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    readonly provider: string;\n\n                                                                                                                                                                                                                                               \n    readonly version: string;\n\nn    readonly configurationProperties?: Array<CfnCustomActionType.ConfigurationPropertiesProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                 \n    readonly settings?: CfnCustomActionType.SettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCustomActionTypeProps`\n *\n * @param properties - the TypeScript properties of a `CfnCustomActionTypeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomActionTypePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('category', cdk.requiredValidator)(properties.category));\n    errors.collect(cdk.propertyValidator('category', cdk.validateString)(properties.category));\n    errors.collect(cdk.propertyValidator('configurationProperties', cdk.listValidator(CfnCustomActionType_ConfigurationPropertiesPropertyValidator))(properties.configurationProperties));\n    errors.collect(cdk.propertyValidator('inputArtifactDetails', cdk.requiredValidator)(properties.inputArtifactDetails));\n    errors.collect(cdk.propertyValidator('inputArtifactDetails', CfnCustomActionType_ArtifactDetailsPropertyValidator)(properties.inputArtifactDetails));\n    errors.collect(cdk.propertyValidator('outputArtifactDetails', cdk.requiredValidator)(properties.outputArtifactDetails));\n    errors.collect(cdk.propertyValidator('outputArtifactDetails', CfnCustomActionType_ArtifactDetailsPropertyValidator)(properties.outputArtifactDetails));\n    errors.collect(cdk.propertyValidator('provider', cdk.requiredValidator)(properties.provider));\n    errors.collect(cdk.propertyValidator('provider', cdk.validateString)(properties.provider));\n    errors.collect(cdk.propertyValidator('settings', CfnCustomActionType_SettingsPropertyValidator)(properties.settings));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnCustomActionTypeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType` resource\n *\n * @param properties - the TypeScript properties of a `CfnCustomActionTypeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomActionTypePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomActionTypePropsValidator(properties).assertSuccess();\n    return {\n        Category: cdk.stringToCloudFormation(properties.category),\n        InputArtifactDetails: cfnCustomActionTypeArtifactDetailsPropertyToCloudFormation(properties.inputArtifactDetails),\n        OutputArtifactDetails: cfnCustomActionTypeArtifactDetailsPropertyToCloudFormation(properties.outputArtifactDetails),\n        Provider: cdk.stringToCloudFormation(properties.provider),\n        Version: cdk.stringToCloudFormation(properties.version),\n        ConfigurationProperties: cdk.listMapper(cfnCustomActionTypeConfigurationPropertiesPropertyToCloudFormation)(properties.configurationProperties),\n        Settings: cfnCustomActionTypeSettingsPropertyToCloudFormation(properties.settings),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomActionTypePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomActionTypeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomActionTypeProps>();\n    ret.addPropertyResult('category', 'Category', cfn_parse.FromCloudFormation.getString(properties.Category));\n    ret.addPropertyResult('inputArtifactDetails', 'InputArtifactDetails', CfnCustomActionTypeArtifactDetailsPropertyFromCloudFormation(properties.InputArtifactDetails));\n    ret.addPropertyResult('outputArtifactDetails', 'OutputArtifactDetails', CfnCustomActionTypeArtifactDetailsPropertyFromCloudFormation(properties.OutputArtifactDetails));\n    ret.addPropertyResult('provider', 'Provider', cfn_parse.FromCloudFormation.getString(properties.Provider));\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addPropertyResult('configurationProperties', 'ConfigurationProperties', properties.ConfigurationProperties != null ? cfn_parse.FromCloudFormation.getArray(CfnCustomActionTypeConfigurationPropertiesPropertyFromCloudFormation)(properties.ConfigurationProperties) : undefined);\n    ret.addPropertyResult('settings', 'Settings', properties.Settings != null ? CfnCustomActionTypeSettingsPropertyFromCloudFormation(properties.Settings) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCustomActionType extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodePipeline::CustomActionType\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCustomActionType {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCustomActionTypePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCustomActionType(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                               \n    public category: string;\n\n                                                                                                                                                                                                                                                                                        \n    public inputArtifactDetails: CfnCustomActionType.ArtifactDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                         \n    public outputArtifactDetails: CfnCustomActionType.ArtifactDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    public provider: string;\n\n                                                                                                                                                                                                                                               \n    public version: string;\n\nn    public configurationProperties: Array<CfnCustomActionType.ConfigurationPropertiesProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                 \n    public settings: CfnCustomActionType.SettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnCustomActionTypeProps) {\n        super(scope, id, { type: CfnCustomActionType.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'category', this);\n        cdk.requireProperty(props, 'inputArtifactDetails', this);\n        cdk.requireProperty(props, 'outputArtifactDetails', this);\n        cdk.requireProperty(props, 'provider', this);\n        cdk.requireProperty(props, 'version', this);\n\n        this.category = props.category;\n        this.inputArtifactDetails = props.inputArtifactDetails;\n        this.outputArtifactDetails = props.outputArtifactDetails;\n        this.provider = props.provider;\n        this.version = props.version;\n        this.configurationProperties = props.configurationProperties;\n        this.settings = props.settings;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CodePipeline::CustomActionType\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCustomActionType.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            category: this.category,\n            inputArtifactDetails: this.inputArtifactDetails,\n            outputArtifactDetails: this.outputArtifactDetails,\n            provider: this.provider,\n            version: this.version,\n            configurationProperties: this.configurationProperties,\n            settings: this.settings,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCustomActionTypePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCustomActionType {\n                                                                                                                                                                                                                                                                                 \n    export interface ArtifactDetailsProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly maximumCount: number;\n                                                                                                                                                                                                                                                                                                                          \n        readonly minimumCount: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArtifactDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `ArtifactDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomActionType_ArtifactDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maximumCount', cdk.requiredValidator)(properties.maximumCount));\n    errors.collect(cdk.propertyValidator('maximumCount', cdk.validateNumber)(properties.maximumCount));\n    errors.collect(cdk.propertyValidator('minimumCount', cdk.requiredValidator)(properties.minimumCount));\n    errors.collect(cdk.propertyValidator('minimumCount', cdk.validateNumber)(properties.minimumCount));\n    return errors.wrap('supplied properties not correct for \"ArtifactDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType.ArtifactDetails` resource\n *\n * @param properties - the TypeScript properties of a `ArtifactDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType.ArtifactDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomActionTypeArtifactDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomActionType_ArtifactDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        MaximumCount: cdk.numberToCloudFormation(properties.maximumCount),\n        MinimumCount: cdk.numberToCloudFormation(properties.minimumCount),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomActionTypeArtifactDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomActionType.ArtifactDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomActionType.ArtifactDetailsProperty>();\n    ret.addPropertyResult('maximumCount', 'MaximumCount', cfn_parse.FromCloudFormation.getNumber(properties.MaximumCount));\n    ret.addPropertyResult('minimumCount', 'MinimumCount', cfn_parse.FromCloudFormation.getNumber(properties.MinimumCount));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCustomActionType {\nn    export interface ConfigurationPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly key: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly queryable?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly required: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly secret: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConfigurationPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ConfigurationPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomActionType_ConfigurationPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateBoolean)(properties.key));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('queryable', cdk.validateBoolean)(properties.queryable));\n    errors.collect(cdk.propertyValidator('required', cdk.requiredValidator)(properties.required));\n    errors.collect(cdk.propertyValidator('required', cdk.validateBoolean)(properties.required));\n    errors.collect(cdk.propertyValidator('secret', cdk.requiredValidator)(properties.secret));\n    errors.collect(cdk.propertyValidator('secret', cdk.validateBoolean)(properties.secret));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ConfigurationPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType.ConfigurationProperties` resource\n *\n * @param properties - the TypeScript properties of a `ConfigurationPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType.ConfigurationProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomActionTypeConfigurationPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomActionType_ConfigurationPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Key: cdk.booleanToCloudFormation(properties.key),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Queryable: cdk.booleanToCloudFormation(properties.queryable),\n        Required: cdk.booleanToCloudFormation(properties.required),\n        Secret: cdk.booleanToCloudFormation(properties.secret),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomActionTypeConfigurationPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomActionType.ConfigurationPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomActionType.ConfigurationPropertiesProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getBoolean(properties.Key));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('queryable', 'Queryable', properties.Queryable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Queryable) : undefined);\n    ret.addPropertyResult('required', 'Required', cfn_parse.FromCloudFormation.getBoolean(properties.Required));\n    ret.addPropertyResult('secret', 'Secret', cfn_parse.FromCloudFormation.getBoolean(properties.Secret));\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCustomActionType {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface SettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly entityUrlTemplate?: string;\nn        readonly executionUrlTemplate?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly revisionUrlTemplate?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly thirdPartyConfigurationUrl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomActionType_SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('entityUrlTemplate', cdk.validateString)(properties.entityUrlTemplate));\n    errors.collect(cdk.propertyValidator('executionUrlTemplate', cdk.validateString)(properties.executionUrlTemplate));\n    errors.collect(cdk.propertyValidator('revisionUrlTemplate', cdk.validateString)(properties.revisionUrlTemplate));\n    errors.collect(cdk.propertyValidator('thirdPartyConfigurationUrl', cdk.validateString)(properties.thirdPartyConfigurationUrl));\n    return errors.wrap('supplied properties not correct for \"SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType.Settings` resource\n *\n * @param properties - the TypeScript properties of a `SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::CustomActionType.Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomActionTypeSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomActionType_SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        EntityUrlTemplate: cdk.stringToCloudFormation(properties.entityUrlTemplate),\n        ExecutionUrlTemplate: cdk.stringToCloudFormation(properties.executionUrlTemplate),\n        RevisionUrlTemplate: cdk.stringToCloudFormation(properties.revisionUrlTemplate),\n        ThirdPartyConfigurationUrl: cdk.stringToCloudFormation(properties.thirdPartyConfigurationUrl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomActionTypeSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomActionType.SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomActionType.SettingsProperty>();\n    ret.addPropertyResult('entityUrlTemplate', 'EntityUrlTemplate', properties.EntityUrlTemplate != null ? cfn_parse.FromCloudFormation.getString(properties.EntityUrlTemplate) : undefined);\n    ret.addPropertyResult('executionUrlTemplate', 'ExecutionUrlTemplate', properties.ExecutionUrlTemplate != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionUrlTemplate) : undefined);\n    ret.addPropertyResult('revisionUrlTemplate', 'RevisionUrlTemplate', properties.RevisionUrlTemplate != null ? cfn_parse.FromCloudFormation.getString(properties.RevisionUrlTemplate) : undefined);\n    ret.addPropertyResult('thirdPartyConfigurationUrl', 'ThirdPartyConfigurationUrl', properties.ThirdPartyConfigurationUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ThirdPartyConfigurationUrl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnPipelineProps {\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                          \n    readonly stages: Array<CfnPipeline.StageDeclarationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly artifactStore?: CfnPipeline.ArtifactStoreProperty | cdk.IResolvable;\n\nn    readonly artifactStores?: Array<CfnPipeline.ArtifactStoreMapProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                    \n    readonly disableInboundStageTransitions?: Array<CfnPipeline.StageTransitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                         \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly restartExecutionOnUpdate?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPipelineProps`\n *\n * @param properties - the TypeScript properties of a `CfnPipelineProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipelinePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('artifactStore', CfnPipeline_ArtifactStorePropertyValidator)(properties.artifactStore));\n    errors.collect(cdk.propertyValidator('artifactStores', cdk.listValidator(CfnPipeline_ArtifactStoreMapPropertyValidator))(properties.artifactStores));\n    errors.collect(cdk.propertyValidator('disableInboundStageTransitions', cdk.listValidator(CfnPipeline_StageTransitionPropertyValidator))(properties.disableInboundStageTransitions));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('restartExecutionOnUpdate', cdk.validateBoolean)(properties.restartExecutionOnUpdate));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stages', cdk.requiredValidator)(properties.stages));\n    errors.collect(cdk.propertyValidator('stages', cdk.listValidator(CfnPipeline_StageDeclarationPropertyValidator))(properties.stages));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPipelineProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline` resource\n *\n * @param properties - the TypeScript properties of a `CfnPipelineProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelinePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipelinePropsValidator(properties).assertSuccess();\n    return {\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Stages: cdk.listMapper(cfnPipelineStageDeclarationPropertyToCloudFormation)(properties.stages),\n        ArtifactStore: cfnPipelineArtifactStorePropertyToCloudFormation(properties.artifactStore),\n        ArtifactStores: cdk.listMapper(cfnPipelineArtifactStoreMapPropertyToCloudFormation)(properties.artifactStores),\n        DisableInboundStageTransitions: cdk.listMapper(cfnPipelineStageTransitionPropertyToCloudFormation)(properties.disableInboundStageTransitions),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RestartExecutionOnUpdate: cdk.booleanToCloudFormation(properties.restartExecutionOnUpdate),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelinePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipelineProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipelineProps>();\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('stages', 'Stages', cfn_parse.FromCloudFormation.getArray(CfnPipelineStageDeclarationPropertyFromCloudFormation)(properties.Stages));\n    ret.addPropertyResult('artifactStore', 'ArtifactStore', properties.ArtifactStore != null ? CfnPipelineArtifactStorePropertyFromCloudFormation(properties.ArtifactStore) : undefined);\n    ret.addPropertyResult('artifactStores', 'ArtifactStores', properties.ArtifactStores != null ? cfn_parse.FromCloudFormation.getArray(CfnPipelineArtifactStoreMapPropertyFromCloudFormation)(properties.ArtifactStores) : undefined);\n    ret.addPropertyResult('disableInboundStageTransitions', 'DisableInboundStageTransitions', properties.DisableInboundStageTransitions != null ? cfn_parse.FromCloudFormation.getArray(CfnPipelineStageTransitionPropertyFromCloudFormation)(properties.DisableInboundStageTransitions) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('restartExecutionOnUpdate', 'RestartExecutionOnUpdate', properties.RestartExecutionOnUpdate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestartExecutionOnUpdate) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPipeline extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodePipeline::Pipeline\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPipeline {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPipelinePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPipeline(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                       \n    public readonly attrVersion: string;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public roleArn: string;\n\n                                                                                                                                                                                                                                          \n    public stages: Array<CfnPipeline.StageDeclarationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public artifactStore: CfnPipeline.ArtifactStoreProperty | cdk.IResolvable | undefined;\n\nn    public artifactStores: Array<CfnPipeline.ArtifactStoreMapProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public disableInboundStageTransitions: Array<CfnPipeline.StageTransitionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                         \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public restartExecutionOnUpdate: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnPipelineProps) {\n        super(scope, id, { type: CfnPipeline.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'roleArn', this);\n        cdk.requireProperty(props, 'stages', this);\n        this.attrVersion = cdk.Token.asString(this.getAtt('Version'));\n\n        this.roleArn = props.roleArn;\n        this.stages = props.stages;\n        this.artifactStore = props.artifactStore;\n        this.artifactStores = props.artifactStores;\n        this.disableInboundStageTransitions = props.disableInboundStageTransitions;\n        this.name = props.name;\n        this.restartExecutionOnUpdate = props.restartExecutionOnUpdate;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::CodePipeline::Pipeline\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPipeline.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            roleArn: this.roleArn,\n            stages: this.stages,\n            artifactStore: this.artifactStore,\n            artifactStores: this.artifactStores,\n            disableInboundStageTransitions: this.disableInboundStageTransitions,\n            name: this.name,\n            restartExecutionOnUpdate: this.restartExecutionOnUpdate,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPipelinePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                      \n    export interface ActionDeclarationProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly actionTypeId: CfnPipeline.ActionTypeIdProperty | cdk.IResolvable;\nn        readonly configuration?: any | cdk.IResolvable;\nn        readonly inputArtifacts?: Array<CfnPipeline.InputArtifactProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly namespace?: string;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly outputArtifacts?: Array<CfnPipeline.OutputArtifactProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly region?: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly roleArn?: string;\n                                                                                                                                                                                                                                                                           \n        readonly runOrder?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActionDeclarationProperty`\n *\n * @param properties - the TypeScript properties of a `ActionDeclarationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_ActionDeclarationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actionTypeId', cdk.requiredValidator)(properties.actionTypeId));\n    errors.collect(cdk.propertyValidator('actionTypeId', CfnPipeline_ActionTypeIdPropertyValidator)(properties.actionTypeId));\n    errors.collect(cdk.propertyValidator('configuration', cdk.validateObject)(properties.configuration));\n    errors.collect(cdk.propertyValidator('inputArtifacts', cdk.listValidator(CfnPipeline_InputArtifactPropertyValidator))(properties.inputArtifacts));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('namespace', cdk.validateString)(properties.namespace));\n    errors.collect(cdk.propertyValidator('outputArtifacts', cdk.listValidator(CfnPipeline_OutputArtifactPropertyValidator))(properties.outputArtifacts));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('runOrder', cdk.validateNumber)(properties.runOrder));\n    return errors.wrap('supplied properties not correct for \"ActionDeclarationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ActionDeclaration` resource\n *\n * @param properties - the TypeScript properties of a `ActionDeclarationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ActionDeclaration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineActionDeclarationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_ActionDeclarationPropertyValidator(properties).assertSuccess();\n    return {\n        ActionTypeId: cfnPipelineActionTypeIdPropertyToCloudFormation(properties.actionTypeId),\n        Configuration: cdk.objectToCloudFormation(properties.configuration),\n        InputArtifacts: cdk.listMapper(cfnPipelineInputArtifactPropertyToCloudFormation)(properties.inputArtifacts),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Namespace: cdk.stringToCloudFormation(properties.namespace),\n        OutputArtifacts: cdk.listMapper(cfnPipelineOutputArtifactPropertyToCloudFormation)(properties.outputArtifacts),\n        Region: cdk.stringToCloudFormation(properties.region),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        RunOrder: cdk.numberToCloudFormation(properties.runOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineActionDeclarationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.ActionDeclarationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.ActionDeclarationProperty>();\n    ret.addPropertyResult('actionTypeId', 'ActionTypeId', CfnPipelineActionTypeIdPropertyFromCloudFormation(properties.ActionTypeId));\n    ret.addPropertyResult('configuration', 'Configuration', properties.Configuration != null ? cfn_parse.FromCloudFormation.getAny(properties.Configuration) : undefined);\n    ret.addPropertyResult('inputArtifacts', 'InputArtifacts', properties.InputArtifacts != null ? cfn_parse.FromCloudFormation.getArray(CfnPipelineInputArtifactPropertyFromCloudFormation)(properties.InputArtifacts) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('namespace', 'Namespace', properties.Namespace != null ? cfn_parse.FromCloudFormation.getString(properties.Namespace) : undefined);\n    ret.addPropertyResult('outputArtifacts', 'OutputArtifacts', properties.OutputArtifacts != null ? cfn_parse.FromCloudFormation.getArray(CfnPipelineOutputArtifactPropertyFromCloudFormation)(properties.OutputArtifacts) : undefined);\n    ret.addPropertyResult('region', 'Region', properties.Region != null ? cfn_parse.FromCloudFormation.getString(properties.Region) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('runOrder', 'RunOrder', properties.RunOrder != null ? cfn_parse.FromCloudFormation.getNumber(properties.RunOrder) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                            \n    export interface ActionTypeIdProperty {\nn        readonly category: string;\nn        readonly owner: string;\nn        readonly provider: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly version: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActionTypeIdProperty`\n *\n * @param properties - the TypeScript properties of a `ActionTypeIdProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_ActionTypeIdPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('category', cdk.requiredValidator)(properties.category));\n    errors.collect(cdk.propertyValidator('category', cdk.validateString)(properties.category));\n    errors.collect(cdk.propertyValidator('owner', cdk.requiredValidator)(properties.owner));\n    errors.collect(cdk.propertyValidator('owner', cdk.validateString)(properties.owner));\n    errors.collect(cdk.propertyValidator('provider', cdk.requiredValidator)(properties.provider));\n    errors.collect(cdk.propertyValidator('provider', cdk.validateString)(properties.provider));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"ActionTypeIdProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ActionTypeId` resource\n *\n * @param properties - the TypeScript properties of a `ActionTypeIdProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ActionTypeId` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineActionTypeIdPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_ActionTypeIdPropertyValidator(properties).assertSuccess();\n    return {\n        Category: cdk.stringToCloudFormation(properties.category),\n        Owner: cdk.stringToCloudFormation(properties.owner),\n        Provider: cdk.stringToCloudFormation(properties.provider),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineActionTypeIdPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.ActionTypeIdProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.ActionTypeIdProperty>();\n    ret.addPropertyResult('category', 'Category', cfn_parse.FromCloudFormation.getString(properties.Category));\n    ret.addPropertyResult('owner', 'Owner', cfn_parse.FromCloudFormation.getString(properties.Owner));\n    ret.addPropertyResult('provider', 'Provider', cfn_parse.FromCloudFormation.getString(properties.Provider));\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface ArtifactStoreProperty {\nn        readonly encryptionKey?: CfnPipeline.EncryptionKeyProperty | cdk.IResolvable;\nn        readonly location: string;\n                                                                                                                                                                                                                                                                             \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArtifactStoreProperty`\n *\n * @param properties - the TypeScript properties of a `ArtifactStoreProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_ArtifactStorePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionKey', CfnPipeline_EncryptionKeyPropertyValidator)(properties.encryptionKey));\n    errors.collect(cdk.propertyValidator('location', cdk.requiredValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ArtifactStoreProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ArtifactStore` resource\n *\n * @param properties - the TypeScript properties of a `ArtifactStoreProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ArtifactStore` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineArtifactStorePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_ArtifactStorePropertyValidator(properties).assertSuccess();\n    return {\n        EncryptionKey: cfnPipelineEncryptionKeyPropertyToCloudFormation(properties.encryptionKey),\n        Location: cdk.stringToCloudFormation(properties.location),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineArtifactStorePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.ArtifactStoreProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.ArtifactStoreProperty>();\n    ret.addPropertyResult('encryptionKey', 'EncryptionKey', properties.EncryptionKey != null ? CfnPipelineEncryptionKeyPropertyFromCloudFormation(properties.EncryptionKey) : undefined);\n    ret.addPropertyResult('location', 'Location', cfn_parse.FromCloudFormation.getString(properties.Location));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\nn    export interface ArtifactStoreMapProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly artifactStore: CfnPipeline.ArtifactStoreProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                 \n        readonly region: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArtifactStoreMapProperty`\n *\n * @param properties - the TypeScript properties of a `ArtifactStoreMapProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_ArtifactStoreMapPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('artifactStore', cdk.requiredValidator)(properties.artifactStore));\n    errors.collect(cdk.propertyValidator('artifactStore', CfnPipeline_ArtifactStorePropertyValidator)(properties.artifactStore));\n    errors.collect(cdk.propertyValidator('region', cdk.requiredValidator)(properties.region));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    return errors.wrap('supplied properties not correct for \"ArtifactStoreMapProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ArtifactStoreMap` resource\n *\n * @param properties - the TypeScript properties of a `ArtifactStoreMapProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.ArtifactStoreMap` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineArtifactStoreMapPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_ArtifactStoreMapPropertyValidator(properties).assertSuccess();\n    return {\n        ArtifactStore: cfnPipelineArtifactStorePropertyToCloudFormation(properties.artifactStore),\n        Region: cdk.stringToCloudFormation(properties.region),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineArtifactStoreMapPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.ArtifactStoreMapProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.ArtifactStoreMapProperty>();\n    ret.addPropertyResult('artifactStore', 'ArtifactStore', CfnPipelineArtifactStorePropertyFromCloudFormation(properties.ArtifactStore));\n    ret.addPropertyResult('region', 'Region', cfn_parse.FromCloudFormation.getString(properties.Region));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                            \n    export interface BlockerDeclarationProperty {\n                                                                                                                                                                                                                                                              \n        readonly name: string;\n                                                                                                                                                                                                                                                              \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlockerDeclarationProperty`\n *\n * @param properties - the TypeScript properties of a `BlockerDeclarationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_BlockerDeclarationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"BlockerDeclarationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.BlockerDeclaration` resource\n *\n * @param properties - the TypeScript properties of a `BlockerDeclarationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.BlockerDeclaration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineBlockerDeclarationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_BlockerDeclarationPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineBlockerDeclarationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.BlockerDeclarationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.BlockerDeclarationProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\nn    export interface EncryptionKeyProperty {\nn        readonly id: string;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionKeyProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionKeyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_EncryptionKeyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"EncryptionKeyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.EncryptionKey` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionKeyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.EncryptionKey` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineEncryptionKeyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_EncryptionKeyPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineEncryptionKeyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.EncryptionKeyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.EncryptionKeyProperty>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                                                                             \n    export interface InputArtifactProperty {\nn        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputArtifactProperty`\n *\n * @param properties - the TypeScript properties of a `InputArtifactProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_InputArtifactPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"InputArtifactProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.InputArtifact` resource\n *\n * @param properties - the TypeScript properties of a `InputArtifactProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.InputArtifact` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineInputArtifactPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_InputArtifactPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineInputArtifactPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.InputArtifactProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.InputArtifactProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                                        \n    export interface OutputArtifactProperty {\nn        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputArtifactProperty`\n *\n * @param properties - the TypeScript properties of a `OutputArtifactProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_OutputArtifactPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"OutputArtifactProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.OutputArtifact` resource\n *\n * @param properties - the TypeScript properties of a `OutputArtifactProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.OutputArtifact` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineOutputArtifactPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_OutputArtifactPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineOutputArtifactPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.OutputArtifactProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.OutputArtifactProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                   \n    export interface StageDeclarationProperty {\n                                                                                                                                                                                                                                                       \n        readonly actions: Array<CfnPipeline.ActionDeclarationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                \n        readonly blockers?: Array<CfnPipeline.BlockerDeclarationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                          \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StageDeclarationProperty`\n *\n * @param properties - the TypeScript properties of a `StageDeclarationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_StageDeclarationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(CfnPipeline_ActionDeclarationPropertyValidator))(properties.actions));\n    errors.collect(cdk.propertyValidator('blockers', cdk.listValidator(CfnPipeline_BlockerDeclarationPropertyValidator))(properties.blockers));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"StageDeclarationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.StageDeclaration` resource\n *\n * @param properties - the TypeScript properties of a `StageDeclarationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.StageDeclaration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineStageDeclarationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_StageDeclarationPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cfnPipelineActionDeclarationPropertyToCloudFormation)(properties.actions),\n        Blockers: cdk.listMapper(cfnPipelineBlockerDeclarationPropertyToCloudFormation)(properties.blockers),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineStageDeclarationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.StageDeclarationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.StageDeclarationProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getArray(CfnPipelineActionDeclarationPropertyFromCloudFormation)(properties.Actions));\n    ret.addPropertyResult('blockers', 'Blockers', properties.Blockers != null ? cfn_parse.FromCloudFormation.getArray(CfnPipelineBlockerDeclarationPropertyFromCloudFormation)(properties.Blockers) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPipeline {\n                                                                                                                                                                                                                                                                                                                                         \n    export interface StageTransitionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly reason: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly stageName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StageTransitionProperty`\n *\n * @param properties - the TypeScript properties of a `StageTransitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipeline_StageTransitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('reason', cdk.requiredValidator)(properties.reason));\n    errors.collect(cdk.propertyValidator('reason', cdk.validateString)(properties.reason));\n    errors.collect(cdk.propertyValidator('stageName', cdk.requiredValidator)(properties.stageName));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    return errors.wrap('supplied properties not correct for \"StageTransitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.StageTransition` resource\n *\n * @param properties - the TypeScript properties of a `StageTransitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Pipeline.StageTransition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelineStageTransitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipeline_StageTransitionPropertyValidator(properties).assertSuccess();\n    return {\n        Reason: cdk.stringToCloudFormation(properties.reason),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelineStageTransitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipeline.StageTransitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.StageTransitionProperty>();\n    ret.addPropertyResult('reason', 'Reason', cfn_parse.FromCloudFormation.getString(properties.Reason));\n    ret.addPropertyResult('stageName', 'StageName', cfn_parse.FromCloudFormation.getString(properties.StageName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnWebhookProps {\n\nn    readonly authentication: string;\n\nn    readonly authenticationConfiguration: CfnWebhook.WebhookAuthConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    readonly filters: Array<CfnWebhook.WebhookFilterRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly targetAction: string;\n\n                                                                                                                                                                                                                                                    \n    readonly targetPipeline: string;\n\nn    readonly targetPipelineVersion: number;\n\n                                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                              \n    readonly registerWithThirdParty?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnWebhookProps`\n *\n * @param properties - the TypeScript properties of a `CfnWebhookProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnWebhookPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authentication', cdk.requiredValidator)(properties.authentication));\n    errors.collect(cdk.propertyValidator('authentication', cdk.validateString)(properties.authentication));\n    errors.collect(cdk.propertyValidator('authenticationConfiguration', cdk.requiredValidator)(properties.authenticationConfiguration));\n    errors.collect(cdk.propertyValidator('authenticationConfiguration', CfnWebhook_WebhookAuthConfigurationPropertyValidator)(properties.authenticationConfiguration));\n    errors.collect(cdk.propertyValidator('filters', cdk.requiredValidator)(properties.filters));\n    errors.collect(cdk.propertyValidator('filters', cdk.listValidator(CfnWebhook_WebhookFilterRulePropertyValidator))(properties.filters));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('registerWithThirdParty', cdk.validateBoolean)(properties.registerWithThirdParty));\n    errors.collect(cdk.propertyValidator('targetAction', cdk.requiredValidator)(properties.targetAction));\n    errors.collect(cdk.propertyValidator('targetAction', cdk.validateString)(properties.targetAction));\n    errors.collect(cdk.propertyValidator('targetPipeline', cdk.requiredValidator)(properties.targetPipeline));\n    errors.collect(cdk.propertyValidator('targetPipeline', cdk.validateString)(properties.targetPipeline));\n    errors.collect(cdk.propertyValidator('targetPipelineVersion', cdk.requiredValidator)(properties.targetPipelineVersion));\n    errors.collect(cdk.propertyValidator('targetPipelineVersion', cdk.validateNumber)(properties.targetPipelineVersion));\n    return errors.wrap('supplied properties not correct for \"CfnWebhookProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Webhook` resource\n *\n * @param properties - the TypeScript properties of a `CfnWebhookProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Webhook` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWebhookPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWebhookPropsValidator(properties).assertSuccess();\n    return {\n        Authentication: cdk.stringToCloudFormation(properties.authentication),\n        AuthenticationConfiguration: cfnWebhookWebhookAuthConfigurationPropertyToCloudFormation(properties.authenticationConfiguration),\n        Filters: cdk.listMapper(cfnWebhookWebhookFilterRulePropertyToCloudFormation)(properties.filters),\n        TargetAction: cdk.stringToCloudFormation(properties.targetAction),\n        TargetPipeline: cdk.stringToCloudFormation(properties.targetPipeline),\n        TargetPipelineVersion: cdk.numberToCloudFormation(properties.targetPipelineVersion),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RegisterWithThirdParty: cdk.booleanToCloudFormation(properties.registerWithThirdParty),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWebhookPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWebhookProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWebhookProps>();\n    ret.addPropertyResult('authentication', 'Authentication', cfn_parse.FromCloudFormation.getString(properties.Authentication));\n    ret.addPropertyResult('authenticationConfiguration', 'AuthenticationConfiguration', CfnWebhookWebhookAuthConfigurationPropertyFromCloudFormation(properties.AuthenticationConfiguration));\n    ret.addPropertyResult('filters', 'Filters', cfn_parse.FromCloudFormation.getArray(CfnWebhookWebhookFilterRulePropertyFromCloudFormation)(properties.Filters));\n    ret.addPropertyResult('targetAction', 'TargetAction', cfn_parse.FromCloudFormation.getString(properties.TargetAction));\n    ret.addPropertyResult('targetPipeline', 'TargetPipeline', cfn_parse.FromCloudFormation.getString(properties.TargetPipeline));\n    ret.addPropertyResult('targetPipelineVersion', 'TargetPipelineVersion', cfn_parse.FromCloudFormation.getNumber(properties.TargetPipelineVersion));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('registerWithThirdParty', 'RegisterWithThirdParty', properties.RegisterWithThirdParty != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RegisterWithThirdParty) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnWebhook extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodePipeline::Webhook\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWebhook {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnWebhookPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnWebhook(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                      \n    public readonly attrUrl: string;\n\nn    public authentication: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public authenticationConfiguration: CfnWebhook.WebhookAuthConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    public filters: Array<CfnWebhook.WebhookFilterRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                \n    public targetAction: string;\n\n                                                                                                                                                                                                                                                    \n    public targetPipeline: string;\n\nn    public targetPipelineVersion: number;\n\n                                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                              \n    public registerWithThirdParty: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnWebhookProps) {\n        super(scope, id, { type: CfnWebhook.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authentication', this);\n        cdk.requireProperty(props, 'authenticationConfiguration', this);\n        cdk.requireProperty(props, 'filters', this);\n        cdk.requireProperty(props, 'targetAction', this);\n        cdk.requireProperty(props, 'targetPipeline', this);\n        cdk.requireProperty(props, 'targetPipelineVersion', this);\n        this.attrUrl = cdk.Token.asString(this.getAtt('Url'));\n\n        this.authentication = props.authentication;\n        this.authenticationConfiguration = props.authenticationConfiguration;\n        this.filters = props.filters;\n        this.targetAction = props.targetAction;\n        this.targetPipeline = props.targetPipeline;\n        this.targetPipelineVersion = props.targetPipelineVersion;\n        this.name = props.name;\n        this.registerWithThirdParty = props.registerWithThirdParty;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWebhook.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authentication: this.authentication,\n            authenticationConfiguration: this.authenticationConfiguration,\n            filters: this.filters,\n            targetAction: this.targetAction,\n            targetPipeline: this.targetPipeline,\n            targetPipelineVersion: this.targetPipelineVersion,\n            name: this.name,\n            registerWithThirdParty: this.registerWithThirdParty,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnWebhookPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnWebhook {\n                                                                                                                                                                                                                                                                                            \n    export interface WebhookAuthConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly allowedIpRange?: string;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly secretToken?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WebhookAuthConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `WebhookAuthConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWebhook_WebhookAuthConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedIpRange', cdk.validateString)(properties.allowedIpRange));\n    errors.collect(cdk.propertyValidator('secretToken', cdk.validateString)(properties.secretToken));\n    return errors.wrap('supplied properties not correct for \"WebhookAuthConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Webhook.WebhookAuthConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `WebhookAuthConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Webhook.WebhookAuthConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWebhookWebhookAuthConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWebhook_WebhookAuthConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedIPRange: cdk.stringToCloudFormation(properties.allowedIpRange),\n        SecretToken: cdk.stringToCloudFormation(properties.secretToken),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWebhookWebhookAuthConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWebhook.WebhookAuthConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWebhook.WebhookAuthConfigurationProperty>();\n    ret.addPropertyResult('allowedIpRange', 'AllowedIPRange', properties.AllowedIPRange != null ? cfn_parse.FromCloudFormation.getString(properties.AllowedIPRange) : undefined);\n    ret.addPropertyResult('secretToken', 'SecretToken', properties.SecretToken != null ? cfn_parse.FromCloudFormation.getString(properties.SecretToken) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnWebhook {\n                                                                                                                                                                                                                                                                                                     \n    export interface WebhookFilterRuleProperty {\nn        readonly jsonPath: string;\nn        readonly matchEquals?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WebhookFilterRuleProperty`\n *\n * @param properties - the TypeScript properties of a `WebhookFilterRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWebhook_WebhookFilterRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jsonPath', cdk.requiredValidator)(properties.jsonPath));\n    errors.collect(cdk.propertyValidator('jsonPath', cdk.validateString)(properties.jsonPath));\n    errors.collect(cdk.propertyValidator('matchEquals', cdk.validateString)(properties.matchEquals));\n    return errors.wrap('supplied properties not correct for \"WebhookFilterRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodePipeline::Webhook.WebhookFilterRule` resource\n *\n * @param properties - the TypeScript properties of a `WebhookFilterRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodePipeline::Webhook.WebhookFilterRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWebhookWebhookFilterRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWebhook_WebhookFilterRulePropertyValidator(properties).assertSuccess();\n    return {\n        JsonPath: cdk.stringToCloudFormation(properties.jsonPath),\n        MatchEquals: cdk.stringToCloudFormation(properties.matchEquals),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWebhookWebhookFilterRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWebhook.WebhookFilterRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWebhook.WebhookFilterRuleProperty>();\n    ret.addPropertyResult('jsonPath', 'JsonPath', cfn_parse.FromCloudFormation.getString(properties.JsonPath));\n    ret.addPropertyResult('matchEquals', 'MatchEquals', properties.MatchEquals != null ? cfn_parse.FromCloudFormation.getString(properties.MatchEquals) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
