{
  "version": 3,
  "sources": ["notification-rule.ts"],
  "sourcesContent": ["import { IResource, Resource, Names } from '../../core';\nimport * as constructs from 'constructs';\nimport { CfnNotificationRule } from './codestarnotifications.generated';\nimport { INotificationRuleSource } from './notification-rule-source';\nimport { INotificationRuleTarget, NotificationRuleTargetConfig } from './notification-rule-target';\n\n                                                                                 \nexport enum DetailType {\n                                                                                                       \n  BASIC = 'BASIC',\n\n                                                                                                                                                                                 \n  FULL = 'FULL',\n}\n\n                                                                                               \nexport interface NotificationRuleOptions {\n                                                                                                                                                                  \n  readonly notificationRuleName?: string;\n\n                                                                                                                                                                          \n  readonly enabled?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                             \n  readonly detailType?: DetailType;\n}\n\n                                                 \nexport interface NotificationRuleProps extends NotificationRuleOptions {\n                                                                                                                                                                                                                                                                                                \n  readonly events: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly source: INotificationRuleSource;\n\n                                                                                                                                                                    \n  readonly targets?: INotificationRuleTarget[];\n}\n\n                                         \nexport interface INotificationRule extends IResource {\n\n                                                                                                                                          \n  readonly notificationRuleArn: string;\n\n                                                                                                                                                                            \n  addTarget(target: INotificationRuleTarget): boolean;\n}\n\n                                                                                               \nexport class NotificationRule extends Resource implements INotificationRule {\n                                                                                                                                                                                                                                                                                   \n  public static fromNotificationRuleArn(scope: constructs.Construct, id: string, notificationRuleArn: string): INotificationRule {\n    class Import extends Resource implements INotificationRule {\n      readonly notificationRuleArn = notificationRuleArn;\n\n      public addTarget(_target: INotificationRuleTarget): boolean {\n        return false;\n      }\n    }\n\n    return new Import(scope, id, {\n      environmentFromArn: notificationRuleArn,\n    });\n  }\n\n                           \n  public readonly notificationRuleArn: string;\n\n  private readonly targets: NotificationRuleTargetConfig[] = [];\n\n  private readonly events: string[] = [];\n\n  constructor(scope: constructs.Construct, id: string, props: NotificationRuleProps) {\n    super(scope, id);\n\n    const source = props.source.bindAsNotificationRuleSource(this);\n\n    this.addEvents(props.events);\n\n    const resource = new CfnNotificationRule(this, 'Resource', {\n      // It has a 64 characters limit for the name\n      name: props.notificationRuleName || Names.uniqueId(this).slice(-64),\n      detailType: props.detailType || DetailType.FULL,\n      targets: this.targets,\n      eventTypeIds: this.events,\n      resource: source.sourceArn,\n      status: props.enabled !== undefined\n        ? (props.enabled ? 'ENABLED' : 'DISABLED')\n        : undefined,\n    });\n\n    this.notificationRuleArn = resource.ref;\n\n    props.targets?.forEach((target) => {\n      this.addTarget(target);\n    });\n  }\n\n                                                                                                              \n  public addTarget(target: INotificationRuleTarget): boolean {\n    this.targets.push(target.bindAsNotificationRuleTarget(this));\n    return true;\n  }\n\n  /**\n   * Adds events to notification rule\n   *\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-buildproject\n   * @param events The list of event types for AWS Codebuild and AWS CodePipeline\n   */\n  private addEvents(events: string[]): void {\n    events.forEach((event) => {\n      if (this.events.includes(event)) {\n        return;\n      }\n\n      this.events.push(event);\n    });\n  }\n}\n"],
  "mappings": "0OAAA,OAAA,QAAA,cAEA,kCAAA,QAAA,qCAKA,GAAY,YAAZ,AAAA,UAAY,YAAU,CAEpB,YAAA,MAAA,QAGA,YAAA,KAAA,SALU,WAAA,QAAA,YAAA,SAAA,WAAU,KA2CtB,8BAAsC,QAAA,QAAQ,CAuB5C,YAAY,MAA6B,GAAY,MAA4B,QAC/E,MAAM,MAAO,IALE,KAAA,QAA0C,GAE1C,KAAA,OAAmB,8FAKlC,KAAM,QAAS,MAAM,OAAO,6BAA6B,MAEzD,KAAK,UAAU,MAAM,QAErB,KAAM,UAAW,GAAI,mCAAA,oBAAoB,KAAM,WAAY,CAEzD,KAAM,MAAM,sBAAwB,OAAA,MAAM,SAAS,MAAM,MAAM,KAC/D,WAAY,MAAM,YAAc,WAAW,KAC3C,QAAS,KAAK,QACd,aAAc,KAAK,OACnB,SAAU,OAAO,UACjB,OAAQ,MAAM,UAAY,OACrB,MAAM,QAAU,UAAY,WAC7B,SAGN,KAAK,oBAAsB,SAAS,IAEpC,IAAA,MAAM,WAAO,MAAA,KAAA,QAAA,GAAE,QAAQ,AAAC,QAAU,CAChC,KAAK,UAAU,gBA3CL,yBAAwB,MAA6B,GAAY,oBAA2B,CACxG,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACW,KAAA,oBAAsB,oBAExB,UAAU,QAAgC,CAC/C,MAAO,IAIX,MAAO,IAAI,QAAO,MAAO,GAAI,CAC3B,mBAAoB,sBAsCjB,UAAU,OAA+B,sGAC9C,KAAK,QAAQ,KAAK,OAAO,6BAA6B,OAC/C,GAUD,UAAU,OAAgB,CAChC,OAAO,QAAQ,AAAC,OAAS,CACvB,AAAI,KAAK,OAAO,SAAS,QAIzB,KAAK,OAAO,KAAK,UApEvB,QAAA,iBAAA",
  "names": []
}
