{
  "version": 3,
  "sources": ["cognito.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:01:52.396Z\",\"fingerprint\":\"KlpCmxgllcWHpo+iRud0JpCe4b1KsljgUM9txcEXGTE=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                            \nexport interface CfnIdentityPoolProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly allowUnauthenticatedIdentities: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly allowClassicFlow?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                               \n    readonly cognitoEvents?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly cognitoIdentityProviders?: Array<CfnIdentityPool.CognitoIdentityProviderProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly cognitoStreams?: CfnIdentityPool.CognitoStreamsProperty | cdk.IResolvable;\n\nn    readonly developerProviderName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    readonly identityPoolName?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly openIdConnectProviderArns?: string[];\n\n                                                                                                                                                                                                                                               \n    readonly pushSync?: CfnIdentityPool.PushSyncProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                      \n    readonly samlProviderArns?: string[];\n\n                                                                                                                                                                                                                                                             \n    readonly supportedLoginProviders?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIdentityPoolProps`\n *\n * @param properties - the TypeScript properties of a `CfnIdentityPoolProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPoolPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowClassicFlow', cdk.validateBoolean)(properties.allowClassicFlow));\n    errors.collect(cdk.propertyValidator('allowUnauthenticatedIdentities', cdk.requiredValidator)(properties.allowUnauthenticatedIdentities));\n    errors.collect(cdk.propertyValidator('allowUnauthenticatedIdentities', cdk.validateBoolean)(properties.allowUnauthenticatedIdentities));\n    errors.collect(cdk.propertyValidator('cognitoEvents', cdk.validateObject)(properties.cognitoEvents));\n    errors.collect(cdk.propertyValidator('cognitoIdentityProviders', cdk.listValidator(CfnIdentityPool_CognitoIdentityProviderPropertyValidator))(properties.cognitoIdentityProviders));\n    errors.collect(cdk.propertyValidator('cognitoStreams', CfnIdentityPool_CognitoStreamsPropertyValidator)(properties.cognitoStreams));\n    errors.collect(cdk.propertyValidator('developerProviderName', cdk.validateString)(properties.developerProviderName));\n    errors.collect(cdk.propertyValidator('identityPoolName', cdk.validateString)(properties.identityPoolName));\n    errors.collect(cdk.propertyValidator('openIdConnectProviderArns', cdk.listValidator(cdk.validateString))(properties.openIdConnectProviderArns));\n    errors.collect(cdk.propertyValidator('pushSync', CfnIdentityPool_PushSyncPropertyValidator)(properties.pushSync));\n    errors.collect(cdk.propertyValidator('samlProviderArns', cdk.listValidator(cdk.validateString))(properties.samlProviderArns));\n    errors.collect(cdk.propertyValidator('supportedLoginProviders', cdk.validateObject)(properties.supportedLoginProviders));\n    return errors.wrap('supplied properties not correct for \"CfnIdentityPoolProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool` resource\n *\n * @param properties - the TypeScript properties of a `CfnIdentityPoolProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPoolPropsValidator(properties).assertSuccess();\n    return {\n        AllowUnauthenticatedIdentities: cdk.booleanToCloudFormation(properties.allowUnauthenticatedIdentities),\n        AllowClassicFlow: cdk.booleanToCloudFormation(properties.allowClassicFlow),\n        CognitoEvents: cdk.objectToCloudFormation(properties.cognitoEvents),\n        CognitoIdentityProviders: cdk.listMapper(cfnIdentityPoolCognitoIdentityProviderPropertyToCloudFormation)(properties.cognitoIdentityProviders),\n        CognitoStreams: cfnIdentityPoolCognitoStreamsPropertyToCloudFormation(properties.cognitoStreams),\n        DeveloperProviderName: cdk.stringToCloudFormation(properties.developerProviderName),\n        IdentityPoolName: cdk.stringToCloudFormation(properties.identityPoolName),\n        OpenIdConnectProviderARNs: cdk.listMapper(cdk.stringToCloudFormation)(properties.openIdConnectProviderArns),\n        PushSync: cfnIdentityPoolPushSyncPropertyToCloudFormation(properties.pushSync),\n        SamlProviderARNs: cdk.listMapper(cdk.stringToCloudFormation)(properties.samlProviderArns),\n        SupportedLoginProviders: cdk.objectToCloudFormation(properties.supportedLoginProviders),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPoolProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPoolProps>();\n    ret.addPropertyResult('allowUnauthenticatedIdentities', 'AllowUnauthenticatedIdentities', cfn_parse.FromCloudFormation.getBoolean(properties.AllowUnauthenticatedIdentities));\n    ret.addPropertyResult('allowClassicFlow', 'AllowClassicFlow', properties.AllowClassicFlow != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowClassicFlow) : undefined);\n    ret.addPropertyResult('cognitoEvents', 'CognitoEvents', properties.CognitoEvents != null ? cfn_parse.FromCloudFormation.getAny(properties.CognitoEvents) : undefined);\n    ret.addPropertyResult('cognitoIdentityProviders', 'CognitoIdentityProviders', properties.CognitoIdentityProviders != null ? cfn_parse.FromCloudFormation.getArray(CfnIdentityPoolCognitoIdentityProviderPropertyFromCloudFormation)(properties.CognitoIdentityProviders) : undefined);\n    ret.addPropertyResult('cognitoStreams', 'CognitoStreams', properties.CognitoStreams != null ? CfnIdentityPoolCognitoStreamsPropertyFromCloudFormation(properties.CognitoStreams) : undefined);\n    ret.addPropertyResult('developerProviderName', 'DeveloperProviderName', properties.DeveloperProviderName != null ? cfn_parse.FromCloudFormation.getString(properties.DeveloperProviderName) : undefined);\n    ret.addPropertyResult('identityPoolName', 'IdentityPoolName', properties.IdentityPoolName != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityPoolName) : undefined);\n    ret.addPropertyResult('openIdConnectProviderArns', 'OpenIdConnectProviderARNs', properties.OpenIdConnectProviderARNs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OpenIdConnectProviderARNs) : undefined);\n    ret.addPropertyResult('pushSync', 'PushSync', properties.PushSync != null ? CfnIdentityPoolPushSyncPropertyFromCloudFormation(properties.PushSync) : undefined);\n    ret.addPropertyResult('samlProviderArns', 'SamlProviderARNs', properties.SamlProviderARNs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SamlProviderARNs) : undefined);\n    ret.addPropertyResult('supportedLoginProviders', 'SupportedLoginProviders', properties.SupportedLoginProviders != null ? cfn_parse.FromCloudFormation.getAny(properties.SupportedLoginProviders) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnIdentityPool extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::IdentityPool\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIdentityPool {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIdentityPoolPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIdentityPool(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                               \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                            \n    public allowUnauthenticatedIdentities: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    public allowClassicFlow: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                               \n    public cognitoEvents: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    public cognitoIdentityProviders: Array<CfnIdentityPool.CognitoIdentityProviderProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    public cognitoStreams: CfnIdentityPool.CognitoStreamsProperty | cdk.IResolvable | undefined;\n\nn    public developerProviderName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public identityPoolName: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public openIdConnectProviderArns: string[] | undefined;\n\n                                                                                                                                                                                                                                               \n    public pushSync: CfnIdentityPool.PushSyncProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                      \n    public samlProviderArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                             \n    public supportedLoginProviders: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnIdentityPoolProps) {\n        super(scope, id, { type: CfnIdentityPool.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'allowUnauthenticatedIdentities', this);\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.allowUnauthenticatedIdentities = props.allowUnauthenticatedIdentities;\n        this.allowClassicFlow = props.allowClassicFlow;\n        this.cognitoEvents = props.cognitoEvents;\n        this.cognitoIdentityProviders = props.cognitoIdentityProviders;\n        this.cognitoStreams = props.cognitoStreams;\n        this.developerProviderName = props.developerProviderName;\n        this.identityPoolName = props.identityPoolName;\n        this.openIdConnectProviderArns = props.openIdConnectProviderArns;\n        this.pushSync = props.pushSync;\n        this.samlProviderArns = props.samlProviderArns;\n        this.supportedLoginProviders = props.supportedLoginProviders;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIdentityPool.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            allowUnauthenticatedIdentities: this.allowUnauthenticatedIdentities,\n            allowClassicFlow: this.allowClassicFlow,\n            cognitoEvents: this.cognitoEvents,\n            cognitoIdentityProviders: this.cognitoIdentityProviders,\n            cognitoStreams: this.cognitoStreams,\n            developerProviderName: this.developerProviderName,\n            identityPoolName: this.identityPoolName,\n            openIdConnectProviderArns: this.openIdConnectProviderArns,\n            pushSync: this.pushSync,\n            samlProviderArns: this.samlProviderArns,\n            supportedLoginProviders: this.supportedLoginProviders,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIdentityPoolPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnIdentityPool {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface CognitoIdentityProviderProperty {\n                                                                                                                                                                                                                                                                                                       \n        readonly clientId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly providerName?: string;\nn        readonly serverSideTokenCheck?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CognitoIdentityProviderProperty`\n *\n * @param properties - the TypeScript properties of a `CognitoIdentityProviderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPool_CognitoIdentityProviderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('providerName', cdk.validateString)(properties.providerName));\n    errors.collect(cdk.propertyValidator('serverSideTokenCheck', cdk.validateBoolean)(properties.serverSideTokenCheck));\n    return errors.wrap('supplied properties not correct for \"CognitoIdentityProviderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool.CognitoIdentityProvider` resource\n *\n * @param properties - the TypeScript properties of a `CognitoIdentityProviderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool.CognitoIdentityProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolCognitoIdentityProviderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPool_CognitoIdentityProviderPropertyValidator(properties).assertSuccess();\n    return {\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        ProviderName: cdk.stringToCloudFormation(properties.providerName),\n        ServerSideTokenCheck: cdk.booleanToCloudFormation(properties.serverSideTokenCheck),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolCognitoIdentityProviderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPool.CognitoIdentityProviderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPool.CognitoIdentityProviderProperty>();\n    ret.addPropertyResult('clientId', 'ClientId', properties.ClientId != null ? cfn_parse.FromCloudFormation.getString(properties.ClientId) : undefined);\n    ret.addPropertyResult('providerName', 'ProviderName', properties.ProviderName != null ? cfn_parse.FromCloudFormation.getString(properties.ProviderName) : undefined);\n    ret.addPropertyResult('serverSideTokenCheck', 'ServerSideTokenCheck', properties.ServerSideTokenCheck != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ServerSideTokenCheck) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnIdentityPool {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface CognitoStreamsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly roleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly streamName?: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly streamingStatus?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CognitoStreamsProperty`\n *\n * @param properties - the TypeScript properties of a `CognitoStreamsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPool_CognitoStreamsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));\n    errors.collect(cdk.propertyValidator('streamingStatus', cdk.validateString)(properties.streamingStatus));\n    return errors.wrap('supplied properties not correct for \"CognitoStreamsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool.CognitoStreams` resource\n *\n * @param properties - the TypeScript properties of a `CognitoStreamsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool.CognitoStreams` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolCognitoStreamsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPool_CognitoStreamsPropertyValidator(properties).assertSuccess();\n    return {\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        StreamName: cdk.stringToCloudFormation(properties.streamName),\n        StreamingStatus: cdk.stringToCloudFormation(properties.streamingStatus),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolCognitoStreamsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPool.CognitoStreamsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPool.CognitoStreamsProperty>();\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);\n    ret.addPropertyResult('streamingStatus', 'StreamingStatus', properties.StreamingStatus != null ? cfn_parse.FromCloudFormation.getString(properties.StreamingStatus) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnIdentityPool {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface PushSyncProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly applicationArns?: string[];\n                                                                                                                                                                                                                                                                                                                      \n        readonly roleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PushSyncProperty`\n *\n * @param properties - the TypeScript properties of a `PushSyncProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPool_PushSyncPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationArns', cdk.listValidator(cdk.validateString))(properties.applicationArns));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"PushSyncProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool.PushSync` resource\n *\n * @param properties - the TypeScript properties of a `PushSyncProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPool.PushSync` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolPushSyncPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPool_PushSyncPropertyValidator(properties).assertSuccess();\n    return {\n        ApplicationArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.applicationArns),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolPushSyncPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPool.PushSyncProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPool.PushSyncProperty>();\n    ret.addPropertyResult('applicationArns', 'ApplicationArns', properties.ApplicationArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ApplicationArns) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                        \nexport interface CfnIdentityPoolRoleAttachmentProps {\n\n                                                                                                                                                                                                                                                                     \n    readonly identityPoolId: string;\n\nn    readonly roleMappings?: { [key: string]: (CfnIdentityPoolRoleAttachment.RoleMappingProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly roles?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIdentityPoolRoleAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnIdentityPoolRoleAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPoolRoleAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('identityPoolId', cdk.requiredValidator)(properties.identityPoolId));\n    errors.collect(cdk.propertyValidator('identityPoolId', cdk.validateString)(properties.identityPoolId));\n    errors.collect(cdk.propertyValidator('roleMappings', cdk.hashValidator(CfnIdentityPoolRoleAttachment_RoleMappingPropertyValidator))(properties.roleMappings));\n    errors.collect(cdk.propertyValidator('roles', cdk.validateObject)(properties.roles));\n    return errors.wrap('supplied properties not correct for \"CfnIdentityPoolRoleAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnIdentityPoolRoleAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolRoleAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPoolRoleAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        IdentityPoolId: cdk.stringToCloudFormation(properties.identityPoolId),\n        RoleMappings: cdk.hashMapper(cfnIdentityPoolRoleAttachmentRoleMappingPropertyToCloudFormation)(properties.roleMappings),\n        Roles: cdk.objectToCloudFormation(properties.roles),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolRoleAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPoolRoleAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPoolRoleAttachmentProps>();\n    ret.addPropertyResult('identityPoolId', 'IdentityPoolId', cfn_parse.FromCloudFormation.getString(properties.IdentityPoolId));\n    ret.addPropertyResult('roleMappings', 'RoleMappings', properties.RoleMappings != null ? cfn_parse.FromCloudFormation.getMap(CfnIdentityPoolRoleAttachmentRoleMappingPropertyFromCloudFormation)(properties.RoleMappings) : undefined);\n    ret.addPropertyResult('roles', 'Roles', properties.Roles != null ? cfn_parse.FromCloudFormation.getAny(properties.Roles) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnIdentityPoolRoleAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::IdentityPoolRoleAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIdentityPoolRoleAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIdentityPoolRoleAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIdentityPoolRoleAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                     \n    public identityPoolId: string;\n\nn    public roleMappings: { [key: string]: (CfnIdentityPoolRoleAttachment.RoleMappingProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public roles: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnIdentityPoolRoleAttachmentProps) {\n        super(scope, id, { type: CfnIdentityPoolRoleAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'identityPoolId', this);\n\n        this.identityPoolId = props.identityPoolId;\n        this.roleMappings = props.roleMappings;\n        this.roles = props.roles;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIdentityPoolRoleAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            identityPoolId: this.identityPoolId,\n            roleMappings: this.roleMappings,\n            roles: this.roles,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIdentityPoolRoleAttachmentPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnIdentityPoolRoleAttachment {\n                                                                                                                                                                                                                                                                      \n    export interface MappingRuleProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly claim: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly matchType: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly roleArn: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MappingRuleProperty`\n *\n * @param properties - the TypeScript properties of a `MappingRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPoolRoleAttachment_MappingRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('claim', cdk.requiredValidator)(properties.claim));\n    errors.collect(cdk.propertyValidator('claim', cdk.validateString)(properties.claim));\n    errors.collect(cdk.propertyValidator('matchType', cdk.requiredValidator)(properties.matchType));\n    errors.collect(cdk.propertyValidator('matchType', cdk.validateString)(properties.matchType));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"MappingRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment.MappingRule` resource\n *\n * @param properties - the TypeScript properties of a `MappingRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment.MappingRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolRoleAttachmentMappingRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPoolRoleAttachment_MappingRulePropertyValidator(properties).assertSuccess();\n    return {\n        Claim: cdk.stringToCloudFormation(properties.claim),\n        MatchType: cdk.stringToCloudFormation(properties.matchType),\n        RoleARN: cdk.stringToCloudFormation(properties.roleArn),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolRoleAttachmentMappingRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPoolRoleAttachment.MappingRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPoolRoleAttachment.MappingRuleProperty>();\n    ret.addPropertyResult('claim', 'Claim', cfn_parse.FromCloudFormation.getString(properties.Claim));\n    ret.addPropertyResult('matchType', 'MatchType', cfn_parse.FromCloudFormation.getString(properties.MatchType));\n    ret.addPropertyResult('roleArn', 'RoleARN', cfn_parse.FromCloudFormation.getString(properties.RoleARN));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnIdentityPoolRoleAttachment {\nn    export interface RoleMappingProperty {\nn        readonly ambiguousRoleResolution?: string;\nn        readonly identityProvider?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly rulesConfiguration?: CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty | cdk.IResolvable;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RoleMappingProperty`\n *\n * @param properties - the TypeScript properties of a `RoleMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPoolRoleAttachment_RoleMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ambiguousRoleResolution', cdk.validateString)(properties.ambiguousRoleResolution));\n    errors.collect(cdk.propertyValidator('identityProvider', cdk.validateString)(properties.identityProvider));\n    errors.collect(cdk.propertyValidator('rulesConfiguration', CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyValidator)(properties.rulesConfiguration));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"RoleMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment.RoleMapping` resource\n *\n * @param properties - the TypeScript properties of a `RoleMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment.RoleMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolRoleAttachmentRoleMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPoolRoleAttachment_RoleMappingPropertyValidator(properties).assertSuccess();\n    return {\n        AmbiguousRoleResolution: cdk.stringToCloudFormation(properties.ambiguousRoleResolution),\n        IdentityProvider: cdk.stringToCloudFormation(properties.identityProvider),\n        RulesConfiguration: cfnIdentityPoolRoleAttachmentRulesConfigurationTypePropertyToCloudFormation(properties.rulesConfiguration),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolRoleAttachmentRoleMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPoolRoleAttachment.RoleMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPoolRoleAttachment.RoleMappingProperty>();\n    ret.addPropertyResult('ambiguousRoleResolution', 'AmbiguousRoleResolution', properties.AmbiguousRoleResolution != null ? cfn_parse.FromCloudFormation.getString(properties.AmbiguousRoleResolution) : undefined);\n    ret.addPropertyResult('identityProvider', 'IdentityProvider', properties.IdentityProvider != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityProvider) : undefined);\n    ret.addPropertyResult('rulesConfiguration', 'RulesConfiguration', properties.RulesConfiguration != null ? CfnIdentityPoolRoleAttachmentRulesConfigurationTypePropertyFromCloudFormation(properties.RulesConfiguration) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnIdentityPoolRoleAttachment {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface RulesConfigurationTypeProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly rules: Array<CfnIdentityPoolRoleAttachment.MappingRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RulesConfigurationTypeProperty`\n *\n * @param properties - the TypeScript properties of a `RulesConfigurationTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnIdentityPoolRoleAttachment_MappingRulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"RulesConfigurationTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType` resource\n *\n * @param properties - the TypeScript properties of a `RulesConfigurationTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIdentityPoolRoleAttachmentRulesConfigurationTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyValidator(properties).assertSuccess();\n    return {\n        Rules: cdk.listMapper(cfnIdentityPoolRoleAttachmentMappingRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIdentityPoolRoleAttachmentRulesConfigurationTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty>();\n    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnIdentityPoolRoleAttachmentMappingRulePropertyFromCloudFormation)(properties.Rules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                    \nexport interface CfnUserPoolProps {\n\nn    readonly accountRecoverySetting?: CfnUserPool.AccountRecoverySettingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                         \n    readonly adminCreateUserConfig?: CfnUserPool.AdminCreateUserConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    readonly aliasAttributes?: string[];\n\n                                                                                                                                                                                                                                                                       \n    readonly autoVerifiedAttributes?: string[];\n\n                                                                                                                                                                                                              \n    readonly deviceConfiguration?: CfnUserPool.DeviceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly emailConfiguration?: CfnUserPool.EmailConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly emailVerificationMessage?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly emailVerificationSubject?: string;\n\nn    readonly enabledMfas?: string[];\n\nn    readonly lambdaConfig?: CfnUserPool.LambdaConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly mfaConfiguration?: string;\n\n                                                                                                                                                                                                                 \n    readonly policies?: CfnUserPool.PoliciesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly schema?: Array<CfnUserPool.SchemaAttributeProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                               \n    readonly smsAuthenticationMessage?: string;\n\n                                                                                                                                                                                                        \n    readonly smsConfiguration?: CfnUserPool.SmsConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                           \n    readonly smsVerificationMessage?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly usernameAttributes?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly usernameConfiguration?: CfnUserPool.UsernameConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    readonly userPoolAddOns?: CfnUserPool.UserPoolAddOnsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                  \n    readonly userPoolName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly userPoolTags?: any;\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly verificationMessageTemplate?: CfnUserPool.VerificationMessageTemplateProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountRecoverySetting', CfnUserPool_AccountRecoverySettingPropertyValidator)(properties.accountRecoverySetting));\n    errors.collect(cdk.propertyValidator('adminCreateUserConfig', CfnUserPool_AdminCreateUserConfigPropertyValidator)(properties.adminCreateUserConfig));\n    errors.collect(cdk.propertyValidator('aliasAttributes', cdk.listValidator(cdk.validateString))(properties.aliasAttributes));\n    errors.collect(cdk.propertyValidator('autoVerifiedAttributes', cdk.listValidator(cdk.validateString))(properties.autoVerifiedAttributes));\n    errors.collect(cdk.propertyValidator('deviceConfiguration', CfnUserPool_DeviceConfigurationPropertyValidator)(properties.deviceConfiguration));\n    errors.collect(cdk.propertyValidator('emailConfiguration', CfnUserPool_EmailConfigurationPropertyValidator)(properties.emailConfiguration));\n    errors.collect(cdk.propertyValidator('emailVerificationMessage', cdk.validateString)(properties.emailVerificationMessage));\n    errors.collect(cdk.propertyValidator('emailVerificationSubject', cdk.validateString)(properties.emailVerificationSubject));\n    errors.collect(cdk.propertyValidator('enabledMfas', cdk.listValidator(cdk.validateString))(properties.enabledMfas));\n    errors.collect(cdk.propertyValidator('lambdaConfig', CfnUserPool_LambdaConfigPropertyValidator)(properties.lambdaConfig));\n    errors.collect(cdk.propertyValidator('mfaConfiguration', cdk.validateString)(properties.mfaConfiguration));\n    errors.collect(cdk.propertyValidator('policies', CfnUserPool_PoliciesPropertyValidator)(properties.policies));\n    errors.collect(cdk.propertyValidator('schema', cdk.listValidator(CfnUserPool_SchemaAttributePropertyValidator))(properties.schema));\n    errors.collect(cdk.propertyValidator('smsAuthenticationMessage', cdk.validateString)(properties.smsAuthenticationMessage));\n    errors.collect(cdk.propertyValidator('smsConfiguration', CfnUserPool_SmsConfigurationPropertyValidator)(properties.smsConfiguration));\n    errors.collect(cdk.propertyValidator('smsVerificationMessage', cdk.validateString)(properties.smsVerificationMessage));\n    errors.collect(cdk.propertyValidator('userPoolAddOns', CfnUserPool_UserPoolAddOnsPropertyValidator)(properties.userPoolAddOns));\n    errors.collect(cdk.propertyValidator('userPoolName', cdk.validateString)(properties.userPoolName));\n    errors.collect(cdk.propertyValidator('userPoolTags', cdk.validateObject)(properties.userPoolTags));\n    errors.collect(cdk.propertyValidator('usernameAttributes', cdk.listValidator(cdk.validateString))(properties.usernameAttributes));\n    errors.collect(cdk.propertyValidator('usernameConfiguration', CfnUserPool_UsernameConfigurationPropertyValidator)(properties.usernameConfiguration));\n    errors.collect(cdk.propertyValidator('verificationMessageTemplate', CfnUserPool_VerificationMessageTemplatePropertyValidator)(properties.verificationMessageTemplate));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolPropsValidator(properties).assertSuccess();\n    return {\n        AccountRecoverySetting: cfnUserPoolAccountRecoverySettingPropertyToCloudFormation(properties.accountRecoverySetting),\n        AdminCreateUserConfig: cfnUserPoolAdminCreateUserConfigPropertyToCloudFormation(properties.adminCreateUserConfig),\n        AliasAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.aliasAttributes),\n        AutoVerifiedAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.autoVerifiedAttributes),\n        DeviceConfiguration: cfnUserPoolDeviceConfigurationPropertyToCloudFormation(properties.deviceConfiguration),\n        EmailConfiguration: cfnUserPoolEmailConfigurationPropertyToCloudFormation(properties.emailConfiguration),\n        EmailVerificationMessage: cdk.stringToCloudFormation(properties.emailVerificationMessage),\n        EmailVerificationSubject: cdk.stringToCloudFormation(properties.emailVerificationSubject),\n        EnabledMfas: cdk.listMapper(cdk.stringToCloudFormation)(properties.enabledMfas),\n        LambdaConfig: cfnUserPoolLambdaConfigPropertyToCloudFormation(properties.lambdaConfig),\n        MfaConfiguration: cdk.stringToCloudFormation(properties.mfaConfiguration),\n        Policies: cfnUserPoolPoliciesPropertyToCloudFormation(properties.policies),\n        Schema: cdk.listMapper(cfnUserPoolSchemaAttributePropertyToCloudFormation)(properties.schema),\n        SmsAuthenticationMessage: cdk.stringToCloudFormation(properties.smsAuthenticationMessage),\n        SmsConfiguration: cfnUserPoolSmsConfigurationPropertyToCloudFormation(properties.smsConfiguration),\n        SmsVerificationMessage: cdk.stringToCloudFormation(properties.smsVerificationMessage),\n        UsernameAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.usernameAttributes),\n        UsernameConfiguration: cfnUserPoolUsernameConfigurationPropertyToCloudFormation(properties.usernameConfiguration),\n        UserPoolAddOns: cfnUserPoolUserPoolAddOnsPropertyToCloudFormation(properties.userPoolAddOns),\n        UserPoolName: cdk.stringToCloudFormation(properties.userPoolName),\n        UserPoolTags: cdk.objectToCloudFormation(properties.userPoolTags),\n        VerificationMessageTemplate: cfnUserPoolVerificationMessageTemplatePropertyToCloudFormation(properties.verificationMessageTemplate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolProps>();\n    ret.addPropertyResult('accountRecoverySetting', 'AccountRecoverySetting', properties.AccountRecoverySetting != null ? CfnUserPoolAccountRecoverySettingPropertyFromCloudFormation(properties.AccountRecoverySetting) : undefined);\n    ret.addPropertyResult('adminCreateUserConfig', 'AdminCreateUserConfig', properties.AdminCreateUserConfig != null ? CfnUserPoolAdminCreateUserConfigPropertyFromCloudFormation(properties.AdminCreateUserConfig) : undefined);\n    ret.addPropertyResult('aliasAttributes', 'AliasAttributes', properties.AliasAttributes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AliasAttributes) : undefined);\n    ret.addPropertyResult('autoVerifiedAttributes', 'AutoVerifiedAttributes', properties.AutoVerifiedAttributes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AutoVerifiedAttributes) : undefined);\n    ret.addPropertyResult('deviceConfiguration', 'DeviceConfiguration', properties.DeviceConfiguration != null ? CfnUserPoolDeviceConfigurationPropertyFromCloudFormation(properties.DeviceConfiguration) : undefined);\n    ret.addPropertyResult('emailConfiguration', 'EmailConfiguration', properties.EmailConfiguration != null ? CfnUserPoolEmailConfigurationPropertyFromCloudFormation(properties.EmailConfiguration) : undefined);\n    ret.addPropertyResult('emailVerificationMessage', 'EmailVerificationMessage', properties.EmailVerificationMessage != null ? cfn_parse.FromCloudFormation.getString(properties.EmailVerificationMessage) : undefined);\n    ret.addPropertyResult('emailVerificationSubject', 'EmailVerificationSubject', properties.EmailVerificationSubject != null ? cfn_parse.FromCloudFormation.getString(properties.EmailVerificationSubject) : undefined);\n    ret.addPropertyResult('enabledMfas', 'EnabledMfas', properties.EnabledMfas != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EnabledMfas) : undefined);\n    ret.addPropertyResult('lambdaConfig', 'LambdaConfig', properties.LambdaConfig != null ? CfnUserPoolLambdaConfigPropertyFromCloudFormation(properties.LambdaConfig) : undefined);\n    ret.addPropertyResult('mfaConfiguration', 'MfaConfiguration', properties.MfaConfiguration != null ? cfn_parse.FromCloudFormation.getString(properties.MfaConfiguration) : undefined);\n    ret.addPropertyResult('policies', 'Policies', properties.Policies != null ? CfnUserPoolPoliciesPropertyFromCloudFormation(properties.Policies) : undefined);\n    ret.addPropertyResult('schema', 'Schema', properties.Schema != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPoolSchemaAttributePropertyFromCloudFormation)(properties.Schema) : undefined);\n    ret.addPropertyResult('smsAuthenticationMessage', 'SmsAuthenticationMessage', properties.SmsAuthenticationMessage != null ? cfn_parse.FromCloudFormation.getString(properties.SmsAuthenticationMessage) : undefined);\n    ret.addPropertyResult('smsConfiguration', 'SmsConfiguration', properties.SmsConfiguration != null ? CfnUserPoolSmsConfigurationPropertyFromCloudFormation(properties.SmsConfiguration) : undefined);\n    ret.addPropertyResult('smsVerificationMessage', 'SmsVerificationMessage', properties.SmsVerificationMessage != null ? cfn_parse.FromCloudFormation.getString(properties.SmsVerificationMessage) : undefined);\n    ret.addPropertyResult('usernameAttributes', 'UsernameAttributes', properties.UsernameAttributes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.UsernameAttributes) : undefined);\n    ret.addPropertyResult('usernameConfiguration', 'UsernameConfiguration', properties.UsernameConfiguration != null ? CfnUserPoolUsernameConfigurationPropertyFromCloudFormation(properties.UsernameConfiguration) : undefined);\n    ret.addPropertyResult('userPoolAddOns', 'UserPoolAddOns', properties.UserPoolAddOns != null ? CfnUserPoolUserPoolAddOnsPropertyFromCloudFormation(properties.UserPoolAddOns) : undefined);\n    ret.addPropertyResult('userPoolName', 'UserPoolName', properties.UserPoolName != null ? cfn_parse.FromCloudFormation.getString(properties.UserPoolName) : undefined);\n    ret.addPropertyResult('userPoolTags', 'UserPoolTags', properties.UserPoolTags != null ? cfn_parse.FromCloudFormation.getAny(properties.UserPoolTags) : undefined as any);\n    ret.addPropertyResult('verificationMessageTemplate', 'VerificationMessageTemplate', properties.VerificationMessageTemplate != null ? CfnUserPoolVerificationMessageTemplatePropertyFromCloudFormation(properties.VerificationMessageTemplate) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnUserPool extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPool\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPool {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPool(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                               \n    public readonly attrArn: string;\n\n                                                                                                                                                \n    public readonly attrProviderName: string;\n\n                                                                                                                                                     \n    public readonly attrProviderUrl: string;\n\nn    public accountRecoverySetting: CfnUserPool.AccountRecoverySettingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                         \n    public adminCreateUserConfig: CfnUserPool.AdminCreateUserConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    public aliasAttributes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                       \n    public autoVerifiedAttributes: string[] | undefined;\n\n                                                                                                                                                                                                              \n    public deviceConfiguration: CfnUserPool.DeviceConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                            \n    public emailConfiguration: CfnUserPool.EmailConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public emailVerificationMessage: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public emailVerificationSubject: string | undefined;\n\nn    public enabledMfas: string[] | undefined;\n\nn    public lambdaConfig: CfnUserPool.LambdaConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public mfaConfiguration: string | undefined;\n\n                                                                                                                                                                                                                 \n    public policies: CfnUserPool.PoliciesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public schema: Array<CfnUserPool.SchemaAttributeProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                               \n    public smsAuthenticationMessage: string | undefined;\n\n                                                                                                                                                                                                        \n    public smsConfiguration: CfnUserPool.SmsConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                           \n    public smsVerificationMessage: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public usernameAttributes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public usernameConfiguration: CfnUserPool.UsernameConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public userPoolAddOns: CfnUserPool.UserPoolAddOnsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                  \n    public userPoolName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                            \n    public verificationMessageTemplate: CfnUserPool.VerificationMessageTemplateProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolProps = {}) {\n        super(scope, id, { type: CfnUserPool.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrProviderName = cdk.Token.asString(this.getAtt('ProviderName'));\n        this.attrProviderUrl = cdk.Token.asString(this.getAtt('ProviderURL'));\n\n        this.accountRecoverySetting = props.accountRecoverySetting;\n        this.adminCreateUserConfig = props.adminCreateUserConfig;\n        this.aliasAttributes = props.aliasAttributes;\n        this.autoVerifiedAttributes = props.autoVerifiedAttributes;\n        this.deviceConfiguration = props.deviceConfiguration;\n        this.emailConfiguration = props.emailConfiguration;\n        this.emailVerificationMessage = props.emailVerificationMessage;\n        this.emailVerificationSubject = props.emailVerificationSubject;\n        this.enabledMfas = props.enabledMfas;\n        this.lambdaConfig = props.lambdaConfig;\n        this.mfaConfiguration = props.mfaConfiguration;\n        this.policies = props.policies;\n        this.schema = props.schema;\n        this.smsAuthenticationMessage = props.smsAuthenticationMessage;\n        this.smsConfiguration = props.smsConfiguration;\n        this.smsVerificationMessage = props.smsVerificationMessage;\n        this.usernameAttributes = props.usernameAttributes;\n        this.usernameConfiguration = props.usernameConfiguration;\n        this.userPoolAddOns = props.userPoolAddOns;\n        this.userPoolName = props.userPoolName;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Cognito::UserPool\", props.userPoolTags, { tagPropertyName: 'userPoolTags' });\n        this.verificationMessageTemplate = props.verificationMessageTemplate;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::Cognito::UserPool\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPool.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            accountRecoverySetting: this.accountRecoverySetting,\n            adminCreateUserConfig: this.adminCreateUserConfig,\n            aliasAttributes: this.aliasAttributes,\n            autoVerifiedAttributes: this.autoVerifiedAttributes,\n            deviceConfiguration: this.deviceConfiguration,\n            emailConfiguration: this.emailConfiguration,\n            emailVerificationMessage: this.emailVerificationMessage,\n            emailVerificationSubject: this.emailVerificationSubject,\n            enabledMfas: this.enabledMfas,\n            lambdaConfig: this.lambdaConfig,\n            mfaConfiguration: this.mfaConfiguration,\n            policies: this.policies,\n            schema: this.schema,\n            smsAuthenticationMessage: this.smsAuthenticationMessage,\n            smsConfiguration: this.smsConfiguration,\n            smsVerificationMessage: this.smsVerificationMessage,\n            usernameAttributes: this.usernameAttributes,\n            usernameConfiguration: this.usernameConfiguration,\n            userPoolAddOns: this.userPoolAddOns,\n            userPoolName: this.userPoolName,\n            userPoolTags: this.tags.renderTags(),\n            verificationMessageTemplate: this.verificationMessageTemplate,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserPool {\nn    export interface AccountRecoverySettingProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly recoveryMechanisms?: Array<CfnUserPool.RecoveryOptionProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccountRecoverySettingProperty`\n *\n * @param properties - the TypeScript properties of a `AccountRecoverySettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_AccountRecoverySettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recoveryMechanisms', cdk.listValidator(CfnUserPool_RecoveryOptionPropertyValidator))(properties.recoveryMechanisms));\n    return errors.wrap('supplied properties not correct for \"AccountRecoverySettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.AccountRecoverySetting` resource\n *\n * @param properties - the TypeScript properties of a `AccountRecoverySettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.AccountRecoverySetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolAccountRecoverySettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_AccountRecoverySettingPropertyValidator(properties).assertSuccess();\n    return {\n        RecoveryMechanisms: cdk.listMapper(cfnUserPoolRecoveryOptionPropertyToCloudFormation)(properties.recoveryMechanisms),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolAccountRecoverySettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.AccountRecoverySettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.AccountRecoverySettingProperty>();\n    ret.addPropertyResult('recoveryMechanisms', 'RecoveryMechanisms', properties.RecoveryMechanisms != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPoolRecoveryOptionPropertyFromCloudFormation)(properties.RecoveryMechanisms) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                      \n    export interface AdminCreateUserConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly allowAdminCreateUserOnly?: boolean | cdk.IResolvable;\nn        readonly inviteMessageTemplate?: CfnUserPool.InviteMessageTemplateProperty | cdk.IResolvable;\nn        readonly unusedAccountValidityDays?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AdminCreateUserConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AdminCreateUserConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_AdminCreateUserConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowAdminCreateUserOnly', cdk.validateBoolean)(properties.allowAdminCreateUserOnly));\n    errors.collect(cdk.propertyValidator('inviteMessageTemplate', CfnUserPool_InviteMessageTemplatePropertyValidator)(properties.inviteMessageTemplate));\n    errors.collect(cdk.propertyValidator('unusedAccountValidityDays', cdk.validateNumber)(properties.unusedAccountValidityDays));\n    return errors.wrap('supplied properties not correct for \"AdminCreateUserConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.AdminCreateUserConfig` resource\n *\n * @param properties - the TypeScript properties of a `AdminCreateUserConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.AdminCreateUserConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolAdminCreateUserConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_AdminCreateUserConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AllowAdminCreateUserOnly: cdk.booleanToCloudFormation(properties.allowAdminCreateUserOnly),\n        InviteMessageTemplate: cfnUserPoolInviteMessageTemplatePropertyToCloudFormation(properties.inviteMessageTemplate),\n        UnusedAccountValidityDays: cdk.numberToCloudFormation(properties.unusedAccountValidityDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolAdminCreateUserConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.AdminCreateUserConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.AdminCreateUserConfigProperty>();\n    ret.addPropertyResult('allowAdminCreateUserOnly', 'AllowAdminCreateUserOnly', properties.AllowAdminCreateUserOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowAdminCreateUserOnly) : undefined);\n    ret.addPropertyResult('inviteMessageTemplate', 'InviteMessageTemplate', properties.InviteMessageTemplate != null ? CfnUserPoolInviteMessageTemplatePropertyFromCloudFormation(properties.InviteMessageTemplate) : undefined);\n    ret.addPropertyResult('unusedAccountValidityDays', 'UnusedAccountValidityDays', properties.UnusedAccountValidityDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.UnusedAccountValidityDays) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                          \n    export interface CustomEmailSenderProperty {\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly lambdaArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly lambdaVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomEmailSenderProperty`\n *\n * @param properties - the TypeScript properties of a `CustomEmailSenderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_CustomEmailSenderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('lambdaArn', cdk.validateString)(properties.lambdaArn));\n    errors.collect(cdk.propertyValidator('lambdaVersion', cdk.validateString)(properties.lambdaVersion));\n    return errors.wrap('supplied properties not correct for \"CustomEmailSenderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.CustomEmailSender` resource\n *\n * @param properties - the TypeScript properties of a `CustomEmailSenderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.CustomEmailSender` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolCustomEmailSenderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_CustomEmailSenderPropertyValidator(properties).assertSuccess();\n    return {\n        LambdaArn: cdk.stringToCloudFormation(properties.lambdaArn),\n        LambdaVersion: cdk.stringToCloudFormation(properties.lambdaVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolCustomEmailSenderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.CustomEmailSenderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.CustomEmailSenderProperty>();\n    ret.addPropertyResult('lambdaArn', 'LambdaArn', properties.LambdaArn != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaArn) : undefined);\n    ret.addPropertyResult('lambdaVersion', 'LambdaVersion', properties.LambdaVersion != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                      \n    export interface CustomSMSSenderProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly lambdaArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly lambdaVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomSMSSenderProperty`\n *\n * @param properties - the TypeScript properties of a `CustomSMSSenderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_CustomSMSSenderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('lambdaArn', cdk.validateString)(properties.lambdaArn));\n    errors.collect(cdk.propertyValidator('lambdaVersion', cdk.validateString)(properties.lambdaVersion));\n    return errors.wrap('supplied properties not correct for \"CustomSMSSenderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.CustomSMSSender` resource\n *\n * @param properties - the TypeScript properties of a `CustomSMSSenderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.CustomSMSSender` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolCustomSMSSenderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_CustomSMSSenderPropertyValidator(properties).assertSuccess();\n    return {\n        LambdaArn: cdk.stringToCloudFormation(properties.lambdaArn),\n        LambdaVersion: cdk.stringToCloudFormation(properties.lambdaVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolCustomSMSSenderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.CustomSMSSenderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.CustomSMSSenderProperty>();\n    ret.addPropertyResult('lambdaArn', 'LambdaArn', properties.LambdaArn != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaArn) : undefined);\n    ret.addPropertyResult('lambdaVersion', 'LambdaVersion', properties.LambdaVersion != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface DeviceConfigurationProperty {\nn        readonly challengeRequiredOnNewDevice?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly deviceOnlyRememberedOnUserPrompt?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeviceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DeviceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_DeviceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('challengeRequiredOnNewDevice', cdk.validateBoolean)(properties.challengeRequiredOnNewDevice));\n    errors.collect(cdk.propertyValidator('deviceOnlyRememberedOnUserPrompt', cdk.validateBoolean)(properties.deviceOnlyRememberedOnUserPrompt));\n    return errors.wrap('supplied properties not correct for \"DeviceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.DeviceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DeviceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.DeviceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolDeviceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_DeviceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ChallengeRequiredOnNewDevice: cdk.booleanToCloudFormation(properties.challengeRequiredOnNewDevice),\n        DeviceOnlyRememberedOnUserPrompt: cdk.booleanToCloudFormation(properties.deviceOnlyRememberedOnUserPrompt),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolDeviceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.DeviceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.DeviceConfigurationProperty>();\n    ret.addPropertyResult('challengeRequiredOnNewDevice', 'ChallengeRequiredOnNewDevice', properties.ChallengeRequiredOnNewDevice != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ChallengeRequiredOnNewDevice) : undefined);\n    ret.addPropertyResult('deviceOnlyRememberedOnUserPrompt', 'DeviceOnlyRememberedOnUserPrompt', properties.DeviceOnlyRememberedOnUserPrompt != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeviceOnlyRememberedOnUserPrompt) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                          \n    export interface EmailConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly configurationSet?: string;\nn        readonly emailSendingAccount?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly from?: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly replyToEmailAddress?: string;\nn        readonly sourceArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EmailConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EmailConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_EmailConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configurationSet', cdk.validateString)(properties.configurationSet));\n    errors.collect(cdk.propertyValidator('emailSendingAccount', cdk.validateString)(properties.emailSendingAccount));\n    errors.collect(cdk.propertyValidator('from', cdk.validateString)(properties.from));\n    errors.collect(cdk.propertyValidator('replyToEmailAddress', cdk.validateString)(properties.replyToEmailAddress));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.validateString)(properties.sourceArn));\n    return errors.wrap('supplied properties not correct for \"EmailConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.EmailConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EmailConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.EmailConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolEmailConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_EmailConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ConfigurationSet: cdk.stringToCloudFormation(properties.configurationSet),\n        EmailSendingAccount: cdk.stringToCloudFormation(properties.emailSendingAccount),\n        From: cdk.stringToCloudFormation(properties.from),\n        ReplyToEmailAddress: cdk.stringToCloudFormation(properties.replyToEmailAddress),\n        SourceArn: cdk.stringToCloudFormation(properties.sourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolEmailConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.EmailConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.EmailConfigurationProperty>();\n    ret.addPropertyResult('configurationSet', 'ConfigurationSet', properties.ConfigurationSet != null ? cfn_parse.FromCloudFormation.getString(properties.ConfigurationSet) : undefined);\n    ret.addPropertyResult('emailSendingAccount', 'EmailSendingAccount', properties.EmailSendingAccount != null ? cfn_parse.FromCloudFormation.getString(properties.EmailSendingAccount) : undefined);\n    ret.addPropertyResult('from', 'From', properties.From != null ? cfn_parse.FromCloudFormation.getString(properties.From) : undefined);\n    ret.addPropertyResult('replyToEmailAddress', 'ReplyToEmailAddress', properties.ReplyToEmailAddress != null ? cfn_parse.FromCloudFormation.getString(properties.ReplyToEmailAddress) : undefined);\n    ret.addPropertyResult('sourceArn', 'SourceArn', properties.SourceArn != null ? cfn_parse.FromCloudFormation.getString(properties.SourceArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\nn    export interface InviteMessageTemplateProperty {\nn        readonly emailMessage?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly emailSubject?: string;\n                                                                                                                                                                                                                                                                                    \n        readonly smsMessage?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InviteMessageTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `InviteMessageTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_InviteMessageTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('emailMessage', cdk.validateString)(properties.emailMessage));\n    errors.collect(cdk.propertyValidator('emailSubject', cdk.validateString)(properties.emailSubject));\n    errors.collect(cdk.propertyValidator('smsMessage', cdk.validateString)(properties.smsMessage));\n    return errors.wrap('supplied properties not correct for \"InviteMessageTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.InviteMessageTemplate` resource\n *\n * @param properties - the TypeScript properties of a `InviteMessageTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.InviteMessageTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolInviteMessageTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_InviteMessageTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        EmailMessage: cdk.stringToCloudFormation(properties.emailMessage),\n        EmailSubject: cdk.stringToCloudFormation(properties.emailSubject),\n        SMSMessage: cdk.stringToCloudFormation(properties.smsMessage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolInviteMessageTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.InviteMessageTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.InviteMessageTemplateProperty>();\n    ret.addPropertyResult('emailMessage', 'EmailMessage', properties.EmailMessage != null ? cfn_parse.FromCloudFormation.getString(properties.EmailMessage) : undefined);\n    ret.addPropertyResult('emailSubject', 'EmailSubject', properties.EmailSubject != null ? cfn_parse.FromCloudFormation.getString(properties.EmailSubject) : undefined);\n    ret.addPropertyResult('smsMessage', 'SMSMessage', properties.SMSMessage != null ? cfn_parse.FromCloudFormation.getString(properties.SMSMessage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                \n    export interface LambdaConfigProperty {\n                                                                                                                                                                                                                                                                         \n        readonly createAuthChallenge?: string;\n                                                                                                                                                                                                                                                                            \n        readonly customEmailSender?: CfnUserPool.CustomEmailSenderProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                   \n        readonly customMessage?: string;\n                                                                                                                                                                                                                                                                        \n        readonly customSmsSender?: CfnUserPool.CustomSMSSenderProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly defineAuthChallenge?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                             \n        readonly postAuthentication?: string;\n                                                                                                                                                                                                                                                                         \n        readonly postConfirmation?: string;\n                                                                                                                                                                                                                                                                           \n        readonly preAuthentication?: string;\n                                                                                                                                                                                                                                                                 \n        readonly preSignUp?: string;\n                                                                                                                                                                                                                                                                                             \n        readonly preTokenGeneration?: string;\n                                                                                                                                                                                                                                                                     \n        readonly userMigration?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly verifyAuthChallengeResponse?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_LambdaConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('createAuthChallenge', cdk.validateString)(properties.createAuthChallenge));\n    errors.collect(cdk.propertyValidator('customEmailSender', CfnUserPool_CustomEmailSenderPropertyValidator)(properties.customEmailSender));\n    errors.collect(cdk.propertyValidator('customMessage', cdk.validateString)(properties.customMessage));\n    errors.collect(cdk.propertyValidator('customSmsSender', CfnUserPool_CustomSMSSenderPropertyValidator)(properties.customSmsSender));\n    errors.collect(cdk.propertyValidator('defineAuthChallenge', cdk.validateString)(properties.defineAuthChallenge));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('postAuthentication', cdk.validateString)(properties.postAuthentication));\n    errors.collect(cdk.propertyValidator('postConfirmation', cdk.validateString)(properties.postConfirmation));\n    errors.collect(cdk.propertyValidator('preAuthentication', cdk.validateString)(properties.preAuthentication));\n    errors.collect(cdk.propertyValidator('preSignUp', cdk.validateString)(properties.preSignUp));\n    errors.collect(cdk.propertyValidator('preTokenGeneration', cdk.validateString)(properties.preTokenGeneration));\n    errors.collect(cdk.propertyValidator('userMigration', cdk.validateString)(properties.userMigration));\n    errors.collect(cdk.propertyValidator('verifyAuthChallengeResponse', cdk.validateString)(properties.verifyAuthChallengeResponse));\n    return errors.wrap('supplied properties not correct for \"LambdaConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.LambdaConfig` resource\n *\n * @param properties - the TypeScript properties of a `LambdaConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.LambdaConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolLambdaConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_LambdaConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CreateAuthChallenge: cdk.stringToCloudFormation(properties.createAuthChallenge),\n        CustomEmailSender: cfnUserPoolCustomEmailSenderPropertyToCloudFormation(properties.customEmailSender),\n        CustomMessage: cdk.stringToCloudFormation(properties.customMessage),\n        CustomSMSSender: cfnUserPoolCustomSMSSenderPropertyToCloudFormation(properties.customSmsSender),\n        DefineAuthChallenge: cdk.stringToCloudFormation(properties.defineAuthChallenge),\n        KMSKeyID: cdk.stringToCloudFormation(properties.kmsKeyId),\n        PostAuthentication: cdk.stringToCloudFormation(properties.postAuthentication),\n        PostConfirmation: cdk.stringToCloudFormation(properties.postConfirmation),\n        PreAuthentication: cdk.stringToCloudFormation(properties.preAuthentication),\n        PreSignUp: cdk.stringToCloudFormation(properties.preSignUp),\n        PreTokenGeneration: cdk.stringToCloudFormation(properties.preTokenGeneration),\n        UserMigration: cdk.stringToCloudFormation(properties.userMigration),\n        VerifyAuthChallengeResponse: cdk.stringToCloudFormation(properties.verifyAuthChallengeResponse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolLambdaConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.LambdaConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.LambdaConfigProperty>();\n    ret.addPropertyResult('createAuthChallenge', 'CreateAuthChallenge', properties.CreateAuthChallenge != null ? cfn_parse.FromCloudFormation.getString(properties.CreateAuthChallenge) : undefined);\n    ret.addPropertyResult('customEmailSender', 'CustomEmailSender', properties.CustomEmailSender != null ? CfnUserPoolCustomEmailSenderPropertyFromCloudFormation(properties.CustomEmailSender) : undefined);\n    ret.addPropertyResult('customMessage', 'CustomMessage', properties.CustomMessage != null ? cfn_parse.FromCloudFormation.getString(properties.CustomMessage) : undefined);\n    ret.addPropertyResult('customSmsSender', 'CustomSMSSender', properties.CustomSMSSender != null ? CfnUserPoolCustomSMSSenderPropertyFromCloudFormation(properties.CustomSMSSender) : undefined);\n    ret.addPropertyResult('defineAuthChallenge', 'DefineAuthChallenge', properties.DefineAuthChallenge != null ? cfn_parse.FromCloudFormation.getString(properties.DefineAuthChallenge) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KMSKeyID', properties.KMSKeyID != null ? cfn_parse.FromCloudFormation.getString(properties.KMSKeyID) : undefined);\n    ret.addPropertyResult('postAuthentication', 'PostAuthentication', properties.PostAuthentication != null ? cfn_parse.FromCloudFormation.getString(properties.PostAuthentication) : undefined);\n    ret.addPropertyResult('postConfirmation', 'PostConfirmation', properties.PostConfirmation != null ? cfn_parse.FromCloudFormation.getString(properties.PostConfirmation) : undefined);\n    ret.addPropertyResult('preAuthentication', 'PreAuthentication', properties.PreAuthentication != null ? cfn_parse.FromCloudFormation.getString(properties.PreAuthentication) : undefined);\n    ret.addPropertyResult('preSignUp', 'PreSignUp', properties.PreSignUp != null ? cfn_parse.FromCloudFormation.getString(properties.PreSignUp) : undefined);\n    ret.addPropertyResult('preTokenGeneration', 'PreTokenGeneration', properties.PreTokenGeneration != null ? cfn_parse.FromCloudFormation.getString(properties.PreTokenGeneration) : undefined);\n    ret.addPropertyResult('userMigration', 'UserMigration', properties.UserMigration != null ? cfn_parse.FromCloudFormation.getString(properties.UserMigration) : undefined);\n    ret.addPropertyResult('verifyAuthChallengeResponse', 'VerifyAuthChallengeResponse', properties.VerifyAuthChallengeResponse != null ? cfn_parse.FromCloudFormation.getString(properties.VerifyAuthChallengeResponse) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                                                         \n    export interface NumberAttributeConstraintsProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly maxValue?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly minValue?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NumberAttributeConstraintsProperty`\n *\n * @param properties - the TypeScript properties of a `NumberAttributeConstraintsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_NumberAttributeConstraintsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxValue', cdk.validateString)(properties.maxValue));\n    errors.collect(cdk.propertyValidator('minValue', cdk.validateString)(properties.minValue));\n    return errors.wrap('supplied properties not correct for \"NumberAttributeConstraintsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.NumberAttributeConstraints` resource\n *\n * @param properties - the TypeScript properties of a `NumberAttributeConstraintsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.NumberAttributeConstraints` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolNumberAttributeConstraintsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_NumberAttributeConstraintsPropertyValidator(properties).assertSuccess();\n    return {\n        MaxValue: cdk.stringToCloudFormation(properties.maxValue),\n        MinValue: cdk.stringToCloudFormation(properties.minValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolNumberAttributeConstraintsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.NumberAttributeConstraintsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.NumberAttributeConstraintsProperty>();\n    ret.addPropertyResult('maxValue', 'MaxValue', properties.MaxValue != null ? cfn_parse.FromCloudFormation.getString(properties.MaxValue) : undefined);\n    ret.addPropertyResult('minValue', 'MinValue', properties.MinValue != null ? cfn_parse.FromCloudFormation.getString(properties.MinValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                       \n    export interface PasswordPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly minimumLength?: number;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly requireLowercase?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly requireNumbers?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly requireSymbols?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly requireUppercase?: boolean | cdk.IResolvable;\nn        readonly temporaryPasswordValidityDays?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PasswordPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `PasswordPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_PasswordPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('minimumLength', cdk.validateNumber)(properties.minimumLength));\n    errors.collect(cdk.propertyValidator('requireLowercase', cdk.validateBoolean)(properties.requireLowercase));\n    errors.collect(cdk.propertyValidator('requireNumbers', cdk.validateBoolean)(properties.requireNumbers));\n    errors.collect(cdk.propertyValidator('requireSymbols', cdk.validateBoolean)(properties.requireSymbols));\n    errors.collect(cdk.propertyValidator('requireUppercase', cdk.validateBoolean)(properties.requireUppercase));\n    errors.collect(cdk.propertyValidator('temporaryPasswordValidityDays', cdk.validateNumber)(properties.temporaryPasswordValidityDays));\n    return errors.wrap('supplied properties not correct for \"PasswordPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.PasswordPolicy` resource\n *\n * @param properties - the TypeScript properties of a `PasswordPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.PasswordPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolPasswordPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_PasswordPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        MinimumLength: cdk.numberToCloudFormation(properties.minimumLength),\n        RequireLowercase: cdk.booleanToCloudFormation(properties.requireLowercase),\n        RequireNumbers: cdk.booleanToCloudFormation(properties.requireNumbers),\n        RequireSymbols: cdk.booleanToCloudFormation(properties.requireSymbols),\n        RequireUppercase: cdk.booleanToCloudFormation(properties.requireUppercase),\n        TemporaryPasswordValidityDays: cdk.numberToCloudFormation(properties.temporaryPasswordValidityDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolPasswordPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.PasswordPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.PasswordPolicyProperty>();\n    ret.addPropertyResult('minimumLength', 'MinimumLength', properties.MinimumLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinimumLength) : undefined);\n    ret.addPropertyResult('requireLowercase', 'RequireLowercase', properties.RequireLowercase != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireLowercase) : undefined);\n    ret.addPropertyResult('requireNumbers', 'RequireNumbers', properties.RequireNumbers != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireNumbers) : undefined);\n    ret.addPropertyResult('requireSymbols', 'RequireSymbols', properties.RequireSymbols != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireSymbols) : undefined);\n    ret.addPropertyResult('requireUppercase', 'RequireUppercase', properties.RequireUppercase != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireUppercase) : undefined);\n    ret.addPropertyResult('temporaryPasswordValidityDays', 'TemporaryPasswordValidityDays', properties.TemporaryPasswordValidityDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.TemporaryPasswordValidityDays) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                               \n    export interface PoliciesProperty {\n                                                                                                                                                                                                                                            \n        readonly passwordPolicy?: CfnUserPool.PasswordPolicyProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PoliciesProperty`\n *\n * @param properties - the TypeScript properties of a `PoliciesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_PoliciesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('passwordPolicy', CfnUserPool_PasswordPolicyPropertyValidator)(properties.passwordPolicy));\n    return errors.wrap('supplied properties not correct for \"PoliciesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.Policies` resource\n *\n * @param properties - the TypeScript properties of a `PoliciesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.Policies` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolPoliciesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_PoliciesPropertyValidator(properties).assertSuccess();\n    return {\n        PasswordPolicy: cfnUserPoolPasswordPolicyPropertyToCloudFormation(properties.passwordPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolPoliciesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.PoliciesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.PoliciesProperty>();\n    ret.addPropertyResult('passwordPolicy', 'PasswordPolicy', properties.PasswordPolicy != null ? CfnUserPoolPasswordPolicyPropertyFromCloudFormation(properties.PasswordPolicy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                                        \n    export interface RecoveryOptionProperty {\n                                                                                                                                                                                                                                                                   \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly priority?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecoveryOptionProperty`\n *\n * @param properties - the TypeScript properties of a `RecoveryOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_RecoveryOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    return errors.wrap('supplied properties not correct for \"RecoveryOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.RecoveryOption` resource\n *\n * @param properties - the TypeScript properties of a `RecoveryOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.RecoveryOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRecoveryOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_RecoveryOptionPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRecoveryOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.RecoveryOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.RecoveryOptionProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('priority', 'Priority', properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                               \n    export interface SchemaAttributeProperty {\n                                                                                                                                                                                                                                                                 \n        readonly attributeDataType?: string;\nn        readonly developerOnlyAttribute?: boolean | cdk.IResolvable;\nn        readonly mutable?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly numberAttributeConstraints?: CfnUserPool.NumberAttributeConstraintsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly required?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                \n        readonly stringAttributeConstraints?: CfnUserPool.StringAttributeConstraintsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaAttributeProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaAttributeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_SchemaAttributePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributeDataType', cdk.validateString)(properties.attributeDataType));\n    errors.collect(cdk.propertyValidator('developerOnlyAttribute', cdk.validateBoolean)(properties.developerOnlyAttribute));\n    errors.collect(cdk.propertyValidator('mutable', cdk.validateBoolean)(properties.mutable));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('numberAttributeConstraints', CfnUserPool_NumberAttributeConstraintsPropertyValidator)(properties.numberAttributeConstraints));\n    errors.collect(cdk.propertyValidator('required', cdk.validateBoolean)(properties.required));\n    errors.collect(cdk.propertyValidator('stringAttributeConstraints', CfnUserPool_StringAttributeConstraintsPropertyValidator)(properties.stringAttributeConstraints));\n    return errors.wrap('supplied properties not correct for \"SchemaAttributeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.SchemaAttribute` resource\n *\n * @param properties - the TypeScript properties of a `SchemaAttributeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.SchemaAttribute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolSchemaAttributePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_SchemaAttributePropertyValidator(properties).assertSuccess();\n    return {\n        AttributeDataType: cdk.stringToCloudFormation(properties.attributeDataType),\n        DeveloperOnlyAttribute: cdk.booleanToCloudFormation(properties.developerOnlyAttribute),\n        Mutable: cdk.booleanToCloudFormation(properties.mutable),\n        Name: cdk.stringToCloudFormation(properties.name),\n        NumberAttributeConstraints: cfnUserPoolNumberAttributeConstraintsPropertyToCloudFormation(properties.numberAttributeConstraints),\n        Required: cdk.booleanToCloudFormation(properties.required),\n        StringAttributeConstraints: cfnUserPoolStringAttributeConstraintsPropertyToCloudFormation(properties.stringAttributeConstraints),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolSchemaAttributePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.SchemaAttributeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.SchemaAttributeProperty>();\n    ret.addPropertyResult('attributeDataType', 'AttributeDataType', properties.AttributeDataType != null ? cfn_parse.FromCloudFormation.getString(properties.AttributeDataType) : undefined);\n    ret.addPropertyResult('developerOnlyAttribute', 'DeveloperOnlyAttribute', properties.DeveloperOnlyAttribute != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeveloperOnlyAttribute) : undefined);\n    ret.addPropertyResult('mutable', 'Mutable', properties.Mutable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Mutable) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('numberAttributeConstraints', 'NumberAttributeConstraints', properties.NumberAttributeConstraints != null ? CfnUserPoolNumberAttributeConstraintsPropertyFromCloudFormation(properties.NumberAttributeConstraints) : undefined);\n    ret.addPropertyResult('required', 'Required', properties.Required != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Required) : undefined);\n    ret.addPropertyResult('stringAttributeConstraints', 'StringAttributeConstraints', properties.StringAttributeConstraints != null ? CfnUserPoolStringAttributeConstraintsPropertyFromCloudFormation(properties.StringAttributeConstraints) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface SmsConfigurationProperty {\nn        readonly externalId?: string;\nn        readonly snsCallerArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SmsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SmsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_SmsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('externalId', cdk.validateString)(properties.externalId));\n    errors.collect(cdk.propertyValidator('snsCallerArn', cdk.validateString)(properties.snsCallerArn));\n    return errors.wrap('supplied properties not correct for \"SmsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.SmsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SmsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.SmsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolSmsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_SmsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ExternalId: cdk.stringToCloudFormation(properties.externalId),\n        SnsCallerArn: cdk.stringToCloudFormation(properties.snsCallerArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolSmsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.SmsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.SmsConfigurationProperty>();\n    ret.addPropertyResult('externalId', 'ExternalId', properties.ExternalId != null ? cfn_parse.FromCloudFormation.getString(properties.ExternalId) : undefined);\n    ret.addPropertyResult('snsCallerArn', 'SnsCallerArn', properties.SnsCallerArn != null ? cfn_parse.FromCloudFormation.getString(properties.SnsCallerArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\nn    export interface StringAttributeConstraintsProperty {\n                                                                                                                                                                                                                                                                          \n        readonly maxLength?: string;\n                                                                                                                                                                                                                                                                          \n        readonly minLength?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StringAttributeConstraintsProperty`\n *\n * @param properties - the TypeScript properties of a `StringAttributeConstraintsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_StringAttributeConstraintsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxLength', cdk.validateString)(properties.maxLength));\n    errors.collect(cdk.propertyValidator('minLength', cdk.validateString)(properties.minLength));\n    return errors.wrap('supplied properties not correct for \"StringAttributeConstraintsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.StringAttributeConstraints` resource\n *\n * @param properties - the TypeScript properties of a `StringAttributeConstraintsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.StringAttributeConstraints` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolStringAttributeConstraintsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_StringAttributeConstraintsPropertyValidator(properties).assertSuccess();\n    return {\n        MaxLength: cdk.stringToCloudFormation(properties.maxLength),\n        MinLength: cdk.stringToCloudFormation(properties.minLength),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolStringAttributeConstraintsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.StringAttributeConstraintsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.StringAttributeConstraintsProperty>();\n    ret.addPropertyResult('maxLength', 'MaxLength', properties.MaxLength != null ? cfn_parse.FromCloudFormation.getString(properties.MaxLength) : undefined);\n    ret.addPropertyResult('minLength', 'MinLength', properties.MinLength != null ? cfn_parse.FromCloudFormation.getString(properties.MinLength) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                         \n    export interface UserPoolAddOnsProperty {\n                                                                                                                                                                                                                                                                     \n        readonly advancedSecurityMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserPoolAddOnsProperty`\n *\n * @param properties - the TypeScript properties of a `UserPoolAddOnsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_UserPoolAddOnsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('advancedSecurityMode', cdk.validateString)(properties.advancedSecurityMode));\n    return errors.wrap('supplied properties not correct for \"UserPoolAddOnsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.UserPoolAddOns` resource\n *\n * @param properties - the TypeScript properties of a `UserPoolAddOnsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.UserPoolAddOns` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolUserPoolAddOnsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_UserPoolAddOnsPropertyValidator(properties).assertSuccess();\n    return {\n        AdvancedSecurityMode: cdk.stringToCloudFormation(properties.advancedSecurityMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolUserPoolAddOnsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.UserPoolAddOnsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.UserPoolAddOnsProperty>();\n    ret.addPropertyResult('advancedSecurityMode', 'AdvancedSecurityMode', properties.AdvancedSecurityMode != null ? cfn_parse.FromCloudFormation.getString(properties.AdvancedSecurityMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                                                                                                \n    export interface UsernameConfigurationProperty {\nn        readonly caseSensitive?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UsernameConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `UsernameConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_UsernameConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('caseSensitive', cdk.validateBoolean)(properties.caseSensitive));\n    return errors.wrap('supplied properties not correct for \"UsernameConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.UsernameConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `UsernameConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.UsernameConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolUsernameConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_UsernameConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CaseSensitive: cdk.booleanToCloudFormation(properties.caseSensitive),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolUsernameConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.UsernameConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.UsernameConfigurationProperty>();\n    ret.addPropertyResult('caseSensitive', 'CaseSensitive', properties.CaseSensitive != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CaseSensitive) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPool {\n                                                                                                                                                                                                                                                                  \n    export interface VerificationMessageTemplateProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly defaultEmailOption?: string;\nn        readonly emailMessage?: string;\nn        readonly emailMessageByLink?: string;\nn        readonly emailSubject?: string;\nn        readonly emailSubjectByLink?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly smsMessage?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VerificationMessageTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `VerificationMessageTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPool_VerificationMessageTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultEmailOption', cdk.validateString)(properties.defaultEmailOption));\n    errors.collect(cdk.propertyValidator('emailMessage', cdk.validateString)(properties.emailMessage));\n    errors.collect(cdk.propertyValidator('emailMessageByLink', cdk.validateString)(properties.emailMessageByLink));\n    errors.collect(cdk.propertyValidator('emailSubject', cdk.validateString)(properties.emailSubject));\n    errors.collect(cdk.propertyValidator('emailSubjectByLink', cdk.validateString)(properties.emailSubjectByLink));\n    errors.collect(cdk.propertyValidator('smsMessage', cdk.validateString)(properties.smsMessage));\n    return errors.wrap('supplied properties not correct for \"VerificationMessageTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPool.VerificationMessageTemplate` resource\n *\n * @param properties - the TypeScript properties of a `VerificationMessageTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPool.VerificationMessageTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolVerificationMessageTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPool_VerificationMessageTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        DefaultEmailOption: cdk.stringToCloudFormation(properties.defaultEmailOption),\n        EmailMessage: cdk.stringToCloudFormation(properties.emailMessage),\n        EmailMessageByLink: cdk.stringToCloudFormation(properties.emailMessageByLink),\n        EmailSubject: cdk.stringToCloudFormation(properties.emailSubject),\n        EmailSubjectByLink: cdk.stringToCloudFormation(properties.emailSubjectByLink),\n        SmsMessage: cdk.stringToCloudFormation(properties.smsMessage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolVerificationMessageTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPool.VerificationMessageTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPool.VerificationMessageTemplateProperty>();\n    ret.addPropertyResult('defaultEmailOption', 'DefaultEmailOption', properties.DefaultEmailOption != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultEmailOption) : undefined);\n    ret.addPropertyResult('emailMessage', 'EmailMessage', properties.EmailMessage != null ? cfn_parse.FromCloudFormation.getString(properties.EmailMessage) : undefined);\n    ret.addPropertyResult('emailMessageByLink', 'EmailMessageByLink', properties.EmailMessageByLink != null ? cfn_parse.FromCloudFormation.getString(properties.EmailMessageByLink) : undefined);\n    ret.addPropertyResult('emailSubject', 'EmailSubject', properties.EmailSubject != null ? cfn_parse.FromCloudFormation.getString(properties.EmailSubject) : undefined);\n    ret.addPropertyResult('emailSubjectByLink', 'EmailSubjectByLink', properties.EmailSubjectByLink != null ? cfn_parse.FromCloudFormation.getString(properties.EmailSubjectByLink) : undefined);\n    ret.addPropertyResult('smsMessage', 'SmsMessage', properties.SmsMessage != null ? cfn_parse.FromCloudFormation.getString(properties.SmsMessage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                \nexport interface CfnUserPoolClientProps {\n\n                                                                                                                                                                                                                                                                       \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                                                                    \n    readonly accessTokenValidity?: number;\n\nn    readonly allowedOAuthFlows?: string[];\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly allowedOAuthFlowsUserPoolClient?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly allowedOAuthScopes?: string[];\n\nn    readonly analyticsConfiguration?: CfnUserPoolClient.AnalyticsConfigurationProperty | cdk.IResolvable;\n\nn    readonly callbackUrLs?: string[];\n\n                                                                                                                                                                                                                                                          \n    readonly clientName?: string;\n\nn    readonly defaultRedirectUri?: string;\n\nn    readonly enableTokenRevocation?: boolean | cdk.IResolvable;\n\nn    readonly explicitAuthFlows?: string[];\n\n                                                                                                                                                                                                                                                                                            \n    readonly generateSecret?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                            \n    readonly idTokenValidity?: number;\n\n                                                                                                                                                                                                                                                 \n    readonly logoutUrLs?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly preventUserExistenceErrors?: string;\n\n                                                                                                                                                                                                                \n    readonly readAttributes?: string[];\n\n                                                                                                                                                                                                                                                                                              \n    readonly refreshTokenValidity?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly supportedIdentityProviders?: string[];\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly tokenValidityUnits?: CfnUserPoolClient.TokenValidityUnitsProperty | cdk.IResolvable;\n\nn    readonly writeAttributes?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolClientProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolClientProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolClientPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessTokenValidity', cdk.validateNumber)(properties.accessTokenValidity));\n    errors.collect(cdk.propertyValidator('allowedOAuthFlows', cdk.listValidator(cdk.validateString))(properties.allowedOAuthFlows));\n    errors.collect(cdk.propertyValidator('allowedOAuthFlowsUserPoolClient', cdk.validateBoolean)(properties.allowedOAuthFlowsUserPoolClient));\n    errors.collect(cdk.propertyValidator('allowedOAuthScopes', cdk.listValidator(cdk.validateString))(properties.allowedOAuthScopes));\n    errors.collect(cdk.propertyValidator('analyticsConfiguration', CfnUserPoolClient_AnalyticsConfigurationPropertyValidator)(properties.analyticsConfiguration));\n    errors.collect(cdk.propertyValidator('callbackUrLs', cdk.listValidator(cdk.validateString))(properties.callbackUrLs));\n    errors.collect(cdk.propertyValidator('clientName', cdk.validateString)(properties.clientName));\n    errors.collect(cdk.propertyValidator('defaultRedirectUri', cdk.validateString)(properties.defaultRedirectUri));\n    errors.collect(cdk.propertyValidator('enableTokenRevocation', cdk.validateBoolean)(properties.enableTokenRevocation));\n    errors.collect(cdk.propertyValidator('explicitAuthFlows', cdk.listValidator(cdk.validateString))(properties.explicitAuthFlows));\n    errors.collect(cdk.propertyValidator('generateSecret', cdk.validateBoolean)(properties.generateSecret));\n    errors.collect(cdk.propertyValidator('idTokenValidity', cdk.validateNumber)(properties.idTokenValidity));\n    errors.collect(cdk.propertyValidator('logoutUrLs', cdk.listValidator(cdk.validateString))(properties.logoutUrLs));\n    errors.collect(cdk.propertyValidator('preventUserExistenceErrors', cdk.validateString)(properties.preventUserExistenceErrors));\n    errors.collect(cdk.propertyValidator('readAttributes', cdk.listValidator(cdk.validateString))(properties.readAttributes));\n    errors.collect(cdk.propertyValidator('refreshTokenValidity', cdk.validateNumber)(properties.refreshTokenValidity));\n    errors.collect(cdk.propertyValidator('supportedIdentityProviders', cdk.listValidator(cdk.validateString))(properties.supportedIdentityProviders));\n    errors.collect(cdk.propertyValidator('tokenValidityUnits', CfnUserPoolClient_TokenValidityUnitsPropertyValidator)(properties.tokenValidityUnits));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('writeAttributes', cdk.listValidator(cdk.validateString))(properties.writeAttributes));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolClientProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolClient` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolClientProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolClient` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolClientPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolClientPropsValidator(properties).assertSuccess();\n    return {\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        AccessTokenValidity: cdk.numberToCloudFormation(properties.accessTokenValidity),\n        AllowedOAuthFlows: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedOAuthFlows),\n        AllowedOAuthFlowsUserPoolClient: cdk.booleanToCloudFormation(properties.allowedOAuthFlowsUserPoolClient),\n        AllowedOAuthScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedOAuthScopes),\n        AnalyticsConfiguration: cfnUserPoolClientAnalyticsConfigurationPropertyToCloudFormation(properties.analyticsConfiguration),\n        CallbackURLs: cdk.listMapper(cdk.stringToCloudFormation)(properties.callbackUrLs),\n        ClientName: cdk.stringToCloudFormation(properties.clientName),\n        DefaultRedirectURI: cdk.stringToCloudFormation(properties.defaultRedirectUri),\n        EnableTokenRevocation: cdk.booleanToCloudFormation(properties.enableTokenRevocation),\n        ExplicitAuthFlows: cdk.listMapper(cdk.stringToCloudFormation)(properties.explicitAuthFlows),\n        GenerateSecret: cdk.booleanToCloudFormation(properties.generateSecret),\n        IdTokenValidity: cdk.numberToCloudFormation(properties.idTokenValidity),\n        LogoutURLs: cdk.listMapper(cdk.stringToCloudFormation)(properties.logoutUrLs),\n        PreventUserExistenceErrors: cdk.stringToCloudFormation(properties.preventUserExistenceErrors),\n        ReadAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.readAttributes),\n        RefreshTokenValidity: cdk.numberToCloudFormation(properties.refreshTokenValidity),\n        SupportedIdentityProviders: cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedIdentityProviders),\n        TokenValidityUnits: cfnUserPoolClientTokenValidityUnitsPropertyToCloudFormation(properties.tokenValidityUnits),\n        WriteAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.writeAttributes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolClientPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolClientProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolClientProps>();\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('accessTokenValidity', 'AccessTokenValidity', properties.AccessTokenValidity != null ? cfn_parse.FromCloudFormation.getNumber(properties.AccessTokenValidity) : undefined);\n    ret.addPropertyResult('allowedOAuthFlows', 'AllowedOAuthFlows', properties.AllowedOAuthFlows != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedOAuthFlows) : undefined);\n    ret.addPropertyResult('allowedOAuthFlowsUserPoolClient', 'AllowedOAuthFlowsUserPoolClient', properties.AllowedOAuthFlowsUserPoolClient != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowedOAuthFlowsUserPoolClient) : undefined);\n    ret.addPropertyResult('allowedOAuthScopes', 'AllowedOAuthScopes', properties.AllowedOAuthScopes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedOAuthScopes) : undefined);\n    ret.addPropertyResult('analyticsConfiguration', 'AnalyticsConfiguration', properties.AnalyticsConfiguration != null ? CfnUserPoolClientAnalyticsConfigurationPropertyFromCloudFormation(properties.AnalyticsConfiguration) : undefined);\n    ret.addPropertyResult('callbackUrLs', 'CallbackURLs', properties.CallbackURLs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CallbackURLs) : undefined);\n    ret.addPropertyResult('clientName', 'ClientName', properties.ClientName != null ? cfn_parse.FromCloudFormation.getString(properties.ClientName) : undefined);\n    ret.addPropertyResult('defaultRedirectUri', 'DefaultRedirectURI', properties.DefaultRedirectURI != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultRedirectURI) : undefined);\n    ret.addPropertyResult('enableTokenRevocation', 'EnableTokenRevocation', properties.EnableTokenRevocation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableTokenRevocation) : undefined);\n    ret.addPropertyResult('explicitAuthFlows', 'ExplicitAuthFlows', properties.ExplicitAuthFlows != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExplicitAuthFlows) : undefined);\n    ret.addPropertyResult('generateSecret', 'GenerateSecret', properties.GenerateSecret != null ? cfn_parse.FromCloudFormation.getBoolean(properties.GenerateSecret) : undefined);\n    ret.addPropertyResult('idTokenValidity', 'IdTokenValidity', properties.IdTokenValidity != null ? cfn_parse.FromCloudFormation.getNumber(properties.IdTokenValidity) : undefined);\n    ret.addPropertyResult('logoutUrLs', 'LogoutURLs', properties.LogoutURLs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LogoutURLs) : undefined);\n    ret.addPropertyResult('preventUserExistenceErrors', 'PreventUserExistenceErrors', properties.PreventUserExistenceErrors != null ? cfn_parse.FromCloudFormation.getString(properties.PreventUserExistenceErrors) : undefined);\n    ret.addPropertyResult('readAttributes', 'ReadAttributes', properties.ReadAttributes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ReadAttributes) : undefined);\n    ret.addPropertyResult('refreshTokenValidity', 'RefreshTokenValidity', properties.RefreshTokenValidity != null ? cfn_parse.FromCloudFormation.getNumber(properties.RefreshTokenValidity) : undefined);\n    ret.addPropertyResult('supportedIdentityProviders', 'SupportedIdentityProviders', properties.SupportedIdentityProviders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SupportedIdentityProviders) : undefined);\n    ret.addPropertyResult('tokenValidityUnits', 'TokenValidityUnits', properties.TokenValidityUnits != null ? CfnUserPoolClientTokenValidityUnitsPropertyFromCloudFormation(properties.TokenValidityUnits) : undefined);\n    ret.addPropertyResult('writeAttributes', 'WriteAttributes', properties.WriteAttributes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.WriteAttributes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnUserPoolClient extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolClient\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolClient {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolClientPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolClient(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                   \n    public readonly attrClientSecret: string;\n\n                                                           \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                       \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                                                    \n    public accessTokenValidity: number | undefined;\n\nn    public allowedOAuthFlows: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                               \n    public allowedOAuthFlowsUserPoolClient: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public allowedOAuthScopes: string[] | undefined;\n\nn    public analyticsConfiguration: CfnUserPoolClient.AnalyticsConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public callbackUrLs: string[] | undefined;\n\n                                                                                                                                                                                                                                                          \n    public clientName: string | undefined;\n\nn    public defaultRedirectUri: string | undefined;\n\nn    public enableTokenRevocation: boolean | cdk.IResolvable | undefined;\n\nn    public explicitAuthFlows: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public generateSecret: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public idTokenValidity: number | undefined;\n\n                                                                                                                                                                                                                                                 \n    public logoutUrLs: string[] | undefined;\n\nn    public preventUserExistenceErrors: string | undefined;\n\n                                                                                                                                                                                                                \n    public readAttributes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                              \n    public refreshTokenValidity: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public supportedIdentityProviders: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public tokenValidityUnits: CfnUserPoolClient.TokenValidityUnitsProperty | cdk.IResolvable | undefined;\n\nn    public writeAttributes: string[] | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolClientProps) {\n        super(scope, id, { type: CfnUserPoolClient.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'userPoolId', this);\n        this.attrClientSecret = cdk.Token.asString(this.getAtt('ClientSecret'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.userPoolId = props.userPoolId;\n        this.accessTokenValidity = props.accessTokenValidity;\n        this.allowedOAuthFlows = props.allowedOAuthFlows;\n        this.allowedOAuthFlowsUserPoolClient = props.allowedOAuthFlowsUserPoolClient;\n        this.allowedOAuthScopes = props.allowedOAuthScopes;\n        this.analyticsConfiguration = props.analyticsConfiguration;\n        this.callbackUrLs = props.callbackUrLs;\n        this.clientName = props.clientName;\n        this.defaultRedirectUri = props.defaultRedirectUri;\n        this.enableTokenRevocation = props.enableTokenRevocation;\n        this.explicitAuthFlows = props.explicitAuthFlows;\n        this.generateSecret = props.generateSecret;\n        this.idTokenValidity = props.idTokenValidity;\n        this.logoutUrLs = props.logoutUrLs;\n        this.preventUserExistenceErrors = props.preventUserExistenceErrors;\n        this.readAttributes = props.readAttributes;\n        this.refreshTokenValidity = props.refreshTokenValidity;\n        this.supportedIdentityProviders = props.supportedIdentityProviders;\n        this.tokenValidityUnits = props.tokenValidityUnits;\n        this.writeAttributes = props.writeAttributes;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolClient.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            userPoolId: this.userPoolId,\n            accessTokenValidity: this.accessTokenValidity,\n            allowedOAuthFlows: this.allowedOAuthFlows,\n            allowedOAuthFlowsUserPoolClient: this.allowedOAuthFlowsUserPoolClient,\n            allowedOAuthScopes: this.allowedOAuthScopes,\n            analyticsConfiguration: this.analyticsConfiguration,\n            callbackUrLs: this.callbackUrLs,\n            clientName: this.clientName,\n            defaultRedirectUri: this.defaultRedirectUri,\n            enableTokenRevocation: this.enableTokenRevocation,\n            explicitAuthFlows: this.explicitAuthFlows,\n            generateSecret: this.generateSecret,\n            idTokenValidity: this.idTokenValidity,\n            logoutUrLs: this.logoutUrLs,\n            preventUserExistenceErrors: this.preventUserExistenceErrors,\n            readAttributes: this.readAttributes,\n            refreshTokenValidity: this.refreshTokenValidity,\n            supportedIdentityProviders: this.supportedIdentityProviders,\n            tokenValidityUnits: this.tokenValidityUnits,\n            writeAttributes: this.writeAttributes,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolClientPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserPoolClient {\nn    export interface AnalyticsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly applicationArn?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly applicationId?: string;\n                                                                                                                                                                                                                                                                            \n        readonly externalId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly roleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly userDataShared?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalyticsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AnalyticsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolClient_AnalyticsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationArn', cdk.validateString)(properties.applicationArn));\n    errors.collect(cdk.propertyValidator('applicationId', cdk.validateString)(properties.applicationId));\n    errors.collect(cdk.propertyValidator('externalId', cdk.validateString)(properties.externalId));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('userDataShared', cdk.validateBoolean)(properties.userDataShared));\n    return errors.wrap('supplied properties not correct for \"AnalyticsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolClient.AnalyticsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AnalyticsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolClient.AnalyticsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolClientAnalyticsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolClient_AnalyticsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ApplicationArn: cdk.stringToCloudFormation(properties.applicationArn),\n        ApplicationId: cdk.stringToCloudFormation(properties.applicationId),\n        ExternalId: cdk.stringToCloudFormation(properties.externalId),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        UserDataShared: cdk.booleanToCloudFormation(properties.userDataShared),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolClientAnalyticsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolClient.AnalyticsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolClient.AnalyticsConfigurationProperty>();\n    ret.addPropertyResult('applicationArn', 'ApplicationArn', properties.ApplicationArn != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationArn) : undefined);\n    ret.addPropertyResult('applicationId', 'ApplicationId', properties.ApplicationId != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationId) : undefined);\n    ret.addPropertyResult('externalId', 'ExternalId', properties.ExternalId != null ? cfn_parse.FromCloudFormation.getString(properties.ExternalId) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('userDataShared', 'UserDataShared', properties.UserDataShared != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UserDataShared) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolClient {\n                                                                                                                                                                                                                                                                                                                                                                   \n    export interface TokenValidityUnitsProperty {\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly accessToken?: string;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly idToken?: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly refreshToken?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TokenValidityUnitsProperty`\n *\n * @param properties - the TypeScript properties of a `TokenValidityUnitsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolClient_TokenValidityUnitsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessToken', cdk.validateString)(properties.accessToken));\n    errors.collect(cdk.propertyValidator('idToken', cdk.validateString)(properties.idToken));\n    errors.collect(cdk.propertyValidator('refreshToken', cdk.validateString)(properties.refreshToken));\n    return errors.wrap('supplied properties not correct for \"TokenValidityUnitsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolClient.TokenValidityUnits` resource\n *\n * @param properties - the TypeScript properties of a `TokenValidityUnitsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolClient.TokenValidityUnits` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolClientTokenValidityUnitsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolClient_TokenValidityUnitsPropertyValidator(properties).assertSuccess();\n    return {\n        AccessToken: cdk.stringToCloudFormation(properties.accessToken),\n        IdToken: cdk.stringToCloudFormation(properties.idToken),\n        RefreshToken: cdk.stringToCloudFormation(properties.refreshToken),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolClientTokenValidityUnitsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolClient.TokenValidityUnitsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolClient.TokenValidityUnitsProperty>();\n    ret.addPropertyResult('accessToken', 'AccessToken', properties.AccessToken != null ? cfn_parse.FromCloudFormation.getString(properties.AccessToken) : undefined);\n    ret.addPropertyResult('idToken', 'IdToken', properties.IdToken != null ? cfn_parse.FromCloudFormation.getString(properties.IdToken) : undefined);\n    ret.addPropertyResult('refreshToken', 'RefreshToken', properties.RefreshToken != null ? cfn_parse.FromCloudFormation.getString(properties.RefreshToken) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                \nexport interface CfnUserPoolDomainProps {\n\nn    readonly domain: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    readonly customDomainConfig?: CfnUserPoolDomain.CustomDomainConfigTypeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolDomainProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolDomainProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolDomainPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customDomainConfig', CfnUserPoolDomain_CustomDomainConfigTypePropertyValidator)(properties.customDomainConfig));\n    errors.collect(cdk.propertyValidator('domain', cdk.requiredValidator)(properties.domain));\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolDomainProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolDomain` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolDomainProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolDomain` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolDomainPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolDomainPropsValidator(properties).assertSuccess();\n    return {\n        Domain: cdk.stringToCloudFormation(properties.domain),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        CustomDomainConfig: cfnUserPoolDomainCustomDomainConfigTypePropertyToCloudFormation(properties.customDomainConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolDomainPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolDomainProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolDomainProps>();\n    ret.addPropertyResult('domain', 'Domain', cfn_parse.FromCloudFormation.getString(properties.Domain));\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('customDomainConfig', 'CustomDomainConfig', properties.CustomDomainConfig != null ? CfnUserPoolDomainCustomDomainConfigTypePropertyFromCloudFormation(properties.CustomDomainConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnUserPoolDomain extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolDomain\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolDomain {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolDomainPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolDomain(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public domain: string;\n\n                                                                                                                                                                                                                                                                          \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    public customDomainConfig: CfnUserPoolDomain.CustomDomainConfigTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolDomainProps) {\n        super(scope, id, { type: CfnUserPoolDomain.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'domain', this);\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.domain = props.domain;\n        this.userPoolId = props.userPoolId;\n        this.customDomainConfig = props.customDomainConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolDomain.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domain: this.domain,\n            userPoolId: this.userPoolId,\n            customDomainConfig: this.customDomainConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolDomainPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserPoolDomain {\n                                                                                                                                                                                                                                                                                                                                   \n    export interface CustomDomainConfigTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly certificateArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomDomainConfigTypeProperty`\n *\n * @param properties - the TypeScript properties of a `CustomDomainConfigTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolDomain_CustomDomainConfigTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));\n    return errors.wrap('supplied properties not correct for \"CustomDomainConfigTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolDomain.CustomDomainConfigType` resource\n *\n * @param properties - the TypeScript properties of a `CustomDomainConfigTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolDomain.CustomDomainConfigType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolDomainCustomDomainConfigTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolDomain_CustomDomainConfigTypePropertyValidator(properties).assertSuccess();\n    return {\n        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolDomainCustomDomainConfigTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolDomain.CustomDomainConfigTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolDomain.CustomDomainConfigTypeProperty>();\n    ret.addPropertyResult('certificateArn', 'CertificateArn', properties.CertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnUserPoolGroupProps {\n\n                                                                                                                                                                                                                         \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                           \n    readonly groupName?: string;\n\nn    readonly precedence?: number;\n\n                                                                                                                                                                                                                                     \n    readonly roleArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('precedence', cdk.validateNumber)(properties.precedence));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolGroupPropsValidator(properties).assertSuccess();\n    return {\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        Precedence: cdk.numberToCloudFormation(properties.precedence),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolGroupProps>();\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('precedence', 'Precedence', properties.Precedence != null ? cfn_parse.FromCloudFormation.getNumber(properties.Precedence) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnUserPoolGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                         \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                           \n    public groupName: string | undefined;\n\nn    public precedence: number | undefined;\n\n                                                                                                                                                                                                                                     \n    public roleArn: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolGroupProps) {\n        super(scope, id, { type: CfnUserPoolGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.userPoolId = props.userPoolId;\n        this.description = props.description;\n        this.groupName = props.groupName;\n        this.precedence = props.precedence;\n        this.roleArn = props.roleArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            userPoolId: this.userPoolId,\n            description: this.description,\n            groupName: this.groupName,\n            precedence: this.precedence,\n            roleArn: this.roleArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnUserPoolIdentityProviderProps {\n\n                                                                                                                                                                                                                                         \n    readonly providerName: string;\n\n                                                                                                                                                                                                                                         \n    readonly providerType: string;\n\n                                                                                                                                                                                                                             \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                        \n    readonly attributeMapping?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    readonly idpIdentifiers?: string[];\n\nn    readonly providerDetails?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolIdentityProviderProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolIdentityProviderProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolIdentityProviderPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributeMapping', cdk.validateObject)(properties.attributeMapping));\n    errors.collect(cdk.propertyValidator('idpIdentifiers', cdk.listValidator(cdk.validateString))(properties.idpIdentifiers));\n    errors.collect(cdk.propertyValidator('providerDetails', cdk.validateObject)(properties.providerDetails));\n    errors.collect(cdk.propertyValidator('providerName', cdk.requiredValidator)(properties.providerName));\n    errors.collect(cdk.propertyValidator('providerName', cdk.validateString)(properties.providerName));\n    errors.collect(cdk.propertyValidator('providerType', cdk.requiredValidator)(properties.providerType));\n    errors.collect(cdk.propertyValidator('providerType', cdk.validateString)(properties.providerType));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolIdentityProviderProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolIdentityProvider` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolIdentityProviderProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolIdentityProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolIdentityProviderPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolIdentityProviderPropsValidator(properties).assertSuccess();\n    return {\n        ProviderName: cdk.stringToCloudFormation(properties.providerName),\n        ProviderType: cdk.stringToCloudFormation(properties.providerType),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        AttributeMapping: cdk.objectToCloudFormation(properties.attributeMapping),\n        IdpIdentifiers: cdk.listMapper(cdk.stringToCloudFormation)(properties.idpIdentifiers),\n        ProviderDetails: cdk.objectToCloudFormation(properties.providerDetails),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolIdentityProviderPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolIdentityProviderProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolIdentityProviderProps>();\n    ret.addPropertyResult('providerName', 'ProviderName', cfn_parse.FromCloudFormation.getString(properties.ProviderName));\n    ret.addPropertyResult('providerType', 'ProviderType', cfn_parse.FromCloudFormation.getString(properties.ProviderType));\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('attributeMapping', 'AttributeMapping', properties.AttributeMapping != null ? cfn_parse.FromCloudFormation.getAny(properties.AttributeMapping) : undefined);\n    ret.addPropertyResult('idpIdentifiers', 'IdpIdentifiers', properties.IdpIdentifiers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.IdpIdentifiers) : undefined);\n    ret.addPropertyResult('providerDetails', 'ProviderDetails', properties.ProviderDetails != null ? cfn_parse.FromCloudFormation.getAny(properties.ProviderDetails) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnUserPoolIdentityProvider extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolIdentityProvider\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolIdentityProvider {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolIdentityProviderPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolIdentityProvider(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                         \n    public providerName: string;\n\n                                                                                                                                                                                                                                         \n    public providerType: string;\n\n                                                                                                                                                                                                                             \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                        \n    public attributeMapping: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                        \n    public idpIdentifiers: string[] | undefined;\n\nn    public providerDetails: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolIdentityProviderProps) {\n        super(scope, id, { type: CfnUserPoolIdentityProvider.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'providerName', this);\n        cdk.requireProperty(props, 'providerType', this);\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.providerName = props.providerName;\n        this.providerType = props.providerType;\n        this.userPoolId = props.userPoolId;\n        this.attributeMapping = props.attributeMapping;\n        this.idpIdentifiers = props.idpIdentifiers;\n        this.providerDetails = props.providerDetails;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolIdentityProvider.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            providerName: this.providerName,\n            providerType: this.providerType,\n            userPoolId: this.userPoolId,\n            attributeMapping: this.attributeMapping,\n            idpIdentifiers: this.idpIdentifiers,\n            providerDetails: this.providerDetails,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolIdentityProviderPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                \nexport interface CfnUserPoolResourceServerProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly identifier: string;\n\n                                                                                                                                                                                                                                          \n    readonly name: string;\n\n                                                                                                                                                                                                                                           \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly scopes?: Array<CfnUserPoolResourceServer.ResourceServerScopeTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolResourceServerProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolResourceServerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolResourceServerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('identifier', cdk.requiredValidator)(properties.identifier));\n    errors.collect(cdk.propertyValidator('identifier', cdk.validateString)(properties.identifier));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('scopes', cdk.listValidator(CfnUserPoolResourceServer_ResourceServerScopeTypePropertyValidator))(properties.scopes));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolResourceServerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolResourceServer` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolResourceServerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolResourceServer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolResourceServerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolResourceServerPropsValidator(properties).assertSuccess();\n    return {\n        Identifier: cdk.stringToCloudFormation(properties.identifier),\n        Name: cdk.stringToCloudFormation(properties.name),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        Scopes: cdk.listMapper(cfnUserPoolResourceServerResourceServerScopeTypePropertyToCloudFormation)(properties.scopes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolResourceServerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolResourceServerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolResourceServerProps>();\n    ret.addPropertyResult('identifier', 'Identifier', cfn_parse.FromCloudFormation.getString(properties.Identifier));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('scopes', 'Scopes', properties.Scopes != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPoolResourceServerResourceServerScopeTypePropertyFromCloudFormation)(properties.Scopes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnUserPoolResourceServer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolResourceServer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolResourceServer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolResourceServerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolResourceServer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    public identifier: string;\n\n                                                                                                                                                                                                                                          \n    public name: string;\n\n                                                                                                                                                                                                                                           \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                                                        \n    public scopes: Array<CfnUserPoolResourceServer.ResourceServerScopeTypeProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolResourceServerProps) {\n        super(scope, id, { type: CfnUserPoolResourceServer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'identifier', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.identifier = props.identifier;\n        this.name = props.name;\n        this.userPoolId = props.userPoolId;\n        this.scopes = props.scopes;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolResourceServer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            identifier: this.identifier,\n            name: this.name,\n            userPoolId: this.userPoolId,\n            scopes: this.scopes,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolResourceServerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserPoolResourceServer {\n                                                                                                                                                                                                                                                             \n    export interface ResourceServerScopeTypeProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly scopeDescription: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly scopeName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceServerScopeTypeProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceServerScopeTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolResourceServer_ResourceServerScopeTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scopeDescription', cdk.requiredValidator)(properties.scopeDescription));\n    errors.collect(cdk.propertyValidator('scopeDescription', cdk.validateString)(properties.scopeDescription));\n    errors.collect(cdk.propertyValidator('scopeName', cdk.requiredValidator)(properties.scopeName));\n    errors.collect(cdk.propertyValidator('scopeName', cdk.validateString)(properties.scopeName));\n    return errors.wrap('supplied properties not correct for \"ResourceServerScopeTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolResourceServer.ResourceServerScopeType` resource\n *\n * @param properties - the TypeScript properties of a `ResourceServerScopeTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolResourceServer.ResourceServerScopeType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolResourceServerResourceServerScopeTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolResourceServer_ResourceServerScopeTypePropertyValidator(properties).assertSuccess();\n    return {\n        ScopeDescription: cdk.stringToCloudFormation(properties.scopeDescription),\n        ScopeName: cdk.stringToCloudFormation(properties.scopeName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolResourceServerResourceServerScopeTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolResourceServer.ResourceServerScopeTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolResourceServer.ResourceServerScopeTypeProperty>();\n    ret.addPropertyResult('scopeDescription', 'ScopeDescription', cfn_parse.FromCloudFormation.getString(properties.ScopeDescription));\n    ret.addPropertyResult('scopeName', 'ScopeName', cfn_parse.FromCloudFormation.getString(properties.ScopeName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                          \nexport interface CfnUserPoolRiskConfigurationAttachmentProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly clientId: string;\n\n                                                                                                                                                                                                                                                   \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly accountTakeoverRiskConfiguration?: CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                         \n    readonly compromisedCredentialsRiskConfiguration?: CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly riskExceptionConfiguration?: CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolRiskConfigurationAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolRiskConfigurationAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountTakeoverRiskConfiguration', CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyValidator)(properties.accountTakeoverRiskConfiguration));\n    errors.collect(cdk.propertyValidator('clientId', cdk.requiredValidator)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('compromisedCredentialsRiskConfiguration', CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyValidator)(properties.compromisedCredentialsRiskConfiguration));\n    errors.collect(cdk.propertyValidator('riskExceptionConfiguration', CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyValidator)(properties.riskExceptionConfiguration));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolRiskConfigurationAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolRiskConfigurationAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        AccountTakeoverRiskConfiguration: cfnUserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationTypePropertyToCloudFormation(properties.accountTakeoverRiskConfiguration),\n        CompromisedCredentialsRiskConfiguration: cfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationTypePropertyToCloudFormation(properties.compromisedCredentialsRiskConfiguration),\n        RiskExceptionConfiguration: cfnUserPoolRiskConfigurationAttachmentRiskExceptionConfigurationTypePropertyToCloudFormation(properties.riskExceptionConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachmentProps>();\n    ret.addPropertyResult('clientId', 'ClientId', cfn_parse.FromCloudFormation.getString(properties.ClientId));\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('accountTakeoverRiskConfiguration', 'AccountTakeoverRiskConfiguration', properties.AccountTakeoverRiskConfiguration != null ? CfnUserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationTypePropertyFromCloudFormation(properties.AccountTakeoverRiskConfiguration) : undefined);\n    ret.addPropertyResult('compromisedCredentialsRiskConfiguration', 'CompromisedCredentialsRiskConfiguration', properties.CompromisedCredentialsRiskConfiguration != null ? CfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationTypePropertyFromCloudFormation(properties.CompromisedCredentialsRiskConfiguration) : undefined);\n    ret.addPropertyResult('riskExceptionConfiguration', 'RiskExceptionConfiguration', properties.RiskExceptionConfiguration != null ? CfnUserPoolRiskConfigurationAttachmentRiskExceptionConfigurationTypePropertyFromCloudFormation(properties.RiskExceptionConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnUserPoolRiskConfigurationAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolRiskConfigurationAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolRiskConfigurationAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolRiskConfigurationAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolRiskConfigurationAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public clientId: string;\n\n                                                                                                                                                                                                                                                   \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public accountTakeoverRiskConfiguration: CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                         \n    public compromisedCredentialsRiskConfiguration: CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                  \n    public riskExceptionConfiguration: CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolRiskConfigurationAttachmentProps) {\n        super(scope, id, { type: CfnUserPoolRiskConfigurationAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clientId', this);\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.clientId = props.clientId;\n        this.userPoolId = props.userPoolId;\n        this.accountTakeoverRiskConfiguration = props.accountTakeoverRiskConfiguration;\n        this.compromisedCredentialsRiskConfiguration = props.compromisedCredentialsRiskConfiguration;\n        this.riskExceptionConfiguration = props.riskExceptionConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolRiskConfigurationAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clientId: this.clientId,\n            userPoolId: this.userPoolId,\n            accountTakeoverRiskConfiguration: this.accountTakeoverRiskConfiguration,\n            compromisedCredentialsRiskConfiguration: this.compromisedCredentialsRiskConfiguration,\n            riskExceptionConfiguration: this.riskExceptionConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolRiskConfigurationAttachmentPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                 \n    export interface AccountTakeoverActionTypeProperty {\nn        readonly eventAction: string;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly notify: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccountTakeoverActionTypeProperty`\n *\n * @param properties - the TypeScript properties of a `AccountTakeoverActionTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventAction', cdk.requiredValidator)(properties.eventAction));\n    errors.collect(cdk.propertyValidator('eventAction', cdk.validateString)(properties.eventAction));\n    errors.collect(cdk.propertyValidator('notify', cdk.requiredValidator)(properties.notify));\n    errors.collect(cdk.propertyValidator('notify', cdk.validateBoolean)(properties.notify));\n    return errors.wrap('supplied properties not correct for \"AccountTakeoverActionTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionType` resource\n *\n * @param properties - the TypeScript properties of a `AccountTakeoverActionTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyValidator(properties).assertSuccess();\n    return {\n        EventAction: cdk.stringToCloudFormation(properties.eventAction),\n        Notify: cdk.booleanToCloudFormation(properties.notify),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty>();\n    ret.addPropertyResult('eventAction', 'EventAction', cfn_parse.FromCloudFormation.getString(properties.EventAction));\n    ret.addPropertyResult('notify', 'Notify', cfn_parse.FromCloudFormation.getBoolean(properties.Notify));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                   \n    export interface AccountTakeoverActionsTypeProperty {\n                                                                                                                                                                                                                                                                                                                                             \n        readonly highAction?: CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly lowAction?: CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly mediumAction?: CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccountTakeoverActionsTypeProperty`\n *\n * @param properties - the TypeScript properties of a `AccountTakeoverActionsTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('highAction', CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyValidator)(properties.highAction));\n    errors.collect(cdk.propertyValidator('lowAction', CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyValidator)(properties.lowAction));\n    errors.collect(cdk.propertyValidator('mediumAction', CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyValidator)(properties.mediumAction));\n    return errors.wrap('supplied properties not correct for \"AccountTakeoverActionsTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionsType` resource\n *\n * @param properties - the TypeScript properties of a `AccountTakeoverActionsTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionsType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionsTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyValidator(properties).assertSuccess();\n    return {\n        HighAction: cfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyToCloudFormation(properties.highAction),\n        LowAction: cfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyToCloudFormation(properties.lowAction),\n        MediumAction: cfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyToCloudFormation(properties.mediumAction),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionsTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty>();\n    ret.addPropertyResult('highAction', 'HighAction', properties.HighAction != null ? CfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyFromCloudFormation(properties.HighAction) : undefined);\n    ret.addPropertyResult('lowAction', 'LowAction', properties.LowAction != null ? CfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyFromCloudFormation(properties.LowAction) : undefined);\n    ret.addPropertyResult('mediumAction', 'MediumAction', properties.MediumAction != null ? CfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionTypePropertyFromCloudFormation(properties.MediumAction) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface AccountTakeoverRiskConfigurationTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly actions: CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly notifyConfiguration?: CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccountTakeoverRiskConfigurationTypeProperty`\n *\n * @param properties - the TypeScript properties of a `AccountTakeoverRiskConfigurationTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('notifyConfiguration', CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyValidator)(properties.notifyConfiguration));\n    return errors.wrap('supplied properties not correct for \"AccountTakeoverRiskConfigurationTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationType` resource\n *\n * @param properties - the TypeScript properties of a `AccountTakeoverRiskConfigurationTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionsTypePropertyToCloudFormation(properties.actions),\n        NotifyConfiguration: cfnUserPoolRiskConfigurationAttachmentNotifyConfigurationTypePropertyToCloudFormation(properties.notifyConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty>();\n    ret.addPropertyResult('actions', 'Actions', CfnUserPoolRiskConfigurationAttachmentAccountTakeoverActionsTypePropertyFromCloudFormation(properties.Actions));\n    ret.addPropertyResult('notifyConfiguration', 'NotifyConfiguration', properties.NotifyConfiguration != null ? CfnUserPoolRiskConfigurationAttachmentNotifyConfigurationTypePropertyFromCloudFormation(properties.NotifyConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                                     \n    export interface CompromisedCredentialsActionsTypeProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly eventAction: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CompromisedCredentialsActionsTypeProperty`\n *\n * @param properties - the TypeScript properties of a `CompromisedCredentialsActionsTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventAction', cdk.requiredValidator)(properties.eventAction));\n    errors.collect(cdk.propertyValidator('eventAction', cdk.validateString)(properties.eventAction));\n    return errors.wrap('supplied properties not correct for \"CompromisedCredentialsActionsTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsType` resource\n *\n * @param properties - the TypeScript properties of a `CompromisedCredentialsActionsTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyValidator(properties).assertSuccess();\n    return {\n        EventAction: cdk.stringToCloudFormation(properties.eventAction),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty>();\n    ret.addPropertyResult('eventAction', 'EventAction', cfn_parse.FromCloudFormation.getString(properties.EventAction));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                                                          \n    export interface CompromisedCredentialsRiskConfigurationTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly actions: CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly eventFilter?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CompromisedCredentialsRiskConfigurationTypeProperty`\n *\n * @param properties - the TypeScript properties of a `CompromisedCredentialsRiskConfigurationTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('eventFilter', cdk.listValidator(cdk.validateString))(properties.eventFilter));\n    return errors.wrap('supplied properties not correct for \"CompromisedCredentialsRiskConfigurationTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationType` resource\n *\n * @param properties - the TypeScript properties of a `CompromisedCredentialsRiskConfigurationTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsTypePropertyToCloudFormation(properties.actions),\n        EventFilter: cdk.listMapper(cdk.stringToCloudFormation)(properties.eventFilter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty>();\n    ret.addPropertyResult('actions', 'Actions', CfnUserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsTypePropertyFromCloudFormation(properties.Actions));\n    ret.addPropertyResult('eventFilter', 'EventFilter', properties.EventFilter != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EventFilter) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                \n    export interface NotifyConfigurationTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly blockEmail?: CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly from?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly mfaEmail?: CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly noActionEmail?: CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly replyTo?: string;\nn        readonly sourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotifyConfigurationTypeProperty`\n *\n * @param properties - the TypeScript properties of a `NotifyConfigurationTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockEmail', CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyValidator)(properties.blockEmail));\n    errors.collect(cdk.propertyValidator('from', cdk.validateString)(properties.from));\n    errors.collect(cdk.propertyValidator('mfaEmail', CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyValidator)(properties.mfaEmail));\n    errors.collect(cdk.propertyValidator('noActionEmail', CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyValidator)(properties.noActionEmail));\n    errors.collect(cdk.propertyValidator('replyTo', cdk.validateString)(properties.replyTo));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.requiredValidator)(properties.sourceArn));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.validateString)(properties.sourceArn));\n    return errors.wrap('supplied properties not correct for \"NotifyConfigurationTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyConfigurationType` resource\n *\n * @param properties - the TypeScript properties of a `NotifyConfigurationTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyConfigurationType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentNotifyConfigurationTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyValidator(properties).assertSuccess();\n    return {\n        BlockEmail: cfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyToCloudFormation(properties.blockEmail),\n        From: cdk.stringToCloudFormation(properties.from),\n        MfaEmail: cfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyToCloudFormation(properties.mfaEmail),\n        NoActionEmail: cfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyToCloudFormation(properties.noActionEmail),\n        ReplyTo: cdk.stringToCloudFormation(properties.replyTo),\n        SourceArn: cdk.stringToCloudFormation(properties.sourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentNotifyConfigurationTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty>();\n    ret.addPropertyResult('blockEmail', 'BlockEmail', properties.BlockEmail != null ? CfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyFromCloudFormation(properties.BlockEmail) : undefined);\n    ret.addPropertyResult('from', 'From', properties.From != null ? cfn_parse.FromCloudFormation.getString(properties.From) : undefined);\n    ret.addPropertyResult('mfaEmail', 'MfaEmail', properties.MfaEmail != null ? CfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyFromCloudFormation(properties.MfaEmail) : undefined);\n    ret.addPropertyResult('noActionEmail', 'NoActionEmail', properties.NoActionEmail != null ? CfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyFromCloudFormation(properties.NoActionEmail) : undefined);\n    ret.addPropertyResult('replyTo', 'ReplyTo', properties.ReplyTo != null ? cfn_parse.FromCloudFormation.getString(properties.ReplyTo) : undefined);\n    ret.addPropertyResult('sourceArn', 'SourceArn', cfn_parse.FromCloudFormation.getString(properties.SourceArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                \n    export interface NotifyEmailTypeProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly htmlBody?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly subject: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly textBody?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotifyEmailTypeProperty`\n *\n * @param properties - the TypeScript properties of a `NotifyEmailTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('htmlBody', cdk.validateString)(properties.htmlBody));\n    errors.collect(cdk.propertyValidator('subject', cdk.requiredValidator)(properties.subject));\n    errors.collect(cdk.propertyValidator('subject', cdk.validateString)(properties.subject));\n    errors.collect(cdk.propertyValidator('textBody', cdk.validateString)(properties.textBody));\n    return errors.wrap('supplied properties not correct for \"NotifyEmailTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyEmailType` resource\n *\n * @param properties - the TypeScript properties of a `NotifyEmailTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyEmailType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyValidator(properties).assertSuccess();\n    return {\n        HtmlBody: cdk.stringToCloudFormation(properties.htmlBody),\n        Subject: cdk.stringToCloudFormation(properties.subject),\n        TextBody: cdk.stringToCloudFormation(properties.textBody),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentNotifyEmailTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty>();\n    ret.addPropertyResult('htmlBody', 'HtmlBody', properties.HtmlBody != null ? cfn_parse.FromCloudFormation.getString(properties.HtmlBody) : undefined);\n    ret.addPropertyResult('subject', 'Subject', cfn_parse.FromCloudFormation.getString(properties.Subject));\n    ret.addPropertyResult('textBody', 'TextBody', properties.TextBody != null ? cfn_parse.FromCloudFormation.getString(properties.TextBody) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserPoolRiskConfigurationAttachment {\n                                                                                                                                                                                                                                                                                                                     \n    export interface RiskExceptionConfigurationTypeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly blockedIpRangeList?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly skippedIpRangeList?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RiskExceptionConfigurationTypeProperty`\n *\n * @param properties - the TypeScript properties of a `RiskExceptionConfigurationTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockedIpRangeList', cdk.listValidator(cdk.validateString))(properties.blockedIpRangeList));\n    errors.collect(cdk.propertyValidator('skippedIpRangeList', cdk.listValidator(cdk.validateString))(properties.skippedIpRangeList));\n    return errors.wrap('supplied properties not correct for \"RiskExceptionConfigurationTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.RiskExceptionConfigurationType` resource\n *\n * @param properties - the TypeScript properties of a `RiskExceptionConfigurationTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolRiskConfigurationAttachment.RiskExceptionConfigurationType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolRiskConfigurationAttachmentRiskExceptionConfigurationTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyValidator(properties).assertSuccess();\n    return {\n        BlockedIPRangeList: cdk.listMapper(cdk.stringToCloudFormation)(properties.blockedIpRangeList),\n        SkippedIPRangeList: cdk.listMapper(cdk.stringToCloudFormation)(properties.skippedIpRangeList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolRiskConfigurationAttachmentRiskExceptionConfigurationTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty>();\n    ret.addPropertyResult('blockedIpRangeList', 'BlockedIPRangeList', properties.BlockedIPRangeList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.BlockedIPRangeList) : undefined);\n    ret.addPropertyResult('skippedIpRangeList', 'SkippedIPRangeList', properties.SkippedIPRangeList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SkippedIPRangeList) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                      \nexport interface CfnUserPoolUICustomizationAttachmentProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly clientId: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly userPoolId: string;\n\n                                                                                                                                                                                                                                                              \n    readonly css?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolUICustomizationAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolUICustomizationAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolUICustomizationAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('css', cdk.validateString)(properties.css));\n    errors.collect(cdk.propertyValidator('clientId', cdk.requiredValidator)(properties.clientId));\n    errors.collect(cdk.propertyValidator('clientId', cdk.validateString)(properties.clientId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolUICustomizationAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUICustomizationAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolUICustomizationAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUICustomizationAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolUICustomizationAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolUICustomizationAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        ClientId: cdk.stringToCloudFormation(properties.clientId),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        CSS: cdk.stringToCloudFormation(properties.css),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolUICustomizationAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolUICustomizationAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolUICustomizationAttachmentProps>();\n    ret.addPropertyResult('clientId', 'ClientId', cfn_parse.FromCloudFormation.getString(properties.ClientId));\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('css', 'CSS', properties.CSS != null ? cfn_parse.FromCloudFormation.getString(properties.CSS) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnUserPoolUICustomizationAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolUICustomizationAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolUICustomizationAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolUICustomizationAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolUICustomizationAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public clientId: string;\n\n                                                                                                                                                                                                                                                                 \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                              \n    public css: string | undefined;\n\n                                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolUICustomizationAttachmentProps) {\n        super(scope, id, { type: CfnUserPoolUICustomizationAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clientId', this);\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.clientId = props.clientId;\n        this.userPoolId = props.userPoolId;\n        this.css = props.css;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolUICustomizationAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clientId: this.clientId,\n            userPoolId: this.userPoolId,\n            css: this.css,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolUICustomizationAttachmentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                            \nexport interface CfnUserPoolUserProps {\n\n                                                                                                                                                                                                                                                      \n    readonly userPoolId: string;\n\nn    readonly clientMetadata?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly desiredDeliveryMediums?: string[];\n\nn    readonly forceAliasCreation?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly messageAction?: string;\n\nn    readonly userAttributes?: Array<CfnUserPoolUser.AttributeTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                \n    readonly username?: string;\n\nn    readonly validationData?: Array<CfnUserPoolUser.AttributeTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientMetadata', cdk.validateObject)(properties.clientMetadata));\n    errors.collect(cdk.propertyValidator('desiredDeliveryMediums', cdk.listValidator(cdk.validateString))(properties.desiredDeliveryMediums));\n    errors.collect(cdk.propertyValidator('forceAliasCreation', cdk.validateBoolean)(properties.forceAliasCreation));\n    errors.collect(cdk.propertyValidator('messageAction', cdk.validateString)(properties.messageAction));\n    errors.collect(cdk.propertyValidator('userAttributes', cdk.listValidator(CfnUserPoolUser_AttributeTypePropertyValidator))(properties.userAttributes));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    errors.collect(cdk.propertyValidator('validationData', cdk.listValidator(CfnUserPoolUser_AttributeTypePropertyValidator))(properties.validationData));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUser` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUser` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolUserPropsValidator(properties).assertSuccess();\n    return {\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n        ClientMetadata: cdk.objectToCloudFormation(properties.clientMetadata),\n        DesiredDeliveryMediums: cdk.listMapper(cdk.stringToCloudFormation)(properties.desiredDeliveryMediums),\n        ForceAliasCreation: cdk.booleanToCloudFormation(properties.forceAliasCreation),\n        MessageAction: cdk.stringToCloudFormation(properties.messageAction),\n        UserAttributes: cdk.listMapper(cfnUserPoolUserAttributeTypePropertyToCloudFormation)(properties.userAttributes),\n        Username: cdk.stringToCloudFormation(properties.username),\n        ValidationData: cdk.listMapper(cfnUserPoolUserAttributeTypePropertyToCloudFormation)(properties.validationData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolUserProps>();\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addPropertyResult('clientMetadata', 'ClientMetadata', properties.ClientMetadata != null ? cfn_parse.FromCloudFormation.getAny(properties.ClientMetadata) : undefined);\n    ret.addPropertyResult('desiredDeliveryMediums', 'DesiredDeliveryMediums', properties.DesiredDeliveryMediums != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DesiredDeliveryMediums) : undefined);\n    ret.addPropertyResult('forceAliasCreation', 'ForceAliasCreation', properties.ForceAliasCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ForceAliasCreation) : undefined);\n    ret.addPropertyResult('messageAction', 'MessageAction', properties.MessageAction != null ? cfn_parse.FromCloudFormation.getString(properties.MessageAction) : undefined);\n    ret.addPropertyResult('userAttributes', 'UserAttributes', properties.UserAttributes != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPoolUserAttributeTypePropertyFromCloudFormation)(properties.UserAttributes) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addPropertyResult('validationData', 'ValidationData', properties.ValidationData != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPoolUserAttributeTypePropertyFromCloudFormation)(properties.ValidationData) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnUserPoolUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolUser\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                      \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public clientMetadata: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public desiredDeliveryMediums: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public forceAliasCreation: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public messageAction: string | undefined;\n\nn    public userAttributes: Array<CfnUserPoolUser.AttributeTypeProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                \n    public username: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public validationData: Array<CfnUserPoolUser.AttributeTypeProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolUserProps) {\n        super(scope, id, { type: CfnUserPoolUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'userPoolId', this);\n\n        this.userPoolId = props.userPoolId;\n        this.clientMetadata = props.clientMetadata;\n        this.desiredDeliveryMediums = props.desiredDeliveryMediums;\n        this.forceAliasCreation = props.forceAliasCreation;\n        this.messageAction = props.messageAction;\n        this.userAttributes = props.userAttributes;\n        this.username = props.username;\n        this.validationData = props.validationData;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            userPoolId: this.userPoolId,\n            clientMetadata: this.clientMetadata,\n            desiredDeliveryMediums: this.desiredDeliveryMediums,\n            forceAliasCreation: this.forceAliasCreation,\n            messageAction: this.messageAction,\n            userAttributes: this.userAttributes,\n            username: this.username,\n            validationData: this.validationData,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolUserPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserPoolUser {\n                                                                                                                                                                                                                                                                       \n    export interface AttributeTypeProperty {\n                                                                                                                                                                                                                                                          \n        readonly name?: string;\n                                                                                                                                                                                                                                                            \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AttributeTypeProperty`\n *\n * @param properties - the TypeScript properties of a `AttributeTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolUser_AttributeTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"AttributeTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUser.AttributeType` resource\n *\n * @param properties - the TypeScript properties of a `AttributeTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUser.AttributeType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolUserAttributeTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolUser_AttributeTypePropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolUserAttributeTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolUser.AttributeTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolUser.AttributeTypeProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                              \nexport interface CfnUserPoolUserToGroupAttachmentProps {\n\n                                                                                                                                                                                                                                    \n    readonly groupName: string;\n\n                                                                                                                                                                                                                                              \n    readonly username: string;\n\n                                                                                                                                                                                                                                                         \n    readonly userPoolId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserPoolUserToGroupAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolUserToGroupAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPoolUserToGroupAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupName', cdk.requiredValidator)(properties.groupName));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.requiredValidator)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"CfnUserPoolUserToGroupAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUserToGroupAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserPoolUserToGroupAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Cognito::UserPoolUserToGroupAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPoolUserToGroupAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPoolUserToGroupAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        Username: cdk.stringToCloudFormation(properties.username),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPoolUserToGroupAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserPoolUserToGroupAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserPoolUserToGroupAttachmentProps>();\n    ret.addPropertyResult('groupName', 'GroupName', cfn_parse.FromCloudFormation.getString(properties.GroupName));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addPropertyResult('userPoolId', 'UserPoolId', cfn_parse.FromCloudFormation.getString(properties.UserPoolId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnUserPoolUserToGroupAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Cognito::UserPoolUserToGroupAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserPoolUserToGroupAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPoolUserToGroupAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserPoolUserToGroupAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                    \n    public groupName: string;\n\n                                                                                                                                                                                                                                              \n    public username: string;\n\n                                                                                                                                                                                                                                                         \n    public userPoolId: string;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnUserPoolUserToGroupAttachmentProps) {\n        super(scope, id, { type: CfnUserPoolUserToGroupAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'groupName', this);\n        cdk.requireProperty(props, 'userPoolId', this);\n        cdk.requireProperty(props, 'username', this);\n\n        this.groupName = props.groupName;\n        this.username = props.username;\n        this.userPoolId = props.userPoolId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserPoolUserToGroupAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupName: this.groupName,\n            username: this.username,\n            userPoolId: this.userPoolId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPoolUserToGroupAttachmentPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
