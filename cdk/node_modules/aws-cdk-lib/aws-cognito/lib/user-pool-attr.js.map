{
  "version": 3,
  "sources": ["user-pool-attr.ts"],
  "sourcesContent": ["import { Token } from '../../core';\nimport { StandardAttributeNames } from './private/attr-names';\n\n                                                                                                                                                                                                                                   \nexport interface StandardAttributes {\n                                                                                                      \n  readonly address?: StandardAttribute;\n\n                                                                                                                                        \n  readonly birthdate?: StandardAttribute;\n\n                                                                                                                                                      \n  readonly email?: StandardAttribute;\n\n                                                                                                                 \n  readonly familyName?: StandardAttribute;\n\n                                                                                              \n  readonly gender?: StandardAttribute;\n\n                                                                                                               \n  readonly givenName?: StandardAttribute;\n\n                                                                                                                                             \n  readonly locale?: StandardAttribute;\n\n                                                                                                   \n  readonly middleName?: StandardAttribute;\n\n                                                                                                                                                                    \n  readonly fullname?: StandardAttribute;\n\n                                                                                                               \n  readonly nickname?: StandardAttribute;\n\n                                                                                                        \n  readonly phoneNumber?: StandardAttribute;\n\n                                                                                                                  \n  readonly profilePicture?: StandardAttribute;\n\n                                                                                                                                                  \n  readonly preferredUsername?: StandardAttribute;\n\n                                                                                                               \n  readonly profilePage?: StandardAttribute;\n\n                                                                                                 \n  readonly timezone?: StandardAttribute;\n\n                                                                                                                              \n  readonly lastUpdateTime?: StandardAttribute;\n\n                                                                                                                   \n  readonly website?: StandardAttribute;\n\n                                                                                                                                                                                                                                                                              \n  readonly emailVerified?: StandardAttribute;\n\n                                                                                                                                                                                                                                                                              \n  readonly phoneNumberVerified?: StandardAttribute;\n}\n\n                                                                                                                                                                                                                       \nexport interface StandardAttribute {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n  readonly mutable?: boolean;\n                                                                                                                                                                                                                         \n  readonly required?: boolean;\n}\n\n                                              \nexport interface ICustomAttribute {\n                                                                                            \n  bind(): CustomAttributeConfig;\n}\n\n                                                                                            \nexport interface CustomAttributeConfig {\n                                                                                                                                                                                                                                           \n  readonly dataType: string;\n\n                                                                                                    \n  readonly stringConstraints?: StringAttributeConstraints;\n\n                                                                                                        \n  readonly numberConstraints?: NumberAttributeConstraints;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly mutable?: boolean;\n}\n\n                                                                             \nexport interface CustomAttributeProps {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly mutable?: boolean\n}\n\n                                                                                \nexport interface StringAttributeConstraints {\n                                                                  \n  readonly minLen?: number;\n\n                                                                     \n  readonly maxLen?: number;\n}\n\n                                              \nexport interface StringAttributeProps extends StringAttributeConstraints, CustomAttributeProps {\n}\n\n                                            \nexport class StringAttribute implements ICustomAttribute {\n  private readonly minLen?: number;\n  private readonly maxLen?: number;\n  private readonly mutable?: boolean;\n\n  constructor(props: StringAttributeProps = {}) {\n    if (props.minLen && !Token.isUnresolved(props.minLen) && props.minLen < 0) {\n      throw new Error(`minLen cannot be less than 0 (value: ${props.minLen}).`);\n    }\n    if (props.maxLen && !Token.isUnresolved(props.maxLen) && props.maxLen > 2048) {\n      throw new Error(`maxLen cannot be greater than 2048 (value: ${props.maxLen}).`);\n    }\n    this.minLen = props?.minLen;\n    this.maxLen = props?.maxLen;\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    let stringConstraints: StringAttributeConstraints | undefined;\n    if (this.minLen || this.maxLen) {\n      stringConstraints = {\n        minLen: this.minLen,\n        maxLen: this.maxLen,\n      };\n    }\n\n    return {\n      dataType: 'String',\n      stringConstraints,\n      mutable: this.mutable,\n    };\n  }\n}\n\n                                                                                \nexport interface NumberAttributeConstraints {\n                                                                                  \n  readonly min?: number;\n\n                                                                                  \n  readonly max?: number;\n}\n\n                               \nexport interface NumberAttributeProps extends NumberAttributeConstraints, CustomAttributeProps {\n}\n\n                                            \nexport class NumberAttribute implements ICustomAttribute {\n  private readonly min?: number;\n  private readonly max?: number;\n  private readonly mutable?: boolean;\n\n  constructor(props: NumberAttributeProps = {}) {\n    this.min = props?.min;\n    this.max = props?.max;\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    let numberConstraints: NumberAttributeConstraints | undefined;\n    if (this.min || this.max) {\n      numberConstraints = {\n        min: this.min,\n        max: this.max,\n      };\n    }\n\n    return {\n      dataType: 'Number',\n      numberConstraints,\n      mutable: this.mutable,\n    };\n  }\n}\n\n                                             \nexport class BooleanAttribute implements ICustomAttribute {\n  private readonly mutable?: boolean;\n\n  constructor(props: CustomAttributeProps = {}) {\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    return {\n      dataType: 'Boolean',\n      mutable: this.mutable,\n    };\n  }\n}\n\n                                              \nexport class DateTimeAttribute implements ICustomAttribute {\n  private readonly mutable?: boolean;\n\n  constructor(props: CustomAttributeProps = {}) {\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    return {\n      dataType: 'DateTime',\n      mutable: this.mutable,\n    };\n  }\n}\n\n                                                                                                                                                                                                                                                               \nexport interface StandardAttributesMask {\n                                                               \n  readonly address?: boolean;\n\n                                                                                                 \n  readonly birthdate?: boolean;\n\n                                                                                                               \n  readonly email?: boolean;\n\n                                                                          \n  readonly familyName?: boolean;\n\n                                                       \n  readonly gender?: boolean;\n\n                                                                        \n  readonly givenName?: boolean;\n\n                                                                                                      \n  readonly locale?: boolean;\n\n                                                            \n  readonly middleName?: boolean;\n\n                                                                                                                             \n  readonly fullname?: boolean;\n\n                                                                        \n  readonly nickname?: boolean;\n\n                                                                 \n  readonly phoneNumber?: boolean;\n\n                                                                           \n  readonly profilePicture?: boolean;\n\n                                                                                                           \n  readonly preferredUsername?: boolean;\n\n                                                                        \n  readonly profilePage?: boolean;\n\n                                                          \n  readonly timezone?: boolean;\n\n                                                                                       \n  readonly lastUpdateTime?: boolean;\n\n                                                                            \n  readonly website?: boolean;\n\n                                                                                 \n  readonly emailVerified?: boolean;\n\n                                                                                \n  readonly phoneNumberVerified?: boolean;\n}\n\n\n                                                                       \nexport class ClientAttributes {\n\n  /**\n   * The set of attributes\n   */\n  private attributesSet: Set<string>;\n\n                                                                                                                                               \n  constructor() {\n    this.attributesSet = new Set<string>();\n  }\n\n                                                                                                                                                       \n  public withStandardAttributes(attributes: StandardAttributesMask): ClientAttributes {\n    let attributesSet = new Set(this.attributesSet);\n    // iterate through key-values in the `StandardAttributeNames` constant\n    // to get the value for all attributes\n    for (const attributeKey in StandardAttributeNames) {\n      if ((attributes as any)[attributeKey] === true) {\n        const attributeName = (StandardAttributeNames as any)[attributeKey];\n        attributesSet.add(attributeName);\n      }\n    }\n    let aux = new ClientAttributes();\n    aux.attributesSet = attributesSet;\n    return aux;\n  }\n\n                                                                                                                                                     \n  public withCustomAttributes(...attributes: string[]): ClientAttributes {\n    let attributesSet: Set<string> = new Set(this.attributesSet);\n    for (let attribute of attributes) {\n      // custom attributes MUST begin with `custom:`, so add the string if not present\n      if (!attribute.startsWith('custom:')) {\n        attribute = 'custom:' + attribute;\n      }\n      attributesSet.add(attribute);\n    }\n    let aux = new ClientAttributes();\n    aux.attributesSet = attributesSet;\n    return aux;\n  }\n\n                                                                            \n  public attributes(): string[] {\n    // sorting is unnecessary but it simplify testing\n    return Array.from(this.attributesSet).sort();\n  }\n}\n"],
  "mappings": "sUAAA,OAAA,QAAA,cACA,aAAA,QAAA,wBA+GA,qBAA4B,CAK1B,YAAY,MAA8B,GAAE,CAC1C,+EAAI,MAAM,QAAU,CAAC,OAAA,MAAM,aAAa,MAAM,SAAW,MAAM,OAAS,EACtE,KAAM,IAAI,OAAM,wCAAwC,MAAM,YAEhE,GAAI,MAAM,QAAU,CAAC,OAAA,MAAM,aAAa,MAAM,SAAW,MAAM,OAAS,KACtE,KAAM,IAAI,OAAM,8CAA8C,MAAM,YAEtE,KAAK,OAAS,OAAK,KAAA,OAAL,MAAO,OACrB,KAAK,OAAS,OAAK,KAAA,OAAL,MAAO,OACrB,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,GAAI,mBACJ,MAAI,MAAK,QAAU,KAAK,SACtB,mBAAoB,CAClB,OAAQ,KAAK,OACb,OAAQ,KAAK,SAIV,CACL,SAAU,SACV,kBACA,QAAS,KAAK,UA7BpB,QAAA,gBAAA,2HAgDA,qBAA4B,CAK1B,YAAY,MAA8B,GAAE,6EAC1C,KAAK,IAAM,OAAK,KAAA,OAAL,MAAO,IAClB,KAAK,IAAM,OAAK,KAAA,OAAL,MAAO,IAClB,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,GAAI,mBACJ,MAAI,MAAK,KAAO,KAAK,MACnB,mBAAoB,CAClB,IAAK,KAAK,IACV,IAAK,KAAK,MAIP,CACL,SAAU,SACV,kBACA,QAAS,KAAK,UAvBpB,QAAA,gBAAA,2HA6BA,sBAA6B,CAG3B,YAAY,MAA8B,GAAE,6EAC1C,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,MAAO,CACL,SAAU,UACV,QAAS,KAAK,UAVpB,QAAA,iBAAA,8HAgBA,uBAA8B,CAG5B,YAAY,MAA8B,GAAE,6EAC1C,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,MAAO,CACL,SAAU,WACV,QAAS,KAAK,UAVpB,QAAA,kBAAA,iIA6EA,sBAA6B,CAQ3B,aAAA,CACE,KAAK,cAAgB,GAAI,KAIpB,uBAAuB,WAAkC,oFAC9D,GAAI,eAAgB,GAAI,KAAI,KAAK,eAGjC,SAAW,gBAAgB,cAAA,uBACzB,GAAK,WAAmB,gBAAkB,GAAM,CAC9C,KAAM,eAAiB,aAAA,uBAA+B,cACtD,cAAc,IAAI,eAGtB,GAAI,KAAM,GAAI,kBACd,WAAI,cAAgB,cACb,IAIF,wBAAwB,WAAoB,CACjD,GAAI,eAA6B,GAAI,KAAI,KAAK,eAC9C,OAAS,aAAa,YAEpB,AAAK,UAAU,WAAW,YACxB,WAAY,UAAY,WAE1B,cAAc,IAAI,WAEpB,GAAI,KAAM,GAAI,kBACd,WAAI,cAAgB,cACb,IAIF,YAAU,CAEf,MAAO,OAAM,KAAK,KAAK,eAAe,QA9C1C,QAAA,iBAAA",
  "names": []
}
