{
  "version": 3,
  "sources": ["user-pool-client.ts"],
  "sourcesContent": ["import { IResource, Resource, Duration } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnUserPoolClient } from './cognito.generated';\nimport { IUserPool } from './user-pool';\nimport { ClientAttributes } from './user-pool-attr';\nimport { IUserPoolResourceServer, ResourceServerScope } from './user-pool-resource-server';\n\n                                                                                                                                                            \nexport interface AuthFlow {\n                                                                                         \n  readonly adminUserPassword?: boolean;\n\n                                                                      \n  readonly custom?: boolean;\n\n                                                                          \n  readonly userPassword?: boolean;\n\n                                                                    \n  readonly userSrp?: boolean;\n}\n\n                                                                                       \nexport interface OAuthSettings {\n\n                                                                                                                                                                                                                                                                                      \n  readonly flows?: OAuthFlows;\n\n                                                                                                                                                                                                                       \n  readonly callbackUrls?: string[];\n\n                                                                                                       \n  readonly logoutUrls?: string[];\n\n                                                                                                                                                                                                                                                                                             \n  readonly scopes?: OAuthScope[];\n}\n\n                                                                                                                                                                                       \nexport interface OAuthFlows {\n                                                                                                                                     \n  readonly authorizationCodeGrant?: boolean;\n\n                                                                                                  \n  readonly implicitCodeGrant?: boolean;\n\n                                                                                                                                                                  \n  readonly clientCredentials?: boolean;\n}\n\n                                                                                                                                                                     \nexport class OAuthScope {\n                                                                                                                                                   \n  public static readonly PHONE = new OAuthScope('phone');\n\n                                                                                                                                     \n  public static readonly EMAIL = new OAuthScope('email');\n\n                                                                                            \n  public static readonly OPENID = new OAuthScope('openid');\n\n                                                                                                                                                \n  public static readonly PROFILE = new OAuthScope('profile');\n\n                                                                                                                                                                \n  public static readonly COGNITO_ADMIN = new OAuthScope('aws.cognito.signin.user.admin');\n\n                                                                                                                                                                                                                                                                                     \n  public static custom(name: string) {\n    return new OAuthScope(name);\n  }\n\n                                                                                   \n  public static resourceServer(server: IUserPoolResourceServer, scope: ResourceServerScope) {\n    return new OAuthScope(`${server.userPoolResourceServerId}/${scope.scopeName}`);\n  }\n\n                                                                                                                                                                                                                                        \n  public readonly scopeName: string;\n\n  private constructor(scopeName: string) {\n    this.scopeName = scopeName;\n  }\n}\n\n                                                             \nexport class UserPoolClientIdentityProvider {\n                                                                                                                                             \n  public static readonly APPLE = new UserPoolClientIdentityProvider('SignInWithApple');\n\n                                                                                                                                            \n  public static readonly FACEBOOK = new UserPoolClientIdentityProvider('Facebook');\n\n                                                                                                                                        \n  public static readonly GOOGLE = new UserPoolClientIdentityProvider('Google');\n\n                                                                                                                                             \n  public static readonly AMAZON = new UserPoolClientIdentityProvider('LoginWithAmazon');\n\n                                                                           \n  public static readonly COGNITO = new UserPoolClientIdentityProvider('COGNITO');\n\n                                                                                                                                                                                      \n  public static custom(name: string) {\n    return new UserPoolClientIdentityProvider(name);\n  }\n\n                                                                                                                \n  public readonly name: string;\n\n  private constructor(name: string) {\n    this.name = name;\n  }\n}\n\n                                             \nexport interface UserPoolClientOptions {\n                                                                                             \n  readonly userPoolClientName?: string;\n\n                                                                        \n  readonly generateSecret?: boolean;\n\n                                                                                                                                                                                                                                             \n  readonly authFlows?: AuthFlow;\n\n                                                                                      \n  readonly disableOAuth?: boolean;\n\n                                                                                                                                                                                                                                          \n  readonly oAuth?: OAuthSettings;\n\n                                                                                                                                                                                                                                                                                                                                                              \n  readonly preventUserExistenceErrors?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly supportedIdentityProviders?: UserPoolClientIdentityProvider[];\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly idTokenValidity?: Duration;\n\n                                                                                                                                                                                                                                                                                                                                      \n  readonly refreshTokenValidity?: Duration;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly accessTokenValidity?: Duration;\n\n                                                                                                                                                                                                                                                                                      \n  readonly readAttributes?: ClientAttributes;\n\n                                                                                                                                                                                                                                                                                       \n  readonly writeAttributes?: ClientAttributes;\n\n                                                                                                                                                                                                                        \n  readonly enableTokenRevocation?: boolean;\n}\n\n                                                      \nexport interface UserPoolClientProps extends UserPoolClientOptions {\n                                                                      \n  readonly userPool: IUserPool;\n}\n\n                                                 \nexport interface IUserPoolClient extends IResource {\n                                                               \n  readonly userPoolClientId: string;\n}\n\n                                       \nexport class UserPoolClient extends Resource implements IUserPoolClient {\n                                                        \n  public static fromUserPoolClientId(scope: Construct, id: string, userPoolClientId: string): IUserPoolClient {\n    class Import extends Resource implements IUserPoolClient {\n      public readonly userPoolClientId = userPoolClientId;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly userPoolClientId: string;\n                                                         \n  public readonly oAuthFlows: OAuthFlows;\n  private readonly _userPoolClientName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n\n  constructor(scope: Construct, id: string, props: UserPoolClientProps) {\n    super(scope, id);\n\n    if (props.disableOAuth && props.oAuth) {\n      throw new Error('OAuth settings cannot be specified when disableOAuth is set.');\n    }\n\n    this.oAuthFlows = props.oAuth?.flows ?? {\n      implicitCodeGrant: true,\n      authorizationCodeGrant: true,\n    };\n\n    let callbackUrls: string[] | undefined = props.oAuth?.callbackUrls;\n    if (this.oAuthFlows.authorizationCodeGrant || this.oAuthFlows.implicitCodeGrant) {\n      if (callbackUrls === undefined) {\n        callbackUrls = ['https://example.com'];\n      } else if (callbackUrls.length === 0) {\n        throw new Error('callbackUrl must not be empty when codeGrant or implicitGrant OAuth flows are enabled.');\n      }\n    }\n\n    const resource = new CfnUserPoolClient(this, 'Resource', {\n      clientName: props.userPoolClientName,\n      generateSecret: props.generateSecret,\n      userPoolId: props.userPool.userPoolId,\n      explicitAuthFlows: this.configureAuthFlows(props),\n      allowedOAuthFlows: props.disableOAuth ? undefined : this.configureOAuthFlows(),\n      allowedOAuthScopes: props.disableOAuth ? undefined : this.configureOAuthScopes(props.oAuth),\n      callbackUrLs: callbackUrls && callbackUrls.length > 0 && !props.disableOAuth ? callbackUrls : undefined,\n      logoutUrLs: props.oAuth?.logoutUrls,\n      allowedOAuthFlowsUserPoolClient: !props.disableOAuth,\n      preventUserExistenceErrors: this.configurePreventUserExistenceErrors(props.preventUserExistenceErrors),\n      supportedIdentityProviders: this.configureIdentityProviders(props),\n      readAttributes: props.readAttributes?.attributes(),\n      writeAttributes: props.writeAttributes?.attributes(),\n      enableTokenRevocation: props.enableTokenRevocation,\n    });\n    this.configureTokenValidity(resource, props);\n\n    this.userPoolClientId = resource.ref;\n    this._userPoolClientName = props.userPoolClientName;\n  }\n\n                                                                                                                                                \n  public get userPoolClientName(): string {\n    if (this._userPoolClientName === undefined) {\n      throw new Error('userPoolClientName is available only if specified on the UserPoolClient during initialization');\n    }\n    return this._userPoolClientName;\n  }\n\n  private configureAuthFlows(props: UserPoolClientProps): string[] | undefined {\n    if (!props.authFlows) return undefined;\n\n    const authFlows: string[] = [];\n    if (props.authFlows.userPassword) { authFlows.push('ALLOW_USER_PASSWORD_AUTH'); }\n    if (props.authFlows.adminUserPassword) { authFlows.push('ALLOW_ADMIN_USER_PASSWORD_AUTH'); }\n    if (props.authFlows.custom) { authFlows.push('ALLOW_CUSTOM_AUTH'); }\n    if (props.authFlows.userSrp) { authFlows.push('ALLOW_USER_SRP_AUTH'); }\n\n    // refreshToken should always be allowed if authFlows are present\n    if (authFlows.length > 0) {\n      authFlows.push('ALLOW_REFRESH_TOKEN_AUTH');\n    }\n\n    if (authFlows.length === 0) {\n      return undefined;\n    }\n    return authFlows;\n  }\n\n  private configureOAuthFlows(): string[] | undefined {\n    if ((this.oAuthFlows.authorizationCodeGrant || this.oAuthFlows.implicitCodeGrant) && this.oAuthFlows.clientCredentials) {\n      throw new Error('clientCredentials OAuth flow cannot be selected along with codeGrant or implicitGrant.');\n    }\n    const oAuthFlows: string[] = [];\n    if (this.oAuthFlows.clientCredentials) { oAuthFlows.push('client_credentials'); }\n    if (this.oAuthFlows.implicitCodeGrant) { oAuthFlows.push('implicit'); }\n    if (this.oAuthFlows.authorizationCodeGrant) { oAuthFlows.push('code'); }\n\n    if (oAuthFlows.length === 0) {\n      return undefined;\n    }\n    return oAuthFlows;\n  }\n\n  private configureOAuthScopes(oAuth?: OAuthSettings): string[] {\n    const scopes = oAuth?.scopes ?? [OAuthScope.PROFILE, OAuthScope.PHONE, OAuthScope.EMAIL, OAuthScope.OPENID,\n      OAuthScope.COGNITO_ADMIN];\n    const scopeNames = new Set(scopes.map((x) => x.scopeName));\n    const autoOpenIdScopes = [OAuthScope.PHONE, OAuthScope.EMAIL, OAuthScope.PROFILE];\n    if (autoOpenIdScopes.reduce((agg, s) => agg || scopeNames.has(s.scopeName), false)) {\n      scopeNames.add(OAuthScope.OPENID.scopeName);\n    }\n    return Array.from(scopeNames);\n  }\n\n  private configurePreventUserExistenceErrors(prevent?: boolean): string | undefined {\n    if (prevent === undefined) {\n      return undefined;\n    }\n    return prevent ? 'ENABLED' : 'LEGACY';\n  }\n\n  private configureIdentityProviders(props: UserPoolClientProps): string[] | undefined {\n    let providers: string[];\n    if (!props.supportedIdentityProviders) {\n      const providerSet = new Set(props.userPool.identityProviders.map((p) => p.providerName));\n      providerSet.add('COGNITO');\n      providers = Array.from(providerSet);\n    } else {\n      providers = props.supportedIdentityProviders.map((p) => p.name);\n    }\n    if (providers.length === 0) { return undefined; }\n    return Array.from(providers);\n  }\n\n  private configureTokenValidity(resource: CfnUserPoolClient, props: UserPoolClientProps) {\n    this.validateDuration('idTokenValidity', Duration.minutes(5), Duration.days(1), props.idTokenValidity);\n    this.validateDuration('accessTokenValidity', Duration.minutes(5), Duration.days(1), props.accessTokenValidity);\n    this.validateDuration('refreshTokenValidity', Duration.minutes(60), Duration.days(10 * 365), props.refreshTokenValidity);\n    if (props.refreshTokenValidity) {\n      this.validateDuration('idTokenValidity', Duration.minutes(5), props.refreshTokenValidity, props.idTokenValidity);\n      this.validateDuration('accessTokenValidity', Duration.minutes(5), props.refreshTokenValidity, props.accessTokenValidity);\n    }\n\n    if (props.accessTokenValidity || props.idTokenValidity || props.refreshTokenValidity) {\n      resource.tokenValidityUnits = {\n        idToken: props.idTokenValidity ? 'minutes' : undefined,\n        accessToken: props.accessTokenValidity ? 'minutes' : undefined,\n        refreshToken: props.refreshTokenValidity ? 'minutes' : undefined,\n      };\n    };\n\n    resource.idTokenValidity = props.idTokenValidity ? props.idTokenValidity.toMinutes() : undefined;\n    resource.refreshTokenValidity = props.refreshTokenValidity ? props.refreshTokenValidity.toMinutes() : undefined;\n    resource.accessTokenValidity = props.accessTokenValidity ? props.accessTokenValidity.toMinutes() : undefined;\n  }\n\n  private validateDuration(name: string, min: Duration, max: Duration, value?: Duration) {\n    if (value === undefined) { return; }\n    if (value.toMilliseconds() < min.toMilliseconds() || value.toMilliseconds() > max.toMilliseconds()) {\n      throw new Error(`${name}: Must be a duration between ${min.toHumanString()} and ${max.toHumanString()} (inclusive); received ${value.toHumanString()}.`);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
