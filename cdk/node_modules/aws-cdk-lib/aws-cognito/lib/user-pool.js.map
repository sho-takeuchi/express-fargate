{
  "version": 3,
  "sources": ["user-pool.ts"],
  "sourcesContent": ["import { IRole, PolicyDocument, PolicyStatement, Role, ServicePrincipal } from '../../aws-iam';\nimport { IKey } from '../../aws-kms';\nimport * as lambda from '../../aws-lambda';\nimport { ArnFormat, Duration, IResource, Lazy, Names, RemovalPolicy, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { toASCII as punycodeEncode } from 'punycode/';\nimport { CfnUserPool } from './cognito.generated';\nimport { StandardAttributeNames } from './private/attr-names';\nimport { ICustomAttribute, StandardAttribute, StandardAttributes } from './user-pool-attr';\nimport { UserPoolClient, UserPoolClientOptions } from './user-pool-client';\nimport { UserPoolDomain, UserPoolDomainOptions } from './user-pool-domain';\nimport { UserPoolEmail } from './user-pool-email';\nimport { IUserPoolIdentityProvider } from './user-pool-idp';\nimport { UserPoolResourceServer, UserPoolResourceServerOptions } from './user-pool-resource-server';\n\n                                                                                 \nexport interface SignInAliases {\n                                                                                                 \n  readonly username?: boolean;\n\n                                                                                                          \n  readonly email?: boolean;\n\n                                                                                                        \n  readonly phone?: boolean;\n\n                                                                                                                                                                                                      \n  readonly preferredUsername?: boolean;\n}\n\n                                                                                  \nexport interface AutoVerifiedAttrs {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly email?: boolean;\n\n                                                                                                                                                                     \n  readonly phone?: boolean;\n}\n\n                                                                                                                                                                       \nexport interface UserPoolTriggers {\n                                                                                                                                                                                                           \n  readonly createAuthChallenge?: lambda.IFunction;\n\n                                                                                                                                                                                                    \n  readonly customMessage?: lambda.IFunction;\n\n                                                                                                                                                                                                            \n  readonly defineAuthChallenge?: lambda.IFunction;\n\n                                                                                                                                                                                                              \n  readonly postAuthentication?: lambda.IFunction;\n\n                                                                                                                                                                                                          \n  readonly postConfirmation?: lambda.IFunction;\n\n                                                                                                                                                                                                            \n  readonly preAuthentication?: lambda.IFunction;\n\n                                                                                                                                                                                                   \n  readonly preSignUp?: lambda.IFunction;\n\n                                                                                                                                                                                                                \n  readonly preTokenGeneration?: lambda.IFunction;\n\n                                                                                                                                                                                                  \n  readonly userMigration?: lambda.IFunction;\n\n                                                                                                                                                                                                                               \n  readonly verifyAuthChallengeResponse?: lambda.IFunction;\n\n                                                                                                                                                                                                                                              \n  readonly customEmailSender?: lambda.IFunction\n\n                                                                                                                                                                                                                                          \n  readonly customSmsSender?: lambda.IFunction\n\n  /**\n   * Index signature\n   */\n  [trigger: string]: lambda.IFunction | undefined;\n}\n\n                                                                         \nexport class UserPoolOperation {\n                                                                                                                                                                          \n  public static readonly CREATE_AUTH_CHALLENGE = new UserPoolOperation('createAuthChallenge');\n\n                                                                                                                                                                             \n  public static readonly CUSTOM_MESSAGE = new UserPoolOperation('customMessage');\n\n                                                                                                                                                                                    \n  public static readonly DEFINE_AUTH_CHALLENGE = new UserPoolOperation('defineAuthChallenge');\n\n                                                                                                                                                                 \n  public static readonly POST_AUTHENTICATION = new UserPoolOperation('postAuthentication');\n\n                                                                                                                                                                                          \n  public static readonly POST_CONFIRMATION = new UserPoolOperation('postConfirmation');\n\n                                                                                                                                                                                     \n  public static readonly PRE_AUTHENTICATION = new UserPoolOperation('preAuthentication');\n\n                                                                                                                                                                              \n  public static readonly PRE_SIGN_UP = new UserPoolOperation('preSignUp');\n\n                                                                                                                                                                     \n  public static readonly PRE_TOKEN_GENERATION = new UserPoolOperation('preTokenGeneration');\n\n                                                                                                                                                                                    \n  public static readonly USER_MIGRATION = new UserPoolOperation('userMigration');\n\n                                                                                                                                                                                                   \n  public static readonly VERIFY_AUTH_CHALLENGE_RESPONSE = new UserPoolOperation('verifyAuthChallengeResponse');\n\n                                                                                                                                                                                                        \n  public static readonly CUSTOM_EMAIL_SENDER = new UserPoolOperation('customEmailSender');\n\n                                                                                                                                                                                                      \n  public static readonly CUSTOM_SMS_SENDER = new UserPoolOperation('customSmsSender');\n\n                                     \n  public static of(name: string): UserPoolOperation {\n    const lowerCamelCase = name.charAt(0).toLowerCase() + name.slice(1);\n    return new UserPoolOperation(lowerCamelCase);\n  }\n\n                                                             \n  public readonly operationName: string;\n\n  private constructor(operationName: string) {\n    this.operationName = operationName;\n  }\n}\n\n                                       \nexport enum VerificationEmailStyle {\n                              \n  CODE = 'CONFIRM_WITH_CODE',\n                              \n  LINK = 'CONFIRM_WITH_LINK',\n}\n\n                                                         \nexport interface UserVerificationConfig {\n                                                                                                                                                                                                                                                                                                              \n  readonly emailSubject?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly emailBody?: string;\n\n                                                                                                                                                                                                                                                                      \n  readonly emailStyle?: VerificationEmailStyle;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  readonly smsMessage?: string;\n}\n\n                                                                     \nexport interface UserInvitationConfig {\n                                                                                                                                                                         \n  readonly emailSubject?: string;\n\n                                                                                                                                                                                                            \n  readonly emailBody?: string;\n\n                                                                                                                                                                                                            \n  readonly smsMessage?: string;\n}\n\n                                                                                                                                                                                     \nexport enum Mfa {\n                                                                                 \n  OFF = 'OFF',\n                                                                                                   \n  OPTIONAL = 'OPTIONAL',\n                                                                               \n  REQUIRED = 'ON',\n}\n\n                                                                                                                                                                                        \nexport interface MfaSecondFactor {\n                                                                                                                                                                                                                              \n  readonly sms: boolean;\n\n                                                                                                                                                                                                                                           \n  readonly otp: boolean;\n}\n\n                                          \nexport interface PasswordPolicy {\n                                                                                                                                                                                                                                                                                          \n  readonly tempPasswordValidity?: Duration;\n\n                                                                               \n  readonly minLength?: number;\n\n                                                                                                                \n  readonly requireLowercase?: boolean;\n\n                                                                                                                \n  readonly requireUppercase?: boolean;\n\n                                                                                                  \n  readonly requireDigits?: boolean;\n\n                                                                                                   \n  readonly requireSymbols?: boolean;\n}\n\n                                            \nexport interface EmailSettings {\n                                                                                                                   \n  readonly from?: string;\n\n                                                                                                                                                                                                                                        \n  readonly replyTo?: string;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \nexport enum AccountRecovery {\n                                                                                                                                                \n  EMAIL_AND_PHONE_WITHOUT_MFA,\n\n                                                                                                                                                \n  PHONE_WITHOUT_MFA_AND_EMAIL,\n\n                           \n  EMAIL_ONLY,\n\n                                                                                                                       \n  PHONE_ONLY_WITHOUT_MFA,\n\n                                                                                                                                                                \n  PHONE_AND_EMAIL,\n\n                                                                                            \n  NONE,\n}\n\n                                                                                                                                                    \nexport interface DeviceTracking {\n                                                                                                                                                                                                                                                   \n  readonly challengeRequiredOnNewDevice: boolean;\n\n                                                                                                                                                                                                            \n  readonly deviceOnlyRememberedOnUserPrompt: boolean;\n}\n\n                                           \nexport interface UserPoolProps {\n                                                                                                                         \n  readonly userPoolName?: string;\n\n                                                                                                                                          \n  readonly selfSignUpEnabled?: boolean;\n\n                                                                                                                                                                                                                    \n  readonly userVerification?: UserVerificationConfig;\n\n                                                                                                                                    \n  readonly userInvitation?: UserInvitationConfig;\n\n                                                                                                                            \n  readonly smsRole?: IRole;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n  readonly smsRoleExternalId?: string;\n\n                                                                                                                                                                                                                                                                                                               \n  readonly enableSmsRole?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly signInAliases?: SignInAliases;\n\n                                                                                                                                                                                                                                                                                                                                         \n  readonly autoVerify?: AutoVerifiedAttrs;\n\n                                                                                                                                                                                                                                                                                                 \n  readonly standardAttributes?: StandardAttributes;\n\n                                                                                                                                                    \n  readonly customAttributes?: { [key: string]: ICustomAttribute };\n\n                                                                                                                             \n  readonly mfa?: Mfa;\n\n                                                                                                                                                                                                                \n  readonly mfaMessage?: string;\n\n                                                                                                                                                                                                                                                                                \n  readonly mfaSecondFactor?: MfaSecondFactor;\n\n                                                                                                                     \n  readonly passwordPolicy?: PasswordPolicy;\n\n                                                                                                                                                           \n  readonly emailSettings?: EmailSettings;\n\n                                                                                                                 \n  readonly email?: UserPoolEmail;\n\n                                                                                                                                                                                                                                                  \n  readonly lambdaTriggers?: UserPoolTriggers;\n\n                                                                                                                                                                                                                                   \n  readonly signInCaseSensitive?: boolean;\n\n                                                                                                                                 \n  readonly accountRecovery?: AccountRecovery;\n\n                                                                                                                     \n  readonly removalPolicy?: RemovalPolicy;\n\n                                                                                                          \n  readonly deviceTracking?: DeviceTracking;\n\n                                                                                                                                                                                                                                                                                  \n  readonly customSenderKmsKey?: IKey;\n}\n\n                                        \nexport interface IUserPool extends IResource {\n                                                                           \n  readonly userPoolId: string;\n\n                                                                   \n  readonly userPoolArn: string;\n\n                                                                           \n  readonly identityProviders: IUserPoolIdentityProvider[];\n\n                                                                                                                                                                \n  addClient(id: string, options?: UserPoolClientOptions): UserPoolClient;\n\n                                                                                                                                                                \n  addDomain(id: string, options: UserPoolDomainOptions): UserPoolDomain;\n\n                                                                                                                                                                          \n  addResourceServer(id: string, options: UserPoolResourceServerOptions): UserPoolResourceServer;\n\n                                                                   \n  registerIdentityProvider(provider: IUserPoolIdentityProvider): void;\n}\n\nabstract class UserPoolBase extends Resource implements IUserPool {\n  public abstract readonly userPoolId: string;\n  public abstract readonly userPoolArn: string;\n  public readonly identityProviders: IUserPoolIdentityProvider[] = [];\n\n  public addClient(id: string, options?: UserPoolClientOptions): UserPoolClient {\n    return new UserPoolClient(this, id, {\n      userPool: this,\n      ...options,\n    });\n  }\n\n  public addDomain(id: string, options: UserPoolDomainOptions): UserPoolDomain {\n    return new UserPoolDomain(this, id, {\n      userPool: this,\n      ...options,\n    });\n  }\n\n  public addResourceServer(id: string, options: UserPoolResourceServerOptions): UserPoolResourceServer {\n    return new UserPoolResourceServer(this, id, {\n      userPool: this,\n      ...options,\n    });\n  }\n\n  public registerIdentityProvider(provider: IUserPoolIdentityProvider) {\n    this.identityProviders.push(provider);\n  }\n}\n\n                                     \nexport class UserPool extends UserPoolBase {\n                                                              \n  public static fromUserPoolId(scope: Construct, id: string, userPoolId: string): IUserPool {\n    let userPoolArn = Stack.of(scope).formatArn({\n      service: 'cognito-idp',\n      resource: 'userpool',\n      resourceName: userPoolId,\n    });\n\n    return UserPool.fromUserPoolArn(scope, id, userPoolArn);\n  }\n\n                                                               \n  public static fromUserPoolArn(scope: Construct, id: string, userPoolArn: string): IUserPool {\n    const arnParts = Stack.of(scope).splitArn(userPoolArn, ArnFormat.SLASH_RESOURCE_NAME);\n\n    if (!arnParts.resourceName) {\n      throw new Error('invalid user pool ARN');\n    }\n\n    const userPoolId = arnParts.resourceName;\n\n    class ImportedUserPool extends UserPoolBase {\n      public readonly userPoolArn = userPoolArn;\n      public readonly userPoolId = userPoolId;\n      constructor() {\n        super(scope, id, {\n          account: arnParts.account,\n          region: arnParts.region,\n        });\n      }\n    }\n\n    return new ImportedUserPool();\n  }\n\n                                                           \n  public readonly userPoolId: string;\n\n                                         \n  public readonly userPoolArn: string;\n\n                                                        \n  public readonly userPoolProviderName: string;\n\n                                                       \n  public readonly userPoolProviderUrl: string;\n\n  private triggers: CfnUserPool.LambdaConfigProperty = {};\n\n  constructor(scope: Construct, id: string, props: UserPoolProps = {}) {\n    super(scope, id);\n\n    const signIn = this.signInConfiguration(props);\n\n    if (props.customSenderKmsKey) {\n      const kmsKey = props.customSenderKmsKey;\n      (this.triggers as any).kmsKeyId = kmsKey.keyArn;\n    }\n\n    if (props.lambdaTriggers) {\n      for (const t of Object.keys(props.lambdaTriggers)) {\n        let trigger: lambda.IFunction | undefined;\n        switch (t) {\n          case 'customSmsSender':\n          case 'customEmailSender':\n            if (!this.triggers.kmsKeyId) {\n              throw new Error('you must specify a KMS key if you are using customSmsSender or customEmailSender.');\n            }\n            trigger = props.lambdaTriggers[t];\n            const version = 'V1_0';\n            if (trigger !== undefined) {\n              this.addLambdaPermission(trigger as lambda.IFunction, t);\n              (this.triggers as any)[t] = {\n                lambdaArn: trigger.functionArn,\n                lambdaVersion: version,\n              };\n            }\n            break;\n          default:\n            trigger = props.lambdaTriggers[t] as lambda.IFunction | undefined;\n            if (trigger !== undefined) {\n              this.addLambdaPermission(trigger as lambda.IFunction, t);\n              (this.triggers as any)[t] = (trigger as lambda.IFunction).functionArn;\n            }\n            break;\n        }\n      }\n    }\n\n    const verificationMessageTemplate = this.verificationMessageConfiguration(props);\n    let emailVerificationMessage;\n    let emailVerificationSubject;\n    if (verificationMessageTemplate.defaultEmailOption === VerificationEmailStyle.CODE) {\n      emailVerificationMessage = verificationMessageTemplate.emailMessage;\n      emailVerificationSubject = verificationMessageTemplate.emailSubject;\n    }\n    const smsVerificationMessage = verificationMessageTemplate.smsMessage;\n    const inviteMessageTemplate: CfnUserPool.InviteMessageTemplateProperty = {\n      emailMessage: props.userInvitation?.emailBody,\n      emailSubject: props.userInvitation?.emailSubject,\n      smsMessage: props.userInvitation?.smsMessage,\n    };\n    const selfSignUpEnabled = props.selfSignUpEnabled ?? false;\n    const adminCreateUserConfig: CfnUserPool.AdminCreateUserConfigProperty = {\n      allowAdminCreateUserOnly: !selfSignUpEnabled,\n      inviteMessageTemplate: props.userInvitation !== undefined ? inviteMessageTemplate : undefined,\n    };\n\n    const passwordPolicy = this.configurePasswordPolicy(props);\n\n    if (props.email && props.emailSettings) {\n      throw new Error('you must either provide \"email\" or \"emailSettings\", but not both');\n    }\n    const emailConfiguration = props.email ? props.email._bind(this) : undefinedIfNoKeys({\n      from: encodePuny(props.emailSettings?.from),\n      replyToEmailAddress: encodePuny(props.emailSettings?.replyTo),\n    });\n\n    const userPool = new CfnUserPool(this, 'Resource', {\n      userPoolName: props.userPoolName,\n      usernameAttributes: signIn.usernameAttrs,\n      aliasAttributes: signIn.aliasAttrs,\n      autoVerifiedAttributes: signIn.autoVerifyAttrs,\n      lambdaConfig: Lazy.any({ produce: () => undefinedIfNoKeys(this.triggers) }),\n      smsAuthenticationMessage: this.mfaMessage(props),\n      smsConfiguration: this.smsConfiguration(props),\n      adminCreateUserConfig,\n      emailVerificationMessage,\n      emailVerificationSubject,\n      smsVerificationMessage,\n      verificationMessageTemplate,\n      schema: this.schemaConfiguration(props),\n      mfaConfiguration: props.mfa,\n      enabledMfas: this.mfaConfiguration(props),\n      policies: passwordPolicy !== undefined ? { passwordPolicy } : undefined,\n      emailConfiguration,\n      usernameConfiguration: undefinedIfNoKeys({\n        caseSensitive: props.signInCaseSensitive,\n      }),\n      accountRecoverySetting: this.accountRecovery(props),\n      deviceConfiguration: props.deviceTracking,\n    });\n    userPool.applyRemovalPolicy(props.removalPolicy);\n\n    this.userPoolId = userPool.ref;\n    this.userPoolArn = userPool.attrArn;\n\n    this.userPoolProviderName = userPool.attrProviderName;\n    this.userPoolProviderUrl = userPool.attrProviderUrl;\n  }\n\n                                                                                                                                                                                                    \n  public addTrigger(operation: UserPoolOperation, fn: lambda.IFunction): void {\n    if (operation.operationName in this.triggers) {\n      throw new Error(`A trigger for the operation ${operation.operationName} already exists.`);\n    }\n\n    this.addLambdaPermission(fn, operation.operationName);\n    switch (operation.operationName) {\n      case 'customEmailSender':\n      case 'customSmsSender':\n        if (!this.triggers.kmsKeyId) {\n          throw new Error('you must specify a KMS key if you are using customSmsSender or customEmailSender.');\n        }\n        (this.triggers as any)[operation.operationName] = {\n          lambdaArn: fn.functionArn,\n          lambdaVersion: 'V1_0',\n        };\n        break;\n      default:\n        (this.triggers as any)[operation.operationName] = fn.functionArn;\n    }\n\n  }\n\n  private addLambdaPermission(fn: lambda.IFunction, name: string): void {\n    const capitalize = name.charAt(0).toUpperCase() + name.slice(1);\n    fn.addPermission(`${capitalize}Cognito`, {\n      principal: new ServicePrincipal('cognito-idp.amazonaws.com'),\n      sourceArn: this.userPoolArn,\n    });\n  }\n\n  private mfaMessage(props: UserPoolProps): string | undefined {\n    const CODE_TEMPLATE = '{####}';\n    const MAX_LENGTH = 140;\n    const message = props.mfaMessage;\n\n    if (message && !Token.isUnresolved(message)) {\n      if (!message.includes(CODE_TEMPLATE)) {\n        throw new Error(`MFA message must contain the template string '${CODE_TEMPLATE}'`);\n      }\n\n      if (message.length > MAX_LENGTH) {\n        throw new Error(`MFA message must be between ${CODE_TEMPLATE.length} and ${MAX_LENGTH} characters`);\n      }\n    }\n\n    return message;\n  }\n\n  private verificationMessageConfiguration(props: UserPoolProps): CfnUserPool.VerificationMessageTemplateProperty {\n    const CODE_TEMPLATE = '{####}';\n    const VERIFY_EMAIL_TEMPLATE = '{##Verify Email##}';\n\n    const emailStyle = props.userVerification?.emailStyle ?? VerificationEmailStyle.CODE;\n    const emailSubject = props.userVerification?.emailSubject ?? 'Verify your new account';\n    const smsMessage = props.userVerification?.smsMessage ?? `The verification code to your new account is ${CODE_TEMPLATE}`;\n\n    if (emailStyle === VerificationEmailStyle.CODE) {\n      const emailMessage = props.userVerification?.emailBody ?? `The verification code to your new account is ${CODE_TEMPLATE}`;\n      if (!Token.isUnresolved(emailMessage) && emailMessage.indexOf(CODE_TEMPLATE) < 0) {\n        throw new Error(`Verification email body must contain the template string '${CODE_TEMPLATE}'`);\n      }\n      if (!Token.isUnresolved(smsMessage) && smsMessage.indexOf(CODE_TEMPLATE) < 0) {\n        throw new Error(`SMS message must contain the template string '${CODE_TEMPLATE}'`);\n      }\n      return {\n        defaultEmailOption: VerificationEmailStyle.CODE,\n        emailMessage,\n        emailSubject,\n        smsMessage,\n      };\n    } else {\n      const emailMessage = props.userVerification?.emailBody ??\n        `Verify your account by clicking on ${VERIFY_EMAIL_TEMPLATE}`;\n      if (!Token.isUnresolved(emailMessage) && emailMessage.indexOf(VERIFY_EMAIL_TEMPLATE) < 0) {\n        throw new Error(`Verification email body must contain the template string '${VERIFY_EMAIL_TEMPLATE}'`);\n      }\n      return {\n        defaultEmailOption: VerificationEmailStyle.LINK,\n        emailMessageByLink: emailMessage,\n        emailSubjectByLink: emailSubject,\n        smsMessage,\n      };\n    }\n  }\n\n  private signInConfiguration(props: UserPoolProps) {\n    let aliasAttrs: string[] | undefined;\n    let usernameAttrs: string[] | undefined;\n    let autoVerifyAttrs: string[] | undefined;\n\n    const signIn: SignInAliases = props.signInAliases ?? { username: true };\n\n    if (signIn.preferredUsername && !signIn.username) {\n      throw new Error('username signIn must be enabled if preferredUsername is enabled');\n    }\n\n    if (signIn.username) {\n      aliasAttrs = [];\n      if (signIn.email) { aliasAttrs.push(StandardAttributeNames.email); }\n      if (signIn.phone) { aliasAttrs.push(StandardAttributeNames.phoneNumber); }\n      if (signIn.preferredUsername) { aliasAttrs.push(StandardAttributeNames.preferredUsername); }\n      if (aliasAttrs.length === 0) { aliasAttrs = undefined; }\n    } else {\n      usernameAttrs = [];\n      if (signIn.email) { usernameAttrs.push(StandardAttributeNames.email); }\n      if (signIn.phone) { usernameAttrs.push(StandardAttributeNames.phoneNumber); }\n    }\n\n    if (props.autoVerify) {\n      autoVerifyAttrs = [];\n      if (props.autoVerify.email) { autoVerifyAttrs.push(StandardAttributeNames.email); }\n      if (props.autoVerify.phone) { autoVerifyAttrs.push(StandardAttributeNames.phoneNumber); }\n    } else if (signIn.email || signIn.phone) {\n      autoVerifyAttrs = [];\n      if (signIn.email) { autoVerifyAttrs.push(StandardAttributeNames.email); }\n      if (signIn.phone) { autoVerifyAttrs.push(StandardAttributeNames.phoneNumber); }\n    }\n\n    return { usernameAttrs, aliasAttrs, autoVerifyAttrs };\n  }\n\n  private smsConfiguration(props: UserPoolProps): CfnUserPool.SmsConfigurationProperty | undefined {\n    if (props.enableSmsRole === false && props.smsRole) {\n      throw new Error('enableSmsRole cannot be disabled when smsRole is specified');\n    }\n\n    if (props.smsRole) {\n      return {\n        snsCallerArn: props.smsRole.roleArn,\n        externalId: props.smsRoleExternalId,\n      };\n    }\n\n    if (props.enableSmsRole === false) {\n      return undefined;\n    }\n\n    const mfaConfiguration = this.mfaConfiguration(props);\n    const phoneVerification = props.signInAliases?.phone === true || props.autoVerify?.phone === true;\n    const roleRequired = mfaConfiguration?.includes('SMS_MFA') || phoneVerification;\n    if (!roleRequired && props.enableSmsRole === undefined) {\n      return undefined;\n    }\n\n    const smsRoleExternalId = Names.uniqueId(this).substr(0, 1223); // sts:ExternalId max length of 1224\n    const smsRole = props.smsRole ?? new Role(this, 'smsRole', {\n      assumedBy: new ServicePrincipal('cognito-idp.amazonaws.com', {\n        conditions: {\n          StringEquals: { 'sts:ExternalId': smsRoleExternalId },\n        },\n      }),\n      inlinePolicies: {\n        /*\n          * The UserPool is very particular that it must contain an 'sns:Publish' action as an inline policy.\n          * Ideally, a conditional that restricts this action to 'sms' protocol needs to be attached, but the UserPool deployment fails validation.\n          * Seems like a case of being excessively strict.\n          */\n        'sns-publish': new PolicyDocument({\n          statements: [\n            new PolicyStatement({\n              actions: ['sns:Publish'],\n              resources: ['*'],\n            }),\n          ],\n        }),\n      },\n    });\n    return {\n      externalId: smsRoleExternalId,\n      snsCallerArn: smsRole.roleArn,\n    };\n  }\n\n  private mfaConfiguration(props: UserPoolProps): string[] | undefined {\n    if (props.mfa === undefined || props.mfa === Mfa.OFF) {\n      // since default is OFF, treat undefined and OFF the same way\n      return undefined;\n    } else if (props.mfaSecondFactor === undefined &&\n      (props.mfa === Mfa.OPTIONAL || props.mfa === Mfa.REQUIRED)) {\n      return ['SMS_MFA'];\n    } else {\n      const enabledMfas = [];\n      if (props.mfaSecondFactor!.sms) {\n        enabledMfas.push('SMS_MFA');\n      }\n      if (props.mfaSecondFactor!.otp) {\n        enabledMfas.push('SOFTWARE_TOKEN_MFA');\n      }\n      return enabledMfas;\n    }\n  }\n\n  private configurePasswordPolicy(props: UserPoolProps): CfnUserPool.PasswordPolicyProperty | undefined {\n    const tempPasswordValidity = props.passwordPolicy?.tempPasswordValidity;\n    if (tempPasswordValidity !== undefined && tempPasswordValidity.toDays() > Duration.days(365).toDays()) {\n      throw new Error(`tempPasswordValidity cannot be greater than 365 days (received: ${tempPasswordValidity.toDays()})`);\n    }\n    const minLength = props.passwordPolicy ? props.passwordPolicy.minLength ?? 8 : undefined;\n    if (minLength !== undefined && (minLength < 6 || minLength > 99)) {\n      throw new Error(`minLength for password must be between 6 and 99 (received: ${minLength})`);\n    }\n    return undefinedIfNoKeys({\n      temporaryPasswordValidityDays: tempPasswordValidity?.toDays({ integral: true }),\n      minimumLength: minLength,\n      requireLowercase: props.passwordPolicy?.requireLowercase,\n      requireUppercase: props.passwordPolicy?.requireUppercase,\n      requireNumbers: props.passwordPolicy?.requireDigits,\n      requireSymbols: props.passwordPolicy?.requireSymbols,\n    });\n  }\n\n  private schemaConfiguration(props: UserPoolProps): CfnUserPool.SchemaAttributeProperty[] | undefined {\n    const schema: CfnUserPool.SchemaAttributeProperty[] = [];\n\n    if (props.standardAttributes) {\n      const stdAttributes = (Object.entries(props.standardAttributes) as Array<[keyof StandardAttributes, StandardAttribute]>)\n        .filter(([, attr]) => !!attr)\n        .map(([attrName, attr]) => ({\n          name: StandardAttributeNames[attrName],\n          mutable: attr.mutable ?? true,\n          required: attr.required ?? false,\n        }));\n\n      schema.push(...stdAttributes);\n    }\n\n    if (props.customAttributes) {\n      const customAttrs = Object.keys(props.customAttributes).map((attrName) => {\n        const attrConfig = props.customAttributes![attrName].bind();\n        const numberConstraints: CfnUserPool.NumberAttributeConstraintsProperty = {\n          minValue: attrConfig.numberConstraints?.min?.toString(),\n          maxValue: attrConfig.numberConstraints?.max?.toString(),\n        };\n        const stringConstraints: CfnUserPool.StringAttributeConstraintsProperty = {\n          minLength: attrConfig.stringConstraints?.minLen?.toString(),\n          maxLength: attrConfig.stringConstraints?.maxLen?.toString(),\n        };\n\n        return {\n          name: attrName,\n          attributeDataType: attrConfig.dataType,\n          numberAttributeConstraints: attrConfig.numberConstraints\n            ? numberConstraints\n            : undefined,\n          stringAttributeConstraints: attrConfig.stringConstraints\n            ? stringConstraints\n            : undefined,\n          mutable: attrConfig.mutable,\n        };\n      });\n      schema.push(...customAttrs);\n    }\n\n    if (schema.length === 0) {\n      return undefined;\n    }\n    return schema;\n  }\n\n  private accountRecovery(props: UserPoolProps): undefined | CfnUserPool.AccountRecoverySettingProperty {\n    const accountRecovery = props.accountRecovery ?? AccountRecovery.PHONE_WITHOUT_MFA_AND_EMAIL;\n    switch (accountRecovery) {\n      case AccountRecovery.EMAIL_AND_PHONE_WITHOUT_MFA:\n        return {\n          recoveryMechanisms: [\n            { name: 'verified_email', priority: 1 },\n            { name: 'verified_phone_number', priority: 2 },\n          ],\n        };\n      case AccountRecovery.PHONE_WITHOUT_MFA_AND_EMAIL:\n        return {\n          recoveryMechanisms: [\n            { name: 'verified_phone_number', priority: 1 },\n            { name: 'verified_email', priority: 2 },\n          ],\n        };\n      case AccountRecovery.EMAIL_ONLY:\n        return {\n          recoveryMechanisms: [{ name: 'verified_email', priority: 1 }],\n        };\n      case AccountRecovery.PHONE_ONLY_WITHOUT_MFA:\n        return {\n          recoveryMechanisms: [{ name: 'verified_phone_number', priority: 1 }],\n        };\n      case AccountRecovery.NONE:\n        return {\n          recoveryMechanisms: [{ name: 'admin_only', priority: 1 }],\n        };\n      case AccountRecovery.PHONE_AND_EMAIL:\n        return undefined;\n      default:\n        throw new Error(`Unsupported AccountRecovery type - ${accountRecovery}`);\n    }\n  }\n}\n\nfunction undefinedIfNoKeys(struct: object): object | undefined {\n  const allUndefined = Object.values(struct).every(val => val === undefined);\n  return allUndefined ? undefined : struct;\n}\nfunction encodePuny(input: string | undefined): string | undefined {\n  return input !== undefined ? punycodeEncode(input) : input;\n}\n"],
  "mappings": "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",
  "names": []
}
