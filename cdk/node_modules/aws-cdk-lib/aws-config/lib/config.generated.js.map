{
  "version": 3,
  "sources": ["config.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:06:18.539Z\",\"fingerprint\":\"GEGbE/DjVlXh/hHbIAVlUUht5OHX8XlaQqAkN5RjzI8=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                                   \nexport interface CfnAggregationAuthorizationProps {\n\n                                                                                                                                                                                                                                                                                       \n    readonly authorizedAccountId: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly authorizedAwsRegion: string;\n\n                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAggregationAuthorizationProps`\n *\n * @param properties - the TypeScript properties of a `CfnAggregationAuthorizationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAggregationAuthorizationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authorizedAccountId', cdk.requiredValidator)(properties.authorizedAccountId));\n    errors.collect(cdk.propertyValidator('authorizedAccountId', cdk.validateString)(properties.authorizedAccountId));\n    errors.collect(cdk.propertyValidator('authorizedAwsRegion', cdk.requiredValidator)(properties.authorizedAwsRegion));\n    errors.collect(cdk.propertyValidator('authorizedAwsRegion', cdk.validateString)(properties.authorizedAwsRegion));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAggregationAuthorizationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::AggregationAuthorization` resource\n *\n * @param properties - the TypeScript properties of a `CfnAggregationAuthorizationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::AggregationAuthorization` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAggregationAuthorizationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAggregationAuthorizationPropsValidator(properties).assertSuccess();\n    return {\n        AuthorizedAccountId: cdk.stringToCloudFormation(properties.authorizedAccountId),\n        AuthorizedAwsRegion: cdk.stringToCloudFormation(properties.authorizedAwsRegion),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAggregationAuthorizationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAggregationAuthorizationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAggregationAuthorizationProps>();\n    ret.addPropertyResult('authorizedAccountId', 'AuthorizedAccountId', cfn_parse.FromCloudFormation.getString(properties.AuthorizedAccountId));\n    ret.addPropertyResult('authorizedAwsRegion', 'AuthorizedAwsRegion', cfn_parse.FromCloudFormation.getString(properties.AuthorizedAwsRegion));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnAggregationAuthorization extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::AggregationAuthorization\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAggregationAuthorization {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAggregationAuthorizationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAggregationAuthorization(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                            \n    public readonly attrAggregationAuthorizationArn: string;\n\n                                                                                                                                                                                                                                                                                       \n    public authorizedAccountId: string;\n\n                                                                                                                                                                                                                                                                    \n    public authorizedAwsRegion: string;\n\n                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnAggregationAuthorizationProps) {\n        super(scope, id, { type: CfnAggregationAuthorization.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authorizedAccountId', this);\n        cdk.requireProperty(props, 'authorizedAwsRegion', this);\n        this.attrAggregationAuthorizationArn = cdk.Token.asString(this.getAtt('AggregationAuthorizationArn'));\n\n        this.authorizedAccountId = props.authorizedAccountId;\n        this.authorizedAwsRegion = props.authorizedAwsRegion;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Config::AggregationAuthorization\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAggregationAuthorization.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authorizedAccountId: this.authorizedAccountId,\n            authorizedAwsRegion: this.authorizedAwsRegion,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAggregationAuthorizationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                       \nexport interface CfnConfigRuleProps {\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly source: CfnConfigRule.SourceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly configRuleName?: string;\n\n                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly inputParameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly maximumExecutionFrequency?: string;\n\nn    readonly scope?: CfnConfigRule.ScopeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configRuleName', cdk.validateString)(properties.configRuleName));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('inputParameters', cdk.validateObject)(properties.inputParameters));\n    errors.collect(cdk.propertyValidator('maximumExecutionFrequency', cdk.validateString)(properties.maximumExecutionFrequency));\n    errors.collect(cdk.propertyValidator('scope', CfnConfigRule_ScopePropertyValidator)(properties.scope));\n    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('source', CfnConfigRule_SourcePropertyValidator)(properties.source));\n    return errors.wrap('supplied properties not correct for \"CfnConfigRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigRulePropsValidator(properties).assertSuccess();\n    return {\n        Source: cfnConfigRuleSourcePropertyToCloudFormation(properties.source),\n        ConfigRuleName: cdk.stringToCloudFormation(properties.configRuleName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        InputParameters: cdk.objectToCloudFormation(properties.inputParameters),\n        MaximumExecutionFrequency: cdk.stringToCloudFormation(properties.maximumExecutionFrequency),\n        Scope: cfnConfigRuleScopePropertyToCloudFormation(properties.scope),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigRuleProps>();\n    ret.addPropertyResult('source', 'Source', CfnConfigRuleSourcePropertyFromCloudFormation(properties.Source));\n    ret.addPropertyResult('configRuleName', 'ConfigRuleName', properties.ConfigRuleName != null ? cfn_parse.FromCloudFormation.getString(properties.ConfigRuleName) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('inputParameters', 'InputParameters', properties.InputParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.InputParameters) : undefined);\n    ret.addPropertyResult('maximumExecutionFrequency', 'MaximumExecutionFrequency', properties.MaximumExecutionFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumExecutionFrequency) : undefined);\n    ret.addPropertyResult('scope', 'Scope', properties.Scope != null ? CfnConfigRuleScopePropertyFromCloudFormation(properties.Scope) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConfigRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::ConfigRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfigRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfigRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                  \n    public readonly attrArn: string;\n\n                                                                                                                                                            \n    public readonly attrComplianceType: string;\n\n                                                                                                                                 \n    public readonly attrConfigRuleId: string;\n\n                                                                                                                                                                                                                                                                                                                        \n    public source: CfnConfigRule.SourceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public configRuleName: string | undefined;\n\n                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public inputParameters: any | cdk.IResolvable | undefined;\n\nn    public maximumExecutionFrequency: string | undefined;\n\nn    public scope: CfnConfigRule.ScopeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigRuleProps) {\n        super(scope, id, { type: CfnConfigRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'source', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrComplianceType = cdk.Token.asString(this.getAtt('Compliance.Type'));\n        this.attrConfigRuleId = cdk.Token.asString(this.getAtt('ConfigRuleId'));\n\n        this.source = props.source;\n        this.configRuleName = props.configRuleName;\n        this.description = props.description;\n        this.inputParameters = props.inputParameters;\n        this.maximumExecutionFrequency = props.maximumExecutionFrequency;\n        this.scope = props.scope;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfigRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            source: this.source,\n            configRuleName: this.configRuleName,\n            description: this.description,\n            inputParameters: this.inputParameters,\n            maximumExecutionFrequency: this.maximumExecutionFrequency,\n            scope: this.scope,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConfigRule {\nn    export interface ScopeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly complianceResourceId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly complianceResourceTypes?: string[];\n                                                                                                                                                                                                                                                                                                                        \n        readonly tagKey?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly tagValue?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScopeProperty`\n *\n * @param properties - the TypeScript properties of a `ScopeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigRule_ScopePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('complianceResourceId', cdk.validateString)(properties.complianceResourceId));\n    errors.collect(cdk.propertyValidator('complianceResourceTypes', cdk.listValidator(cdk.validateString))(properties.complianceResourceTypes));\n    errors.collect(cdk.propertyValidator('tagKey', cdk.validateString)(properties.tagKey));\n    errors.collect(cdk.propertyValidator('tagValue', cdk.validateString)(properties.tagValue));\n    return errors.wrap('supplied properties not correct for \"ScopeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigRule.Scope` resource\n *\n * @param properties - the TypeScript properties of a `ScopeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigRule.Scope` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigRuleScopePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigRule_ScopePropertyValidator(properties).assertSuccess();\n    return {\n        ComplianceResourceId: cdk.stringToCloudFormation(properties.complianceResourceId),\n        ComplianceResourceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.complianceResourceTypes),\n        TagKey: cdk.stringToCloudFormation(properties.tagKey),\n        TagValue: cdk.stringToCloudFormation(properties.tagValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigRuleScopePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigRule.ScopeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigRule.ScopeProperty>();\n    ret.addPropertyResult('complianceResourceId', 'ComplianceResourceId', properties.ComplianceResourceId != null ? cfn_parse.FromCloudFormation.getString(properties.ComplianceResourceId) : undefined);\n    ret.addPropertyResult('complianceResourceTypes', 'ComplianceResourceTypes', properties.ComplianceResourceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ComplianceResourceTypes) : undefined);\n    ret.addPropertyResult('tagKey', 'TagKey', properties.TagKey != null ? cfn_parse.FromCloudFormation.getString(properties.TagKey) : undefined);\n    ret.addPropertyResult('tagValue', 'TagValue', properties.TagValue != null ? cfn_parse.FromCloudFormation.getString(properties.TagValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConfigRule {\n                                                                                                                                                                                                                                                                                                                                                    \n    export interface SourceProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly owner: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly sourceDetails?: Array<CfnConfigRule.SourceDetailProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly sourceIdentifier: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceProperty`\n *\n * @param properties - the TypeScript properties of a `SourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigRule_SourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('owner', cdk.requiredValidator)(properties.owner));\n    errors.collect(cdk.propertyValidator('owner', cdk.validateString)(properties.owner));\n    errors.collect(cdk.propertyValidator('sourceDetails', cdk.listValidator(CfnConfigRule_SourceDetailPropertyValidator))(properties.sourceDetails));\n    errors.collect(cdk.propertyValidator('sourceIdentifier', cdk.requiredValidator)(properties.sourceIdentifier));\n    errors.collect(cdk.propertyValidator('sourceIdentifier', cdk.validateString)(properties.sourceIdentifier));\n    return errors.wrap('supplied properties not correct for \"SourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigRule.Source` resource\n *\n * @param properties - the TypeScript properties of a `SourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigRule.Source` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigRuleSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigRule_SourcePropertyValidator(properties).assertSuccess();\n    return {\n        Owner: cdk.stringToCloudFormation(properties.owner),\n        SourceDetails: cdk.listMapper(cfnConfigRuleSourceDetailPropertyToCloudFormation)(properties.sourceDetails),\n        SourceIdentifier: cdk.stringToCloudFormation(properties.sourceIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigRuleSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigRule.SourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigRule.SourceProperty>();\n    ret.addPropertyResult('owner', 'Owner', cfn_parse.FromCloudFormation.getString(properties.Owner));\n    ret.addPropertyResult('sourceDetails', 'SourceDetails', properties.SourceDetails != null ? cfn_parse.FromCloudFormation.getArray(CfnConfigRuleSourceDetailPropertyFromCloudFormation)(properties.SourceDetails) : undefined);\n    ret.addPropertyResult('sourceIdentifier', 'SourceIdentifier', cfn_parse.FromCloudFormation.getString(properties.SourceIdentifier));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConfigRule {\nn    export interface SourceDetailProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly eventSource: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly maximumExecutionFrequency?: string;\nn        readonly messageType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceDetailProperty`\n *\n * @param properties - the TypeScript properties of a `SourceDetailProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigRule_SourceDetailPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventSource', cdk.requiredValidator)(properties.eventSource));\n    errors.collect(cdk.propertyValidator('eventSource', cdk.validateString)(properties.eventSource));\n    errors.collect(cdk.propertyValidator('maximumExecutionFrequency', cdk.validateString)(properties.maximumExecutionFrequency));\n    errors.collect(cdk.propertyValidator('messageType', cdk.requiredValidator)(properties.messageType));\n    errors.collect(cdk.propertyValidator('messageType', cdk.validateString)(properties.messageType));\n    return errors.wrap('supplied properties not correct for \"SourceDetailProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigRule.SourceDetail` resource\n *\n * @param properties - the TypeScript properties of a `SourceDetailProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigRule.SourceDetail` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigRuleSourceDetailPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigRule_SourceDetailPropertyValidator(properties).assertSuccess();\n    return {\n        EventSource: cdk.stringToCloudFormation(properties.eventSource),\n        MaximumExecutionFrequency: cdk.stringToCloudFormation(properties.maximumExecutionFrequency),\n        MessageType: cdk.stringToCloudFormation(properties.messageType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigRuleSourceDetailPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigRule.SourceDetailProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigRule.SourceDetailProperty>();\n    ret.addPropertyResult('eventSource', 'EventSource', cfn_parse.FromCloudFormation.getString(properties.EventSource));\n    ret.addPropertyResult('maximumExecutionFrequency', 'MaximumExecutionFrequency', properties.MaximumExecutionFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumExecutionFrequency) : undefined);\n    ret.addPropertyResult('messageType', 'MessageType', cfn_parse.FromCloudFormation.getString(properties.MessageType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                 \nexport interface CfnConfigurationAggregatorProps {\n\n                                                                                                                                                                                                                                                                                       \n    readonly accountAggregationSources?: Array<CfnConfigurationAggregator.AccountAggregationSourceProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    readonly configurationAggregatorName?: string;\n\n                                                                                                                                                                                                                                                                                         \n    readonly organizationAggregationSource?: CfnConfigurationAggregator.OrganizationAggregationSourceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigurationAggregatorProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationAggregatorProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationAggregatorPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountAggregationSources', cdk.listValidator(CfnConfigurationAggregator_AccountAggregationSourcePropertyValidator))(properties.accountAggregationSources));\n    errors.collect(cdk.propertyValidator('configurationAggregatorName', cdk.validateString)(properties.configurationAggregatorName));\n    errors.collect(cdk.propertyValidator('organizationAggregationSource', CfnConfigurationAggregator_OrganizationAggregationSourcePropertyValidator)(properties.organizationAggregationSource));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnConfigurationAggregatorProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigurationAggregator` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationAggregatorProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigurationAggregator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationAggregatorPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationAggregatorPropsValidator(properties).assertSuccess();\n    return {\n        AccountAggregationSources: cdk.listMapper(cfnConfigurationAggregatorAccountAggregationSourcePropertyToCloudFormation)(properties.accountAggregationSources),\n        ConfigurationAggregatorName: cdk.stringToCloudFormation(properties.configurationAggregatorName),\n        OrganizationAggregationSource: cfnConfigurationAggregatorOrganizationAggregationSourcePropertyToCloudFormation(properties.organizationAggregationSource),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationAggregatorPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationAggregatorProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationAggregatorProps>();\n    ret.addPropertyResult('accountAggregationSources', 'AccountAggregationSources', properties.AccountAggregationSources != null ? cfn_parse.FromCloudFormation.getArray(CfnConfigurationAggregatorAccountAggregationSourcePropertyFromCloudFormation)(properties.AccountAggregationSources) : undefined);\n    ret.addPropertyResult('configurationAggregatorName', 'ConfigurationAggregatorName', properties.ConfigurationAggregatorName != null ? cfn_parse.FromCloudFormation.getString(properties.ConfigurationAggregatorName) : undefined);\n    ret.addPropertyResult('organizationAggregationSource', 'OrganizationAggregationSource', properties.OrganizationAggregationSource != null ? CfnConfigurationAggregatorOrganizationAggregationSourcePropertyFromCloudFormation(properties.OrganizationAggregationSource) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnConfigurationAggregator extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::ConfigurationAggregator\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfigurationAggregator {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigurationAggregatorPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfigurationAggregator(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                   \n    public readonly attrConfigurationAggregatorArn: string;\n\n                                                                                                                                                                                                                                                                                       \n    public accountAggregationSources: Array<CfnConfigurationAggregator.AccountAggregationSourceProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                    \n    public configurationAggregatorName: string | undefined;\n\n                                                                                                                                                                                                                                                                                         \n    public organizationAggregationSource: CfnConfigurationAggregator.OrganizationAggregationSourceProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigurationAggregatorProps = {}) {\n        super(scope, id, { type: CfnConfigurationAggregator.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrConfigurationAggregatorArn = cdk.Token.asString(this.getAtt('ConfigurationAggregatorArn'));\n\n        this.accountAggregationSources = props.accountAggregationSources;\n        this.configurationAggregatorName = props.configurationAggregatorName;\n        this.organizationAggregationSource = props.organizationAggregationSource;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Config::ConfigurationAggregator\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfigurationAggregator.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            accountAggregationSources: this.accountAggregationSources,\n            configurationAggregatorName: this.configurationAggregatorName,\n            organizationAggregationSource: this.organizationAggregationSource,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigurationAggregatorPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConfigurationAggregator {\n                                                                                                                                                                                                                                                                           \n    export interface AccountAggregationSourceProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly accountIds: string[];\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly allAwsRegions?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly awsRegions?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccountAggregationSourceProperty`\n *\n * @param properties - the TypeScript properties of a `AccountAggregationSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationAggregator_AccountAggregationSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountIds', cdk.requiredValidator)(properties.accountIds));\n    errors.collect(cdk.propertyValidator('accountIds', cdk.listValidator(cdk.validateString))(properties.accountIds));\n    errors.collect(cdk.propertyValidator('allAwsRegions', cdk.validateBoolean)(properties.allAwsRegions));\n    errors.collect(cdk.propertyValidator('awsRegions', cdk.listValidator(cdk.validateString))(properties.awsRegions));\n    return errors.wrap('supplied properties not correct for \"AccountAggregationSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigurationAggregator.AccountAggregationSource` resource\n *\n * @param properties - the TypeScript properties of a `AccountAggregationSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigurationAggregator.AccountAggregationSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationAggregatorAccountAggregationSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationAggregator_AccountAggregationSourcePropertyValidator(properties).assertSuccess();\n    return {\n        AccountIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.accountIds),\n        AllAwsRegions: cdk.booleanToCloudFormation(properties.allAwsRegions),\n        AwsRegions: cdk.listMapper(cdk.stringToCloudFormation)(properties.awsRegions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationAggregatorAccountAggregationSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationAggregator.AccountAggregationSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationAggregator.AccountAggregationSourceProperty>();\n    ret.addPropertyResult('accountIds', 'AccountIds', cfn_parse.FromCloudFormation.getStringArray(properties.AccountIds));\n    ret.addPropertyResult('allAwsRegions', 'AllAwsRegions', properties.AllAwsRegions != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllAwsRegions) : undefined);\n    ret.addPropertyResult('awsRegions', 'AwsRegions', properties.AwsRegions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AwsRegions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConfigurationAggregator {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface OrganizationAggregationSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly allAwsRegions?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                              \n        readonly awsRegions?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly roleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OrganizationAggregationSourceProperty`\n *\n * @param properties - the TypeScript properties of a `OrganizationAggregationSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationAggregator_OrganizationAggregationSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allAwsRegions', cdk.validateBoolean)(properties.allAwsRegions));\n    errors.collect(cdk.propertyValidator('awsRegions', cdk.listValidator(cdk.validateString))(properties.awsRegions));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"OrganizationAggregationSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigurationAggregator.OrganizationAggregationSource` resource\n *\n * @param properties - the TypeScript properties of a `OrganizationAggregationSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigurationAggregator.OrganizationAggregationSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationAggregatorOrganizationAggregationSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationAggregator_OrganizationAggregationSourcePropertyValidator(properties).assertSuccess();\n    return {\n        AllAwsRegions: cdk.booleanToCloudFormation(properties.allAwsRegions),\n        AwsRegions: cdk.listMapper(cdk.stringToCloudFormation)(properties.awsRegions),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationAggregatorOrganizationAggregationSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationAggregator.OrganizationAggregationSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationAggregator.OrganizationAggregationSourceProperty>();\n    ret.addPropertyResult('allAwsRegions', 'AllAwsRegions', properties.AllAwsRegions != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllAwsRegions) : undefined);\n    ret.addPropertyResult('awsRegions', 'AwsRegions', properties.AwsRegions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AwsRegions) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                             \nexport interface CfnConfigurationRecorderProps {\n\nn    readonly roleArn: string;\n\nn    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly recordingGroup?: CfnConfigurationRecorder.RecordingGroupProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigurationRecorderProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationRecorderProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationRecorderPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('recordingGroup', CfnConfigurationRecorder_RecordingGroupPropertyValidator)(properties.recordingGroup));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"CfnConfigurationRecorderProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigurationRecorder` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationRecorderProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigurationRecorder` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationRecorderPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationRecorderPropsValidator(properties).assertSuccess();\n    return {\n        RoleARN: cdk.stringToCloudFormation(properties.roleArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RecordingGroup: cfnConfigurationRecorderRecordingGroupPropertyToCloudFormation(properties.recordingGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationRecorderPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationRecorderProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationRecorderProps>();\n    ret.addPropertyResult('roleArn', 'RoleARN', cfn_parse.FromCloudFormation.getString(properties.RoleARN));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('recordingGroup', 'RecordingGroup', properties.RecordingGroup != null ? CfnConfigurationRecorderRecordingGroupPropertyFromCloudFormation(properties.RecordingGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConfigurationRecorder extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::ConfigurationRecorder\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfigurationRecorder {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigurationRecorderPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfigurationRecorder(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public roleArn: string;\n\nn    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n    public recordingGroup: CfnConfigurationRecorder.RecordingGroupProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigurationRecorderProps) {\n        super(scope, id, { type: CfnConfigurationRecorder.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'roleArn', this);\n\n        this.roleArn = props.roleArn;\n        this.name = props.name;\n        this.recordingGroup = props.recordingGroup;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfigurationRecorder.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            roleArn: this.roleArn,\n            name: this.name,\n            recordingGroup: this.recordingGroup,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigurationRecorderPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConfigurationRecorder {\nn    export interface RecordingGroupProperty {\nn        readonly allSupported?: boolean | cdk.IResolvable;\nn        readonly includeGlobalResourceTypes?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly resourceTypes?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecordingGroupProperty`\n *\n * @param properties - the TypeScript properties of a `RecordingGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationRecorder_RecordingGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allSupported', cdk.validateBoolean)(properties.allSupported));\n    errors.collect(cdk.propertyValidator('includeGlobalResourceTypes', cdk.validateBoolean)(properties.includeGlobalResourceTypes));\n    errors.collect(cdk.propertyValidator('resourceTypes', cdk.listValidator(cdk.validateString))(properties.resourceTypes));\n    return errors.wrap('supplied properties not correct for \"RecordingGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConfigurationRecorder.RecordingGroup` resource\n *\n * @param properties - the TypeScript properties of a `RecordingGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConfigurationRecorder.RecordingGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationRecorderRecordingGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationRecorder_RecordingGroupPropertyValidator(properties).assertSuccess();\n    return {\n        AllSupported: cdk.booleanToCloudFormation(properties.allSupported),\n        IncludeGlobalResourceTypes: cdk.booleanToCloudFormation(properties.includeGlobalResourceTypes),\n        ResourceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceTypes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationRecorderRecordingGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationRecorder.RecordingGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationRecorder.RecordingGroupProperty>();\n    ret.addPropertyResult('allSupported', 'AllSupported', properties.AllSupported != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllSupported) : undefined);\n    ret.addPropertyResult('includeGlobalResourceTypes', 'IncludeGlobalResourceTypes', properties.IncludeGlobalResourceTypes != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeGlobalResourceTypes) : undefined);\n    ret.addPropertyResult('resourceTypes', 'ResourceTypes', properties.ResourceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourceTypes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                 \nexport interface CfnConformancePackProps {\n\n                                                                                                                                                                                                                                                 \n    readonly conformancePackName: string;\n\n                                                                                                                                                                                                                                                            \n    readonly conformancePackInputParameters?: Array<CfnConformancePack.ConformancePackInputParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    readonly deliveryS3Bucket?: string;\n\n                                                                                                                                                                                                                                     \n    readonly deliveryS3KeyPrefix?: string;\n\nn    readonly templateBody?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly templateS3Uri?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConformancePackProps`\n *\n * @param properties - the TypeScript properties of a `CfnConformancePackProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConformancePackPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('conformancePackInputParameters', cdk.listValidator(CfnConformancePack_ConformancePackInputParameterPropertyValidator))(properties.conformancePackInputParameters));\n    errors.collect(cdk.propertyValidator('conformancePackName', cdk.requiredValidator)(properties.conformancePackName));\n    errors.collect(cdk.propertyValidator('conformancePackName', cdk.validateString)(properties.conformancePackName));\n    errors.collect(cdk.propertyValidator('deliveryS3Bucket', cdk.validateString)(properties.deliveryS3Bucket));\n    errors.collect(cdk.propertyValidator('deliveryS3KeyPrefix', cdk.validateString)(properties.deliveryS3KeyPrefix));\n    errors.collect(cdk.propertyValidator('templateBody', cdk.validateString)(properties.templateBody));\n    errors.collect(cdk.propertyValidator('templateS3Uri', cdk.validateString)(properties.templateS3Uri));\n    return errors.wrap('supplied properties not correct for \"CfnConformancePackProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConformancePack` resource\n *\n * @param properties - the TypeScript properties of a `CfnConformancePackProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConformancePack` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConformancePackPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConformancePackPropsValidator(properties).assertSuccess();\n    return {\n        ConformancePackName: cdk.stringToCloudFormation(properties.conformancePackName),\n        ConformancePackInputParameters: cdk.listMapper(cfnConformancePackConformancePackInputParameterPropertyToCloudFormation)(properties.conformancePackInputParameters),\n        DeliveryS3Bucket: cdk.stringToCloudFormation(properties.deliveryS3Bucket),\n        DeliveryS3KeyPrefix: cdk.stringToCloudFormation(properties.deliveryS3KeyPrefix),\n        TemplateBody: cdk.stringToCloudFormation(properties.templateBody),\n        TemplateS3Uri: cdk.stringToCloudFormation(properties.templateS3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConformancePackPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConformancePackProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConformancePackProps>();\n    ret.addPropertyResult('conformancePackName', 'ConformancePackName', cfn_parse.FromCloudFormation.getString(properties.ConformancePackName));\n    ret.addPropertyResult('conformancePackInputParameters', 'ConformancePackInputParameters', properties.ConformancePackInputParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnConformancePackConformancePackInputParameterPropertyFromCloudFormation)(properties.ConformancePackInputParameters) : undefined);\n    ret.addPropertyResult('deliveryS3Bucket', 'DeliveryS3Bucket', properties.DeliveryS3Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.DeliveryS3Bucket) : undefined);\n    ret.addPropertyResult('deliveryS3KeyPrefix', 'DeliveryS3KeyPrefix', properties.DeliveryS3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.DeliveryS3KeyPrefix) : undefined);\n    ret.addPropertyResult('templateBody', 'TemplateBody', properties.TemplateBody != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateBody) : undefined);\n    ret.addPropertyResult('templateS3Uri', 'TemplateS3Uri', properties.TemplateS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateS3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConformancePack extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::ConformancePack\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConformancePack {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConformancePackPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConformancePack(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                 \n    public conformancePackName: string;\n\n                                                                                                                                                                                                                                                            \n    public conformancePackInputParameters: Array<CfnConformancePack.ConformancePackInputParameterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public deliveryS3Bucket: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public deliveryS3KeyPrefix: string | undefined;\n\nn    public templateBody: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public templateS3Uri: string | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnConformancePackProps) {\n        super(scope, id, { type: CfnConformancePack.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'conformancePackName', this);\n\n        this.conformancePackName = props.conformancePackName;\n        this.conformancePackInputParameters = props.conformancePackInputParameters;\n        this.deliveryS3Bucket = props.deliveryS3Bucket;\n        this.deliveryS3KeyPrefix = props.deliveryS3KeyPrefix;\n        this.templateBody = props.templateBody;\n        this.templateS3Uri = props.templateS3Uri;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConformancePack.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            conformancePackName: this.conformancePackName,\n            conformancePackInputParameters: this.conformancePackInputParameters,\n            deliveryS3Bucket: this.deliveryS3Bucket,\n            deliveryS3KeyPrefix: this.deliveryS3KeyPrefix,\n            templateBody: this.templateBody,\n            templateS3Uri: this.templateS3Uri,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConformancePackPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConformancePack {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface ConformancePackInputParameterProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly parameterName: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly parameterValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConformancePackInputParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ConformancePackInputParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConformancePack_ConformancePackInputParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parameterName', cdk.requiredValidator)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterName', cdk.validateString)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.requiredValidator)(properties.parameterValue));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"ConformancePackInputParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::ConformancePack.ConformancePackInputParameter` resource\n *\n * @param properties - the TypeScript properties of a `ConformancePackInputParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::ConformancePack.ConformancePackInputParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConformancePackConformancePackInputParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConformancePack_ConformancePackInputParameterPropertyValidator(properties).assertSuccess();\n    return {\n        ParameterName: cdk.stringToCloudFormation(properties.parameterName),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConformancePackConformancePackInputParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConformancePack.ConformancePackInputParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConformancePack.ConformancePackInputParameterProperty>();\n    ret.addPropertyResult('parameterName', 'ParameterName', cfn_parse.FromCloudFormation.getString(properties.ParameterName));\n    ret.addPropertyResult('parameterValue', 'ParameterValue', cfn_parse.FromCloudFormation.getString(properties.ParameterValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                 \nexport interface CfnDeliveryChannelProps {\n\nn    readonly s3BucketName: string;\n\n                                                                                                                                                                                                                                                                                                            \n    readonly configSnapshotDeliveryProperties?: CfnDeliveryChannel.ConfigSnapshotDeliveryPropertiesProperty | cdk.IResolvable;\n\nn    readonly name?: string;\n\n                                                                                                                                                                                                                                       \n    readonly s3KeyPrefix?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly s3KmsKeyArn?: string;\n\nn    readonly snsTopicArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeliveryChannelProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeliveryChannelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeliveryChannelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configSnapshotDeliveryProperties', CfnDeliveryChannel_ConfigSnapshotDeliveryPropertiesPropertyValidator)(properties.configSnapshotDeliveryProperties));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.requiredValidator)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3KeyPrefix', cdk.validateString)(properties.s3KeyPrefix));\n    errors.collect(cdk.propertyValidator('s3KmsKeyArn', cdk.validateString)(properties.s3KmsKeyArn));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    return errors.wrap('supplied properties not correct for \"CfnDeliveryChannelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::DeliveryChannel` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeliveryChannelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::DeliveryChannel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeliveryChannelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeliveryChannelPropsValidator(properties).assertSuccess();\n    return {\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        ConfigSnapshotDeliveryProperties: cfnDeliveryChannelConfigSnapshotDeliveryPropertiesPropertyToCloudFormation(properties.configSnapshotDeliveryProperties),\n        Name: cdk.stringToCloudFormation(properties.name),\n        S3KeyPrefix: cdk.stringToCloudFormation(properties.s3KeyPrefix),\n        S3KmsKeyArn: cdk.stringToCloudFormation(properties.s3KmsKeyArn),\n        SnsTopicARN: cdk.stringToCloudFormation(properties.snsTopicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeliveryChannelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeliveryChannelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeliveryChannelProps>();\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', cfn_parse.FromCloudFormation.getString(properties.S3BucketName));\n    ret.addPropertyResult('configSnapshotDeliveryProperties', 'ConfigSnapshotDeliveryProperties', properties.ConfigSnapshotDeliveryProperties != null ? CfnDeliveryChannelConfigSnapshotDeliveryPropertiesPropertyFromCloudFormation(properties.ConfigSnapshotDeliveryProperties) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('s3KeyPrefix', 'S3KeyPrefix', properties.S3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3KeyPrefix) : undefined);\n    ret.addPropertyResult('s3KmsKeyArn', 'S3KmsKeyArn', properties.S3KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.S3KmsKeyArn) : undefined);\n    ret.addPropertyResult('snsTopicArn', 'SnsTopicARN', properties.SnsTopicARN != null ? cfn_parse.FromCloudFormation.getString(properties.SnsTopicARN) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDeliveryChannel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::DeliveryChannel\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeliveryChannel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDeliveryChannelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDeliveryChannel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public s3BucketName: string;\n\n                                                                                                                                                                                                                                                                                                            \n    public configSnapshotDeliveryProperties: CfnDeliveryChannel.ConfigSnapshotDeliveryPropertiesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public s3KeyPrefix: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    public s3KmsKeyArn: string | undefined;\n\nn    public snsTopicArn: string | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnDeliveryChannelProps) {\n        super(scope, id, { type: CfnDeliveryChannel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 's3BucketName', this);\n\n        this.s3BucketName = props.s3BucketName;\n        this.configSnapshotDeliveryProperties = props.configSnapshotDeliveryProperties;\n        this.name = props.name;\n        this.s3KeyPrefix = props.s3KeyPrefix;\n        this.s3KmsKeyArn = props.s3KmsKeyArn;\n        this.snsTopicArn = props.snsTopicArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDeliveryChannel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            s3BucketName: this.s3BucketName,\n            configSnapshotDeliveryProperties: this.configSnapshotDeliveryProperties,\n            name: this.name,\n            s3KeyPrefix: this.s3KeyPrefix,\n            s3KmsKeyArn: this.s3KmsKeyArn,\n            snsTopicArn: this.snsTopicArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDeliveryChannelPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDeliveryChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface ConfigSnapshotDeliveryPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly deliveryFrequency?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConfigSnapshotDeliveryPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `ConfigSnapshotDeliveryPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeliveryChannel_ConfigSnapshotDeliveryPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deliveryFrequency', cdk.validateString)(properties.deliveryFrequency));\n    return errors.wrap('supplied properties not correct for \"ConfigSnapshotDeliveryPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties` resource\n *\n * @param properties - the TypeScript properties of a `ConfigSnapshotDeliveryPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeliveryChannelConfigSnapshotDeliveryPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeliveryChannel_ConfigSnapshotDeliveryPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        DeliveryFrequency: cdk.stringToCloudFormation(properties.deliveryFrequency),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeliveryChannelConfigSnapshotDeliveryPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeliveryChannel.ConfigSnapshotDeliveryPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeliveryChannel.ConfigSnapshotDeliveryPropertiesProperty>();\n    ret.addPropertyResult('deliveryFrequency', 'DeliveryFrequency', properties.DeliveryFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.DeliveryFrequency) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnOrganizationConfigRuleProps {\n\n                                                                                                                                                                                                                                                                           \n    readonly organizationConfigRuleName: string;\n\n                                                                                                                                                                                                                                                                                      \n    readonly excludedAccounts?: string[];\n\n                                                                                                                                                                                                                                                                                                      \n    readonly organizationCustomCodeRuleMetadata?: CfnOrganizationConfigRule.OrganizationCustomCodeRuleMetadataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly organizationCustomRuleMetadata?: CfnOrganizationConfigRule.OrganizationCustomRuleMetadataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                       \n    readonly organizationManagedRuleMetadata?: CfnOrganizationConfigRule.OrganizationManagedRuleMetadataProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnOrganizationConfigRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnOrganizationConfigRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnOrganizationConfigRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('excludedAccounts', cdk.listValidator(cdk.validateString))(properties.excludedAccounts));\n    errors.collect(cdk.propertyValidator('organizationConfigRuleName', cdk.requiredValidator)(properties.organizationConfigRuleName));\n    errors.collect(cdk.propertyValidator('organizationConfigRuleName', cdk.validateString)(properties.organizationConfigRuleName));\n    errors.collect(cdk.propertyValidator('organizationCustomCodeRuleMetadata', CfnOrganizationConfigRule_OrganizationCustomCodeRuleMetadataPropertyValidator)(properties.organizationCustomCodeRuleMetadata));\n    errors.collect(cdk.propertyValidator('organizationCustomRuleMetadata', CfnOrganizationConfigRule_OrganizationCustomRuleMetadataPropertyValidator)(properties.organizationCustomRuleMetadata));\n    errors.collect(cdk.propertyValidator('organizationManagedRuleMetadata', CfnOrganizationConfigRule_OrganizationManagedRuleMetadataPropertyValidator)(properties.organizationManagedRuleMetadata));\n    return errors.wrap('supplied properties not correct for \"CfnOrganizationConfigRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnOrganizationConfigRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOrganizationConfigRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOrganizationConfigRulePropsValidator(properties).assertSuccess();\n    return {\n        OrganizationConfigRuleName: cdk.stringToCloudFormation(properties.organizationConfigRuleName),\n        ExcludedAccounts: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedAccounts),\n        OrganizationCustomCodeRuleMetadata: cfnOrganizationConfigRuleOrganizationCustomCodeRuleMetadataPropertyToCloudFormation(properties.organizationCustomCodeRuleMetadata),\n        OrganizationCustomRuleMetadata: cfnOrganizationConfigRuleOrganizationCustomRuleMetadataPropertyToCloudFormation(properties.organizationCustomRuleMetadata),\n        OrganizationManagedRuleMetadata: cfnOrganizationConfigRuleOrganizationManagedRuleMetadataPropertyToCloudFormation(properties.organizationManagedRuleMetadata),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOrganizationConfigRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOrganizationConfigRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOrganizationConfigRuleProps>();\n    ret.addPropertyResult('organizationConfigRuleName', 'OrganizationConfigRuleName', cfn_parse.FromCloudFormation.getString(properties.OrganizationConfigRuleName));\n    ret.addPropertyResult('excludedAccounts', 'ExcludedAccounts', properties.ExcludedAccounts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedAccounts) : undefined);\n    ret.addPropertyResult('organizationCustomCodeRuleMetadata', 'OrganizationCustomCodeRuleMetadata', properties.OrganizationCustomCodeRuleMetadata != null ? CfnOrganizationConfigRuleOrganizationCustomCodeRuleMetadataPropertyFromCloudFormation(properties.OrganizationCustomCodeRuleMetadata) : undefined);\n    ret.addPropertyResult('organizationCustomRuleMetadata', 'OrganizationCustomRuleMetadata', properties.OrganizationCustomRuleMetadata != null ? CfnOrganizationConfigRuleOrganizationCustomRuleMetadataPropertyFromCloudFormation(properties.OrganizationCustomRuleMetadata) : undefined);\n    ret.addPropertyResult('organizationManagedRuleMetadata', 'OrganizationManagedRuleMetadata', properties.OrganizationManagedRuleMetadata != null ? CfnOrganizationConfigRuleOrganizationManagedRuleMetadataPropertyFromCloudFormation(properties.OrganizationManagedRuleMetadata) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnOrganizationConfigRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::OrganizationConfigRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnOrganizationConfigRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnOrganizationConfigRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnOrganizationConfigRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                           \n    public organizationConfigRuleName: string;\n\n                                                                                                                                                                                                                                                                                      \n    public excludedAccounts: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                      \n    public organizationCustomCodeRuleMetadata: CfnOrganizationConfigRule.OrganizationCustomCodeRuleMetadataProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public organizationCustomRuleMetadata: CfnOrganizationConfigRule.OrganizationCustomRuleMetadataProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                       \n    public organizationManagedRuleMetadata: CfnOrganizationConfigRule.OrganizationManagedRuleMetadataProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnOrganizationConfigRuleProps) {\n        super(scope, id, { type: CfnOrganizationConfigRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'organizationConfigRuleName', this);\n\n        this.organizationConfigRuleName = props.organizationConfigRuleName;\n        this.excludedAccounts = props.excludedAccounts;\n        this.organizationCustomCodeRuleMetadata = props.organizationCustomCodeRuleMetadata;\n        this.organizationCustomRuleMetadata = props.organizationCustomRuleMetadata;\n        this.organizationManagedRuleMetadata = props.organizationManagedRuleMetadata;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnOrganizationConfigRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            organizationConfigRuleName: this.organizationConfigRuleName,\n            excludedAccounts: this.excludedAccounts,\n            organizationCustomCodeRuleMetadata: this.organizationCustomCodeRuleMetadata,\n            organizationCustomRuleMetadata: this.organizationCustomRuleMetadata,\n            organizationManagedRuleMetadata: this.organizationManagedRuleMetadata,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnOrganizationConfigRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnOrganizationConfigRule {\n                                                                                                                                                                                                                                              \n    export interface OrganizationCustomCodeRuleMetadataProperty {\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly codeText: string;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly debugLogDeliveryAccounts?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly inputParameters?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly maximumExecutionFrequency?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly organizationConfigRuleTriggerTypes?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly resourceIdScope?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly resourceTypesScope?: string[];\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly runtime: string;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly tagKeyScope?: string;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly tagValueScope?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OrganizationCustomCodeRuleMetadataProperty`\n *\n * @param properties - the TypeScript properties of a `OrganizationCustomCodeRuleMetadataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOrganizationConfigRule_OrganizationCustomCodeRuleMetadataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeText', cdk.requiredValidator)(properties.codeText));\n    errors.collect(cdk.propertyValidator('codeText', cdk.validateString)(properties.codeText));\n    errors.collect(cdk.propertyValidator('debugLogDeliveryAccounts', cdk.listValidator(cdk.validateString))(properties.debugLogDeliveryAccounts));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('inputParameters', cdk.validateString)(properties.inputParameters));\n    errors.collect(cdk.propertyValidator('maximumExecutionFrequency', cdk.validateString)(properties.maximumExecutionFrequency));\n    errors.collect(cdk.propertyValidator('organizationConfigRuleTriggerTypes', cdk.listValidator(cdk.validateString))(properties.organizationConfigRuleTriggerTypes));\n    errors.collect(cdk.propertyValidator('resourceIdScope', cdk.validateString)(properties.resourceIdScope));\n    errors.collect(cdk.propertyValidator('resourceTypesScope', cdk.listValidator(cdk.validateString))(properties.resourceTypesScope));\n    errors.collect(cdk.propertyValidator('runtime', cdk.requiredValidator)(properties.runtime));\n    errors.collect(cdk.propertyValidator('runtime', cdk.validateString)(properties.runtime));\n    errors.collect(cdk.propertyValidator('tagKeyScope', cdk.validateString)(properties.tagKeyScope));\n    errors.collect(cdk.propertyValidator('tagValueScope', cdk.validateString)(properties.tagValueScope));\n    return errors.wrap('supplied properties not correct for \"OrganizationCustomCodeRuleMetadataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule.OrganizationCustomCodeRuleMetadata` resource\n *\n * @param properties - the TypeScript properties of a `OrganizationCustomCodeRuleMetadataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule.OrganizationCustomCodeRuleMetadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOrganizationConfigRuleOrganizationCustomCodeRuleMetadataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOrganizationConfigRule_OrganizationCustomCodeRuleMetadataPropertyValidator(properties).assertSuccess();\n    return {\n        CodeText: cdk.stringToCloudFormation(properties.codeText),\n        DebugLogDeliveryAccounts: cdk.listMapper(cdk.stringToCloudFormation)(properties.debugLogDeliveryAccounts),\n        Description: cdk.stringToCloudFormation(properties.description),\n        InputParameters: cdk.stringToCloudFormation(properties.inputParameters),\n        MaximumExecutionFrequency: cdk.stringToCloudFormation(properties.maximumExecutionFrequency),\n        OrganizationConfigRuleTriggerTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationConfigRuleTriggerTypes),\n        ResourceIdScope: cdk.stringToCloudFormation(properties.resourceIdScope),\n        ResourceTypesScope: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceTypesScope),\n        Runtime: cdk.stringToCloudFormation(properties.runtime),\n        TagKeyScope: cdk.stringToCloudFormation(properties.tagKeyScope),\n        TagValueScope: cdk.stringToCloudFormation(properties.tagValueScope),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOrganizationConfigRuleOrganizationCustomCodeRuleMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOrganizationConfigRule.OrganizationCustomCodeRuleMetadataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOrganizationConfigRule.OrganizationCustomCodeRuleMetadataProperty>();\n    ret.addPropertyResult('codeText', 'CodeText', cfn_parse.FromCloudFormation.getString(properties.CodeText));\n    ret.addPropertyResult('debugLogDeliveryAccounts', 'DebugLogDeliveryAccounts', properties.DebugLogDeliveryAccounts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DebugLogDeliveryAccounts) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('inputParameters', 'InputParameters', properties.InputParameters != null ? cfn_parse.FromCloudFormation.getString(properties.InputParameters) : undefined);\n    ret.addPropertyResult('maximumExecutionFrequency', 'MaximumExecutionFrequency', properties.MaximumExecutionFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumExecutionFrequency) : undefined);\n    ret.addPropertyResult('organizationConfigRuleTriggerTypes', 'OrganizationConfigRuleTriggerTypes', properties.OrganizationConfigRuleTriggerTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationConfigRuleTriggerTypes) : undefined);\n    ret.addPropertyResult('resourceIdScope', 'ResourceIdScope', properties.ResourceIdScope != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdScope) : undefined);\n    ret.addPropertyResult('resourceTypesScope', 'ResourceTypesScope', properties.ResourceTypesScope != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourceTypesScope) : undefined);\n    ret.addPropertyResult('runtime', 'Runtime', cfn_parse.FromCloudFormation.getString(properties.Runtime));\n    ret.addPropertyResult('tagKeyScope', 'TagKeyScope', properties.TagKeyScope != null ? cfn_parse.FromCloudFormation.getString(properties.TagKeyScope) : undefined);\n    ret.addPropertyResult('tagValueScope', 'TagValueScope', properties.TagValueScope != null ? cfn_parse.FromCloudFormation.getString(properties.TagValueScope) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOrganizationConfigRule {\nn    export interface OrganizationCustomRuleMetadataProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly inputParameters?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly lambdaFunctionArn: string;\nn        readonly maximumExecutionFrequency?: string;\nn        readonly organizationConfigRuleTriggerTypes: string[];\n                                                                                                                                                                                                                                                                                                                                             \n        readonly resourceIdScope?: string;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly resourceTypesScope?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly tagKeyScope?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly tagValueScope?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OrganizationCustomRuleMetadataProperty`\n *\n * @param properties - the TypeScript properties of a `OrganizationCustomRuleMetadataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOrganizationConfigRule_OrganizationCustomRuleMetadataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('inputParameters', cdk.validateString)(properties.inputParameters));\n    errors.collect(cdk.propertyValidator('lambdaFunctionArn', cdk.requiredValidator)(properties.lambdaFunctionArn));\n    errors.collect(cdk.propertyValidator('lambdaFunctionArn', cdk.validateString)(properties.lambdaFunctionArn));\n    errors.collect(cdk.propertyValidator('maximumExecutionFrequency', cdk.validateString)(properties.maximumExecutionFrequency));\n    errors.collect(cdk.propertyValidator('organizationConfigRuleTriggerTypes', cdk.requiredValidator)(properties.organizationConfigRuleTriggerTypes));\n    errors.collect(cdk.propertyValidator('organizationConfigRuleTriggerTypes', cdk.listValidator(cdk.validateString))(properties.organizationConfigRuleTriggerTypes));\n    errors.collect(cdk.propertyValidator('resourceIdScope', cdk.validateString)(properties.resourceIdScope));\n    errors.collect(cdk.propertyValidator('resourceTypesScope', cdk.listValidator(cdk.validateString))(properties.resourceTypesScope));\n    errors.collect(cdk.propertyValidator('tagKeyScope', cdk.validateString)(properties.tagKeyScope));\n    errors.collect(cdk.propertyValidator('tagValueScope', cdk.validateString)(properties.tagValueScope));\n    return errors.wrap('supplied properties not correct for \"OrganizationCustomRuleMetadataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule.OrganizationCustomRuleMetadata` resource\n *\n * @param properties - the TypeScript properties of a `OrganizationCustomRuleMetadataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule.OrganizationCustomRuleMetadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOrganizationConfigRuleOrganizationCustomRuleMetadataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOrganizationConfigRule_OrganizationCustomRuleMetadataPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        InputParameters: cdk.stringToCloudFormation(properties.inputParameters),\n        LambdaFunctionArn: cdk.stringToCloudFormation(properties.lambdaFunctionArn),\n        MaximumExecutionFrequency: cdk.stringToCloudFormation(properties.maximumExecutionFrequency),\n        OrganizationConfigRuleTriggerTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationConfigRuleTriggerTypes),\n        ResourceIdScope: cdk.stringToCloudFormation(properties.resourceIdScope),\n        ResourceTypesScope: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceTypesScope),\n        TagKeyScope: cdk.stringToCloudFormation(properties.tagKeyScope),\n        TagValueScope: cdk.stringToCloudFormation(properties.tagValueScope),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOrganizationConfigRuleOrganizationCustomRuleMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOrganizationConfigRule.OrganizationCustomRuleMetadataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOrganizationConfigRule.OrganizationCustomRuleMetadataProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('inputParameters', 'InputParameters', properties.InputParameters != null ? cfn_parse.FromCloudFormation.getString(properties.InputParameters) : undefined);\n    ret.addPropertyResult('lambdaFunctionArn', 'LambdaFunctionArn', cfn_parse.FromCloudFormation.getString(properties.LambdaFunctionArn));\n    ret.addPropertyResult('maximumExecutionFrequency', 'MaximumExecutionFrequency', properties.MaximumExecutionFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumExecutionFrequency) : undefined);\n    ret.addPropertyResult('organizationConfigRuleTriggerTypes', 'OrganizationConfigRuleTriggerTypes', cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationConfigRuleTriggerTypes));\n    ret.addPropertyResult('resourceIdScope', 'ResourceIdScope', properties.ResourceIdScope != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdScope) : undefined);\n    ret.addPropertyResult('resourceTypesScope', 'ResourceTypesScope', properties.ResourceTypesScope != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourceTypesScope) : undefined);\n    ret.addPropertyResult('tagKeyScope', 'TagKeyScope', properties.TagKeyScope != null ? cfn_parse.FromCloudFormation.getString(properties.TagKeyScope) : undefined);\n    ret.addPropertyResult('tagValueScope', 'TagValueScope', properties.TagValueScope != null ? cfn_parse.FromCloudFormation.getString(properties.TagValueScope) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOrganizationConfigRule {\nn    export interface OrganizationManagedRuleMetadataProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly inputParameters?: string;\nn        readonly maximumExecutionFrequency?: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly resourceIdScope?: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly resourceTypesScope?: string[];\nn        readonly ruleIdentifier: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly tagKeyScope?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly tagValueScope?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OrganizationManagedRuleMetadataProperty`\n *\n * @param properties - the TypeScript properties of a `OrganizationManagedRuleMetadataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOrganizationConfigRule_OrganizationManagedRuleMetadataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('inputParameters', cdk.validateString)(properties.inputParameters));\n    errors.collect(cdk.propertyValidator('maximumExecutionFrequency', cdk.validateString)(properties.maximumExecutionFrequency));\n    errors.collect(cdk.propertyValidator('resourceIdScope', cdk.validateString)(properties.resourceIdScope));\n    errors.collect(cdk.propertyValidator('resourceTypesScope', cdk.listValidator(cdk.validateString))(properties.resourceTypesScope));\n    errors.collect(cdk.propertyValidator('ruleIdentifier', cdk.requiredValidator)(properties.ruleIdentifier));\n    errors.collect(cdk.propertyValidator('ruleIdentifier', cdk.validateString)(properties.ruleIdentifier));\n    errors.collect(cdk.propertyValidator('tagKeyScope', cdk.validateString)(properties.tagKeyScope));\n    errors.collect(cdk.propertyValidator('tagValueScope', cdk.validateString)(properties.tagValueScope));\n    return errors.wrap('supplied properties not correct for \"OrganizationManagedRuleMetadataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule.OrganizationManagedRuleMetadata` resource\n *\n * @param properties - the TypeScript properties of a `OrganizationManagedRuleMetadataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::OrganizationConfigRule.OrganizationManagedRuleMetadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOrganizationConfigRuleOrganizationManagedRuleMetadataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOrganizationConfigRule_OrganizationManagedRuleMetadataPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        InputParameters: cdk.stringToCloudFormation(properties.inputParameters),\n        MaximumExecutionFrequency: cdk.stringToCloudFormation(properties.maximumExecutionFrequency),\n        ResourceIdScope: cdk.stringToCloudFormation(properties.resourceIdScope),\n        ResourceTypesScope: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceTypesScope),\n        RuleIdentifier: cdk.stringToCloudFormation(properties.ruleIdentifier),\n        TagKeyScope: cdk.stringToCloudFormation(properties.tagKeyScope),\n        TagValueScope: cdk.stringToCloudFormation(properties.tagValueScope),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOrganizationConfigRuleOrganizationManagedRuleMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOrganizationConfigRule.OrganizationManagedRuleMetadataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOrganizationConfigRule.OrganizationManagedRuleMetadataProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('inputParameters', 'InputParameters', properties.InputParameters != null ? cfn_parse.FromCloudFormation.getString(properties.InputParameters) : undefined);\n    ret.addPropertyResult('maximumExecutionFrequency', 'MaximumExecutionFrequency', properties.MaximumExecutionFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumExecutionFrequency) : undefined);\n    ret.addPropertyResult('resourceIdScope', 'ResourceIdScope', properties.ResourceIdScope != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdScope) : undefined);\n    ret.addPropertyResult('resourceTypesScope', 'ResourceTypesScope', properties.ResourceTypesScope != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourceTypesScope) : undefined);\n    ret.addPropertyResult('ruleIdentifier', 'RuleIdentifier', cfn_parse.FromCloudFormation.getString(properties.RuleIdentifier));\n    ret.addPropertyResult('tagKeyScope', 'TagKeyScope', properties.TagKeyScope != null ? cfn_parse.FromCloudFormation.getString(properties.TagKeyScope) : undefined);\n    ret.addPropertyResult('tagValueScope', 'TagValueScope', properties.TagValueScope != null ? cfn_parse.FromCloudFormation.getString(properties.TagValueScope) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                         \nexport interface CfnOrganizationConformancePackProps {\n\n                                                                                                                                                                                                                                                                                             \n    readonly organizationConformancePackName: string;\n\n                                                                                                                                                                                                                                                                                      \n    readonly conformancePackInputParameters?: Array<CfnOrganizationConformancePack.ConformancePackInputParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly deliveryS3Bucket?: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly deliveryS3KeyPrefix?: string;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly excludedAccounts?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly templateBody?: string;\n\n                                                                                                                                                                                                                                                                                                                                         \n    readonly templateS3Uri?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnOrganizationConformancePackProps`\n *\n * @param properties - the TypeScript properties of a `CfnOrganizationConformancePackProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnOrganizationConformancePackPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('conformancePackInputParameters', cdk.listValidator(CfnOrganizationConformancePack_ConformancePackInputParameterPropertyValidator))(properties.conformancePackInputParameters));\n    errors.collect(cdk.propertyValidator('deliveryS3Bucket', cdk.validateString)(properties.deliveryS3Bucket));\n    errors.collect(cdk.propertyValidator('deliveryS3KeyPrefix', cdk.validateString)(properties.deliveryS3KeyPrefix));\n    errors.collect(cdk.propertyValidator('excludedAccounts', cdk.listValidator(cdk.validateString))(properties.excludedAccounts));\n    errors.collect(cdk.propertyValidator('organizationConformancePackName', cdk.requiredValidator)(properties.organizationConformancePackName));\n    errors.collect(cdk.propertyValidator('organizationConformancePackName', cdk.validateString)(properties.organizationConformancePackName));\n    errors.collect(cdk.propertyValidator('templateBody', cdk.validateString)(properties.templateBody));\n    errors.collect(cdk.propertyValidator('templateS3Uri', cdk.validateString)(properties.templateS3Uri));\n    return errors.wrap('supplied properties not correct for \"CfnOrganizationConformancePackProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::OrganizationConformancePack` resource\n *\n * @param properties - the TypeScript properties of a `CfnOrganizationConformancePackProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::OrganizationConformancePack` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOrganizationConformancePackPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOrganizationConformancePackPropsValidator(properties).assertSuccess();\n    return {\n        OrganizationConformancePackName: cdk.stringToCloudFormation(properties.organizationConformancePackName),\n        ConformancePackInputParameters: cdk.listMapper(cfnOrganizationConformancePackConformancePackInputParameterPropertyToCloudFormation)(properties.conformancePackInputParameters),\n        DeliveryS3Bucket: cdk.stringToCloudFormation(properties.deliveryS3Bucket),\n        DeliveryS3KeyPrefix: cdk.stringToCloudFormation(properties.deliveryS3KeyPrefix),\n        ExcludedAccounts: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedAccounts),\n        TemplateBody: cdk.stringToCloudFormation(properties.templateBody),\n        TemplateS3Uri: cdk.stringToCloudFormation(properties.templateS3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOrganizationConformancePackPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOrganizationConformancePackProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOrganizationConformancePackProps>();\n    ret.addPropertyResult('organizationConformancePackName', 'OrganizationConformancePackName', cfn_parse.FromCloudFormation.getString(properties.OrganizationConformancePackName));\n    ret.addPropertyResult('conformancePackInputParameters', 'ConformancePackInputParameters', properties.ConformancePackInputParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnOrganizationConformancePackConformancePackInputParameterPropertyFromCloudFormation)(properties.ConformancePackInputParameters) : undefined);\n    ret.addPropertyResult('deliveryS3Bucket', 'DeliveryS3Bucket', properties.DeliveryS3Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.DeliveryS3Bucket) : undefined);\n    ret.addPropertyResult('deliveryS3KeyPrefix', 'DeliveryS3KeyPrefix', properties.DeliveryS3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.DeliveryS3KeyPrefix) : undefined);\n    ret.addPropertyResult('excludedAccounts', 'ExcludedAccounts', properties.ExcludedAccounts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedAccounts) : undefined);\n    ret.addPropertyResult('templateBody', 'TemplateBody', properties.TemplateBody != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateBody) : undefined);\n    ret.addPropertyResult('templateS3Uri', 'TemplateS3Uri', properties.TemplateS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateS3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnOrganizationConformancePack extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::OrganizationConformancePack\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnOrganizationConformancePack {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnOrganizationConformancePackPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnOrganizationConformancePack(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                             \n    public organizationConformancePackName: string;\n\n                                                                                                                                                                                                                                                                                      \n    public conformancePackInputParameters: Array<CfnOrganizationConformancePack.ConformancePackInputParameterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public deliveryS3Bucket: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                             \n    public deliveryS3KeyPrefix: string | undefined;\n\n                                                                                                                                                                                                                                                                                                     \n    public excludedAccounts: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public templateBody: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                         \n    public templateS3Uri: string | undefined;\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnOrganizationConformancePackProps) {\n        super(scope, id, { type: CfnOrganizationConformancePack.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'organizationConformancePackName', this);\n\n        this.organizationConformancePackName = props.organizationConformancePackName;\n        this.conformancePackInputParameters = props.conformancePackInputParameters;\n        this.deliveryS3Bucket = props.deliveryS3Bucket;\n        this.deliveryS3KeyPrefix = props.deliveryS3KeyPrefix;\n        this.excludedAccounts = props.excludedAccounts;\n        this.templateBody = props.templateBody;\n        this.templateS3Uri = props.templateS3Uri;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnOrganizationConformancePack.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            organizationConformancePackName: this.organizationConformancePackName,\n            conformancePackInputParameters: this.conformancePackInputParameters,\n            deliveryS3Bucket: this.deliveryS3Bucket,\n            deliveryS3KeyPrefix: this.deliveryS3KeyPrefix,\n            excludedAccounts: this.excludedAccounts,\n            templateBody: this.templateBody,\n            templateS3Uri: this.templateS3Uri,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnOrganizationConformancePackPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnOrganizationConformancePack {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface ConformancePackInputParameterProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly parameterName: string;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly parameterValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConformancePackInputParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ConformancePackInputParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOrganizationConformancePack_ConformancePackInputParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parameterName', cdk.requiredValidator)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterName', cdk.validateString)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.requiredValidator)(properties.parameterValue));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"ConformancePackInputParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::OrganizationConformancePack.ConformancePackInputParameter` resource\n *\n * @param properties - the TypeScript properties of a `ConformancePackInputParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::OrganizationConformancePack.ConformancePackInputParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOrganizationConformancePackConformancePackInputParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOrganizationConformancePack_ConformancePackInputParameterPropertyValidator(properties).assertSuccess();\n    return {\n        ParameterName: cdk.stringToCloudFormation(properties.parameterName),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOrganizationConformancePackConformancePackInputParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOrganizationConformancePack.ConformancePackInputParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOrganizationConformancePack.ConformancePackInputParameterProperty>();\n    ret.addPropertyResult('parameterName', 'ParameterName', cfn_parse.FromCloudFormation.getString(properties.ParameterName));\n    ret.addPropertyResult('parameterValue', 'ParameterValue', cfn_parse.FromCloudFormation.getString(properties.ParameterValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                   \nexport interface CfnRemediationConfigurationProps {\n\n                                                                                                                                                                                                                                              \n    readonly configRuleName: string;\n\n                                                                                                                                                                                                                                                     \n    readonly targetId: string;\n\n                                                                                                                                                                                                                                                                                         \n    readonly targetType: string;\n\n                                                                                                                                                                                                                                                    \n    readonly automatic?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    readonly executionControls?: CfnRemediationConfiguration.ExecutionControlsProperty | cdk.IResolvable;\n\nn    readonly maximumAutomaticAttempts?: number;\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly parameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    readonly resourceType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly retryAttemptSeconds?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly targetVersion?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRemediationConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnRemediationConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRemediationConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('automatic', cdk.validateBoolean)(properties.automatic));\n    errors.collect(cdk.propertyValidator('configRuleName', cdk.requiredValidator)(properties.configRuleName));\n    errors.collect(cdk.propertyValidator('configRuleName', cdk.validateString)(properties.configRuleName));\n    errors.collect(cdk.propertyValidator('executionControls', CfnRemediationConfiguration_ExecutionControlsPropertyValidator)(properties.executionControls));\n    errors.collect(cdk.propertyValidator('maximumAutomaticAttempts', cdk.validateNumber)(properties.maximumAutomaticAttempts));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('retryAttemptSeconds', cdk.validateNumber)(properties.retryAttemptSeconds));\n    errors.collect(cdk.propertyValidator('targetId', cdk.requiredValidator)(properties.targetId));\n    errors.collect(cdk.propertyValidator('targetId', cdk.validateString)(properties.targetId));\n    errors.collect(cdk.propertyValidator('targetType', cdk.requiredValidator)(properties.targetType));\n    errors.collect(cdk.propertyValidator('targetType', cdk.validateString)(properties.targetType));\n    errors.collect(cdk.propertyValidator('targetVersion', cdk.validateString)(properties.targetVersion));\n    return errors.wrap('supplied properties not correct for \"CfnRemediationConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnRemediationConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRemediationConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRemediationConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        ConfigRuleName: cdk.stringToCloudFormation(properties.configRuleName),\n        TargetId: cdk.stringToCloudFormation(properties.targetId),\n        TargetType: cdk.stringToCloudFormation(properties.targetType),\n        Automatic: cdk.booleanToCloudFormation(properties.automatic),\n        ExecutionControls: cfnRemediationConfigurationExecutionControlsPropertyToCloudFormation(properties.executionControls),\n        MaximumAutomaticAttempts: cdk.numberToCloudFormation(properties.maximumAutomaticAttempts),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        RetryAttemptSeconds: cdk.numberToCloudFormation(properties.retryAttemptSeconds),\n        TargetVersion: cdk.stringToCloudFormation(properties.targetVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRemediationConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRemediationConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRemediationConfigurationProps>();\n    ret.addPropertyResult('configRuleName', 'ConfigRuleName', cfn_parse.FromCloudFormation.getString(properties.ConfigRuleName));\n    ret.addPropertyResult('targetId', 'TargetId', cfn_parse.FromCloudFormation.getString(properties.TargetId));\n    ret.addPropertyResult('targetType', 'TargetType', cfn_parse.FromCloudFormation.getString(properties.TargetType));\n    ret.addPropertyResult('automatic', 'Automatic', properties.Automatic != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Automatic) : undefined);\n    ret.addPropertyResult('executionControls', 'ExecutionControls', properties.ExecutionControls != null ? CfnRemediationConfigurationExecutionControlsPropertyFromCloudFormation(properties.ExecutionControls) : undefined);\n    ret.addPropertyResult('maximumAutomaticAttempts', 'MaximumAutomaticAttempts', properties.MaximumAutomaticAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumAutomaticAttempts) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('retryAttemptSeconds', 'RetryAttemptSeconds', properties.RetryAttemptSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetryAttemptSeconds) : undefined);\n    ret.addPropertyResult('targetVersion', 'TargetVersion', properties.TargetVersion != null ? cfn_parse.FromCloudFormation.getString(properties.TargetVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnRemediationConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::RemediationConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRemediationConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRemediationConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRemediationConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                              \n    public configRuleName: string;\n\n                                                                                                                                                                                                                                                     \n    public targetId: string;\n\n                                                                                                                                                                                                                                                                                         \n    public targetType: string;\n\n                                                                                                                                                                                                                                                    \n    public automatic: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                             \n    public executionControls: CfnRemediationConfiguration.ExecutionControlsProperty | cdk.IResolvable | undefined;\n\nn    public maximumAutomaticAttempts: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                \n    public parameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                   \n    public resourceType: string | undefined;\n\nn    public retryAttemptSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public targetVersion: string | undefined;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnRemediationConfigurationProps) {\n        super(scope, id, { type: CfnRemediationConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'configRuleName', this);\n        cdk.requireProperty(props, 'targetId', this);\n        cdk.requireProperty(props, 'targetType', this);\n\n        this.configRuleName = props.configRuleName;\n        this.targetId = props.targetId;\n        this.targetType = props.targetType;\n        this.automatic = props.automatic;\n        this.executionControls = props.executionControls;\n        this.maximumAutomaticAttempts = props.maximumAutomaticAttempts;\n        this.parameters = props.parameters;\n        this.resourceType = props.resourceType;\n        this.retryAttemptSeconds = props.retryAttemptSeconds;\n        this.targetVersion = props.targetVersion;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRemediationConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            configRuleName: this.configRuleName,\n            targetId: this.targetId,\n            targetType: this.targetType,\n            automatic: this.automatic,\n            executionControls: this.executionControls,\n            maximumAutomaticAttempts: this.maximumAutomaticAttempts,\n            parameters: this.parameters,\n            resourceType: this.resourceType,\n            retryAttemptSeconds: this.retryAttemptSeconds,\n            targetVersion: this.targetVersion,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRemediationConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRemediationConfiguration {\n                                                                                                                                                                                                                                                            \n    export interface ExecutionControlsProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly ssmControls?: CfnRemediationConfiguration.SsmControlsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExecutionControlsProperty`\n *\n * @param properties - the TypeScript properties of a `ExecutionControlsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRemediationConfiguration_ExecutionControlsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ssmControls', CfnRemediationConfiguration_SsmControlsPropertyValidator)(properties.ssmControls));\n    return errors.wrap('supplied properties not correct for \"ExecutionControlsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.ExecutionControls` resource\n *\n * @param properties - the TypeScript properties of a `ExecutionControlsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.ExecutionControls` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRemediationConfigurationExecutionControlsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRemediationConfiguration_ExecutionControlsPropertyValidator(properties).assertSuccess();\n    return {\n        SsmControls: cfnRemediationConfigurationSsmControlsPropertyToCloudFormation(properties.ssmControls),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRemediationConfigurationExecutionControlsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRemediationConfiguration.ExecutionControlsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRemediationConfiguration.ExecutionControlsProperty>();\n    ret.addPropertyResult('ssmControls', 'SsmControls', properties.SsmControls != null ? CfnRemediationConfigurationSsmControlsPropertyFromCloudFormation(properties.SsmControls) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRemediationConfiguration {\n                                                                                                                                                                                                                                                                                                                                                                   \n    export interface RemediationParameterValueProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly resourceValue?: CfnRemediationConfiguration.ResourceValueProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly staticValue?: CfnRemediationConfiguration.StaticValueProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RemediationParameterValueProperty`\n *\n * @param properties - the TypeScript properties of a `RemediationParameterValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRemediationConfiguration_RemediationParameterValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceValue', CfnRemediationConfiguration_ResourceValuePropertyValidator)(properties.resourceValue));\n    errors.collect(cdk.propertyValidator('staticValue', CfnRemediationConfiguration_StaticValuePropertyValidator)(properties.staticValue));\n    return errors.wrap('supplied properties not correct for \"RemediationParameterValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.RemediationParameterValue` resource\n *\n * @param properties - the TypeScript properties of a `RemediationParameterValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.RemediationParameterValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRemediationConfigurationRemediationParameterValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRemediationConfiguration_RemediationParameterValuePropertyValidator(properties).assertSuccess();\n    return {\n        ResourceValue: cfnRemediationConfigurationResourceValuePropertyToCloudFormation(properties.resourceValue),\n        StaticValue: cfnRemediationConfigurationStaticValuePropertyToCloudFormation(properties.staticValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRemediationConfigurationRemediationParameterValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRemediationConfiguration.RemediationParameterValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRemediationConfiguration.RemediationParameterValueProperty>();\n    ret.addPropertyResult('resourceValue', 'ResourceValue', properties.ResourceValue != null ? CfnRemediationConfigurationResourceValuePropertyFromCloudFormation(properties.ResourceValue) : undefined);\n    ret.addPropertyResult('staticValue', 'StaticValue', properties.StaticValue != null ? CfnRemediationConfigurationStaticValuePropertyFromCloudFormation(properties.StaticValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRemediationConfiguration {\n                                                                                                                                                                                                                                                              \n    export interface ResourceValueProperty {\n                                                                                                                                                                                                                                                                                  \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceValueProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRemediationConfiguration_ResourceValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ResourceValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.ResourceValue` resource\n *\n * @param properties - the TypeScript properties of a `ResourceValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.ResourceValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRemediationConfigurationResourceValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRemediationConfiguration_ResourceValuePropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRemediationConfigurationResourceValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRemediationConfiguration.ResourceValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRemediationConfiguration.ResourceValueProperty>();\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRemediationConfiguration {\n                                                                                                                                                                                                                                                                                  \n    export interface SsmControlsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly concurrentExecutionRatePercentage?: number;\nn        readonly errorPercentage?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SsmControlsProperty`\n *\n * @param properties - the TypeScript properties of a `SsmControlsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRemediationConfiguration_SsmControlsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('concurrentExecutionRatePercentage', cdk.validateNumber)(properties.concurrentExecutionRatePercentage));\n    errors.collect(cdk.propertyValidator('errorPercentage', cdk.validateNumber)(properties.errorPercentage));\n    return errors.wrap('supplied properties not correct for \"SsmControlsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.SsmControls` resource\n *\n * @param properties - the TypeScript properties of a `SsmControlsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.SsmControls` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRemediationConfigurationSsmControlsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRemediationConfiguration_SsmControlsPropertyValidator(properties).assertSuccess();\n    return {\n        ConcurrentExecutionRatePercentage: cdk.numberToCloudFormation(properties.concurrentExecutionRatePercentage),\n        ErrorPercentage: cdk.numberToCloudFormation(properties.errorPercentage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRemediationConfigurationSsmControlsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRemediationConfiguration.SsmControlsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRemediationConfiguration.SsmControlsProperty>();\n    ret.addPropertyResult('concurrentExecutionRatePercentage', 'ConcurrentExecutionRatePercentage', properties.ConcurrentExecutionRatePercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConcurrentExecutionRatePercentage) : undefined);\n    ret.addPropertyResult('errorPercentage', 'ErrorPercentage', properties.ErrorPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.ErrorPercentage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRemediationConfiguration {\n                                                                                                                                                                                                                                                           \n    export interface StaticValueProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly values?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StaticValueProperty`\n *\n * @param properties - the TypeScript properties of a `StaticValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRemediationConfiguration_StaticValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"StaticValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.StaticValue` resource\n *\n * @param properties - the TypeScript properties of a `StaticValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::RemediationConfiguration.StaticValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRemediationConfigurationStaticValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRemediationConfiguration_StaticValuePropertyValidator(properties).assertSuccess();\n    return {\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRemediationConfigurationStaticValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRemediationConfiguration.StaticValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRemediationConfiguration.StaticValueProperty>();\n    ret.addPropertyResult('values', 'Values', properties.Values != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Values) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnStoredQueryProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly queryExpression: string;\n\n                                                                                                                                                                                                     \n    readonly queryName: string;\n\n                                                                                                                                                                                                                         \n    readonly queryDescription?: string;\n\n                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStoredQueryProps`\n *\n * @param properties - the TypeScript properties of a `CfnStoredQueryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStoredQueryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('queryDescription', cdk.validateString)(properties.queryDescription));\n    errors.collect(cdk.propertyValidator('queryExpression', cdk.requiredValidator)(properties.queryExpression));\n    errors.collect(cdk.propertyValidator('queryExpression', cdk.validateString)(properties.queryExpression));\n    errors.collect(cdk.propertyValidator('queryName', cdk.requiredValidator)(properties.queryName));\n    errors.collect(cdk.propertyValidator('queryName', cdk.validateString)(properties.queryName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnStoredQueryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Config::StoredQuery` resource\n *\n * @param properties - the TypeScript properties of a `CfnStoredQueryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Config::StoredQuery` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStoredQueryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStoredQueryPropsValidator(properties).assertSuccess();\n    return {\n        QueryExpression: cdk.stringToCloudFormation(properties.queryExpression),\n        QueryName: cdk.stringToCloudFormation(properties.queryName),\n        QueryDescription: cdk.stringToCloudFormation(properties.queryDescription),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStoredQueryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStoredQueryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStoredQueryProps>();\n    ret.addPropertyResult('queryExpression', 'QueryExpression', cfn_parse.FromCloudFormation.getString(properties.QueryExpression));\n    ret.addPropertyResult('queryName', 'QueryName', cfn_parse.FromCloudFormation.getString(properties.QueryName));\n    ret.addPropertyResult('queryDescription', 'QueryDescription', properties.QueryDescription != null ? cfn_parse.FromCloudFormation.getString(properties.QueryDescription) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                 \nexport class CfnStoredQuery extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Config::StoredQuery\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStoredQuery {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStoredQueryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStoredQuery(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                      \n    public readonly attrQueryArn: string;\n\n                                                                                   \n    public readonly attrQueryId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public queryExpression: string;\n\n                                                                                                                                                                                                     \n    public queryName: string;\n\n                                                                                                                                                                                                                         \n    public queryDescription: string | undefined;\n\n                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnStoredQueryProps) {\n        super(scope, id, { type: CfnStoredQuery.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'queryExpression', this);\n        cdk.requireProperty(props, 'queryName', this);\n        this.attrQueryArn = cdk.Token.asString(this.getAtt('QueryArn'));\n        this.attrQueryId = cdk.Token.asString(this.getAtt('QueryId'));\n\n        this.queryExpression = props.queryExpression;\n        this.queryName = props.queryName;\n        this.queryDescription = props.queryDescription;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Config::StoredQuery\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStoredQuery.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            queryExpression: this.queryExpression,\n            queryName: this.queryName,\n            queryDescription: this.queryDescription,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStoredQueryPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
