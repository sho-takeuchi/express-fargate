{
  "version": 3,
  "sources": ["managed-rules.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as sns from '../../aws-sns';\nimport { Duration, Lazy, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { ManagedRule, ManagedRuleIdentifiers, ResourceType, RuleProps, RuleScope } from './rule';\n\n                                                          \nexport interface AccessKeysRotatedProps extends RuleProps {\n                                                                                                                              \n  readonly maxAge?: Duration;\n}\n\n                                                                                                                                                                                                                                                     \nexport class AccessKeysRotated extends ManagedRule {\n  constructor(scope: Construct, id: string, props: AccessKeysRotatedProps = {}) {\n    super(scope, id, {\n      ...props,\n      identifier: ManagedRuleIdentifiers.ACCESS_KEYS_ROTATED,\n      inputParameters: {\n        ...props.maxAge\n          ? {\n            maxAccessKeyAge: props.maxAge.toDays(),\n          }\n          : {},\n      },\n    });\n  }\n}\n\n                                                                               \nexport interface CloudFormationStackDriftDetectionCheckProps extends RuleProps {\n                                                                                                      \n  readonly ownStackOnly?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n  readonly role?: iam.IRole;\n}\n\n                                                                                                                                                                                                                                                                                                   \nexport class CloudFormationStackDriftDetectionCheck extends ManagedRule {\n  private readonly role: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: CloudFormationStackDriftDetectionCheckProps = {}) {\n    super(scope, id, {\n      ...props,\n      identifier: ManagedRuleIdentifiers.CLOUDFORMATION_STACK_DRIFT_DETECTION_CHECK,\n      inputParameters: {\n        cloudformationRoleArn: Lazy.string({ produce: () => this.role.roleArn }),\n      },\n    });\n\n    this.ruleScope = RuleScope.fromResource( ResourceType.CLOUDFORMATION_STACK, props.ownStackOnly ? Stack.of(this).stackId : undefined );\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('config.amazonaws.com'),\n      managedPolicies: [\n        iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'),\n      ],\n    });\n  }\n}\n\n                                                                              \nexport interface CloudFormationStackNotificationCheckProps extends RuleProps {\n                                                                                            \n  readonly topics?: sns.ITopic[];\n}\n\n                                                                                                                                                                                                                                                                                                                         \nexport class CloudFormationStackNotificationCheck extends ManagedRule {\n  constructor(scope: Construct, id: string, props: CloudFormationStackNotificationCheckProps = {}) {\n    if (props.topics && props.topics.length > 5) {\n      throw new Error('At most 5 topics can be specified.');\n    }\n\n    super(scope, id, {\n      ...props,\n      identifier: ManagedRuleIdentifiers.CLOUDFORMATION_STACK_NOTIFICATION_CHECK,\n      inputParameters: props.topics && props.topics.reduce(\n        (params, topic, idx) => ({ ...params, [`snsTopic${idx + 1}`]: topic.topicArn }),\n        {},\n      ),\n      ruleScope: RuleScope.fromResources([ResourceType.CLOUDFORMATION_STACK]),\n    });\n  }\n}\n"],
  "mappings": "0TAAA,IAAA,QAAA,iBAEA,OAAA,QAAA,cAEA,OAAA,QAAA,UASA,+BAAuC,QAAA,WAAW,CAChD,YAAY,MAAkB,GAAY,MAAgC,GAAE,CAC1E,MAAM,MAAO,GAAI,IACZ,MACH,WAAY,OAAA,uBAAuB,oBACnC,gBAAiB,IACZ,MAAM,OACL,CACA,gBAAiB,MAAM,OAAO,UAE9B,oFAVZ,QAAA,kBAAA,gIA0BA,oDAA4D,QAAA,WAAW,CAGrE,YAAY,MAAkB,GAAY,MAAqD,GAAE,CAC/F,MAAM,MAAO,GAAI,IACZ,MACH,WAAY,OAAA,uBAAuB,2CACnC,gBAAiB,CACf,sBAAuB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,KAAK,+GAIlE,KAAK,UAAY,OAAA,UAAU,aAAc,OAAA,aAAa,qBAAsB,MAAM,aAAe,OAAA,MAAM,GAAG,MAAM,QAAU,QAE1H,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,OAAQ,CACnD,UAAW,GAAI,KAAI,iBAAiB,wBACpC,gBAAiB,CACf,IAAI,cAAc,yBAAyB,sBAjBnD,QAAA,uCAAA,+LA8BA,kDAA0D,QAAA,WAAW,CACnE,YAAY,MAAkB,GAAY,MAAmD,GAAE,CAC7F,mGAAI,MAAM,QAAU,MAAM,OAAO,OAAS,EACxC,KAAM,IAAI,OAAM,sCAGlB,MAAM,MAAO,GAAI,IACZ,MACH,WAAY,OAAA,uBAAuB,wCACnC,gBAAiB,MAAM,QAAU,MAAM,OAAO,OAC5C,CAAC,OAAQ,MAAO,MAAS,KAAK,QAAS,WAAW,IAAM,KAAM,MAAM,WACpE,IAEF,UAAW,OAAA,UAAU,cAAc,CAAC,OAAA,aAAa,0BAbvD,QAAA,qCAAA",
  "names": []
}
