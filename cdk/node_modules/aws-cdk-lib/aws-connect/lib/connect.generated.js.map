{
  "version": 3,
  "sources": ["connect.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:29.380Z\",\"fingerprint\":\"5vYjv/cTWXz/LqaQ+wD07nvdxetEsN3qJ25KteMPIGs=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                          \nexport interface CfnContactFlowProps {\n\n                                                                                                                                                                                                               \n    readonly content: string;\n\n                                                                                                                                                                                                                                                 \n    readonly instanceArn: string;\n\n                                                                                                                                                                                                         \n    readonly name: string;\n\n                                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                           \n    readonly state?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly type?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnContactFlowProps`\n *\n * @param properties - the TypeScript properties of a `CfnContactFlowProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnContactFlowPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('content', cdk.requiredValidator)(properties.content));\n    errors.collect(cdk.propertyValidator('content', cdk.validateString)(properties.content));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.requiredValidator)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.validateString)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnContactFlowProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::ContactFlow` resource\n *\n * @param properties - the TypeScript properties of a `CfnContactFlowProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::ContactFlow` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContactFlowPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContactFlowPropsValidator(properties).assertSuccess();\n    return {\n        Content: cdk.stringToCloudFormation(properties.content),\n        InstanceArn: cdk.stringToCloudFormation(properties.instanceArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        State: cdk.stringToCloudFormation(properties.state),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContactFlowPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContactFlowProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContactFlowProps>();\n    ret.addPropertyResult('content', 'Content', cfn_parse.FromCloudFormation.getString(properties.Content));\n    ret.addPropertyResult('instanceArn', 'InstanceArn', cfn_parse.FromCloudFormation.getString(properties.InstanceArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnContactFlow extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Connect::ContactFlow\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnContactFlow {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnContactFlowPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnContactFlow(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                           \n    public readonly attrContactFlowArn: string;\n\n                                                                                                                                                                                                               \n    public content: string;\n\n                                                                                                                                                                                                                                                 \n    public instanceArn: string;\n\n                                                                                                                                                                                                         \n    public name: string;\n\n                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                           \n    public state: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public type: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnContactFlowProps) {\n        super(scope, id, { type: CfnContactFlow.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'content', this);\n        cdk.requireProperty(props, 'instanceArn', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrContactFlowArn = cdk.Token.asString(this.getAtt('ContactFlowArn'));\n\n        this.content = props.content;\n        this.instanceArn = props.instanceArn;\n        this.name = props.name;\n        this.description = props.description;\n        this.state = props.state;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Connect::ContactFlow\", props.tags, { tagPropertyName: 'tags' });\n        this.type = props.type;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnContactFlow.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            content: this.content,\n            instanceArn: this.instanceArn,\n            name: this.name,\n            description: this.description,\n            state: this.state,\n            tags: this.tags.renderTags(),\n            type: this.type,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnContactFlowPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnContactFlowModuleProps {\n\n                                                                                                                                                                                                                                  \n    readonly content: string;\n\n                                                                                                                                                                                                                                                             \n    readonly instanceArn: string;\n\n                                                                                                                                                                                                                            \n    readonly name: string;\n\n                                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                              \n    readonly state?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnContactFlowModuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnContactFlowModuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnContactFlowModulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('content', cdk.requiredValidator)(properties.content));\n    errors.collect(cdk.propertyValidator('content', cdk.validateString)(properties.content));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.requiredValidator)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.validateString)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnContactFlowModuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::ContactFlowModule` resource\n *\n * @param properties - the TypeScript properties of a `CfnContactFlowModuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::ContactFlowModule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContactFlowModulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContactFlowModulePropsValidator(properties).assertSuccess();\n    return {\n        Content: cdk.stringToCloudFormation(properties.content),\n        InstanceArn: cdk.stringToCloudFormation(properties.instanceArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        State: cdk.stringToCloudFormation(properties.state),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContactFlowModulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContactFlowModuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContactFlowModuleProps>();\n    ret.addPropertyResult('content', 'Content', cfn_parse.FromCloudFormation.getString(properties.Content));\n    ret.addPropertyResult('instanceArn', 'InstanceArn', cfn_parse.FromCloudFormation.getString(properties.InstanceArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnContactFlowModule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Connect::ContactFlowModule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnContactFlowModule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnContactFlowModulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnContactFlowModule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                              \n    public readonly attrContactFlowModuleArn: string;\n\n                                                             \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                  \n    public content: string;\n\n                                                                                                                                                                                                                                                             \n    public instanceArn: string;\n\n                                                                                                                                                                                                                            \n    public name: string;\n\n                                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                              \n    public state: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnContactFlowModuleProps) {\n        super(scope, id, { type: CfnContactFlowModule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'content', this);\n        cdk.requireProperty(props, 'instanceArn', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrContactFlowModuleArn = cdk.Token.asString(this.getAtt('ContactFlowModuleArn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.content = props.content;\n        this.instanceArn = props.instanceArn;\n        this.name = props.name;\n        this.description = props.description;\n        this.state = props.state;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Connect::ContactFlowModule\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnContactFlowModule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            content: this.content,\n            instanceArn: this.instanceArn,\n            name: this.name,\n            description: this.description,\n            state: this.state,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnContactFlowModulePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                    \nexport interface CfnHoursOfOperationProps {\n\n                                                                                                                                                                                                                                             \n    readonly config: Array<CfnHoursOfOperation.HoursOfOperationConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    readonly instanceArn: string;\n\n                                                                                                                                                                                                                          \n    readonly name: string;\n\n                                                                                                                                                                                                                                   \n    readonly timeZone: string;\n\n                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnHoursOfOperationProps`\n *\n * @param properties - the TypeScript properties of a `CfnHoursOfOperationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnHoursOfOperationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('config', cdk.requiredValidator)(properties.config));\n    errors.collect(cdk.propertyValidator('config', cdk.listValidator(CfnHoursOfOperation_HoursOfOperationConfigPropertyValidator))(properties.config));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.requiredValidator)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.validateString)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('timeZone', cdk.requiredValidator)(properties.timeZone));\n    errors.collect(cdk.propertyValidator('timeZone', cdk.validateString)(properties.timeZone));\n    return errors.wrap('supplied properties not correct for \"CfnHoursOfOperationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::HoursOfOperation` resource\n *\n * @param properties - the TypeScript properties of a `CfnHoursOfOperationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::HoursOfOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnHoursOfOperationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnHoursOfOperationPropsValidator(properties).assertSuccess();\n    return {\n        Config: cdk.listMapper(cfnHoursOfOperationHoursOfOperationConfigPropertyToCloudFormation)(properties.config),\n        InstanceArn: cdk.stringToCloudFormation(properties.instanceArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        TimeZone: cdk.stringToCloudFormation(properties.timeZone),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnHoursOfOperationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnHoursOfOperationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnHoursOfOperationProps>();\n    ret.addPropertyResult('config', 'Config', cfn_parse.FromCloudFormation.getArray(CfnHoursOfOperationHoursOfOperationConfigPropertyFromCloudFormation)(properties.Config));\n    ret.addPropertyResult('instanceArn', 'InstanceArn', cfn_parse.FromCloudFormation.getString(properties.InstanceArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('timeZone', 'TimeZone', cfn_parse.FromCloudFormation.getString(properties.TimeZone));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                       \nexport class CfnHoursOfOperation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Connect::HoursOfOperation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnHoursOfOperation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnHoursOfOperationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnHoursOfOperation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                     \n    public readonly attrHoursOfOperationArn: string;\n\n                                                                                                                                                                                                                                             \n    public config: Array<CfnHoursOfOperation.HoursOfOperationConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    public instanceArn: string;\n\n                                                                                                                                                                                                                          \n    public name: string;\n\n                                                                                                                                                                                                                                   \n    public timeZone: string;\n\n                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnHoursOfOperationProps) {\n        super(scope, id, { type: CfnHoursOfOperation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'config', this);\n        cdk.requireProperty(props, 'instanceArn', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'timeZone', this);\n        this.attrHoursOfOperationArn = cdk.Token.asString(this.getAtt('HoursOfOperationArn'));\n\n        this.config = props.config;\n        this.instanceArn = props.instanceArn;\n        this.name = props.name;\n        this.timeZone = props.timeZone;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Connect::HoursOfOperation\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnHoursOfOperation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            config: this.config,\n            instanceArn: this.instanceArn,\n            name: this.name,\n            timeZone: this.timeZone,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnHoursOfOperationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnHoursOfOperation {\n                                                                                                                                                                                                                                                                                \n    export interface HoursOfOperationConfigProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly day: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly endTime: CfnHoursOfOperation.HoursOfOperationTimeSliceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly startTime: CfnHoursOfOperation.HoursOfOperationTimeSliceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HoursOfOperationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `HoursOfOperationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnHoursOfOperation_HoursOfOperationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('day', cdk.requiredValidator)(properties.day));\n    errors.collect(cdk.propertyValidator('day', cdk.validateString)(properties.day));\n    errors.collect(cdk.propertyValidator('endTime', cdk.requiredValidator)(properties.endTime));\n    errors.collect(cdk.propertyValidator('endTime', CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyValidator)(properties.endTime));\n    errors.collect(cdk.propertyValidator('startTime', cdk.requiredValidator)(properties.startTime));\n    errors.collect(cdk.propertyValidator('startTime', CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyValidator)(properties.startTime));\n    return errors.wrap('supplied properties not correct for \"HoursOfOperationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::HoursOfOperation.HoursOfOperationConfig` resource\n *\n * @param properties - the TypeScript properties of a `HoursOfOperationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::HoursOfOperation.HoursOfOperationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnHoursOfOperationHoursOfOperationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnHoursOfOperation_HoursOfOperationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Day: cdk.stringToCloudFormation(properties.day),\n        EndTime: cfnHoursOfOperationHoursOfOperationTimeSlicePropertyToCloudFormation(properties.endTime),\n        StartTime: cfnHoursOfOperationHoursOfOperationTimeSlicePropertyToCloudFormation(properties.startTime),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnHoursOfOperationHoursOfOperationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnHoursOfOperation.HoursOfOperationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnHoursOfOperation.HoursOfOperationConfigProperty>();\n    ret.addPropertyResult('day', 'Day', cfn_parse.FromCloudFormation.getString(properties.Day));\n    ret.addPropertyResult('endTime', 'EndTime', CfnHoursOfOperationHoursOfOperationTimeSlicePropertyFromCloudFormation(properties.EndTime));\n    ret.addPropertyResult('startTime', 'StartTime', CfnHoursOfOperationHoursOfOperationTimeSlicePropertyFromCloudFormation(properties.StartTime));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnHoursOfOperation {\n                                                                                                                                                                                                                                                                                      \n    export interface HoursOfOperationTimeSliceProperty {\n                                                                                                                                                                                                                                                                           \n        readonly hours: number;\n                                                                                                                                                                                                                                                                               \n        readonly minutes: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HoursOfOperationTimeSliceProperty`\n *\n * @param properties - the TypeScript properties of a `HoursOfOperationTimeSliceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hours', cdk.requiredValidator)(properties.hours));\n    errors.collect(cdk.propertyValidator('hours', cdk.validateNumber)(properties.hours));\n    errors.collect(cdk.propertyValidator('minutes', cdk.requiredValidator)(properties.minutes));\n    errors.collect(cdk.propertyValidator('minutes', cdk.validateNumber)(properties.minutes));\n    return errors.wrap('supplied properties not correct for \"HoursOfOperationTimeSliceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::HoursOfOperation.HoursOfOperationTimeSlice` resource\n *\n * @param properties - the TypeScript properties of a `HoursOfOperationTimeSliceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::HoursOfOperation.HoursOfOperationTimeSlice` resource.\n */\n// @ts-ignore TS6133\nfunction cfnHoursOfOperationHoursOfOperationTimeSlicePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyValidator(properties).assertSuccess();\n    return {\n        Hours: cdk.numberToCloudFormation(properties.hours),\n        Minutes: cdk.numberToCloudFormation(properties.minutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnHoursOfOperationHoursOfOperationTimeSlicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnHoursOfOperation.HoursOfOperationTimeSliceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnHoursOfOperation.HoursOfOperationTimeSliceProperty>();\n    ret.addPropertyResult('hours', 'Hours', cfn_parse.FromCloudFormation.getNumber(properties.Hours));\n    ret.addPropertyResult('minutes', 'Minutes', cfn_parse.FromCloudFormation.getNumber(properties.Minutes));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnQuickConnectProps {\n\n                                                                                                                                                                                                                                    \n    readonly instanceArn: string;\n\n                                                                                                                                                                                                            \n    readonly name: string;\n\n                                                                                                                                                                                                                                         \n    readonly quickConnectConfig: CfnQuickConnect.QuickConnectConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnQuickConnectProps`\n *\n * @param properties - the TypeScript properties of a `CfnQuickConnectProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnQuickConnectPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.requiredValidator)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.validateString)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('quickConnectConfig', cdk.requiredValidator)(properties.quickConnectConfig));\n    errors.collect(cdk.propertyValidator('quickConnectConfig', CfnQuickConnect_QuickConnectConfigPropertyValidator)(properties.quickConnectConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnQuickConnectProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::QuickConnect` resource\n *\n * @param properties - the TypeScript properties of a `CfnQuickConnectProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::QuickConnect` resource.\n */\n// @ts-ignore TS6133\nfunction cfnQuickConnectPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnQuickConnectPropsValidator(properties).assertSuccess();\n    return {\n        InstanceArn: cdk.stringToCloudFormation(properties.instanceArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        QuickConnectConfig: cfnQuickConnectQuickConnectConfigPropertyToCloudFormation(properties.quickConnectConfig),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnQuickConnectPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnQuickConnectProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnQuickConnectProps>();\n    ret.addPropertyResult('instanceArn', 'InstanceArn', cfn_parse.FromCloudFormation.getString(properties.InstanceArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('quickConnectConfig', 'QuickConnectConfig', CfnQuickConnectQuickConnectConfigPropertyFromCloudFormation(properties.QuickConnectConfig));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnQuickConnect extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Connect::QuickConnect\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnQuickConnect {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnQuickConnectPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnQuickConnect(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                           \n    public readonly attrQuickConnectArn: string;\n\n                                                                                                                                                                                                                                    \n    public instanceArn: string;\n\n                                                                                                                                                                                                            \n    public name: string;\n\n                                                                                                                                                                                                                                         \n    public quickConnectConfig: CfnQuickConnect.QuickConnectConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnQuickConnectProps) {\n        super(scope, id, { type: CfnQuickConnect.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceArn', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'quickConnectConfig', this);\n        this.attrQuickConnectArn = cdk.Token.asString(this.getAtt('QuickConnectArn'));\n\n        this.instanceArn = props.instanceArn;\n        this.name = props.name;\n        this.quickConnectConfig = props.quickConnectConfig;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Connect::QuickConnect\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnQuickConnect.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceArn: this.instanceArn,\n            name: this.name,\n            quickConnectConfig: this.quickConnectConfig,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnQuickConnectPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnQuickConnect {\n                                                                                                                                                                                                                                                                                               \n    export interface PhoneNumberQuickConnectConfigProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly phoneNumber: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PhoneNumberQuickConnectConfigProperty`\n *\n * @param properties - the TypeScript properties of a `PhoneNumberQuickConnectConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('phoneNumber', cdk.requiredValidator)(properties.phoneNumber));\n    errors.collect(cdk.propertyValidator('phoneNumber', cdk.validateString)(properties.phoneNumber));\n    return errors.wrap('supplied properties not correct for \"PhoneNumberQuickConnectConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.PhoneNumberQuickConnectConfig` resource\n *\n * @param properties - the TypeScript properties of a `PhoneNumberQuickConnectConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.PhoneNumberQuickConnectConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnQuickConnectPhoneNumberQuickConnectConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyValidator(properties).assertSuccess();\n    return {\n        PhoneNumber: cdk.stringToCloudFormation(properties.phoneNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnQuickConnectPhoneNumberQuickConnectConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnQuickConnect.PhoneNumberQuickConnectConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnQuickConnect.PhoneNumberQuickConnectConfigProperty>();\n    ret.addPropertyResult('phoneNumber', 'PhoneNumber', cfn_parse.FromCloudFormation.getString(properties.PhoneNumber));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnQuickConnect {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface QueueQuickConnectConfigProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly contactFlowArn: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly queueArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QueueQuickConnectConfigProperty`\n *\n * @param properties - the TypeScript properties of a `QueueQuickConnectConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnQuickConnect_QueueQuickConnectConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contactFlowArn', cdk.requiredValidator)(properties.contactFlowArn));\n    errors.collect(cdk.propertyValidator('contactFlowArn', cdk.validateString)(properties.contactFlowArn));\n    errors.collect(cdk.propertyValidator('queueArn', cdk.requiredValidator)(properties.queueArn));\n    errors.collect(cdk.propertyValidator('queueArn', cdk.validateString)(properties.queueArn));\n    return errors.wrap('supplied properties not correct for \"QueueQuickConnectConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.QueueQuickConnectConfig` resource\n *\n * @param properties - the TypeScript properties of a `QueueQuickConnectConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.QueueQuickConnectConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnQuickConnectQueueQuickConnectConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnQuickConnect_QueueQuickConnectConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ContactFlowArn: cdk.stringToCloudFormation(properties.contactFlowArn),\n        QueueArn: cdk.stringToCloudFormation(properties.queueArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnQuickConnectQueueQuickConnectConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnQuickConnect.QueueQuickConnectConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnQuickConnect.QueueQuickConnectConfigProperty>();\n    ret.addPropertyResult('contactFlowArn', 'ContactFlowArn', cfn_parse.FromCloudFormation.getString(properties.ContactFlowArn));\n    ret.addPropertyResult('queueArn', 'QueueArn', cfn_parse.FromCloudFormation.getString(properties.QueueArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnQuickConnect {\n                                                                                                                                                                                                                                                                          \n    export interface QuickConnectConfigProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly phoneConfig?: CfnQuickConnect.PhoneNumberQuickConnectConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly queueConfig?: CfnQuickConnect.QueueQuickConnectConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly quickConnectType: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly userConfig?: CfnQuickConnect.UserQuickConnectConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QuickConnectConfigProperty`\n *\n * @param properties - the TypeScript properties of a `QuickConnectConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnQuickConnect_QuickConnectConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('phoneConfig', CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyValidator)(properties.phoneConfig));\n    errors.collect(cdk.propertyValidator('queueConfig', CfnQuickConnect_QueueQuickConnectConfigPropertyValidator)(properties.queueConfig));\n    errors.collect(cdk.propertyValidator('quickConnectType', cdk.requiredValidator)(properties.quickConnectType));\n    errors.collect(cdk.propertyValidator('quickConnectType', cdk.validateString)(properties.quickConnectType));\n    errors.collect(cdk.propertyValidator('userConfig', CfnQuickConnect_UserQuickConnectConfigPropertyValidator)(properties.userConfig));\n    return errors.wrap('supplied properties not correct for \"QuickConnectConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.QuickConnectConfig` resource\n *\n * @param properties - the TypeScript properties of a `QuickConnectConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.QuickConnectConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnQuickConnectQuickConnectConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnQuickConnect_QuickConnectConfigPropertyValidator(properties).assertSuccess();\n    return {\n        PhoneConfig: cfnQuickConnectPhoneNumberQuickConnectConfigPropertyToCloudFormation(properties.phoneConfig),\n        QueueConfig: cfnQuickConnectQueueQuickConnectConfigPropertyToCloudFormation(properties.queueConfig),\n        QuickConnectType: cdk.stringToCloudFormation(properties.quickConnectType),\n        UserConfig: cfnQuickConnectUserQuickConnectConfigPropertyToCloudFormation(properties.userConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnQuickConnectQuickConnectConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnQuickConnect.QuickConnectConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnQuickConnect.QuickConnectConfigProperty>();\n    ret.addPropertyResult('phoneConfig', 'PhoneConfig', properties.PhoneConfig != null ? CfnQuickConnectPhoneNumberQuickConnectConfigPropertyFromCloudFormation(properties.PhoneConfig) : undefined);\n    ret.addPropertyResult('queueConfig', 'QueueConfig', properties.QueueConfig != null ? CfnQuickConnectQueueQuickConnectConfigPropertyFromCloudFormation(properties.QueueConfig) : undefined);\n    ret.addPropertyResult('quickConnectType', 'QuickConnectType', cfn_parse.FromCloudFormation.getString(properties.QuickConnectType));\n    ret.addPropertyResult('userConfig', 'UserConfig', properties.UserConfig != null ? CfnQuickConnectUserQuickConnectConfigPropertyFromCloudFormation(properties.UserConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnQuickConnect {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface UserQuickConnectConfigProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly contactFlowArn: string;\n                                                                                                                                                                                                                                                                                                \n        readonly userArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserQuickConnectConfigProperty`\n *\n * @param properties - the TypeScript properties of a `UserQuickConnectConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnQuickConnect_UserQuickConnectConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contactFlowArn', cdk.requiredValidator)(properties.contactFlowArn));\n    errors.collect(cdk.propertyValidator('contactFlowArn', cdk.validateString)(properties.contactFlowArn));\n    errors.collect(cdk.propertyValidator('userArn', cdk.requiredValidator)(properties.userArn));\n    errors.collect(cdk.propertyValidator('userArn', cdk.validateString)(properties.userArn));\n    return errors.wrap('supplied properties not correct for \"UserQuickConnectConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.UserQuickConnectConfig` resource\n *\n * @param properties - the TypeScript properties of a `UserQuickConnectConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::QuickConnect.UserQuickConnectConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnQuickConnectUserQuickConnectConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnQuickConnect_UserQuickConnectConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ContactFlowArn: cdk.stringToCloudFormation(properties.contactFlowArn),\n        UserArn: cdk.stringToCloudFormation(properties.userArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnQuickConnectUserQuickConnectConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnQuickConnect.UserQuickConnectConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnQuickConnect.UserQuickConnectConfigProperty>();\n    ret.addPropertyResult('contactFlowArn', 'ContactFlowArn', cfn_parse.FromCloudFormation.getString(properties.ContactFlowArn));\n    ret.addPropertyResult('userArn', 'UserArn', cfn_parse.FromCloudFormation.getString(properties.UserArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                            \nexport interface CfnUserProps {\n\n                                                                                                                                                                                                                    \n    readonly instanceArn: string;\n\n                                                                                                                                                                                                                            \n    readonly phoneConfig: CfnUser.UserPhoneConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                        \n    readonly routingProfileArn: string;\n\n                                                                                                                                                                                                                                           \n    readonly securityProfileArns: string[];\n\n                                                                                                                                                                                                             \n    readonly username: string;\n\n                                                                                                                                                                                                                                                          \n    readonly directoryUserId?: string;\n\n                                                                                                                                                                                                                                        \n    readonly hierarchyGroupArn?: string;\n\n                                                                                                                                                                                                          \n    readonly identityInfo?: CfnUser.UserIdentityInfoProperty | cdk.IResolvable;\n\n                                                                                                                                                                                      \n    readonly password?: string;\n\n                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryUserId', cdk.validateString)(properties.directoryUserId));\n    errors.collect(cdk.propertyValidator('hierarchyGroupArn', cdk.validateString)(properties.hierarchyGroupArn));\n    errors.collect(cdk.propertyValidator('identityInfo', CfnUser_UserIdentityInfoPropertyValidator)(properties.identityInfo));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.requiredValidator)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.validateString)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('phoneConfig', cdk.requiredValidator)(properties.phoneConfig));\n    errors.collect(cdk.propertyValidator('phoneConfig', CfnUser_UserPhoneConfigPropertyValidator)(properties.phoneConfig));\n    errors.collect(cdk.propertyValidator('routingProfileArn', cdk.requiredValidator)(properties.routingProfileArn));\n    errors.collect(cdk.propertyValidator('routingProfileArn', cdk.validateString)(properties.routingProfileArn));\n    errors.collect(cdk.propertyValidator('securityProfileArns', cdk.requiredValidator)(properties.securityProfileArns));\n    errors.collect(cdk.propertyValidator('securityProfileArns', cdk.listValidator(cdk.validateString))(properties.securityProfileArns));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"CfnUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::User` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPropsValidator(properties).assertSuccess();\n    return {\n        InstanceArn: cdk.stringToCloudFormation(properties.instanceArn),\n        PhoneConfig: cfnUserUserPhoneConfigPropertyToCloudFormation(properties.phoneConfig),\n        RoutingProfileArn: cdk.stringToCloudFormation(properties.routingProfileArn),\n        SecurityProfileArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityProfileArns),\n        Username: cdk.stringToCloudFormation(properties.username),\n        DirectoryUserId: cdk.stringToCloudFormation(properties.directoryUserId),\n        HierarchyGroupArn: cdk.stringToCloudFormation(properties.hierarchyGroupArn),\n        IdentityInfo: cfnUserUserIdentityInfoPropertyToCloudFormation(properties.identityInfo),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();\n    ret.addPropertyResult('instanceArn', 'InstanceArn', cfn_parse.FromCloudFormation.getString(properties.InstanceArn));\n    ret.addPropertyResult('phoneConfig', 'PhoneConfig', CfnUserUserPhoneConfigPropertyFromCloudFormation(properties.PhoneConfig));\n    ret.addPropertyResult('routingProfileArn', 'RoutingProfileArn', cfn_parse.FromCloudFormation.getString(properties.RoutingProfileArn));\n    ret.addPropertyResult('securityProfileArns', 'SecurityProfileArns', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityProfileArns));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addPropertyResult('directoryUserId', 'DirectoryUserId', properties.DirectoryUserId != null ? cfn_parse.FromCloudFormation.getString(properties.DirectoryUserId) : undefined);\n    ret.addPropertyResult('hierarchyGroupArn', 'HierarchyGroupArn', properties.HierarchyGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HierarchyGroupArn) : undefined);\n    ret.addPropertyResult('identityInfo', 'IdentityInfo', properties.IdentityInfo != null ? CfnUserUserIdentityInfoPropertyFromCloudFormation(properties.IdentityInfo) : undefined);\n    ret.addPropertyResult('password', 'Password', properties.Password != null ? cfn_parse.FromCloudFormation.getString(properties.Password) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Connect::User\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrUserArn: string;\n\n                                                                                                                                                                                                                    \n    public instanceArn: string;\n\n                                                                                                                                                                                                                            \n    public phoneConfig: CfnUser.UserPhoneConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                        \n    public routingProfileArn: string;\n\n                                                                                                                                                                                                                                           \n    public securityProfileArns: string[];\n\n                                                                                                                                                                                                             \n    public username: string;\n\n                                                                                                                                                                                                                                                          \n    public directoryUserId: string | undefined;\n\n                                                                                                                                                                                                                                        \n    public hierarchyGroupArn: string | undefined;\n\n                                                                                                                                                                                                          \n    public identityInfo: CfnUser.UserIdentityInfoProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                      \n    public password: string | undefined;\n\n                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProps) {\n        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceArn', this);\n        cdk.requireProperty(props, 'phoneConfig', this);\n        cdk.requireProperty(props, 'routingProfileArn', this);\n        cdk.requireProperty(props, 'securityProfileArns', this);\n        cdk.requireProperty(props, 'username', this);\n        this.attrUserArn = cdk.Token.asString(this.getAtt('UserArn'));\n\n        this.instanceArn = props.instanceArn;\n        this.phoneConfig = props.phoneConfig;\n        this.routingProfileArn = props.routingProfileArn;\n        this.securityProfileArns = props.securityProfileArns;\n        this.username = props.username;\n        this.directoryUserId = props.directoryUserId;\n        this.hierarchyGroupArn = props.hierarchyGroupArn;\n        this.identityInfo = props.identityInfo;\n        this.password = props.password;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Connect::User\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceArn: this.instanceArn,\n            phoneConfig: this.phoneConfig,\n            routingProfileArn: this.routingProfileArn,\n            securityProfileArns: this.securityProfileArns,\n            username: this.username,\n            directoryUserId: this.directoryUserId,\n            hierarchyGroupArn: this.hierarchyGroupArn,\n            identityInfo: this.identityInfo,\n            password: this.password,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUser {\n                                                                                                                                                                                                                                                              \n    export interface UserIdentityInfoProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly email?: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly firstName?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly lastName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserIdentityInfoProperty`\n *\n * @param properties - the TypeScript properties of a `UserIdentityInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUser_UserIdentityInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('email', cdk.validateString)(properties.email));\n    errors.collect(cdk.propertyValidator('firstName', cdk.validateString)(properties.firstName));\n    errors.collect(cdk.propertyValidator('lastName', cdk.validateString)(properties.lastName));\n    return errors.wrap('supplied properties not correct for \"UserIdentityInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::User.UserIdentityInfo` resource\n *\n * @param properties - the TypeScript properties of a `UserIdentityInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::User.UserIdentityInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserUserIdentityInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUser_UserIdentityInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Email: cdk.stringToCloudFormation(properties.email),\n        FirstName: cdk.stringToCloudFormation(properties.firstName),\n        LastName: cdk.stringToCloudFormation(properties.lastName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserUserIdentityInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUser.UserIdentityInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUser.UserIdentityInfoProperty>();\n    ret.addPropertyResult('email', 'Email', properties.Email != null ? cfn_parse.FromCloudFormation.getString(properties.Email) : undefined);\n    ret.addPropertyResult('firstName', 'FirstName', properties.FirstName != null ? cfn_parse.FromCloudFormation.getString(properties.FirstName) : undefined);\n    ret.addPropertyResult('lastName', 'LastName', properties.LastName != null ? cfn_parse.FromCloudFormation.getString(properties.LastName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUser {\n                                                                                                                                                                                                                                                                                  \n    export interface UserPhoneConfigProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly afterContactWorkTimeLimit?: number;\n                                                                                                                                                                                                                                                  \n        readonly autoAccept?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly deskPhoneNumber?: string;\n                                                                                                                                                                                                                                        \n        readonly phoneType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserPhoneConfigProperty`\n *\n * @param properties - the TypeScript properties of a `UserPhoneConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUser_UserPhoneConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('afterContactWorkTimeLimit', cdk.validateNumber)(properties.afterContactWorkTimeLimit));\n    errors.collect(cdk.propertyValidator('autoAccept', cdk.validateBoolean)(properties.autoAccept));\n    errors.collect(cdk.propertyValidator('deskPhoneNumber', cdk.validateString)(properties.deskPhoneNumber));\n    errors.collect(cdk.propertyValidator('phoneType', cdk.requiredValidator)(properties.phoneType));\n    errors.collect(cdk.propertyValidator('phoneType', cdk.validateString)(properties.phoneType));\n    return errors.wrap('supplied properties not correct for \"UserPhoneConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::User.UserPhoneConfig` resource\n *\n * @param properties - the TypeScript properties of a `UserPhoneConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::User.UserPhoneConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserUserPhoneConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUser_UserPhoneConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AfterContactWorkTimeLimit: cdk.numberToCloudFormation(properties.afterContactWorkTimeLimit),\n        AutoAccept: cdk.booleanToCloudFormation(properties.autoAccept),\n        DeskPhoneNumber: cdk.stringToCloudFormation(properties.deskPhoneNumber),\n        PhoneType: cdk.stringToCloudFormation(properties.phoneType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserUserPhoneConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUser.UserPhoneConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUser.UserPhoneConfigProperty>();\n    ret.addPropertyResult('afterContactWorkTimeLimit', 'AfterContactWorkTimeLimit', properties.AfterContactWorkTimeLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.AfterContactWorkTimeLimit) : undefined);\n    ret.addPropertyResult('autoAccept', 'AutoAccept', properties.AutoAccept != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoAccept) : undefined);\n    ret.addPropertyResult('deskPhoneNumber', 'DeskPhoneNumber', properties.DeskPhoneNumber != null ? cfn_parse.FromCloudFormation.getString(properties.DeskPhoneNumber) : undefined);\n    ret.addPropertyResult('phoneType', 'PhoneType', cfn_parse.FromCloudFormation.getString(properties.PhoneType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnUserHierarchyGroupProps {\n\n                                                                                                                                                                                                                                                            \n    readonly instanceArn: string;\n\n                                                                                                                                                                                                                               \n    readonly name: string;\n\n                                                                                                                                                                                                                                                       \n    readonly parentGroupArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserHierarchyGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserHierarchyGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserHierarchyGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.requiredValidator)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('instanceArn', cdk.validateString)(properties.instanceArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parentGroupArn', cdk.validateString)(properties.parentGroupArn));\n    return errors.wrap('supplied properties not correct for \"CfnUserHierarchyGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Connect::UserHierarchyGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserHierarchyGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Connect::UserHierarchyGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserHierarchyGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserHierarchyGroupPropsValidator(properties).assertSuccess();\n    return {\n        InstanceArn: cdk.stringToCloudFormation(properties.instanceArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ParentGroupArn: cdk.stringToCloudFormation(properties.parentGroupArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserHierarchyGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserHierarchyGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserHierarchyGroupProps>();\n    ret.addPropertyResult('instanceArn', 'InstanceArn', cfn_parse.FromCloudFormation.getString(properties.InstanceArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('parentGroupArn', 'ParentGroupArn', properties.ParentGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.ParentGroupArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                     \nexport class CfnUserHierarchyGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Connect::UserHierarchyGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserHierarchyGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserHierarchyGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserHierarchyGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                         \n    public readonly attrUserHierarchyGroupArn: string;\n\n                                                                                                                                                                                                                                                            \n    public instanceArn: string;\n\n                                                                                                                                                                                                                               \n    public name: string;\n\n                                                                                                                                                                                                                                                       \n    public parentGroupArn: string | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnUserHierarchyGroupProps) {\n        super(scope, id, { type: CfnUserHierarchyGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceArn', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrUserHierarchyGroupArn = cdk.Token.asString(this.getAtt('UserHierarchyGroupArn'));\n\n        this.instanceArn = props.instanceArn;\n        this.name = props.name;\n        this.parentGroupArn = props.parentGroupArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserHierarchyGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceArn: this.instanceArn,\n            name: this.name,\n            parentGroupArn: this.parentGroupArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserHierarchyGroupPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
