{
  "version": 3,
  "sources": ["datasync.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:29.519Z\",\"fingerprint\":\"81DjF+6ASq8Ykz7Rv8VkdJe+x8IOc3G3SPQAPw4DVxo=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                               \nexport interface CfnAgentProps {\n\nn    readonly activationKey: string;\n\n                                                                                                                                                                                                                                                                                                \n    readonly agentName?: string;\n\nn    readonly securityGroupArns?: string[];\n\nn    readonly subnetArns?: string[];\n\nn    readonly tags?: cdk.CfnTag[];\n\nn    readonly vpcEndpointId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAgentProps`\n *\n * @param properties - the TypeScript properties of a `CfnAgentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAgentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activationKey', cdk.requiredValidator)(properties.activationKey));\n    errors.collect(cdk.propertyValidator('activationKey', cdk.validateString)(properties.activationKey));\n    errors.collect(cdk.propertyValidator('agentName', cdk.validateString)(properties.agentName));\n    errors.collect(cdk.propertyValidator('securityGroupArns', cdk.listValidator(cdk.validateString))(properties.securityGroupArns));\n    errors.collect(cdk.propertyValidator('subnetArns', cdk.listValidator(cdk.validateString))(properties.subnetArns));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcEndpointId', cdk.validateString)(properties.vpcEndpointId));\n    return errors.wrap('supplied properties not correct for \"CfnAgentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::Agent` resource\n *\n * @param properties - the TypeScript properties of a `CfnAgentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::Agent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAgentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAgentPropsValidator(properties).assertSuccess();\n    return {\n        ActivationKey: cdk.stringToCloudFormation(properties.activationKey),\n        AgentName: cdk.stringToCloudFormation(properties.agentName),\n        SecurityGroupArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupArns),\n        SubnetArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetArns),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAgentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAgentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAgentProps>();\n    ret.addPropertyResult('activationKey', 'ActivationKey', cfn_parse.FromCloudFormation.getString(properties.ActivationKey));\n    ret.addPropertyResult('agentName', 'AgentName', properties.AgentName != null ? cfn_parse.FromCloudFormation.getString(properties.AgentName) : undefined);\n    ret.addPropertyResult('securityGroupArns', 'SecurityGroupArns', properties.SecurityGroupArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupArns) : undefined);\n    ret.addPropertyResult('subnetArns', 'SubnetArns', properties.SubnetArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetArns) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcEndpointId', 'VpcEndpointId', properties.VpcEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcEndpointId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAgent extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::Agent\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAgent {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAgentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAgent(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                        \n    public readonly attrAgentArn: string;\n\n                                                                                                                                                                                                                  \n    public readonly attrEndpointType: string;\n\nn    public activationKey: string;\n\n                                                                                                                                                                                                                                                                                                \n    public agentName: string | undefined;\n\nn    public securityGroupArns: string[] | undefined;\n\nn    public subnetArns: string[] | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\nn    public vpcEndpointId: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnAgentProps) {\n        super(scope, id, { type: CfnAgent.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'activationKey', this);\n        this.attrAgentArn = cdk.Token.asString(this.getAtt('AgentArn'));\n        this.attrEndpointType = cdk.Token.asString(this.getAtt('EndpointType'));\n\n        this.activationKey = props.activationKey;\n        this.agentName = props.agentName;\n        this.securityGroupArns = props.securityGroupArns;\n        this.subnetArns = props.subnetArns;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::Agent\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcEndpointId = props.vpcEndpointId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAgent.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            activationKey: this.activationKey,\n            agentName: this.agentName,\n            securityGroupArns: this.securityGroupArns,\n            subnetArns: this.subnetArns,\n            tags: this.tags.renderTags(),\n            vpcEndpointId: this.vpcEndpointId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAgentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                           \nexport interface CfnLocationEFSProps {\n\nn    readonly ec2Config: CfnLocationEFS.Ec2ConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    readonly efsFilesystemArn: string;\n\nn    readonly subdirectory?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationEFSProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocationEFSProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationEFSPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ec2Config', cdk.requiredValidator)(properties.ec2Config));\n    errors.collect(cdk.propertyValidator('ec2Config', CfnLocationEFS_Ec2ConfigPropertyValidator)(properties.ec2Config));\n    errors.collect(cdk.propertyValidator('efsFilesystemArn', cdk.requiredValidator)(properties.efsFilesystemArn));\n    errors.collect(cdk.propertyValidator('efsFilesystemArn', cdk.validateString)(properties.efsFilesystemArn));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLocationEFSProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationEFS` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationEFSProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationEFS` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationEFSPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationEFSPropsValidator(properties).assertSuccess();\n    return {\n        Ec2Config: cfnLocationEFSEc2ConfigPropertyToCloudFormation(properties.ec2Config),\n        EfsFilesystemArn: cdk.stringToCloudFormation(properties.efsFilesystemArn),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationEFSPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationEFSProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationEFSProps>();\n    ret.addPropertyResult('ec2Config', 'Ec2Config', CfnLocationEFSEc2ConfigPropertyFromCloudFormation(properties.Ec2Config));\n    ret.addPropertyResult('efsFilesystemArn', 'EfsFilesystemArn', cfn_parse.FromCloudFormation.getString(properties.EfsFilesystemArn));\n    ret.addPropertyResult('subdirectory', 'Subdirectory', properties.Subdirectory != null ? cfn_parse.FromCloudFormation.getString(properties.Subdirectory) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                           \nexport class CfnLocationEFS extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationEFS\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationEFS {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationEFSPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationEFS(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                \n    public readonly attrLocationArn: string;\n\n                                                                                                         \n    public readonly attrLocationUri: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public ec2Config: CfnLocationEFS.Ec2ConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    public efsFilesystemArn: string;\n\nn    public subdirectory: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationEFSProps) {\n        super(scope, id, { type: CfnLocationEFS.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'ec2Config', this);\n        cdk.requireProperty(props, 'efsFilesystemArn', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.ec2Config = props.ec2Config;\n        this.efsFilesystemArn = props.efsFilesystemArn;\n        this.subdirectory = props.subdirectory;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationEFS\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationEFS.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ec2Config: this.ec2Config,\n            efsFilesystemArn: this.efsFilesystemArn,\n            subdirectory: this.subdirectory,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationEFSPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLocationEFS {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface Ec2ConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly securityGroupArns: string[];\n                                                                                                                                                                                                                                                                                                                                  \n        readonly subnetArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Ec2ConfigProperty`\n *\n * @param properties - the TypeScript properties of a `Ec2ConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationEFS_Ec2ConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupArns', cdk.requiredValidator)(properties.securityGroupArns));\n    errors.collect(cdk.propertyValidator('securityGroupArns', cdk.listValidator(cdk.validateString))(properties.securityGroupArns));\n    errors.collect(cdk.propertyValidator('subnetArn', cdk.requiredValidator)(properties.subnetArn));\n    errors.collect(cdk.propertyValidator('subnetArn', cdk.validateString)(properties.subnetArn));\n    return errors.wrap('supplied properties not correct for \"Ec2ConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationEFS.Ec2Config` resource\n *\n * @param properties - the TypeScript properties of a `Ec2ConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationEFS.Ec2Config` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationEFSEc2ConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationEFS_Ec2ConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupArns),\n        SubnetArn: cdk.stringToCloudFormation(properties.subnetArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationEFSEc2ConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationEFS.Ec2ConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationEFS.Ec2ConfigProperty>();\n    ret.addPropertyResult('securityGroupArns', 'SecurityGroupArns', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupArns));\n    ret.addPropertyResult('subnetArn', 'SubnetArn', cfn_parse.FromCloudFormation.getString(properties.SubnetArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnLocationFSxWindowsProps {\n\n                                                                                                                                                                                                                                                                                       \n    readonly fsxFilesystemArn: string;\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly password: string;\n\nn    readonly securityGroupArns: string[];\n\nn    readonly user: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly domain?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly subdirectory?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationFSxWindowsProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocationFSxWindowsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationFSxWindowsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    errors.collect(cdk.propertyValidator('fsxFilesystemArn', cdk.requiredValidator)(properties.fsxFilesystemArn));\n    errors.collect(cdk.propertyValidator('fsxFilesystemArn', cdk.validateString)(properties.fsxFilesystemArn));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('securityGroupArns', cdk.requiredValidator)(properties.securityGroupArns));\n    errors.collect(cdk.propertyValidator('securityGroupArns', cdk.listValidator(cdk.validateString))(properties.securityGroupArns));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('user', cdk.requiredValidator)(properties.user));\n    errors.collect(cdk.propertyValidator('user', cdk.validateString)(properties.user));\n    return errors.wrap('supplied properties not correct for \"CfnLocationFSxWindowsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationFSxWindows` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationFSxWindowsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationFSxWindows` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationFSxWindowsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationFSxWindowsPropsValidator(properties).assertSuccess();\n    return {\n        FsxFilesystemArn: cdk.stringToCloudFormation(properties.fsxFilesystemArn),\n        Password: cdk.stringToCloudFormation(properties.password),\n        SecurityGroupArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupArns),\n        User: cdk.stringToCloudFormation(properties.user),\n        Domain: cdk.stringToCloudFormation(properties.domain),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationFSxWindowsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationFSxWindowsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationFSxWindowsProps>();\n    ret.addPropertyResult('fsxFilesystemArn', 'FsxFilesystemArn', cfn_parse.FromCloudFormation.getString(properties.FsxFilesystemArn));\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('securityGroupArns', 'SecurityGroupArns', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupArns));\n    ret.addPropertyResult('user', 'User', cfn_parse.FromCloudFormation.getString(properties.User));\n    ret.addPropertyResult('domain', 'Domain', properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : undefined);\n    ret.addPropertyResult('subdirectory', 'Subdirectory', properties.Subdirectory != null ? cfn_parse.FromCloudFormation.getString(properties.Subdirectory) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnLocationFSxWindows extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationFSxWindows\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationFSxWindows {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationFSxWindowsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationFSxWindows(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                      \n    public readonly attrLocationArn: string;\n\n                                                                                                                                      \n    public readonly attrLocationUri: string;\n\n                                                                                                                                                                                                                                                                                       \n    public fsxFilesystemArn: string;\n\n                                                                                                                                                                                                                                                                                                                            \n    public password: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public securityGroupArns: string[];\n\nn    public user: string;\n\n                                                                                                                                                                                                                                                                             \n    public domain: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public subdirectory: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationFSxWindowsProps) {\n        super(scope, id, { type: CfnLocationFSxWindows.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'fsxFilesystemArn', this);\n        cdk.requireProperty(props, 'password', this);\n        cdk.requireProperty(props, 'securityGroupArns', this);\n        cdk.requireProperty(props, 'user', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.fsxFilesystemArn = props.fsxFilesystemArn;\n        this.password = props.password;\n        this.securityGroupArns = props.securityGroupArns;\n        this.user = props.user;\n        this.domain = props.domain;\n        this.subdirectory = props.subdirectory;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationFSxWindows\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationFSxWindows.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            fsxFilesystemArn: this.fsxFilesystemArn,\n            password: this.password,\n            securityGroupArns: this.securityGroupArns,\n            user: this.user,\n            domain: this.domain,\n            subdirectory: this.subdirectory,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationFSxWindowsPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                             \nexport interface CfnLocationHDFSProps {\n\n                                                                                                                                                                                                                                                                                 \n    readonly agentArns: string[];\n\n                                                                                                                                                                                                                                                                    \n    readonly authenticationType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly nameNodes: Array<CfnLocationHDFS.NameNodeProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly blockSize?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly kerberosKeytab?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly kerberosKrb5Conf?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    readonly kerberosPrincipal?: string;\n\n                                                                                                                                                                                                                                                       \n    readonly kmsKeyProviderUri?: string;\n\nn    readonly qopConfiguration?: CfnLocationHDFS.QopConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                  \n    readonly replicationFactor?: number;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly simpleUser?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly subdirectory?: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationHDFSProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocationHDFSProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationHDFSPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('agentArns', cdk.requiredValidator)(properties.agentArns));\n    errors.collect(cdk.propertyValidator('agentArns', cdk.listValidator(cdk.validateString))(properties.agentArns));\n    errors.collect(cdk.propertyValidator('authenticationType', cdk.requiredValidator)(properties.authenticationType));\n    errors.collect(cdk.propertyValidator('authenticationType', cdk.validateString)(properties.authenticationType));\n    errors.collect(cdk.propertyValidator('blockSize', cdk.validateNumber)(properties.blockSize));\n    errors.collect(cdk.propertyValidator('kerberosKeytab', cdk.validateString)(properties.kerberosKeytab));\n    errors.collect(cdk.propertyValidator('kerberosKrb5Conf', cdk.validateString)(properties.kerberosKrb5Conf));\n    errors.collect(cdk.propertyValidator('kerberosPrincipal', cdk.validateString)(properties.kerberosPrincipal));\n    errors.collect(cdk.propertyValidator('kmsKeyProviderUri', cdk.validateString)(properties.kmsKeyProviderUri));\n    errors.collect(cdk.propertyValidator('nameNodes', cdk.requiredValidator)(properties.nameNodes));\n    errors.collect(cdk.propertyValidator('nameNodes', cdk.listValidator(CfnLocationHDFS_NameNodePropertyValidator))(properties.nameNodes));\n    errors.collect(cdk.propertyValidator('qopConfiguration', CfnLocationHDFS_QopConfigurationPropertyValidator)(properties.qopConfiguration));\n    errors.collect(cdk.propertyValidator('replicationFactor', cdk.validateNumber)(properties.replicationFactor));\n    errors.collect(cdk.propertyValidator('simpleUser', cdk.validateString)(properties.simpleUser));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLocationHDFSProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationHDFS` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationHDFSProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationHDFS` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationHDFSPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationHDFSPropsValidator(properties).assertSuccess();\n    return {\n        AgentArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.agentArns),\n        AuthenticationType: cdk.stringToCloudFormation(properties.authenticationType),\n        NameNodes: cdk.listMapper(cfnLocationHDFSNameNodePropertyToCloudFormation)(properties.nameNodes),\n        BlockSize: cdk.numberToCloudFormation(properties.blockSize),\n        KerberosKeytab: cdk.stringToCloudFormation(properties.kerberosKeytab),\n        KerberosKrb5Conf: cdk.stringToCloudFormation(properties.kerberosKrb5Conf),\n        KerberosPrincipal: cdk.stringToCloudFormation(properties.kerberosPrincipal),\n        KmsKeyProviderUri: cdk.stringToCloudFormation(properties.kmsKeyProviderUri),\n        QopConfiguration: cfnLocationHDFSQopConfigurationPropertyToCloudFormation(properties.qopConfiguration),\n        ReplicationFactor: cdk.numberToCloudFormation(properties.replicationFactor),\n        SimpleUser: cdk.stringToCloudFormation(properties.simpleUser),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationHDFSPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationHDFSProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationHDFSProps>();\n    ret.addPropertyResult('agentArns', 'AgentArns', cfn_parse.FromCloudFormation.getStringArray(properties.AgentArns));\n    ret.addPropertyResult('authenticationType', 'AuthenticationType', cfn_parse.FromCloudFormation.getString(properties.AuthenticationType));\n    ret.addPropertyResult('nameNodes', 'NameNodes', cfn_parse.FromCloudFormation.getArray(CfnLocationHDFSNameNodePropertyFromCloudFormation)(properties.NameNodes));\n    ret.addPropertyResult('blockSize', 'BlockSize', properties.BlockSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlockSize) : undefined);\n    ret.addPropertyResult('kerberosKeytab', 'KerberosKeytab', properties.KerberosKeytab != null ? cfn_parse.FromCloudFormation.getString(properties.KerberosKeytab) : undefined);\n    ret.addPropertyResult('kerberosKrb5Conf', 'KerberosKrb5Conf', properties.KerberosKrb5Conf != null ? cfn_parse.FromCloudFormation.getString(properties.KerberosKrb5Conf) : undefined);\n    ret.addPropertyResult('kerberosPrincipal', 'KerberosPrincipal', properties.KerberosPrincipal != null ? cfn_parse.FromCloudFormation.getString(properties.KerberosPrincipal) : undefined);\n    ret.addPropertyResult('kmsKeyProviderUri', 'KmsKeyProviderUri', properties.KmsKeyProviderUri != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyProviderUri) : undefined);\n    ret.addPropertyResult('qopConfiguration', 'QopConfiguration', properties.QopConfiguration != null ? CfnLocationHDFSQopConfigurationPropertyFromCloudFormation(properties.QopConfiguration) : undefined);\n    ret.addPropertyResult('replicationFactor', 'ReplicationFactor', properties.ReplicationFactor != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReplicationFactor) : undefined);\n    ret.addPropertyResult('simpleUser', 'SimpleUser', properties.SimpleUser != null ? cfn_parse.FromCloudFormation.getString(properties.SimpleUser) : undefined);\n    ret.addPropertyResult('subdirectory', 'Subdirectory', properties.Subdirectory != null ? cfn_parse.FromCloudFormation.getString(properties.Subdirectory) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                   \nexport class CfnLocationHDFS extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationHDFS\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationHDFS {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationHDFSPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationHDFS(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                           \n    public readonly attrLocationArn: string;\n\n                                                                                                        \n    public readonly attrLocationUri: string;\n\n                                                                                                                                                                                                                                                                                 \n    public agentArns: string[];\n\n                                                                                                                                                                                                                                                                    \n    public authenticationType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public nameNodes: Array<CfnLocationHDFS.NameNodeProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public blockSize: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public kerberosKeytab: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public kerberosKrb5Conf: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    public kerberosPrincipal: string | undefined;\n\n                                                                                                                                                                                                                                                       \n    public kmsKeyProviderUri: string | undefined;\n\nn    public qopConfiguration: CfnLocationHDFS.QopConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                  \n    public replicationFactor: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public simpleUser: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public subdirectory: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationHDFSProps) {\n        super(scope, id, { type: CfnLocationHDFS.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'agentArns', this);\n        cdk.requireProperty(props, 'authenticationType', this);\n        cdk.requireProperty(props, 'nameNodes', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.agentArns = props.agentArns;\n        this.authenticationType = props.authenticationType;\n        this.nameNodes = props.nameNodes;\n        this.blockSize = props.blockSize;\n        this.kerberosKeytab = props.kerberosKeytab;\n        this.kerberosKrb5Conf = props.kerberosKrb5Conf;\n        this.kerberosPrincipal = props.kerberosPrincipal;\n        this.kmsKeyProviderUri = props.kmsKeyProviderUri;\n        this.qopConfiguration = props.qopConfiguration;\n        this.replicationFactor = props.replicationFactor;\n        this.simpleUser = props.simpleUser;\n        this.subdirectory = props.subdirectory;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationHDFS\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationHDFS.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            agentArns: this.agentArns,\n            authenticationType: this.authenticationType,\n            nameNodes: this.nameNodes,\n            blockSize: this.blockSize,\n            kerberosKeytab: this.kerberosKeytab,\n            kerberosKrb5Conf: this.kerberosKrb5Conf,\n            kerberosPrincipal: this.kerberosPrincipal,\n            kmsKeyProviderUri: this.kmsKeyProviderUri,\n            qopConfiguration: this.qopConfiguration,\n            replicationFactor: this.replicationFactor,\n            simpleUser: this.simpleUser,\n            subdirectory: this.subdirectory,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationHDFSPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLocationHDFS {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface NameNodeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly hostname: string;\n                                                                                                                                                                                                                                                                                     \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NameNodeProperty`\n *\n * @param properties - the TypeScript properties of a `NameNodeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationHDFS_NameNodePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hostname', cdk.requiredValidator)(properties.hostname));\n    errors.collect(cdk.propertyValidator('hostname', cdk.validateString)(properties.hostname));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"NameNodeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationHDFS.NameNode` resource\n *\n * @param properties - the TypeScript properties of a `NameNodeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationHDFS.NameNode` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationHDFSNameNodePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationHDFS_NameNodePropertyValidator(properties).assertSuccess();\n    return {\n        Hostname: cdk.stringToCloudFormation(properties.hostname),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationHDFSNameNodePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationHDFS.NameNodeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationHDFS.NameNodeProperty>();\n    ret.addPropertyResult('hostname', 'Hostname', cfn_parse.FromCloudFormation.getString(properties.Hostname));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLocationHDFS {\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface QopConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly dataTransferProtection?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly rpcProtection?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QopConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `QopConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationHDFS_QopConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataTransferProtection', cdk.validateString)(properties.dataTransferProtection));\n    errors.collect(cdk.propertyValidator('rpcProtection', cdk.validateString)(properties.rpcProtection));\n    return errors.wrap('supplied properties not correct for \"QopConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationHDFS.QopConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `QopConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationHDFS.QopConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationHDFSQopConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationHDFS_QopConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DataTransferProtection: cdk.stringToCloudFormation(properties.dataTransferProtection),\n        RpcProtection: cdk.stringToCloudFormation(properties.rpcProtection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationHDFSQopConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationHDFS.QopConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationHDFS.QopConfigurationProperty>();\n    ret.addPropertyResult('dataTransferProtection', 'DataTransferProtection', properties.DataTransferProtection != null ? cfn_parse.FromCloudFormation.getString(properties.DataTransferProtection) : undefined);\n    ret.addPropertyResult('rpcProtection', 'RpcProtection', properties.RpcProtection != null ? cfn_parse.FromCloudFormation.getString(properties.RpcProtection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                           \nexport interface CfnLocationNFSProps {\n\nn    readonly onPremConfig: CfnLocationNFS.OnPremConfigProperty | cdk.IResolvable;\n\nn    readonly serverHostname: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly subdirectory: string;\n\n                                                                                                                                                                                                                                                          \n    readonly mountOptions?: CfnLocationNFS.MountOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationNFSProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocationNFSProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationNFSPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mountOptions', CfnLocationNFS_MountOptionsPropertyValidator)(properties.mountOptions));\n    errors.collect(cdk.propertyValidator('onPremConfig', cdk.requiredValidator)(properties.onPremConfig));\n    errors.collect(cdk.propertyValidator('onPremConfig', CfnLocationNFS_OnPremConfigPropertyValidator)(properties.onPremConfig));\n    errors.collect(cdk.propertyValidator('serverHostname', cdk.requiredValidator)(properties.serverHostname));\n    errors.collect(cdk.propertyValidator('serverHostname', cdk.validateString)(properties.serverHostname));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.requiredValidator)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLocationNFSProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationNFS` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationNFSProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationNFS` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationNFSPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationNFSPropsValidator(properties).assertSuccess();\n    return {\n        OnPremConfig: cfnLocationNFSOnPremConfigPropertyToCloudFormation(properties.onPremConfig),\n        ServerHostname: cdk.stringToCloudFormation(properties.serverHostname),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        MountOptions: cfnLocationNFSMountOptionsPropertyToCloudFormation(properties.mountOptions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationNFSPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationNFSProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationNFSProps>();\n    ret.addPropertyResult('onPremConfig', 'OnPremConfig', CfnLocationNFSOnPremConfigPropertyFromCloudFormation(properties.OnPremConfig));\n    ret.addPropertyResult('serverHostname', 'ServerHostname', cfn_parse.FromCloudFormation.getString(properties.ServerHostname));\n    ret.addPropertyResult('subdirectory', 'Subdirectory', cfn_parse.FromCloudFormation.getString(properties.Subdirectory));\n    ret.addPropertyResult('mountOptions', 'MountOptions', properties.MountOptions != null ? CfnLocationNFSMountOptionsPropertyFromCloudFormation(properties.MountOptions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnLocationNFS extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationNFS\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationNFS {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationNFSPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationNFS(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                   \n    public readonly attrLocationArn: string;\n\n                                                                                                                \n    public readonly attrLocationUri: string;\n\nn    public onPremConfig: CfnLocationNFS.OnPremConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public serverHostname: string;\n\nn    public subdirectory: string;\n\n                                                                                                                                                                                                                                                          \n    public mountOptions: CfnLocationNFS.MountOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationNFSProps) {\n        super(scope, id, { type: CfnLocationNFS.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'onPremConfig', this);\n        cdk.requireProperty(props, 'serverHostname', this);\n        cdk.requireProperty(props, 'subdirectory', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.onPremConfig = props.onPremConfig;\n        this.serverHostname = props.serverHostname;\n        this.subdirectory = props.subdirectory;\n        this.mountOptions = props.mountOptions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationNFS\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationNFS.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            onPremConfig: this.onPremConfig,\n            serverHostname: this.serverHostname,\n            subdirectory: this.subdirectory,\n            mountOptions: this.mountOptions,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationNFSPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLocationNFS {\n                                                                                                                                                                                                                                                                                    \n    export interface MountOptionsProperty {\nn        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MountOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `MountOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationNFS_MountOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"MountOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationNFS.MountOptions` resource\n *\n * @param properties - the TypeScript properties of a `MountOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationNFS.MountOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationNFSMountOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationNFS_MountOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationNFSMountOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationNFS.MountOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationNFS.MountOptionsProperty>();\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLocationNFS {\n                                                                                                                                                                                                                                                                                                                 \n    export interface OnPremConfigProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly agentArns: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnPremConfigProperty`\n *\n * @param properties - the TypeScript properties of a `OnPremConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationNFS_OnPremConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('agentArns', cdk.requiredValidator)(properties.agentArns));\n    errors.collect(cdk.propertyValidator('agentArns', cdk.listValidator(cdk.validateString))(properties.agentArns));\n    return errors.wrap('supplied properties not correct for \"OnPremConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationNFS.OnPremConfig` resource\n *\n * @param properties - the TypeScript properties of a `OnPremConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationNFS.OnPremConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationNFSOnPremConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationNFS_OnPremConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AgentArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.agentArns),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationNFSOnPremConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationNFS.OnPremConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationNFS.OnPremConfigProperty>();\n    ret.addPropertyResult('agentArns', 'AgentArns', cfn_parse.FromCloudFormation.getStringArray(properties.AgentArns));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnLocationObjectStorageProps {\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly agentArns: string[];\n\n                                                                                                                                                                                                                                                                                            \n    readonly bucketName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly serverHostname: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly accessKey?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly secretKey?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly serverPort?: number;\n\n                                                                                                                                                                                                                                                                                                            \n    readonly serverProtocol?: string;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly subdirectory?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationObjectStorageProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocationObjectStorageProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationObjectStoragePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessKey', cdk.validateString)(properties.accessKey));\n    errors.collect(cdk.propertyValidator('agentArns', cdk.requiredValidator)(properties.agentArns));\n    errors.collect(cdk.propertyValidator('agentArns', cdk.listValidator(cdk.validateString))(properties.agentArns));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('secretKey', cdk.validateString)(properties.secretKey));\n    errors.collect(cdk.propertyValidator('serverHostname', cdk.requiredValidator)(properties.serverHostname));\n    errors.collect(cdk.propertyValidator('serverHostname', cdk.validateString)(properties.serverHostname));\n    errors.collect(cdk.propertyValidator('serverPort', cdk.validateNumber)(properties.serverPort));\n    errors.collect(cdk.propertyValidator('serverProtocol', cdk.validateString)(properties.serverProtocol));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLocationObjectStorageProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationObjectStorage` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationObjectStorageProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationObjectStorage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationObjectStoragePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationObjectStoragePropsValidator(properties).assertSuccess();\n    return {\n        AgentArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.agentArns),\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        ServerHostname: cdk.stringToCloudFormation(properties.serverHostname),\n        AccessKey: cdk.stringToCloudFormation(properties.accessKey),\n        SecretKey: cdk.stringToCloudFormation(properties.secretKey),\n        ServerPort: cdk.numberToCloudFormation(properties.serverPort),\n        ServerProtocol: cdk.stringToCloudFormation(properties.serverProtocol),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationObjectStoragePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationObjectStorageProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationObjectStorageProps>();\n    ret.addPropertyResult('agentArns', 'AgentArns', cfn_parse.FromCloudFormation.getStringArray(properties.AgentArns));\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('serverHostname', 'ServerHostname', cfn_parse.FromCloudFormation.getString(properties.ServerHostname));\n    ret.addPropertyResult('accessKey', 'AccessKey', properties.AccessKey != null ? cfn_parse.FromCloudFormation.getString(properties.AccessKey) : undefined);\n    ret.addPropertyResult('secretKey', 'SecretKey', properties.SecretKey != null ? cfn_parse.FromCloudFormation.getString(properties.SecretKey) : undefined);\n    ret.addPropertyResult('serverPort', 'ServerPort', properties.ServerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ServerPort) : undefined);\n    ret.addPropertyResult('serverProtocol', 'ServerProtocol', properties.ServerProtocol != null ? cfn_parse.FromCloudFormation.getString(properties.ServerProtocol) : undefined);\n    ret.addPropertyResult('subdirectory', 'Subdirectory', properties.Subdirectory != null ? cfn_parse.FromCloudFormation.getString(properties.Subdirectory) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnLocationObjectStorage extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationObjectStorage\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationObjectStorage {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationObjectStoragePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationObjectStorage(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                           \n    public readonly attrLocationArn: string;\n\n                                                                                                                    \n    public readonly attrLocationUri: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    public agentArns: string[];\n\n                                                                                                                                                                                                                                                                                            \n    public bucketName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public serverHostname: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public accessKey: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public secretKey: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public serverPort: number | undefined;\n\n                                                                                                                                                                                                                                                                                                            \n    public serverProtocol: string | undefined;\n\n                                                                                                                                                                                                                                                                                                    \n    public subdirectory: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationObjectStorageProps) {\n        super(scope, id, { type: CfnLocationObjectStorage.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'agentArns', this);\n        cdk.requireProperty(props, 'bucketName', this);\n        cdk.requireProperty(props, 'serverHostname', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.agentArns = props.agentArns;\n        this.bucketName = props.bucketName;\n        this.serverHostname = props.serverHostname;\n        this.accessKey = props.accessKey;\n        this.secretKey = props.secretKey;\n        this.serverPort = props.serverPort;\n        this.serverProtocol = props.serverProtocol;\n        this.subdirectory = props.subdirectory;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationObjectStorage\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationObjectStorage.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            agentArns: this.agentArns,\n            bucketName: this.bucketName,\n            serverHostname: this.serverHostname,\n            accessKey: this.accessKey,\n            secretKey: this.secretKey,\n            serverPort: this.serverPort,\n            serverProtocol: this.serverProtocol,\n            subdirectory: this.subdirectory,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationObjectStoragePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                         \nexport interface CfnLocationS3Props {\n\n                                                                                                                                                                                                                   \n    readonly s3BucketArn: string;\n\nn    readonly s3Config: CfnLocationS3.S3ConfigProperty | cdk.IResolvable;\n\nn    readonly s3StorageClass?: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly subdirectory?: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationS3Props`\n *\n * @param properties - the TypeScript properties of a `CfnLocationS3Props`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationS3PropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3BucketArn', cdk.requiredValidator)(properties.s3BucketArn));\n    errors.collect(cdk.propertyValidator('s3BucketArn', cdk.validateString)(properties.s3BucketArn));\n    errors.collect(cdk.propertyValidator('s3Config', cdk.requiredValidator)(properties.s3Config));\n    errors.collect(cdk.propertyValidator('s3Config', CfnLocationS3_S3ConfigPropertyValidator)(properties.s3Config));\n    errors.collect(cdk.propertyValidator('s3StorageClass', cdk.validateString)(properties.s3StorageClass));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLocationS3Props\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationS3` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationS3Props`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationS3` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationS3PropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationS3PropsValidator(properties).assertSuccess();\n    return {\n        S3BucketArn: cdk.stringToCloudFormation(properties.s3BucketArn),\n        S3Config: cfnLocationS3S3ConfigPropertyToCloudFormation(properties.s3Config),\n        S3StorageClass: cdk.stringToCloudFormation(properties.s3StorageClass),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationS3PropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationS3Props> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationS3Props>();\n    ret.addPropertyResult('s3BucketArn', 'S3BucketArn', cfn_parse.FromCloudFormation.getString(properties.S3BucketArn));\n    ret.addPropertyResult('s3Config', 'S3Config', CfnLocationS3S3ConfigPropertyFromCloudFormation(properties.S3Config));\n    ret.addPropertyResult('s3StorageClass', 'S3StorageClass', properties.S3StorageClass != null ? cfn_parse.FromCloudFormation.getString(properties.S3StorageClass) : undefined);\n    ret.addPropertyResult('subdirectory', 'Subdirectory', properties.Subdirectory != null ? cfn_parse.FromCloudFormation.getString(properties.Subdirectory) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnLocationS3 extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationS3\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationS3 {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationS3PropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationS3(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                      \n    public readonly attrLocationArn: string;\n\n                                                                                                               \n    public readonly attrLocationUri: string;\n\n                                                                                                                                                                                                                   \n    public s3BucketArn: string;\n\nn    public s3Config: CfnLocationS3.S3ConfigProperty | cdk.IResolvable;\n\nn    public s3StorageClass: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public subdirectory: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationS3Props) {\n        super(scope, id, { type: CfnLocationS3.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 's3BucketArn', this);\n        cdk.requireProperty(props, 's3Config', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.s3BucketArn = props.s3BucketArn;\n        this.s3Config = props.s3Config;\n        this.s3StorageClass = props.s3StorageClass;\n        this.subdirectory = props.subdirectory;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationS3\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationS3.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            s3BucketArn: this.s3BucketArn,\n            s3Config: this.s3Config,\n            s3StorageClass: this.s3StorageClass,\n            subdirectory: this.subdirectory,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationS3PropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLocationS3 {\nn    export interface S3ConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly bucketAccessRoleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ConfigProperty`\n *\n * @param properties - the TypeScript properties of a `S3ConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationS3_S3ConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketAccessRoleArn', cdk.requiredValidator)(properties.bucketAccessRoleArn));\n    errors.collect(cdk.propertyValidator('bucketAccessRoleArn', cdk.validateString)(properties.bucketAccessRoleArn));\n    return errors.wrap('supplied properties not correct for \"S3ConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationS3.S3Config` resource\n *\n * @param properties - the TypeScript properties of a `S3ConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationS3.S3Config` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationS3S3ConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationS3_S3ConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BucketAccessRoleArn: cdk.stringToCloudFormation(properties.bucketAccessRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationS3S3ConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationS3.S3ConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationS3.S3ConfigProperty>();\n    ret.addPropertyResult('bucketAccessRoleArn', 'BucketAccessRoleArn', cfn_parse.FromCloudFormation.getString(properties.BucketAccessRoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                           \nexport interface CfnLocationSMBProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly agentArns: string[];\n\n                                                                                                                                                                                                                                                                                                        \n    readonly password: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly serverHostname: string;\n\nn    readonly subdirectory: string;\n\nn    readonly user: string;\n\n                                                                                                                                                                                                                                              \n    readonly domain?: string;\n\n                                                                                                                                                                                                                                                  \n    readonly mountOptions?: CfnLocationSMB.MountOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocationSMBProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocationSMBProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationSMBPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('agentArns', cdk.requiredValidator)(properties.agentArns));\n    errors.collect(cdk.propertyValidator('agentArns', cdk.listValidator(cdk.validateString))(properties.agentArns));\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    errors.collect(cdk.propertyValidator('mountOptions', CfnLocationSMB_MountOptionsPropertyValidator)(properties.mountOptions));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('serverHostname', cdk.requiredValidator)(properties.serverHostname));\n    errors.collect(cdk.propertyValidator('serverHostname', cdk.validateString)(properties.serverHostname));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.requiredValidator)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('subdirectory', cdk.validateString)(properties.subdirectory));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('user', cdk.requiredValidator)(properties.user));\n    errors.collect(cdk.propertyValidator('user', cdk.validateString)(properties.user));\n    return errors.wrap('supplied properties not correct for \"CfnLocationSMBProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationSMB` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocationSMBProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationSMB` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationSMBPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationSMBPropsValidator(properties).assertSuccess();\n    return {\n        AgentArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.agentArns),\n        Password: cdk.stringToCloudFormation(properties.password),\n        ServerHostname: cdk.stringToCloudFormation(properties.serverHostname),\n        Subdirectory: cdk.stringToCloudFormation(properties.subdirectory),\n        User: cdk.stringToCloudFormation(properties.user),\n        Domain: cdk.stringToCloudFormation(properties.domain),\n        MountOptions: cfnLocationSMBMountOptionsPropertyToCloudFormation(properties.mountOptions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationSMBPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationSMBProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationSMBProps>();\n    ret.addPropertyResult('agentArns', 'AgentArns', cfn_parse.FromCloudFormation.getStringArray(properties.AgentArns));\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('serverHostname', 'ServerHostname', cfn_parse.FromCloudFormation.getString(properties.ServerHostname));\n    ret.addPropertyResult('subdirectory', 'Subdirectory', cfn_parse.FromCloudFormation.getString(properties.Subdirectory));\n    ret.addPropertyResult('user', 'User', cfn_parse.FromCloudFormation.getString(properties.User));\n    ret.addPropertyResult('domain', 'Domain', properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : undefined);\n    ret.addPropertyResult('mountOptions', 'MountOptions', properties.MountOptions != null ? CfnLocationSMBMountOptionsPropertyFromCloudFormation(properties.MountOptions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnLocationSMB extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::LocationSMB\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocationSMB {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocationSMBPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocationSMB(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                   \n    public readonly attrLocationArn: string;\n\n                                                                                                         \n    public readonly attrLocationUri: string;\n\n                                                                                                                                                                                                                                                                               \n    public agentArns: string[];\n\n                                                                                                                                                                                                                                                                                                        \n    public password: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public serverHostname: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public subdirectory: string;\n\nn    public user: string;\n\n                                                                                                                                                                                                                                              \n    public domain: string | undefined;\n\n                                                                                                                                                                                                                                                  \n    public mountOptions: CfnLocationSMB.MountOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnLocationSMBProps) {\n        super(scope, id, { type: CfnLocationSMB.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'agentArns', this);\n        cdk.requireProperty(props, 'password', this);\n        cdk.requireProperty(props, 'serverHostname', this);\n        cdk.requireProperty(props, 'subdirectory', this);\n        cdk.requireProperty(props, 'user', this);\n        this.attrLocationArn = cdk.Token.asString(this.getAtt('LocationArn'));\n        this.attrLocationUri = cdk.Token.asString(this.getAtt('LocationUri'));\n\n        this.agentArns = props.agentArns;\n        this.password = props.password;\n        this.serverHostname = props.serverHostname;\n        this.subdirectory = props.subdirectory;\n        this.user = props.user;\n        this.domain = props.domain;\n        this.mountOptions = props.mountOptions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::LocationSMB\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocationSMB.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            agentArns: this.agentArns,\n            password: this.password,\n            serverHostname: this.serverHostname,\n            subdirectory: this.subdirectory,\n            user: this.user,\n            domain: this.domain,\n            mountOptions: this.mountOptions,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocationSMBPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLocationSMB {\n                                                                                                                                                                                                                                                                            \n    export interface MountOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MountOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `MountOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocationSMB_MountOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"MountOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::LocationSMB.MountOptions` resource\n *\n * @param properties - the TypeScript properties of a `MountOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::LocationSMB.MountOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocationSMBMountOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocationSMB_MountOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocationSMBMountOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocationSMB.MountOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocationSMB.MountOptionsProperty>();\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                             \nexport interface CfnTaskProps {\n\n                                                                                                                                                                                                                                                       \n    readonly destinationLocationArn: string;\n\n                                                                                                                                                                                                                                                \n    readonly sourceLocationArn: string;\n\nn    readonly cloudWatchLogGroupArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly excludes?: Array<CfnTask.FilterRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly includes?: Array<CfnTask.FilterRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                    \n    readonly name?: string;\n\nn    readonly options?: CfnTask.OptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly schedule?: CfnTask.TaskScheduleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTaskProps`\n *\n * @param properties - the TypeScript properties of a `CfnTaskProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogGroupArn', cdk.validateString)(properties.cloudWatchLogGroupArn));\n    errors.collect(cdk.propertyValidator('destinationLocationArn', cdk.requiredValidator)(properties.destinationLocationArn));\n    errors.collect(cdk.propertyValidator('destinationLocationArn', cdk.validateString)(properties.destinationLocationArn));\n    errors.collect(cdk.propertyValidator('excludes', cdk.listValidator(CfnTask_FilterRulePropertyValidator))(properties.excludes));\n    errors.collect(cdk.propertyValidator('includes', cdk.listValidator(CfnTask_FilterRulePropertyValidator))(properties.includes));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('options', CfnTask_OptionsPropertyValidator)(properties.options));\n    errors.collect(cdk.propertyValidator('schedule', CfnTask_TaskSchedulePropertyValidator)(properties.schedule));\n    errors.collect(cdk.propertyValidator('sourceLocationArn', cdk.requiredValidator)(properties.sourceLocationArn));\n    errors.collect(cdk.propertyValidator('sourceLocationArn', cdk.validateString)(properties.sourceLocationArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnTaskProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::Task` resource\n *\n * @param properties - the TypeScript properties of a `CfnTaskProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::Task` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskPropsValidator(properties).assertSuccess();\n    return {\n        DestinationLocationArn: cdk.stringToCloudFormation(properties.destinationLocationArn),\n        SourceLocationArn: cdk.stringToCloudFormation(properties.sourceLocationArn),\n        CloudWatchLogGroupArn: cdk.stringToCloudFormation(properties.cloudWatchLogGroupArn),\n        Excludes: cdk.listMapper(cfnTaskFilterRulePropertyToCloudFormation)(properties.excludes),\n        Includes: cdk.listMapper(cfnTaskFilterRulePropertyToCloudFormation)(properties.includes),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Options: cfnTaskOptionsPropertyToCloudFormation(properties.options),\n        Schedule: cfnTaskTaskSchedulePropertyToCloudFormation(properties.schedule),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskProps>();\n    ret.addPropertyResult('destinationLocationArn', 'DestinationLocationArn', cfn_parse.FromCloudFormation.getString(properties.DestinationLocationArn));\n    ret.addPropertyResult('sourceLocationArn', 'SourceLocationArn', cfn_parse.FromCloudFormation.getString(properties.SourceLocationArn));\n    ret.addPropertyResult('cloudWatchLogGroupArn', 'CloudWatchLogGroupArn', properties.CloudWatchLogGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchLogGroupArn) : undefined);\n    ret.addPropertyResult('excludes', 'Excludes', properties.Excludes != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskFilterRulePropertyFromCloudFormation)(properties.Excludes) : undefined);\n    ret.addPropertyResult('includes', 'Includes', properties.Includes != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskFilterRulePropertyFromCloudFormation)(properties.Includes) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('options', 'Options', properties.Options != null ? CfnTaskOptionsPropertyFromCloudFormation(properties.Options) : undefined);\n    ret.addPropertyResult('schedule', 'Schedule', properties.Schedule != null ? CfnTaskTaskSchedulePropertyFromCloudFormation(properties.Schedule) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnTask extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DataSync::Task\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTask {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTaskPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTask(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                      \n    public readonly attrDestinationNetworkInterfaceArns: string[];\n\n                                                                                                                                                                                            \n    public readonly attrErrorCode: string;\n\n                                                                                                                                                                                                             \n    public readonly attrErrorDetail: string;\n\n                                                                                 \n    public readonly attrSourceNetworkInterfaceArns: string[];\n\n                                                                                                        \n    public readonly attrStatus: string;\n\n                                                                                                          \n    public readonly attrTaskArn: string;\n\n                                                                                                                                                                                                                                                       \n    public destinationLocationArn: string;\n\n                                                                                                                                                                                                                                                \n    public sourceLocationArn: string;\n\nn    public cloudWatchLogGroupArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public excludes: Array<CfnTask.FilterRuleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public includes: Array<CfnTask.FilterRuleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public name: string | undefined;\n\nn    public options: CfnTask.OptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public schedule: CfnTask.TaskScheduleProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnTaskProps) {\n        super(scope, id, { type: CfnTask.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'destinationLocationArn', this);\n        cdk.requireProperty(props, 'sourceLocationArn', this);\n        this.attrDestinationNetworkInterfaceArns = cdk.Token.asList(this.getAtt('DestinationNetworkInterfaceArns'));\n        this.attrErrorCode = cdk.Token.asString(this.getAtt('ErrorCode'));\n        this.attrErrorDetail = cdk.Token.asString(this.getAtt('ErrorDetail'));\n        this.attrSourceNetworkInterfaceArns = cdk.Token.asList(this.getAtt('SourceNetworkInterfaceArns'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrTaskArn = cdk.Token.asString(this.getAtt('TaskArn'));\n\n        this.destinationLocationArn = props.destinationLocationArn;\n        this.sourceLocationArn = props.sourceLocationArn;\n        this.cloudWatchLogGroupArn = props.cloudWatchLogGroupArn;\n        this.excludes = props.excludes;\n        this.includes = props.includes;\n        this.name = props.name;\n        this.options = props.options;\n        this.schedule = props.schedule;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DataSync::Task\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTask.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinationLocationArn: this.destinationLocationArn,\n            sourceLocationArn: this.sourceLocationArn,\n            cloudWatchLogGroupArn: this.cloudWatchLogGroupArn,\n            excludes: this.excludes,\n            includes: this.includes,\n            name: this.name,\n            options: this.options,\n            schedule: this.schedule,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTaskPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTask {\n                                                                                                                                                                                                                                                                                                                            \n    export interface FilterRuleProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly filterType?: string;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FilterRuleProperty`\n *\n * @param properties - the TypeScript properties of a `FilterRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTask_FilterRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('filterType', cdk.validateString)(properties.filterType));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"FilterRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::Task.FilterRule` resource\n *\n * @param properties - the TypeScript properties of a `FilterRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::Task.FilterRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskFilterRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTask_FilterRulePropertyValidator(properties).assertSuccess();\n    return {\n        FilterType: cdk.stringToCloudFormation(properties.filterType),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskFilterRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTask.FilterRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTask.FilterRuleProperty>();\n    ret.addPropertyResult('filterType', 'FilterType', properties.FilterType != null ? cfn_parse.FromCloudFormation.getString(properties.FilterType) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTask {\nn    export interface OptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly atime?: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly bytesPerSecond?: number;\nn        readonly gid?: string;\nn        readonly logLevel?: string;\nn        readonly mtime?: string;\nn        readonly overwriteMode?: string;\nn        readonly posixPermissions?: string;\nn        readonly preserveDeletedFiles?: string;\nn        readonly preserveDevices?: string;\nn        readonly securityDescriptorCopyFlags?: string;\nn        readonly taskQueueing?: string;\nn        readonly transferMode?: string;\nn        readonly uid?: string;\nn        readonly verifyMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OptionsProperty`\n *\n * @param properties - the TypeScript properties of a `OptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTask_OptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('atime', cdk.validateString)(properties.atime));\n    errors.collect(cdk.propertyValidator('bytesPerSecond', cdk.validateNumber)(properties.bytesPerSecond));\n    errors.collect(cdk.propertyValidator('gid', cdk.validateString)(properties.gid));\n    errors.collect(cdk.propertyValidator('logLevel', cdk.validateString)(properties.logLevel));\n    errors.collect(cdk.propertyValidator('mtime', cdk.validateString)(properties.mtime));\n    errors.collect(cdk.propertyValidator('overwriteMode', cdk.validateString)(properties.overwriteMode));\n    errors.collect(cdk.propertyValidator('posixPermissions', cdk.validateString)(properties.posixPermissions));\n    errors.collect(cdk.propertyValidator('preserveDeletedFiles', cdk.validateString)(properties.preserveDeletedFiles));\n    errors.collect(cdk.propertyValidator('preserveDevices', cdk.validateString)(properties.preserveDevices));\n    errors.collect(cdk.propertyValidator('securityDescriptorCopyFlags', cdk.validateString)(properties.securityDescriptorCopyFlags));\n    errors.collect(cdk.propertyValidator('taskQueueing', cdk.validateString)(properties.taskQueueing));\n    errors.collect(cdk.propertyValidator('transferMode', cdk.validateString)(properties.transferMode));\n    errors.collect(cdk.propertyValidator('uid', cdk.validateString)(properties.uid));\n    errors.collect(cdk.propertyValidator('verifyMode', cdk.validateString)(properties.verifyMode));\n    return errors.wrap('supplied properties not correct for \"OptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::Task.Options` resource\n *\n * @param properties - the TypeScript properties of a `OptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::Task.Options` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTask_OptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Atime: cdk.stringToCloudFormation(properties.atime),\n        BytesPerSecond: cdk.numberToCloudFormation(properties.bytesPerSecond),\n        Gid: cdk.stringToCloudFormation(properties.gid),\n        LogLevel: cdk.stringToCloudFormation(properties.logLevel),\n        Mtime: cdk.stringToCloudFormation(properties.mtime),\n        OverwriteMode: cdk.stringToCloudFormation(properties.overwriteMode),\n        PosixPermissions: cdk.stringToCloudFormation(properties.posixPermissions),\n        PreserveDeletedFiles: cdk.stringToCloudFormation(properties.preserveDeletedFiles),\n        PreserveDevices: cdk.stringToCloudFormation(properties.preserveDevices),\n        SecurityDescriptorCopyFlags: cdk.stringToCloudFormation(properties.securityDescriptorCopyFlags),\n        TaskQueueing: cdk.stringToCloudFormation(properties.taskQueueing),\n        TransferMode: cdk.stringToCloudFormation(properties.transferMode),\n        Uid: cdk.stringToCloudFormation(properties.uid),\n        VerifyMode: cdk.stringToCloudFormation(properties.verifyMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTask.OptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTask.OptionsProperty>();\n    ret.addPropertyResult('atime', 'Atime', properties.Atime != null ? cfn_parse.FromCloudFormation.getString(properties.Atime) : undefined);\n    ret.addPropertyResult('bytesPerSecond', 'BytesPerSecond', properties.BytesPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.BytesPerSecond) : undefined);\n    ret.addPropertyResult('gid', 'Gid', properties.Gid != null ? cfn_parse.FromCloudFormation.getString(properties.Gid) : undefined);\n    ret.addPropertyResult('logLevel', 'LogLevel', properties.LogLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LogLevel) : undefined);\n    ret.addPropertyResult('mtime', 'Mtime', properties.Mtime != null ? cfn_parse.FromCloudFormation.getString(properties.Mtime) : undefined);\n    ret.addPropertyResult('overwriteMode', 'OverwriteMode', properties.OverwriteMode != null ? cfn_parse.FromCloudFormation.getString(properties.OverwriteMode) : undefined);\n    ret.addPropertyResult('posixPermissions', 'PosixPermissions', properties.PosixPermissions != null ? cfn_parse.FromCloudFormation.getString(properties.PosixPermissions) : undefined);\n    ret.addPropertyResult('preserveDeletedFiles', 'PreserveDeletedFiles', properties.PreserveDeletedFiles != null ? cfn_parse.FromCloudFormation.getString(properties.PreserveDeletedFiles) : undefined);\n    ret.addPropertyResult('preserveDevices', 'PreserveDevices', properties.PreserveDevices != null ? cfn_parse.FromCloudFormation.getString(properties.PreserveDevices) : undefined);\n    ret.addPropertyResult('securityDescriptorCopyFlags', 'SecurityDescriptorCopyFlags', properties.SecurityDescriptorCopyFlags != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityDescriptorCopyFlags) : undefined);\n    ret.addPropertyResult('taskQueueing', 'TaskQueueing', properties.TaskQueueing != null ? cfn_parse.FromCloudFormation.getString(properties.TaskQueueing) : undefined);\n    ret.addPropertyResult('transferMode', 'TransferMode', properties.TransferMode != null ? cfn_parse.FromCloudFormation.getString(properties.TransferMode) : undefined);\n    ret.addPropertyResult('uid', 'Uid', properties.Uid != null ? cfn_parse.FromCloudFormation.getString(properties.Uid) : undefined);\n    ret.addPropertyResult('verifyMode', 'VerifyMode', properties.VerifyMode != null ? cfn_parse.FromCloudFormation.getString(properties.VerifyMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTask {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface TaskScheduleProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly scheduleExpression: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TaskScheduleProperty`\n *\n * @param properties - the TypeScript properties of a `TaskScheduleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTask_TaskSchedulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.requiredValidator)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    return errors.wrap('supplied properties not correct for \"TaskScheduleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DataSync::Task.TaskSchedule` resource\n *\n * @param properties - the TypeScript properties of a `TaskScheduleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DataSync::Task.TaskSchedule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskTaskSchedulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTask_TaskSchedulePropertyValidator(properties).assertSuccess();\n    return {\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskTaskSchedulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTask.TaskScheduleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTask.TaskScheduleProperty>();\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "yaAQA,IAAA,QAAA,cACA,UAAA,QAAA,4BA+BA,gCAAgC,WAAe,CAC3C,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,gBAAiB,IAAI,mBAAmB,WAAW,gBACxF,OAAO,QAAQ,IAAI,kBAAkB,gBAAiB,IAAI,gBAAgB,WAAW,gBACrF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,gBAAgB,WAAW,YACjF,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,cAAc,IAAI,iBAAiB,WAAW,oBAC5G,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,cAAc,IAAI,iBAAiB,WAAW,aACrG,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OAC/F,OAAO,QAAQ,IAAI,kBAAkB,gBAAiB,IAAI,gBAAgB,WAAW,gBAC9E,OAAO,KAAK,uDAWvB,uCAAuC,WAAe,CAClD,MAAK,KAAI,WAAW,YACpB,wBAAuB,YAAY,gBAC5B,CACH,cAAe,IAAI,uBAAuB,WAAW,eACrD,UAAW,IAAI,uBAAuB,WAAW,WACjD,kBAAmB,IAAI,WAAW,IAAI,wBAAwB,WAAW,mBACzE,WAAY,IAAI,WAAW,IAAI,wBAAwB,WAAW,YAClE,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,MAC5D,cAAe,IAAI,uBAAuB,WAAW,iBARf,WAa9C,yCAAyC,WAAe,CAEpD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,gBAAiB,gBAAiB,UAAU,mBAAmB,UAAU,WAAW,gBAC1G,IAAI,kBAAkB,YAAa,YAAa,WAAW,WAAa,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAa,QAC9I,IAAI,kBAAkB,oBAAqB,oBAAqB,WAAW,mBAAqB,KAAO,UAAU,mBAAmB,eAAe,WAAW,mBAAqB,QACnL,IAAI,kBAAkB,aAAc,aAAc,WAAW,YAAc,KAAO,UAAU,mBAAmB,eAAe,WAAW,YAAc,QACvJ,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,kBAAkB,gBAAiB,gBAAiB,WAAW,eAAiB,KAAO,UAAU,mBAAmB,UAAU,WAAW,eAAiB,QAC9J,IAAI,iCAAiC,YAC9B,IAIX,sBAA8B,KAAI,WAAW,CAgDzC,YAAY,MAA6B,GAAY,MAAoB,CACrE,MAAM,MAAO,GAAI,CAAE,KAAM,SAAS,uBAAwB,WAAY,8EACtE,IAAI,gBAAgB,MAAO,gBAAiB,MAC5C,KAAK,aAAe,IAAI,MAAM,SAAS,KAAK,OAAO,aACnD,KAAK,iBAAmB,IAAI,MAAM,SAAS,KAAK,OAAO,iBAEvD,KAAK,cAAgB,MAAM,cAC3B,KAAK,UAAY,MAAM,UACvB,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,WAAa,MAAM,WACxB,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,uBAAwB,MAAM,KAAM,CAAE,gBAAiB,SAC5G,KAAK,cAAgB,MAAM,oBAhDjB,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,gCAAgC,oBAC9C,IAAM,GAAI,UAAS,MAAO,GAAI,YAAY,OAChD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IA2CJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,SAAS,wBAC/D,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,cAAe,KAAK,cACpB,UAAW,KAAK,UAChB,kBAAmB,KAAK,kBACxB,WAAY,KAAK,WACjB,KAAM,KAAK,KAAK,aAChB,cAAe,KAAK,eAIlB,iBAAiB,MAA2B,CAClD,MAAO,+BAA8B,QAhF7C,QAAA,SAAA,uGAE2B,SAAA,uBAAyB,uBAyGpD,sCAAsC,WAAe,CACjD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,2CAA2C,WAAW,YACxG,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,IAAI,mBAAmB,WAAW,mBAC3F,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,IAAI,gBAAgB,WAAW,mBACxF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OACxF,OAAO,KAAK,6DAWvB,6CAA6C,WAAe,CACxD,MAAK,KAAI,WAAW,YACpB,8BAA6B,YAAY,gBAClC,CACH,UAAW,gDAAgD,WAAW,WACtE,iBAAkB,IAAI,uBAAuB,WAAW,kBACxD,aAAc,IAAI,uBAAuB,WAAW,cACpD,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QANtB,WAW9C,+CAA+C,WAAe,CAE1D,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,YAAa,YAAa,kDAAkD,WAAW,YAC7G,IAAI,kBAAkB,mBAAoB,mBAAoB,UAAU,mBAAmB,UAAU,WAAW,mBAChH,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,4BAAoC,KAAI,WAAW,CA0C/C,YAAY,MAA6B,GAAY,MAA0B,CAC3E,MAAM,MAAO,GAAI,CAAE,KAAM,eAAe,uBAAwB,WAAY,oFAC5E,IAAI,gBAAgB,MAAO,YAAa,MACxC,IAAI,gBAAgB,MAAO,mBAAoB,MAC/C,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,UAAY,MAAM,UACvB,KAAK,iBAAmB,MAAM,iBAC9B,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,6BAA8B,MAAM,KAAM,CAAE,gBAAiB,eAzCxG,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,sCAAsC,oBACpD,IAAM,GAAI,gBAAe,MAAO,GAAI,YAAY,OACtD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAoCJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,eAAe,wBACrE,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,UAAW,KAAK,UAChB,iBAAkB,KAAK,iBACvB,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,qCAAoC,QAvEnD,QAAA,eAAA,yHAE2B,eAAA,uBAAyB,6BA0FpD,mDAAmD,WAAe,CAC9D,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,mBAAmB,WAAW,oBAC5F,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,cAAc,IAAI,iBAAiB,WAAW,oBAC5G,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,gBAAgB,WAAW,YAC1E,OAAO,KAAK,2DAWvB,yDAAyD,WAAe,CACpE,MAAK,KAAI,WAAW,YACpB,2CAA0C,YAAY,gBAC/C,CACH,kBAAmB,IAAI,WAAW,IAAI,wBAAwB,WAAW,mBACzE,UAAW,IAAI,uBAAuB,WAAW,aAJX,WAS9C,2DAA2D,WAAe,CACtE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,oBAAqB,oBAAqB,UAAU,mBAAmB,eAAe,WAAW,oBACvH,IAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,UAAU,WAAW,YAClG,IAAI,iCAAiC,YAC9B,IAmCX,6CAA6C,WAAe,CACxD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,SAAU,IAAI,gBAAgB,WAAW,SAC9E,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,IAAI,mBAAmB,WAAW,mBAC3F,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,IAAI,gBAAgB,WAAW,mBACxF,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,mBAAmB,WAAW,WACnF,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,gBAAgB,WAAW,WAChF,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,mBAAmB,WAAW,oBAC5F,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,cAAc,IAAI,iBAAiB,WAAW,oBAC5G,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OAC/F,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,mBAAmB,WAAW,OAC/E,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,gBAAgB,WAAW,OACrE,OAAO,KAAK,oEAWvB,oDAAoD,WAAe,CAC/D,MAAK,KAAI,WAAW,YACpB,qCAAoC,YAAY,gBACzC,CACH,iBAAkB,IAAI,uBAAuB,WAAW,kBACxD,SAAU,IAAI,uBAAuB,WAAW,UAChD,kBAAmB,IAAI,WAAW,IAAI,wBAAwB,WAAW,mBACzE,KAAM,IAAI,uBAAuB,WAAW,MAC5C,OAAQ,IAAI,uBAAuB,WAAW,QAC9C,aAAc,IAAI,uBAAuB,WAAW,cACpD,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QATtB,WAc9C,sDAAsD,WAAe,CAEjE,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,mBAAoB,mBAAoB,UAAU,mBAAmB,UAAU,WAAW,mBAChH,IAAI,kBAAkB,WAAY,WAAY,UAAU,mBAAmB,UAAU,WAAW,WAChG,IAAI,kBAAkB,oBAAqB,oBAAqB,UAAU,mBAAmB,eAAe,WAAW,oBACvH,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,OACxF,IAAI,kBAAkB,SAAU,SAAU,WAAW,QAAU,KAAO,UAAU,mBAAmB,UAAU,WAAW,QAAU,QAClI,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,mCAA2C,KAAI,WAAW,CAmDtD,YAAY,MAA6B,GAAY,MAAiC,CAClF,MAAM,MAAO,GAAI,CAAE,KAAM,sBAAsB,uBAAwB,WAAY,2FACnF,IAAI,gBAAgB,MAAO,mBAAoB,MAC/C,IAAI,gBAAgB,MAAO,WAAY,MACvC,IAAI,gBAAgB,MAAO,oBAAqB,MAChD,IAAI,gBAAgB,MAAO,OAAQ,MACnC,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,iBAAmB,MAAM,iBAC9B,KAAK,SAAW,MAAM,SACtB,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,KAAO,MAAM,KAClB,KAAK,OAAS,MAAM,OACpB,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,oCAAqC,MAAM,KAAM,CAAE,gBAAiB,eAvD/G,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,6CAA6C,oBAC3D,IAAM,GAAI,uBAAsB,MAAO,GAAI,YAAY,OAC7D,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAkDJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,sBAAsB,wBAC5E,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,iBAAkB,KAAK,iBACvB,SAAU,KAAK,SACf,kBAAmB,KAAK,kBACxB,KAAM,KAAK,KACX,OAAQ,KAAK,OACb,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,4CAA2C,QAxF1D,QAAA,sBAAA,8IAE2B,sBAAA,uBAAyB,oCA4IpD,uCAAuC,WAAe,CAClD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,cAAc,IAAI,iBAAiB,WAAW,YACpG,OAAO,QAAQ,IAAI,kBAAkB,qBAAsB,IAAI,mBAAmB,WAAW,qBAC7F,OAAO,QAAQ,IAAI,kBAAkB,qBAAsB,IAAI,gBAAgB,WAAW,qBAC1F,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,gBAAgB,WAAW,YACjF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,IAAI,gBAAgB,WAAW,mBACxF,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,gBAAgB,WAAW,oBACzF,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,gBAAgB,WAAW,oBACzF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,cAAc,4CAA4C,WAAW,YAC3H,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,mDAAmD,WAAW,mBACvH,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,gBAAgB,WAAW,oBACzF,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,gBAAgB,WAAW,aAClF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OACxF,OAAO,KAAK,8DAWvB,8CAA8C,WAAe,CACzD,MAAK,KAAI,WAAW,YACpB,+BAA8B,YAAY,gBACnC,CACH,UAAW,IAAI,WAAW,IAAI,wBAAwB,WAAW,WACjE,mBAAoB,IAAI,uBAAuB,WAAW,oBAC1D,UAAW,IAAI,WAAW,iDAAiD,WAAW,WACtF,UAAW,IAAI,uBAAuB,WAAW,WACjD,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,iBAAkB,IAAI,uBAAuB,WAAW,kBACxD,kBAAmB,IAAI,uBAAuB,WAAW,mBACzD,kBAAmB,IAAI,uBAAuB,WAAW,mBACzD,iBAAkB,wDAAwD,WAAW,kBACrF,kBAAmB,IAAI,uBAAuB,WAAW,mBACzD,WAAY,IAAI,uBAAuB,WAAW,YAClD,aAAc,IAAI,uBAAuB,WAAW,cACpD,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QAftB,WAoB9C,gDAAgD,WAAe,CAE3D,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,eAAe,WAAW,YACvG,IAAI,kBAAkB,qBAAsB,qBAAsB,UAAU,mBAAmB,UAAU,WAAW,qBACpH,IAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,SAAS,mDAAmD,WAAW,YACpJ,IAAI,kBAAkB,YAAa,YAAa,WAAW,WAAa,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAa,QAC9I,IAAI,kBAAkB,iBAAkB,iBAAkB,WAAW,gBAAkB,KAAO,UAAU,mBAAmB,UAAU,WAAW,gBAAkB,QAClK,IAAI,kBAAkB,mBAAoB,mBAAoB,WAAW,kBAAoB,KAAO,UAAU,mBAAmB,UAAU,WAAW,kBAAoB,QAC1K,IAAI,kBAAkB,oBAAqB,oBAAqB,WAAW,mBAAqB,KAAO,UAAU,mBAAmB,UAAU,WAAW,mBAAqB,QAC9K,IAAI,kBAAkB,oBAAqB,oBAAqB,WAAW,mBAAqB,KAAO,UAAU,mBAAmB,UAAU,WAAW,mBAAqB,QAC9K,IAAI,kBAAkB,mBAAoB,mBAAoB,WAAW,kBAAoB,KAAO,0DAA0D,WAAW,kBAAoB,QAC7L,IAAI,kBAAkB,oBAAqB,oBAAqB,WAAW,mBAAqB,KAAO,UAAU,mBAAmB,UAAU,WAAW,mBAAqB,QAC9K,IAAI,kBAAkB,aAAc,aAAc,WAAW,YAAc,KAAO,UAAU,mBAAmB,UAAU,WAAW,YAAc,QAClJ,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,6BAAqC,KAAI,WAAW,CAqEhD,YAAY,MAA6B,GAAY,MAA2B,CAC5E,MAAM,MAAO,GAAI,CAAE,KAAM,gBAAgB,uBAAwB,WAAY,qFAC7E,IAAI,gBAAgB,MAAO,YAAa,MACxC,IAAI,gBAAgB,MAAO,qBAAsB,MACjD,IAAI,gBAAgB,MAAO,YAAa,MACxC,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,UAAY,MAAM,UACvB,KAAK,mBAAqB,MAAM,mBAChC,KAAK,UAAY,MAAM,UACvB,KAAK,UAAY,MAAM,UACvB,KAAK,eAAiB,MAAM,eAC5B,KAAK,iBAAmB,MAAM,iBAC9B,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,iBAAmB,MAAM,iBAC9B,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,WAAa,MAAM,WACxB,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,8BAA+B,MAAM,KAAM,CAAE,gBAAiB,eA9EzG,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,uCAAuC,oBACrD,IAAM,GAAI,iBAAgB,MAAO,GAAI,YAAY,OACvD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAyEJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,gBAAgB,wBACtE,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,UAAW,KAAK,UAChB,mBAAoB,KAAK,mBACzB,UAAW,KAAK,UAChB,UAAW,KAAK,UAChB,eAAgB,KAAK,eACrB,iBAAkB,KAAK,iBACvB,kBAAmB,KAAK,kBACxB,kBAAmB,KAAK,kBACxB,iBAAkB,KAAK,iBACvB,kBAAmB,KAAK,kBACxB,WAAY,KAAK,WACjB,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,sCAAqC,QArHpD,QAAA,gBAAA,4HAE2B,gBAAA,uBAAyB,8BAwIpD,mDAAmD,WAAe,CAC9D,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,mBAAmB,WAAW,WACnF,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,gBAAgB,WAAW,WAChF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,mBAAmB,WAAW,OAC/E,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,gBAAgB,WAAW,OACrE,OAAO,KAAK,0DAWvB,yDAAyD,WAAe,CACpE,MAAK,KAAI,WAAW,YACpB,2CAA0C,YAAY,gBAC/C,CACH,SAAU,IAAI,uBAAuB,WAAW,UAChD,KAAM,IAAI,uBAAuB,WAAW,QAJN,WAS9C,2DAA2D,WAAe,CACtE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,WAAY,WAAY,UAAU,mBAAmB,UAAU,WAAW,WAChG,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,OACxF,IAAI,iCAAiC,YAC9B,IAoBX,2DAA2D,WAAe,CACtE,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,yBAA0B,IAAI,gBAAgB,WAAW,yBAC9F,OAAO,QAAQ,IAAI,kBAAkB,gBAAiB,IAAI,gBAAgB,WAAW,gBAC9E,OAAO,KAAK,kEAWvB,iEAAiE,WAAe,CAC5E,MAAK,KAAI,WAAW,YACpB,mDAAkD,YAAY,gBACvD,CACH,uBAAwB,IAAI,uBAAuB,WAAW,wBAC9D,cAAe,IAAI,uBAAuB,WAAW,iBAJf,WAS9C,mEAAmE,WAAe,CAC9E,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,yBAA0B,yBAA0B,WAAW,wBAA0B,KAAO,UAAU,mBAAmB,UAAU,WAAW,wBAA0B,QAClM,IAAI,kBAAkB,gBAAiB,gBAAiB,WAAW,eAAiB,KAAO,UAAU,mBAAmB,UAAU,WAAW,eAAiB,QAC9J,IAAI,iCAAiC,YAC9B,IA6BX,sCAAsC,WAAe,CACjD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,8CAA8C,WAAW,eAC9G,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,mBAAmB,WAAW,eACvF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,8CAA8C,WAAW,eAC9G,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,mBAAmB,WAAW,iBACzF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,mBAAmB,WAAW,eACvF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OACxF,OAAO,KAAK,6DAWvB,6CAA6C,WAAe,CACxD,MAAK,KAAI,WAAW,YACpB,8BAA6B,YAAY,gBAClC,CACH,aAAc,mDAAmD,WAAW,cAC5E,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,aAAc,IAAI,uBAAuB,WAAW,cACpD,aAAc,mDAAmD,WAAW,cAC5E,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QAPtB,WAY9C,+CAA+C,WAAe,CAE1D,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,eAAgB,eAAgB,qDAAqD,WAAW,eACtH,IAAI,kBAAkB,iBAAkB,iBAAkB,UAAU,mBAAmB,UAAU,WAAW,iBAC5G,IAAI,kBAAkB,eAAgB,eAAgB,UAAU,mBAAmB,UAAU,WAAW,eACxG,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,qDAAqD,WAAW,cAAgB,QACxK,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,4BAAoC,KAAI,WAAW,CA6C/C,YAAY,MAA6B,GAAY,MAA0B,CAC3E,MAAM,MAAO,GAAI,CAAE,KAAM,eAAe,uBAAwB,WAAY,oFAC5E,IAAI,gBAAgB,MAAO,eAAgB,MAC3C,IAAI,gBAAgB,MAAO,iBAAkB,MAC7C,IAAI,gBAAgB,MAAO,eAAgB,MAC3C,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,aAAe,MAAM,aAC1B,KAAK,eAAiB,MAAM,eAC5B,KAAK,aAAe,MAAM,aAC1B,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,6BAA8B,MAAM,KAAM,CAAE,gBAAiB,eA9CxG,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,sCAAsC,oBACpD,IAAM,GAAI,gBAAe,MAAO,GAAI,YAAY,OACtD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAyCJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,eAAe,wBACrE,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,aAAc,KAAK,aACnB,eAAgB,KAAK,eACrB,aAAc,KAAK,aACnB,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,qCAAoC,QA7EnD,QAAA,eAAA,yHAE2B,eAAA,uBAAyB,6BA8FpD,sDAAsD,WAAe,CACjE,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,UAAW,IAAI,gBAAgB,WAAW,UACxE,OAAO,KAAK,8DAWvB,4DAA4D,WAAe,CACvE,MAAK,KAAI,WAAW,YACpB,8CAA6C,YAAY,gBAClD,CACH,QAAS,IAAI,uBAAuB,WAAW,WAHT,WAQ9C,8DAA8D,WAAe,CACzE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,UAAW,UAAW,WAAW,SAAW,KAAO,UAAU,mBAAmB,UAAU,WAAW,SAAW,QACtI,IAAI,iCAAiC,YAC9B,IAkBX,sDAAsD,WAAe,CACjE,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,cAAc,IAAI,iBAAiB,WAAW,YAC7F,OAAO,KAAK,8DAWvB,4DAA4D,WAAe,CACvE,MAAK,KAAI,WAAW,YACpB,8CAA6C,YAAY,gBAClD,CACH,UAAW,IAAI,WAAW,IAAI,wBAAwB,WAAW,aAH3B,WAQ9C,8DAA8D,WAAe,CACzE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,eAAe,WAAW,YACvG,IAAI,iCAAiC,YAC9B,IAyCX,gDAAgD,WAAe,CAC3D,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,gBAAgB,WAAW,YACjF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,cAAc,IAAI,iBAAiB,WAAW,YACpG,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,mBAAmB,WAAW,aACrF,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,gBAAgB,WAAW,aAClF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,gBAAgB,WAAW,YACjF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,mBAAmB,WAAW,iBACzF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,gBAAgB,WAAW,aAClF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OACxF,OAAO,KAAK,uEAWvB,uDAAuD,WAAe,CAClE,MAAK,KAAI,WAAW,YACpB,wCAAuC,YAAY,gBAC5C,CACH,UAAW,IAAI,WAAW,IAAI,wBAAwB,WAAW,WACjE,WAAY,IAAI,uBAAuB,WAAW,YAClD,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,UAAW,IAAI,uBAAuB,WAAW,WACjD,UAAW,IAAI,uBAAuB,WAAW,WACjD,WAAY,IAAI,uBAAuB,WAAW,YAClD,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,aAAc,IAAI,uBAAuB,WAAW,cACpD,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QAXtB,WAgB9C,yDAAyD,WAAe,CAEpE,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,eAAe,WAAW,YACvG,IAAI,kBAAkB,aAAc,aAAc,UAAU,mBAAmB,UAAU,WAAW,aACpG,IAAI,kBAAkB,iBAAkB,iBAAkB,UAAU,mBAAmB,UAAU,WAAW,iBAC5G,IAAI,kBAAkB,YAAa,YAAa,WAAW,WAAa,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAa,QAC9I,IAAI,kBAAkB,YAAa,YAAa,WAAW,WAAa,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAa,QAC9I,IAAI,kBAAkB,aAAc,aAAc,WAAW,YAAc,KAAO,UAAU,mBAAmB,UAAU,WAAW,YAAc,QAClJ,IAAI,kBAAkB,iBAAkB,iBAAkB,WAAW,gBAAkB,KAAO,UAAU,mBAAmB,UAAU,WAAW,gBAAkB,QAClK,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,sCAA8C,KAAI,WAAW,CAyDzD,YAAY,MAA6B,GAAY,MAAoC,CACrF,MAAM,MAAO,GAAI,CAAE,KAAM,yBAAyB,uBAAwB,WAAY,8FACtF,IAAI,gBAAgB,MAAO,YAAa,MACxC,IAAI,gBAAgB,MAAO,aAAc,MACzC,IAAI,gBAAgB,MAAO,iBAAkB,MAC7C,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,UAAY,MAAM,UACvB,KAAK,WAAa,MAAM,WACxB,KAAK,eAAiB,MAAM,eAC5B,KAAK,UAAY,MAAM,UACvB,KAAK,UAAY,MAAM,UACvB,KAAK,WAAa,MAAM,WACxB,KAAK,eAAiB,MAAM,eAC5B,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,uCAAwC,MAAM,KAAM,CAAE,gBAAiB,eA9DlH,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,gDAAgD,oBAC9D,IAAM,GAAI,0BAAyB,MAAO,GAAI,YAAY,OAChE,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAyDJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,yBAAyB,wBAC/E,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,UAAW,KAAK,UAChB,WAAY,KAAK,WACjB,eAAgB,KAAK,eACrB,UAAW,KAAK,UAChB,UAAW,KAAK,UAChB,WAAY,KAAK,WACjB,eAAgB,KAAK,eACrB,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,+CAA8C,QAjG7D,QAAA,yBAAA,uJAE2B,yBAAA,uBAAyB,uCA6HpD,qCAAqC,WAAe,CAChD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,mBAAmB,WAAW,cACtF,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,gBAAgB,WAAW,cACnF,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,mBAAmB,WAAW,WACnF,OAAO,QAAQ,IAAI,kBAAkB,WAAY,yCAAyC,WAAW,WACrG,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OACxF,OAAO,KAAK,4DAWvB,4CAA4C,WAAe,CACvD,MAAK,KAAI,WAAW,YACpB,6BAA4B,YAAY,gBACjC,CACH,YAAa,IAAI,uBAAuB,WAAW,aACnD,SAAU,8CAA8C,WAAW,UACnE,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,aAAc,IAAI,uBAAuB,WAAW,cACpD,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QAPtB,WAY9C,8CAA8C,WAAe,CAEzD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,cAAe,cAAe,UAAU,mBAAmB,UAAU,WAAW,cACtG,IAAI,kBAAkB,WAAY,WAAY,gDAAgD,WAAW,WACzG,IAAI,kBAAkB,iBAAkB,iBAAkB,WAAW,gBAAkB,KAAO,UAAU,mBAAmB,UAAU,WAAW,gBAAkB,QAClK,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,2BAAmC,KAAI,WAAW,CA6C9C,YAAY,MAA6B,GAAY,MAAyB,CAC1E,MAAM,MAAO,GAAI,CAAE,KAAM,cAAc,uBAAwB,WAAY,mFAC3E,IAAI,gBAAgB,MAAO,cAAe,MAC1C,IAAI,gBAAgB,MAAO,WAAY,MACvC,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,YAAc,MAAM,YACzB,KAAK,SAAW,MAAM,SACtB,KAAK,eAAiB,MAAM,eAC5B,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,4BAA6B,MAAM,KAAM,CAAE,gBAAiB,eA7CvG,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,qCAAqC,oBACnD,IAAM,GAAI,eAAc,MAAO,GAAI,YAAY,OACrD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAwCJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,cAAc,wBACpE,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,YAAa,KAAK,YAClB,SAAU,KAAK,SACf,eAAgB,KAAK,eACrB,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,oCAAmC,QA5ElD,QAAA,cAAA,sHAE2B,cAAA,uBAAyB,4BA6FpD,iDAAiD,WAAe,CAC5D,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,sBAAuB,IAAI,mBAAmB,WAAW,sBAC9F,OAAO,QAAQ,IAAI,kBAAkB,sBAAuB,IAAI,gBAAgB,WAAW,sBACpF,OAAO,KAAK,0DAWvB,uDAAuD,WAAe,CAClE,MAAK,KAAI,WAAW,YACpB,yCAAwC,YAAY,gBAC7C,CACH,oBAAqB,IAAI,uBAAuB,WAAW,uBAHrB,WAQ9C,yDAAyD,WAAe,CACpE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,sBAAuB,sBAAuB,UAAU,mBAAmB,UAAU,WAAW,sBACtH,IAAI,iCAAiC,YAC9B,IAsCX,sCAAsC,WAAe,CACjD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,mBAAmB,WAAW,YACpF,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,cAAc,IAAI,iBAAiB,WAAW,YACpG,OAAO,QAAQ,IAAI,kBAAkB,SAAU,IAAI,gBAAgB,WAAW,SAC9E,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,8CAA8C,WAAW,eAC9G,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,mBAAmB,WAAW,WACnF,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,gBAAgB,WAAW,WAChF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,mBAAmB,WAAW,iBACzF,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,mBAAmB,WAAW,eACvF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OAC/F,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,mBAAmB,WAAW,OAC/E,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,gBAAgB,WAAW,OACrE,OAAO,KAAK,6DAWvB,6CAA6C,WAAe,CACxD,MAAK,KAAI,WAAW,YACpB,8BAA6B,YAAY,gBAClC,CACH,UAAW,IAAI,WAAW,IAAI,wBAAwB,WAAW,WACjE,SAAU,IAAI,uBAAuB,WAAW,UAChD,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,aAAc,IAAI,uBAAuB,WAAW,cACpD,KAAM,IAAI,uBAAuB,WAAW,MAC5C,OAAQ,IAAI,uBAAuB,WAAW,QAC9C,aAAc,mDAAmD,WAAW,cAC5E,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QAVtB,WAe9C,+CAA+C,WAAe,CAE1D,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,eAAe,WAAW,YACvG,IAAI,kBAAkB,WAAY,WAAY,UAAU,mBAAmB,UAAU,WAAW,WAChG,IAAI,kBAAkB,iBAAkB,iBAAkB,UAAU,mBAAmB,UAAU,WAAW,iBAC5G,IAAI,kBAAkB,eAAgB,eAAgB,UAAU,mBAAmB,UAAU,WAAW,eACxG,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,OACxF,IAAI,kBAAkB,SAAU,SAAU,WAAW,QAAU,KAAO,UAAU,mBAAmB,UAAU,WAAW,QAAU,QAClI,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,qDAAqD,WAAW,cAAgB,QACxK,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,4BAAoC,KAAI,WAAW,CAsD/C,YAAY,MAA6B,GAAY,MAA0B,CAC3E,MAAM,MAAO,GAAI,CAAE,KAAM,eAAe,uBAAwB,WAAY,oFAC5E,IAAI,gBAAgB,MAAO,YAAa,MACxC,IAAI,gBAAgB,MAAO,WAAY,MACvC,IAAI,gBAAgB,MAAO,iBAAkB,MAC7C,IAAI,gBAAgB,MAAO,eAAgB,MAC3C,IAAI,gBAAgB,MAAO,OAAQ,MACnC,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBAEtD,KAAK,UAAY,MAAM,UACvB,KAAK,SAAW,MAAM,SACtB,KAAK,eAAiB,MAAM,eAC5B,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,MAAM,KAClB,KAAK,OAAS,MAAM,OACpB,KAAK,aAAe,MAAM,aAC1B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,6BAA8B,MAAM,KAAM,CAAE,gBAAiB,eA5DxG,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,sCAAsC,oBACpD,IAAM,GAAI,gBAAe,MAAO,GAAI,YAAY,OACtD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAuDJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,eAAe,wBACrE,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,UAAW,KAAK,UAChB,SAAU,KAAK,SACf,eAAgB,KAAK,eACrB,aAAc,KAAK,aACnB,KAAM,KAAK,KACX,OAAQ,KAAK,OACb,aAAc,KAAK,aACnB,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,qCAAoC,QA9FnD,QAAA,eAAA,yHAE2B,eAAA,uBAAyB,6BA+GpD,sDAAsD,WAAe,CACjE,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,UAAW,IAAI,gBAAgB,WAAW,UACxE,OAAO,KAAK,8DAWvB,4DAA4D,WAAe,CACvE,MAAK,KAAI,WAAW,YACpB,8CAA6C,YAAY,gBAClD,CACH,QAAS,IAAI,uBAAuB,WAAW,WAHT,WAQ9C,8DAA8D,WAAe,CACzE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,UAAW,UAAW,WAAW,SAAW,KAAO,UAAU,mBAAmB,UAAU,WAAW,SAAW,QACtI,IAAI,iCAAiC,YAC9B,IAyCX,+BAA+B,WAAe,CAC1C,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,wBAAyB,IAAI,gBAAgB,WAAW,wBAC7F,OAAO,QAAQ,IAAI,kBAAkB,yBAA0B,IAAI,mBAAmB,WAAW,yBACjG,OAAO,QAAQ,IAAI,kBAAkB,yBAA0B,IAAI,gBAAgB,WAAW,yBAC9F,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,cAAc,sCAAsC,WAAW,WACpH,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,cAAc,sCAAsC,WAAW,WACpH,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,gBAAgB,WAAW,OAC5E,OAAO,QAAQ,IAAI,kBAAkB,UAAW,kCAAkC,WAAW,UAC7F,OAAO,QAAQ,IAAI,kBAAkB,WAAY,uCAAuC,WAAW,WACnG,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,mBAAmB,WAAW,oBAC5F,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,gBAAgB,WAAW,oBACzF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,iBAAiB,WAAW,OACxF,OAAO,KAAK,sDAWvB,sCAAsC,WAAe,CACjD,MAAK,KAAI,WAAW,YACpB,uBAAsB,YAAY,gBAC3B,CACH,uBAAwB,IAAI,uBAAuB,WAAW,wBAC9D,kBAAmB,IAAI,uBAAuB,WAAW,mBACzD,sBAAuB,IAAI,uBAAuB,WAAW,uBAC7D,SAAU,IAAI,WAAW,2CAA2C,WAAW,UAC/E,SAAU,IAAI,WAAW,2CAA2C,WAAW,UAC/E,KAAM,IAAI,uBAAuB,WAAW,MAC5C,QAAS,uCAAuC,WAAW,SAC3D,SAAU,4CAA4C,WAAW,UACjE,KAAM,IAAI,WAAW,IAAI,wBAAwB,WAAW,QAXtB,WAgB9C,wCAAwC,WAAe,CAEnD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,yBAA0B,yBAA0B,UAAU,mBAAmB,UAAU,WAAW,yBAC5H,IAAI,kBAAkB,oBAAqB,oBAAqB,UAAU,mBAAmB,UAAU,WAAW,oBAClH,IAAI,kBAAkB,wBAAyB,wBAAyB,WAAW,uBAAyB,KAAO,UAAU,mBAAmB,UAAU,WAAW,uBAAyB,QAC9L,IAAI,kBAAkB,WAAY,WAAY,WAAW,UAAY,KAAO,UAAU,mBAAmB,SAAS,6CAA6C,WAAW,UAAY,QACtL,IAAI,kBAAkB,WAAY,WAAY,WAAW,UAAY,KAAO,UAAU,mBAAmB,SAAS,6CAA6C,WAAW,UAAY,QACtL,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,UAAU,WAAW,MAAQ,QAC1H,IAAI,kBAAkB,UAAW,UAAW,WAAW,SAAW,KAAO,yCAAyC,WAAW,SAAW,QACxI,IAAI,kBAAkB,WAAY,WAAY,WAAW,UAAY,KAAO,8CAA8C,WAAW,UAAY,QACjJ,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,WAAW,WAAW,MAAQ,QACjK,IAAI,iCAAiC,YAC9B,IAIX,qBAA6B,KAAI,WAAW,CAqExC,YAAY,MAA6B,GAAY,MAAmB,CACpE,MAAM,MAAO,GAAI,CAAE,KAAM,QAAQ,uBAAwB,WAAY,6EACrE,IAAI,gBAAgB,MAAO,yBAA0B,MACrD,IAAI,gBAAgB,MAAO,oBAAqB,MAChD,KAAK,oCAAsC,IAAI,MAAM,OAAO,KAAK,OAAO,oCACxE,KAAK,cAAgB,IAAI,MAAM,SAAS,KAAK,OAAO,cACpD,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,gBACtD,KAAK,+BAAiC,IAAI,MAAM,OAAO,KAAK,OAAO,+BACnE,KAAK,WAAa,IAAI,MAAM,SAAS,KAAK,OAAO,WACjD,KAAK,YAAc,IAAI,MAAM,SAAS,KAAK,OAAO,YAElD,KAAK,uBAAyB,MAAM,uBACpC,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,sBAAwB,MAAM,sBACnC,KAAK,SAAW,MAAM,SACtB,KAAK,SAAW,MAAM,SACtB,KAAK,KAAO,MAAM,KAClB,KAAK,QAAU,MAAM,QACrB,KAAK,SAAW,MAAM,SACtB,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,sBAAuB,MAAM,KAAM,CAAE,gBAAiB,eA7EjG,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,GAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,YAClE,YAAc,+BAA+B,oBAC7C,IAAM,GAAI,SAAQ,MAAO,GAAI,YAAY,OAC/C,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,iBACxD,IAAI,oBAAoB,QAAS,SAErC,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,IAClD,IAwEJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,QAAQ,wBAC9D,UAAU,aAAa,+BAAgC,KAAK,kBAGlD,gBAAa,CACvB,MAAO,CACH,uBAAwB,KAAK,uBAC7B,kBAAmB,KAAK,kBACxB,sBAAuB,KAAK,sBAC5B,SAAU,KAAK,SACf,SAAU,KAAK,SACf,KAAM,KAAK,KACX,QAAS,KAAK,QACd,SAAU,KAAK,SACf,KAAM,KAAK,KAAK,cAId,iBAAiB,MAA2B,CAClD,MAAO,8BAA6B,QAhH5C,QAAA,QAAA,oGAE2B,QAAA,uBAAyB,sBAmIpD,6CAA6C,WAAe,CACxD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,gBAAgB,WAAW,aAClF,OAAO,QAAQ,IAAI,kBAAkB,QAAS,IAAI,gBAAgB,WAAW,QACtE,OAAO,KAAK,4DAWvB,mDAAmD,WAAe,CAC9D,MAAK,KAAI,WAAW,YACpB,qCAAoC,YAAY,gBACzC,CACH,WAAY,IAAI,uBAAuB,WAAW,YAClD,MAAO,IAAI,uBAAuB,WAAW,SAJP,WAS9C,qDAAqD,WAAe,CAChE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,aAAc,aAAc,WAAW,YAAc,KAAO,UAAU,mBAAmB,UAAU,WAAW,YAAc,QAClJ,IAAI,kBAAkB,QAAS,QAAS,WAAW,OAAS,KAAO,UAAU,mBAAmB,UAAU,WAAW,OAAS,QAC9H,IAAI,iCAAiC,YAC9B,IA4CX,0CAA0C,WAAe,CACrD,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,QAAS,IAAI,gBAAgB,WAAW,QAC7E,OAAO,QAAQ,IAAI,kBAAkB,iBAAkB,IAAI,gBAAgB,WAAW,iBACtF,OAAO,QAAQ,IAAI,kBAAkB,MAAO,IAAI,gBAAgB,WAAW,MAC3E,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,gBAAgB,WAAW,WAChF,OAAO,QAAQ,IAAI,kBAAkB,QAAS,IAAI,gBAAgB,WAAW,QAC7E,OAAO,QAAQ,IAAI,kBAAkB,gBAAiB,IAAI,gBAAgB,WAAW,gBACrF,OAAO,QAAQ,IAAI,kBAAkB,mBAAoB,IAAI,gBAAgB,WAAW,mBACxF,OAAO,QAAQ,IAAI,kBAAkB,uBAAwB,IAAI,gBAAgB,WAAW,uBAC5F,OAAO,QAAQ,IAAI,kBAAkB,kBAAmB,IAAI,gBAAgB,WAAW,kBACvF,OAAO,QAAQ,IAAI,kBAAkB,8BAA+B,IAAI,gBAAgB,WAAW,8BACnG,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,gBAAgB,WAAW,eACpF,OAAO,QAAQ,IAAI,kBAAkB,MAAO,IAAI,gBAAgB,WAAW,MAC3E,OAAO,QAAQ,IAAI,kBAAkB,aAAc,IAAI,gBAAgB,WAAW,aAC3E,OAAO,KAAK,yDAWvB,gDAAgD,WAAe,CAC3D,MAAK,KAAI,WAAW,YACpB,kCAAiC,YAAY,gBACtC,CACH,MAAO,IAAI,uBAAuB,WAAW,OAC7C,eAAgB,IAAI,uBAAuB,WAAW,gBACtD,IAAK,IAAI,uBAAuB,WAAW,KAC3C,SAAU,IAAI,uBAAuB,WAAW,UAChD,MAAO,IAAI,uBAAuB,WAAW,OAC7C,cAAe,IAAI,uBAAuB,WAAW,eACrD,iBAAkB,IAAI,uBAAuB,WAAW,kBACxD,qBAAsB,IAAI,uBAAuB,WAAW,sBAC5D,gBAAiB,IAAI,uBAAuB,WAAW,iBACvD,4BAA6B,IAAI,uBAAuB,WAAW,6BACnE,aAAc,IAAI,uBAAuB,WAAW,cACpD,aAAc,IAAI,uBAAuB,WAAW,cACpD,IAAK,IAAI,uBAAuB,WAAW,KAC3C,WAAY,IAAI,uBAAuB,WAAW,cAhBZ,WAqB9C,kDAAkD,WAAe,CAC7D,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,QAAS,QAAS,WAAW,OAAS,KAAO,UAAU,mBAAmB,UAAU,WAAW,OAAS,QAC9H,IAAI,kBAAkB,iBAAkB,iBAAkB,WAAW,gBAAkB,KAAO,UAAU,mBAAmB,UAAU,WAAW,gBAAkB,QAClK,IAAI,kBAAkB,MAAO,MAAO,WAAW,KAAO,KAAO,UAAU,mBAAmB,UAAU,WAAW,KAAO,QACtH,IAAI,kBAAkB,WAAY,WAAY,WAAW,UAAY,KAAO,UAAU,mBAAmB,UAAU,WAAW,UAAY,QAC1I,IAAI,kBAAkB,QAAS,QAAS,WAAW,OAAS,KAAO,UAAU,mBAAmB,UAAU,WAAW,OAAS,QAC9H,IAAI,kBAAkB,gBAAiB,gBAAiB,WAAW,eAAiB,KAAO,UAAU,mBAAmB,UAAU,WAAW,eAAiB,QAC9J,IAAI,kBAAkB,mBAAoB,mBAAoB,WAAW,kBAAoB,KAAO,UAAU,mBAAmB,UAAU,WAAW,kBAAoB,QAC1K,IAAI,kBAAkB,uBAAwB,uBAAwB,WAAW,sBAAwB,KAAO,UAAU,mBAAmB,UAAU,WAAW,sBAAwB,QAC1L,IAAI,kBAAkB,kBAAmB,kBAAmB,WAAW,iBAAmB,KAAO,UAAU,mBAAmB,UAAU,WAAW,iBAAmB,QACtK,IAAI,kBAAkB,8BAA+B,8BAA+B,WAAW,6BAA+B,KAAO,UAAU,mBAAmB,UAAU,WAAW,6BAA+B,QACtN,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,eAAgB,eAAgB,WAAW,cAAgB,KAAO,UAAU,mBAAmB,UAAU,WAAW,cAAgB,QAC1J,IAAI,kBAAkB,MAAO,MAAO,WAAW,KAAO,KAAO,UAAU,mBAAmB,UAAU,WAAW,KAAO,QACtH,IAAI,kBAAkB,aAAc,aAAc,WAAW,YAAc,KAAO,UAAU,mBAAmB,UAAU,WAAW,YAAc,QAClJ,IAAI,iCAAiC,YAC9B,IAkBX,+CAA+C,WAAe,CAC1D,GAAI,CAAC,IAAI,WAAW,YAAe,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,cAElG,OAAO,QAAQ,IAAI,kBAAkB,qBAAsB,IAAI,mBAAmB,WAAW,qBAC7F,OAAO,QAAQ,IAAI,kBAAkB,qBAAsB,IAAI,gBAAgB,WAAW,qBACnF,OAAO,KAAK,8DAWvB,qDAAqD,WAAe,CAChE,MAAK,KAAI,WAAW,YACpB,uCAAsC,YAAY,gBAC3C,CACH,mBAAoB,IAAI,uBAAuB,WAAW,sBAHpB,WAQ9C,uDAAuD,WAAe,CAClE,GAAI,IAAI,mBAAmB,YACvB,MAAO,IAAI,WAAU,yBAAyB,YAGlD,GADA,WAAa,YAAc,KAAO,GAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,YAElD,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,qBAAsB,qBAAsB,UAAU,mBAAmB,UAAU,WAAW,qBACpH,IAAI,iCAAiC,YAC9B",
  "names": []
}
