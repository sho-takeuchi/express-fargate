{
  "version": 3,
  "sources": ["dms.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:29.615Z\",\"fingerprint\":\"STmekowDzG1xTrX7P58EqC72u+mMZFAvBrZqE0VCplQ=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnCertificateProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly certificateIdentifier?: string;\n\n                                                                                                                                                                                                                                                 \n    readonly certificatePem?: string;\n\n                                                                                                                                                                                                                                                                                                                   \n    readonly certificateWallet?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCertificateProps`\n *\n * @param properties - the TypeScript properties of a `CfnCertificateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateIdentifier', cdk.validateString)(properties.certificateIdentifier));\n    errors.collect(cdk.propertyValidator('certificatePem', cdk.validateString)(properties.certificatePem));\n    errors.collect(cdk.propertyValidator('certificateWallet', cdk.validateString)(properties.certificateWallet));\n    return errors.wrap('supplied properties not correct for \"CfnCertificateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Certificate` resource\n *\n * @param properties - the TypeScript properties of a `CfnCertificateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Certificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificatePropsValidator(properties).assertSuccess();\n    return {\n        CertificateIdentifier: cdk.stringToCloudFormation(properties.certificateIdentifier),\n        CertificatePem: cdk.stringToCloudFormation(properties.certificatePem),\n        CertificateWallet: cdk.stringToCloudFormation(properties.certificateWallet),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateProps>();\n    ret.addPropertyResult('certificateIdentifier', 'CertificateIdentifier', properties.CertificateIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateIdentifier) : undefined);\n    ret.addPropertyResult('certificatePem', 'CertificatePem', properties.CertificatePem != null ? cfn_parse.FromCloudFormation.getString(properties.CertificatePem) : undefined);\n    ret.addPropertyResult('certificateWallet', 'CertificateWallet', properties.CertificateWallet != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateWallet) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \nexport class CfnCertificate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DMS::Certificate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCertificate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCertificatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCertificate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public certificateIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    public certificatePem: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                   \n    public certificateWallet: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnCertificateProps = {}) {\n        super(scope, id, { type: CfnCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.certificateIdentifier = props.certificateIdentifier;\n        this.certificatePem = props.certificatePem;\n        this.certificateWallet = props.certificateWallet;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCertificate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateIdentifier: this.certificateIdentifier,\n            certificatePem: this.certificatePem,\n            certificateWallet: this.certificateWallet,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCertificatePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                \nexport interface CfnEndpointProps {\n\n                                                                                                                                                                                                                                    \n    readonly endpointType: string;\n\nn    readonly engineName: string;\n\n                                                                                                                                                                                                                           \n    readonly certificateArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    readonly databaseName?: string;\n\nn    readonly docDbSettings?: CfnEndpoint.DocDbSettingsProperty | cdk.IResolvable;\n\nn    readonly dynamoDbSettings?: CfnEndpoint.DynamoDbSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly elasticsearchSettings?: CfnEndpoint.ElasticsearchSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n    readonly endpointIdentifier?: string;\n\nn    readonly extraConnectionAttributes?: string;\n\n                                                                                                                                                                                                                                    \n    readonly gcpMySqlSettings?: CfnEndpoint.GcpMySQLSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                       \n    readonly ibmDb2Settings?: CfnEndpoint.IbmDb2SettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly kafkaSettings?: CfnEndpoint.KafkaSettingsProperty | cdk.IResolvable;\n\nn    readonly kinesisSettings?: CfnEndpoint.KinesisSettingsProperty | cdk.IResolvable;\n\nn    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                   \n    readonly microsoftSqlServerSettings?: CfnEndpoint.MicrosoftSqlServerSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly mongoDbSettings?: CfnEndpoint.MongoDbSettingsProperty | cdk.IResolvable;\n\nn    readonly mySqlSettings?: CfnEndpoint.MySqlSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                             \n    readonly neptuneSettings?: CfnEndpoint.NeptuneSettingsProperty | cdk.IResolvable;\n\nn    readonly oracleSettings?: CfnEndpoint.OracleSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly password?: string;\n\n                                                                                                                                                                                                     \n    readonly port?: number;\n\n                                                                                                                                                                                                                           \n    readonly postgreSqlSettings?: CfnEndpoint.PostgreSqlSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly redisSettings?: CfnEndpoint.RedisSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    readonly redshiftSettings?: CfnEndpoint.RedshiftSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly resourceIdentifier?: string;\n\nn    readonly s3Settings?: CfnEndpoint.S3SettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                               \n    readonly serverName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    readonly sslMode?: string;\n\nn    readonly sybaseSettings?: CfnEndpoint.SybaseSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                              \n    readonly username?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('docDbSettings', CfnEndpoint_DocDbSettingsPropertyValidator)(properties.docDbSettings));\n    errors.collect(cdk.propertyValidator('dynamoDbSettings', CfnEndpoint_DynamoDbSettingsPropertyValidator)(properties.dynamoDbSettings));\n    errors.collect(cdk.propertyValidator('elasticsearchSettings', CfnEndpoint_ElasticsearchSettingsPropertyValidator)(properties.elasticsearchSettings));\n    errors.collect(cdk.propertyValidator('endpointIdentifier', cdk.validateString)(properties.endpointIdentifier));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.requiredValidator)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('engineName', cdk.requiredValidator)(properties.engineName));\n    errors.collect(cdk.propertyValidator('engineName', cdk.validateString)(properties.engineName));\n    errors.collect(cdk.propertyValidator('extraConnectionAttributes', cdk.validateString)(properties.extraConnectionAttributes));\n    errors.collect(cdk.propertyValidator('gcpMySqlSettings', CfnEndpoint_GcpMySQLSettingsPropertyValidator)(properties.gcpMySqlSettings));\n    errors.collect(cdk.propertyValidator('ibmDb2Settings', CfnEndpoint_IbmDb2SettingsPropertyValidator)(properties.ibmDb2Settings));\n    errors.collect(cdk.propertyValidator('kafkaSettings', CfnEndpoint_KafkaSettingsPropertyValidator)(properties.kafkaSettings));\n    errors.collect(cdk.propertyValidator('kinesisSettings', CfnEndpoint_KinesisSettingsPropertyValidator)(properties.kinesisSettings));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('microsoftSqlServerSettings', CfnEndpoint_MicrosoftSqlServerSettingsPropertyValidator)(properties.microsoftSqlServerSettings));\n    errors.collect(cdk.propertyValidator('mongoDbSettings', CfnEndpoint_MongoDbSettingsPropertyValidator)(properties.mongoDbSettings));\n    errors.collect(cdk.propertyValidator('mySqlSettings', CfnEndpoint_MySqlSettingsPropertyValidator)(properties.mySqlSettings));\n    errors.collect(cdk.propertyValidator('neptuneSettings', CfnEndpoint_NeptuneSettingsPropertyValidator)(properties.neptuneSettings));\n    errors.collect(cdk.propertyValidator('oracleSettings', CfnEndpoint_OracleSettingsPropertyValidator)(properties.oracleSettings));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('postgreSqlSettings', CfnEndpoint_PostgreSqlSettingsPropertyValidator)(properties.postgreSqlSettings));\n    errors.collect(cdk.propertyValidator('redisSettings', CfnEndpoint_RedisSettingsPropertyValidator)(properties.redisSettings));\n    errors.collect(cdk.propertyValidator('redshiftSettings', CfnEndpoint_RedshiftSettingsPropertyValidator)(properties.redshiftSettings));\n    errors.collect(cdk.propertyValidator('resourceIdentifier', cdk.validateString)(properties.resourceIdentifier));\n    errors.collect(cdk.propertyValidator('s3Settings', CfnEndpoint_S3SettingsPropertyValidator)(properties.s3Settings));\n    errors.collect(cdk.propertyValidator('serverName', cdk.validateString)(properties.serverName));\n    errors.collect(cdk.propertyValidator('sslMode', cdk.validateString)(properties.sslMode));\n    errors.collect(cdk.propertyValidator('sybaseSettings', CfnEndpoint_SybaseSettingsPropertyValidator)(properties.sybaseSettings));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"CfnEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointPropsValidator(properties).assertSuccess();\n    return {\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        EngineName: cdk.stringToCloudFormation(properties.engineName),\n        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        DocDbSettings: cfnEndpointDocDbSettingsPropertyToCloudFormation(properties.docDbSettings),\n        DynamoDbSettings: cfnEndpointDynamoDbSettingsPropertyToCloudFormation(properties.dynamoDbSettings),\n        ElasticsearchSettings: cfnEndpointElasticsearchSettingsPropertyToCloudFormation(properties.elasticsearchSettings),\n        EndpointIdentifier: cdk.stringToCloudFormation(properties.endpointIdentifier),\n        ExtraConnectionAttributes: cdk.stringToCloudFormation(properties.extraConnectionAttributes),\n        GcpMySQLSettings: cfnEndpointGcpMySQLSettingsPropertyToCloudFormation(properties.gcpMySqlSettings),\n        IbmDb2Settings: cfnEndpointIbmDb2SettingsPropertyToCloudFormation(properties.ibmDb2Settings),\n        KafkaSettings: cfnEndpointKafkaSettingsPropertyToCloudFormation(properties.kafkaSettings),\n        KinesisSettings: cfnEndpointKinesisSettingsPropertyToCloudFormation(properties.kinesisSettings),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MicrosoftSqlServerSettings: cfnEndpointMicrosoftSqlServerSettingsPropertyToCloudFormation(properties.microsoftSqlServerSettings),\n        MongoDbSettings: cfnEndpointMongoDbSettingsPropertyToCloudFormation(properties.mongoDbSettings),\n        MySqlSettings: cfnEndpointMySqlSettingsPropertyToCloudFormation(properties.mySqlSettings),\n        NeptuneSettings: cfnEndpointNeptuneSettingsPropertyToCloudFormation(properties.neptuneSettings),\n        OracleSettings: cfnEndpointOracleSettingsPropertyToCloudFormation(properties.oracleSettings),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Port: cdk.numberToCloudFormation(properties.port),\n        PostgreSqlSettings: cfnEndpointPostgreSqlSettingsPropertyToCloudFormation(properties.postgreSqlSettings),\n        RedisSettings: cfnEndpointRedisSettingsPropertyToCloudFormation(properties.redisSettings),\n        RedshiftSettings: cfnEndpointRedshiftSettingsPropertyToCloudFormation(properties.redshiftSettings),\n        ResourceIdentifier: cdk.stringToCloudFormation(properties.resourceIdentifier),\n        S3Settings: cfnEndpointS3SettingsPropertyToCloudFormation(properties.s3Settings),\n        ServerName: cdk.stringToCloudFormation(properties.serverName),\n        SslMode: cdk.stringToCloudFormation(properties.sslMode),\n        SybaseSettings: cfnEndpointSybaseSettingsPropertyToCloudFormation(properties.sybaseSettings),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointProps>();\n    ret.addPropertyResult('endpointType', 'EndpointType', cfn_parse.FromCloudFormation.getString(properties.EndpointType));\n    ret.addPropertyResult('engineName', 'EngineName', cfn_parse.FromCloudFormation.getString(properties.EngineName));\n    ret.addPropertyResult('certificateArn', 'CertificateArn', properties.CertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateArn) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('docDbSettings', 'DocDbSettings', properties.DocDbSettings != null ? CfnEndpointDocDbSettingsPropertyFromCloudFormation(properties.DocDbSettings) : undefined);\n    ret.addPropertyResult('dynamoDbSettings', 'DynamoDbSettings', properties.DynamoDbSettings != null ? CfnEndpointDynamoDbSettingsPropertyFromCloudFormation(properties.DynamoDbSettings) : undefined);\n    ret.addPropertyResult('elasticsearchSettings', 'ElasticsearchSettings', properties.ElasticsearchSettings != null ? CfnEndpointElasticsearchSettingsPropertyFromCloudFormation(properties.ElasticsearchSettings) : undefined);\n    ret.addPropertyResult('endpointIdentifier', 'EndpointIdentifier', properties.EndpointIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointIdentifier) : undefined);\n    ret.addPropertyResult('extraConnectionAttributes', 'ExtraConnectionAttributes', properties.ExtraConnectionAttributes != null ? cfn_parse.FromCloudFormation.getString(properties.ExtraConnectionAttributes) : undefined);\n    ret.addPropertyResult('gcpMySqlSettings', 'GcpMySQLSettings', properties.GcpMySQLSettings != null ? CfnEndpointGcpMySQLSettingsPropertyFromCloudFormation(properties.GcpMySQLSettings) : undefined);\n    ret.addPropertyResult('ibmDb2Settings', 'IbmDb2Settings', properties.IbmDb2Settings != null ? CfnEndpointIbmDb2SettingsPropertyFromCloudFormation(properties.IbmDb2Settings) : undefined);\n    ret.addPropertyResult('kafkaSettings', 'KafkaSettings', properties.KafkaSettings != null ? CfnEndpointKafkaSettingsPropertyFromCloudFormation(properties.KafkaSettings) : undefined);\n    ret.addPropertyResult('kinesisSettings', 'KinesisSettings', properties.KinesisSettings != null ? CfnEndpointKinesisSettingsPropertyFromCloudFormation(properties.KinesisSettings) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('microsoftSqlServerSettings', 'MicrosoftSqlServerSettings', properties.MicrosoftSqlServerSettings != null ? CfnEndpointMicrosoftSqlServerSettingsPropertyFromCloudFormation(properties.MicrosoftSqlServerSettings) : undefined);\n    ret.addPropertyResult('mongoDbSettings', 'MongoDbSettings', properties.MongoDbSettings != null ? CfnEndpointMongoDbSettingsPropertyFromCloudFormation(properties.MongoDbSettings) : undefined);\n    ret.addPropertyResult('mySqlSettings', 'MySqlSettings', properties.MySqlSettings != null ? CfnEndpointMySqlSettingsPropertyFromCloudFormation(properties.MySqlSettings) : undefined);\n    ret.addPropertyResult('neptuneSettings', 'NeptuneSettings', properties.NeptuneSettings != null ? CfnEndpointNeptuneSettingsPropertyFromCloudFormation(properties.NeptuneSettings) : undefined);\n    ret.addPropertyResult('oracleSettings', 'OracleSettings', properties.OracleSettings != null ? CfnEndpointOracleSettingsPropertyFromCloudFormation(properties.OracleSettings) : undefined);\n    ret.addPropertyResult('password', 'Password', properties.Password != null ? cfn_parse.FromCloudFormation.getString(properties.Password) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('postgreSqlSettings', 'PostgreSqlSettings', properties.PostgreSqlSettings != null ? CfnEndpointPostgreSqlSettingsPropertyFromCloudFormation(properties.PostgreSqlSettings) : undefined);\n    ret.addPropertyResult('redisSettings', 'RedisSettings', properties.RedisSettings != null ? CfnEndpointRedisSettingsPropertyFromCloudFormation(properties.RedisSettings) : undefined);\n    ret.addPropertyResult('redshiftSettings', 'RedshiftSettings', properties.RedshiftSettings != null ? CfnEndpointRedshiftSettingsPropertyFromCloudFormation(properties.RedshiftSettings) : undefined);\n    ret.addPropertyResult('resourceIdentifier', 'ResourceIdentifier', properties.ResourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdentifier) : undefined);\n    ret.addPropertyResult('s3Settings', 'S3Settings', properties.S3Settings != null ? CfnEndpointS3SettingsPropertyFromCloudFormation(properties.S3Settings) : undefined);\n    ret.addPropertyResult('serverName', 'ServerName', properties.ServerName != null ? cfn_parse.FromCloudFormation.getString(properties.ServerName) : undefined);\n    ret.addPropertyResult('sslMode', 'SslMode', properties.SslMode != null ? cfn_parse.FromCloudFormation.getString(properties.SslMode) : undefined);\n    ret.addPropertyResult('sybaseSettings', 'SybaseSettings', properties.SybaseSettings != null ? CfnEndpointSybaseSettingsPropertyFromCloudFormation(properties.SybaseSettings) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DMS::Endpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                        \n    public readonly attrExternalId: string;\n\n                                                                                                                                                                                                                                    \n    public endpointType: string;\n\nn    public engineName: string;\n\n                                                                                                                                                                                                                           \n    public certificateArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    public databaseName: string | undefined;\n\nn    public docDbSettings: CfnEndpoint.DocDbSettingsProperty | cdk.IResolvable | undefined;\n\nn    public dynamoDbSettings: CfnEndpoint.DynamoDbSettingsProperty | cdk.IResolvable | undefined;\n\nn    public elasticsearchSettings: CfnEndpoint.ElasticsearchSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n    public endpointIdentifier: string | undefined;\n\nn    public extraConnectionAttributes: string | undefined;\n\n                                                                                                                                                                                                                                    \n    public gcpMySqlSettings: CfnEndpoint.GcpMySQLSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    public ibmDb2Settings: CfnEndpoint.IbmDb2SettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public kafkaSettings: CfnEndpoint.KafkaSettingsProperty | cdk.IResolvable | undefined;\n\nn    public kinesisSettings: CfnEndpoint.KinesisSettingsProperty | cdk.IResolvable | undefined;\n\nn    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                   \n    public microsoftSqlServerSettings: CfnEndpoint.MicrosoftSqlServerSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    public mongoDbSettings: CfnEndpoint.MongoDbSettingsProperty | cdk.IResolvable | undefined;\n\nn    public mySqlSettings: CfnEndpoint.MySqlSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                             \n    public neptuneSettings: CfnEndpoint.NeptuneSettingsProperty | cdk.IResolvable | undefined;\n\nn    public oracleSettings: CfnEndpoint.OracleSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public password: string | undefined;\n\n                                                                                                                                                                                                     \n    public port: number | undefined;\n\n                                                                                                                                                                                                                           \n    public postgreSqlSettings: CfnEndpoint.PostgreSqlSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public redisSettings: CfnEndpoint.RedisSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                         \n    public redshiftSettings: CfnEndpoint.RedshiftSettingsProperty | cdk.IResolvable | undefined;\n\nn    public resourceIdentifier: string | undefined;\n\nn    public s3Settings: CfnEndpoint.S3SettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                               \n    public serverName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    public sslMode: string | undefined;\n\nn    public sybaseSettings: CfnEndpoint.SybaseSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    public username: string | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnEndpointProps) {\n        super(scope, id, { type: CfnEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'endpointType', this);\n        cdk.requireProperty(props, 'engineName', this);\n        this.attrExternalId = cdk.Token.asString(this.getAtt('ExternalId'));\n\n        this.endpointType = props.endpointType;\n        this.engineName = props.engineName;\n        this.certificateArn = props.certificateArn;\n        this.databaseName = props.databaseName;\n        this.docDbSettings = props.docDbSettings;\n        this.dynamoDbSettings = props.dynamoDbSettings;\n        this.elasticsearchSettings = props.elasticsearchSettings;\n        this.endpointIdentifier = props.endpointIdentifier;\n        this.extraConnectionAttributes = props.extraConnectionAttributes;\n        this.gcpMySqlSettings = props.gcpMySqlSettings;\n        this.ibmDb2Settings = props.ibmDb2Settings;\n        this.kafkaSettings = props.kafkaSettings;\n        this.kinesisSettings = props.kinesisSettings;\n        this.kmsKeyId = props.kmsKeyId;\n        this.microsoftSqlServerSettings = props.microsoftSqlServerSettings;\n        this.mongoDbSettings = props.mongoDbSettings;\n        this.mySqlSettings = props.mySqlSettings;\n        this.neptuneSettings = props.neptuneSettings;\n        this.oracleSettings = props.oracleSettings;\n        this.password = props.password;\n        this.port = props.port;\n        this.postgreSqlSettings = props.postgreSqlSettings;\n        this.redisSettings = props.redisSettings;\n        this.redshiftSettings = props.redshiftSettings;\n        this.resourceIdentifier = props.resourceIdentifier;\n        this.s3Settings = props.s3Settings;\n        this.serverName = props.serverName;\n        this.sslMode = props.sslMode;\n        this.sybaseSettings = props.sybaseSettings;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DMS::Endpoint\", props.tags, { tagPropertyName: 'tags' });\n        this.username = props.username;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            endpointType: this.endpointType,\n            engineName: this.engineName,\n            certificateArn: this.certificateArn,\n            databaseName: this.databaseName,\n            docDbSettings: this.docDbSettings,\n            dynamoDbSettings: this.dynamoDbSettings,\n            elasticsearchSettings: this.elasticsearchSettings,\n            endpointIdentifier: this.endpointIdentifier,\n            extraConnectionAttributes: this.extraConnectionAttributes,\n            gcpMySqlSettings: this.gcpMySqlSettings,\n            ibmDb2Settings: this.ibmDb2Settings,\n            kafkaSettings: this.kafkaSettings,\n            kinesisSettings: this.kinesisSettings,\n            kmsKeyId: this.kmsKeyId,\n            microsoftSqlServerSettings: this.microsoftSqlServerSettings,\n            mongoDbSettings: this.mongoDbSettings,\n            mySqlSettings: this.mySqlSettings,\n            neptuneSettings: this.neptuneSettings,\n            oracleSettings: this.oracleSettings,\n            password: this.password,\n            port: this.port,\n            postgreSqlSettings: this.postgreSqlSettings,\n            redisSettings: this.redisSettings,\n            redshiftSettings: this.redshiftSettings,\n            resourceIdentifier: this.resourceIdentifier,\n            s3Settings: this.s3Settings,\n            serverName: this.serverName,\n            sslMode: this.sslMode,\n            sybaseSettings: this.sybaseSettings,\n            tags: this.tags.renderTags(),\n            username: this.username,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEndpointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                        \n    export interface DocDbSettingsProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                 \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DocDbSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DocDbSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_DocDbSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"DocDbSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.DocDbSettings` resource\n *\n * @param properties - the TypeScript properties of a `DocDbSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.DocDbSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointDocDbSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_DocDbSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointDocDbSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.DocDbSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.DocDbSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                                                                                                           \n    export interface DynamoDbSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly serviceAccessRoleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynamoDbSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DynamoDbSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_DynamoDbSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('serviceAccessRoleArn', cdk.validateString)(properties.serviceAccessRoleArn));\n    return errors.wrap('supplied properties not correct for \"DynamoDbSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.DynamoDbSettings` resource\n *\n * @param properties - the TypeScript properties of a `DynamoDbSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.DynamoDbSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointDynamoDbSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_DynamoDbSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ServiceAccessRoleArn: cdk.stringToCloudFormation(properties.serviceAccessRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointDynamoDbSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.DynamoDbSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.DynamoDbSettingsProperty>();\n    ret.addPropertyResult('serviceAccessRoleArn', 'ServiceAccessRoleArn', properties.ServiceAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceAccessRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                          \n    export interface ElasticsearchSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly endpointUri?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly errorRetryDuration?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly fullLoadErrorPercentage?: number;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly serviceAccessRoleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ElasticsearchSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ElasticsearchSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_ElasticsearchSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointUri', cdk.validateString)(properties.endpointUri));\n    errors.collect(cdk.propertyValidator('errorRetryDuration', cdk.validateNumber)(properties.errorRetryDuration));\n    errors.collect(cdk.propertyValidator('fullLoadErrorPercentage', cdk.validateNumber)(properties.fullLoadErrorPercentage));\n    errors.collect(cdk.propertyValidator('serviceAccessRoleArn', cdk.validateString)(properties.serviceAccessRoleArn));\n    return errors.wrap('supplied properties not correct for \"ElasticsearchSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.ElasticsearchSettings` resource\n *\n * @param properties - the TypeScript properties of a `ElasticsearchSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.ElasticsearchSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointElasticsearchSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_ElasticsearchSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointUri: cdk.stringToCloudFormation(properties.endpointUri),\n        ErrorRetryDuration: cdk.numberToCloudFormation(properties.errorRetryDuration),\n        FullLoadErrorPercentage: cdk.numberToCloudFormation(properties.fullLoadErrorPercentage),\n        ServiceAccessRoleArn: cdk.stringToCloudFormation(properties.serviceAccessRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointElasticsearchSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.ElasticsearchSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.ElasticsearchSettingsProperty>();\n    ret.addPropertyResult('endpointUri', 'EndpointUri', properties.EndpointUri != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointUri) : undefined);\n    ret.addPropertyResult('errorRetryDuration', 'ErrorRetryDuration', properties.ErrorRetryDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.ErrorRetryDuration) : undefined);\n    ret.addPropertyResult('fullLoadErrorPercentage', 'FullLoadErrorPercentage', properties.FullLoadErrorPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.FullLoadErrorPercentage) : undefined);\n    ret.addPropertyResult('serviceAccessRoleArn', 'ServiceAccessRoleArn', properties.ServiceAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceAccessRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                      \n    export interface GcpMySQLSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly afterConnectScript?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly cleanSourceMetadataOnMismatch?: boolean | cdk.IResolvable;\nn        readonly databaseName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly eventsPollInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly maxFileSize?: number;\nn        readonly parallelLoadThreads?: number;\n                                                                                                                                                                                                                                                       \n        readonly password?: string;\n                                                                                                                                                                                                                                                                 \n        readonly port?: number;\nn        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly secretsManagerSecretId?: string;\n                                                                                                                                                                                                                                              \n        readonly serverName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly serverTimezone?: string;\n                                                                                                                                                                                                                                                        \n        readonly username?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GcpMySQLSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `GcpMySQLSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_GcpMySQLSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('afterConnectScript', cdk.validateString)(properties.afterConnectScript));\n    errors.collect(cdk.propertyValidator('cleanSourceMetadataOnMismatch', cdk.validateBoolean)(properties.cleanSourceMetadataOnMismatch));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('eventsPollInterval', cdk.validateNumber)(properties.eventsPollInterval));\n    errors.collect(cdk.propertyValidator('maxFileSize', cdk.validateNumber)(properties.maxFileSize));\n    errors.collect(cdk.propertyValidator('parallelLoadThreads', cdk.validateNumber)(properties.parallelLoadThreads));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    errors.collect(cdk.propertyValidator('serverName', cdk.validateString)(properties.serverName));\n    errors.collect(cdk.propertyValidator('serverTimezone', cdk.validateString)(properties.serverTimezone));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"GcpMySQLSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.GcpMySQLSettings` resource\n *\n * @param properties - the TypeScript properties of a `GcpMySQLSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.GcpMySQLSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointGcpMySQLSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_GcpMySQLSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AfterConnectScript: cdk.stringToCloudFormation(properties.afterConnectScript),\n        CleanSourceMetadataOnMismatch: cdk.booleanToCloudFormation(properties.cleanSourceMetadataOnMismatch),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        EventsPollInterval: cdk.numberToCloudFormation(properties.eventsPollInterval),\n        MaxFileSize: cdk.numberToCloudFormation(properties.maxFileSize),\n        ParallelLoadThreads: cdk.numberToCloudFormation(properties.parallelLoadThreads),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Port: cdk.numberToCloudFormation(properties.port),\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n        ServerName: cdk.stringToCloudFormation(properties.serverName),\n        ServerTimezone: cdk.stringToCloudFormation(properties.serverTimezone),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointGcpMySQLSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.GcpMySQLSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.GcpMySQLSettingsProperty>();\n    ret.addPropertyResult('afterConnectScript', 'AfterConnectScript', properties.AfterConnectScript != null ? cfn_parse.FromCloudFormation.getString(properties.AfterConnectScript) : undefined);\n    ret.addPropertyResult('cleanSourceMetadataOnMismatch', 'CleanSourceMetadataOnMismatch', properties.CleanSourceMetadataOnMismatch != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CleanSourceMetadataOnMismatch) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('eventsPollInterval', 'EventsPollInterval', properties.EventsPollInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.EventsPollInterval) : undefined);\n    ret.addPropertyResult('maxFileSize', 'MaxFileSize', properties.MaxFileSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxFileSize) : undefined);\n    ret.addPropertyResult('parallelLoadThreads', 'ParallelLoadThreads', properties.ParallelLoadThreads != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParallelLoadThreads) : undefined);\n    ret.addPropertyResult('password', 'Password', properties.Password != null ? cfn_parse.FromCloudFormation.getString(properties.Password) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addPropertyResult('serverName', 'ServerName', properties.ServerName != null ? cfn_parse.FromCloudFormation.getString(properties.ServerName) : undefined);\n    ret.addPropertyResult('serverTimezone', 'ServerTimezone', properties.ServerTimezone != null ? cfn_parse.FromCloudFormation.getString(properties.ServerTimezone) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                         \n    export interface IbmDb2SettingsProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IbmDb2SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `IbmDb2SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_IbmDb2SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"IbmDb2SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.IbmDb2Settings` resource\n *\n * @param properties - the TypeScript properties of a `IbmDb2SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.IbmDb2Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointIbmDb2SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_IbmDb2SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointIbmDb2SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.IbmDb2SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.IbmDb2SettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                        \n    export interface KafkaSettingsProperty {\n                                                                                                                                                                                                                                                                 \n        readonly broker?: string;\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly includeControlDetails?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                            \n        readonly includeNullAndEmpty?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly includeTableAlterOperations?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly includeTransactionDetails?: boolean | cdk.IResolvable;\nn        readonly noHexPrefix?: boolean | cdk.IResolvable;\nn        readonly partitionIncludeSchemaTable?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly saslPassword?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly saslUserName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly securityProtocol?: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly sslCaCertificateArn?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly sslClientCertificateArn?: string;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly sslClientKeyArn?: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly sslClientKeyPassword?: string;\n                                                                                                                                                                                                                                                                \n        readonly topic?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KafkaSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `KafkaSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_KafkaSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('broker', cdk.validateString)(properties.broker));\n    errors.collect(cdk.propertyValidator('includeControlDetails', cdk.validateBoolean)(properties.includeControlDetails));\n    errors.collect(cdk.propertyValidator('includeNullAndEmpty', cdk.validateBoolean)(properties.includeNullAndEmpty));\n    errors.collect(cdk.propertyValidator('includeTableAlterOperations', cdk.validateBoolean)(properties.includeTableAlterOperations));\n    errors.collect(cdk.propertyValidator('includeTransactionDetails', cdk.validateBoolean)(properties.includeTransactionDetails));\n    errors.collect(cdk.propertyValidator('noHexPrefix', cdk.validateBoolean)(properties.noHexPrefix));\n    errors.collect(cdk.propertyValidator('partitionIncludeSchemaTable', cdk.validateBoolean)(properties.partitionIncludeSchemaTable));\n    errors.collect(cdk.propertyValidator('saslPassword', cdk.validateString)(properties.saslPassword));\n    errors.collect(cdk.propertyValidator('saslUserName', cdk.validateString)(properties.saslUserName));\n    errors.collect(cdk.propertyValidator('securityProtocol', cdk.validateString)(properties.securityProtocol));\n    errors.collect(cdk.propertyValidator('sslCaCertificateArn', cdk.validateString)(properties.sslCaCertificateArn));\n    errors.collect(cdk.propertyValidator('sslClientCertificateArn', cdk.validateString)(properties.sslClientCertificateArn));\n    errors.collect(cdk.propertyValidator('sslClientKeyArn', cdk.validateString)(properties.sslClientKeyArn));\n    errors.collect(cdk.propertyValidator('sslClientKeyPassword', cdk.validateString)(properties.sslClientKeyPassword));\n    errors.collect(cdk.propertyValidator('topic', cdk.validateString)(properties.topic));\n    return errors.wrap('supplied properties not correct for \"KafkaSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.KafkaSettings` resource\n *\n * @param properties - the TypeScript properties of a `KafkaSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.KafkaSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointKafkaSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_KafkaSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Broker: cdk.stringToCloudFormation(properties.broker),\n        IncludeControlDetails: cdk.booleanToCloudFormation(properties.includeControlDetails),\n        IncludeNullAndEmpty: cdk.booleanToCloudFormation(properties.includeNullAndEmpty),\n        IncludeTableAlterOperations: cdk.booleanToCloudFormation(properties.includeTableAlterOperations),\n        IncludeTransactionDetails: cdk.booleanToCloudFormation(properties.includeTransactionDetails),\n        NoHexPrefix: cdk.booleanToCloudFormation(properties.noHexPrefix),\n        PartitionIncludeSchemaTable: cdk.booleanToCloudFormation(properties.partitionIncludeSchemaTable),\n        SaslPassword: cdk.stringToCloudFormation(properties.saslPassword),\n        SaslUserName: cdk.stringToCloudFormation(properties.saslUserName),\n        SecurityProtocol: cdk.stringToCloudFormation(properties.securityProtocol),\n        SslCaCertificateArn: cdk.stringToCloudFormation(properties.sslCaCertificateArn),\n        SslClientCertificateArn: cdk.stringToCloudFormation(properties.sslClientCertificateArn),\n        SslClientKeyArn: cdk.stringToCloudFormation(properties.sslClientKeyArn),\n        SslClientKeyPassword: cdk.stringToCloudFormation(properties.sslClientKeyPassword),\n        Topic: cdk.stringToCloudFormation(properties.topic),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointKafkaSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.KafkaSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.KafkaSettingsProperty>();\n    ret.addPropertyResult('broker', 'Broker', properties.Broker != null ? cfn_parse.FromCloudFormation.getString(properties.Broker) : undefined);\n    ret.addPropertyResult('includeControlDetails', 'IncludeControlDetails', properties.IncludeControlDetails != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeControlDetails) : undefined);\n    ret.addPropertyResult('includeNullAndEmpty', 'IncludeNullAndEmpty', properties.IncludeNullAndEmpty != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeNullAndEmpty) : undefined);\n    ret.addPropertyResult('includeTableAlterOperations', 'IncludeTableAlterOperations', properties.IncludeTableAlterOperations != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeTableAlterOperations) : undefined);\n    ret.addPropertyResult('includeTransactionDetails', 'IncludeTransactionDetails', properties.IncludeTransactionDetails != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeTransactionDetails) : undefined);\n    ret.addPropertyResult('noHexPrefix', 'NoHexPrefix', properties.NoHexPrefix != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NoHexPrefix) : undefined);\n    ret.addPropertyResult('partitionIncludeSchemaTable', 'PartitionIncludeSchemaTable', properties.PartitionIncludeSchemaTable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PartitionIncludeSchemaTable) : undefined);\n    ret.addPropertyResult('saslPassword', 'SaslPassword', properties.SaslPassword != null ? cfn_parse.FromCloudFormation.getString(properties.SaslPassword) : undefined);\n    ret.addPropertyResult('saslUserName', 'SaslUserName', properties.SaslUserName != null ? cfn_parse.FromCloudFormation.getString(properties.SaslUserName) : undefined);\n    ret.addPropertyResult('securityProtocol', 'SecurityProtocol', properties.SecurityProtocol != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityProtocol) : undefined);\n    ret.addPropertyResult('sslCaCertificateArn', 'SslCaCertificateArn', properties.SslCaCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.SslCaCertificateArn) : undefined);\n    ret.addPropertyResult('sslClientCertificateArn', 'SslClientCertificateArn', properties.SslClientCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.SslClientCertificateArn) : undefined);\n    ret.addPropertyResult('sslClientKeyArn', 'SslClientKeyArn', properties.SslClientKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.SslClientKeyArn) : undefined);\n    ret.addPropertyResult('sslClientKeyPassword', 'SslClientKeyPassword', properties.SslClientKeyPassword != null ? cfn_parse.FromCloudFormation.getString(properties.SslClientKeyPassword) : undefined);\n    ret.addPropertyResult('topic', 'Topic', properties.Topic != null ? cfn_parse.FromCloudFormation.getString(properties.Topic) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                           \n    export interface KinesisSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly includeControlDetails?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                \n        readonly includeNullAndEmpty?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly includeTableAlterOperations?: boolean | cdk.IResolvable;\nn        readonly includeTransactionDetails?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly messageFormat?: string;\nn        readonly noHexPrefix?: boolean | cdk.IResolvable;\nn        readonly partitionIncludeSchemaTable?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                   \n        readonly serviceAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                        \n        readonly streamArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_KinesisSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('includeControlDetails', cdk.validateBoolean)(properties.includeControlDetails));\n    errors.collect(cdk.propertyValidator('includeNullAndEmpty', cdk.validateBoolean)(properties.includeNullAndEmpty));\n    errors.collect(cdk.propertyValidator('includeTableAlterOperations', cdk.validateBoolean)(properties.includeTableAlterOperations));\n    errors.collect(cdk.propertyValidator('includeTransactionDetails', cdk.validateBoolean)(properties.includeTransactionDetails));\n    errors.collect(cdk.propertyValidator('messageFormat', cdk.validateString)(properties.messageFormat));\n    errors.collect(cdk.propertyValidator('noHexPrefix', cdk.validateBoolean)(properties.noHexPrefix));\n    errors.collect(cdk.propertyValidator('partitionIncludeSchemaTable', cdk.validateBoolean)(properties.partitionIncludeSchemaTable));\n    errors.collect(cdk.propertyValidator('serviceAccessRoleArn', cdk.validateString)(properties.serviceAccessRoleArn));\n    errors.collect(cdk.propertyValidator('streamArn', cdk.validateString)(properties.streamArn));\n    return errors.wrap('supplied properties not correct for \"KinesisSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.KinesisSettings` resource\n *\n * @param properties - the TypeScript properties of a `KinesisSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.KinesisSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointKinesisSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_KinesisSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        IncludeControlDetails: cdk.booleanToCloudFormation(properties.includeControlDetails),\n        IncludeNullAndEmpty: cdk.booleanToCloudFormation(properties.includeNullAndEmpty),\n        IncludeTableAlterOperations: cdk.booleanToCloudFormation(properties.includeTableAlterOperations),\n        IncludeTransactionDetails: cdk.booleanToCloudFormation(properties.includeTransactionDetails),\n        MessageFormat: cdk.stringToCloudFormation(properties.messageFormat),\n        NoHexPrefix: cdk.booleanToCloudFormation(properties.noHexPrefix),\n        PartitionIncludeSchemaTable: cdk.booleanToCloudFormation(properties.partitionIncludeSchemaTable),\n        ServiceAccessRoleArn: cdk.stringToCloudFormation(properties.serviceAccessRoleArn),\n        StreamArn: cdk.stringToCloudFormation(properties.streamArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointKinesisSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.KinesisSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.KinesisSettingsProperty>();\n    ret.addPropertyResult('includeControlDetails', 'IncludeControlDetails', properties.IncludeControlDetails != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeControlDetails) : undefined);\n    ret.addPropertyResult('includeNullAndEmpty', 'IncludeNullAndEmpty', properties.IncludeNullAndEmpty != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeNullAndEmpty) : undefined);\n    ret.addPropertyResult('includeTableAlterOperations', 'IncludeTableAlterOperations', properties.IncludeTableAlterOperations != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeTableAlterOperations) : undefined);\n    ret.addPropertyResult('includeTransactionDetails', 'IncludeTransactionDetails', properties.IncludeTransactionDetails != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeTransactionDetails) : undefined);\n    ret.addPropertyResult('messageFormat', 'MessageFormat', properties.MessageFormat != null ? cfn_parse.FromCloudFormation.getString(properties.MessageFormat) : undefined);\n    ret.addPropertyResult('noHexPrefix', 'NoHexPrefix', properties.NoHexPrefix != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NoHexPrefix) : undefined);\n    ret.addPropertyResult('partitionIncludeSchemaTable', 'PartitionIncludeSchemaTable', properties.PartitionIncludeSchemaTable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PartitionIncludeSchemaTable) : undefined);\n    ret.addPropertyResult('serviceAccessRoleArn', 'ServiceAccessRoleArn', properties.ServiceAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceAccessRoleArn) : undefined);\n    ret.addPropertyResult('streamArn', 'StreamArn', properties.StreamArn != null ? cfn_parse.FromCloudFormation.getString(properties.StreamArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                     \n    export interface MicrosoftSqlServerSettingsProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MicrosoftSqlServerSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MicrosoftSqlServerSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_MicrosoftSqlServerSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"MicrosoftSqlServerSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.MicrosoftSqlServerSettings` resource\n *\n * @param properties - the TypeScript properties of a `MicrosoftSqlServerSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.MicrosoftSqlServerSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointMicrosoftSqlServerSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_MicrosoftSqlServerSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointMicrosoftSqlServerSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.MicrosoftSqlServerSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.MicrosoftSqlServerSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                          \n    export interface MongoDbSettingsProperty {\n                                                                                                                                                                                                                                                                            \n        readonly authMechanism?: string;\n                                                                                                                                                                                                                                                                         \n        readonly authSource?: string;\n                                                                                                                                                                                                                                                                       \n        readonly authType?: string;\n                                                                                                                                                                                                                                                                           \n        readonly databaseName?: string;\n                                                                                                                                                                                                                                                                                \n        readonly docsToInvestigate?: string;\n                                                                                                                                                                                                                                                                           \n        readonly extractDocId?: string;\n                                                                                                                                                                                                                                                                           \n        readonly nestingLevel?: string;\n                                                                                                                                                                                                                                                                       \n        readonly password?: string;\n                                                                                                                                                                                                                                                                   \n        readonly port?: number;\n                                                                                                                                                                                                                                                                                          \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                     \n        readonly secretsManagerSecretId?: string;\n                                                                                                                                                                                                                                                                         \n        readonly serverName?: string;\n                                                                                                                                                                                                                                                                       \n        readonly username?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MongoDbSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MongoDbSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_MongoDbSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authMechanism', cdk.validateString)(properties.authMechanism));\n    errors.collect(cdk.propertyValidator('authSource', cdk.validateString)(properties.authSource));\n    errors.collect(cdk.propertyValidator('authType', cdk.validateString)(properties.authType));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('docsToInvestigate', cdk.validateString)(properties.docsToInvestigate));\n    errors.collect(cdk.propertyValidator('extractDocId', cdk.validateString)(properties.extractDocId));\n    errors.collect(cdk.propertyValidator('nestingLevel', cdk.validateString)(properties.nestingLevel));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    errors.collect(cdk.propertyValidator('serverName', cdk.validateString)(properties.serverName));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"MongoDbSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.MongoDbSettings` resource\n *\n * @param properties - the TypeScript properties of a `MongoDbSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.MongoDbSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointMongoDbSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_MongoDbSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AuthMechanism: cdk.stringToCloudFormation(properties.authMechanism),\n        AuthSource: cdk.stringToCloudFormation(properties.authSource),\n        AuthType: cdk.stringToCloudFormation(properties.authType),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        DocsToInvestigate: cdk.stringToCloudFormation(properties.docsToInvestigate),\n        ExtractDocId: cdk.stringToCloudFormation(properties.extractDocId),\n        NestingLevel: cdk.stringToCloudFormation(properties.nestingLevel),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Port: cdk.numberToCloudFormation(properties.port),\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n        ServerName: cdk.stringToCloudFormation(properties.serverName),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointMongoDbSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.MongoDbSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.MongoDbSettingsProperty>();\n    ret.addPropertyResult('authMechanism', 'AuthMechanism', properties.AuthMechanism != null ? cfn_parse.FromCloudFormation.getString(properties.AuthMechanism) : undefined);\n    ret.addPropertyResult('authSource', 'AuthSource', properties.AuthSource != null ? cfn_parse.FromCloudFormation.getString(properties.AuthSource) : undefined);\n    ret.addPropertyResult('authType', 'AuthType', properties.AuthType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthType) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('docsToInvestigate', 'DocsToInvestigate', properties.DocsToInvestigate != null ? cfn_parse.FromCloudFormation.getString(properties.DocsToInvestigate) : undefined);\n    ret.addPropertyResult('extractDocId', 'ExtractDocId', properties.ExtractDocId != null ? cfn_parse.FromCloudFormation.getString(properties.ExtractDocId) : undefined);\n    ret.addPropertyResult('nestingLevel', 'NestingLevel', properties.NestingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.NestingLevel) : undefined);\n    ret.addPropertyResult('password', 'Password', properties.Password != null ? cfn_parse.FromCloudFormation.getString(properties.Password) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addPropertyResult('serverName', 'ServerName', properties.ServerName != null ? cfn_parse.FromCloudFormation.getString(properties.ServerName) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                        \n    export interface MySqlSettingsProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                 \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MySqlSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MySqlSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_MySqlSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"MySqlSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.MySqlSettings` resource\n *\n * @param properties - the TypeScript properties of a `MySqlSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.MySqlSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointMySqlSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_MySqlSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointMySqlSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.MySqlSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.MySqlSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                        \n    export interface NeptuneSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly errorRetryDuration?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly iamAuthEnabled?: boolean | cdk.IResolvable;\nn        readonly maxFileSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxRetryCount?: number;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly s3BucketFolder?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly s3BucketName?: string;\nn        readonly serviceAccessRoleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NeptuneSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `NeptuneSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_NeptuneSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorRetryDuration', cdk.validateNumber)(properties.errorRetryDuration));\n    errors.collect(cdk.propertyValidator('iamAuthEnabled', cdk.validateBoolean)(properties.iamAuthEnabled));\n    errors.collect(cdk.propertyValidator('maxFileSize', cdk.validateNumber)(properties.maxFileSize));\n    errors.collect(cdk.propertyValidator('maxRetryCount', cdk.validateNumber)(properties.maxRetryCount));\n    errors.collect(cdk.propertyValidator('s3BucketFolder', cdk.validateString)(properties.s3BucketFolder));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('serviceAccessRoleArn', cdk.validateString)(properties.serviceAccessRoleArn));\n    return errors.wrap('supplied properties not correct for \"NeptuneSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.NeptuneSettings` resource\n *\n * @param properties - the TypeScript properties of a `NeptuneSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.NeptuneSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointNeptuneSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_NeptuneSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorRetryDuration: cdk.numberToCloudFormation(properties.errorRetryDuration),\n        IamAuthEnabled: cdk.booleanToCloudFormation(properties.iamAuthEnabled),\n        MaxFileSize: cdk.numberToCloudFormation(properties.maxFileSize),\n        MaxRetryCount: cdk.numberToCloudFormation(properties.maxRetryCount),\n        S3BucketFolder: cdk.stringToCloudFormation(properties.s3BucketFolder),\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        ServiceAccessRoleArn: cdk.stringToCloudFormation(properties.serviceAccessRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointNeptuneSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.NeptuneSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.NeptuneSettingsProperty>();\n    ret.addPropertyResult('errorRetryDuration', 'ErrorRetryDuration', properties.ErrorRetryDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.ErrorRetryDuration) : undefined);\n    ret.addPropertyResult('iamAuthEnabled', 'IamAuthEnabled', properties.IamAuthEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IamAuthEnabled) : undefined);\n    ret.addPropertyResult('maxFileSize', 'MaxFileSize', properties.MaxFileSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxFileSize) : undefined);\n    ret.addPropertyResult('maxRetryCount', 'MaxRetryCount', properties.MaxRetryCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRetryCount) : undefined);\n    ret.addPropertyResult('s3BucketFolder', 'S3BucketFolder', properties.S3BucketFolder != null ? cfn_parse.FromCloudFormation.getString(properties.S3BucketFolder) : undefined);\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', properties.S3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.S3BucketName) : undefined);\n    ret.addPropertyResult('serviceAccessRoleArn', 'ServiceAccessRoleArn', properties.ServiceAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceAccessRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                         \n    export interface OracleSettingsProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly secretsManagerOracleAsmAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly secretsManagerOracleAsmSecretId?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OracleSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `OracleSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_OracleSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerOracleAsmAccessRoleArn', cdk.validateString)(properties.secretsManagerOracleAsmAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerOracleAsmSecretId', cdk.validateString)(properties.secretsManagerOracleAsmSecretId));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"OracleSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.OracleSettings` resource\n *\n * @param properties - the TypeScript properties of a `OracleSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.OracleSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointOracleSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_OracleSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerOracleAsmAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerOracleAsmAccessRoleArn),\n        SecretsManagerOracleAsmSecretId: cdk.stringToCloudFormation(properties.secretsManagerOracleAsmSecretId),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointOracleSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.OracleSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.OracleSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerOracleAsmAccessRoleArn', 'SecretsManagerOracleAsmAccessRoleArn', properties.SecretsManagerOracleAsmAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerOracleAsmAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerOracleAsmSecretId', 'SecretsManagerOracleAsmSecretId', properties.SecretsManagerOracleAsmSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerOracleAsmSecretId) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                             \n    export interface PostgreSqlSettingsProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                           \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PostgreSqlSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `PostgreSqlSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_PostgreSqlSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"PostgreSqlSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.PostgreSqlSettings` resource\n *\n * @param properties - the TypeScript properties of a `PostgreSqlSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.PostgreSqlSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointPostgreSqlSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_PostgreSqlSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointPostgreSqlSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.PostgreSqlSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.PostgreSqlSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                   \n    export interface RedisSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly authPassword?: string;\nn        readonly authType?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly authUserName?: string;\n                                                                                                                                                                                                                                                                          \n        readonly port?: number;\n                                                                                                                                                                                                                                                                  \n        readonly serverName?: string;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly sslCaCertificateArn?: string;\nn        readonly sslSecurityProtocol?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedisSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RedisSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_RedisSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authPassword', cdk.validateString)(properties.authPassword));\n    errors.collect(cdk.propertyValidator('authType', cdk.validateString)(properties.authType));\n    errors.collect(cdk.propertyValidator('authUserName', cdk.validateString)(properties.authUserName));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('serverName', cdk.validateString)(properties.serverName));\n    errors.collect(cdk.propertyValidator('sslCaCertificateArn', cdk.validateString)(properties.sslCaCertificateArn));\n    errors.collect(cdk.propertyValidator('sslSecurityProtocol', cdk.validateString)(properties.sslSecurityProtocol));\n    return errors.wrap('supplied properties not correct for \"RedisSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.RedisSettings` resource\n *\n * @param properties - the TypeScript properties of a `RedisSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.RedisSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointRedisSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_RedisSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AuthPassword: cdk.stringToCloudFormation(properties.authPassword),\n        AuthType: cdk.stringToCloudFormation(properties.authType),\n        AuthUserName: cdk.stringToCloudFormation(properties.authUserName),\n        Port: cdk.numberToCloudFormation(properties.port),\n        ServerName: cdk.stringToCloudFormation(properties.serverName),\n        SslCaCertificateArn: cdk.stringToCloudFormation(properties.sslCaCertificateArn),\n        SslSecurityProtocol: cdk.stringToCloudFormation(properties.sslSecurityProtocol),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointRedisSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.RedisSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.RedisSettingsProperty>();\n    ret.addPropertyResult('authPassword', 'AuthPassword', properties.AuthPassword != null ? cfn_parse.FromCloudFormation.getString(properties.AuthPassword) : undefined);\n    ret.addPropertyResult('authType', 'AuthType', properties.AuthType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthType) : undefined);\n    ret.addPropertyResult('authUserName', 'AuthUserName', properties.AuthUserName != null ? cfn_parse.FromCloudFormation.getString(properties.AuthUserName) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('serverName', 'ServerName', properties.ServerName != null ? cfn_parse.FromCloudFormation.getString(properties.ServerName) : undefined);\n    ret.addPropertyResult('sslCaCertificateArn', 'SslCaCertificateArn', properties.SslCaCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.SslCaCertificateArn) : undefined);\n    ret.addPropertyResult('sslSecurityProtocol', 'SslSecurityProtocol', properties.SslSecurityProtocol != null ? cfn_parse.FromCloudFormation.getString(properties.SslSecurityProtocol) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                           \n    export interface RedshiftSettingsProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                       \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedshiftSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RedshiftSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_RedshiftSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"RedshiftSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.RedshiftSettings` resource\n *\n * @param properties - the TypeScript properties of a `RedshiftSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.RedshiftSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointRedshiftSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_RedshiftSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointRedshiftSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.RedshiftSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.RedshiftSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                     \n    export interface S3SettingsProperty {\n                                                                                                                                                                                                                                                                 \n        readonly bucketFolder?: string;\n                                                                                                                                                                                                                                                               \n        readonly bucketName?: string;\n                                                                                                                                                                                                                                                                    \n        readonly compressionType?: string;\n                                                                                                                                                                                                                                                                 \n        readonly csvDelimiter?: string;\n                                                                                                                                                                                                                                                                    \n        readonly csvRowDelimiter?: string;\n                                                                                                                                                                                                                                                                            \n        readonly externalTableDefinition?: string;\n                                                                                                                                                                                                                                                                         \n        readonly serviceAccessRoleArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `S3SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_S3SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketFolder', cdk.validateString)(properties.bucketFolder));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('compressionType', cdk.validateString)(properties.compressionType));\n    errors.collect(cdk.propertyValidator('csvDelimiter', cdk.validateString)(properties.csvDelimiter));\n    errors.collect(cdk.propertyValidator('csvRowDelimiter', cdk.validateString)(properties.csvRowDelimiter));\n    errors.collect(cdk.propertyValidator('externalTableDefinition', cdk.validateString)(properties.externalTableDefinition));\n    errors.collect(cdk.propertyValidator('serviceAccessRoleArn', cdk.validateString)(properties.serviceAccessRoleArn));\n    return errors.wrap('supplied properties not correct for \"S3SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.S3Settings` resource\n *\n * @param properties - the TypeScript properties of a `S3SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.S3Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointS3SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_S3SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        BucketFolder: cdk.stringToCloudFormation(properties.bucketFolder),\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        CompressionType: cdk.stringToCloudFormation(properties.compressionType),\n        CsvDelimiter: cdk.stringToCloudFormation(properties.csvDelimiter),\n        CsvRowDelimiter: cdk.stringToCloudFormation(properties.csvRowDelimiter),\n        ExternalTableDefinition: cdk.stringToCloudFormation(properties.externalTableDefinition),\n        ServiceAccessRoleArn: cdk.stringToCloudFormation(properties.serviceAccessRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointS3SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.S3SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.S3SettingsProperty>();\n    ret.addPropertyResult('bucketFolder', 'BucketFolder', properties.BucketFolder != null ? cfn_parse.FromCloudFormation.getString(properties.BucketFolder) : undefined);\n    ret.addPropertyResult('bucketName', 'BucketName', properties.BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.BucketName) : undefined);\n    ret.addPropertyResult('compressionType', 'CompressionType', properties.CompressionType != null ? cfn_parse.FromCloudFormation.getString(properties.CompressionType) : undefined);\n    ret.addPropertyResult('csvDelimiter', 'CsvDelimiter', properties.CsvDelimiter != null ? cfn_parse.FromCloudFormation.getString(properties.CsvDelimiter) : undefined);\n    ret.addPropertyResult('csvRowDelimiter', 'CsvRowDelimiter', properties.CsvRowDelimiter != null ? cfn_parse.FromCloudFormation.getString(properties.CsvRowDelimiter) : undefined);\n    ret.addPropertyResult('externalTableDefinition', 'ExternalTableDefinition', properties.ExternalTableDefinition != null ? cfn_parse.FromCloudFormation.getString(properties.ExternalTableDefinition) : undefined);\n    ret.addPropertyResult('serviceAccessRoleArn', 'ServiceAccessRoleArn', properties.ServiceAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceAccessRoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                         \n    export interface SybaseSettingsProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly secretsManagerAccessRoleArn?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly secretsManagerSecretId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SybaseSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `SybaseSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_SybaseSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('secretsManagerAccessRoleArn', cdk.validateString)(properties.secretsManagerAccessRoleArn));\n    errors.collect(cdk.propertyValidator('secretsManagerSecretId', cdk.validateString)(properties.secretsManagerSecretId));\n    return errors.wrap('supplied properties not correct for \"SybaseSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::Endpoint.SybaseSettings` resource\n *\n * @param properties - the TypeScript properties of a `SybaseSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::Endpoint.SybaseSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointSybaseSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_SybaseSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SecretsManagerAccessRoleArn: cdk.stringToCloudFormation(properties.secretsManagerAccessRoleArn),\n        SecretsManagerSecretId: cdk.stringToCloudFormation(properties.secretsManagerSecretId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointSybaseSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.SybaseSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.SybaseSettingsProperty>();\n    ret.addPropertyResult('secretsManagerAccessRoleArn', 'SecretsManagerAccessRoleArn', properties.SecretsManagerAccessRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerAccessRoleArn) : undefined);\n    ret.addPropertyResult('secretsManagerSecretId', 'SecretsManagerSecretId', properties.SecretsManagerSecretId != null ? cfn_parse.FromCloudFormation.getString(properties.SecretsManagerSecretId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnEventSubscriptionProps {\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly snsTopicArn: string;\n\n                                                                                                                                                                                                                                                                                                                     \n    readonly enabled?: boolean | cdk.IResolvable;\n\nn    readonly eventCategories?: string[];\n\nn    readonly sourceIds?: string[];\n\nn    readonly sourceType?: string;\n\n                                                                                                                                                                                                                                                                                                \n    readonly subscriptionName?: string;\n\n                                                                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEventSubscriptionProps`\n *\n * @param properties - the TypeScript properties of a `CfnEventSubscriptionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSubscriptionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('eventCategories', cdk.listValidator(cdk.validateString))(properties.eventCategories));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.requiredValidator)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('sourceIds', cdk.listValidator(cdk.validateString))(properties.sourceIds));\n    errors.collect(cdk.propertyValidator('sourceType', cdk.validateString)(properties.sourceType));\n    errors.collect(cdk.propertyValidator('subscriptionName', cdk.validateString)(properties.subscriptionName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEventSubscriptionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::EventSubscription` resource\n *\n * @param properties - the TypeScript properties of a `CfnEventSubscriptionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::EventSubscription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSubscriptionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSubscriptionPropsValidator(properties).assertSuccess();\n    return {\n        SnsTopicArn: cdk.stringToCloudFormation(properties.snsTopicArn),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        EventCategories: cdk.listMapper(cdk.stringToCloudFormation)(properties.eventCategories),\n        SourceIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceIds),\n        SourceType: cdk.stringToCloudFormation(properties.sourceType),\n        SubscriptionName: cdk.stringToCloudFormation(properties.subscriptionName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSubscriptionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSubscriptionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSubscriptionProps>();\n    ret.addPropertyResult('snsTopicArn', 'SnsTopicArn', cfn_parse.FromCloudFormation.getString(properties.SnsTopicArn));\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('eventCategories', 'EventCategories', properties.EventCategories != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EventCategories) : undefined);\n    ret.addPropertyResult('sourceIds', 'SourceIds', properties.SourceIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourceIds) : undefined);\n    ret.addPropertyResult('sourceType', 'SourceType', properties.SourceType != null ? cfn_parse.FromCloudFormation.getString(properties.SourceType) : undefined);\n    ret.addPropertyResult('subscriptionName', 'SubscriptionName', properties.SubscriptionName != null ? cfn_parse.FromCloudFormation.getString(properties.SubscriptionName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEventSubscription extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DMS::EventSubscription\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEventSubscription {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEventSubscriptionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEventSubscription(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public snsTopicArn: string;\n\n                                                                                                                                                                                                                                                                                                                     \n    public enabled: boolean | cdk.IResolvable | undefined;\n\nn    public eventCategories: string[] | undefined;\n\nn    public sourceIds: string[] | undefined;\n\nn    public sourceType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                \n    public subscriptionName: string | undefined;\n\n                                                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnEventSubscriptionProps) {\n        super(scope, id, { type: CfnEventSubscription.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'snsTopicArn', this);\n\n        this.snsTopicArn = props.snsTopicArn;\n        this.enabled = props.enabled;\n        this.eventCategories = props.eventCategories;\n        this.sourceIds = props.sourceIds;\n        this.sourceType = props.sourceType;\n        this.subscriptionName = props.subscriptionName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DMS::EventSubscription\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEventSubscription.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            snsTopicArn: this.snsTopicArn,\n            enabled: this.enabled,\n            eventCategories: this.eventCategories,\n            sourceIds: this.sourceIds,\n            sourceType: this.sourceType,\n            subscriptionName: this.subscriptionName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEventSubscriptionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnReplicationInstanceProps {\n\nn    readonly replicationInstanceClass: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly allocatedStorage?: number;\n\nn    readonly allowMajorVersionUpgrade?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly autoMinorVersionUpgrade?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly engineVersion?: string;\n\nn    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    readonly multiAz?: boolean | cdk.IResolvable;\n\nn    readonly preferredMaintenanceWindow?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly publiclyAccessible?: boolean | cdk.IResolvable;\n\nn    readonly replicationInstanceIdentifier?: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly replicationSubnetGroupIdentifier?: string;\n\nn    readonly resourceIdentifier?: string;\n\n                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                \n    readonly vpcSecurityGroupIds?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReplicationInstanceProps`\n *\n * @param properties - the TypeScript properties of a `CfnReplicationInstanceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationInstancePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocatedStorage', cdk.validateNumber)(properties.allocatedStorage));\n    errors.collect(cdk.propertyValidator('allowMajorVersionUpgrade', cdk.validateBoolean)(properties.allowMajorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('autoMinorVersionUpgrade', cdk.validateBoolean)(properties.autoMinorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('multiAz', cdk.validateBoolean)(properties.multiAz));\n    errors.collect(cdk.propertyValidator('preferredMaintenanceWindow', cdk.validateString)(properties.preferredMaintenanceWindow));\n    errors.collect(cdk.propertyValidator('publiclyAccessible', cdk.validateBoolean)(properties.publiclyAccessible));\n    errors.collect(cdk.propertyValidator('replicationInstanceClass', cdk.requiredValidator)(properties.replicationInstanceClass));\n    errors.collect(cdk.propertyValidator('replicationInstanceClass', cdk.validateString)(properties.replicationInstanceClass));\n    errors.collect(cdk.propertyValidator('replicationInstanceIdentifier', cdk.validateString)(properties.replicationInstanceIdentifier));\n    errors.collect(cdk.propertyValidator('replicationSubnetGroupIdentifier', cdk.validateString)(properties.replicationSubnetGroupIdentifier));\n    errors.collect(cdk.propertyValidator('resourceIdentifier', cdk.validateString)(properties.resourceIdentifier));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcSecurityGroupIds', cdk.listValidator(cdk.validateString))(properties.vpcSecurityGroupIds));\n    return errors.wrap('supplied properties not correct for \"CfnReplicationInstanceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::ReplicationInstance` resource\n *\n * @param properties - the TypeScript properties of a `CfnReplicationInstanceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::ReplicationInstance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationInstancePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationInstancePropsValidator(properties).assertSuccess();\n    return {\n        ReplicationInstanceClass: cdk.stringToCloudFormation(properties.replicationInstanceClass),\n        AllocatedStorage: cdk.numberToCloudFormation(properties.allocatedStorage),\n        AllowMajorVersionUpgrade: cdk.booleanToCloudFormation(properties.allowMajorVersionUpgrade),\n        AutoMinorVersionUpgrade: cdk.booleanToCloudFormation(properties.autoMinorVersionUpgrade),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MultiAZ: cdk.booleanToCloudFormation(properties.multiAz),\n        PreferredMaintenanceWindow: cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),\n        PubliclyAccessible: cdk.booleanToCloudFormation(properties.publiclyAccessible),\n        ReplicationInstanceIdentifier: cdk.stringToCloudFormation(properties.replicationInstanceIdentifier),\n        ReplicationSubnetGroupIdentifier: cdk.stringToCloudFormation(properties.replicationSubnetGroupIdentifier),\n        ResourceIdentifier: cdk.stringToCloudFormation(properties.resourceIdentifier),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcSecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcSecurityGroupIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationInstancePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationInstanceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationInstanceProps>();\n    ret.addPropertyResult('replicationInstanceClass', 'ReplicationInstanceClass', cfn_parse.FromCloudFormation.getString(properties.ReplicationInstanceClass));\n    ret.addPropertyResult('allocatedStorage', 'AllocatedStorage', properties.AllocatedStorage != null ? cfn_parse.FromCloudFormation.getNumber(properties.AllocatedStorage) : undefined);\n    ret.addPropertyResult('allowMajorVersionUpgrade', 'AllowMajorVersionUpgrade', properties.AllowMajorVersionUpgrade != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowMajorVersionUpgrade) : undefined);\n    ret.addPropertyResult('autoMinorVersionUpgrade', 'AutoMinorVersionUpgrade', properties.AutoMinorVersionUpgrade != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoMinorVersionUpgrade) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('engineVersion', 'EngineVersion', properties.EngineVersion != null ? cfn_parse.FromCloudFormation.getString(properties.EngineVersion) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('multiAz', 'MultiAZ', properties.MultiAZ != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MultiAZ) : undefined);\n    ret.addPropertyResult('preferredMaintenanceWindow', 'PreferredMaintenanceWindow', properties.PreferredMaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow) : undefined);\n    ret.addPropertyResult('publiclyAccessible', 'PubliclyAccessible', properties.PubliclyAccessible != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible) : undefined);\n    ret.addPropertyResult('replicationInstanceIdentifier', 'ReplicationInstanceIdentifier', properties.ReplicationInstanceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationInstanceIdentifier) : undefined);\n    ret.addPropertyResult('replicationSubnetGroupIdentifier', 'ReplicationSubnetGroupIdentifier', properties.ReplicationSubnetGroupIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationSubnetGroupIdentifier) : undefined);\n    ret.addPropertyResult('resourceIdentifier', 'ResourceIdentifier', properties.ResourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdentifier) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcSecurityGroupIds', 'VpcSecurityGroupIds', properties.VpcSecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcSecurityGroupIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                              \nexport class CfnReplicationInstance extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DMS::ReplicationInstance\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReplicationInstance {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReplicationInstancePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReplicationInstance(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                           \n    public readonly attrReplicationInstancePrivateIpAddresses: string[];\n\n                                                                                                                                                         \n    public readonly attrReplicationInstancePublicIpAddresses: string[];\n\nn    public replicationInstanceClass: string;\n\n                                                                                                                                                                                                                                                                                            \n    public allocatedStorage: number | undefined;\n\nn    public allowMajorVersionUpgrade: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public autoMinorVersionUpgrade: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    public engineVersion: string | undefined;\n\nn    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    public multiAz: boolean | cdk.IResolvable | undefined;\n\nn    public preferredMaintenanceWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public publiclyAccessible: boolean | cdk.IResolvable | undefined;\n\nn    public replicationInstanceIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public replicationSubnetGroupIdentifier: string | undefined;\n\nn    public resourceIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                \n    public vpcSecurityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnReplicationInstanceProps) {\n        super(scope, id, { type: CfnReplicationInstance.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'replicationInstanceClass', this);\n        this.attrReplicationInstancePrivateIpAddresses = cdk.Token.asList(this.getAtt('ReplicationInstancePrivateIpAddresses'));\n        this.attrReplicationInstancePublicIpAddresses = cdk.Token.asList(this.getAtt('ReplicationInstancePublicIpAddresses'));\n\n        this.replicationInstanceClass = props.replicationInstanceClass;\n        this.allocatedStorage = props.allocatedStorage;\n        this.allowMajorVersionUpgrade = props.allowMajorVersionUpgrade;\n        this.autoMinorVersionUpgrade = props.autoMinorVersionUpgrade;\n        this.availabilityZone = props.availabilityZone;\n        this.engineVersion = props.engineVersion;\n        this.kmsKeyId = props.kmsKeyId;\n        this.multiAz = props.multiAz;\n        this.preferredMaintenanceWindow = props.preferredMaintenanceWindow;\n        this.publiclyAccessible = props.publiclyAccessible;\n        this.replicationInstanceIdentifier = props.replicationInstanceIdentifier;\n        this.replicationSubnetGroupIdentifier = props.replicationSubnetGroupIdentifier;\n        this.resourceIdentifier = props.resourceIdentifier;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DMS::ReplicationInstance\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcSecurityGroupIds = props.vpcSecurityGroupIds;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReplicationInstance.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            replicationInstanceClass: this.replicationInstanceClass,\n            allocatedStorage: this.allocatedStorage,\n            allowMajorVersionUpgrade: this.allowMajorVersionUpgrade,\n            autoMinorVersionUpgrade: this.autoMinorVersionUpgrade,\n            availabilityZone: this.availabilityZone,\n            engineVersion: this.engineVersion,\n            kmsKeyId: this.kmsKeyId,\n            multiAz: this.multiAz,\n            preferredMaintenanceWindow: this.preferredMaintenanceWindow,\n            publiclyAccessible: this.publiclyAccessible,\n            replicationInstanceIdentifier: this.replicationInstanceIdentifier,\n            replicationSubnetGroupIdentifier: this.replicationSubnetGroupIdentifier,\n            resourceIdentifier: this.resourceIdentifier,\n            tags: this.tags.renderTags(),\n            vpcSecurityGroupIds: this.vpcSecurityGroupIds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReplicationInstancePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                            \nexport interface CfnReplicationSubnetGroupProps {\n\n                                                                                                                                                                                                                                                            \n    readonly replicationSubnetGroupDescription: string;\n\n                                                                                                                                                                                                                                                         \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly replicationSubnetGroupIdentifier?: string;\n\n                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReplicationSubnetGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnReplicationSubnetGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationSubnetGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replicationSubnetGroupDescription', cdk.requiredValidator)(properties.replicationSubnetGroupDescription));\n    errors.collect(cdk.propertyValidator('replicationSubnetGroupDescription', cdk.validateString)(properties.replicationSubnetGroupDescription));\n    errors.collect(cdk.propertyValidator('replicationSubnetGroupIdentifier', cdk.validateString)(properties.replicationSubnetGroupIdentifier));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnReplicationSubnetGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::ReplicationSubnetGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnReplicationSubnetGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::ReplicationSubnetGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationSubnetGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationSubnetGroupPropsValidator(properties).assertSuccess();\n    return {\n        ReplicationSubnetGroupDescription: cdk.stringToCloudFormation(properties.replicationSubnetGroupDescription),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        ReplicationSubnetGroupIdentifier: cdk.stringToCloudFormation(properties.replicationSubnetGroupIdentifier),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationSubnetGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationSubnetGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationSubnetGroupProps>();\n    ret.addPropertyResult('replicationSubnetGroupDescription', 'ReplicationSubnetGroupDescription', cfn_parse.FromCloudFormation.getString(properties.ReplicationSubnetGroupDescription));\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('replicationSubnetGroupIdentifier', 'ReplicationSubnetGroupIdentifier', properties.ReplicationSubnetGroupIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationSubnetGroupIdentifier) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnReplicationSubnetGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DMS::ReplicationSubnetGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReplicationSubnetGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReplicationSubnetGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReplicationSubnetGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                            \n    public replicationSubnetGroupDescription: string;\n\n                                                                                                                                                                                                                                                         \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public replicationSubnetGroupIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnReplicationSubnetGroupProps) {\n        super(scope, id, { type: CfnReplicationSubnetGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'replicationSubnetGroupDescription', this);\n        cdk.requireProperty(props, 'subnetIds', this);\n\n        this.replicationSubnetGroupDescription = props.replicationSubnetGroupDescription;\n        this.subnetIds = props.subnetIds;\n        this.replicationSubnetGroupIdentifier = props.replicationSubnetGroupIdentifier;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DMS::ReplicationSubnetGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReplicationSubnetGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            replicationSubnetGroupDescription: this.replicationSubnetGroupDescription,\n            subnetIds: this.subnetIds,\n            replicationSubnetGroupIdentifier: this.replicationSubnetGroupIdentifier,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReplicationSubnetGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                              \nexport interface CfnReplicationTaskProps {\n\n                                                                                                                                                                                                                                                                \n    readonly migrationType: string;\n\n                                                                                                                                                                                                                                                       \n    readonly replicationInstanceArn: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly sourceEndpointArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly tableMappings: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly targetEndpointArn: string;\n\nn    readonly cdcStartPosition?: string;\n\n                                                                                                                                                                                                                                                       \n    readonly cdcStartTime?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly cdcStopPosition?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly replicationTaskIdentifier?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly replicationTaskSettings?: string;\n\nn    readonly resourceIdentifier?: string;\n\n                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                    \n    readonly taskData?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReplicationTaskProps`\n *\n * @param properties - the TypeScript properties of a `CfnReplicationTaskProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationTaskPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cdcStartPosition', cdk.validateString)(properties.cdcStartPosition));\n    errors.collect(cdk.propertyValidator('cdcStartTime', cdk.validateNumber)(properties.cdcStartTime));\n    errors.collect(cdk.propertyValidator('cdcStopPosition', cdk.validateString)(properties.cdcStopPosition));\n    errors.collect(cdk.propertyValidator('migrationType', cdk.requiredValidator)(properties.migrationType));\n    errors.collect(cdk.propertyValidator('migrationType', cdk.validateString)(properties.migrationType));\n    errors.collect(cdk.propertyValidator('replicationInstanceArn', cdk.requiredValidator)(properties.replicationInstanceArn));\n    errors.collect(cdk.propertyValidator('replicationInstanceArn', cdk.validateString)(properties.replicationInstanceArn));\n    errors.collect(cdk.propertyValidator('replicationTaskIdentifier', cdk.validateString)(properties.replicationTaskIdentifier));\n    errors.collect(cdk.propertyValidator('replicationTaskSettings', cdk.validateString)(properties.replicationTaskSettings));\n    errors.collect(cdk.propertyValidator('resourceIdentifier', cdk.validateString)(properties.resourceIdentifier));\n    errors.collect(cdk.propertyValidator('sourceEndpointArn', cdk.requiredValidator)(properties.sourceEndpointArn));\n    errors.collect(cdk.propertyValidator('sourceEndpointArn', cdk.validateString)(properties.sourceEndpointArn));\n    errors.collect(cdk.propertyValidator('tableMappings', cdk.requiredValidator)(properties.tableMappings));\n    errors.collect(cdk.propertyValidator('tableMappings', cdk.validateString)(properties.tableMappings));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('targetEndpointArn', cdk.requiredValidator)(properties.targetEndpointArn));\n    errors.collect(cdk.propertyValidator('targetEndpointArn', cdk.validateString)(properties.targetEndpointArn));\n    errors.collect(cdk.propertyValidator('taskData', cdk.validateString)(properties.taskData));\n    return errors.wrap('supplied properties not correct for \"CfnReplicationTaskProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DMS::ReplicationTask` resource\n *\n * @param properties - the TypeScript properties of a `CfnReplicationTaskProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DMS::ReplicationTask` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationTaskPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationTaskPropsValidator(properties).assertSuccess();\n    return {\n        MigrationType: cdk.stringToCloudFormation(properties.migrationType),\n        ReplicationInstanceArn: cdk.stringToCloudFormation(properties.replicationInstanceArn),\n        SourceEndpointArn: cdk.stringToCloudFormation(properties.sourceEndpointArn),\n        TableMappings: cdk.stringToCloudFormation(properties.tableMappings),\n        TargetEndpointArn: cdk.stringToCloudFormation(properties.targetEndpointArn),\n        CdcStartPosition: cdk.stringToCloudFormation(properties.cdcStartPosition),\n        CdcStartTime: cdk.numberToCloudFormation(properties.cdcStartTime),\n        CdcStopPosition: cdk.stringToCloudFormation(properties.cdcStopPosition),\n        ReplicationTaskIdentifier: cdk.stringToCloudFormation(properties.replicationTaskIdentifier),\n        ReplicationTaskSettings: cdk.stringToCloudFormation(properties.replicationTaskSettings),\n        ResourceIdentifier: cdk.stringToCloudFormation(properties.resourceIdentifier),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TaskData: cdk.stringToCloudFormation(properties.taskData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationTaskPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationTaskProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationTaskProps>();\n    ret.addPropertyResult('migrationType', 'MigrationType', cfn_parse.FromCloudFormation.getString(properties.MigrationType));\n    ret.addPropertyResult('replicationInstanceArn', 'ReplicationInstanceArn', cfn_parse.FromCloudFormation.getString(properties.ReplicationInstanceArn));\n    ret.addPropertyResult('sourceEndpointArn', 'SourceEndpointArn', cfn_parse.FromCloudFormation.getString(properties.SourceEndpointArn));\n    ret.addPropertyResult('tableMappings', 'TableMappings', cfn_parse.FromCloudFormation.getString(properties.TableMappings));\n    ret.addPropertyResult('targetEndpointArn', 'TargetEndpointArn', cfn_parse.FromCloudFormation.getString(properties.TargetEndpointArn));\n    ret.addPropertyResult('cdcStartPosition', 'CdcStartPosition', properties.CdcStartPosition != null ? cfn_parse.FromCloudFormation.getString(properties.CdcStartPosition) : undefined);\n    ret.addPropertyResult('cdcStartTime', 'CdcStartTime', properties.CdcStartTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.CdcStartTime) : undefined);\n    ret.addPropertyResult('cdcStopPosition', 'CdcStopPosition', properties.CdcStopPosition != null ? cfn_parse.FromCloudFormation.getString(properties.CdcStopPosition) : undefined);\n    ret.addPropertyResult('replicationTaskIdentifier', 'ReplicationTaskIdentifier', properties.ReplicationTaskIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationTaskIdentifier) : undefined);\n    ret.addPropertyResult('replicationTaskSettings', 'ReplicationTaskSettings', properties.ReplicationTaskSettings != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationTaskSettings) : undefined);\n    ret.addPropertyResult('resourceIdentifier', 'ResourceIdentifier', properties.ResourceIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceIdentifier) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('taskData', 'TaskData', properties.TaskData != null ? cfn_parse.FromCloudFormation.getString(properties.TaskData) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                          \nexport class CfnReplicationTask extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DMS::ReplicationTask\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReplicationTask {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReplicationTaskPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReplicationTask(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                \n    public migrationType: string;\n\n                                                                                                                                                                                                                                                       \n    public replicationInstanceArn: string;\n\n                                                                                                                                                                                                                                                                    \n    public sourceEndpointArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public tableMappings: string;\n\n                                                                                                                                                                                                                                                                    \n    public targetEndpointArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public cdcStartPosition: string | undefined;\n\n                                                                                                                                                                                                                                                       \n    public cdcStartTime: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public cdcStopPosition: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public replicationTaskIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public replicationTaskSettings: string | undefined;\n\nn    public resourceIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                    \n    public taskData: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnReplicationTaskProps) {\n        super(scope, id, { type: CfnReplicationTask.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'migrationType', this);\n        cdk.requireProperty(props, 'replicationInstanceArn', this);\n        cdk.requireProperty(props, 'sourceEndpointArn', this);\n        cdk.requireProperty(props, 'tableMappings', this);\n        cdk.requireProperty(props, 'targetEndpointArn', this);\n\n        this.migrationType = props.migrationType;\n        this.replicationInstanceArn = props.replicationInstanceArn;\n        this.sourceEndpointArn = props.sourceEndpointArn;\n        this.tableMappings = props.tableMappings;\n        this.targetEndpointArn = props.targetEndpointArn;\n        this.cdcStartPosition = props.cdcStartPosition;\n        this.cdcStartTime = props.cdcStartTime;\n        this.cdcStopPosition = props.cdcStopPosition;\n        this.replicationTaskIdentifier = props.replicationTaskIdentifier;\n        this.replicationTaskSettings = props.replicationTaskSettings;\n        this.resourceIdentifier = props.resourceIdentifier;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::DMS::ReplicationTask\", props.tags, { tagPropertyName: 'tags' });\n        this.taskData = props.taskData;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReplicationTask.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            migrationType: this.migrationType,\n            replicationInstanceArn: this.replicationInstanceArn,\n            sourceEndpointArn: this.sourceEndpointArn,\n            tableMappings: this.tableMappings,\n            targetEndpointArn: this.targetEndpointArn,\n            cdcStartPosition: this.cdcStartPosition,\n            cdcStartTime: this.cdcStartTime,\n            cdcStopPosition: this.cdcStopPosition,\n            replicationTaskIdentifier: this.replicationTaskIdentifier,\n            replicationTaskSettings: this.replicationTaskSettings,\n            resourceIdentifier: this.resourceIdentifier,\n            tags: this.tags.renderTags(),\n            taskData: this.taskData,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReplicationTaskPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
