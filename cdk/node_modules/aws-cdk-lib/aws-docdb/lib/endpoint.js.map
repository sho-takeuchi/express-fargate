{
  "version": 3,
  "sources": ["endpoint.ts"],
  "sourcesContent": ["import { Token } from '../../core';\n\n                                                                                                                      \nexport class Endpoint {\n  /**\n   * The minimum port value\n   */\n  private static readonly MIN_PORT = 1;\n\n  /**\n   * The maximum port value\n   */\n  private static readonly MAX_PORT = 65535;\n\n  /**\n   * Determines if a port is valid\n   *\n   * @param port: The port number\n   * @returns boolean whether the port is valid\n   */\n  private static isValidPort(port: number): boolean {\n    return Number.isInteger(port) && port >= Endpoint.MIN_PORT && port <= Endpoint.MAX_PORT;\n  }\n\n                                             \n  public readonly hostname: string;\n\n                                                                                                                                                                                                                    \n  public readonly port: number;\n\n                                                                        \n  public readonly socketAddress: string;\n\n                                                                                                                                                                       \n  constructor(address: string, port: number) {\n    if (!Token.isUnresolved(port) && !Endpoint.isValidPort(port)) {\n      throw new Error(`Port must be an integer between [${Endpoint.MIN_PORT}, ${Endpoint.MAX_PORT}] but got: ${port}`);\n    }\n\n    this.hostname = address;\n    this.port = port;\n\n    const portDesc = Token.isUnresolved(port) ? Token.asString(port) : port;\n    this.socketAddress = `${address}:${portDesc}`;\n  }\n\nn  public portAsString(): string {\n    if (Token.isUnresolved(this.port)) {\n      return Token.asString(this.port);\n    } else {\n      return this.port.toString();\n    }\n  }\n}\n"],
  "mappings": "oJAAA,OAAA,QAAA,cAGA,cAAqB,CA+BnB,YAAY,QAAiB,KAAY,CACvC,GAAI,CAAC,OAAA,MAAM,aAAa,OAAS,CAAC,SAAS,YAAY,MACrD,KAAM,IAAI,OAAM,oCAAoC,SAAS,aAAa,SAAS,sBAAsB,QAG3G,KAAK,SAAW,QAChB,KAAK,KAAO,KAEZ,KAAM,UAAW,OAAA,MAAM,aAAa,MAAQ,OAAA,MAAM,SAAS,MAAQ,KACnE,KAAK,cAAgB,GAAG,WAAW,iBAvBtB,aAAY,KAAY,CACrC,MAAO,QAAO,UAAU,OAAS,MAAQ,SAAS,UAAY,MAAQ,SAAS,SA0B1E,cAAY,CACjB,MAAI,QAAA,MAAM,aAAa,KAAK,MACnB,OAAA,MAAM,SAAS,KAAK,MAEpB,KAAK,KAAK,YAhDvB,QAAA,SAAA,oGAI0B,SAAA,SAAW,EAKX,SAAA,SAAW",
  "names": []
}
