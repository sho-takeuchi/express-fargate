{
  "version": 3,
  "sources": ["instance.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as cdk from '../../core';\nimport { ArnFormat } from '../../core';\nimport { Construct } from 'constructs';\nimport { IDatabaseCluster } from './cluster-ref';\nimport { CfnDBInstance } from './docdb.generated';\nimport { Endpoint } from './endpoint';\n\n                              \nexport interface IDatabaseInstance extends cdk.IResource {\n                                         \n  readonly instanceIdentifier: string;\n\n                                  \n  readonly instanceArn: string;\n\n                                                                             \n  readonly dbInstanceEndpointAddress: string;\n\n                                                                      \n  readonly dbInstanceEndpointPort: string;\n\n                                       \n  readonly instanceEndpoint: Endpoint;\n}\n\n                                                        \nexport interface DatabaseInstanceAttributes {\n                                         \n  readonly instanceIdentifier: string;\n\n                                      \n  readonly instanceEndpointAddress: string;\n\n                                   \n  readonly port: number;\n}\n\n/**\n * A new or imported database instance.\n */\nabstract class DatabaseInstanceBase extends cdk.Resource implements IDatabaseInstance {\n                                                      \n  public static fromDatabaseInstanceAttributes(scope: Construct, id: string, attrs: DatabaseInstanceAttributes): IDatabaseInstance {\n    class Import extends DatabaseInstanceBase implements IDatabaseInstance {\n      public readonly defaultPort = ec2.Port.tcp(attrs.port);\n      public readonly instanceIdentifier = attrs.instanceIdentifier;\n      public readonly dbInstanceEndpointAddress = attrs.instanceEndpointAddress;\n      public readonly dbInstanceEndpointPort = attrs.port.toString();\n      public readonly instanceEndpoint = new Endpoint(attrs.instanceEndpointAddress, attrs.port);\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly instanceIdentifier: string;\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly dbInstanceEndpointAddress: string;\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly dbInstanceEndpointPort: string;\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly instanceEndpoint: Endpoint;\n\n                                  \n  public get instanceArn(): string {\n    return cdk.Stack.of(this).formatArn({\n      service: 'docdb',\n      resource: 'db',\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n      resourceName: this.instanceIdentifier,\n    });\n  }\n}\n\n                                                            \nexport interface DatabaseInstanceProps {\n                                                                                 \n  readonly cluster: IDatabaseCluster;\n\n                                                                     \n  readonly instanceType: ec2.InstanceType;\n\n                                                                                                                            \n  readonly availabilityZone?: string;\n\n                                                                                                                                                                          \n  readonly dbInstanceName?: string;\n\n                                                                                                                                                              \n  readonly autoMinorVersionUpgrade?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly preferredMaintenanceWindow?: string;\n\n                                                                                                                                                                          \n  readonly removalPolicy?: cdk.RemovalPolicy\n}\n\n                                                                     \nexport class DatabaseInstance extends DatabaseInstanceBase implements IDatabaseInstance {\n                                                \n  public readonly cluster: IDatabaseCluster;\n\n                            \n  public readonly instanceIdentifier: string;\n\n                            \n  public readonly dbInstanceEndpointAddress: string;\n\n                            \n  public readonly dbInstanceEndpointPort: string;\n\n                            \n  public readonly instanceEndpoint: Endpoint;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceProps) {\n    super(scope, id);\n\n    const instance = new CfnDBInstance(this, 'Resource', {\n      dbClusterIdentifier: props.cluster.clusterIdentifier,\n      dbInstanceClass: `db.${props.instanceType}`,\n      autoMinorVersionUpgrade: props.autoMinorVersionUpgrade ?? true,\n      availabilityZone: props.availabilityZone,\n      dbInstanceIdentifier: props.dbInstanceName,\n      preferredMaintenanceWindow: props.preferredMaintenanceWindow,\n    });\n\n    this.cluster = props.cluster;\n    this.instanceIdentifier = instance.ref;\n    this.dbInstanceEndpointAddress = instance.attrEndpoint;\n    this.dbInstanceEndpointPort = instance.attrPort;\n\n    // create a number token that represents the port of the instance\n    const portAttribute = cdk.Token.asNumber(instance.attrPort);\n    this.instanceEndpoint = new Endpoint(instance.attrEndpoint, portAttribute);\n\n    instance.applyRemovalPolicy(props.removalPolicy, {\n      applyToUpdateReplacePolicy: true,\n    });\n  }\n}\n"],
  "mappings": "uNAAA,IAAA,QAAA,iBACA,IAAA,QAAA,cACA,OAAA,QAAA,cAGA,kBAAA,QAAA,qBACA,WAAA,QAAA,cAmCA,kCAA4C,KAAI,QAAQ,OAExC,gCAA+B,MAAkB,GAAY,MAAiC,CAC1G,oBAAqB,qBAAoB,CAAzC,aAAA,qBACkB,KAAA,YAAc,IAAI,KAAK,IAAI,MAAM,MACjC,KAAA,mBAAqB,MAAM,mBAC3B,KAAA,0BAA4B,MAAM,wBAClC,KAAA,uBAAyB,MAAM,KAAK,WACpC,KAAA,iBAAmB,GAAI,YAAA,SAAS,MAAM,wBAAyB,MAAM,OAGvF,MAAO,IAAI,QAAO,MAAO,OAqBhB,cAAW,CACpB,MAAO,KAAI,MAAM,GAAG,MAAM,UAAU,CAClC,QAAS,QACT,SAAU,KACV,UAAW,OAAA,UAAU,oBACrB,aAAc,KAAK,sBA8BzB,8BAAsC,qBAAoB,CAgBxD,YAAY,MAAkB,GAAY,MAA4B,QACpE,MAAM,MAAO,+EAEb,KAAM,UAAW,GAAI,mBAAA,cAAc,KAAM,WAAY,CACnD,oBAAqB,MAAM,QAAQ,kBACnC,gBAAiB,MAAM,MAAM,eAC7B,wBAAuB,IAAE,MAAM,2BAAuB,MAAA,KAAA,OAAA,GAAI,GAC1D,iBAAkB,MAAM,iBACxB,qBAAsB,MAAM,eAC5B,2BAA4B,MAAM,6BAGpC,KAAK,QAAU,MAAM,QACrB,KAAK,mBAAqB,SAAS,IACnC,KAAK,0BAA4B,SAAS,aAC1C,KAAK,uBAAyB,SAAS,SAGvC,KAAM,eAAgB,IAAI,MAAM,SAAS,SAAS,UAClD,KAAK,iBAAmB,GAAI,YAAA,SAAS,SAAS,aAAc,eAE5D,SAAS,mBAAmB,MAAM,cAAe,CAC/C,2BAA4B,MAtClC,QAAA,iBAAA",
  "names": []
}
