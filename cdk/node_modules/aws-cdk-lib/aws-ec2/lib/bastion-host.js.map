{
  "version": 3,
  "sources": ["bastion-host.ts"],
  "sourcesContent": ["import { IPrincipal, IRole, PolicyStatement } from '../../aws-iam';\nimport { CfnOutput, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { AmazonLinuxGeneration, InstanceArchitecture, InstanceClass, InstanceSize, InstanceType } from '.';\nimport { CloudFormationInit } from './cfn-init';\nimport { Connections } from './connections';\nimport { ApplyCloudFormationInitOptions, IInstance, Instance } from './instance';\nimport { AmazonLinuxCpuType, IMachineImage, MachineImage } from './machine-image';\nimport { IPeer } from './peer';\nimport { Port } from './port';\nimport { ISecurityGroup } from './security-group';\nimport { BlockDevice } from './volume';\nimport { IVpc, SubnetSelection } from './vpc';\n\n                                               \nexport interface BastionHostLinuxProps {\n\n                                                                                                   \n  readonly availabilityZone?: string;\n\n                                               \n  readonly vpc: IVpc;\n\n                                                                          \n  readonly instanceName?: string;\n\n                                                                                                                                                                                                                                                                                                    \n  readonly subnetSelection?: SubnetSelection;\n\n                                                                                                                                                          \n  readonly securityGroup?: ISecurityGroup;\n\n                                                                   \n  readonly instanceType?: InstanceType;\n\n                                                                                                                                                                                                                                                                   \n  readonly machineImage?: IMachineImage;\n\nn  readonly blockDevices?: BlockDevice[];\n\n                                                                                                                                         \n  readonly init?: CloudFormationInit;\n\n                                                                                                                                                                              \n  readonly initOptions?: ApplyCloudFormationInitOptions;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport class BastionHostLinux extends Resource implements IInstance {\n  public readonly stack: Stack;\n\n                                                                            \n  public readonly connections: Connections;\n\n                                                      \n  public readonly role: IRole;\n\n                                                      \n  public readonly grantPrincipal: IPrincipal;\n\n                                                 \n  public readonly instance: Instance;\n\n                           \n  public readonly instanceId: string;\n\n                           \n  public readonly instanceAvailabilityZone: string;\n\n                           \n  public readonly instancePrivateDnsName: string;\n                           \n  public readonly instancePrivateIp: string;\n                           \n  public readonly instancePublicDnsName: string;\n                           \n  public readonly instancePublicIp: string;\n\n  constructor(scope: Construct, id: string, props: BastionHostLinuxProps) {\n    super(scope, id);\n    this.stack = Stack.of(scope);\n    const instanceType = props.instanceType ?? InstanceType.of(InstanceClass.T3, InstanceSize.NANO);\n    this.instance = new Instance(this, 'Resource', {\n      vpc: props.vpc,\n      availabilityZone: props.availabilityZone,\n      securityGroup: props.securityGroup,\n      instanceName: props.instanceName ?? 'BastionHost',\n      instanceType,\n      machineImage: props.machineImage ?? MachineImage.latestAmazonLinux({\n        generation: AmazonLinuxGeneration.AMAZON_LINUX_2,\n        cpuType: this.toAmazonLinuxCpuType(instanceType.architecture),\n      }),\n      vpcSubnets: props.subnetSelection ?? {},\n      blockDevices: props.blockDevices ?? undefined,\n      init: props.init,\n      initOptions: props.initOptions,\n    });\n    this.instance.addToRolePolicy(new PolicyStatement({\n      actions: [\n        'ssmmessages:*',\n        'ssm:UpdateInstanceInformation',\n        'ec2messages:*',\n      ],\n      resources: ['*'],\n    }));\n    this.connections = this.instance.connections;\n    this.role = this.instance.role;\n    this.grantPrincipal = this.instance.role;\n    this.instanceId = this.instance.instanceId;\n    this.instancePrivateIp = this.instance.instancePrivateIp;\n    this.instanceAvailabilityZone = this.instance.instanceAvailabilityZone;\n    this.instancePrivateDnsName = this.instance.instancePrivateDnsName;\n    this.instancePublicIp = this.instance.instancePublicIp;\n    this.instancePublicDnsName = this.instance.instancePublicDnsName;\n\n    new CfnOutput(this, 'BastionHostId', {\n      description: 'Instance ID of the bastion host. Use this to connect via SSM Session Manager',\n      value: this.instanceId,\n    });\n  }\n\n  /**\n   * Returns the AmazonLinuxCpuType corresponding to the given instance architecture\n   * @param architecture the instance architecture value to convert\n   */\n  private toAmazonLinuxCpuType(architecture: InstanceArchitecture): AmazonLinuxCpuType {\n    if (architecture === InstanceArchitecture.ARM_64) {\n      return AmazonLinuxCpuType.ARM_64;\n    } else if (architecture === InstanceArchitecture.X86_64) {\n      return AmazonLinuxCpuType.X86_64;\n    }\n\n    throw new Error(`Unsupported instance architecture '${architecture}'`);\n  }\n\n                                                                                                                                                                                                                       \n  public allowSshAccessFrom(...peer: IPeer[]): void {\n    peer.forEach(p => {\n      this.connections.allowFrom(p, Port.tcp(22), 'SSH access');\n    });\n  }\n}\n"],
  "mappings": "uNAAA,UAAA,QAAA,iBACA,OAAA,QAAA,cAEA,GAAA,QAAA,KAGA,WAAA,QAAA,cACA,gBAAA,QAAA,mBAEA,OAAA,QAAA,UAwCA,8BAAsC,QAAA,QAAQ,CA8B5C,YAAY,MAAkB,GAAY,MAA4B,oBACpE,MAAM,MAAO,6EACb,KAAK,MAAQ,OAAA,MAAM,GAAG,OACtB,KAAM,cAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,GAAA,aAAa,GAAG,GAAA,cAAc,GAAI,GAAA,aAAa,MAC1F,KAAK,SAAW,GAAI,YAAA,SAAS,KAAM,WAAY,CAC7C,IAAK,MAAM,IACX,iBAAkB,MAAM,iBACxB,cAAe,MAAM,cACrB,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,cACpC,aACA,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,gBAAA,aAAa,kBAAkB,CACjE,WAAY,GAAA,sBAAsB,eAClC,QAAS,KAAK,qBAAqB,aAAa,gBAElD,WAAU,IAAE,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,GACrC,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,OACpC,KAAM,MAAM,KACZ,YAAa,MAAM,cAErB,KAAK,SAAS,gBAAgB,GAAI,WAAA,gBAAgB,CAChD,QAAS,CACP,gBACA,gCACA,iBAEF,UAAW,CAAC,QAEd,KAAK,YAAc,KAAK,SAAS,YACjC,KAAK,KAAO,KAAK,SAAS,KAC1B,KAAK,eAAiB,KAAK,SAAS,KACpC,KAAK,WAAa,KAAK,SAAS,WAChC,KAAK,kBAAoB,KAAK,SAAS,kBACvC,KAAK,yBAA2B,KAAK,SAAS,yBAC9C,KAAK,uBAAyB,KAAK,SAAS,uBAC5C,KAAK,iBAAmB,KAAK,SAAS,iBACtC,KAAK,sBAAwB,KAAK,SAAS,sBAE3C,GAAI,QAAA,UAAU,KAAM,gBAAiB,CACnC,YAAa,+EACb,MAAO,KAAK,aAQR,qBAAqB,aAAkC,CAC7D,GAAI,eAAiB,GAAA,qBAAqB,OACxC,MAAO,iBAAA,mBAAmB,OACrB,GAAI,eAAiB,GAAA,qBAAqB,OAC/C,MAAO,iBAAA,mBAAmB,OAG5B,KAAM,IAAI,OAAM,sCAAsC,iBAIjD,sBAAsB,KAAa,yDACxC,KAAK,QAAQ,GAAI,CACf,KAAK,YAAY,UAAU,EAAG,OAAA,KAAK,IAAI,IAAK,iBA1FlD,QAAA,iBAAA",
  "names": []
}
