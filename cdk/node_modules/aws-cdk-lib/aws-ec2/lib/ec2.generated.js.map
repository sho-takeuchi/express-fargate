{
  "version": 3,
  "sources": ["ec2.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:55:53.162Z\",\"fingerprint\":\"mjLKbdF5yqcQSgyE56T/Uufprbekj5sOn2vUyhVVkYE=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                      \nexport interface CfnCapacityReservationProps {\n\n                                                                                                                                                                                                                                                                  \n    readonly availabilityZone: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly instanceCount: number;\n\n                                                                                                                                                                                                                                                           \n    readonly instancePlatform: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly instanceType: string;\n\nn    readonly ebsOptimized?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly endDate?: string;\n\nn    readonly endDateType?: string;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly ephemeralStorage?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly instanceMatchCriteria?: string;\n\n                                                                                                                                                                                                                                                                                    \n    readonly outPostArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly placementGroupArn?: string;\n\n                                                                                                                                                                                                                                                             \n    readonly tagSpecifications?: Array<CfnCapacityReservation.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly tenancy?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCapacityReservationProps`\n *\n * @param properties - the TypeScript properties of a `CfnCapacityReservationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityReservationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.requiredValidator)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));\n    errors.collect(cdk.propertyValidator('endDate', cdk.validateString)(properties.endDate));\n    errors.collect(cdk.propertyValidator('endDateType', cdk.validateString)(properties.endDateType));\n    errors.collect(cdk.propertyValidator('ephemeralStorage', cdk.validateBoolean)(properties.ephemeralStorage));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.requiredValidator)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceMatchCriteria', cdk.validateString)(properties.instanceMatchCriteria));\n    errors.collect(cdk.propertyValidator('instancePlatform', cdk.requiredValidator)(properties.instancePlatform));\n    errors.collect(cdk.propertyValidator('instancePlatform', cdk.validateString)(properties.instancePlatform));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('outPostArn', cdk.validateString)(properties.outPostArn));\n    errors.collect(cdk.propertyValidator('placementGroupArn', cdk.validateString)(properties.placementGroupArn));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnCapacityReservation_TagSpecificationPropertyValidator))(properties.tagSpecifications));\n    errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));\n    return errors.wrap('supplied properties not correct for \"CfnCapacityReservationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CapacityReservation` resource\n *\n * @param properties - the TypeScript properties of a `CfnCapacityReservationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CapacityReservation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityReservationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityReservationPropsValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstancePlatform: cdk.stringToCloudFormation(properties.instancePlatform),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),\n        EndDate: cdk.stringToCloudFormation(properties.endDate),\n        EndDateType: cdk.stringToCloudFormation(properties.endDateType),\n        EphemeralStorage: cdk.booleanToCloudFormation(properties.ephemeralStorage),\n        InstanceMatchCriteria: cdk.stringToCloudFormation(properties.instanceMatchCriteria),\n        OutPostArn: cdk.stringToCloudFormation(properties.outPostArn),\n        PlacementGroupArn: cdk.stringToCloudFormation(properties.placementGroupArn),\n        TagSpecifications: cdk.listMapper(cfnCapacityReservationTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n        Tenancy: cdk.stringToCloudFormation(properties.tenancy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityReservationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityReservationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityReservationProps>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone));\n    ret.addPropertyResult('instanceCount', 'InstanceCount', cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));\n    ret.addPropertyResult('instancePlatform', 'InstancePlatform', cfn_parse.FromCloudFormation.getString(properties.InstancePlatform));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('ebsOptimized', 'EbsOptimized', properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : undefined);\n    ret.addPropertyResult('endDate', 'EndDate', properties.EndDate != null ? cfn_parse.FromCloudFormation.getString(properties.EndDate) : undefined);\n    ret.addPropertyResult('endDateType', 'EndDateType', properties.EndDateType != null ? cfn_parse.FromCloudFormation.getString(properties.EndDateType) : undefined);\n    ret.addPropertyResult('ephemeralStorage', 'EphemeralStorage', properties.EphemeralStorage != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EphemeralStorage) : undefined);\n    ret.addPropertyResult('instanceMatchCriteria', 'InstanceMatchCriteria', properties.InstanceMatchCriteria != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceMatchCriteria) : undefined);\n    ret.addPropertyResult('outPostArn', 'OutPostArn', properties.OutPostArn != null ? cfn_parse.FromCloudFormation.getString(properties.OutPostArn) : undefined);\n    ret.addPropertyResult('placementGroupArn', 'PlacementGroupArn', properties.PlacementGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.PlacementGroupArn) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnCapacityReservationTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addPropertyResult('tenancy', 'Tenancy', properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnCapacityReservation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::CapacityReservation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCapacityReservation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCapacityReservationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCapacityReservation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                    \n    public readonly attrAvailabilityZone: string;\n\n                                                                                                                                                                                                                          \n    public readonly attrAvailableInstanceCount: number;\n\n                                                                                                                                                              \n    public readonly attrInstanceType: string;\n\n                                                                                                                                          \n    public readonly attrTenancy: string;\n\n                                                                                                                                                                                         \n    public readonly attrTotalInstanceCount: number;\n\n                                                                                                                                                                                                                                                                  \n    public availabilityZone: string;\n\n                                                                                                                                                                                                                                                                                       \n    public instanceCount: number;\n\n                                                                                                                                                                                                                                                           \n    public instancePlatform: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n    public instanceType: string;\n\nn    public ebsOptimized: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public endDate: string | undefined;\n\nn    public endDateType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                  \n    public ephemeralStorage: boolean | cdk.IResolvable | undefined;\n\nn    public instanceMatchCriteria: string | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public outPostArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public placementGroupArn: string | undefined;\n\n                                                                                                                                                                                                                                                             \n    public tagSpecifications: Array<CfnCapacityReservation.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public tenancy: string | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnCapacityReservationProps) {\n        super(scope, id, { type: CfnCapacityReservation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'availabilityZone', this);\n        cdk.requireProperty(props, 'instanceCount', this);\n        cdk.requireProperty(props, 'instancePlatform', this);\n        cdk.requireProperty(props, 'instanceType', this);\n        this.attrAvailabilityZone = cdk.Token.asString(this.getAtt('AvailabilityZone'));\n        this.attrAvailableInstanceCount = cdk.Token.asNumber(this.getAtt('AvailableInstanceCount'));\n        this.attrInstanceType = cdk.Token.asString(this.getAtt('InstanceType'));\n        this.attrTenancy = cdk.Token.asString(this.getAtt('Tenancy'));\n        this.attrTotalInstanceCount = cdk.Token.asNumber(this.getAtt('TotalInstanceCount'));\n\n        this.availabilityZone = props.availabilityZone;\n        this.instanceCount = props.instanceCount;\n        this.instancePlatform = props.instancePlatform;\n        this.instanceType = props.instanceType;\n        this.ebsOptimized = props.ebsOptimized;\n        this.endDate = props.endDate;\n        this.endDateType = props.endDateType;\n        this.ephemeralStorage = props.ephemeralStorage;\n        this.instanceMatchCriteria = props.instanceMatchCriteria;\n        this.outPostArn = props.outPostArn;\n        this.placementGroupArn = props.placementGroupArn;\n        this.tagSpecifications = props.tagSpecifications;\n        this.tenancy = props.tenancy;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCapacityReservation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            availabilityZone: this.availabilityZone,\n            instanceCount: this.instanceCount,\n            instancePlatform: this.instancePlatform,\n            instanceType: this.instanceType,\n            ebsOptimized: this.ebsOptimized,\n            endDate: this.endDate,\n            endDateType: this.endDateType,\n            ephemeralStorage: this.ephemeralStorage,\n            instanceMatchCriteria: this.instanceMatchCriteria,\n            outPostArn: this.outPostArn,\n            placementGroupArn: this.placementGroupArn,\n            tagSpecifications: this.tagSpecifications,\n            tenancy: this.tenancy,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCapacityReservationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCapacityReservation {\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface TagSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly resourceType?: string;\n                                                                                                                                                                                                                                                                              \n        readonly tags?: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityReservation_TagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"TagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CapacityReservation.TagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CapacityReservation.TagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityReservationTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityReservation_TagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityReservationTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityReservation.TagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityReservation.TagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                \nexport interface CfnCapacityReservationFleetProps {\n\nn    readonly allocationStrategy?: string;\n\nn    readonly endDate?: string;\n\nn    readonly instanceMatchCriteria?: string;\n\n                                                                                                                                                                                                                                                                                           \n    readonly instanceTypeSpecifications?: Array<CfnCapacityReservationFleet.InstanceTypeSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    readonly noRemoveEndDate?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                         \n    readonly removeEndDate?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                               \n    readonly tagSpecifications?: Array<CfnCapacityReservationFleet.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly tenancy?: string;\n\nn    readonly totalTargetCapacity?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCapacityReservationFleetProps`\n *\n * @param properties - the TypeScript properties of a `CfnCapacityReservationFleetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityReservationFleetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));\n    errors.collect(cdk.propertyValidator('endDate', cdk.validateString)(properties.endDate));\n    errors.collect(cdk.propertyValidator('instanceMatchCriteria', cdk.validateString)(properties.instanceMatchCriteria));\n    errors.collect(cdk.propertyValidator('instanceTypeSpecifications', cdk.listValidator(CfnCapacityReservationFleet_InstanceTypeSpecificationPropertyValidator))(properties.instanceTypeSpecifications));\n    errors.collect(cdk.propertyValidator('noRemoveEndDate', cdk.validateBoolean)(properties.noRemoveEndDate));\n    errors.collect(cdk.propertyValidator('removeEndDate', cdk.validateBoolean)(properties.removeEndDate));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnCapacityReservationFleet_TagSpecificationPropertyValidator))(properties.tagSpecifications));\n    errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));\n    errors.collect(cdk.propertyValidator('totalTargetCapacity', cdk.validateNumber)(properties.totalTargetCapacity));\n    return errors.wrap('supplied properties not correct for \"CfnCapacityReservationFleetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CapacityReservationFleet` resource\n *\n * @param properties - the TypeScript properties of a `CfnCapacityReservationFleetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CapacityReservationFleet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityReservationFleetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityReservationFleetPropsValidator(properties).assertSuccess();\n    return {\n        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),\n        EndDate: cdk.stringToCloudFormation(properties.endDate),\n        InstanceMatchCriteria: cdk.stringToCloudFormation(properties.instanceMatchCriteria),\n        InstanceTypeSpecifications: cdk.listMapper(cfnCapacityReservationFleetInstanceTypeSpecificationPropertyToCloudFormation)(properties.instanceTypeSpecifications),\n        NoRemoveEndDate: cdk.booleanToCloudFormation(properties.noRemoveEndDate),\n        RemoveEndDate: cdk.booleanToCloudFormation(properties.removeEndDate),\n        TagSpecifications: cdk.listMapper(cfnCapacityReservationFleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n        Tenancy: cdk.stringToCloudFormation(properties.tenancy),\n        TotalTargetCapacity: cdk.numberToCloudFormation(properties.totalTargetCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityReservationFleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityReservationFleetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityReservationFleetProps>();\n    ret.addPropertyResult('allocationStrategy', 'AllocationStrategy', properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : undefined);\n    ret.addPropertyResult('endDate', 'EndDate', properties.EndDate != null ? cfn_parse.FromCloudFormation.getString(properties.EndDate) : undefined);\n    ret.addPropertyResult('instanceMatchCriteria', 'InstanceMatchCriteria', properties.InstanceMatchCriteria != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceMatchCriteria) : undefined);\n    ret.addPropertyResult('instanceTypeSpecifications', 'InstanceTypeSpecifications', properties.InstanceTypeSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnCapacityReservationFleetInstanceTypeSpecificationPropertyFromCloudFormation)(properties.InstanceTypeSpecifications) : undefined);\n    ret.addPropertyResult('noRemoveEndDate', 'NoRemoveEndDate', properties.NoRemoveEndDate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NoRemoveEndDate) : undefined);\n    ret.addPropertyResult('removeEndDate', 'RemoveEndDate', properties.RemoveEndDate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RemoveEndDate) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnCapacityReservationFleetTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addPropertyResult('tenancy', 'Tenancy', properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : undefined);\n    ret.addPropertyResult('totalTargetCapacity', 'TotalTargetCapacity', properties.TotalTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.TotalTargetCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCapacityReservationFleet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::CapacityReservationFleet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCapacityReservationFleet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCapacityReservationFleetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCapacityReservationFleet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                           \n    public readonly attrCapacityReservationFleetId: string;\n\nn    public allocationStrategy: string | undefined;\n\nn    public endDate: string | undefined;\n\nn    public instanceMatchCriteria: string | undefined;\n\n                                                                                                                                                                                                                                                                                           \n    public instanceTypeSpecifications: Array<CfnCapacityReservationFleet.InstanceTypeSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                             \n    public noRemoveEndDate: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                         \n    public removeEndDate: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                               \n    public tagSpecifications: Array<CfnCapacityReservationFleet.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public tenancy: string | undefined;\n\nn    public totalTargetCapacity: number | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnCapacityReservationFleetProps = {}) {\n        super(scope, id, { type: CfnCapacityReservationFleet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrCapacityReservationFleetId = cdk.Token.asString(this.getAtt('CapacityReservationFleetId'));\n\n        this.allocationStrategy = props.allocationStrategy;\n        this.endDate = props.endDate;\n        this.instanceMatchCriteria = props.instanceMatchCriteria;\n        this.instanceTypeSpecifications = props.instanceTypeSpecifications;\n        this.noRemoveEndDate = props.noRemoveEndDate;\n        this.removeEndDate = props.removeEndDate;\n        this.tagSpecifications = props.tagSpecifications;\n        this.tenancy = props.tenancy;\n        this.totalTargetCapacity = props.totalTargetCapacity;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCapacityReservationFleet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            allocationStrategy: this.allocationStrategy,\n            endDate: this.endDate,\n            instanceMatchCriteria: this.instanceMatchCriteria,\n            instanceTypeSpecifications: this.instanceTypeSpecifications,\n            noRemoveEndDate: this.noRemoveEndDate,\n            removeEndDate: this.removeEndDate,\n            tagSpecifications: this.tagSpecifications,\n            tenancy: this.tenancy,\n            totalTargetCapacity: this.totalTargetCapacity,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCapacityReservationFleetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCapacityReservationFleet {\nn    export interface InstanceTypeSpecificationProperty {\nn        readonly availabilityZone?: string;\nn        readonly availabilityZoneId?: string;\nn        readonly ebsOptimized?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly instancePlatform?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly instanceType?: string;\nn        readonly priority?: number;\nn        readonly weight?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceTypeSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceTypeSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityReservationFleet_InstanceTypeSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('availabilityZoneId', cdk.validateString)(properties.availabilityZoneId));\n    errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));\n    errors.collect(cdk.propertyValidator('instancePlatform', cdk.validateString)(properties.instancePlatform));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('weight', cdk.validateNumber)(properties.weight));\n    return errors.wrap('supplied properties not correct for \"InstanceTypeSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CapacityReservationFleet.InstanceTypeSpecification` resource\n *\n * @param properties - the TypeScript properties of a `InstanceTypeSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CapacityReservationFleet.InstanceTypeSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityReservationFleetInstanceTypeSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityReservationFleet_InstanceTypeSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        AvailabilityZoneId: cdk.stringToCloudFormation(properties.availabilityZoneId),\n        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),\n        InstancePlatform: cdk.stringToCloudFormation(properties.instancePlatform),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        Weight: cdk.numberToCloudFormation(properties.weight),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityReservationFleetInstanceTypeSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityReservationFleet.InstanceTypeSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityReservationFleet.InstanceTypeSpecificationProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('availabilityZoneId', 'AvailabilityZoneId', properties.AvailabilityZoneId != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZoneId) : undefined);\n    ret.addPropertyResult('ebsOptimized', 'EbsOptimized', properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : undefined);\n    ret.addPropertyResult('instancePlatform', 'InstancePlatform', properties.InstancePlatform != null ? cfn_parse.FromCloudFormation.getString(properties.InstancePlatform) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('priority', 'Priority', properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : undefined);\n    ret.addPropertyResult('weight', 'Weight', properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCapacityReservationFleet {\n                                                                                                                                                                                                                                                                                               \n    export interface TagSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly resourceType?: string;\n                                                                                                                                                                                                                                                                                        \n        readonly tags?: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityReservationFleet_TagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"TagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CapacityReservationFleet.TagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CapacityReservationFleet.TagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityReservationFleetTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityReservationFleet_TagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityReservationFleetTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityReservationFleet.TagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityReservationFleet.TagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnCarrierGatewayProps {\n\n                                                                                                                                                                                                                                 \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCarrierGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnCarrierGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCarrierGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnCarrierGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CarrierGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnCarrierGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CarrierGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCarrierGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCarrierGatewayPropsValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCarrierGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCarrierGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCarrierGatewayProps>();\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnCarrierGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::CarrierGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCarrierGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCarrierGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCarrierGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                      \n    public readonly attrCarrierGatewayId: string;\n\n                                                                                                                      \n    public readonly attrOwnerId: string;\n\n                                                                                              \n    public readonly attrState: string;\n\n                                                                                                                                                                                                                                 \n    public vpcId: string;\n\n                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnCarrierGatewayProps) {\n        super(scope, id, { type: CfnCarrierGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrCarrierGatewayId = cdk.Token.asString(this.getAtt('CarrierGatewayId'));\n        this.attrOwnerId = cdk.Token.asString(this.getAtt('OwnerId'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n\n        this.vpcId = props.vpcId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::CarrierGateway\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCarrierGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            vpcId: this.vpcId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCarrierGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnClientVpnAuthorizationRuleProps {\n\n                                                                                                                                                                                                                                                   \n    readonly clientVpnEndpointId: string;\n\n                                                                                                                                                                                                                                                                                                             \n    readonly targetNetworkCidr: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly accessGroupId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly authorizeAllGroups?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClientVpnAuthorizationRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnAuthorizationRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnAuthorizationRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessGroupId', cdk.validateString)(properties.accessGroupId));\n    errors.collect(cdk.propertyValidator('authorizeAllGroups', cdk.validateBoolean)(properties.authorizeAllGroups));\n    errors.collect(cdk.propertyValidator('clientVpnEndpointId', cdk.requiredValidator)(properties.clientVpnEndpointId));\n    errors.collect(cdk.propertyValidator('clientVpnEndpointId', cdk.validateString)(properties.clientVpnEndpointId));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('targetNetworkCidr', cdk.requiredValidator)(properties.targetNetworkCidr));\n    errors.collect(cdk.propertyValidator('targetNetworkCidr', cdk.validateString)(properties.targetNetworkCidr));\n    return errors.wrap('supplied properties not correct for \"CfnClientVpnAuthorizationRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnAuthorizationRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnAuthorizationRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnAuthorizationRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnAuthorizationRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnAuthorizationRulePropsValidator(properties).assertSuccess();\n    return {\n        ClientVpnEndpointId: cdk.stringToCloudFormation(properties.clientVpnEndpointId),\n        TargetNetworkCidr: cdk.stringToCloudFormation(properties.targetNetworkCidr),\n        AccessGroupId: cdk.stringToCloudFormation(properties.accessGroupId),\n        AuthorizeAllGroups: cdk.booleanToCloudFormation(properties.authorizeAllGroups),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnAuthorizationRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnAuthorizationRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnAuthorizationRuleProps>();\n    ret.addPropertyResult('clientVpnEndpointId', 'ClientVpnEndpointId', cfn_parse.FromCloudFormation.getString(properties.ClientVpnEndpointId));\n    ret.addPropertyResult('targetNetworkCidr', 'TargetNetworkCidr', cfn_parse.FromCloudFormation.getString(properties.TargetNetworkCidr));\n    ret.addPropertyResult('accessGroupId', 'AccessGroupId', properties.AccessGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.AccessGroupId) : undefined);\n    ret.addPropertyResult('authorizeAllGroups', 'AuthorizeAllGroups', properties.AuthorizeAllGroups != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AuthorizeAllGroups) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClientVpnAuthorizationRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::ClientVpnAuthorizationRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClientVpnAuthorizationRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClientVpnAuthorizationRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClientVpnAuthorizationRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                   \n    public clientVpnEndpointId: string;\n\n                                                                                                                                                                                                                                                                                                             \n    public targetNetworkCidr: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public accessGroupId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public authorizeAllGroups: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnClientVpnAuthorizationRuleProps) {\n        super(scope, id, { type: CfnClientVpnAuthorizationRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clientVpnEndpointId', this);\n        cdk.requireProperty(props, 'targetNetworkCidr', this);\n\n        this.clientVpnEndpointId = props.clientVpnEndpointId;\n        this.targetNetworkCidr = props.targetNetworkCidr;\n        this.accessGroupId = props.accessGroupId;\n        this.authorizeAllGroups = props.authorizeAllGroups;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClientVpnAuthorizationRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clientVpnEndpointId: this.clientVpnEndpointId,\n            targetNetworkCidr: this.targetNetworkCidr,\n            accessGroupId: this.accessGroupId,\n            authorizeAllGroups: this.authorizeAllGroups,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClientVpnAuthorizationRulePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnClientVpnEndpointProps {\n\n                                                                                                                                                                                                                                                                                \n    readonly authenticationOptions: Array<CfnClientVpnEndpoint.ClientAuthenticationRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly clientCidrBlock: string;\n\nn    readonly connectionLogOptions: CfnClientVpnEndpoint.ConnectionLogOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    readonly serverCertificateArn: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly clientConnectOptions?: CfnClientVpnEndpoint.ClientConnectOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                     \n    readonly clientLoginBannerOptions?: CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly dnsServers?: string[];\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly selfServicePortal?: string;\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly sessionTimeoutHours?: number;\n\nn    readonly splitTunnel?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                          \n    readonly tagSpecifications?: Array<CfnClientVpnEndpoint.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                     \n    readonly transportProtocol?: string;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    readonly vpcId?: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly vpnPort?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClientVpnEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authenticationOptions', cdk.requiredValidator)(properties.authenticationOptions));\n    errors.collect(cdk.propertyValidator('authenticationOptions', cdk.listValidator(CfnClientVpnEndpoint_ClientAuthenticationRequestPropertyValidator))(properties.authenticationOptions));\n    errors.collect(cdk.propertyValidator('clientCidrBlock', cdk.requiredValidator)(properties.clientCidrBlock));\n    errors.collect(cdk.propertyValidator('clientCidrBlock', cdk.validateString)(properties.clientCidrBlock));\n    errors.collect(cdk.propertyValidator('clientConnectOptions', CfnClientVpnEndpoint_ClientConnectOptionsPropertyValidator)(properties.clientConnectOptions));\n    errors.collect(cdk.propertyValidator('clientLoginBannerOptions', CfnClientVpnEndpoint_ClientLoginBannerOptionsPropertyValidator)(properties.clientLoginBannerOptions));\n    errors.collect(cdk.propertyValidator('connectionLogOptions', cdk.requiredValidator)(properties.connectionLogOptions));\n    errors.collect(cdk.propertyValidator('connectionLogOptions', CfnClientVpnEndpoint_ConnectionLogOptionsPropertyValidator)(properties.connectionLogOptions));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('dnsServers', cdk.listValidator(cdk.validateString))(properties.dnsServers));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('selfServicePortal', cdk.validateString)(properties.selfServicePortal));\n    errors.collect(cdk.propertyValidator('serverCertificateArn', cdk.requiredValidator)(properties.serverCertificateArn));\n    errors.collect(cdk.propertyValidator('serverCertificateArn', cdk.validateString)(properties.serverCertificateArn));\n    errors.collect(cdk.propertyValidator('sessionTimeoutHours', cdk.validateNumber)(properties.sessionTimeoutHours));\n    errors.collect(cdk.propertyValidator('splitTunnel', cdk.validateBoolean)(properties.splitTunnel));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnClientVpnEndpoint_TagSpecificationPropertyValidator))(properties.tagSpecifications));\n    errors.collect(cdk.propertyValidator('transportProtocol', cdk.validateString)(properties.transportProtocol));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpnPort', cdk.validateNumber)(properties.vpnPort));\n    return errors.wrap('supplied properties not correct for \"CfnClientVpnEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpointPropsValidator(properties).assertSuccess();\n    return {\n        AuthenticationOptions: cdk.listMapper(cfnClientVpnEndpointClientAuthenticationRequestPropertyToCloudFormation)(properties.authenticationOptions),\n        ClientCidrBlock: cdk.stringToCloudFormation(properties.clientCidrBlock),\n        ConnectionLogOptions: cfnClientVpnEndpointConnectionLogOptionsPropertyToCloudFormation(properties.connectionLogOptions),\n        ServerCertificateArn: cdk.stringToCloudFormation(properties.serverCertificateArn),\n        ClientConnectOptions: cfnClientVpnEndpointClientConnectOptionsPropertyToCloudFormation(properties.clientConnectOptions),\n        ClientLoginBannerOptions: cfnClientVpnEndpointClientLoginBannerOptionsPropertyToCloudFormation(properties.clientLoginBannerOptions),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DnsServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.dnsServers),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SelfServicePortal: cdk.stringToCloudFormation(properties.selfServicePortal),\n        SessionTimeoutHours: cdk.numberToCloudFormation(properties.sessionTimeoutHours),\n        SplitTunnel: cdk.booleanToCloudFormation(properties.splitTunnel),\n        TagSpecifications: cdk.listMapper(cfnClientVpnEndpointTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n        TransportProtocol: cdk.stringToCloudFormation(properties.transportProtocol),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        VpnPort: cdk.numberToCloudFormation(properties.vpnPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpointProps>();\n    ret.addPropertyResult('authenticationOptions', 'AuthenticationOptions', cfn_parse.FromCloudFormation.getArray(CfnClientVpnEndpointClientAuthenticationRequestPropertyFromCloudFormation)(properties.AuthenticationOptions));\n    ret.addPropertyResult('clientCidrBlock', 'ClientCidrBlock', cfn_parse.FromCloudFormation.getString(properties.ClientCidrBlock));\n    ret.addPropertyResult('connectionLogOptions', 'ConnectionLogOptions', CfnClientVpnEndpointConnectionLogOptionsPropertyFromCloudFormation(properties.ConnectionLogOptions));\n    ret.addPropertyResult('serverCertificateArn', 'ServerCertificateArn', cfn_parse.FromCloudFormation.getString(properties.ServerCertificateArn));\n    ret.addPropertyResult('clientConnectOptions', 'ClientConnectOptions', properties.ClientConnectOptions != null ? CfnClientVpnEndpointClientConnectOptionsPropertyFromCloudFormation(properties.ClientConnectOptions) : undefined);\n    ret.addPropertyResult('clientLoginBannerOptions', 'ClientLoginBannerOptions', properties.ClientLoginBannerOptions != null ? CfnClientVpnEndpointClientLoginBannerOptionsPropertyFromCloudFormation(properties.ClientLoginBannerOptions) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('dnsServers', 'DnsServers', properties.DnsServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DnsServers) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('selfServicePortal', 'SelfServicePortal', properties.SelfServicePortal != null ? cfn_parse.FromCloudFormation.getString(properties.SelfServicePortal) : undefined);\n    ret.addPropertyResult('sessionTimeoutHours', 'SessionTimeoutHours', properties.SessionTimeoutHours != null ? cfn_parse.FromCloudFormation.getNumber(properties.SessionTimeoutHours) : undefined);\n    ret.addPropertyResult('splitTunnel', 'SplitTunnel', properties.SplitTunnel != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SplitTunnel) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnClientVpnEndpointTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addPropertyResult('transportProtocol', 'TransportProtocol', properties.TransportProtocol != null ? cfn_parse.FromCloudFormation.getString(properties.TransportProtocol) : undefined);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addPropertyResult('vpnPort', 'VpnPort', properties.VpnPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.VpnPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnClientVpnEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::ClientVpnEndpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClientVpnEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClientVpnEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClientVpnEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                \n    public authenticationOptions: Array<CfnClientVpnEndpoint.ClientAuthenticationRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    public clientCidrBlock: string;\n\nn    public connectionLogOptions: CfnClientVpnEndpoint.ConnectionLogOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public serverCertificateArn: string;\n\n                                                                                                                                                                                                                                                                             \n    public clientConnectOptions: CfnClientVpnEndpoint.ClientConnectOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                     \n    public clientLoginBannerOptions: CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    public dnsServers: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                  \n    public selfServicePortal: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                               \n    public sessionTimeoutHours: number | undefined;\n\nn    public splitTunnel: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                          \n    public tagSpecifications: Array<CfnClientVpnEndpoint.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public transportProtocol: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    public vpcId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public vpnPort: number | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnClientVpnEndpointProps) {\n        super(scope, id, { type: CfnClientVpnEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authenticationOptions', this);\n        cdk.requireProperty(props, 'clientCidrBlock', this);\n        cdk.requireProperty(props, 'connectionLogOptions', this);\n        cdk.requireProperty(props, 'serverCertificateArn', this);\n\n        this.authenticationOptions = props.authenticationOptions;\n        this.clientCidrBlock = props.clientCidrBlock;\n        this.connectionLogOptions = props.connectionLogOptions;\n        this.serverCertificateArn = props.serverCertificateArn;\n        this.clientConnectOptions = props.clientConnectOptions;\n        this.clientLoginBannerOptions = props.clientLoginBannerOptions;\n        this.description = props.description;\n        this.dnsServers = props.dnsServers;\n        this.securityGroupIds = props.securityGroupIds;\n        this.selfServicePortal = props.selfServicePortal;\n        this.sessionTimeoutHours = props.sessionTimeoutHours;\n        this.splitTunnel = props.splitTunnel;\n        this.tagSpecifications = props.tagSpecifications;\n        this.transportProtocol = props.transportProtocol;\n        this.vpcId = props.vpcId;\n        this.vpnPort = props.vpnPort;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClientVpnEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authenticationOptions: this.authenticationOptions,\n            clientCidrBlock: this.clientCidrBlock,\n            connectionLogOptions: this.connectionLogOptions,\n            serverCertificateArn: this.serverCertificateArn,\n            clientConnectOptions: this.clientConnectOptions,\n            clientLoginBannerOptions: this.clientLoginBannerOptions,\n            description: this.description,\n            dnsServers: this.dnsServers,\n            securityGroupIds: this.securityGroupIds,\n            selfServicePortal: this.selfServicePortal,\n            sessionTimeoutHours: this.sessionTimeoutHours,\n            splitTunnel: this.splitTunnel,\n            tagSpecifications: this.tagSpecifications,\n            transportProtocol: this.transportProtocol,\n            vpcId: this.vpcId,\n            vpnPort: this.vpnPort,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClientVpnEndpointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                            \n    export interface CertificateAuthenticationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly clientRootCertificateChainArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CertificateAuthenticationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `CertificateAuthenticationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_CertificateAuthenticationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientRootCertificateChainArn', cdk.requiredValidator)(properties.clientRootCertificateChainArn));\n    errors.collect(cdk.propertyValidator('clientRootCertificateChainArn', cdk.validateString)(properties.clientRootCertificateChainArn));\n    return errors.wrap('supplied properties not correct for \"CertificateAuthenticationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.CertificateAuthenticationRequest` resource\n *\n * @param properties - the TypeScript properties of a `CertificateAuthenticationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.CertificateAuthenticationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointCertificateAuthenticationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_CertificateAuthenticationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        ClientRootCertificateChainArn: cdk.stringToCloudFormation(properties.clientRootCertificateChainArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointCertificateAuthenticationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty>();\n    ret.addPropertyResult('clientRootCertificateChainArn', 'ClientRootCertificateChainArn', cfn_parse.FromCloudFormation.getString(properties.ClientRootCertificateChainArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface ClientAuthenticationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly activeDirectory?: CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly federatedAuthentication?: CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly mutualAuthentication?: CfnClientVpnEndpoint.CertificateAuthenticationRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClientAuthenticationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `ClientAuthenticationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_ClientAuthenticationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activeDirectory', CfnClientVpnEndpoint_DirectoryServiceAuthenticationRequestPropertyValidator)(properties.activeDirectory));\n    errors.collect(cdk.propertyValidator('federatedAuthentication', CfnClientVpnEndpoint_FederatedAuthenticationRequestPropertyValidator)(properties.federatedAuthentication));\n    errors.collect(cdk.propertyValidator('mutualAuthentication', CfnClientVpnEndpoint_CertificateAuthenticationRequestPropertyValidator)(properties.mutualAuthentication));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ClientAuthenticationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ClientAuthenticationRequest` resource\n *\n * @param properties - the TypeScript properties of a `ClientAuthenticationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ClientAuthenticationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointClientAuthenticationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_ClientAuthenticationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        ActiveDirectory: cfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyToCloudFormation(properties.activeDirectory),\n        FederatedAuthentication: cfnClientVpnEndpointFederatedAuthenticationRequestPropertyToCloudFormation(properties.federatedAuthentication),\n        MutualAuthentication: cfnClientVpnEndpointCertificateAuthenticationRequestPropertyToCloudFormation(properties.mutualAuthentication),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointClientAuthenticationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.ClientAuthenticationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.ClientAuthenticationRequestProperty>();\n    ret.addPropertyResult('activeDirectory', 'ActiveDirectory', properties.ActiveDirectory != null ? CfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyFromCloudFormation(properties.ActiveDirectory) : undefined);\n    ret.addPropertyResult('federatedAuthentication', 'FederatedAuthentication', properties.FederatedAuthentication != null ? CfnClientVpnEndpointFederatedAuthenticationRequestPropertyFromCloudFormation(properties.FederatedAuthentication) : undefined);\n    ret.addPropertyResult('mutualAuthentication', 'MutualAuthentication', properties.MutualAuthentication != null ? CfnClientVpnEndpointCertificateAuthenticationRequestPropertyFromCloudFormation(properties.MutualAuthentication) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                                    \n    export interface ClientConnectOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly enabled: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly lambdaFunctionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClientConnectOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `ClientConnectOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_ClientConnectOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('lambdaFunctionArn', cdk.validateString)(properties.lambdaFunctionArn));\n    return errors.wrap('supplied properties not correct for \"ClientConnectOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ClientConnectOptions` resource\n *\n * @param properties - the TypeScript properties of a `ClientConnectOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ClientConnectOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointClientConnectOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_ClientConnectOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        LambdaFunctionArn: cdk.stringToCloudFormation(properties.lambdaFunctionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointClientConnectOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.ClientConnectOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.ClientConnectOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('lambdaFunctionArn', 'LambdaFunctionArn', properties.LambdaFunctionArn != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaFunctionArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface ClientLoginBannerOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly bannerText?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly enabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClientLoginBannerOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `ClientLoginBannerOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_ClientLoginBannerOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bannerText', cdk.validateString)(properties.bannerText));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"ClientLoginBannerOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ClientLoginBannerOptions` resource\n *\n * @param properties - the TypeScript properties of a `ClientLoginBannerOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ClientLoginBannerOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointClientLoginBannerOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_ClientLoginBannerOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        BannerText: cdk.stringToCloudFormation(properties.bannerText),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointClientLoginBannerOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.ClientLoginBannerOptionsProperty>();\n    ret.addPropertyResult('bannerText', 'BannerText', properties.BannerText != null ? cfn_parse.FromCloudFormation.getString(properties.BannerText) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                     \n    export interface ConnectionLogOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly cloudwatchLogGroup?: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly cloudwatchLogStream?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly enabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectionLogOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectionLogOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_ConnectionLogOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudwatchLogGroup', cdk.validateString)(properties.cloudwatchLogGroup));\n    errors.collect(cdk.propertyValidator('cloudwatchLogStream', cdk.validateString)(properties.cloudwatchLogStream));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"ConnectionLogOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ConnectionLogOptions` resource\n *\n * @param properties - the TypeScript properties of a `ConnectionLogOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.ConnectionLogOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointConnectionLogOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_ConnectionLogOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        CloudwatchLogGroup: cdk.stringToCloudFormation(properties.cloudwatchLogGroup),\n        CloudwatchLogStream: cdk.stringToCloudFormation(properties.cloudwatchLogStream),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointConnectionLogOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.ConnectionLogOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.ConnectionLogOptionsProperty>();\n    ret.addPropertyResult('cloudwatchLogGroup', 'CloudwatchLogGroup', properties.CloudwatchLogGroup != null ? cfn_parse.FromCloudFormation.getString(properties.CloudwatchLogGroup) : undefined);\n    ret.addPropertyResult('cloudwatchLogStream', 'CloudwatchLogStream', properties.CloudwatchLogStream != null ? cfn_parse.FromCloudFormation.getString(properties.CloudwatchLogStream) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                              \n    export interface DirectoryServiceAuthenticationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly directoryId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DirectoryServiceAuthenticationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `DirectoryServiceAuthenticationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_DirectoryServiceAuthenticationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryId', cdk.requiredValidator)(properties.directoryId));\n    errors.collect(cdk.propertyValidator('directoryId', cdk.validateString)(properties.directoryId));\n    return errors.wrap('supplied properties not correct for \"DirectoryServiceAuthenticationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.DirectoryServiceAuthenticationRequest` resource\n *\n * @param properties - the TypeScript properties of a `DirectoryServiceAuthenticationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.DirectoryServiceAuthenticationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_DirectoryServiceAuthenticationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        DirectoryId: cdk.stringToCloudFormation(properties.directoryId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.DirectoryServiceAuthenticationRequestProperty>();\n    ret.addPropertyResult('directoryId', 'DirectoryId', cfn_parse.FromCloudFormation.getString(properties.DirectoryId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                                    \n    export interface FederatedAuthenticationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly samlProviderArn: string;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly selfServiceSamlProviderArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FederatedAuthenticationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `FederatedAuthenticationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_FederatedAuthenticationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('samlProviderArn', cdk.requiredValidator)(properties.samlProviderArn));\n    errors.collect(cdk.propertyValidator('samlProviderArn', cdk.validateString)(properties.samlProviderArn));\n    errors.collect(cdk.propertyValidator('selfServiceSamlProviderArn', cdk.validateString)(properties.selfServiceSamlProviderArn));\n    return errors.wrap('supplied properties not correct for \"FederatedAuthenticationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.FederatedAuthenticationRequest` resource\n *\n * @param properties - the TypeScript properties of a `FederatedAuthenticationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.FederatedAuthenticationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointFederatedAuthenticationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_FederatedAuthenticationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        SAMLProviderArn: cdk.stringToCloudFormation(properties.samlProviderArn),\n        SelfServiceSAMLProviderArn: cdk.stringToCloudFormation(properties.selfServiceSamlProviderArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointFederatedAuthenticationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.FederatedAuthenticationRequestProperty>();\n    ret.addPropertyResult('samlProviderArn', 'SAMLProviderArn', cfn_parse.FromCloudFormation.getString(properties.SAMLProviderArn));\n    ret.addPropertyResult('selfServiceSamlProviderArn', 'SelfServiceSAMLProviderArn', properties.SelfServiceSAMLProviderArn != null ? cfn_parse.FromCloudFormation.getString(properties.SelfServiceSAMLProviderArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClientVpnEndpoint {\n                                                                                                                                                                                                                                                                                        \n    export interface TagSpecificationProperty {\n                                                                                                                                                                                                                                                                            \n        readonly resourceType: string;\n                                                                                                                                                                                                                                                                          \n        readonly tags: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnEndpoint_TagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.requiredValidator)(properties.tags));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"TagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.TagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnEndpoint.TagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnEndpointTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnEndpoint_TagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnEndpointTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnEndpoint.TagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnEndpoint.TagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', cfn_parse.FromCloudFormation.getString(properties.ResourceType));\n    ret.addPropertyResult('tags', 'Tags', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnClientVpnRouteProps {\n\n                                                                                                                                                                                                                                                     \n    readonly clientVpnEndpointId: string;\n\nn    readonly destinationCidrBlock: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly targetVpcSubnetId: string;\n\n                                                                                                                                                                                                                  \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClientVpnRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientVpnEndpointId', cdk.requiredValidator)(properties.clientVpnEndpointId));\n    errors.collect(cdk.propertyValidator('clientVpnEndpointId', cdk.validateString)(properties.clientVpnEndpointId));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.requiredValidator)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('targetVpcSubnetId', cdk.requiredValidator)(properties.targetVpcSubnetId));\n    errors.collect(cdk.propertyValidator('targetVpcSubnetId', cdk.validateString)(properties.targetVpcSubnetId));\n    return errors.wrap('supplied properties not correct for \"CfnClientVpnRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnRoute` resource\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnRoute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnRoutePropsValidator(properties).assertSuccess();\n    return {\n        ClientVpnEndpointId: cdk.stringToCloudFormation(properties.clientVpnEndpointId),\n        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),\n        TargetVpcSubnetId: cdk.stringToCloudFormation(properties.targetVpcSubnetId),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnRouteProps>();\n    ret.addPropertyResult('clientVpnEndpointId', 'ClientVpnEndpointId', cfn_parse.FromCloudFormation.getString(properties.ClientVpnEndpointId));\n    ret.addPropertyResult('destinationCidrBlock', 'DestinationCidrBlock', cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));\n    ret.addPropertyResult('targetVpcSubnetId', 'TargetVpcSubnetId', cfn_parse.FromCloudFormation.getString(properties.TargetVpcSubnetId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClientVpnRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::ClientVpnRoute\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClientVpnRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClientVpnRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClientVpnRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                     \n    public clientVpnEndpointId: string;\n\nn    public destinationCidrBlock: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public targetVpcSubnetId: string;\n\n                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnClientVpnRouteProps) {\n        super(scope, id, { type: CfnClientVpnRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clientVpnEndpointId', this);\n        cdk.requireProperty(props, 'destinationCidrBlock', this);\n        cdk.requireProperty(props, 'targetVpcSubnetId', this);\n\n        this.clientVpnEndpointId = props.clientVpnEndpointId;\n        this.destinationCidrBlock = props.destinationCidrBlock;\n        this.targetVpcSubnetId = props.targetVpcSubnetId;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClientVpnRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clientVpnEndpointId: this.clientVpnEndpointId,\n            destinationCidrBlock: this.destinationCidrBlock,\n            targetVpcSubnetId: this.targetVpcSubnetId,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClientVpnRoutePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                  \nexport interface CfnClientVpnTargetNetworkAssociationProps {\n\n                                                                                                                                                                                                                                                                 \n    readonly clientVpnEndpointId: string;\n\n                                                                                                                                                                                                                                                                                   \n    readonly subnetId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClientVpnTargetNetworkAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnTargetNetworkAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClientVpnTargetNetworkAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientVpnEndpointId', cdk.requiredValidator)(properties.clientVpnEndpointId));\n    errors.collect(cdk.propertyValidator('clientVpnEndpointId', cdk.validateString)(properties.clientVpnEndpointId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"CfnClientVpnTargetNetworkAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::ClientVpnTargetNetworkAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnClientVpnTargetNetworkAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::ClientVpnTargetNetworkAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClientVpnTargetNetworkAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClientVpnTargetNetworkAssociationPropsValidator(properties).assertSuccess();\n    return {\n        ClientVpnEndpointId: cdk.stringToCloudFormation(properties.clientVpnEndpointId),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClientVpnTargetNetworkAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClientVpnTargetNetworkAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClientVpnTargetNetworkAssociationProps>();\n    ret.addPropertyResult('clientVpnEndpointId', 'ClientVpnEndpointId', cfn_parse.FromCloudFormation.getString(properties.ClientVpnEndpointId));\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClientVpnTargetNetworkAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::ClientVpnTargetNetworkAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClientVpnTargetNetworkAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClientVpnTargetNetworkAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClientVpnTargetNetworkAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                 \n    public clientVpnEndpointId: string;\n\n                                                                                                                                                                                                                                                                                   \n    public subnetId: string;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnClientVpnTargetNetworkAssociationProps) {\n        super(scope, id, { type: CfnClientVpnTargetNetworkAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clientVpnEndpointId', this);\n        cdk.requireProperty(props, 'subnetId', this);\n\n        this.clientVpnEndpointId = props.clientVpnEndpointId;\n        this.subnetId = props.subnetId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClientVpnTargetNetworkAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clientVpnEndpointId: this.clientVpnEndpointId,\n            subnetId: this.subnetId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClientVpnTargetNetworkAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                               \nexport interface CfnCustomerGatewayProps {\n\n                                                                                                                                                                                                                                                                         \n    readonly bgpAsn: number;\n\n                                                                                                                                                                                                                                                                                            \n    readonly ipAddress: string;\n\n                                                                                                                                                                                                                                                          \n    readonly type: string;\n\n                                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCustomerGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnCustomerGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomerGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bgpAsn', cdk.requiredValidator)(properties.bgpAsn));\n    errors.collect(cdk.propertyValidator('bgpAsn', cdk.validateNumber)(properties.bgpAsn));\n    errors.collect(cdk.propertyValidator('ipAddress', cdk.requiredValidator)(properties.ipAddress));\n    errors.collect(cdk.propertyValidator('ipAddress', cdk.validateString)(properties.ipAddress));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnCustomerGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::CustomerGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnCustomerGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::CustomerGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomerGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomerGatewayPropsValidator(properties).assertSuccess();\n    return {\n        BgpAsn: cdk.numberToCloudFormation(properties.bgpAsn),\n        IpAddress: cdk.stringToCloudFormation(properties.ipAddress),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomerGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomerGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomerGatewayProps>();\n    ret.addPropertyResult('bgpAsn', 'BgpAsn', cfn_parse.FromCloudFormation.getNumber(properties.BgpAsn));\n    ret.addPropertyResult('ipAddress', 'IpAddress', cfn_parse.FromCloudFormation.getString(properties.IpAddress));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                           \nexport class CfnCustomerGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::CustomerGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCustomerGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCustomerGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCustomerGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                         \n    public bgpAsn: number;\n\n                                                                                                                                                                                                                                                                                            \n    public ipAddress: string;\n\n                                                                                                                                                                                                                                                          \n    public type: string;\n\n                                                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnCustomerGatewayProps) {\n        super(scope, id, { type: CfnCustomerGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'bgpAsn', this);\n        cdk.requireProperty(props, 'ipAddress', this);\n        cdk.requireProperty(props, 'type', this);\n\n        this.bgpAsn = props.bgpAsn;\n        this.ipAddress = props.ipAddress;\n        this.type = props.type;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::CustomerGateway\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCustomerGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bgpAsn: this.bgpAsn,\n            ipAddress: this.ipAddress,\n            type: this.type,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCustomerGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                      \nexport interface CfnDHCPOptionsProps {\n\nn    readonly domainName?: string;\n\nn    readonly domainNameServers?: string[];\n\n                                                                                                                                                                                                                                        \n    readonly netbiosNameServers?: string[];\n\n                                                                                                                                                                                                                                                                                                            \n    readonly netbiosNodeType?: number;\n\n                                                                                                                                                                                                                                               \n    readonly ntpServers?: string[];\n\n                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDHCPOptionsProps`\n *\n * @param properties - the TypeScript properties of a `CfnDHCPOptionsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDHCPOptionsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainNameServers', cdk.listValidator(cdk.validateString))(properties.domainNameServers));\n    errors.collect(cdk.propertyValidator('netbiosNameServers', cdk.listValidator(cdk.validateString))(properties.netbiosNameServers));\n    errors.collect(cdk.propertyValidator('netbiosNodeType', cdk.validateNumber)(properties.netbiosNodeType));\n    errors.collect(cdk.propertyValidator('ntpServers', cdk.listValidator(cdk.validateString))(properties.ntpServers));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDHCPOptionsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::DHCPOptions` resource\n *\n * @param properties - the TypeScript properties of a `CfnDHCPOptionsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::DHCPOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDHCPOptionsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDHCPOptionsPropsValidator(properties).assertSuccess();\n    return {\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        DomainNameServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.domainNameServers),\n        NetbiosNameServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.netbiosNameServers),\n        NetbiosNodeType: cdk.numberToCloudFormation(properties.netbiosNodeType),\n        NtpServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.ntpServers),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDHCPOptionsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDHCPOptionsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDHCPOptionsProps>();\n    ret.addPropertyResult('domainName', 'DomainName', properties.DomainName != null ? cfn_parse.FromCloudFormation.getString(properties.DomainName) : undefined);\n    ret.addPropertyResult('domainNameServers', 'DomainNameServers', properties.DomainNameServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DomainNameServers) : undefined);\n    ret.addPropertyResult('netbiosNameServers', 'NetbiosNameServers', properties.NetbiosNameServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NetbiosNameServers) : undefined);\n    ret.addPropertyResult('netbiosNodeType', 'NetbiosNodeType', properties.NetbiosNodeType != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetbiosNodeType) : undefined);\n    ret.addPropertyResult('ntpServers', 'NtpServers', properties.NtpServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NtpServers) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnDHCPOptions extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::DHCPOptions\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDHCPOptions {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDHCPOptionsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDHCPOptions(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                    \n    public readonly attrDhcpOptionsId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public domainName: string | undefined;\n\nn    public domainNameServers: string[] | undefined;\n\n                                                                                                                                                                                                                                        \n    public netbiosNameServers: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                            \n    public netbiosNodeType: number | undefined;\n\n                                                                                                                                                                                                                                               \n    public ntpServers: string[] | undefined;\n\n                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnDHCPOptionsProps = {}) {\n        super(scope, id, { type: CfnDHCPOptions.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrDhcpOptionsId = cdk.Token.asString(this.getAtt('DhcpOptionsId'));\n\n        this.domainName = props.domainName;\n        this.domainNameServers = props.domainNameServers;\n        this.netbiosNameServers = props.netbiosNameServers;\n        this.netbiosNodeType = props.netbiosNodeType;\n        this.ntpServers = props.ntpServers;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::DHCPOptions\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDHCPOptions.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domainName: this.domainName,\n            domainNameServers: this.domainNameServers,\n            netbiosNameServers: this.netbiosNameServers,\n            netbiosNodeType: this.netbiosNodeType,\n            ntpServers: this.ntpServers,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDHCPOptionsPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                \nexport interface CfnEC2FleetProps {\n\n                                                                                                                                                                                                                   \n    readonly launchTemplateConfigs: Array<CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                    \n    readonly targetCapacitySpecification: CfnEC2Fleet.TargetCapacitySpecificationRequestProperty | cdk.IResolvable;\n\n                                                                                                                                                                          \n    readonly context?: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    readonly excessCapacityTerminationPolicy?: string;\n\n                                                                                                                                                                                                                                            \n    readonly onDemandOptions?: CfnEC2Fleet.OnDemandOptionsRequestProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly replaceUnhealthyInstances?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    readonly spotOptions?: CfnEC2Fleet.SpotOptionsRequestProperty | cdk.IResolvable;\n\nn    readonly tagSpecifications?: Array<CfnEC2Fleet.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    readonly terminateInstancesWithExpiration?: boolean | cdk.IResolvable;\n\nn    readonly type?: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly validFrom?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly validUntil?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEC2FleetProps`\n *\n * @param properties - the TypeScript properties of a `CfnEC2FleetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2FleetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('context', cdk.validateString)(properties.context));\n    errors.collect(cdk.propertyValidator('excessCapacityTerminationPolicy', cdk.validateString)(properties.excessCapacityTerminationPolicy));\n    errors.collect(cdk.propertyValidator('launchTemplateConfigs', cdk.requiredValidator)(properties.launchTemplateConfigs));\n    errors.collect(cdk.propertyValidator('launchTemplateConfigs', cdk.listValidator(CfnEC2Fleet_FleetLaunchTemplateConfigRequestPropertyValidator))(properties.launchTemplateConfigs));\n    errors.collect(cdk.propertyValidator('onDemandOptions', CfnEC2Fleet_OnDemandOptionsRequestPropertyValidator)(properties.onDemandOptions));\n    errors.collect(cdk.propertyValidator('replaceUnhealthyInstances', cdk.validateBoolean)(properties.replaceUnhealthyInstances));\n    errors.collect(cdk.propertyValidator('spotOptions', CfnEC2Fleet_SpotOptionsRequestPropertyValidator)(properties.spotOptions));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnEC2Fleet_TagSpecificationPropertyValidator))(properties.tagSpecifications));\n    errors.collect(cdk.propertyValidator('targetCapacitySpecification', cdk.requiredValidator)(properties.targetCapacitySpecification));\n    errors.collect(cdk.propertyValidator('targetCapacitySpecification', CfnEC2Fleet_TargetCapacitySpecificationRequestPropertyValidator)(properties.targetCapacitySpecification));\n    errors.collect(cdk.propertyValidator('terminateInstancesWithExpiration', cdk.validateBoolean)(properties.terminateInstancesWithExpiration));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('validFrom', cdk.validateString)(properties.validFrom));\n    errors.collect(cdk.propertyValidator('validUntil', cdk.validateString)(properties.validUntil));\n    return errors.wrap('supplied properties not correct for \"CfnEC2FleetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet` resource\n *\n * @param properties - the TypeScript properties of a `CfnEC2FleetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2FleetPropsValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateConfigs: cdk.listMapper(cfnEC2FleetFleetLaunchTemplateConfigRequestPropertyToCloudFormation)(properties.launchTemplateConfigs),\n        TargetCapacitySpecification: cfnEC2FleetTargetCapacitySpecificationRequestPropertyToCloudFormation(properties.targetCapacitySpecification),\n        Context: cdk.stringToCloudFormation(properties.context),\n        ExcessCapacityTerminationPolicy: cdk.stringToCloudFormation(properties.excessCapacityTerminationPolicy),\n        OnDemandOptions: cfnEC2FleetOnDemandOptionsRequestPropertyToCloudFormation(properties.onDemandOptions),\n        ReplaceUnhealthyInstances: cdk.booleanToCloudFormation(properties.replaceUnhealthyInstances),\n        SpotOptions: cfnEC2FleetSpotOptionsRequestPropertyToCloudFormation(properties.spotOptions),\n        TagSpecifications: cdk.listMapper(cfnEC2FleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n        TerminateInstancesWithExpiration: cdk.booleanToCloudFormation(properties.terminateInstancesWithExpiration),\n        Type: cdk.stringToCloudFormation(properties.type),\n        ValidFrom: cdk.stringToCloudFormation(properties.validFrom),\n        ValidUntil: cdk.stringToCloudFormation(properties.validUntil),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2FleetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2FleetProps>();\n    ret.addPropertyResult('launchTemplateConfigs', 'LaunchTemplateConfigs', cfn_parse.FromCloudFormation.getArray(CfnEC2FleetFleetLaunchTemplateConfigRequestPropertyFromCloudFormation)(properties.LaunchTemplateConfigs));\n    ret.addPropertyResult('targetCapacitySpecification', 'TargetCapacitySpecification', CfnEC2FleetTargetCapacitySpecificationRequestPropertyFromCloudFormation(properties.TargetCapacitySpecification));\n    ret.addPropertyResult('context', 'Context', properties.Context != null ? cfn_parse.FromCloudFormation.getString(properties.Context) : undefined);\n    ret.addPropertyResult('excessCapacityTerminationPolicy', 'ExcessCapacityTerminationPolicy', properties.ExcessCapacityTerminationPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.ExcessCapacityTerminationPolicy) : undefined);\n    ret.addPropertyResult('onDemandOptions', 'OnDemandOptions', properties.OnDemandOptions != null ? CfnEC2FleetOnDemandOptionsRequestPropertyFromCloudFormation(properties.OnDemandOptions) : undefined);\n    ret.addPropertyResult('replaceUnhealthyInstances', 'ReplaceUnhealthyInstances', properties.ReplaceUnhealthyInstances != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReplaceUnhealthyInstances) : undefined);\n    ret.addPropertyResult('spotOptions', 'SpotOptions', properties.SpotOptions != null ? CfnEC2FleetSpotOptionsRequestPropertyFromCloudFormation(properties.SpotOptions) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnEC2FleetTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addPropertyResult('terminateInstancesWithExpiration', 'TerminateInstancesWithExpiration', properties.TerminateInstancesWithExpiration != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TerminateInstancesWithExpiration) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('validFrom', 'ValidFrom', properties.ValidFrom != null ? cfn_parse.FromCloudFormation.getString(properties.ValidFrom) : undefined);\n    ret.addPropertyResult('validUntil', 'ValidUntil', properties.ValidUntil != null ? cfn_parse.FromCloudFormation.getString(properties.ValidUntil) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnEC2Fleet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::EC2Fleet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEC2Fleet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEC2FleetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEC2Fleet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                       \n    public readonly attrFleetId: string;\n\n                                                                                                                                                                                                                   \n    public launchTemplateConfigs: Array<CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                    \n    public targetCapacitySpecification: CfnEC2Fleet.TargetCapacitySpecificationRequestProperty | cdk.IResolvable;\n\n                                                                                                                                                                          \n    public context: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    public excessCapacityTerminationPolicy: string | undefined;\n\n                                                                                                                                                                                                                                            \n    public onDemandOptions: CfnEC2Fleet.OnDemandOptionsRequestProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public replaceUnhealthyInstances: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                   \n    public spotOptions: CfnEC2Fleet.SpotOptionsRequestProperty | cdk.IResolvable | undefined;\n\nn    public tagSpecifications: Array<CfnEC2Fleet.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                              \n    public terminateInstancesWithExpiration: boolean | cdk.IResolvable | undefined;\n\nn    public type: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public validFrom: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public validUntil: string | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnEC2FleetProps) {\n        super(scope, id, { type: CfnEC2Fleet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'launchTemplateConfigs', this);\n        cdk.requireProperty(props, 'targetCapacitySpecification', this);\n        this.attrFleetId = cdk.Token.asString(this.getAtt('FleetId'));\n\n        this.launchTemplateConfigs = props.launchTemplateConfigs;\n        this.targetCapacitySpecification = props.targetCapacitySpecification;\n        this.context = props.context;\n        this.excessCapacityTerminationPolicy = props.excessCapacityTerminationPolicy;\n        this.onDemandOptions = props.onDemandOptions;\n        this.replaceUnhealthyInstances = props.replaceUnhealthyInstances;\n        this.spotOptions = props.spotOptions;\n        this.tagSpecifications = props.tagSpecifications;\n        this.terminateInstancesWithExpiration = props.terminateInstancesWithExpiration;\n        this.type = props.type;\n        this.validFrom = props.validFrom;\n        this.validUntil = props.validUntil;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEC2Fleet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            launchTemplateConfigs: this.launchTemplateConfigs,\n            targetCapacitySpecification: this.targetCapacitySpecification,\n            context: this.context,\n            excessCapacityTerminationPolicy: this.excessCapacityTerminationPolicy,\n            onDemandOptions: this.onDemandOptions,\n            replaceUnhealthyInstances: this.replaceUnhealthyInstances,\n            spotOptions: this.spotOptions,\n            tagSpecifications: this.tagSpecifications,\n            terminateInstancesWithExpiration: this.terminateInstancesWithExpiration,\n            type: this.type,\n            validFrom: this.validFrom,\n            validUntil: this.validUntil,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEC2FleetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface AcceleratorCountRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                        \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AcceleratorCountRequestProperty`\n *\n * @param properties - the TypeScript properties of a `AcceleratorCountRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_AcceleratorCountRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"AcceleratorCountRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.AcceleratorCountRequest` resource\n *\n * @param properties - the TypeScript properties of a `AcceleratorCountRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.AcceleratorCountRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetAcceleratorCountRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_AcceleratorCountRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetAcceleratorCountRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.AcceleratorCountRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.AcceleratorCountRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                               \n    export interface AcceleratorTotalMemoryMiBRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AcceleratorTotalMemoryMiBRequestProperty`\n *\n * @param properties - the TypeScript properties of a `AcceleratorTotalMemoryMiBRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"AcceleratorTotalMemoryMiBRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.AcceleratorTotalMemoryMiBRequest` resource\n *\n * @param properties - the TypeScript properties of a `AcceleratorTotalMemoryMiBRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.AcceleratorTotalMemoryMiBRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface BaselineEbsBandwidthMbpsRequestProperty {\n                                                                                                                                                                                                                                                                                                                                             \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BaselineEbsBandwidthMbpsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `BaselineEbsBandwidthMbpsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"BaselineEbsBandwidthMbpsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.BaselineEbsBandwidthMbpsRequest` resource\n *\n * @param properties - the TypeScript properties of a `BaselineEbsBandwidthMbpsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.BaselineEbsBandwidthMbpsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\nn    export interface CapacityRebalanceProperty {\nn        readonly replacementStrategy?: string;\nn        readonly terminationDelay?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityRebalanceProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityRebalanceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_CapacityRebalancePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replacementStrategy', cdk.validateString)(properties.replacementStrategy));\n    errors.collect(cdk.propertyValidator('terminationDelay', cdk.validateNumber)(properties.terminationDelay));\n    return errors.wrap('supplied properties not correct for \"CapacityRebalanceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.CapacityRebalance` resource\n *\n * @param properties - the TypeScript properties of a `CapacityRebalanceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.CapacityRebalance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetCapacityRebalancePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_CapacityRebalancePropertyValidator(properties).assertSuccess();\n    return {\n        ReplacementStrategy: cdk.stringToCloudFormation(properties.replacementStrategy),\n        TerminationDelay: cdk.numberToCloudFormation(properties.terminationDelay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetCapacityRebalancePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.CapacityRebalanceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.CapacityRebalanceProperty>();\n    ret.addPropertyResult('replacementStrategy', 'ReplacementStrategy', properties.ReplacementStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.ReplacementStrategy) : undefined);\n    ret.addPropertyResult('terminationDelay', 'TerminationDelay', properties.TerminationDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationDelay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\nn    export interface CapacityReservationOptionsRequestProperty {\nn        readonly usageStrategy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityReservationOptionsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityReservationOptionsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_CapacityReservationOptionsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('usageStrategy', cdk.validateString)(properties.usageStrategy));\n    return errors.wrap('supplied properties not correct for \"CapacityReservationOptionsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.CapacityReservationOptionsRequest` resource\n *\n * @param properties - the TypeScript properties of a `CapacityReservationOptionsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.CapacityReservationOptionsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetCapacityReservationOptionsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_CapacityReservationOptionsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        UsageStrategy: cdk.stringToCloudFormation(properties.usageStrategy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetCapacityReservationOptionsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.CapacityReservationOptionsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.CapacityReservationOptionsRequestProperty>();\n    ret.addPropertyResult('usageStrategy', 'UsageStrategy', properties.UsageStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.UsageStrategy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface FleetLaunchTemplateConfigRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly launchTemplateSpecification?: CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly overrides?: Array<CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FleetLaunchTemplateConfigRequestProperty`\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateConfigRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_FleetLaunchTemplateConfigRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateSpecification', CfnEC2Fleet_FleetLaunchTemplateSpecificationRequestPropertyValidator)(properties.launchTemplateSpecification));\n    errors.collect(cdk.propertyValidator('overrides', cdk.listValidator(CfnEC2Fleet_FleetLaunchTemplateOverridesRequestPropertyValidator))(properties.overrides));\n    return errors.wrap('supplied properties not correct for \"FleetLaunchTemplateConfigRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest` resource\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateConfigRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetFleetLaunchTemplateConfigRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_FleetLaunchTemplateConfigRequestPropertyValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateSpecification: cfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyToCloudFormation(properties.launchTemplateSpecification),\n        Overrides: cdk.listMapper(cfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyToCloudFormation)(properties.overrides),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetFleetLaunchTemplateConfigRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.FleetLaunchTemplateConfigRequestProperty>();\n    ret.addPropertyResult('launchTemplateSpecification', 'LaunchTemplateSpecification', properties.LaunchTemplateSpecification != null ? CfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyFromCloudFormation(properties.LaunchTemplateSpecification) : undefined);\n    ret.addPropertyResult('overrides', 'Overrides', properties.Overrides != null ? cfn_parse.FromCloudFormation.getArray(CfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyFromCloudFormation)(properties.Overrides) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\nn    export interface FleetLaunchTemplateOverridesRequestProperty {\n                                                                                                                                                                                                                                                                                                                               \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly instanceRequirements?: CfnEC2Fleet.InstanceRequirementsRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly maxPrice?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly placement?: CfnEC2Fleet.PlacementProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly priority?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly subnetId?: string;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly weightedCapacity?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FleetLaunchTemplateOverridesRequestProperty`\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateOverridesRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_FleetLaunchTemplateOverridesRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('instanceRequirements', CfnEC2Fleet_InstanceRequirementsRequestPropertyValidator)(properties.instanceRequirements));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('maxPrice', cdk.validateString)(properties.maxPrice));\n    errors.collect(cdk.propertyValidator('placement', CfnEC2Fleet_PlacementPropertyValidator)(properties.placement));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateNumber)(properties.weightedCapacity));\n    return errors.wrap('supplied properties not correct for \"FleetLaunchTemplateOverridesRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest` resource\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateOverridesRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_FleetLaunchTemplateOverridesRequestPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        InstanceRequirements: cfnEC2FleetInstanceRequirementsRequestPropertyToCloudFormation(properties.instanceRequirements),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        MaxPrice: cdk.stringToCloudFormation(properties.maxPrice),\n        Placement: cfnEC2FleetPlacementPropertyToCloudFormation(properties.placement),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.FleetLaunchTemplateOverridesRequestProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('instanceRequirements', 'InstanceRequirements', properties.InstanceRequirements != null ? CfnEC2FleetInstanceRequirementsRequestPropertyFromCloudFormation(properties.InstanceRequirements) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('maxPrice', 'MaxPrice', properties.MaxPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxPrice) : undefined);\n    ret.addPropertyResult('placement', 'Placement', properties.Placement != null ? CfnEC2FleetPlacementPropertyFromCloudFormation(properties.Placement) : undefined);\n    ret.addPropertyResult('priority', 'Priority', properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('weightedCapacity', 'WeightedCapacity', properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.WeightedCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface FleetLaunchTemplateSpecificationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly launchTemplateId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly launchTemplateName?: string;\nn        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FleetLaunchTemplateSpecificationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateSpecificationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_FleetLaunchTemplateSpecificationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));\n    errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"FleetLaunchTemplateSpecificationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest` resource\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateSpecificationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_FleetLaunchTemplateSpecificationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),\n        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.FleetLaunchTemplateSpecificationRequestProperty>();\n    ret.addPropertyResult('launchTemplateId', 'LaunchTemplateId', properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : undefined);\n    ret.addPropertyResult('launchTemplateName', 'LaunchTemplateName', properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\nn    export interface InstanceRequirementsRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly acceleratorCount?: CfnEC2Fleet.AcceleratorCountRequestProperty | cdk.IResolvable;\nn        readonly acceleratorManufacturers?: string[];\nn        readonly acceleratorNames?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly acceleratorTotalMemoryMiB?: CfnEC2Fleet.AcceleratorTotalMemoryMiBRequestProperty | cdk.IResolvable;\nn        readonly acceleratorTypes?: string[];\nn        readonly bareMetal?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly baselineEbsBandwidthMbps?: CfnEC2Fleet.BaselineEbsBandwidthMbpsRequestProperty | cdk.IResolvable;\nn        readonly burstablePerformance?: string;\nn        readonly cpuManufacturers?: string[];\nn        readonly excludedInstanceTypes?: string[];\nn        readonly instanceGenerations?: string[];\nn        readonly localStorage?: string;\nn        readonly localStorageTypes?: string[];\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly memoryGiBPerVCpu?: CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly memoryMiB?: CfnEC2Fleet.MemoryMiBRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly networkInterfaceCount?: CfnEC2Fleet.NetworkInterfaceCountRequestProperty | cdk.IResolvable;\nn        readonly onDemandMaxPricePercentageOverLowestPrice?: number;\nn        readonly requireHibernateSupport?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly spotMaxPricePercentageOverLowestPrice?: number;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly totalLocalStorageGb?: CfnEC2Fleet.TotalLocalStorageGBRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly vCpuCount?: CfnEC2Fleet.VCpuCountRangeRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceRequirementsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceRequirementsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_InstanceRequirementsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceleratorCount', CfnEC2Fleet_AcceleratorCountRequestPropertyValidator)(properties.acceleratorCount));\n    errors.collect(cdk.propertyValidator('acceleratorManufacturers', cdk.listValidator(cdk.validateString))(properties.acceleratorManufacturers));\n    errors.collect(cdk.propertyValidator('acceleratorNames', cdk.listValidator(cdk.validateString))(properties.acceleratorNames));\n    errors.collect(cdk.propertyValidator('acceleratorTotalMemoryMiB', CfnEC2Fleet_AcceleratorTotalMemoryMiBRequestPropertyValidator)(properties.acceleratorTotalMemoryMiB));\n    errors.collect(cdk.propertyValidator('acceleratorTypes', cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));\n    errors.collect(cdk.propertyValidator('bareMetal', cdk.validateString)(properties.bareMetal));\n    errors.collect(cdk.propertyValidator('baselineEbsBandwidthMbps', CfnEC2Fleet_BaselineEbsBandwidthMbpsRequestPropertyValidator)(properties.baselineEbsBandwidthMbps));\n    errors.collect(cdk.propertyValidator('burstablePerformance', cdk.validateString)(properties.burstablePerformance));\n    errors.collect(cdk.propertyValidator('cpuManufacturers', cdk.listValidator(cdk.validateString))(properties.cpuManufacturers));\n    errors.collect(cdk.propertyValidator('excludedInstanceTypes', cdk.listValidator(cdk.validateString))(properties.excludedInstanceTypes));\n    errors.collect(cdk.propertyValidator('instanceGenerations', cdk.listValidator(cdk.validateString))(properties.instanceGenerations));\n    errors.collect(cdk.propertyValidator('localStorage', cdk.validateString)(properties.localStorage));\n    errors.collect(cdk.propertyValidator('localStorageTypes', cdk.listValidator(cdk.validateString))(properties.localStorageTypes));\n    errors.collect(cdk.propertyValidator('memoryGiBPerVCpu', CfnEC2Fleet_MemoryGiBPerVCpuRequestPropertyValidator)(properties.memoryGiBPerVCpu));\n    errors.collect(cdk.propertyValidator('memoryMiB', CfnEC2Fleet_MemoryMiBRequestPropertyValidator)(properties.memoryMiB));\n    errors.collect(cdk.propertyValidator('networkInterfaceCount', CfnEC2Fleet_NetworkInterfaceCountRequestPropertyValidator)(properties.networkInterfaceCount));\n    errors.collect(cdk.propertyValidator('onDemandMaxPricePercentageOverLowestPrice', cdk.validateNumber)(properties.onDemandMaxPricePercentageOverLowestPrice));\n    errors.collect(cdk.propertyValidator('requireHibernateSupport', cdk.validateBoolean)(properties.requireHibernateSupport));\n    errors.collect(cdk.propertyValidator('spotMaxPricePercentageOverLowestPrice', cdk.validateNumber)(properties.spotMaxPricePercentageOverLowestPrice));\n    errors.collect(cdk.propertyValidator('totalLocalStorageGb', CfnEC2Fleet_TotalLocalStorageGBRequestPropertyValidator)(properties.totalLocalStorageGb));\n    errors.collect(cdk.propertyValidator('vCpuCount', CfnEC2Fleet_VCpuCountRangeRequestPropertyValidator)(properties.vCpuCount));\n    return errors.wrap('supplied properties not correct for \"InstanceRequirementsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.InstanceRequirementsRequest` resource\n *\n * @param properties - the TypeScript properties of a `InstanceRequirementsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.InstanceRequirementsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetInstanceRequirementsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_InstanceRequirementsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        AcceleratorCount: cfnEC2FleetAcceleratorCountRequestPropertyToCloudFormation(properties.acceleratorCount),\n        AcceleratorManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorManufacturers),\n        AcceleratorNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorNames),\n        AcceleratorTotalMemoryMiB: cfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties.acceleratorTotalMemoryMiB),\n        AcceleratorTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),\n        BareMetal: cdk.stringToCloudFormation(properties.bareMetal),\n        BaselineEbsBandwidthMbps: cfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties.baselineEbsBandwidthMbps),\n        BurstablePerformance: cdk.stringToCloudFormation(properties.burstablePerformance),\n        CpuManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.cpuManufacturers),\n        ExcludedInstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedInstanceTypes),\n        InstanceGenerations: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceGenerations),\n        LocalStorage: cdk.stringToCloudFormation(properties.localStorage),\n        LocalStorageTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.localStorageTypes),\n        MemoryGiBPerVCpu: cfnEC2FleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties.memoryGiBPerVCpu),\n        MemoryMiB: cfnEC2FleetMemoryMiBRequestPropertyToCloudFormation(properties.memoryMiB),\n        NetworkInterfaceCount: cfnEC2FleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties.networkInterfaceCount),\n        OnDemandMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.onDemandMaxPricePercentageOverLowestPrice),\n        RequireHibernateSupport: cdk.booleanToCloudFormation(properties.requireHibernateSupport),\n        SpotMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.spotMaxPricePercentageOverLowestPrice),\n        TotalLocalStorageGB: cfnEC2FleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties.totalLocalStorageGb),\n        VCpuCount: cfnEC2FleetVCpuCountRangeRequestPropertyToCloudFormation(properties.vCpuCount),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetInstanceRequirementsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.InstanceRequirementsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.InstanceRequirementsRequestProperty>();\n    ret.addPropertyResult('acceleratorCount', 'AcceleratorCount', properties.AcceleratorCount != null ? CfnEC2FleetAcceleratorCountRequestPropertyFromCloudFormation(properties.AcceleratorCount) : undefined);\n    ret.addPropertyResult('acceleratorManufacturers', 'AcceleratorManufacturers', properties.AcceleratorManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorManufacturers) : undefined);\n    ret.addPropertyResult('acceleratorNames', 'AcceleratorNames', properties.AcceleratorNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorNames) : undefined);\n    ret.addPropertyResult('acceleratorTotalMemoryMiB', 'AcceleratorTotalMemoryMiB', properties.AcceleratorTotalMemoryMiB != null ? CfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties.AcceleratorTotalMemoryMiB) : undefined);\n    ret.addPropertyResult('acceleratorTypes', 'AcceleratorTypes', properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorTypes) : undefined);\n    ret.addPropertyResult('bareMetal', 'BareMetal', properties.BareMetal != null ? cfn_parse.FromCloudFormation.getString(properties.BareMetal) : undefined);\n    ret.addPropertyResult('baselineEbsBandwidthMbps', 'BaselineEbsBandwidthMbps', properties.BaselineEbsBandwidthMbps != null ? CfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties.BaselineEbsBandwidthMbps) : undefined);\n    ret.addPropertyResult('burstablePerformance', 'BurstablePerformance', properties.BurstablePerformance != null ? cfn_parse.FromCloudFormation.getString(properties.BurstablePerformance) : undefined);\n    ret.addPropertyResult('cpuManufacturers', 'CpuManufacturers', properties.CpuManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CpuManufacturers) : undefined);\n    ret.addPropertyResult('excludedInstanceTypes', 'ExcludedInstanceTypes', properties.ExcludedInstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedInstanceTypes) : undefined);\n    ret.addPropertyResult('instanceGenerations', 'InstanceGenerations', properties.InstanceGenerations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceGenerations) : undefined);\n    ret.addPropertyResult('localStorage', 'LocalStorage', properties.LocalStorage != null ? cfn_parse.FromCloudFormation.getString(properties.LocalStorage) : undefined);\n    ret.addPropertyResult('localStorageTypes', 'LocalStorageTypes', properties.LocalStorageTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LocalStorageTypes) : undefined);\n    ret.addPropertyResult('memoryGiBPerVCpu', 'MemoryGiBPerVCpu', properties.MemoryGiBPerVCpu != null ? CfnEC2FleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties.MemoryGiBPerVCpu) : undefined);\n    ret.addPropertyResult('memoryMiB', 'MemoryMiB', properties.MemoryMiB != null ? CfnEC2FleetMemoryMiBRequestPropertyFromCloudFormation(properties.MemoryMiB) : undefined);\n    ret.addPropertyResult('networkInterfaceCount', 'NetworkInterfaceCount', properties.NetworkInterfaceCount != null ? CfnEC2FleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties.NetworkInterfaceCount) : undefined);\n    ret.addPropertyResult('onDemandMaxPricePercentageOverLowestPrice', 'OnDemandMaxPricePercentageOverLowestPrice', properties.OnDemandMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandMaxPricePercentageOverLowestPrice) : undefined);\n    ret.addPropertyResult('requireHibernateSupport', 'RequireHibernateSupport', properties.RequireHibernateSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireHibernateSupport) : undefined);\n    ret.addPropertyResult('spotMaxPricePercentageOverLowestPrice', 'SpotMaxPricePercentageOverLowestPrice', properties.SpotMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotMaxPricePercentageOverLowestPrice) : undefined);\n    ret.addPropertyResult('totalLocalStorageGb', 'TotalLocalStorageGB', properties.TotalLocalStorageGB != null ? CfnEC2FleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties.TotalLocalStorageGB) : undefined);\n    ret.addPropertyResult('vCpuCount', 'VCpuCount', properties.VCpuCount != null ? CfnEC2FleetVCpuCountRangeRequestPropertyFromCloudFormation(properties.VCpuCount) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                   \n    export interface MaintenanceStrategiesProperty {\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly capacityRebalance?: CfnEC2Fleet.CapacityRebalanceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MaintenanceStrategiesProperty`\n *\n * @param properties - the TypeScript properties of a `MaintenanceStrategiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_MaintenanceStrategiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityRebalance', CfnEC2Fleet_CapacityRebalancePropertyValidator)(properties.capacityRebalance));\n    return errors.wrap('supplied properties not correct for \"MaintenanceStrategiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.MaintenanceStrategies` resource\n *\n * @param properties - the TypeScript properties of a `MaintenanceStrategiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.MaintenanceStrategies` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetMaintenanceStrategiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_MaintenanceStrategiesPropertyValidator(properties).assertSuccess();\n    return {\n        CapacityRebalance: cfnEC2FleetCapacityRebalancePropertyToCloudFormation(properties.capacityRebalance),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetMaintenanceStrategiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.MaintenanceStrategiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.MaintenanceStrategiesProperty>();\n    ret.addPropertyResult('capacityRebalance', 'CapacityRebalance', properties.CapacityRebalance != null ? CfnEC2FleetCapacityRebalancePropertyFromCloudFormation(properties.CapacityRebalance) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                             \n    export interface MemoryGiBPerVCpuRequestProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemoryGiBPerVCpuRequestProperty`\n *\n * @param properties - the TypeScript properties of a `MemoryGiBPerVCpuRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_MemoryGiBPerVCpuRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"MemoryGiBPerVCpuRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.MemoryGiBPerVCpuRequest` resource\n *\n * @param properties - the TypeScript properties of a `MemoryGiBPerVCpuRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.MemoryGiBPerVCpuRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_MemoryGiBPerVCpuRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.MemoryGiBPerVCpuRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                             \n    export interface MemoryMiBRequestProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                     \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemoryMiBRequestProperty`\n *\n * @param properties - the TypeScript properties of a `MemoryMiBRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_MemoryMiBRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"MemoryMiBRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.MemoryMiBRequest` resource\n *\n * @param properties - the TypeScript properties of a `MemoryMiBRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.MemoryMiBRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetMemoryMiBRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_MemoryMiBRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetMemoryMiBRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.MemoryMiBRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.MemoryMiBRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                             \n    export interface NetworkInterfaceCountRequestProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkInterfaceCountRequestProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceCountRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_NetworkInterfaceCountRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"NetworkInterfaceCountRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.NetworkInterfaceCountRequest` resource\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceCountRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.NetworkInterfaceCountRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_NetworkInterfaceCountRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.NetworkInterfaceCountRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.NetworkInterfaceCountRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface OnDemandOptionsRequestProperty {\nn        readonly allocationStrategy?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly capacityReservationOptions?: CfnEC2Fleet.CapacityReservationOptionsRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly maxTotalPrice?: string;\nn        readonly minTargetCapacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly singleAvailabilityZone?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly singleInstanceType?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnDemandOptionsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `OnDemandOptionsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_OnDemandOptionsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));\n    errors.collect(cdk.propertyValidator('capacityReservationOptions', CfnEC2Fleet_CapacityReservationOptionsRequestPropertyValidator)(properties.capacityReservationOptions));\n    errors.collect(cdk.propertyValidator('maxTotalPrice', cdk.validateString)(properties.maxTotalPrice));\n    errors.collect(cdk.propertyValidator('minTargetCapacity', cdk.validateNumber)(properties.minTargetCapacity));\n    errors.collect(cdk.propertyValidator('singleAvailabilityZone', cdk.validateBoolean)(properties.singleAvailabilityZone));\n    errors.collect(cdk.propertyValidator('singleInstanceType', cdk.validateBoolean)(properties.singleInstanceType));\n    return errors.wrap('supplied properties not correct for \"OnDemandOptionsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.OnDemandOptionsRequest` resource\n *\n * @param properties - the TypeScript properties of a `OnDemandOptionsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.OnDemandOptionsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetOnDemandOptionsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_OnDemandOptionsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),\n        CapacityReservationOptions: cfnEC2FleetCapacityReservationOptionsRequestPropertyToCloudFormation(properties.capacityReservationOptions),\n        MaxTotalPrice: cdk.stringToCloudFormation(properties.maxTotalPrice),\n        MinTargetCapacity: cdk.numberToCloudFormation(properties.minTargetCapacity),\n        SingleAvailabilityZone: cdk.booleanToCloudFormation(properties.singleAvailabilityZone),\n        SingleInstanceType: cdk.booleanToCloudFormation(properties.singleInstanceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetOnDemandOptionsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.OnDemandOptionsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.OnDemandOptionsRequestProperty>();\n    ret.addPropertyResult('allocationStrategy', 'AllocationStrategy', properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : undefined);\n    ret.addPropertyResult('capacityReservationOptions', 'CapacityReservationOptions', properties.CapacityReservationOptions != null ? CfnEC2FleetCapacityReservationOptionsRequestPropertyFromCloudFormation(properties.CapacityReservationOptions) : undefined);\n    ret.addPropertyResult('maxTotalPrice', 'MaxTotalPrice', properties.MaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxTotalPrice) : undefined);\n    ret.addPropertyResult('minTargetCapacity', 'MinTargetCapacity', properties.MinTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinTargetCapacity) : undefined);\n    ret.addPropertyResult('singleAvailabilityZone', 'SingleAvailabilityZone', properties.SingleAvailabilityZone != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleAvailabilityZone) : undefined);\n    ret.addPropertyResult('singleInstanceType', 'SingleInstanceType', properties.SingleInstanceType != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleInstanceType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                            \n    export interface PlacementProperty {\nn        readonly affinity?: string;\nn        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                \n        readonly groupName?: string;\nn        readonly hostId?: string;\nn        readonly hostResourceGroupArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly partitionNumber?: number;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly spreadDomain?: string;\nn        readonly tenancy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_PlacementPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('affinity', cdk.validateString)(properties.affinity));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('hostId', cdk.validateString)(properties.hostId));\n    errors.collect(cdk.propertyValidator('hostResourceGroupArn', cdk.validateString)(properties.hostResourceGroupArn));\n    errors.collect(cdk.propertyValidator('partitionNumber', cdk.validateNumber)(properties.partitionNumber));\n    errors.collect(cdk.propertyValidator('spreadDomain', cdk.validateString)(properties.spreadDomain));\n    errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));\n    return errors.wrap('supplied properties not correct for \"PlacementProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.Placement` resource\n *\n * @param properties - the TypeScript properties of a `PlacementProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.Placement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetPlacementPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_PlacementPropertyValidator(properties).assertSuccess();\n    return {\n        Affinity: cdk.stringToCloudFormation(properties.affinity),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        HostId: cdk.stringToCloudFormation(properties.hostId),\n        HostResourceGroupArn: cdk.stringToCloudFormation(properties.hostResourceGroupArn),\n        PartitionNumber: cdk.numberToCloudFormation(properties.partitionNumber),\n        SpreadDomain: cdk.stringToCloudFormation(properties.spreadDomain),\n        Tenancy: cdk.stringToCloudFormation(properties.tenancy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetPlacementPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.PlacementProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.PlacementProperty>();\n    ret.addPropertyResult('affinity', 'Affinity', properties.Affinity != null ? cfn_parse.FromCloudFormation.getString(properties.Affinity) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('hostId', 'HostId', properties.HostId != null ? cfn_parse.FromCloudFormation.getString(properties.HostId) : undefined);\n    ret.addPropertyResult('hostResourceGroupArn', 'HostResourceGroupArn', properties.HostResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HostResourceGroupArn) : undefined);\n    ret.addPropertyResult('partitionNumber', 'PartitionNumber', properties.PartitionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.PartitionNumber) : undefined);\n    ret.addPropertyResult('spreadDomain', 'SpreadDomain', properties.SpreadDomain != null ? cfn_parse.FromCloudFormation.getString(properties.SpreadDomain) : undefined);\n    ret.addPropertyResult('tenancy', 'Tenancy', properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface SpotOptionsRequestProperty {\nn        readonly allocationStrategy?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly instanceInterruptionBehavior?: string;\nn        readonly instancePoolsToUseCount?: number;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly maintenanceStrategies?: CfnEC2Fleet.MaintenanceStrategiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly maxTotalPrice?: string;\nn        readonly minTargetCapacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly singleAvailabilityZone?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly singleInstanceType?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotOptionsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `SpotOptionsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_SpotOptionsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));\n    errors.collect(cdk.propertyValidator('instanceInterruptionBehavior', cdk.validateString)(properties.instanceInterruptionBehavior));\n    errors.collect(cdk.propertyValidator('instancePoolsToUseCount', cdk.validateNumber)(properties.instancePoolsToUseCount));\n    errors.collect(cdk.propertyValidator('maintenanceStrategies', CfnEC2Fleet_MaintenanceStrategiesPropertyValidator)(properties.maintenanceStrategies));\n    errors.collect(cdk.propertyValidator('maxTotalPrice', cdk.validateString)(properties.maxTotalPrice));\n    errors.collect(cdk.propertyValidator('minTargetCapacity', cdk.validateNumber)(properties.minTargetCapacity));\n    errors.collect(cdk.propertyValidator('singleAvailabilityZone', cdk.validateBoolean)(properties.singleAvailabilityZone));\n    errors.collect(cdk.propertyValidator('singleInstanceType', cdk.validateBoolean)(properties.singleInstanceType));\n    return errors.wrap('supplied properties not correct for \"SpotOptionsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.SpotOptionsRequest` resource\n *\n * @param properties - the TypeScript properties of a `SpotOptionsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.SpotOptionsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetSpotOptionsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_SpotOptionsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),\n        InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),\n        InstancePoolsToUseCount: cdk.numberToCloudFormation(properties.instancePoolsToUseCount),\n        MaintenanceStrategies: cfnEC2FleetMaintenanceStrategiesPropertyToCloudFormation(properties.maintenanceStrategies),\n        MaxTotalPrice: cdk.stringToCloudFormation(properties.maxTotalPrice),\n        MinTargetCapacity: cdk.numberToCloudFormation(properties.minTargetCapacity),\n        SingleAvailabilityZone: cdk.booleanToCloudFormation(properties.singleAvailabilityZone),\n        SingleInstanceType: cdk.booleanToCloudFormation(properties.singleInstanceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetSpotOptionsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.SpotOptionsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.SpotOptionsRequestProperty>();\n    ret.addPropertyResult('allocationStrategy', 'AllocationStrategy', properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : undefined);\n    ret.addPropertyResult('instanceInterruptionBehavior', 'InstanceInterruptionBehavior', properties.InstanceInterruptionBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInterruptionBehavior) : undefined);\n    ret.addPropertyResult('instancePoolsToUseCount', 'InstancePoolsToUseCount', properties.InstancePoolsToUseCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstancePoolsToUseCount) : undefined);\n    ret.addPropertyResult('maintenanceStrategies', 'MaintenanceStrategies', properties.MaintenanceStrategies != null ? CfnEC2FleetMaintenanceStrategiesPropertyFromCloudFormation(properties.MaintenanceStrategies) : undefined);\n    ret.addPropertyResult('maxTotalPrice', 'MaxTotalPrice', properties.MaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxTotalPrice) : undefined);\n    ret.addPropertyResult('minTargetCapacity', 'MinTargetCapacity', properties.MinTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinTargetCapacity) : undefined);\n    ret.addPropertyResult('singleAvailabilityZone', 'SingleAvailabilityZone', properties.SingleAvailabilityZone != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleAvailabilityZone) : undefined);\n    ret.addPropertyResult('singleInstanceType', 'SingleInstanceType', properties.SingleInstanceType != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleInstanceType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface TagSpecificationProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly resourceType?: string;\n                                                                                                                                                                                                                                                        \n        readonly tags?: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_TagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"TagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.TagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.TagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_TagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.TagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.TagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\nn    export interface TargetCapacitySpecificationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly defaultTargetCapacityType?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly onDemandTargetCapacity?: number;\n                                                                                                                                                                                                                                                                                                            \n        readonly spotTargetCapacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly targetCapacityUnitType?: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly totalTargetCapacity: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetCapacitySpecificationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `TargetCapacitySpecificationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_TargetCapacitySpecificationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultTargetCapacityType', cdk.validateString)(properties.defaultTargetCapacityType));\n    errors.collect(cdk.propertyValidator('onDemandTargetCapacity', cdk.validateNumber)(properties.onDemandTargetCapacity));\n    errors.collect(cdk.propertyValidator('spotTargetCapacity', cdk.validateNumber)(properties.spotTargetCapacity));\n    errors.collect(cdk.propertyValidator('targetCapacityUnitType', cdk.validateString)(properties.targetCapacityUnitType));\n    errors.collect(cdk.propertyValidator('totalTargetCapacity', cdk.requiredValidator)(properties.totalTargetCapacity));\n    errors.collect(cdk.propertyValidator('totalTargetCapacity', cdk.validateNumber)(properties.totalTargetCapacity));\n    return errors.wrap('supplied properties not correct for \"TargetCapacitySpecificationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest` resource\n *\n * @param properties - the TypeScript properties of a `TargetCapacitySpecificationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetTargetCapacitySpecificationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_TargetCapacitySpecificationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultTargetCapacityType: cdk.stringToCloudFormation(properties.defaultTargetCapacityType),\n        OnDemandTargetCapacity: cdk.numberToCloudFormation(properties.onDemandTargetCapacity),\n        SpotTargetCapacity: cdk.numberToCloudFormation(properties.spotTargetCapacity),\n        TargetCapacityUnitType: cdk.stringToCloudFormation(properties.targetCapacityUnitType),\n        TotalTargetCapacity: cdk.numberToCloudFormation(properties.totalTargetCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetTargetCapacitySpecificationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.TargetCapacitySpecificationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.TargetCapacitySpecificationRequestProperty>();\n    ret.addPropertyResult('defaultTargetCapacityType', 'DefaultTargetCapacityType', properties.DefaultTargetCapacityType != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultTargetCapacityType) : undefined);\n    ret.addPropertyResult('onDemandTargetCapacity', 'OnDemandTargetCapacity', properties.OnDemandTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandTargetCapacity) : undefined);\n    ret.addPropertyResult('spotTargetCapacity', 'SpotTargetCapacity', properties.SpotTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotTargetCapacity) : undefined);\n    ret.addPropertyResult('targetCapacityUnitType', 'TargetCapacityUnitType', properties.TargetCapacityUnitType != null ? cfn_parse.FromCloudFormation.getString(properties.TargetCapacityUnitType) : undefined);\n    ret.addPropertyResult('totalTargetCapacity', 'TotalTargetCapacity', cfn_parse.FromCloudFormation.getNumber(properties.TotalTargetCapacity));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                                                   \n    export interface TotalLocalStorageGBRequestProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TotalLocalStorageGBRequestProperty`\n *\n * @param properties - the TypeScript properties of a `TotalLocalStorageGBRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_TotalLocalStorageGBRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"TotalLocalStorageGBRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.TotalLocalStorageGBRequest` resource\n *\n * @param properties - the TypeScript properties of a `TotalLocalStorageGBRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.TotalLocalStorageGBRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_TotalLocalStorageGBRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.TotalLocalStorageGBRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.TotalLocalStorageGBRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEC2Fleet {\n                                                                                                                                                                                                                                                         \n    export interface VCpuCountRangeRequestProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                      \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VCpuCountRangeRequestProperty`\n *\n * @param properties - the TypeScript properties of a `VCpuCountRangeRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEC2Fleet_VCpuCountRangeRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"VCpuCountRangeRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.VCpuCountRangeRequest` resource\n *\n * @param properties - the TypeScript properties of a `VCpuCountRangeRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EC2Fleet.VCpuCountRangeRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEC2FleetVCpuCountRangeRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEC2Fleet_VCpuCountRangeRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEC2FleetVCpuCountRangeRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEC2Fleet.VCpuCountRangeRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEC2Fleet.VCpuCountRangeRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                        \nexport interface CfnEIPProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly domain?: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly instanceId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly publicIpv4Pool?: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEIPProps`\n *\n * @param properties - the TypeScript properties of a `CfnEIPProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEIPPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('publicIpv4Pool', cdk.validateString)(properties.publicIpv4Pool));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEIPProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EIP` resource\n *\n * @param properties - the TypeScript properties of a `CfnEIPProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EIP` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEIPPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEIPPropsValidator(properties).assertSuccess();\n    return {\n        Domain: cdk.stringToCloudFormation(properties.domain),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n        PublicIpv4Pool: cdk.stringToCloudFormation(properties.publicIpv4Pool),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEIPPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEIPProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEIPProps>();\n    ret.addPropertyResult('domain', 'Domain', properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : undefined);\n    ret.addPropertyResult('instanceId', 'InstanceId', properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : undefined);\n    ret.addPropertyResult('publicIpv4Pool', 'PublicIpv4Pool', properties.PublicIpv4Pool != null ? cfn_parse.FromCloudFormation.getString(properties.PublicIpv4Pool) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEIP extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::EIP\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEIP {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEIPPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEIP(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                      \n    public readonly attrAllocationId: string;\n\nn    public domain: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public instanceId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public publicIpv4Pool: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnEIPProps = {}) {\n        super(scope, id, { type: CfnEIP.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrAllocationId = cdk.Token.asString(this.getAtt('AllocationId'));\n\n        this.domain = props.domain;\n        this.instanceId = props.instanceId;\n        this.publicIpv4Pool = props.publicIpv4Pool;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::EIP\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEIP.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domain: this.domain,\n            instanceId: this.instanceId,\n            publicIpv4Pool: this.publicIpv4Pool,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEIPPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                               \nexport interface CfnEIPAssociationProps {\n\n                                                                                                                                                                                                                                               \n    readonly allocationId?: string;\n\n                                                                                                                                                                                                                                                                                  \n    readonly eip?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly instanceId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly networkInterfaceId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly privateIpAddress?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEIPAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnEIPAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEIPAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocationId', cdk.validateString)(properties.allocationId));\n    errors.collect(cdk.propertyValidator('eip', cdk.validateString)(properties.eip));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    return errors.wrap('supplied properties not correct for \"CfnEIPAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EIPAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnEIPAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EIPAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEIPAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEIPAssociationPropsValidator(properties).assertSuccess();\n    return {\n        AllocationId: cdk.stringToCloudFormation(properties.allocationId),\n        EIP: cdk.stringToCloudFormation(properties.eip),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEIPAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEIPAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEIPAssociationProps>();\n    ret.addPropertyResult('allocationId', 'AllocationId', properties.AllocationId != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationId) : undefined);\n    ret.addPropertyResult('eip', 'EIP', properties.EIP != null ? cfn_parse.FromCloudFormation.getString(properties.EIP) : undefined);\n    ret.addPropertyResult('instanceId', 'InstanceId', properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEIPAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::EIPAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEIPAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEIPAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEIPAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                               \n    public allocationId: string | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public eip: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public instanceId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public networkInterfaceId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public privateIpAddress: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnEIPAssociationProps = {}) {\n        super(scope, id, { type: CfnEIPAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.allocationId = props.allocationId;\n        this.eip = props.eip;\n        this.instanceId = props.instanceId;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.privateIpAddress = props.privateIpAddress;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEIPAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            allocationId: this.allocationId,\n            eip: this.eip,\n            instanceId: this.instanceId,\n            networkInterfaceId: this.networkInterfaceId,\n            privateIpAddress: this.privateIpAddress,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEIPAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                  \nexport interface CfnEgressOnlyInternetGatewayProps {\n\n                                                                                                                                                                                                                                                                        \n    readonly vpcId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEgressOnlyInternetGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnEgressOnlyInternetGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEgressOnlyInternetGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnEgressOnlyInternetGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EgressOnlyInternetGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnEgressOnlyInternetGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EgressOnlyInternetGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEgressOnlyInternetGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEgressOnlyInternetGatewayPropsValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEgressOnlyInternetGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEgressOnlyInternetGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEgressOnlyInternetGatewayProps>();\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEgressOnlyInternetGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::EgressOnlyInternetGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEgressOnlyInternetGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEgressOnlyInternetGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEgressOnlyInternetGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                     \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                        \n    public vpcId: string;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnEgressOnlyInternetGatewayProps) {\n        super(scope, id, { type: CfnEgressOnlyInternetGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.vpcId = props.vpcId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEgressOnlyInternetGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            vpcId: this.vpcId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEgressOnlyInternetGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                        \nexport interface CfnEnclaveCertificateIamRoleAssociationProps {\n\n                                                                                                                                                                                                                                                                                                    \n    readonly certificateArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    readonly roleArn: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEnclaveCertificateIamRoleAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnEnclaveCertificateIamRoleAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEnclaveCertificateIamRoleAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.requiredValidator)(properties.certificateArn));\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"CfnEnclaveCertificateIamRoleAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::EnclaveCertificateIamRoleAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnEnclaveCertificateIamRoleAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::EnclaveCertificateIamRoleAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEnclaveCertificateIamRoleAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEnclaveCertificateIamRoleAssociationPropsValidator(properties).assertSuccess();\n    return {\n        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEnclaveCertificateIamRoleAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEnclaveCertificateIamRoleAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEnclaveCertificateIamRoleAssociationProps>();\n    ret.addPropertyResult('certificateArn', 'CertificateArn', cfn_parse.FromCloudFormation.getString(properties.CertificateArn));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEnclaveCertificateIamRoleAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::EnclaveCertificateIamRoleAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEnclaveCertificateIamRoleAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEnclaveCertificateIamRoleAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEnclaveCertificateIamRoleAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                      \n    public readonly attrCertificateS3BucketName: string;\n\n                                                                                                                                                                                                                                                                      \n    public readonly attrCertificateS3ObjectKey: string;\n\n                                                                                                                                                       \n    public readonly attrEncryptionKmsKeyId: string;\n\n                                                                                                                                                                                                                                                                                                    \n    public certificateArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnEnclaveCertificateIamRoleAssociationProps) {\n        super(scope, id, { type: CfnEnclaveCertificateIamRoleAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'certificateArn', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrCertificateS3BucketName = cdk.Token.asString(this.getAtt('CertificateS3BucketName'));\n        this.attrCertificateS3ObjectKey = cdk.Token.asString(this.getAtt('CertificateS3ObjectKey'));\n        this.attrEncryptionKmsKeyId = cdk.Token.asString(this.getAtt('EncryptionKmsKeyId'));\n\n        this.certificateArn = props.certificateArn;\n        this.roleArn = props.roleArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEnclaveCertificateIamRoleAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateArn: this.certificateArn,\n            roleArn: this.roleArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEnclaveCertificateIamRoleAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                              \nexport interface CfnFlowLogProps {\n\n                                                                                                                                                                                                                                                          \n    readonly resourceId: string;\n\n                                                                                                                                                                                                                                                                                                                                 \n    readonly resourceType: string;\n\n                                                                                                                                                                                                                                                                        \n    readonly trafficType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly deliverLogsPermissionArn?: string;\n\n                                                                                                                                                                                                  \n    readonly destinationOptions?: any | cdk.IResolvable;\n\nn    readonly logDestination?: string;\n\nn    readonly logDestinationType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly logFormat?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly logGroupName?: string;\n\nn    readonly maxAggregationInterval?: number;\n\n                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFlowLogProps`\n *\n * @param properties - the TypeScript properties of a `CfnFlowLogProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlowLogPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deliverLogsPermissionArn', cdk.validateString)(properties.deliverLogsPermissionArn));\n    errors.collect(cdk.propertyValidator('destinationOptions', cdk.validateObject)(properties.destinationOptions));\n    errors.collect(cdk.propertyValidator('logDestination', cdk.validateString)(properties.logDestination));\n    errors.collect(cdk.propertyValidator('logDestinationType', cdk.validateString)(properties.logDestinationType));\n    errors.collect(cdk.propertyValidator('logFormat', cdk.validateString)(properties.logFormat));\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    errors.collect(cdk.propertyValidator('maxAggregationInterval', cdk.validateNumber)(properties.maxAggregationInterval));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('trafficType', cdk.requiredValidator)(properties.trafficType));\n    errors.collect(cdk.propertyValidator('trafficType', cdk.validateString)(properties.trafficType));\n    return errors.wrap('supplied properties not correct for \"CfnFlowLogProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::FlowLog` resource\n *\n * @param properties - the TypeScript properties of a `CfnFlowLogProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::FlowLog` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowLogPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlowLogPropsValidator(properties).assertSuccess();\n    return {\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        TrafficType: cdk.stringToCloudFormation(properties.trafficType),\n        DeliverLogsPermissionArn: cdk.stringToCloudFormation(properties.deliverLogsPermissionArn),\n        DestinationOptions: cdk.objectToCloudFormation(properties.destinationOptions),\n        LogDestination: cdk.stringToCloudFormation(properties.logDestination),\n        LogDestinationType: cdk.stringToCloudFormation(properties.logDestinationType),\n        LogFormat: cdk.stringToCloudFormation(properties.logFormat),\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n        MaxAggregationInterval: cdk.numberToCloudFormation(properties.maxAggregationInterval),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowLogPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlowLogProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlowLogProps>();\n    ret.addPropertyResult('resourceId', 'ResourceId', cfn_parse.FromCloudFormation.getString(properties.ResourceId));\n    ret.addPropertyResult('resourceType', 'ResourceType', cfn_parse.FromCloudFormation.getString(properties.ResourceType));\n    ret.addPropertyResult('trafficType', 'TrafficType', cfn_parse.FromCloudFormation.getString(properties.TrafficType));\n    ret.addPropertyResult('deliverLogsPermissionArn', 'DeliverLogsPermissionArn', properties.DeliverLogsPermissionArn != null ? cfn_parse.FromCloudFormation.getString(properties.DeliverLogsPermissionArn) : undefined);\n    ret.addPropertyResult('destinationOptions', 'DestinationOptions', properties.DestinationOptions != null ? cfn_parse.FromCloudFormation.getAny(properties.DestinationOptions) : undefined);\n    ret.addPropertyResult('logDestination', 'LogDestination', properties.LogDestination != null ? cfn_parse.FromCloudFormation.getString(properties.LogDestination) : undefined);\n    ret.addPropertyResult('logDestinationType', 'LogDestinationType', properties.LogDestinationType != null ? cfn_parse.FromCloudFormation.getString(properties.LogDestinationType) : undefined);\n    ret.addPropertyResult('logFormat', 'LogFormat', properties.LogFormat != null ? cfn_parse.FromCloudFormation.getString(properties.LogFormat) : undefined);\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addPropertyResult('maxAggregationInterval', 'MaxAggregationInterval', properties.MaxAggregationInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxAggregationInterval) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFlowLog extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::FlowLog\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFlowLog {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFlowLogPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFlowLog(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                      \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                          \n    public resourceId: string;\n\n                                                                                                                                                                                                                                                                                                                                 \n    public resourceType: string;\n\n                                                                                                                                                                                                                                                                        \n    public trafficType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public deliverLogsPermissionArn: string | undefined;\n\n                                                                                                                                                                                                  \n    public destinationOptions: any | cdk.IResolvable | undefined;\n\nn    public logDestination: string | undefined;\n\nn    public logDestinationType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public logFormat: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public logGroupName: string | undefined;\n\nn    public maxAggregationInterval: number | undefined;\n\n                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnFlowLogProps) {\n        super(scope, id, { type: CfnFlowLog.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'resourceId', this);\n        cdk.requireProperty(props, 'resourceType', this);\n        cdk.requireProperty(props, 'trafficType', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.resourceId = props.resourceId;\n        this.resourceType = props.resourceType;\n        this.trafficType = props.trafficType;\n        this.deliverLogsPermissionArn = props.deliverLogsPermissionArn;\n        this.destinationOptions = props.destinationOptions;\n        this.logDestination = props.logDestination;\n        this.logDestinationType = props.logDestinationType;\n        this.logFormat = props.logFormat;\n        this.logGroupName = props.logGroupName;\n        this.maxAggregationInterval = props.maxAggregationInterval;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::FlowLog\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFlowLog.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resourceId: this.resourceId,\n            resourceType: this.resourceType,\n            trafficType: this.trafficType,\n            deliverLogsPermissionArn: this.deliverLogsPermissionArn,\n            destinationOptions: this.destinationOptions,\n            logDestination: this.logDestination,\n            logDestinationType: this.logDestinationType,\n            logFormat: this.logFormat,\n            logGroupName: this.logGroupName,\n            maxAggregationInterval: this.maxAggregationInterval,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFlowLogPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                        \nexport interface CfnGatewayRouteTableAssociationProps {\n\n                                                                                                                                                                                                                                 \n    readonly gatewayId: string;\n\n                                                                                                                                                                                                                                        \n    readonly routeTableId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGatewayRouteTableAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnGatewayRouteTableAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGatewayRouteTableAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gatewayId', cdk.requiredValidator)(properties.gatewayId));\n    errors.collect(cdk.propertyValidator('gatewayId', cdk.validateString)(properties.gatewayId));\n    errors.collect(cdk.propertyValidator('routeTableId', cdk.requiredValidator)(properties.routeTableId));\n    errors.collect(cdk.propertyValidator('routeTableId', cdk.validateString)(properties.routeTableId));\n    return errors.wrap('supplied properties not correct for \"CfnGatewayRouteTableAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::GatewayRouteTableAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnGatewayRouteTableAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::GatewayRouteTableAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGatewayRouteTableAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGatewayRouteTableAssociationPropsValidator(properties).assertSuccess();\n    return {\n        GatewayId: cdk.stringToCloudFormation(properties.gatewayId),\n        RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGatewayRouteTableAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGatewayRouteTableAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGatewayRouteTableAssociationProps>();\n    ret.addPropertyResult('gatewayId', 'GatewayId', cfn_parse.FromCloudFormation.getString(properties.GatewayId));\n    ret.addPropertyResult('routeTableId', 'RouteTableId', cfn_parse.FromCloudFormation.getString(properties.RouteTableId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnGatewayRouteTableAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::GatewayRouteTableAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGatewayRouteTableAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGatewayRouteTableAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGatewayRouteTableAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                           \n    public readonly attrAssociationId: string;\n\n                                                                                                                                                                                                                                 \n    public gatewayId: string;\n\n                                                                                                                                                                                                                                        \n    public routeTableId: string;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnGatewayRouteTableAssociationProps) {\n        super(scope, id, { type: CfnGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'gatewayId', this);\n        cdk.requireProperty(props, 'routeTableId', this);\n        this.attrAssociationId = cdk.Token.asString(this.getAtt('AssociationId'));\n\n        this.gatewayId = props.gatewayId;\n        this.routeTableId = props.routeTableId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            gatewayId: this.gatewayId,\n            routeTableId: this.routeTableId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGatewayRouteTableAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                        \nexport interface CfnHostProps {\n\n                                                                                                                                                                                                                                \n    readonly availabilityZone: string;\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly instanceType: string;\n\nn    readonly autoPlacement?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly hostRecovery?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnHostProps`\n *\n * @param properties - the TypeScript properties of a `CfnHostProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnHostPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoPlacement', cdk.validateString)(properties.autoPlacement));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.requiredValidator)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('hostRecovery', cdk.validateString)(properties.hostRecovery));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    return errors.wrap('supplied properties not correct for \"CfnHostProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Host` resource\n *\n * @param properties - the TypeScript properties of a `CfnHostProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Host` resource.\n */\n// @ts-ignore TS6133\nfunction cfnHostPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnHostPropsValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        AutoPlacement: cdk.stringToCloudFormation(properties.autoPlacement),\n        HostRecovery: cdk.stringToCloudFormation(properties.hostRecovery),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnHostPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnHostProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnHostProps>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('autoPlacement', 'AutoPlacement', properties.AutoPlacement != null ? cfn_parse.FromCloudFormation.getString(properties.AutoPlacement) : undefined);\n    ret.addPropertyResult('hostRecovery', 'HostRecovery', properties.HostRecovery != null ? cfn_parse.FromCloudFormation.getString(properties.HostRecovery) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnHost extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::Host\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnHost {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnHostPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnHost(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                 \n    public readonly attrHostId: string;\n\n                                                                                                                                                                                                                                \n    public availabilityZone: string;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public instanceType: string;\n\nn    public autoPlacement: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public hostRecovery: string | undefined;\n\n                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnHostProps) {\n        super(scope, id, { type: CfnHost.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'availabilityZone', this);\n        cdk.requireProperty(props, 'instanceType', this);\n        this.attrHostId = cdk.Token.asString(this.getAtt('HostId'));\n\n        this.availabilityZone = props.availabilityZone;\n        this.instanceType = props.instanceType;\n        this.autoPlacement = props.autoPlacement;\n        this.hostRecovery = props.hostRecovery;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnHost.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            availabilityZone: this.availabilityZone,\n            instanceType: this.instanceType,\n            autoPlacement: this.autoPlacement,\n            hostRecovery: this.hostRecovery,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnHostPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                        \nexport interface CfnIPAMProps {\n\n                                                                                                                                                                                          \n    readonly description?: string;\n\nn    readonly operatingRegions?: Array<CfnIPAM.IpamOperatingRegionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIPAMProps`\n *\n * @param properties - the TypeScript properties of a `CfnIPAMProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPAMPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('operatingRegions', cdk.listValidator(CfnIPAM_IpamOperatingRegionPropertyValidator))(properties.operatingRegions));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnIPAMProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::IPAM` resource\n *\n * @param properties - the TypeScript properties of a `CfnIPAMProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::IPAM` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPAMPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPAMPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        OperatingRegions: cdk.listMapper(cfnIPAMIpamOperatingRegionPropertyToCloudFormation)(properties.operatingRegions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPAMPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPAMProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPAMProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('operatingRegions', 'OperatingRegions', properties.OperatingRegions != null ? cfn_parse.FromCloudFormation.getArray(CfnIPAMIpamOperatingRegionPropertyFromCloudFormation)(properties.OperatingRegions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnIPAM extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::IPAM\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIPAM {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIPAMPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIPAM(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                               \n    public readonly attrArn: string;\n\n                                                                                 \n    public readonly attrIpamId: string;\n\n                                                                                                                        \n    public readonly attrPrivateDefaultScopeId: string;\n\n                                                                                                                      \n    public readonly attrPublicDefaultScopeId: string;\n\n                                                                                                                         \n    public readonly attrScopeCount: number;\n\n                                                                                                                                                                                          \n    public description: string | undefined;\n\nn    public operatingRegions: Array<CfnIPAM.IpamOperatingRegionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnIPAMProps = {}) {\n        super(scope, id, { type: CfnIPAM.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrIpamId = cdk.Token.asString(this.getAtt('IpamId'));\n        this.attrPrivateDefaultScopeId = cdk.Token.asString(this.getAtt('PrivateDefaultScopeId'));\n        this.attrPublicDefaultScopeId = cdk.Token.asString(this.getAtt('PublicDefaultScopeId'));\n        this.attrScopeCount = cdk.Token.asNumber(this.getAtt('ScopeCount'));\n\n        this.description = props.description;\n        this.operatingRegions = props.operatingRegions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::IPAM\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIPAM.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            operatingRegions: this.operatingRegions,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIPAMPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnIPAM {\nn    export interface IpamOperatingRegionProperty {\n                                                                                                                                                                                                                                                           \n        readonly regionName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IpamOperatingRegionProperty`\n *\n * @param properties - the TypeScript properties of a `IpamOperatingRegionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPAM_IpamOperatingRegionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('regionName', cdk.requiredValidator)(properties.regionName));\n    errors.collect(cdk.propertyValidator('regionName', cdk.validateString)(properties.regionName));\n    return errors.wrap('supplied properties not correct for \"IpamOperatingRegionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::IPAM.IpamOperatingRegion` resource\n *\n * @param properties - the TypeScript properties of a `IpamOperatingRegionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::IPAM.IpamOperatingRegion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPAMIpamOperatingRegionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPAM_IpamOperatingRegionPropertyValidator(properties).assertSuccess();\n    return {\n        RegionName: cdk.stringToCloudFormation(properties.regionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPAMIpamOperatingRegionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPAM.IpamOperatingRegionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPAM.IpamOperatingRegionProperty>();\n    ret.addPropertyResult('regionName', 'RegionName', cfn_parse.FromCloudFormation.getString(properties.RegionName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnIPAMAllocationProps {\n\n                                                                                                                                                                                                                                                     \n    readonly ipamPoolId: string;\n\nn    readonly cidr?: string;\n\n                                                                                                                                                                                                                  \n    readonly description?: string;\n\nn    readonly netmaskLength?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIPAMAllocationProps`\n *\n * @param properties - the TypeScript properties of a `CfnIPAMAllocationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPAMAllocationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('ipamPoolId', cdk.requiredValidator)(properties.ipamPoolId));\n    errors.collect(cdk.propertyValidator('ipamPoolId', cdk.validateString)(properties.ipamPoolId));\n    errors.collect(cdk.propertyValidator('netmaskLength', cdk.validateNumber)(properties.netmaskLength));\n    return errors.wrap('supplied properties not correct for \"CfnIPAMAllocationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::IPAMAllocation` resource\n *\n * @param properties - the TypeScript properties of a `CfnIPAMAllocationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::IPAMAllocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPAMAllocationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPAMAllocationPropsValidator(properties).assertSuccess();\n    return {\n        IpamPoolId: cdk.stringToCloudFormation(properties.ipamPoolId),\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n        Description: cdk.stringToCloudFormation(properties.description),\n        NetmaskLength: cdk.numberToCloudFormation(properties.netmaskLength),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPAMAllocationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPAMAllocationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPAMAllocationProps>();\n    ret.addPropertyResult('ipamPoolId', 'IpamPoolId', cfn_parse.FromCloudFormation.getString(properties.IpamPoolId));\n    ret.addPropertyResult('cidr', 'Cidr', properties.Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.Cidr) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('netmaskLength', 'NetmaskLength', properties.NetmaskLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetmaskLength) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnIPAMAllocation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::IPAMAllocation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIPAMAllocation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIPAMAllocationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIPAMAllocation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                    \n    public readonly attrIpamPoolAllocationId: string;\n\n                                                                                                                                                                                                                                                     \n    public ipamPoolId: string;\n\nn    public cidr: string | undefined;\n\n                                                                                                                                                                                                                  \n    public description: string | undefined;\n\nn    public netmaskLength: number | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnIPAMAllocationProps) {\n        super(scope, id, { type: CfnIPAMAllocation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'ipamPoolId', this);\n        this.attrIpamPoolAllocationId = cdk.Token.asString(this.getAtt('IpamPoolAllocationId'));\n\n        this.ipamPoolId = props.ipamPoolId;\n        this.cidr = props.cidr;\n        this.description = props.description;\n        this.netmaskLength = props.netmaskLength;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIPAMAllocation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ipamPoolId: this.ipamPoolId,\n            cidr: this.cidr,\n            description: this.description,\n            netmaskLength: this.netmaskLength,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIPAMAllocationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                \nexport interface CfnIPAMPoolProps {\n\n                                                                                                                                                                                                      \n    readonly addressFamily: string;\n\n                                                                                                                                                                                                                                         \n    readonly ipamScopeId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly allocationDefaultNetmaskLength?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly allocationMaxNetmaskLength?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly allocationMinNetmaskLength?: number;\n\nn    readonly allocationResourceTags?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly autoImport?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                      \n    readonly description?: string;\n\nn    readonly locale?: string;\n\n                                                                                                                                                                                                                                  \n    readonly provisionedCidrs?: Array<CfnIPAMPool.ProvisionedCidrProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly publiclyAdvertisable?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                        \n    readonly sourceIpamPoolId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIPAMPoolProps`\n *\n * @param properties - the TypeScript properties of a `CfnIPAMPoolProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPAMPoolPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addressFamily', cdk.requiredValidator)(properties.addressFamily));\n    errors.collect(cdk.propertyValidator('addressFamily', cdk.validateString)(properties.addressFamily));\n    errors.collect(cdk.propertyValidator('allocationDefaultNetmaskLength', cdk.validateNumber)(properties.allocationDefaultNetmaskLength));\n    errors.collect(cdk.propertyValidator('allocationMaxNetmaskLength', cdk.validateNumber)(properties.allocationMaxNetmaskLength));\n    errors.collect(cdk.propertyValidator('allocationMinNetmaskLength', cdk.validateNumber)(properties.allocationMinNetmaskLength));\n    errors.collect(cdk.propertyValidator('allocationResourceTags', cdk.listValidator(cdk.validateCfnTag))(properties.allocationResourceTags));\n    errors.collect(cdk.propertyValidator('autoImport', cdk.validateBoolean)(properties.autoImport));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('ipamScopeId', cdk.requiredValidator)(properties.ipamScopeId));\n    errors.collect(cdk.propertyValidator('ipamScopeId', cdk.validateString)(properties.ipamScopeId));\n    errors.collect(cdk.propertyValidator('locale', cdk.validateString)(properties.locale));\n    errors.collect(cdk.propertyValidator('provisionedCidrs', cdk.listValidator(CfnIPAMPool_ProvisionedCidrPropertyValidator))(properties.provisionedCidrs));\n    errors.collect(cdk.propertyValidator('publiclyAdvertisable', cdk.validateBoolean)(properties.publiclyAdvertisable));\n    errors.collect(cdk.propertyValidator('sourceIpamPoolId', cdk.validateString)(properties.sourceIpamPoolId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnIPAMPoolProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::IPAMPool` resource\n *\n * @param properties - the TypeScript properties of a `CfnIPAMPoolProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::IPAMPool` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPAMPoolPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPAMPoolPropsValidator(properties).assertSuccess();\n    return {\n        AddressFamily: cdk.stringToCloudFormation(properties.addressFamily),\n        IpamScopeId: cdk.stringToCloudFormation(properties.ipamScopeId),\n        AllocationDefaultNetmaskLength: cdk.numberToCloudFormation(properties.allocationDefaultNetmaskLength),\n        AllocationMaxNetmaskLength: cdk.numberToCloudFormation(properties.allocationMaxNetmaskLength),\n        AllocationMinNetmaskLength: cdk.numberToCloudFormation(properties.allocationMinNetmaskLength),\n        AllocationResourceTags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.allocationResourceTags),\n        AutoImport: cdk.booleanToCloudFormation(properties.autoImport),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Locale: cdk.stringToCloudFormation(properties.locale),\n        ProvisionedCidrs: cdk.listMapper(cfnIPAMPoolProvisionedCidrPropertyToCloudFormation)(properties.provisionedCidrs),\n        PubliclyAdvertisable: cdk.booleanToCloudFormation(properties.publiclyAdvertisable),\n        SourceIpamPoolId: cdk.stringToCloudFormation(properties.sourceIpamPoolId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPAMPoolPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPAMPoolProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPAMPoolProps>();\n    ret.addPropertyResult('addressFamily', 'AddressFamily', cfn_parse.FromCloudFormation.getString(properties.AddressFamily));\n    ret.addPropertyResult('ipamScopeId', 'IpamScopeId', cfn_parse.FromCloudFormation.getString(properties.IpamScopeId));\n    ret.addPropertyResult('allocationDefaultNetmaskLength', 'AllocationDefaultNetmaskLength', properties.AllocationDefaultNetmaskLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.AllocationDefaultNetmaskLength) : undefined);\n    ret.addPropertyResult('allocationMaxNetmaskLength', 'AllocationMaxNetmaskLength', properties.AllocationMaxNetmaskLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.AllocationMaxNetmaskLength) : undefined);\n    ret.addPropertyResult('allocationMinNetmaskLength', 'AllocationMinNetmaskLength', properties.AllocationMinNetmaskLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.AllocationMinNetmaskLength) : undefined);\n    ret.addPropertyResult('allocationResourceTags', 'AllocationResourceTags', properties.AllocationResourceTags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.AllocationResourceTags) : undefined);\n    ret.addPropertyResult('autoImport', 'AutoImport', properties.AutoImport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoImport) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('locale', 'Locale', properties.Locale != null ? cfn_parse.FromCloudFormation.getString(properties.Locale) : undefined);\n    ret.addPropertyResult('provisionedCidrs', 'ProvisionedCidrs', properties.ProvisionedCidrs != null ? cfn_parse.FromCloudFormation.getArray(CfnIPAMPoolProvisionedCidrPropertyFromCloudFormation)(properties.ProvisionedCidrs) : undefined);\n    ret.addPropertyResult('publiclyAdvertisable', 'PubliclyAdvertisable', properties.PubliclyAdvertisable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAdvertisable) : undefined);\n    ret.addPropertyResult('sourceIpamPoolId', 'SourceIpamPoolId', properties.SourceIpamPoolId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceIpamPoolId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnIPAMPool extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::IPAMPool\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIPAMPool {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIPAMPoolPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIPAMPool(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                    \n    public readonly attrArn: string;\n\n                                                                                   \n    public readonly attrIpamArn: string;\n\n                                                                                          \n    public readonly attrIpamPoolId: string;\n\n                                                                                                          \n    public readonly attrIpamScopeArn: string;\n\n                                                                                           \n    public readonly attrIpamScopeType: string;\n\n                                                                                                                                  \n    public readonly attrPoolDepth: number;\n\n                                                                                        \n    public readonly attrState: string;\n\n                                                                                                                             \n    public readonly attrStateMessage: string;\n\n                                                                                                                                                                                                      \n    public addressFamily: string;\n\n                                                                                                                                                                                                                                         \n    public ipamScopeId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    public allocationDefaultNetmaskLength: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public allocationMaxNetmaskLength: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public allocationMinNetmaskLength: number | undefined;\n\nn    public allocationResourceTags: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public autoImport: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                      \n    public description: string | undefined;\n\nn    public locale: string | undefined;\n\n                                                                                                                                                                                                                                  \n    public provisionedCidrs: Array<CfnIPAMPool.ProvisionedCidrProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                      \n    public publiclyAdvertisable: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                        \n    public sourceIpamPoolId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnIPAMPoolProps) {\n        super(scope, id, { type: CfnIPAMPool.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'addressFamily', this);\n        cdk.requireProperty(props, 'ipamScopeId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrIpamArn = cdk.Token.asString(this.getAtt('IpamArn'));\n        this.attrIpamPoolId = cdk.Token.asString(this.getAtt('IpamPoolId'));\n        this.attrIpamScopeArn = cdk.Token.asString(this.getAtt('IpamScopeArn'));\n        this.attrIpamScopeType = cdk.Token.asString(this.getAtt('IpamScopeType'));\n        this.attrPoolDepth = cdk.Token.asNumber(this.getAtt('PoolDepth'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrStateMessage = cdk.Token.asString(this.getAtt('StateMessage'));\n\n        this.addressFamily = props.addressFamily;\n        this.ipamScopeId = props.ipamScopeId;\n        this.allocationDefaultNetmaskLength = props.allocationDefaultNetmaskLength;\n        this.allocationMaxNetmaskLength = props.allocationMaxNetmaskLength;\n        this.allocationMinNetmaskLength = props.allocationMinNetmaskLength;\n        this.allocationResourceTags = props.allocationResourceTags;\n        this.autoImport = props.autoImport;\n        this.description = props.description;\n        this.locale = props.locale;\n        this.provisionedCidrs = props.provisionedCidrs;\n        this.publiclyAdvertisable = props.publiclyAdvertisable;\n        this.sourceIpamPoolId = props.sourceIpamPoolId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::IPAMPool\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIPAMPool.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            addressFamily: this.addressFamily,\n            ipamScopeId: this.ipamScopeId,\n            allocationDefaultNetmaskLength: this.allocationDefaultNetmaskLength,\n            allocationMaxNetmaskLength: this.allocationMaxNetmaskLength,\n            allocationMinNetmaskLength: this.allocationMinNetmaskLength,\n            allocationResourceTags: this.allocationResourceTags,\n            autoImport: this.autoImport,\n            description: this.description,\n            locale: this.locale,\n            provisionedCidrs: this.provisionedCidrs,\n            publiclyAdvertisable: this.publiclyAdvertisable,\n            sourceIpamPoolId: this.sourceIpamPoolId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIPAMPoolPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnIPAMPool {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface ProvisionedCidrProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly cidr: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProvisionedCidrProperty`\n *\n * @param properties - the TypeScript properties of a `ProvisionedCidrProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPAMPool_ProvisionedCidrPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.requiredValidator)(properties.cidr));\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    return errors.wrap('supplied properties not correct for \"ProvisionedCidrProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::IPAMPool.ProvisionedCidr` resource\n *\n * @param properties - the TypeScript properties of a `ProvisionedCidrProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::IPAMPool.ProvisionedCidr` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPAMPoolProvisionedCidrPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPAMPool_ProvisionedCidrPropertyValidator(properties).assertSuccess();\n    return {\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPAMPoolProvisionedCidrPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPAMPool.ProvisionedCidrProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPAMPool.ProvisionedCidrProperty>();\n    ret.addPropertyResult('cidr', 'Cidr', cfn_parse.FromCloudFormation.getString(properties.Cidr));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                  \nexport interface CfnIPAMScopeProps {\n\n                                                                                                                                                                                                                          \n    readonly ipamId: string;\n\n                                                                                                                                                                                                    \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIPAMScopeProps`\n *\n * @param properties - the TypeScript properties of a `CfnIPAMScopeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPAMScopePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('ipamId', cdk.requiredValidator)(properties.ipamId));\n    errors.collect(cdk.propertyValidator('ipamId', cdk.validateString)(properties.ipamId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnIPAMScopeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::IPAMScope` resource\n *\n * @param properties - the TypeScript properties of a `CfnIPAMScopeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::IPAMScope` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPAMScopePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPAMScopePropsValidator(properties).assertSuccess();\n    return {\n        IpamId: cdk.stringToCloudFormation(properties.ipamId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPAMScopePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPAMScopeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPAMScopeProps>();\n    ret.addPropertyResult('ipamId', 'IpamId', cfn_parse.FromCloudFormation.getString(properties.IpamId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnIPAMScope extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::IPAMScope\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIPAMScope {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIPAMScopePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIPAMScope(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                \n    public readonly attrArn: string;\n\n                                                                                  \n    public readonly attrIpamArn: string;\n\n                                                                                           \n    public readonly attrIpamScopeId: string;\n\n                                                                    \n    public readonly attrIpamScopeType: string;\n\n                                                                                                                  \n    public readonly attrIsDefault: cdk.IResolvable;\n\n                                                                                                \n    public readonly attrPoolCount: number;\n\n                                                                                                                                                                                                                          \n    public ipamId: string;\n\n                                                                                                                                                                                                    \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnIPAMScopeProps) {\n        super(scope, id, { type: CfnIPAMScope.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'ipamId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrIpamArn = cdk.Token.asString(this.getAtt('IpamArn'));\n        this.attrIpamScopeId = cdk.Token.asString(this.getAtt('IpamScopeId'));\n        this.attrIpamScopeType = cdk.Token.asString(this.getAtt('IpamScopeType'));\n        this.attrIsDefault = this.getAtt('IsDefault');\n        this.attrPoolCount = cdk.Token.asNumber(this.getAtt('PoolCount'));\n\n        this.ipamId = props.ipamId;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::IPAMScope\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIPAMScope.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ipamId: this.ipamId,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIPAMScopePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                  \nexport interface CfnInstanceProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly additionalInfo?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly affinity?: string;\n\nn    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly blockDeviceMappings?: Array<CfnInstance.BlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly cpuOptions?: CfnInstance.CpuOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly creditSpecification?: CfnInstance.CreditSpecificationProperty | cdk.IResolvable;\n\nn    readonly disableApiTermination?: boolean | cdk.IResolvable;\n\nn    readonly ebsOptimized?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly elasticGpuSpecifications?: Array<CfnInstance.ElasticGpuSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly elasticInferenceAccelerators?: Array<CfnInstance.ElasticInferenceAcceleratorProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                           \n    readonly enclaveOptions?: CfnInstance.EnclaveOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly hibernationOptions?: CfnInstance.HibernationOptionsProperty | cdk.IResolvable;\n\nn    readonly hostId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    readonly hostResourceGroupArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly iamInstanceProfile?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly imageId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly instanceInitiatedShutdownBehavior?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly instanceType?: string;\n\nn    readonly ipv6AddressCount?: number;\n\nn    readonly ipv6Addresses?: Array<CfnInstance.InstanceIpv6AddressProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly kernelId?: string;\n\nn    readonly keyName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly launchTemplate?: CfnInstance.LaunchTemplateSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly licenseSpecifications?: Array<CfnInstance.LicenseSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                        \n    readonly monitoring?: boolean | cdk.IResolvable;\n\nn    readonly networkInterfaces?: Array<CfnInstance.NetworkInterfaceProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                               \n    readonly placementGroupName?: string;\n\nn    readonly privateIpAddress?: string;\n\n                                                                                                                                                                                                                                               \n    readonly propagateTagsToVolumeOnCreation?: boolean | cdk.IResolvable;\n\nn    readonly ramdiskId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly securityGroupIds?: string[];\n\nn    readonly securityGroups?: string[];\n\nn    readonly sourceDestCheck?: boolean | cdk.IResolvable;\n\nn    readonly ssmAssociations?: Array<CfnInstance.SsmAssociationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly subnetId?: string;\n\n                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                               \n    readonly tenancy?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly userData?: string;\n\n                                                                                                                                                                                                         \n    readonly volumes?: Array<CfnInstance.VolumeProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInstanceProps`\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstancePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('additionalInfo', cdk.validateString)(properties.additionalInfo));\n    errors.collect(cdk.propertyValidator('affinity', cdk.validateString)(properties.affinity));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(CfnInstance_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));\n    errors.collect(cdk.propertyValidator('cpuOptions', CfnInstance_CpuOptionsPropertyValidator)(properties.cpuOptions));\n    errors.collect(cdk.propertyValidator('creditSpecification', CfnInstance_CreditSpecificationPropertyValidator)(properties.creditSpecification));\n    errors.collect(cdk.propertyValidator('disableApiTermination', cdk.validateBoolean)(properties.disableApiTermination));\n    errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));\n    errors.collect(cdk.propertyValidator('elasticGpuSpecifications', cdk.listValidator(CfnInstance_ElasticGpuSpecificationPropertyValidator))(properties.elasticGpuSpecifications));\n    errors.collect(cdk.propertyValidator('elasticInferenceAccelerators', cdk.listValidator(CfnInstance_ElasticInferenceAcceleratorPropertyValidator))(properties.elasticInferenceAccelerators));\n    errors.collect(cdk.propertyValidator('enclaveOptions', CfnInstance_EnclaveOptionsPropertyValidator)(properties.enclaveOptions));\n    errors.collect(cdk.propertyValidator('hibernationOptions', CfnInstance_HibernationOptionsPropertyValidator)(properties.hibernationOptions));\n    errors.collect(cdk.propertyValidator('hostId', cdk.validateString)(properties.hostId));\n    errors.collect(cdk.propertyValidator('hostResourceGroupArn', cdk.validateString)(properties.hostResourceGroupArn));\n    errors.collect(cdk.propertyValidator('iamInstanceProfile', cdk.validateString)(properties.iamInstanceProfile));\n    errors.collect(cdk.propertyValidator('imageId', cdk.validateString)(properties.imageId));\n    errors.collect(cdk.propertyValidator('instanceInitiatedShutdownBehavior', cdk.validateString)(properties.instanceInitiatedShutdownBehavior));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));\n    errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(CfnInstance_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));\n    errors.collect(cdk.propertyValidator('kernelId', cdk.validateString)(properties.kernelId));\n    errors.collect(cdk.propertyValidator('keyName', cdk.validateString)(properties.keyName));\n    errors.collect(cdk.propertyValidator('launchTemplate', CfnInstance_LaunchTemplateSpecificationPropertyValidator)(properties.launchTemplate));\n    errors.collect(cdk.propertyValidator('licenseSpecifications', cdk.listValidator(CfnInstance_LicenseSpecificationPropertyValidator))(properties.licenseSpecifications));\n    errors.collect(cdk.propertyValidator('monitoring', cdk.validateBoolean)(properties.monitoring));\n    errors.collect(cdk.propertyValidator('networkInterfaces', cdk.listValidator(CfnInstance_NetworkInterfacePropertyValidator))(properties.networkInterfaces));\n    errors.collect(cdk.propertyValidator('placementGroupName', cdk.validateString)(properties.placementGroupName));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('propagateTagsToVolumeOnCreation', cdk.validateBoolean)(properties.propagateTagsToVolumeOnCreation));\n    errors.collect(cdk.propertyValidator('ramdiskId', cdk.validateString)(properties.ramdiskId));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('sourceDestCheck', cdk.validateBoolean)(properties.sourceDestCheck));\n    errors.collect(cdk.propertyValidator('ssmAssociations', cdk.listValidator(CfnInstance_SsmAssociationPropertyValidator))(properties.ssmAssociations));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));\n    errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));\n    errors.collect(cdk.propertyValidator('volumes', cdk.listValidator(CfnInstance_VolumePropertyValidator))(properties.volumes));\n    return errors.wrap('supplied properties not correct for \"CfnInstanceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance` resource\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstancePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstancePropsValidator(properties).assertSuccess();\n    return {\n        AdditionalInfo: cdk.stringToCloudFormation(properties.additionalInfo),\n        Affinity: cdk.stringToCloudFormation(properties.affinity),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        BlockDeviceMappings: cdk.listMapper(cfnInstanceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),\n        CpuOptions: cfnInstanceCpuOptionsPropertyToCloudFormation(properties.cpuOptions),\n        CreditSpecification: cfnInstanceCreditSpecificationPropertyToCloudFormation(properties.creditSpecification),\n        DisableApiTermination: cdk.booleanToCloudFormation(properties.disableApiTermination),\n        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),\n        ElasticGpuSpecifications: cdk.listMapper(cfnInstanceElasticGpuSpecificationPropertyToCloudFormation)(properties.elasticGpuSpecifications),\n        ElasticInferenceAccelerators: cdk.listMapper(cfnInstanceElasticInferenceAcceleratorPropertyToCloudFormation)(properties.elasticInferenceAccelerators),\n        EnclaveOptions: cfnInstanceEnclaveOptionsPropertyToCloudFormation(properties.enclaveOptions),\n        HibernationOptions: cfnInstanceHibernationOptionsPropertyToCloudFormation(properties.hibernationOptions),\n        HostId: cdk.stringToCloudFormation(properties.hostId),\n        HostResourceGroupArn: cdk.stringToCloudFormation(properties.hostResourceGroupArn),\n        IamInstanceProfile: cdk.stringToCloudFormation(properties.iamInstanceProfile),\n        ImageId: cdk.stringToCloudFormation(properties.imageId),\n        InstanceInitiatedShutdownBehavior: cdk.stringToCloudFormation(properties.instanceInitiatedShutdownBehavior),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),\n        Ipv6Addresses: cdk.listMapper(cfnInstanceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),\n        KernelId: cdk.stringToCloudFormation(properties.kernelId),\n        KeyName: cdk.stringToCloudFormation(properties.keyName),\n        LaunchTemplate: cfnInstanceLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplate),\n        LicenseSpecifications: cdk.listMapper(cfnInstanceLicenseSpecificationPropertyToCloudFormation)(properties.licenseSpecifications),\n        Monitoring: cdk.booleanToCloudFormation(properties.monitoring),\n        NetworkInterfaces: cdk.listMapper(cfnInstanceNetworkInterfacePropertyToCloudFormation)(properties.networkInterfaces),\n        PlacementGroupName: cdk.stringToCloudFormation(properties.placementGroupName),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n        PropagateTagsToVolumeOnCreation: cdk.booleanToCloudFormation(properties.propagateTagsToVolumeOnCreation),\n        RamdiskId: cdk.stringToCloudFormation(properties.ramdiskId),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        SourceDestCheck: cdk.booleanToCloudFormation(properties.sourceDestCheck),\n        SsmAssociations: cdk.listMapper(cfnInstanceSsmAssociationPropertyToCloudFormation)(properties.ssmAssociations),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Tenancy: cdk.stringToCloudFormation(properties.tenancy),\n        UserData: cdk.stringToCloudFormation(properties.userData),\n        Volumes: cdk.listMapper(cfnInstanceVolumePropertyToCloudFormation)(properties.volumes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstancePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstanceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstanceProps>();\n    ret.addPropertyResult('additionalInfo', 'AdditionalInfo', properties.AdditionalInfo != null ? cfn_parse.FromCloudFormation.getString(properties.AdditionalInfo) : undefined);\n    ret.addPropertyResult('affinity', 'Affinity', properties.Affinity != null ? cfn_parse.FromCloudFormation.getString(properties.Affinity) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('blockDeviceMappings', 'BlockDeviceMappings', properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : undefined);\n    ret.addPropertyResult('cpuOptions', 'CpuOptions', properties.CpuOptions != null ? CfnInstanceCpuOptionsPropertyFromCloudFormation(properties.CpuOptions) : undefined);\n    ret.addPropertyResult('creditSpecification', 'CreditSpecification', properties.CreditSpecification != null ? CfnInstanceCreditSpecificationPropertyFromCloudFormation(properties.CreditSpecification) : undefined);\n    ret.addPropertyResult('disableApiTermination', 'DisableApiTermination', properties.DisableApiTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableApiTermination) : undefined);\n    ret.addPropertyResult('ebsOptimized', 'EbsOptimized', properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : undefined);\n    ret.addPropertyResult('elasticGpuSpecifications', 'ElasticGpuSpecifications', properties.ElasticGpuSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceElasticGpuSpecificationPropertyFromCloudFormation)(properties.ElasticGpuSpecifications) : undefined);\n    ret.addPropertyResult('elasticInferenceAccelerators', 'ElasticInferenceAccelerators', properties.ElasticInferenceAccelerators != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceElasticInferenceAcceleratorPropertyFromCloudFormation)(properties.ElasticInferenceAccelerators) : undefined);\n    ret.addPropertyResult('enclaveOptions', 'EnclaveOptions', properties.EnclaveOptions != null ? CfnInstanceEnclaveOptionsPropertyFromCloudFormation(properties.EnclaveOptions) : undefined);\n    ret.addPropertyResult('hibernationOptions', 'HibernationOptions', properties.HibernationOptions != null ? CfnInstanceHibernationOptionsPropertyFromCloudFormation(properties.HibernationOptions) : undefined);\n    ret.addPropertyResult('hostId', 'HostId', properties.HostId != null ? cfn_parse.FromCloudFormation.getString(properties.HostId) : undefined);\n    ret.addPropertyResult('hostResourceGroupArn', 'HostResourceGroupArn', properties.HostResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HostResourceGroupArn) : undefined);\n    ret.addPropertyResult('iamInstanceProfile', 'IamInstanceProfile', properties.IamInstanceProfile != null ? cfn_parse.FromCloudFormation.getString(properties.IamInstanceProfile) : undefined);\n    ret.addPropertyResult('imageId', 'ImageId', properties.ImageId != null ? cfn_parse.FromCloudFormation.getString(properties.ImageId) : undefined);\n    ret.addPropertyResult('instanceInitiatedShutdownBehavior', 'InstanceInitiatedShutdownBehavior', properties.InstanceInitiatedShutdownBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInitiatedShutdownBehavior) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('ipv6AddressCount', 'Ipv6AddressCount', properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : undefined);\n    ret.addPropertyResult('ipv6Addresses', 'Ipv6Addresses', properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : undefined);\n    ret.addPropertyResult('kernelId', 'KernelId', properties.KernelId != null ? cfn_parse.FromCloudFormation.getString(properties.KernelId) : undefined);\n    ret.addPropertyResult('keyName', 'KeyName', properties.KeyName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyName) : undefined);\n    ret.addPropertyResult('launchTemplate', 'LaunchTemplate', properties.LaunchTemplate != null ? CfnInstanceLaunchTemplateSpecificationPropertyFromCloudFormation(properties.LaunchTemplate) : undefined);\n    ret.addPropertyResult('licenseSpecifications', 'LicenseSpecifications', properties.LicenseSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceLicenseSpecificationPropertyFromCloudFormation)(properties.LicenseSpecifications) : undefined);\n    ret.addPropertyResult('monitoring', 'Monitoring', properties.Monitoring != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Monitoring) : undefined);\n    ret.addPropertyResult('networkInterfaces', 'NetworkInterfaces', properties.NetworkInterfaces != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceNetworkInterfacePropertyFromCloudFormation)(properties.NetworkInterfaces) : undefined);\n    ret.addPropertyResult('placementGroupName', 'PlacementGroupName', properties.PlacementGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.PlacementGroupName) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : undefined);\n    ret.addPropertyResult('propagateTagsToVolumeOnCreation', 'PropagateTagsToVolumeOnCreation', properties.PropagateTagsToVolumeOnCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PropagateTagsToVolumeOnCreation) : undefined);\n    ret.addPropertyResult('ramdiskId', 'RamdiskId', properties.RamdiskId != null ? cfn_parse.FromCloudFormation.getString(properties.RamdiskId) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('sourceDestCheck', 'SourceDestCheck', properties.SourceDestCheck != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SourceDestCheck) : undefined);\n    ret.addPropertyResult('ssmAssociations', 'SsmAssociations', properties.SsmAssociations != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceSsmAssociationPropertyFromCloudFormation)(properties.SsmAssociations) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('tenancy', 'Tenancy', properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : undefined);\n    ret.addPropertyResult('userData', 'UserData', properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : undefined);\n    ret.addPropertyResult('volumes', 'Volumes', properties.Volumes != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceVolumePropertyFromCloudFormation)(properties.Volumes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnInstance extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::Instance\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInstance {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInstancePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInstance(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public readonly attrAvailabilityZone: string;\n\n                                                                                                                                                                 \n    public readonly attrPrivateDnsName: string;\n\n                                                                                                                                              \n    public readonly attrPrivateIp: string;\n\n                                                                                                                                                                             \n    public readonly attrPublicDnsName: string;\n\n                                                                                                                                           \n    public readonly attrPublicIp: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public additionalInfo: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public affinity: string | undefined;\n\nn    public availabilityZone: string | undefined;\n\nn    public blockDeviceMappings: Array<CfnInstance.BlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    public cpuOptions: CfnInstance.CpuOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public creditSpecification: CfnInstance.CreditSpecificationProperty | cdk.IResolvable | undefined;\n\nn    public disableApiTermination: boolean | cdk.IResolvable | undefined;\n\nn    public ebsOptimized: boolean | cdk.IResolvable | undefined;\n\nn    public elasticGpuSpecifications: Array<CfnInstance.ElasticGpuSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public elasticInferenceAccelerators: Array<CfnInstance.ElasticInferenceAcceleratorProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                           \n    public enclaveOptions: CfnInstance.EnclaveOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public hibernationOptions: CfnInstance.HibernationOptionsProperty | cdk.IResolvable | undefined;\n\nn    public hostId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    public hostResourceGroupArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n    public iamInstanceProfile: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public imageId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    public instanceInitiatedShutdownBehavior: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public instanceType: string | undefined;\n\nn    public ipv6AddressCount: number | undefined;\n\nn    public ipv6Addresses: Array<CfnInstance.InstanceIpv6AddressProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public kernelId: string | undefined;\n\nn    public keyName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public launchTemplate: CfnInstance.LaunchTemplateSpecificationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                            \n    public licenseSpecifications: Array<CfnInstance.LicenseSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                        \n    public monitoring: boolean | cdk.IResolvable | undefined;\n\nn    public networkInterfaces: Array<CfnInstance.NetworkInterfaceProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                               \n    public placementGroupName: string | undefined;\n\nn    public privateIpAddress: string | undefined;\n\n                                                                                                                                                                                                                                               \n    public propagateTagsToVolumeOnCreation: boolean | cdk.IResolvable | undefined;\n\nn    public ramdiskId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public securityGroupIds: string[] | undefined;\n\nn    public securityGroups: string[] | undefined;\n\nn    public sourceDestCheck: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public ssmAssociations: Array<CfnInstance.SsmAssociationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public subnetId: string | undefined;\n\n                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                               \n    public tenancy: string | undefined;\n\nn    public userData: string | undefined;\n\n                                                                                                                                                                                                         \n    public volumes: Array<CfnInstance.VolumeProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnInstanceProps = {}) {\n        super(scope, id, { type: CfnInstance.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrAvailabilityZone = cdk.Token.asString(this.getAtt('AvailabilityZone'));\n        this.attrPrivateDnsName = cdk.Token.asString(this.getAtt('PrivateDnsName'));\n        this.attrPrivateIp = cdk.Token.asString(this.getAtt('PrivateIp'));\n        this.attrPublicDnsName = cdk.Token.asString(this.getAtt('PublicDnsName'));\n        this.attrPublicIp = cdk.Token.asString(this.getAtt('PublicIp'));\n\n        this.additionalInfo = props.additionalInfo;\n        this.affinity = props.affinity;\n        this.availabilityZone = props.availabilityZone;\n        this.blockDeviceMappings = props.blockDeviceMappings;\n        this.cpuOptions = props.cpuOptions;\n        this.creditSpecification = props.creditSpecification;\n        this.disableApiTermination = props.disableApiTermination;\n        this.ebsOptimized = props.ebsOptimized;\n        this.elasticGpuSpecifications = props.elasticGpuSpecifications;\n        this.elasticInferenceAccelerators = props.elasticInferenceAccelerators;\n        this.enclaveOptions = props.enclaveOptions;\n        this.hibernationOptions = props.hibernationOptions;\n        this.hostId = props.hostId;\n        this.hostResourceGroupArn = props.hostResourceGroupArn;\n        this.iamInstanceProfile = props.iamInstanceProfile;\n        this.imageId = props.imageId;\n        this.instanceInitiatedShutdownBehavior = props.instanceInitiatedShutdownBehavior;\n        this.instanceType = props.instanceType;\n        this.ipv6AddressCount = props.ipv6AddressCount;\n        this.ipv6Addresses = props.ipv6Addresses;\n        this.kernelId = props.kernelId;\n        this.keyName = props.keyName;\n        this.launchTemplate = props.launchTemplate;\n        this.licenseSpecifications = props.licenseSpecifications;\n        this.monitoring = props.monitoring;\n        this.networkInterfaces = props.networkInterfaces;\n        this.placementGroupName = props.placementGroupName;\n        this.privateIpAddress = props.privateIpAddress;\n        this.propagateTagsToVolumeOnCreation = props.propagateTagsToVolumeOnCreation;\n        this.ramdiskId = props.ramdiskId;\n        this.securityGroupIds = props.securityGroupIds;\n        this.securityGroups = props.securityGroups;\n        this.sourceDestCheck = props.sourceDestCheck;\n        this.ssmAssociations = props.ssmAssociations;\n        this.subnetId = props.subnetId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::Instance\", props.tags, { tagPropertyName: 'tags' });\n        this.tenancy = props.tenancy;\n        this.userData = props.userData;\n        this.volumes = props.volumes;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInstance.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            additionalInfo: this.additionalInfo,\n            affinity: this.affinity,\n            availabilityZone: this.availabilityZone,\n            blockDeviceMappings: this.blockDeviceMappings,\n            cpuOptions: this.cpuOptions,\n            creditSpecification: this.creditSpecification,\n            disableApiTermination: this.disableApiTermination,\n            ebsOptimized: this.ebsOptimized,\n            elasticGpuSpecifications: this.elasticGpuSpecifications,\n            elasticInferenceAccelerators: this.elasticInferenceAccelerators,\n            enclaveOptions: this.enclaveOptions,\n            hibernationOptions: this.hibernationOptions,\n            hostId: this.hostId,\n            hostResourceGroupArn: this.hostResourceGroupArn,\n            iamInstanceProfile: this.iamInstanceProfile,\n            imageId: this.imageId,\n            instanceInitiatedShutdownBehavior: this.instanceInitiatedShutdownBehavior,\n            instanceType: this.instanceType,\n            ipv6AddressCount: this.ipv6AddressCount,\n            ipv6Addresses: this.ipv6Addresses,\n            kernelId: this.kernelId,\n            keyName: this.keyName,\n            launchTemplate: this.launchTemplate,\n            licenseSpecifications: this.licenseSpecifications,\n            monitoring: this.monitoring,\n            networkInterfaces: this.networkInterfaces,\n            placementGroupName: this.placementGroupName,\n            privateIpAddress: this.privateIpAddress,\n            propagateTagsToVolumeOnCreation: this.propagateTagsToVolumeOnCreation,\n            ramdiskId: this.ramdiskId,\n            securityGroupIds: this.securityGroupIds,\n            securityGroups: this.securityGroups,\n            sourceDestCheck: this.sourceDestCheck,\n            ssmAssociations: this.ssmAssociations,\n            subnetId: this.subnetId,\n            tags: this.tags.renderTags(),\n            tenancy: this.tenancy,\n            userData: this.userData,\n            volumes: this.volumes,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInstancePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInstance {\nn    export interface AssociationParameterProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly key: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly value: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AssociationParameterProperty`\n *\n * @param properties - the TypeScript properties of a `AssociationParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_AssociationParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.listValidator(cdk.validateString))(properties.value));\n    return errors.wrap('supplied properties not correct for \"AssociationParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.AssociationParameter` resource\n *\n * @param properties - the TypeScript properties of a `AssociationParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.AssociationParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceAssociationParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_AssociationParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.listMapper(cdk.stringToCloudFormation)(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceAssociationParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.AssociationParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.AssociationParameterProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getStringArray(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\nn    export interface BlockDeviceMappingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly deviceName: string;\nn        readonly ebs?: CfnInstance.EbsProperty | cdk.IResolvable;\nn        readonly noDevice?: CfnInstance.NoDeviceProperty | cdk.IResolvable;\nn        readonly virtualName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlockDeviceMappingProperty`\n *\n * @param properties - the TypeScript properties of a `BlockDeviceMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_BlockDeviceMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceName', cdk.requiredValidator)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('ebs', CfnInstance_EbsPropertyValidator)(properties.ebs));\n    errors.collect(cdk.propertyValidator('noDevice', CfnInstance_NoDevicePropertyValidator)(properties.noDevice));\n    errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));\n    return errors.wrap('supplied properties not correct for \"BlockDeviceMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.BlockDeviceMapping` resource\n *\n * @param properties - the TypeScript properties of a `BlockDeviceMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.BlockDeviceMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceBlockDeviceMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_BlockDeviceMappingPropertyValidator(properties).assertSuccess();\n    return {\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        Ebs: cfnInstanceEbsPropertyToCloudFormation(properties.ebs),\n        NoDevice: cfnInstanceNoDevicePropertyToCloudFormation(properties.noDevice),\n        VirtualName: cdk.stringToCloudFormation(properties.virtualName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceBlockDeviceMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.BlockDeviceMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.BlockDeviceMappingProperty>();\n    ret.addPropertyResult('deviceName', 'DeviceName', cfn_parse.FromCloudFormation.getString(properties.DeviceName));\n    ret.addPropertyResult('ebs', 'Ebs', properties.Ebs != null ? CfnInstanceEbsPropertyFromCloudFormation(properties.Ebs) : undefined);\n    ret.addPropertyResult('noDevice', 'NoDevice', properties.NoDevice != null ? CfnInstanceNoDevicePropertyFromCloudFormation(properties.NoDevice) : undefined);\n    ret.addPropertyResult('virtualName', 'VirtualName', properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\nn    export interface CpuOptionsProperty {\n                                                                                                                                                                                                                                                        \n        readonly coreCount?: number;\n                                                                                                                                                                                                                                                       \n        readonly threadsPerCore?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CpuOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `CpuOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_CpuOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('coreCount', cdk.validateNumber)(properties.coreCount));\n    errors.collect(cdk.propertyValidator('threadsPerCore', cdk.validateNumber)(properties.threadsPerCore));\n    return errors.wrap('supplied properties not correct for \"CpuOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.CpuOptions` resource\n *\n * @param properties - the TypeScript properties of a `CpuOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.CpuOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceCpuOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_CpuOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        CoreCount: cdk.numberToCloudFormation(properties.coreCount),\n        ThreadsPerCore: cdk.numberToCloudFormation(properties.threadsPerCore),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceCpuOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.CpuOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.CpuOptionsProperty>();\n    ret.addPropertyResult('coreCount', 'CoreCount', properties.CoreCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CoreCount) : undefined);\n    ret.addPropertyResult('threadsPerCore', 'ThreadsPerCore', properties.ThreadsPerCore != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThreadsPerCore) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface CreditSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly cpuCredits?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CreditSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `CreditSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_CreditSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpuCredits', cdk.validateString)(properties.cpuCredits));\n    return errors.wrap('supplied properties not correct for \"CreditSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.CreditSpecification` resource\n *\n * @param properties - the TypeScript properties of a `CreditSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.CreditSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceCreditSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_CreditSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        CPUCredits: cdk.stringToCloudFormation(properties.cpuCredits),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceCreditSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.CreditSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.CreditSpecificationProperty>();\n    ret.addPropertyResult('cpuCredits', 'CPUCredits', properties.CPUCredits != null ? cfn_parse.FromCloudFormation.getString(properties.CPUCredits) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\nn    export interface EbsProperty {\nn        readonly deleteOnTermination?: boolean | cdk.IResolvable;\nn        readonly encrypted?: boolean | cdk.IResolvable;\nn        readonly iops?: number;\nn        readonly kmsKeyId?: string;\nn        readonly snapshotId?: string;\nn        readonly volumeSize?: number;\nn        readonly volumeType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EbsProperty`\n *\n * @param properties - the TypeScript properties of a `EbsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_EbsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));\n    errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"EbsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.Ebs` resource\n *\n * @param properties - the TypeScript properties of a `EbsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.Ebs` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceEbsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_EbsPropertyValidator(properties).assertSuccess();\n    return {\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),\n        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceEbsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.EbsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.EbsProperty>();\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('snapshotId', 'SnapshotId', properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : undefined);\n    ret.addPropertyResult('volumeSize', 'VolumeSize', properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface ElasticGpuSpecificationProperty {\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ElasticGpuSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `ElasticGpuSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_ElasticGpuSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ElasticGpuSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.ElasticGpuSpecification` resource\n *\n * @param properties - the TypeScript properties of a `ElasticGpuSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.ElasticGpuSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceElasticGpuSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_ElasticGpuSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceElasticGpuSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.ElasticGpuSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.ElasticGpuSpecificationProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface ElasticInferenceAcceleratorProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly count?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ElasticInferenceAcceleratorProperty`\n *\n * @param properties - the TypeScript properties of a `ElasticInferenceAcceleratorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_ElasticInferenceAcceleratorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('count', cdk.validateNumber)(properties.count));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ElasticInferenceAcceleratorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.ElasticInferenceAccelerator` resource\n *\n * @param properties - the TypeScript properties of a `ElasticInferenceAcceleratorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.ElasticInferenceAccelerator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceElasticInferenceAcceleratorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_ElasticInferenceAcceleratorPropertyValidator(properties).assertSuccess();\n    return {\n        Count: cdk.numberToCloudFormation(properties.count),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceElasticInferenceAcceleratorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.ElasticInferenceAcceleratorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.ElasticInferenceAcceleratorProperty>();\n    ret.addPropertyResult('count', 'Count', properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                           \n    export interface EnclaveOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnclaveOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `EnclaveOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_EnclaveOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"EnclaveOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.EnclaveOptions` resource\n *\n * @param properties - the TypeScript properties of a `EnclaveOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.EnclaveOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceEnclaveOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_EnclaveOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceEnclaveOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.EnclaveOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.EnclaveOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface HibernationOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly configured?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HibernationOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `HibernationOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_HibernationOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configured', cdk.validateBoolean)(properties.configured));\n    return errors.wrap('supplied properties not correct for \"HibernationOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.HibernationOptions` resource\n *\n * @param properties - the TypeScript properties of a `HibernationOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.HibernationOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceHibernationOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_HibernationOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Configured: cdk.booleanToCloudFormation(properties.configured),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceHibernationOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.HibernationOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.HibernationOptionsProperty>();\n    ret.addPropertyResult('configured', 'Configured', properties.Configured != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Configured) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface InstanceIpv6AddressProperty {\n                                                                                                                                                                                                                                                    \n        readonly ipv6Address: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceIpv6AddressProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceIpv6AddressProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_InstanceIpv6AddressPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.requiredValidator)(properties.ipv6Address));\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));\n    return errors.wrap('supplied properties not correct for \"InstanceIpv6AddressProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.InstanceIpv6Address` resource\n *\n * @param properties - the TypeScript properties of a `InstanceIpv6AddressProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.InstanceIpv6Address` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceInstanceIpv6AddressPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();\n    return {\n        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceInstanceIpv6AddressPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.InstanceIpv6AddressProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.InstanceIpv6AddressProperty>();\n    ret.addPropertyResult('ipv6Address', 'Ipv6Address', cfn_parse.FromCloudFormation.getString(properties.Ipv6Address));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\nn    export interface LaunchTemplateSpecificationProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly launchTemplateId?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly launchTemplateName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly version: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_LaunchTemplateSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));\n    errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.LaunchTemplateSpecification` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.LaunchTemplateSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceLaunchTemplateSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_LaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),\n        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceLaunchTemplateSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.LaunchTemplateSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.LaunchTemplateSpecificationProperty>();\n    ret.addPropertyResult('launchTemplateId', 'LaunchTemplateId', properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : undefined);\n    ret.addPropertyResult('launchTemplateName', 'LaunchTemplateName', properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : undefined);\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface LicenseSpecificationProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly licenseConfigurationArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LicenseSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `LicenseSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_LicenseSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('licenseConfigurationArn', cdk.requiredValidator)(properties.licenseConfigurationArn));\n    errors.collect(cdk.propertyValidator('licenseConfigurationArn', cdk.validateString)(properties.licenseConfigurationArn));\n    return errors.wrap('supplied properties not correct for \"LicenseSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.LicenseSpecification` resource\n *\n * @param properties - the TypeScript properties of a `LicenseSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.LicenseSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceLicenseSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_LicenseSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        LicenseConfigurationArn: cdk.stringToCloudFormation(properties.licenseConfigurationArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceLicenseSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.LicenseSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.LicenseSpecificationProperty>();\n    ret.addPropertyResult('licenseConfigurationArn', 'LicenseConfigurationArn', cfn_parse.FromCloudFormation.getString(properties.LicenseConfigurationArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\nn    export interface NetworkInterfaceProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly associatePublicIpAddress?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly deleteOnTermination?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly deviceIndex: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly groupSet?: string[];\nn        readonly ipv6AddressCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly ipv6Addresses?: Array<CfnInstance.InstanceIpv6AddressProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly networkInterfaceId?: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly privateIpAddress?: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly privateIpAddresses?: Array<CfnInstance.PrivateIpAddressSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly secondaryPrivateIpAddressCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly subnetId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkInterfaceProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_NetworkInterfacePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('associatePublicIpAddress', cdk.validateBoolean)(properties.associatePublicIpAddress));\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('deviceIndex', cdk.requiredValidator)(properties.deviceIndex));\n    errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateString)(properties.deviceIndex));\n    errors.collect(cdk.propertyValidator('groupSet', cdk.listValidator(cdk.validateString))(properties.groupSet));\n    errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));\n    errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(CfnInstance_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(CfnInstance_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));\n    errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"NetworkInterfaceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.NetworkInterface` resource\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.NetworkInterface` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceNetworkInterfacePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_NetworkInterfacePropertyValidator(properties).assertSuccess();\n    return {\n        AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DeviceIndex: cdk.stringToCloudFormation(properties.deviceIndex),\n        GroupSet: cdk.listMapper(cdk.stringToCloudFormation)(properties.groupSet),\n        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),\n        Ipv6Addresses: cdk.listMapper(cfnInstanceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n        PrivateIpAddresses: cdk.listMapper(cfnInstancePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),\n        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceNetworkInterfacePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.NetworkInterfaceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.NetworkInterfaceProperty>();\n    ret.addPropertyResult('associatePublicIpAddress', 'AssociatePublicIpAddress', properties.AssociatePublicIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociatePublicIpAddress) : undefined);\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('deviceIndex', 'DeviceIndex', cfn_parse.FromCloudFormation.getString(properties.DeviceIndex));\n    ret.addPropertyResult('groupSet', 'GroupSet', properties.GroupSet != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GroupSet) : undefined);\n    ret.addPropertyResult('ipv6AddressCount', 'Ipv6AddressCount', properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : undefined);\n    ret.addPropertyResult('ipv6Addresses', 'Ipv6Addresses', properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : undefined);\n    ret.addPropertyResult('privateIpAddresses', 'PrivateIpAddresses', properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnInstancePrivateIpAddressSpecificationPropertyFromCloudFormation)(properties.PrivateIpAddresses) : undefined);\n    ret.addPropertyResult('secondaryPrivateIpAddressCount', 'SecondaryPrivateIpAddressCount', properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\nn    export interface NoDeviceProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NoDeviceProperty`\n *\n * @param properties - the TypeScript properties of a `NoDeviceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_NoDevicePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"NoDeviceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.NoDevice` resource\n *\n * @param properties - the TypeScript properties of a `NoDeviceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.NoDevice` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceNoDevicePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_NoDevicePropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceNoDevicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.NoDeviceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.NoDeviceProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface PrivateIpAddressSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly primary: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly privateIpAddress: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrivateIpAddressSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddressSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_PrivateIpAddressSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('primary', cdk.requiredValidator)(properties.primary));\n    errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.requiredValidator)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    return errors.wrap('supplied properties not correct for \"PrivateIpAddressSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.PrivateIpAddressSpecification` resource\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddressSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.PrivateIpAddressSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstancePrivateIpAddressSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Primary: cdk.booleanToCloudFormation(properties.primary),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstancePrivateIpAddressSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.PrivateIpAddressSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.PrivateIpAddressSpecificationProperty>();\n    ret.addPropertyResult('primary', 'Primary', cfn_parse.FromCloudFormation.getBoolean(properties.Primary));\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface SsmAssociationProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly associationParameters?: Array<CfnInstance.AssociationParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly documentName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SsmAssociationProperty`\n *\n * @param properties - the TypeScript properties of a `SsmAssociationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_SsmAssociationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('associationParameters', cdk.listValidator(CfnInstance_AssociationParameterPropertyValidator))(properties.associationParameters));\n    errors.collect(cdk.propertyValidator('documentName', cdk.requiredValidator)(properties.documentName));\n    errors.collect(cdk.propertyValidator('documentName', cdk.validateString)(properties.documentName));\n    return errors.wrap('supplied properties not correct for \"SsmAssociationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.SsmAssociation` resource\n *\n * @param properties - the TypeScript properties of a `SsmAssociationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.SsmAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceSsmAssociationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_SsmAssociationPropertyValidator(properties).assertSuccess();\n    return {\n        AssociationParameters: cdk.listMapper(cfnInstanceAssociationParameterPropertyToCloudFormation)(properties.associationParameters),\n        DocumentName: cdk.stringToCloudFormation(properties.documentName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceSsmAssociationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.SsmAssociationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.SsmAssociationProperty>();\n    ret.addPropertyResult('associationParameters', 'AssociationParameters', properties.AssociationParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceAssociationParameterPropertyFromCloudFormation)(properties.AssociationParameters) : undefined);\n    ret.addPropertyResult('documentName', 'DocumentName', cfn_parse.FromCloudFormation.getString(properties.DocumentName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface VolumeProperty {\n                                                                                                                                                                                                                                                \n        readonly device: string;\n                                                                                                                                                                                                                                                                                         \n        readonly volumeId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VolumeProperty`\n *\n * @param properties - the TypeScript properties of a `VolumeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_VolumePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('device', cdk.requiredValidator)(properties.device));\n    errors.collect(cdk.propertyValidator('device', cdk.validateString)(properties.device));\n    errors.collect(cdk.propertyValidator('volumeId', cdk.requiredValidator)(properties.volumeId));\n    errors.collect(cdk.propertyValidator('volumeId', cdk.validateString)(properties.volumeId));\n    return errors.wrap('supplied properties not correct for \"VolumeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Instance.Volume` resource\n *\n * @param properties - the TypeScript properties of a `VolumeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Instance.Volume` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceVolumePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_VolumePropertyValidator(properties).assertSuccess();\n    return {\n        Device: cdk.stringToCloudFormation(properties.device),\n        VolumeId: cdk.stringToCloudFormation(properties.volumeId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceVolumePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.VolumeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.VolumeProperty>();\n    ret.addPropertyResult('device', 'Device', cfn_parse.FromCloudFormation.getString(properties.Device));\n    ret.addPropertyResult('volumeId', 'VolumeId', cfn_parse.FromCloudFormation.getString(properties.VolumeId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnInternetGatewayProps {\n\n                                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInternetGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnInternetGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInternetGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnInternetGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::InternetGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnInternetGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::InternetGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInternetGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInternetGatewayPropsValidator(properties).assertSuccess();\n    return {\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInternetGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInternetGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInternetGatewayProps>();\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnInternetGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::InternetGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInternetGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInternetGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInternetGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                        \n    public readonly attrInternetGatewayId: string;\n\n                                                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnInternetGatewayProps = {}) {\n        super(scope, id, { type: CfnInternetGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrInternetGatewayId = cdk.Token.asString(this.getAtt('InternetGatewayId'));\n\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::InternetGateway\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInternetGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInternetGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                            \nexport interface CfnLaunchTemplateProps {\n\n                                                                                                                                                                                                                                \n    readonly launchTemplateData?: CfnLaunchTemplate.LaunchTemplateDataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                       \n    readonly launchTemplateName?: string;\n\n                                                                                                                                                                                                                                                \n    readonly tagSpecifications?: Array<CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLaunchTemplateProps`\n *\n * @param properties - the TypeScript properties of a `CfnLaunchTemplateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateData', CfnLaunchTemplate_LaunchTemplateDataPropertyValidator)(properties.launchTemplateData));\n    errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnLaunchTemplate_LaunchTemplateTagSpecificationPropertyValidator))(properties.tagSpecifications));\n    return errors.wrap('supplied properties not correct for \"CfnLaunchTemplateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate` resource\n *\n * @param properties - the TypeScript properties of a `CfnLaunchTemplateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplatePropsValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateData: cfnLaunchTemplateLaunchTemplateDataPropertyToCloudFormation(properties.launchTemplateData),\n        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),\n        TagSpecifications: cdk.listMapper(cfnLaunchTemplateLaunchTemplateTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplateProps>();\n    ret.addPropertyResult('launchTemplateData', 'LaunchTemplateData', properties.LaunchTemplateData != null ? CfnLaunchTemplateLaunchTemplateDataPropertyFromCloudFormation(properties.LaunchTemplateData) : undefined);\n    ret.addPropertyResult('launchTemplateName', 'LaunchTemplateName', properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateLaunchTemplateTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnLaunchTemplate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::LaunchTemplate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLaunchTemplate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLaunchTemplatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLaunchTemplate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                        \n    public readonly attrDefaultVersionNumber: string;\n\n                                                                                                                                   \n    public readonly attrLatestVersionNumber: string;\n\n                                                                                                                                                                                                                                \n    public launchTemplateData: CfnLaunchTemplate.LaunchTemplateDataProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    public launchTemplateName: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public tagSpecifications: Array<CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnLaunchTemplateProps = {}) {\n        super(scope, id, { type: CfnLaunchTemplate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrDefaultVersionNumber = cdk.Token.asString(this.getAtt('DefaultVersionNumber'));\n        this.attrLatestVersionNumber = cdk.Token.asString(this.getAtt('LatestVersionNumber'));\n\n        this.launchTemplateData = props.launchTemplateData;\n        this.launchTemplateName = props.launchTemplateName;\n        this.tagSpecifications = props.tagSpecifications;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLaunchTemplate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            launchTemplateData: this.launchTemplateData,\n            launchTemplateName: this.launchTemplateName,\n            tagSpecifications: this.tagSpecifications,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLaunchTemplatePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                       \n    export interface AcceleratorCountProperty {\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                      \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AcceleratorCountProperty`\n *\n * @param properties - the TypeScript properties of a `AcceleratorCountProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_AcceleratorCountPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"AcceleratorCountProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.AcceleratorCount` resource\n *\n * @param properties - the TypeScript properties of a `AcceleratorCountProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.AcceleratorCount` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateAcceleratorCountPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_AcceleratorCountPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateAcceleratorCountPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.AcceleratorCountProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.AcceleratorCountProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                              \n    export interface AcceleratorTotalMemoryMiBProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AcceleratorTotalMemoryMiBProperty`\n *\n * @param properties - the TypeScript properties of a `AcceleratorTotalMemoryMiBProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_AcceleratorTotalMemoryMiBPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"AcceleratorTotalMemoryMiBProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.AcceleratorTotalMemoryMiB` resource\n *\n * @param properties - the TypeScript properties of a `AcceleratorTotalMemoryMiBProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.AcceleratorTotalMemoryMiB` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateAcceleratorTotalMemoryMiBPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_AcceleratorTotalMemoryMiBPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateAcceleratorTotalMemoryMiBPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface BaselineEbsBandwidthMbpsProperty {\n                                                                                                                                                                                                                                                                                                                                           \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BaselineEbsBandwidthMbpsProperty`\n *\n * @param properties - the TypeScript properties of a `BaselineEbsBandwidthMbpsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_BaselineEbsBandwidthMbpsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"BaselineEbsBandwidthMbpsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.BaselineEbsBandwidthMbps` resource\n *\n * @param properties - the TypeScript properties of a `BaselineEbsBandwidthMbpsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.BaselineEbsBandwidthMbps` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateBaselineEbsBandwidthMbpsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_BaselineEbsBandwidthMbpsPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateBaselineEbsBandwidthMbpsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface BlockDeviceMappingProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly deviceName?: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly ebs?: CfnLaunchTemplate.EbsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly noDevice?: string;\nn        readonly virtualName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlockDeviceMappingProperty`\n *\n * @param properties - the TypeScript properties of a `BlockDeviceMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_BlockDeviceMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('ebs', CfnLaunchTemplate_EbsPropertyValidator)(properties.ebs));\n    errors.collect(cdk.propertyValidator('noDevice', cdk.validateString)(properties.noDevice));\n    errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));\n    return errors.wrap('supplied properties not correct for \"BlockDeviceMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.BlockDeviceMapping` resource\n *\n * @param properties - the TypeScript properties of a `BlockDeviceMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.BlockDeviceMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateBlockDeviceMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_BlockDeviceMappingPropertyValidator(properties).assertSuccess();\n    return {\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        Ebs: cfnLaunchTemplateEbsPropertyToCloudFormation(properties.ebs),\n        NoDevice: cdk.stringToCloudFormation(properties.noDevice),\n        VirtualName: cdk.stringToCloudFormation(properties.virtualName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateBlockDeviceMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.BlockDeviceMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.BlockDeviceMappingProperty>();\n    ret.addPropertyResult('deviceName', 'DeviceName', properties.DeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceName) : undefined);\n    ret.addPropertyResult('ebs', 'Ebs', properties.Ebs != null ? CfnLaunchTemplateEbsPropertyFromCloudFormation(properties.Ebs) : undefined);\n    ret.addPropertyResult('noDevice', 'NoDevice', properties.NoDevice != null ? cfn_parse.FromCloudFormation.getString(properties.NoDevice) : undefined);\n    ret.addPropertyResult('virtualName', 'VirtualName', properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface CapacityReservationSpecificationProperty {\nn        readonly capacityReservationPreference?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly capacityReservationTarget?: CfnLaunchTemplate.CapacityReservationTargetProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityReservationSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityReservationSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_CapacityReservationSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityReservationPreference', cdk.validateString)(properties.capacityReservationPreference));\n    errors.collect(cdk.propertyValidator('capacityReservationTarget', CfnLaunchTemplate_CapacityReservationTargetPropertyValidator)(properties.capacityReservationTarget));\n    return errors.wrap('supplied properties not correct for \"CapacityReservationSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CapacityReservationSpecification` resource\n *\n * @param properties - the TypeScript properties of a `CapacityReservationSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CapacityReservationSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateCapacityReservationSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_CapacityReservationSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        CapacityReservationPreference: cdk.stringToCloudFormation(properties.capacityReservationPreference),\n        CapacityReservationTarget: cfnLaunchTemplateCapacityReservationTargetPropertyToCloudFormation(properties.capacityReservationTarget),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateCapacityReservationSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.CapacityReservationSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.CapacityReservationSpecificationProperty>();\n    ret.addPropertyResult('capacityReservationPreference', 'CapacityReservationPreference', properties.CapacityReservationPreference != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityReservationPreference) : undefined);\n    ret.addPropertyResult('capacityReservationTarget', 'CapacityReservationTarget', properties.CapacityReservationTarget != null ? CfnLaunchTemplateCapacityReservationTargetPropertyFromCloudFormation(properties.CapacityReservationTarget) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface CapacityReservationTargetProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly capacityReservationId?: string;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly capacityReservationResourceGroupArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityReservationTargetProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityReservationTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_CapacityReservationTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityReservationId', cdk.validateString)(properties.capacityReservationId));\n    errors.collect(cdk.propertyValidator('capacityReservationResourceGroupArn', cdk.validateString)(properties.capacityReservationResourceGroupArn));\n    return errors.wrap('supplied properties not correct for \"CapacityReservationTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CapacityReservationTarget` resource\n *\n * @param properties - the TypeScript properties of a `CapacityReservationTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CapacityReservationTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateCapacityReservationTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_CapacityReservationTargetPropertyValidator(properties).assertSuccess();\n    return {\n        CapacityReservationId: cdk.stringToCloudFormation(properties.capacityReservationId),\n        CapacityReservationResourceGroupArn: cdk.stringToCloudFormation(properties.capacityReservationResourceGroupArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateCapacityReservationTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.CapacityReservationTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.CapacityReservationTargetProperty>();\n    ret.addPropertyResult('capacityReservationId', 'CapacityReservationId', properties.CapacityReservationId != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityReservationId) : undefined);\n    ret.addPropertyResult('capacityReservationResourceGroupArn', 'CapacityReservationResourceGroupArn', properties.CapacityReservationResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityReservationResourceGroupArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface CpuOptionsProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly coreCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly threadsPerCore?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CpuOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `CpuOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_CpuOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('coreCount', cdk.validateNumber)(properties.coreCount));\n    errors.collect(cdk.propertyValidator('threadsPerCore', cdk.validateNumber)(properties.threadsPerCore));\n    return errors.wrap('supplied properties not correct for \"CpuOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CpuOptions` resource\n *\n * @param properties - the TypeScript properties of a `CpuOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CpuOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateCpuOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_CpuOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        CoreCount: cdk.numberToCloudFormation(properties.coreCount),\n        ThreadsPerCore: cdk.numberToCloudFormation(properties.threadsPerCore),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateCpuOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.CpuOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.CpuOptionsProperty>();\n    ret.addPropertyResult('coreCount', 'CoreCount', properties.CoreCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CoreCount) : undefined);\n    ret.addPropertyResult('threadsPerCore', 'ThreadsPerCore', properties.ThreadsPerCore != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThreadsPerCore) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface CreditSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly cpuCredits?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CreditSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `CreditSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_CreditSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpuCredits', cdk.validateString)(properties.cpuCredits));\n    return errors.wrap('supplied properties not correct for \"CreditSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CreditSpecification` resource\n *\n * @param properties - the TypeScript properties of a `CreditSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.CreditSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateCreditSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_CreditSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        CpuCredits: cdk.stringToCloudFormation(properties.cpuCredits),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateCreditSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.CreditSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.CreditSpecificationProperty>();\n    ret.addPropertyResult('cpuCredits', 'CpuCredits', properties.CpuCredits != null ? cfn_parse.FromCloudFormation.getString(properties.CpuCredits) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface EbsProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly deleteOnTermination?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly encrypted?: boolean | cdk.IResolvable;\nn        readonly iops?: number;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                           \n        readonly snapshotId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly throughput?: number;\nn        readonly volumeSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly volumeType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EbsProperty`\n *\n * @param properties - the TypeScript properties of a `EbsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_EbsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));\n    errors.collect(cdk.propertyValidator('throughput', cdk.validateNumber)(properties.throughput));\n    errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"EbsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Ebs` resource\n *\n * @param properties - the TypeScript properties of a `EbsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Ebs` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateEbsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_EbsPropertyValidator(properties).assertSuccess();\n    return {\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),\n        Throughput: cdk.numberToCloudFormation(properties.throughput),\n        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateEbsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.EbsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.EbsProperty>();\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('snapshotId', 'SnapshotId', properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : undefined);\n    ret.addPropertyResult('throughput', 'Throughput', properties.Throughput != null ? cfn_parse.FromCloudFormation.getNumber(properties.Throughput) : undefined);\n    ret.addPropertyResult('volumeSize', 'VolumeSize', properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface ElasticGpuSpecificationProperty {\nn        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ElasticGpuSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `ElasticGpuSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_ElasticGpuSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ElasticGpuSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.ElasticGpuSpecification` resource\n *\n * @param properties - the TypeScript properties of a `ElasticGpuSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.ElasticGpuSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateElasticGpuSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_ElasticGpuSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateElasticGpuSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.ElasticGpuSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.ElasticGpuSpecificationProperty>();\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                    \n    export interface EnclaveOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnclaveOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `EnclaveOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_EnclaveOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"EnclaveOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.EnclaveOptions` resource\n *\n * @param properties - the TypeScript properties of a `EnclaveOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.EnclaveOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateEnclaveOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_EnclaveOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateEnclaveOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.EnclaveOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.EnclaveOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface HibernationOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly configured?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HibernationOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `HibernationOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_HibernationOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configured', cdk.validateBoolean)(properties.configured));\n    return errors.wrap('supplied properties not correct for \"HibernationOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.HibernationOptions` resource\n *\n * @param properties - the TypeScript properties of a `HibernationOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.HibernationOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateHibernationOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_HibernationOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Configured: cdk.booleanToCloudFormation(properties.configured),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateHibernationOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.HibernationOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.HibernationOptionsProperty>();\n    ret.addPropertyResult('configured', 'Configured', properties.Configured != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Configured) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface IamInstanceProfileProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly arn?: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IamInstanceProfileProperty`\n *\n * @param properties - the TypeScript properties of a `IamInstanceProfileProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_IamInstanceProfilePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"IamInstanceProfileProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.IamInstanceProfile` resource\n *\n * @param properties - the TypeScript properties of a `IamInstanceProfileProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.IamInstanceProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateIamInstanceProfilePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_IamInstanceProfilePropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateIamInstanceProfilePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.IamInstanceProfileProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.IamInstanceProfileProperty>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface InstanceMarketOptionsProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly marketType?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly spotOptions?: CfnLaunchTemplate.SpotOptionsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceMarketOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceMarketOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_InstanceMarketOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('marketType', cdk.validateString)(properties.marketType));\n    errors.collect(cdk.propertyValidator('spotOptions', CfnLaunchTemplate_SpotOptionsPropertyValidator)(properties.spotOptions));\n    return errors.wrap('supplied properties not correct for \"InstanceMarketOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.InstanceMarketOptions` resource\n *\n * @param properties - the TypeScript properties of a `InstanceMarketOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.InstanceMarketOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateInstanceMarketOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_InstanceMarketOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        MarketType: cdk.stringToCloudFormation(properties.marketType),\n        SpotOptions: cfnLaunchTemplateSpotOptionsPropertyToCloudFormation(properties.spotOptions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateInstanceMarketOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.InstanceMarketOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.InstanceMarketOptionsProperty>();\n    ret.addPropertyResult('marketType', 'MarketType', properties.MarketType != null ? cfn_parse.FromCloudFormation.getString(properties.MarketType) : undefined);\n    ret.addPropertyResult('spotOptions', 'SpotOptions', properties.SpotOptions != null ? CfnLaunchTemplateSpotOptionsPropertyFromCloudFormation(properties.SpotOptions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface InstanceRequirementsProperty {\nn        readonly acceleratorCount?: CfnLaunchTemplate.AcceleratorCountProperty | cdk.IResolvable;\nn        readonly acceleratorManufacturers?: string[];\nn        readonly acceleratorNames?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly acceleratorTotalMemoryMiB?: CfnLaunchTemplate.AcceleratorTotalMemoryMiBProperty | cdk.IResolvable;\nn        readonly acceleratorTypes?: string[];\nn        readonly bareMetal?: string;\nn        readonly baselineEbsBandwidthMbps?: CfnLaunchTemplate.BaselineEbsBandwidthMbpsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly burstablePerformance?: string;\nn        readonly cpuManufacturers?: string[];\nn        readonly excludedInstanceTypes?: string[];\nn        readonly instanceGenerations?: string[];\nn        readonly localStorage?: string;\nn        readonly localStorageTypes?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly memoryGiBPerVCpu?: CfnLaunchTemplate.MemoryGiBPerVCpuProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly memoryMiB?: CfnLaunchTemplate.MemoryMiBProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly networkInterfaceCount?: CfnLaunchTemplate.NetworkInterfaceCountProperty | cdk.IResolvable;\nn        readonly onDemandMaxPricePercentageOverLowestPrice?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly requireHibernateSupport?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly spotMaxPricePercentageOverLowestPrice?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly totalLocalStorageGb?: CfnLaunchTemplate.TotalLocalStorageGBProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly vCpuCount?: CfnLaunchTemplate.VCpuCountProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceRequirementsProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceRequirementsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_InstanceRequirementsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceleratorCount', CfnLaunchTemplate_AcceleratorCountPropertyValidator)(properties.acceleratorCount));\n    errors.collect(cdk.propertyValidator('acceleratorManufacturers', cdk.listValidator(cdk.validateString))(properties.acceleratorManufacturers));\n    errors.collect(cdk.propertyValidator('acceleratorNames', cdk.listValidator(cdk.validateString))(properties.acceleratorNames));\n    errors.collect(cdk.propertyValidator('acceleratorTotalMemoryMiB', CfnLaunchTemplate_AcceleratorTotalMemoryMiBPropertyValidator)(properties.acceleratorTotalMemoryMiB));\n    errors.collect(cdk.propertyValidator('acceleratorTypes', cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));\n    errors.collect(cdk.propertyValidator('bareMetal', cdk.validateString)(properties.bareMetal));\n    errors.collect(cdk.propertyValidator('baselineEbsBandwidthMbps', CfnLaunchTemplate_BaselineEbsBandwidthMbpsPropertyValidator)(properties.baselineEbsBandwidthMbps));\n    errors.collect(cdk.propertyValidator('burstablePerformance', cdk.validateString)(properties.burstablePerformance));\n    errors.collect(cdk.propertyValidator('cpuManufacturers', cdk.listValidator(cdk.validateString))(properties.cpuManufacturers));\n    errors.collect(cdk.propertyValidator('excludedInstanceTypes', cdk.listValidator(cdk.validateString))(properties.excludedInstanceTypes));\n    errors.collect(cdk.propertyValidator('instanceGenerations', cdk.listValidator(cdk.validateString))(properties.instanceGenerations));\n    errors.collect(cdk.propertyValidator('localStorage', cdk.validateString)(properties.localStorage));\n    errors.collect(cdk.propertyValidator('localStorageTypes', cdk.listValidator(cdk.validateString))(properties.localStorageTypes));\n    errors.collect(cdk.propertyValidator('memoryGiBPerVCpu', CfnLaunchTemplate_MemoryGiBPerVCpuPropertyValidator)(properties.memoryGiBPerVCpu));\n    errors.collect(cdk.propertyValidator('memoryMiB', CfnLaunchTemplate_MemoryMiBPropertyValidator)(properties.memoryMiB));\n    errors.collect(cdk.propertyValidator('networkInterfaceCount', CfnLaunchTemplate_NetworkInterfaceCountPropertyValidator)(properties.networkInterfaceCount));\n    errors.collect(cdk.propertyValidator('onDemandMaxPricePercentageOverLowestPrice', cdk.validateNumber)(properties.onDemandMaxPricePercentageOverLowestPrice));\n    errors.collect(cdk.propertyValidator('requireHibernateSupport', cdk.validateBoolean)(properties.requireHibernateSupport));\n    errors.collect(cdk.propertyValidator('spotMaxPricePercentageOverLowestPrice', cdk.validateNumber)(properties.spotMaxPricePercentageOverLowestPrice));\n    errors.collect(cdk.propertyValidator('totalLocalStorageGb', CfnLaunchTemplate_TotalLocalStorageGBPropertyValidator)(properties.totalLocalStorageGb));\n    errors.collect(cdk.propertyValidator('vCpuCount', CfnLaunchTemplate_VCpuCountPropertyValidator)(properties.vCpuCount));\n    return errors.wrap('supplied properties not correct for \"InstanceRequirementsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.InstanceRequirements` resource\n *\n * @param properties - the TypeScript properties of a `InstanceRequirementsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.InstanceRequirements` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateInstanceRequirementsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_InstanceRequirementsPropertyValidator(properties).assertSuccess();\n    return {\n        AcceleratorCount: cfnLaunchTemplateAcceleratorCountPropertyToCloudFormation(properties.acceleratorCount),\n        AcceleratorManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorManufacturers),\n        AcceleratorNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorNames),\n        AcceleratorTotalMemoryMiB: cfnLaunchTemplateAcceleratorTotalMemoryMiBPropertyToCloudFormation(properties.acceleratorTotalMemoryMiB),\n        AcceleratorTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),\n        BareMetal: cdk.stringToCloudFormation(properties.bareMetal),\n        BaselineEbsBandwidthMbps: cfnLaunchTemplateBaselineEbsBandwidthMbpsPropertyToCloudFormation(properties.baselineEbsBandwidthMbps),\n        BurstablePerformance: cdk.stringToCloudFormation(properties.burstablePerformance),\n        CpuManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.cpuManufacturers),\n        ExcludedInstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedInstanceTypes),\n        InstanceGenerations: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceGenerations),\n        LocalStorage: cdk.stringToCloudFormation(properties.localStorage),\n        LocalStorageTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.localStorageTypes),\n        MemoryGiBPerVCpu: cfnLaunchTemplateMemoryGiBPerVCpuPropertyToCloudFormation(properties.memoryGiBPerVCpu),\n        MemoryMiB: cfnLaunchTemplateMemoryMiBPropertyToCloudFormation(properties.memoryMiB),\n        NetworkInterfaceCount: cfnLaunchTemplateNetworkInterfaceCountPropertyToCloudFormation(properties.networkInterfaceCount),\n        OnDemandMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.onDemandMaxPricePercentageOverLowestPrice),\n        RequireHibernateSupport: cdk.booleanToCloudFormation(properties.requireHibernateSupport),\n        SpotMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.spotMaxPricePercentageOverLowestPrice),\n        TotalLocalStorageGB: cfnLaunchTemplateTotalLocalStorageGBPropertyToCloudFormation(properties.totalLocalStorageGb),\n        VCpuCount: cfnLaunchTemplateVCpuCountPropertyToCloudFormation(properties.vCpuCount),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateInstanceRequirementsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.InstanceRequirementsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.InstanceRequirementsProperty>();\n    ret.addPropertyResult('acceleratorCount', 'AcceleratorCount', properties.AcceleratorCount != null ? CfnLaunchTemplateAcceleratorCountPropertyFromCloudFormation(properties.AcceleratorCount) : undefined);\n    ret.addPropertyResult('acceleratorManufacturers', 'AcceleratorManufacturers', properties.AcceleratorManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorManufacturers) : undefined);\n    ret.addPropertyResult('acceleratorNames', 'AcceleratorNames', properties.AcceleratorNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorNames) : undefined);\n    ret.addPropertyResult('acceleratorTotalMemoryMiB', 'AcceleratorTotalMemoryMiB', properties.AcceleratorTotalMemoryMiB != null ? CfnLaunchTemplateAcceleratorTotalMemoryMiBPropertyFromCloudFormation(properties.AcceleratorTotalMemoryMiB) : undefined);\n    ret.addPropertyResult('acceleratorTypes', 'AcceleratorTypes', properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorTypes) : undefined);\n    ret.addPropertyResult('bareMetal', 'BareMetal', properties.BareMetal != null ? cfn_parse.FromCloudFormation.getString(properties.BareMetal) : undefined);\n    ret.addPropertyResult('baselineEbsBandwidthMbps', 'BaselineEbsBandwidthMbps', properties.BaselineEbsBandwidthMbps != null ? CfnLaunchTemplateBaselineEbsBandwidthMbpsPropertyFromCloudFormation(properties.BaselineEbsBandwidthMbps) : undefined);\n    ret.addPropertyResult('burstablePerformance', 'BurstablePerformance', properties.BurstablePerformance != null ? cfn_parse.FromCloudFormation.getString(properties.BurstablePerformance) : undefined);\n    ret.addPropertyResult('cpuManufacturers', 'CpuManufacturers', properties.CpuManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CpuManufacturers) : undefined);\n    ret.addPropertyResult('excludedInstanceTypes', 'ExcludedInstanceTypes', properties.ExcludedInstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedInstanceTypes) : undefined);\n    ret.addPropertyResult('instanceGenerations', 'InstanceGenerations', properties.InstanceGenerations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceGenerations) : undefined);\n    ret.addPropertyResult('localStorage', 'LocalStorage', properties.LocalStorage != null ? cfn_parse.FromCloudFormation.getString(properties.LocalStorage) : undefined);\n    ret.addPropertyResult('localStorageTypes', 'LocalStorageTypes', properties.LocalStorageTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LocalStorageTypes) : undefined);\n    ret.addPropertyResult('memoryGiBPerVCpu', 'MemoryGiBPerVCpu', properties.MemoryGiBPerVCpu != null ? CfnLaunchTemplateMemoryGiBPerVCpuPropertyFromCloudFormation(properties.MemoryGiBPerVCpu) : undefined);\n    ret.addPropertyResult('memoryMiB', 'MemoryMiB', properties.MemoryMiB != null ? CfnLaunchTemplateMemoryMiBPropertyFromCloudFormation(properties.MemoryMiB) : undefined);\n    ret.addPropertyResult('networkInterfaceCount', 'NetworkInterfaceCount', properties.NetworkInterfaceCount != null ? CfnLaunchTemplateNetworkInterfaceCountPropertyFromCloudFormation(properties.NetworkInterfaceCount) : undefined);\n    ret.addPropertyResult('onDemandMaxPricePercentageOverLowestPrice', 'OnDemandMaxPricePercentageOverLowestPrice', properties.OnDemandMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandMaxPricePercentageOverLowestPrice) : undefined);\n    ret.addPropertyResult('requireHibernateSupport', 'RequireHibernateSupport', properties.RequireHibernateSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireHibernateSupport) : undefined);\n    ret.addPropertyResult('spotMaxPricePercentageOverLowestPrice', 'SpotMaxPricePercentageOverLowestPrice', properties.SpotMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotMaxPricePercentageOverLowestPrice) : undefined);\n    ret.addPropertyResult('totalLocalStorageGb', 'TotalLocalStorageGB', properties.TotalLocalStorageGB != null ? CfnLaunchTemplateTotalLocalStorageGBPropertyFromCloudFormation(properties.TotalLocalStorageGB) : undefined);\n    ret.addPropertyResult('vCpuCount', 'VCpuCount', properties.VCpuCount != null ? CfnLaunchTemplateVCpuCountPropertyFromCloudFormation(properties.VCpuCount) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface Ipv6AddProperty {\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly ipv6Address?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Ipv6AddProperty`\n *\n * @param properties - the TypeScript properties of a `Ipv6AddProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_Ipv6AddPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));\n    return errors.wrap('supplied properties not correct for \"Ipv6AddProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Ipv6Add` resource\n *\n * @param properties - the TypeScript properties of a `Ipv6AddProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Ipv6Add` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateIpv6AddPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_Ipv6AddPropertyValidator(properties).assertSuccess();\n    return {\n        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateIpv6AddPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.Ipv6AddProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.Ipv6AddProperty>();\n    ret.addPropertyResult('ipv6Address', 'Ipv6Address', properties.Ipv6Address != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6Address) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                      \n    export interface LaunchTemplateDataProperty {\n                                                                                                                                                                                                                                                                              \n        readonly blockDeviceMappings?: Array<CfnLaunchTemplate.BlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly capacityReservationSpecification?: CfnLaunchTemplate.CapacityReservationSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly cpuOptions?: CfnLaunchTemplate.CpuOptionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly creditSpecification?: CfnLaunchTemplate.CreditSpecificationProperty | cdk.IResolvable;\nn        readonly disableApiTermination?: boolean | cdk.IResolvable;\nn        readonly ebsOptimized?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly elasticGpuSpecifications?: Array<CfnLaunchTemplate.ElasticGpuSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly elasticInferenceAccelerators?: Array<CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly enclaveOptions?: CfnLaunchTemplate.EnclaveOptionsProperty | cdk.IResolvable;\nn        readonly hibernationOptions?: CfnLaunchTemplate.HibernationOptionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly iamInstanceProfile?: CfnLaunchTemplate.IamInstanceProfileProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                           \n        readonly imageId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly instanceInitiatedShutdownBehavior?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly instanceMarketOptions?: CfnLaunchTemplate.InstanceMarketOptionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                         \n        readonly instanceRequirements?: CfnLaunchTemplate.InstanceRequirementsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly instanceType?: string;\nn        readonly kernelId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly keyName?: string;\n                                                                                                                                                                                                                                                                                  \n        readonly licenseSpecifications?: Array<CfnLaunchTemplate.LicenseSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly metadataOptions?: CfnLaunchTemplate.MetadataOptionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly monitoring?: CfnLaunchTemplate.MonitoringProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly networkInterfaces?: Array<CfnLaunchTemplate.NetworkInterfaceProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly placement?: CfnLaunchTemplate.PlacementProperty | cdk.IResolvable;\nn        readonly ramDiskId?: string;\nn        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly securityGroups?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly tagSpecifications?: Array<CfnLaunchTemplate.TagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly userData?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateDataProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateDataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_LaunchTemplateDataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(CfnLaunchTemplate_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));\n    errors.collect(cdk.propertyValidator('capacityReservationSpecification', CfnLaunchTemplate_CapacityReservationSpecificationPropertyValidator)(properties.capacityReservationSpecification));\n    errors.collect(cdk.propertyValidator('cpuOptions', CfnLaunchTemplate_CpuOptionsPropertyValidator)(properties.cpuOptions));\n    errors.collect(cdk.propertyValidator('creditSpecification', CfnLaunchTemplate_CreditSpecificationPropertyValidator)(properties.creditSpecification));\n    errors.collect(cdk.propertyValidator('disableApiTermination', cdk.validateBoolean)(properties.disableApiTermination));\n    errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));\n    errors.collect(cdk.propertyValidator('elasticGpuSpecifications', cdk.listValidator(CfnLaunchTemplate_ElasticGpuSpecificationPropertyValidator))(properties.elasticGpuSpecifications));\n    errors.collect(cdk.propertyValidator('elasticInferenceAccelerators', cdk.listValidator(CfnLaunchTemplate_LaunchTemplateElasticInferenceAcceleratorPropertyValidator))(properties.elasticInferenceAccelerators));\n    errors.collect(cdk.propertyValidator('enclaveOptions', CfnLaunchTemplate_EnclaveOptionsPropertyValidator)(properties.enclaveOptions));\n    errors.collect(cdk.propertyValidator('hibernationOptions', CfnLaunchTemplate_HibernationOptionsPropertyValidator)(properties.hibernationOptions));\n    errors.collect(cdk.propertyValidator('iamInstanceProfile', CfnLaunchTemplate_IamInstanceProfilePropertyValidator)(properties.iamInstanceProfile));\n    errors.collect(cdk.propertyValidator('imageId', cdk.validateString)(properties.imageId));\n    errors.collect(cdk.propertyValidator('instanceInitiatedShutdownBehavior', cdk.validateString)(properties.instanceInitiatedShutdownBehavior));\n    errors.collect(cdk.propertyValidator('instanceMarketOptions', CfnLaunchTemplate_InstanceMarketOptionsPropertyValidator)(properties.instanceMarketOptions));\n    errors.collect(cdk.propertyValidator('instanceRequirements', CfnLaunchTemplate_InstanceRequirementsPropertyValidator)(properties.instanceRequirements));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('kernelId', cdk.validateString)(properties.kernelId));\n    errors.collect(cdk.propertyValidator('keyName', cdk.validateString)(properties.keyName));\n    errors.collect(cdk.propertyValidator('licenseSpecifications', cdk.listValidator(CfnLaunchTemplate_LicenseSpecificationPropertyValidator))(properties.licenseSpecifications));\n    errors.collect(cdk.propertyValidator('metadataOptions', CfnLaunchTemplate_MetadataOptionsPropertyValidator)(properties.metadataOptions));\n    errors.collect(cdk.propertyValidator('monitoring', CfnLaunchTemplate_MonitoringPropertyValidator)(properties.monitoring));\n    errors.collect(cdk.propertyValidator('networkInterfaces', cdk.listValidator(CfnLaunchTemplate_NetworkInterfacePropertyValidator))(properties.networkInterfaces));\n    errors.collect(cdk.propertyValidator('placement', CfnLaunchTemplate_PlacementPropertyValidator)(properties.placement));\n    errors.collect(cdk.propertyValidator('ramDiskId', cdk.validateString)(properties.ramDiskId));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnLaunchTemplate_TagSpecificationPropertyValidator))(properties.tagSpecifications));\n    errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateDataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LaunchTemplateData` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateDataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LaunchTemplateData` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateLaunchTemplateDataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_LaunchTemplateDataPropertyValidator(properties).assertSuccess();\n    return {\n        BlockDeviceMappings: cdk.listMapper(cfnLaunchTemplateBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),\n        CapacityReservationSpecification: cfnLaunchTemplateCapacityReservationSpecificationPropertyToCloudFormation(properties.capacityReservationSpecification),\n        CpuOptions: cfnLaunchTemplateCpuOptionsPropertyToCloudFormation(properties.cpuOptions),\n        CreditSpecification: cfnLaunchTemplateCreditSpecificationPropertyToCloudFormation(properties.creditSpecification),\n        DisableApiTermination: cdk.booleanToCloudFormation(properties.disableApiTermination),\n        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),\n        ElasticGpuSpecifications: cdk.listMapper(cfnLaunchTemplateElasticGpuSpecificationPropertyToCloudFormation)(properties.elasticGpuSpecifications),\n        ElasticInferenceAccelerators: cdk.listMapper(cfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyToCloudFormation)(properties.elasticInferenceAccelerators),\n        EnclaveOptions: cfnLaunchTemplateEnclaveOptionsPropertyToCloudFormation(properties.enclaveOptions),\n        HibernationOptions: cfnLaunchTemplateHibernationOptionsPropertyToCloudFormation(properties.hibernationOptions),\n        IamInstanceProfile: cfnLaunchTemplateIamInstanceProfilePropertyToCloudFormation(properties.iamInstanceProfile),\n        ImageId: cdk.stringToCloudFormation(properties.imageId),\n        InstanceInitiatedShutdownBehavior: cdk.stringToCloudFormation(properties.instanceInitiatedShutdownBehavior),\n        InstanceMarketOptions: cfnLaunchTemplateInstanceMarketOptionsPropertyToCloudFormation(properties.instanceMarketOptions),\n        InstanceRequirements: cfnLaunchTemplateInstanceRequirementsPropertyToCloudFormation(properties.instanceRequirements),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        KernelId: cdk.stringToCloudFormation(properties.kernelId),\n        KeyName: cdk.stringToCloudFormation(properties.keyName),\n        LicenseSpecifications: cdk.listMapper(cfnLaunchTemplateLicenseSpecificationPropertyToCloudFormation)(properties.licenseSpecifications),\n        MetadataOptions: cfnLaunchTemplateMetadataOptionsPropertyToCloudFormation(properties.metadataOptions),\n        Monitoring: cfnLaunchTemplateMonitoringPropertyToCloudFormation(properties.monitoring),\n        NetworkInterfaces: cdk.listMapper(cfnLaunchTemplateNetworkInterfacePropertyToCloudFormation)(properties.networkInterfaces),\n        Placement: cfnLaunchTemplatePlacementPropertyToCloudFormation(properties.placement),\n        RamDiskId: cdk.stringToCloudFormation(properties.ramDiskId),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        TagSpecifications: cdk.listMapper(cfnLaunchTemplateTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n        UserData: cdk.stringToCloudFormation(properties.userData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateLaunchTemplateDataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.LaunchTemplateDataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.LaunchTemplateDataProperty>();\n    ret.addPropertyResult('blockDeviceMappings', 'BlockDeviceMappings', properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : undefined);\n    ret.addPropertyResult('capacityReservationSpecification', 'CapacityReservationSpecification', properties.CapacityReservationSpecification != null ? CfnLaunchTemplateCapacityReservationSpecificationPropertyFromCloudFormation(properties.CapacityReservationSpecification) : undefined);\n    ret.addPropertyResult('cpuOptions', 'CpuOptions', properties.CpuOptions != null ? CfnLaunchTemplateCpuOptionsPropertyFromCloudFormation(properties.CpuOptions) : undefined);\n    ret.addPropertyResult('creditSpecification', 'CreditSpecification', properties.CreditSpecification != null ? CfnLaunchTemplateCreditSpecificationPropertyFromCloudFormation(properties.CreditSpecification) : undefined);\n    ret.addPropertyResult('disableApiTermination', 'DisableApiTermination', properties.DisableApiTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableApiTermination) : undefined);\n    ret.addPropertyResult('ebsOptimized', 'EbsOptimized', properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : undefined);\n    ret.addPropertyResult('elasticGpuSpecifications', 'ElasticGpuSpecifications', properties.ElasticGpuSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateElasticGpuSpecificationPropertyFromCloudFormation)(properties.ElasticGpuSpecifications) : undefined);\n    ret.addPropertyResult('elasticInferenceAccelerators', 'ElasticInferenceAccelerators', properties.ElasticInferenceAccelerators != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyFromCloudFormation)(properties.ElasticInferenceAccelerators) : undefined);\n    ret.addPropertyResult('enclaveOptions', 'EnclaveOptions', properties.EnclaveOptions != null ? CfnLaunchTemplateEnclaveOptionsPropertyFromCloudFormation(properties.EnclaveOptions) : undefined);\n    ret.addPropertyResult('hibernationOptions', 'HibernationOptions', properties.HibernationOptions != null ? CfnLaunchTemplateHibernationOptionsPropertyFromCloudFormation(properties.HibernationOptions) : undefined);\n    ret.addPropertyResult('iamInstanceProfile', 'IamInstanceProfile', properties.IamInstanceProfile != null ? CfnLaunchTemplateIamInstanceProfilePropertyFromCloudFormation(properties.IamInstanceProfile) : undefined);\n    ret.addPropertyResult('imageId', 'ImageId', properties.ImageId != null ? cfn_parse.FromCloudFormation.getString(properties.ImageId) : undefined);\n    ret.addPropertyResult('instanceInitiatedShutdownBehavior', 'InstanceInitiatedShutdownBehavior', properties.InstanceInitiatedShutdownBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInitiatedShutdownBehavior) : undefined);\n    ret.addPropertyResult('instanceMarketOptions', 'InstanceMarketOptions', properties.InstanceMarketOptions != null ? CfnLaunchTemplateInstanceMarketOptionsPropertyFromCloudFormation(properties.InstanceMarketOptions) : undefined);\n    ret.addPropertyResult('instanceRequirements', 'InstanceRequirements', properties.InstanceRequirements != null ? CfnLaunchTemplateInstanceRequirementsPropertyFromCloudFormation(properties.InstanceRequirements) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('kernelId', 'KernelId', properties.KernelId != null ? cfn_parse.FromCloudFormation.getString(properties.KernelId) : undefined);\n    ret.addPropertyResult('keyName', 'KeyName', properties.KeyName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyName) : undefined);\n    ret.addPropertyResult('licenseSpecifications', 'LicenseSpecifications', properties.LicenseSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateLicenseSpecificationPropertyFromCloudFormation)(properties.LicenseSpecifications) : undefined);\n    ret.addPropertyResult('metadataOptions', 'MetadataOptions', properties.MetadataOptions != null ? CfnLaunchTemplateMetadataOptionsPropertyFromCloudFormation(properties.MetadataOptions) : undefined);\n    ret.addPropertyResult('monitoring', 'Monitoring', properties.Monitoring != null ? CfnLaunchTemplateMonitoringPropertyFromCloudFormation(properties.Monitoring) : undefined);\n    ret.addPropertyResult('networkInterfaces', 'NetworkInterfaces', properties.NetworkInterfaces != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateNetworkInterfacePropertyFromCloudFormation)(properties.NetworkInterfaces) : undefined);\n    ret.addPropertyResult('placement', 'Placement', properties.Placement != null ? CfnLaunchTemplatePlacementPropertyFromCloudFormation(properties.Placement) : undefined);\n    ret.addPropertyResult('ramDiskId', 'RamDiskId', properties.RamDiskId != null ? cfn_parse.FromCloudFormation.getString(properties.RamDiskId) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addPropertyResult('userData', 'UserData', properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface LaunchTemplateElasticInferenceAcceleratorProperty {\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly count?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateElasticInferenceAcceleratorProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateElasticInferenceAcceleratorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_LaunchTemplateElasticInferenceAcceleratorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('count', cdk.validateNumber)(properties.count));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateElasticInferenceAcceleratorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateElasticInferenceAcceleratorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_LaunchTemplateElasticInferenceAcceleratorPropertyValidator(properties).assertSuccess();\n    return {\n        Count: cdk.numberToCloudFormation(properties.count),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.LaunchTemplateElasticInferenceAcceleratorProperty>();\n    ret.addPropertyResult('count', 'Count', properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface LaunchTemplateTagSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly resourceType?: string;\n                                                                                                                                                                                                                                                                                        \n        readonly tags?: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateTagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateTagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_LaunchTemplateTagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateTagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LaunchTemplateTagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateTagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LaunchTemplateTagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateLaunchTemplateTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_LaunchTemplateTagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateLaunchTemplateTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.LaunchTemplateTagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface LicenseSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                         \n        readonly licenseConfigurationArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LicenseSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `LicenseSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_LicenseSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('licenseConfigurationArn', cdk.validateString)(properties.licenseConfigurationArn));\n    return errors.wrap('supplied properties not correct for \"LicenseSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LicenseSpecification` resource\n *\n * @param properties - the TypeScript properties of a `LicenseSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.LicenseSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateLicenseSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_LicenseSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        LicenseConfigurationArn: cdk.stringToCloudFormation(properties.licenseConfigurationArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateLicenseSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.LicenseSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.LicenseSpecificationProperty>();\n    ret.addPropertyResult('licenseConfigurationArn', 'LicenseConfigurationArn', properties.LicenseConfigurationArn != null ? cfn_parse.FromCloudFormation.getString(properties.LicenseConfigurationArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                            \n    export interface MemoryGiBPerVCpuProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemoryGiBPerVCpuProperty`\n *\n * @param properties - the TypeScript properties of a `MemoryGiBPerVCpuProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_MemoryGiBPerVCpuPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"MemoryGiBPerVCpuProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.MemoryGiBPerVCpu` resource\n *\n * @param properties - the TypeScript properties of a `MemoryGiBPerVCpuProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.MemoryGiBPerVCpu` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateMemoryGiBPerVCpuPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_MemoryGiBPerVCpuPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateMemoryGiBPerVCpuPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.MemoryGiBPerVCpuProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.MemoryGiBPerVCpuProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                            \n    export interface MemoryMiBProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                   \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemoryMiBProperty`\n *\n * @param properties - the TypeScript properties of a `MemoryMiBProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_MemoryMiBPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"MemoryMiBProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.MemoryMiB` resource\n *\n * @param properties - the TypeScript properties of a `MemoryMiBProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.MemoryMiB` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateMemoryMiBPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_MemoryMiBPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateMemoryMiBPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.MemoryMiBProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.MemoryMiBProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface MetadataOptionsProperty {\nn        readonly httpEndpoint?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly httpProtocolIpv6?: string;\nn        readonly httpPutResponseHopLimit?: number;\nn        readonly httpTokens?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MetadataOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `MetadataOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_MetadataOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('httpEndpoint', cdk.validateString)(properties.httpEndpoint));\n    errors.collect(cdk.propertyValidator('httpProtocolIpv6', cdk.validateString)(properties.httpProtocolIpv6));\n    errors.collect(cdk.propertyValidator('httpPutResponseHopLimit', cdk.validateNumber)(properties.httpPutResponseHopLimit));\n    errors.collect(cdk.propertyValidator('httpTokens', cdk.validateString)(properties.httpTokens));\n    return errors.wrap('supplied properties not correct for \"MetadataOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.MetadataOptions` resource\n *\n * @param properties - the TypeScript properties of a `MetadataOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.MetadataOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateMetadataOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_MetadataOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        HttpEndpoint: cdk.stringToCloudFormation(properties.httpEndpoint),\n        HttpProtocolIpv6: cdk.stringToCloudFormation(properties.httpProtocolIpv6),\n        HttpPutResponseHopLimit: cdk.numberToCloudFormation(properties.httpPutResponseHopLimit),\n        HttpTokens: cdk.stringToCloudFormation(properties.httpTokens),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateMetadataOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.MetadataOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.MetadataOptionsProperty>();\n    ret.addPropertyResult('httpEndpoint', 'HttpEndpoint', properties.HttpEndpoint != null ? cfn_parse.FromCloudFormation.getString(properties.HttpEndpoint) : undefined);\n    ret.addPropertyResult('httpProtocolIpv6', 'HttpProtocolIpv6', properties.HttpProtocolIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.HttpProtocolIpv6) : undefined);\n    ret.addPropertyResult('httpPutResponseHopLimit', 'HttpPutResponseHopLimit', properties.HttpPutResponseHopLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.HttpPutResponseHopLimit) : undefined);\n    ret.addPropertyResult('httpTokens', 'HttpTokens', properties.HttpTokens != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTokens) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface MonitoringProperty {\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_MonitoringPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"MonitoringProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Monitoring` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Monitoring` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateMonitoringPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_MonitoringPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateMonitoringPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.MonitoringProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.MonitoringProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface NetworkInterfaceProperty {\nn        readonly associateCarrierIpAddress?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly associatePublicIpAddress?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly deleteOnTermination?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly deviceIndex?: number;\n                                                                                                                                                                                                                                                                           \n        readonly groups?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly interfaceType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly ipv6AddressCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly ipv6Addresses?: Array<CfnLaunchTemplate.Ipv6AddProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly networkCardIndex?: number;\n                                                                                                                                                                                                                                                                                \n        readonly networkInterfaceId?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly privateIpAddress?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly privateIpAddresses?: Array<CfnLaunchTemplate.PrivateIpAddProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly secondaryPrivateIpAddressCount?: number;\n                                                                                                                                                                                                                                                                                     \n        readonly subnetId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkInterfaceProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_NetworkInterfacePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('associateCarrierIpAddress', cdk.validateBoolean)(properties.associateCarrierIpAddress));\n    errors.collect(cdk.propertyValidator('associatePublicIpAddress', cdk.validateBoolean)(properties.associatePublicIpAddress));\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateNumber)(properties.deviceIndex));\n    errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));\n    errors.collect(cdk.propertyValidator('interfaceType', cdk.validateString)(properties.interfaceType));\n    errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));\n    errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(CfnLaunchTemplate_Ipv6AddPropertyValidator))(properties.ipv6Addresses));\n    errors.collect(cdk.propertyValidator('networkCardIndex', cdk.validateNumber)(properties.networkCardIndex));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(CfnLaunchTemplate_PrivateIpAddPropertyValidator))(properties.privateIpAddresses));\n    errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"NetworkInterfaceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.NetworkInterface` resource\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.NetworkInterface` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateNetworkInterfacePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_NetworkInterfacePropertyValidator(properties).assertSuccess();\n    return {\n        AssociateCarrierIpAddress: cdk.booleanToCloudFormation(properties.associateCarrierIpAddress),\n        AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DeviceIndex: cdk.numberToCloudFormation(properties.deviceIndex),\n        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),\n        InterfaceType: cdk.stringToCloudFormation(properties.interfaceType),\n        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),\n        Ipv6Addresses: cdk.listMapper(cfnLaunchTemplateIpv6AddPropertyToCloudFormation)(properties.ipv6Addresses),\n        NetworkCardIndex: cdk.numberToCloudFormation(properties.networkCardIndex),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n        PrivateIpAddresses: cdk.listMapper(cfnLaunchTemplatePrivateIpAddPropertyToCloudFormation)(properties.privateIpAddresses),\n        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateNetworkInterfacePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.NetworkInterfaceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.NetworkInterfaceProperty>();\n    ret.addPropertyResult('associateCarrierIpAddress', 'AssociateCarrierIpAddress', properties.AssociateCarrierIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociateCarrierIpAddress) : undefined);\n    ret.addPropertyResult('associatePublicIpAddress', 'AssociatePublicIpAddress', properties.AssociatePublicIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociatePublicIpAddress) : undefined);\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('deviceIndex', 'DeviceIndex', properties.DeviceIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.DeviceIndex) : undefined);\n    ret.addPropertyResult('groups', 'Groups', properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : undefined);\n    ret.addPropertyResult('interfaceType', 'InterfaceType', properties.InterfaceType != null ? cfn_parse.FromCloudFormation.getString(properties.InterfaceType) : undefined);\n    ret.addPropertyResult('ipv6AddressCount', 'Ipv6AddressCount', properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : undefined);\n    ret.addPropertyResult('ipv6Addresses', 'Ipv6Addresses', properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateIpv6AddPropertyFromCloudFormation)(properties.Ipv6Addresses) : undefined);\n    ret.addPropertyResult('networkCardIndex', 'NetworkCardIndex', properties.NetworkCardIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetworkCardIndex) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : undefined);\n    ret.addPropertyResult('privateIpAddresses', 'PrivateIpAddresses', properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplatePrivateIpAddPropertyFromCloudFormation)(properties.PrivateIpAddresses) : undefined);\n    ret.addPropertyResult('secondaryPrivateIpAddressCount', 'SecondaryPrivateIpAddressCount', properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                            \n    export interface NetworkInterfaceCountProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkInterfaceCountProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceCountProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_NetworkInterfaceCountPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"NetworkInterfaceCountProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.NetworkInterfaceCount` resource\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceCountProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.NetworkInterfaceCount` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateNetworkInterfaceCountPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_NetworkInterfaceCountPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateNetworkInterfaceCountPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.NetworkInterfaceCountProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.NetworkInterfaceCountProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface PlacementProperty {\n                                                                                                                                                                                                                                                                                                                       \n        readonly affinity?: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly groupName?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly hostId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly hostResourceGroupArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly partitionNumber?: number;\n                                                                                                                                                                                                                                                                                          \n        readonly spreadDomain?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly tenancy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_PlacementPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('affinity', cdk.validateString)(properties.affinity));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('hostId', cdk.validateString)(properties.hostId));\n    errors.collect(cdk.propertyValidator('hostResourceGroupArn', cdk.validateString)(properties.hostResourceGroupArn));\n    errors.collect(cdk.propertyValidator('partitionNumber', cdk.validateNumber)(properties.partitionNumber));\n    errors.collect(cdk.propertyValidator('spreadDomain', cdk.validateString)(properties.spreadDomain));\n    errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));\n    return errors.wrap('supplied properties not correct for \"PlacementProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Placement` resource\n *\n * @param properties - the TypeScript properties of a `PlacementProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.Placement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplatePlacementPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_PlacementPropertyValidator(properties).assertSuccess();\n    return {\n        Affinity: cdk.stringToCloudFormation(properties.affinity),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        HostId: cdk.stringToCloudFormation(properties.hostId),\n        HostResourceGroupArn: cdk.stringToCloudFormation(properties.hostResourceGroupArn),\n        PartitionNumber: cdk.numberToCloudFormation(properties.partitionNumber),\n        SpreadDomain: cdk.stringToCloudFormation(properties.spreadDomain),\n        Tenancy: cdk.stringToCloudFormation(properties.tenancy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplatePlacementPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.PlacementProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.PlacementProperty>();\n    ret.addPropertyResult('affinity', 'Affinity', properties.Affinity != null ? cfn_parse.FromCloudFormation.getString(properties.Affinity) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('hostId', 'HostId', properties.HostId != null ? cfn_parse.FromCloudFormation.getString(properties.HostId) : undefined);\n    ret.addPropertyResult('hostResourceGroupArn', 'HostResourceGroupArn', properties.HostResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HostResourceGroupArn) : undefined);\n    ret.addPropertyResult('partitionNumber', 'PartitionNumber', properties.PartitionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.PartitionNumber) : undefined);\n    ret.addPropertyResult('spreadDomain', 'SpreadDomain', properties.SpreadDomain != null ? cfn_parse.FromCloudFormation.getString(properties.SpreadDomain) : undefined);\n    ret.addPropertyResult('tenancy', 'Tenancy', properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface PrivateIpAddProperty {\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly primary?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                 \n        readonly privateIpAddress?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrivateIpAddProperty`\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_PrivateIpAddPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    return errors.wrap('supplied properties not correct for \"PrivateIpAddProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.PrivateIpAdd` resource\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.PrivateIpAdd` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplatePrivateIpAddPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_PrivateIpAddPropertyValidator(properties).assertSuccess();\n    return {\n        Primary: cdk.booleanToCloudFormation(properties.primary),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplatePrivateIpAddPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.PrivateIpAddProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.PrivateIpAddProperty>();\n    ret.addPropertyResult('primary', 'Primary', properties.Primary != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Primary) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface SpotOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly blockDurationMinutes?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly instanceInterruptionBehavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly maxPrice?: string;\nn        readonly spotInstanceType?: string;\nn        readonly validUntil?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `SpotOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_SpotOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockDurationMinutes', cdk.validateNumber)(properties.blockDurationMinutes));\n    errors.collect(cdk.propertyValidator('instanceInterruptionBehavior', cdk.validateString)(properties.instanceInterruptionBehavior));\n    errors.collect(cdk.propertyValidator('maxPrice', cdk.validateString)(properties.maxPrice));\n    errors.collect(cdk.propertyValidator('spotInstanceType', cdk.validateString)(properties.spotInstanceType));\n    errors.collect(cdk.propertyValidator('validUntil', cdk.validateString)(properties.validUntil));\n    return errors.wrap('supplied properties not correct for \"SpotOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.SpotOptions` resource\n *\n * @param properties - the TypeScript properties of a `SpotOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.SpotOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateSpotOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_SpotOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        BlockDurationMinutes: cdk.numberToCloudFormation(properties.blockDurationMinutes),\n        InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),\n        MaxPrice: cdk.stringToCloudFormation(properties.maxPrice),\n        SpotInstanceType: cdk.stringToCloudFormation(properties.spotInstanceType),\n        ValidUntil: cdk.stringToCloudFormation(properties.validUntil),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateSpotOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.SpotOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.SpotOptionsProperty>();\n    ret.addPropertyResult('blockDurationMinutes', 'BlockDurationMinutes', properties.BlockDurationMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlockDurationMinutes) : undefined);\n    ret.addPropertyResult('instanceInterruptionBehavior', 'InstanceInterruptionBehavior', properties.InstanceInterruptionBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInterruptionBehavior) : undefined);\n    ret.addPropertyResult('maxPrice', 'MaxPrice', properties.MaxPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxPrice) : undefined);\n    ret.addPropertyResult('spotInstanceType', 'SpotInstanceType', properties.SpotInstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.SpotInstanceType) : undefined);\n    ret.addPropertyResult('validUntil', 'ValidUntil', properties.ValidUntil != null ? cfn_parse.FromCloudFormation.getString(properties.ValidUntil) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\nn    export interface TagSpecificationProperty {\nn        readonly resourceType?: string;\n                                                                                                                                                                                                                                                                    \n        readonly tags?: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_TagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"TagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.TagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `TagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.TagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_TagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.TagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.TagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                                                  \n    export interface TotalLocalStorageGBProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TotalLocalStorageGBProperty`\n *\n * @param properties - the TypeScript properties of a `TotalLocalStorageGBProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_TotalLocalStorageGBPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"TotalLocalStorageGBProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.TotalLocalStorageGB` resource\n *\n * @param properties - the TypeScript properties of a `TotalLocalStorageGBProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.TotalLocalStorageGB` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateTotalLocalStorageGBPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_TotalLocalStorageGBPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateTotalLocalStorageGBPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.TotalLocalStorageGBProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.TotalLocalStorageGBProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLaunchTemplate {\n                                                                                                                                                                                                                                                   \n    export interface VCpuCountProperty {\n                                                                                                                                                                                                                                                                                                 \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                          \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VCpuCountProperty`\n *\n * @param properties - the TypeScript properties of a `VCpuCountProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLaunchTemplate_VCpuCountPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"VCpuCountProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.VCpuCount` resource\n *\n * @param properties - the TypeScript properties of a `VCpuCountProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LaunchTemplate.VCpuCount` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLaunchTemplateVCpuCountPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLaunchTemplate_VCpuCountPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLaunchTemplateVCpuCountPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLaunchTemplate.VCpuCountProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLaunchTemplate.VCpuCountProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnLocalGatewayRouteProps {\n\n                                                                                                                                                                                                                                            \n    readonly destinationCidrBlock: string;\n\n                                                                                                                                                                                                                                            \n    readonly localGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                                     \n    readonly localGatewayVirtualInterfaceGroupId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocalGatewayRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocalGatewayRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocalGatewayRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.requiredValidator)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('localGatewayRouteTableId', cdk.requiredValidator)(properties.localGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('localGatewayRouteTableId', cdk.validateString)(properties.localGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('localGatewayVirtualInterfaceGroupId', cdk.requiredValidator)(properties.localGatewayVirtualInterfaceGroupId));\n    errors.collect(cdk.propertyValidator('localGatewayVirtualInterfaceGroupId', cdk.validateString)(properties.localGatewayVirtualInterfaceGroupId));\n    return errors.wrap('supplied properties not correct for \"CfnLocalGatewayRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LocalGatewayRoute` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocalGatewayRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LocalGatewayRoute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocalGatewayRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocalGatewayRoutePropsValidator(properties).assertSuccess();\n    return {\n        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),\n        LocalGatewayRouteTableId: cdk.stringToCloudFormation(properties.localGatewayRouteTableId),\n        LocalGatewayVirtualInterfaceGroupId: cdk.stringToCloudFormation(properties.localGatewayVirtualInterfaceGroupId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocalGatewayRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocalGatewayRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocalGatewayRouteProps>();\n    ret.addPropertyResult('destinationCidrBlock', 'DestinationCidrBlock', cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));\n    ret.addPropertyResult('localGatewayRouteTableId', 'LocalGatewayRouteTableId', cfn_parse.FromCloudFormation.getString(properties.LocalGatewayRouteTableId));\n    ret.addPropertyResult('localGatewayVirtualInterfaceGroupId', 'LocalGatewayVirtualInterfaceGroupId', cfn_parse.FromCloudFormation.getString(properties.LocalGatewayVirtualInterfaceGroupId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                      \nexport class CfnLocalGatewayRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::LocalGatewayRoute\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocalGatewayRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocalGatewayRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocalGatewayRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                        \n    public readonly attrState: string;\n\n                                                                                            \n    public readonly attrType: string;\n\n                                                                                                                                                                                                                                            \n    public destinationCidrBlock: string;\n\n                                                                                                                                                                                                                                            \n    public localGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                                     \n    public localGatewayVirtualInterfaceGroupId: string;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnLocalGatewayRouteProps) {\n        super(scope, id, { type: CfnLocalGatewayRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'destinationCidrBlock', this);\n        cdk.requireProperty(props, 'localGatewayRouteTableId', this);\n        cdk.requireProperty(props, 'localGatewayVirtualInterfaceGroupId', this);\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrType = cdk.Token.asString(this.getAtt('Type'));\n\n        this.destinationCidrBlock = props.destinationCidrBlock;\n        this.localGatewayRouteTableId = props.localGatewayRouteTableId;\n        this.localGatewayVirtualInterfaceGroupId = props.localGatewayVirtualInterfaceGroupId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocalGatewayRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinationCidrBlock: this.destinationCidrBlock,\n            localGatewayRouteTableId: this.localGatewayRouteTableId,\n            localGatewayVirtualInterfaceGroupId: this.localGatewayVirtualInterfaceGroupId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocalGatewayRoutePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                        \nexport interface CfnLocalGatewayRouteTableVPCAssociationProps {\n\n                                                                                                                                                                                                                                                                                  \n    readonly localGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                         \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLocalGatewayRouteTableVPCAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnLocalGatewayRouteTableVPCAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLocalGatewayRouteTableVPCAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('localGatewayRouteTableId', cdk.requiredValidator)(properties.localGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('localGatewayRouteTableId', cdk.validateString)(properties.localGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnLocalGatewayRouteTableVPCAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::LocalGatewayRouteTableVPCAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnLocalGatewayRouteTableVPCAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::LocalGatewayRouteTableVPCAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLocalGatewayRouteTableVPCAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLocalGatewayRouteTableVPCAssociationPropsValidator(properties).assertSuccess();\n    return {\n        LocalGatewayRouteTableId: cdk.stringToCloudFormation(properties.localGatewayRouteTableId),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLocalGatewayRouteTableVPCAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLocalGatewayRouteTableVPCAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLocalGatewayRouteTableVPCAssociationProps>();\n    ret.addPropertyResult('localGatewayRouteTableId', 'LocalGatewayRouteTableId', cfn_parse.FromCloudFormation.getString(properties.LocalGatewayRouteTableId));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnLocalGatewayRouteTableVPCAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::LocalGatewayRouteTableVPCAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLocalGatewayRouteTableVPCAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLocalGatewayRouteTableVPCAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLocalGatewayRouteTableVPCAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                  \n    public readonly attrLocalGatewayId: string;\n\n                                                                                                                        \n    public readonly attrLocalGatewayRouteTableVpcAssociationId: string;\n\n                                                                                          \n    public readonly attrState: string;\n\n                                                                                                                                                                                                                                                                                  \n    public localGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                         \n    public vpcId: string;\n\n                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnLocalGatewayRouteTableVPCAssociationProps) {\n        super(scope, id, { type: CfnLocalGatewayRouteTableVPCAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'localGatewayRouteTableId', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrLocalGatewayId = cdk.Token.asString(this.getAtt('LocalGatewayId'));\n        this.attrLocalGatewayRouteTableVpcAssociationId = cdk.Token.asString(this.getAtt('LocalGatewayRouteTableVpcAssociationId'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n\n        this.localGatewayRouteTableId = props.localGatewayRouteTableId;\n        this.vpcId = props.vpcId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::LocalGatewayRouteTableVPCAssociation\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLocalGatewayRouteTableVPCAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            localGatewayRouteTableId: this.localGatewayRouteTableId,\n            vpcId: this.vpcId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLocalGatewayRouteTableVPCAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                    \nexport interface CfnNatGatewayProps {\n\n                                                                                                                                                                                                                               \n    readonly subnetId: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly allocationId?: string;\n\n                                                                                                                                                                                                                                                        \n    readonly connectivityType?: string;\n\n                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNatGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnNatGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNatGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocationId', cdk.validateString)(properties.allocationId));\n    errors.collect(cdk.propertyValidator('connectivityType', cdk.validateString)(properties.connectivityType));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnNatGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NatGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnNatGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NatGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNatGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNatGatewayPropsValidator(properties).assertSuccess();\n    return {\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        AllocationId: cdk.stringToCloudFormation(properties.allocationId),\n        ConnectivityType: cdk.stringToCloudFormation(properties.connectivityType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNatGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNatGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNatGatewayProps>();\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addPropertyResult('allocationId', 'AllocationId', properties.AllocationId != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationId) : undefined);\n    ret.addPropertyResult('connectivityType', 'ConnectivityType', properties.ConnectivityType != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectivityType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNatGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NatGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNatGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNatGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNatGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                               \n    public subnetId: string;\n\n                                                                                                                                                                                                                                                                                       \n    public allocationId: string | undefined;\n\n                                                                                                                                                                                                                                                        \n    public connectivityType: string | undefined;\n\n                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnNatGatewayProps) {\n        super(scope, id, { type: CfnNatGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'subnetId', this);\n\n        this.subnetId = props.subnetId;\n        this.allocationId = props.allocationId;\n        this.connectivityType = props.connectivityType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NatGateway\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNatGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            subnetId: this.subnetId,\n            allocationId: this.allocationId,\n            connectivityType: this.connectivityType,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNatGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                    \nexport interface CfnNetworkAclProps {\n\n                                                                                                                                                                                                         \n    readonly vpcId: string;\n\n                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkAclProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkAclProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkAclPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkAclProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkAcl` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkAclProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkAcl` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkAclPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkAclPropsValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkAclPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkAclProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkAclProps>();\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                   \nexport class CfnNetworkAcl extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkAcl\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkAcl {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkAclPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkAcl(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                    \n    public readonly attrId: string;\n\n                                                                                                                                                                                                         \n    public vpcId: string;\n\n                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkAclProps) {\n        super(scope, id, { type: CfnNetworkAcl.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.vpcId = props.vpcId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NetworkAcl\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkAcl.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            vpcId: this.vpcId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkAclPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                              \nexport interface CfnNetworkAclEntryProps {\n\n                                                                                                                                                                                                                    \n    readonly networkAclId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly protocol: number;\n\n                                                                                                                                                                                                                                                                             \n    readonly ruleAction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly ruleNumber: number;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly cidrBlock?: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    readonly egress?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly icmp?: CfnNetworkAclEntry.IcmpProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                         \n    readonly ipv6CidrBlock?: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly portRange?: CfnNetworkAclEntry.PortRangeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkAclEntryProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkAclEntryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkAclEntryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));\n    errors.collect(cdk.propertyValidator('egress', cdk.validateBoolean)(properties.egress));\n    errors.collect(cdk.propertyValidator('icmp', CfnNetworkAclEntry_IcmpPropertyValidator)(properties.icmp));\n    errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));\n    errors.collect(cdk.propertyValidator('networkAclId', cdk.requiredValidator)(properties.networkAclId));\n    errors.collect(cdk.propertyValidator('networkAclId', cdk.validateString)(properties.networkAclId));\n    errors.collect(cdk.propertyValidator('portRange', CfnNetworkAclEntry_PortRangePropertyValidator)(properties.portRange));\n    errors.collect(cdk.propertyValidator('protocol', cdk.requiredValidator)(properties.protocol));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateNumber)(properties.protocol));\n    errors.collect(cdk.propertyValidator('ruleAction', cdk.requiredValidator)(properties.ruleAction));\n    errors.collect(cdk.propertyValidator('ruleAction', cdk.validateString)(properties.ruleAction));\n    errors.collect(cdk.propertyValidator('ruleNumber', cdk.requiredValidator)(properties.ruleNumber));\n    errors.collect(cdk.propertyValidator('ruleNumber', cdk.validateNumber)(properties.ruleNumber));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkAclEntryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkAclEntry` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkAclEntryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkAclEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkAclEntryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkAclEntryPropsValidator(properties).assertSuccess();\n    return {\n        NetworkAclId: cdk.stringToCloudFormation(properties.networkAclId),\n        Protocol: cdk.numberToCloudFormation(properties.protocol),\n        RuleAction: cdk.stringToCloudFormation(properties.ruleAction),\n        RuleNumber: cdk.numberToCloudFormation(properties.ruleNumber),\n        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),\n        Egress: cdk.booleanToCloudFormation(properties.egress),\n        Icmp: cfnNetworkAclEntryIcmpPropertyToCloudFormation(properties.icmp),\n        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),\n        PortRange: cfnNetworkAclEntryPortRangePropertyToCloudFormation(properties.portRange),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkAclEntryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkAclEntryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkAclEntryProps>();\n    ret.addPropertyResult('networkAclId', 'NetworkAclId', cfn_parse.FromCloudFormation.getString(properties.NetworkAclId));\n    ret.addPropertyResult('protocol', 'Protocol', cfn_parse.FromCloudFormation.getNumber(properties.Protocol));\n    ret.addPropertyResult('ruleAction', 'RuleAction', cfn_parse.FromCloudFormation.getString(properties.RuleAction));\n    ret.addPropertyResult('ruleNumber', 'RuleNumber', cfn_parse.FromCloudFormation.getNumber(properties.RuleNumber));\n    ret.addPropertyResult('cidrBlock', 'CidrBlock', properties.CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.CidrBlock) : undefined);\n    ret.addPropertyResult('egress', 'Egress', properties.Egress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Egress) : undefined);\n    ret.addPropertyResult('icmp', 'Icmp', properties.Icmp != null ? CfnNetworkAclEntryIcmpPropertyFromCloudFormation(properties.Icmp) : undefined);\n    ret.addPropertyResult('ipv6CidrBlock', 'Ipv6CidrBlock', properties.Ipv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock) : undefined);\n    ret.addPropertyResult('portRange', 'PortRange', properties.PortRange != null ? CfnNetworkAclEntryPortRangePropertyFromCloudFormation(properties.PortRange) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNetworkAclEntry extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkAclEntry\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkAclEntry {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkAclEntryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkAclEntry(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                          \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                    \n    public networkAclId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    public protocol: number;\n\n                                                                                                                                                                                                                                                                             \n    public ruleAction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    public ruleNumber: number;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public cidrBlock: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    public egress: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                               \n    public icmp: CfnNetworkAclEntry.IcmpProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                         \n    public ipv6CidrBlock: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                       \n    public portRange: CfnNetworkAclEntry.PortRangeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkAclEntryProps) {\n        super(scope, id, { type: CfnNetworkAclEntry.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'networkAclId', this);\n        cdk.requireProperty(props, 'protocol', this);\n        cdk.requireProperty(props, 'ruleAction', this);\n        cdk.requireProperty(props, 'ruleNumber', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.networkAclId = props.networkAclId;\n        this.protocol = props.protocol;\n        this.ruleAction = props.ruleAction;\n        this.ruleNumber = props.ruleNumber;\n        this.cidrBlock = props.cidrBlock;\n        this.egress = props.egress;\n        this.icmp = props.icmp;\n        this.ipv6CidrBlock = props.ipv6CidrBlock;\n        this.portRange = props.portRange;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkAclEntry.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            networkAclId: this.networkAclId,\n            protocol: this.protocol,\n            ruleAction: this.ruleAction,\n            ruleNumber: this.ruleNumber,\n            cidrBlock: this.cidrBlock,\n            egress: this.egress,\n            icmp: this.icmp,\n            ipv6CidrBlock: this.ipv6CidrBlock,\n            portRange: this.portRange,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkAclEntryPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNetworkAclEntry {\n                                                                                                                                                                                                                                        \n    export interface IcmpProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly code?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly type?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IcmpProperty`\n *\n * @param properties - the TypeScript properties of a `IcmpProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkAclEntry_IcmpPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('code', cdk.validateNumber)(properties.code));\n    errors.collect(cdk.propertyValidator('type', cdk.validateNumber)(properties.type));\n    return errors.wrap('supplied properties not correct for \"IcmpProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkAclEntry.Icmp` resource\n *\n * @param properties - the TypeScript properties of a `IcmpProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkAclEntry.Icmp` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkAclEntryIcmpPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkAclEntry_IcmpPropertyValidator(properties).assertSuccess();\n    return {\n        Code: cdk.numberToCloudFormation(properties.code),\n        Type: cdk.numberToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkAclEntryIcmpPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkAclEntry.IcmpProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkAclEntry.IcmpProperty>();\n    ret.addPropertyResult('code', 'Code', properties.Code != null ? cfn_parse.FromCloudFormation.getNumber(properties.Code) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getNumber(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkAclEntry {\n                                                                                                                                                                                                                                       \n    export interface PortRangeProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly from?: number;\n                                                                                                                                                                                                                                                                                                                       \n        readonly to?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PortRangeProperty`\n *\n * @param properties - the TypeScript properties of a `PortRangeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkAclEntry_PortRangePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('from', cdk.validateNumber)(properties.from));\n    errors.collect(cdk.propertyValidator('to', cdk.validateNumber)(properties.to));\n    return errors.wrap('supplied properties not correct for \"PortRangeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkAclEntry.PortRange` resource\n *\n * @param properties - the TypeScript properties of a `PortRangeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkAclEntry.PortRange` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkAclEntryPortRangePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkAclEntry_PortRangePropertyValidator(properties).assertSuccess();\n    return {\n        From: cdk.numberToCloudFormation(properties.from),\n        To: cdk.numberToCloudFormation(properties.to),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkAclEntryPortRangePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkAclEntry.PortRangeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkAclEntry.PortRangeProperty>();\n    ret.addPropertyResult('from', 'From', properties.From != null ? cfn_parse.FromCloudFormation.getNumber(properties.From) : undefined);\n    ret.addPropertyResult('to', 'To', properties.To != null ? cfn_parse.FromCloudFormation.getNumber(properties.To) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnNetworkInsightsAccessScopeProps {\n\n                                                                                                                                                                                                                               \n    readonly excludePaths?: Array<CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                           \n    readonly matchPaths?: Array<CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInsightsAccessScopeProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsAccessScopeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScopePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('excludePaths', cdk.listValidator(CfnNetworkInsightsAccessScope_AccessScopePathRequestPropertyValidator))(properties.excludePaths));\n    errors.collect(cdk.propertyValidator('matchPaths', cdk.listValidator(CfnNetworkInsightsAccessScope_AccessScopePathRequestPropertyValidator))(properties.matchPaths));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInsightsAccessScopeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsAccessScopeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScopePropsValidator(properties).assertSuccess();\n    return {\n        ExcludePaths: cdk.listMapper(cfnNetworkInsightsAccessScopeAccessScopePathRequestPropertyToCloudFormation)(properties.excludePaths),\n        MatchPaths: cdk.listMapper(cfnNetworkInsightsAccessScopeAccessScopePathRequestPropertyToCloudFormation)(properties.matchPaths),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScopeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScopeProps>();\n    ret.addPropertyResult('excludePaths', 'ExcludePaths', properties.ExcludePaths != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAccessScopeAccessScopePathRequestPropertyFromCloudFormation)(properties.ExcludePaths) : undefined);\n    ret.addPropertyResult('matchPaths', 'MatchPaths', properties.MatchPaths != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAccessScopeAccessScopePathRequestPropertyFromCloudFormation)(properties.MatchPaths) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                               \nexport class CfnNetworkInsightsAccessScope extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInsightsAccessScope\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInsightsAccessScope {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInsightsAccessScopePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInsightsAccessScope(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                     \n    public readonly attrCreatedDate: string;\n\n                                                                                                                         \n    public readonly attrNetworkInsightsAccessScopeArn: string;\n\n                                                                                                                       \n    public readonly attrNetworkInsightsAccessScopeId: string;\n\n                                                                                         \n    public readonly attrUpdatedDate: string;\n\n                                                                                                                                                                                                                               \n    public excludePaths: Array<CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    public matchPaths: Array<CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInsightsAccessScopeProps = {}) {\n        super(scope, id, { type: CfnNetworkInsightsAccessScope.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrCreatedDate = cdk.Token.asString(this.getAtt('CreatedDate'));\n        this.attrNetworkInsightsAccessScopeArn = cdk.Token.asString(this.getAtt('NetworkInsightsAccessScopeArn'));\n        this.attrNetworkInsightsAccessScopeId = cdk.Token.asString(this.getAtt('NetworkInsightsAccessScopeId'));\n        this.attrUpdatedDate = cdk.Token.asString(this.getAtt('UpdatedDate'));\n\n        this.excludePaths = props.excludePaths;\n        this.matchPaths = props.matchPaths;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NetworkInsightsAccessScope\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInsightsAccessScope.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            excludePaths: this.excludePaths,\n            matchPaths: this.matchPaths,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInsightsAccessScopePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNetworkInsightsAccessScope {\n                                                                                                                                                                                                                                                     \n    export interface AccessScopePathRequestProperty {\n                                                                                                                                                                                                                                                                                             \n        readonly destination?: CfnNetworkInsightsAccessScope.PathStatementRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                   \n        readonly source?: CfnNetworkInsightsAccessScope.PathStatementRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly throughResources?: Array<CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessScopePathRequestProperty`\n *\n * @param properties - the TypeScript properties of a `AccessScopePathRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScope_AccessScopePathRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', CfnNetworkInsightsAccessScope_PathStatementRequestPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('source', CfnNetworkInsightsAccessScope_PathStatementRequestPropertyValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('throughResources', cdk.listValidator(CfnNetworkInsightsAccessScope_ThroughResourcesStatementRequestPropertyValidator))(properties.throughResources));\n    return errors.wrap('supplied properties not correct for \"AccessScopePathRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.AccessScopePathRequest` resource\n *\n * @param properties - the TypeScript properties of a `AccessScopePathRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.AccessScopePathRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopeAccessScopePathRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScope_AccessScopePathRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnNetworkInsightsAccessScopePathStatementRequestPropertyToCloudFormation(properties.destination),\n        Source: cfnNetworkInsightsAccessScopePathStatementRequestPropertyToCloudFormation(properties.source),\n        ThroughResources: cdk.listMapper(cfnNetworkInsightsAccessScopeThroughResourcesStatementRequestPropertyToCloudFormation)(properties.throughResources),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopeAccessScopePathRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScope.AccessScopePathRequestProperty>();\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnNetworkInsightsAccessScopePathStatementRequestPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('source', 'Source', properties.Source != null ? CfnNetworkInsightsAccessScopePathStatementRequestPropertyFromCloudFormation(properties.Source) : undefined);\n    ret.addPropertyResult('throughResources', 'ThroughResources', properties.ThroughResources != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAccessScopeThroughResourcesStatementRequestPropertyFromCloudFormation)(properties.ThroughResources) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAccessScope {\n                                                                                                                                                                                                                                                                              \n    export interface PacketHeaderStatementRequestProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly destinationAddresses?: string[];\n                                                                                                                                                                                                                                                                                                                    \n        readonly destinationPorts?: string[];\n                                                                                                                                                                                                                                                                                                                                 \n        readonly destinationPrefixLists?: string[];\n                                                                                                                                                                                                                                                                                                     \n        readonly protocols?: string[];\n                                                                                                                                                                                                                                                                                                                  \n        readonly sourceAddresses?: string[];\n                                                                                                                                                                                                                                                                                                          \n        readonly sourcePorts?: string[];\n                                                                                                                                                                                                                                                                                                                       \n        readonly sourcePrefixLists?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PacketHeaderStatementRequestProperty`\n *\n * @param properties - the TypeScript properties of a `PacketHeaderStatementRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScope_PacketHeaderStatementRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationAddresses', cdk.listValidator(cdk.validateString))(properties.destinationAddresses));\n    errors.collect(cdk.propertyValidator('destinationPorts', cdk.listValidator(cdk.validateString))(properties.destinationPorts));\n    errors.collect(cdk.propertyValidator('destinationPrefixLists', cdk.listValidator(cdk.validateString))(properties.destinationPrefixLists));\n    errors.collect(cdk.propertyValidator('protocols', cdk.listValidator(cdk.validateString))(properties.protocols));\n    errors.collect(cdk.propertyValidator('sourceAddresses', cdk.listValidator(cdk.validateString))(properties.sourceAddresses));\n    errors.collect(cdk.propertyValidator('sourcePorts', cdk.listValidator(cdk.validateString))(properties.sourcePorts));\n    errors.collect(cdk.propertyValidator('sourcePrefixLists', cdk.listValidator(cdk.validateString))(properties.sourcePrefixLists));\n    return errors.wrap('supplied properties not correct for \"PacketHeaderStatementRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.PacketHeaderStatementRequest` resource\n *\n * @param properties - the TypeScript properties of a `PacketHeaderStatementRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.PacketHeaderStatementRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopePacketHeaderStatementRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScope_PacketHeaderStatementRequestPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationAddresses: cdk.listMapper(cdk.stringToCloudFormation)(properties.destinationAddresses),\n        DestinationPorts: cdk.listMapper(cdk.stringToCloudFormation)(properties.destinationPorts),\n        DestinationPrefixLists: cdk.listMapper(cdk.stringToCloudFormation)(properties.destinationPrefixLists),\n        Protocols: cdk.listMapper(cdk.stringToCloudFormation)(properties.protocols),\n        SourceAddresses: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceAddresses),\n        SourcePorts: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourcePorts),\n        SourcePrefixLists: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourcePrefixLists),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopePacketHeaderStatementRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty>();\n    ret.addPropertyResult('destinationAddresses', 'DestinationAddresses', properties.DestinationAddresses != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DestinationAddresses) : undefined);\n    ret.addPropertyResult('destinationPorts', 'DestinationPorts', properties.DestinationPorts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DestinationPorts) : undefined);\n    ret.addPropertyResult('destinationPrefixLists', 'DestinationPrefixLists', properties.DestinationPrefixLists != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DestinationPrefixLists) : undefined);\n    ret.addPropertyResult('protocols', 'Protocols', properties.Protocols != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Protocols) : undefined);\n    ret.addPropertyResult('sourceAddresses', 'SourceAddresses', properties.SourceAddresses != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourceAddresses) : undefined);\n    ret.addPropertyResult('sourcePorts', 'SourcePorts', properties.SourcePorts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourcePorts) : undefined);\n    ret.addPropertyResult('sourcePrefixLists', 'SourcePrefixLists', properties.SourcePrefixLists != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourcePrefixLists) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAccessScope {\n                                                                                                                                                                                                                                                             \n    export interface PathStatementRequestProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly packetHeaderStatement?: CfnNetworkInsightsAccessScope.PacketHeaderStatementRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly resourceStatement?: CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PathStatementRequestProperty`\n *\n * @param properties - the TypeScript properties of a `PathStatementRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScope_PathStatementRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('packetHeaderStatement', CfnNetworkInsightsAccessScope_PacketHeaderStatementRequestPropertyValidator)(properties.packetHeaderStatement));\n    errors.collect(cdk.propertyValidator('resourceStatement', CfnNetworkInsightsAccessScope_ResourceStatementRequestPropertyValidator)(properties.resourceStatement));\n    return errors.wrap('supplied properties not correct for \"PathStatementRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.PathStatementRequest` resource\n *\n * @param properties - the TypeScript properties of a `PathStatementRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.PathStatementRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopePathStatementRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScope_PathStatementRequestPropertyValidator(properties).assertSuccess();\n    return {\n        PacketHeaderStatement: cfnNetworkInsightsAccessScopePacketHeaderStatementRequestPropertyToCloudFormation(properties.packetHeaderStatement),\n        ResourceStatement: cfnNetworkInsightsAccessScopeResourceStatementRequestPropertyToCloudFormation(properties.resourceStatement),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopePathStatementRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScope.PathStatementRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScope.PathStatementRequestProperty>();\n    ret.addPropertyResult('packetHeaderStatement', 'PacketHeaderStatement', properties.PacketHeaderStatement != null ? CfnNetworkInsightsAccessScopePacketHeaderStatementRequestPropertyFromCloudFormation(properties.PacketHeaderStatement) : undefined);\n    ret.addPropertyResult('resourceStatement', 'ResourceStatement', properties.ResourceStatement != null ? CfnNetworkInsightsAccessScopeResourceStatementRequestPropertyFromCloudFormation(properties.ResourceStatement) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAccessScope {\n                                                                                                                                                                                                                                                                     \n    export interface ResourceStatementRequestProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly resourceTypes?: string[];\n                                                                                                                                                                                                                                                                                             \n        readonly resources?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceStatementRequestProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceStatementRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScope_ResourceStatementRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceTypes', cdk.listValidator(cdk.validateString))(properties.resourceTypes));\n    errors.collect(cdk.propertyValidator('resources', cdk.listValidator(cdk.validateString))(properties.resources));\n    return errors.wrap('supplied properties not correct for \"ResourceStatementRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.ResourceStatementRequest` resource\n *\n * @param properties - the TypeScript properties of a `ResourceStatementRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.ResourceStatementRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopeResourceStatementRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScope_ResourceStatementRequestPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceTypes),\n        Resources: cdk.listMapper(cdk.stringToCloudFormation)(properties.resources),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopeResourceStatementRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty>();\n    ret.addPropertyResult('resourceTypes', 'ResourceTypes', properties.ResourceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourceTypes) : undefined);\n    ret.addPropertyResult('resources', 'Resources', properties.Resources != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Resources) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAccessScope {\n                                                                                                                                                                                                                                                                                     \n    export interface ThroughResourcesStatementRequestProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly resourceStatement?: CfnNetworkInsightsAccessScope.ResourceStatementRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ThroughResourcesStatementRequestProperty`\n *\n * @param properties - the TypeScript properties of a `ThroughResourcesStatementRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScope_ThroughResourcesStatementRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceStatement', CfnNetworkInsightsAccessScope_ResourceStatementRequestPropertyValidator)(properties.resourceStatement));\n    return errors.wrap('supplied properties not correct for \"ThroughResourcesStatementRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.ThroughResourcesStatementRequest` resource\n *\n * @param properties - the TypeScript properties of a `ThroughResourcesStatementRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScope.ThroughResourcesStatementRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopeThroughResourcesStatementRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScope_ThroughResourcesStatementRequestPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceStatement: cfnNetworkInsightsAccessScopeResourceStatementRequestPropertyToCloudFormation(properties.resourceStatement),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopeThroughResourcesStatementRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScope.ThroughResourcesStatementRequestProperty>();\n    ret.addPropertyResult('resourceStatement', 'ResourceStatement', properties.ResourceStatement != null ? CfnNetworkInsightsAccessScopeResourceStatementRequestPropertyFromCloudFormation(properties.ResourceStatement) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                    \nexport interface CfnNetworkInsightsAccessScopeAnalysisProps {\n\n                                                                                                                                                                                                                                                                             \n    readonly networkInsightsAccessScopeId: string;\n\n                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInsightsAccessScopeAnalysisProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsAccessScopeAnalysisProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAccessScopeAnalysisPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('networkInsightsAccessScopeId', cdk.requiredValidator)(properties.networkInsightsAccessScopeId));\n    errors.collect(cdk.propertyValidator('networkInsightsAccessScopeId', cdk.validateString)(properties.networkInsightsAccessScopeId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInsightsAccessScopeAnalysisProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScopeAnalysis` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsAccessScopeAnalysisProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAccessScopeAnalysis` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAccessScopeAnalysisPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAccessScopeAnalysisPropsValidator(properties).assertSuccess();\n    return {\n        NetworkInsightsAccessScopeId: cdk.stringToCloudFormation(properties.networkInsightsAccessScopeId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAccessScopeAnalysisPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAccessScopeAnalysisProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAccessScopeAnalysisProps>();\n    ret.addPropertyResult('networkInsightsAccessScopeId', 'NetworkInsightsAccessScopeId', cfn_parse.FromCloudFormation.getString(properties.NetworkInsightsAccessScopeId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnNetworkInsightsAccessScopeAnalysis extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInsightsAccessScopeAnalysis\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInsightsAccessScopeAnalysis {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInsightsAccessScopeAnalysisPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInsightsAccessScopeAnalysis(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                  \n    public readonly attrAnalyzedEniCount: number;\n\n                                                                                            \n    public readonly attrEndDate: string;\n\n                                                                                                                                   \n    public readonly attrFindingsFound: string;\n\n                                                                                                                                          \n    public readonly attrNetworkInsightsAccessScopeAnalysisArn: string;\n\n                                                                                                                                        \n    public readonly attrNetworkInsightsAccessScopeAnalysisId: string;\n\n                                                                                                \n    public readonly attrStartDate: string;\n\n                                                                                                                        \n    public readonly attrStatus: string;\n\n                                                                                        \n    public readonly attrStatusMessage: string;\n\n                                                                                                                                                                                                                                                                             \n    public networkInsightsAccessScopeId: string;\n\n                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInsightsAccessScopeAnalysisProps) {\n        super(scope, id, { type: CfnNetworkInsightsAccessScopeAnalysis.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'networkInsightsAccessScopeId', this);\n        this.attrAnalyzedEniCount = cdk.Token.asNumber(this.getAtt('AnalyzedEniCount'));\n        this.attrEndDate = cdk.Token.asString(this.getAtt('EndDate'));\n        this.attrFindingsFound = cdk.Token.asString(this.getAtt('FindingsFound'));\n        this.attrNetworkInsightsAccessScopeAnalysisArn = cdk.Token.asString(this.getAtt('NetworkInsightsAccessScopeAnalysisArn'));\n        this.attrNetworkInsightsAccessScopeAnalysisId = cdk.Token.asString(this.getAtt('NetworkInsightsAccessScopeAnalysisId'));\n        this.attrStartDate = cdk.Token.asString(this.getAtt('StartDate'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrStatusMessage = cdk.Token.asString(this.getAtt('StatusMessage'));\n\n        this.networkInsightsAccessScopeId = props.networkInsightsAccessScopeId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NetworkInsightsAccessScopeAnalysis\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInsightsAccessScopeAnalysis.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            networkInsightsAccessScopeId: this.networkInsightsAccessScopeId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInsightsAccessScopeAnalysisPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                              \nexport interface CfnNetworkInsightsAnalysisProps {\n\n                                                                                                                                                                                                                                \n    readonly networkInsightsPathId: string;\n\n                                                                                                                                                                                                                                                                                 \n    readonly filterInArns?: string[];\n\n                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInsightsAnalysisProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsAnalysisProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysisPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('filterInArns', cdk.listValidator(cdk.validateString))(properties.filterInArns));\n    errors.collect(cdk.propertyValidator('networkInsightsPathId', cdk.requiredValidator)(properties.networkInsightsPathId));\n    errors.collect(cdk.propertyValidator('networkInsightsPathId', cdk.validateString)(properties.networkInsightsPathId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInsightsAnalysisProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsAnalysisProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysisPropsValidator(properties).assertSuccess();\n    return {\n        NetworkInsightsPathId: cdk.stringToCloudFormation(properties.networkInsightsPathId),\n        FilterInArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.filterInArns),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysisProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysisProps>();\n    ret.addPropertyResult('networkInsightsPathId', 'NetworkInsightsPathId', cfn_parse.FromCloudFormation.getString(properties.NetworkInsightsPathId));\n    ret.addPropertyResult('filterInArns', 'FilterInArns', properties.FilterInArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.FilterInArns) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                           \nexport class CfnNetworkInsightsAnalysis extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInsightsAnalysis\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInsightsAnalysis {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInsightsAnalysisPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInsightsAnalysis(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrAlternatePathHints: cdk.IResolvable;\n\n                                                                                                                                                                                                                                       \n    public readonly attrExplanations: cdk.IResolvable;\n\n                                                                                                                                   \n    public readonly attrForwardPathComponents: cdk.IResolvable;\n\n                                                                                                                                                  \n    public readonly attrNetworkInsightsAnalysisArn: string;\n\n                                                                                                                         \n    public readonly attrNetworkInsightsAnalysisId: string;\n\n                                                                                                                                       \n    public readonly attrNetworkPathFound: cdk.IResolvable;\n\n                                                                                                                                  \n    public readonly attrReturnPathComponents: cdk.IResolvable;\n\n                                                                                               \n    public readonly attrStartDate: string;\n\n                                                                                                          \n    public readonly attrStatus: string;\n\n                                                                                                                    \n    public readonly attrStatusMessage: string;\n\n                                                                                                                                                                                                                                \n    public networkInsightsPathId: string;\n\n                                                                                                                                                                                                                                                                                 \n    public filterInArns: string[] | undefined;\n\n                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInsightsAnalysisProps) {\n        super(scope, id, { type: CfnNetworkInsightsAnalysis.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'networkInsightsPathId', this);\n        this.attrAlternatePathHints = this.getAtt('AlternatePathHints');\n        this.attrExplanations = this.getAtt('Explanations');\n        this.attrForwardPathComponents = this.getAtt('ForwardPathComponents');\n        this.attrNetworkInsightsAnalysisArn = cdk.Token.asString(this.getAtt('NetworkInsightsAnalysisArn'));\n        this.attrNetworkInsightsAnalysisId = cdk.Token.asString(this.getAtt('NetworkInsightsAnalysisId'));\n        this.attrNetworkPathFound = this.getAtt('NetworkPathFound');\n        this.attrReturnPathComponents = this.getAtt('ReturnPathComponents');\n        this.attrStartDate = cdk.Token.asString(this.getAtt('StartDate'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrStatusMessage = cdk.Token.asString(this.getAtt('StatusMessage'));\n\n        this.networkInsightsPathId = props.networkInsightsPathId;\n        this.filterInArns = props.filterInArns;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NetworkInsightsAnalysis\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInsightsAnalysis.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            networkInsightsPathId: this.networkInsightsPathId,\n            filterInArns: this.filterInArns,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInsightsAnalysisPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                                             \n    export interface AlternatePathHintProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly componentArn?: string;\n                                                                                                                                                                                                                                                                                     \n        readonly componentId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AlternatePathHintProperty`\n *\n * @param properties - the TypeScript properties of a `AlternatePathHintProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AlternatePathHintPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('componentArn', cdk.validateString)(properties.componentArn));\n    errors.collect(cdk.propertyValidator('componentId', cdk.validateString)(properties.componentId));\n    return errors.wrap('supplied properties not correct for \"AlternatePathHintProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AlternatePathHint` resource\n *\n * @param properties - the TypeScript properties of a `AlternatePathHintProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AlternatePathHint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAlternatePathHintPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AlternatePathHintPropertyValidator(properties).assertSuccess();\n    return {\n        ComponentArn: cdk.stringToCloudFormation(properties.componentArn),\n        ComponentId: cdk.stringToCloudFormation(properties.componentId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAlternatePathHintPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AlternatePathHintProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AlternatePathHintProperty>();\n    ret.addPropertyResult('componentArn', 'ComponentArn', properties.ComponentArn != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentArn) : undefined);\n    ret.addPropertyResult('componentId', 'ComponentId', properties.ComponentId != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                        \n    export interface AnalysisAclRuleProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly cidr?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly egress?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly portRange?: CfnNetworkInsightsAnalysis.PortRangeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                   \n        readonly protocol?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly ruleAction?: string;\n                                                                                                                                                                                                                                                                        \n        readonly ruleNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisAclRuleProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisAclRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisAclRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    errors.collect(cdk.propertyValidator('egress', cdk.validateBoolean)(properties.egress));\n    errors.collect(cdk.propertyValidator('portRange', CfnNetworkInsightsAnalysis_PortRangePropertyValidator)(properties.portRange));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('ruleAction', cdk.validateString)(properties.ruleAction));\n    errors.collect(cdk.propertyValidator('ruleNumber', cdk.validateNumber)(properties.ruleNumber));\n    return errors.wrap('supplied properties not correct for \"AnalysisAclRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisAclRule` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisAclRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisAclRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisAclRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisAclRulePropertyValidator(properties).assertSuccess();\n    return {\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n        Egress: cdk.booleanToCloudFormation(properties.egress),\n        PortRange: cfnNetworkInsightsAnalysisPortRangePropertyToCloudFormation(properties.portRange),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        RuleAction: cdk.stringToCloudFormation(properties.ruleAction),\n        RuleNumber: cdk.numberToCloudFormation(properties.ruleNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisAclRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty>();\n    ret.addPropertyResult('cidr', 'Cidr', properties.Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.Cidr) : undefined);\n    ret.addPropertyResult('egress', 'Egress', properties.Egress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Egress) : undefined);\n    ret.addPropertyResult('portRange', 'PortRange', properties.PortRange != null ? CfnNetworkInsightsAnalysisPortRangePropertyFromCloudFormation(properties.PortRange) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('ruleAction', 'RuleAction', properties.RuleAction != null ? cfn_parse.FromCloudFormation.getString(properties.RuleAction) : undefined);\n    ret.addPropertyResult('ruleNumber', 'RuleNumber', properties.RuleNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.RuleNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                       \n    export interface AnalysisComponentProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly arn?: string;\n                                                                                                                                                                                                                                                                            \n        readonly id?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisComponentProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisComponentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    return errors.wrap('supplied properties not correct for \"AnalysisComponentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisComponent` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisComponentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisComponent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        Id: cdk.stringToCloudFormation(properties.id),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisComponentProperty>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                          \n    export interface AnalysisLoadBalancerListenerProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly instancePort?: number;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly loadBalancerPort?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisLoadBalancerListenerProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisLoadBalancerListenerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisLoadBalancerListenerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instancePort', cdk.validateNumber)(properties.instancePort));\n    errors.collect(cdk.propertyValidator('loadBalancerPort', cdk.validateNumber)(properties.loadBalancerPort));\n    return errors.wrap('supplied properties not correct for \"AnalysisLoadBalancerListenerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisLoadBalancerListener` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisLoadBalancerListenerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisLoadBalancerListener` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisLoadBalancerListenerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisLoadBalancerListenerPropertyValidator(properties).assertSuccess();\n    return {\n        InstancePort: cdk.numberToCloudFormation(properties.instancePort),\n        LoadBalancerPort: cdk.numberToCloudFormation(properties.loadBalancerPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisLoadBalancerListenerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty>();\n    ret.addPropertyResult('instancePort', 'InstancePort', properties.InstancePort != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstancePort) : undefined);\n    ret.addPropertyResult('loadBalancerPort', 'LoadBalancerPort', properties.LoadBalancerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoadBalancerPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                      \n    export interface AnalysisLoadBalancerTargetProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly address?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly instance?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly port?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisLoadBalancerTargetProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisLoadBalancerTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisLoadBalancerTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('address', cdk.validateString)(properties.address));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('instance', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.instance));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"AnalysisLoadBalancerTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisLoadBalancerTarget` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisLoadBalancerTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisLoadBalancerTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisLoadBalancerTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisLoadBalancerTargetPropertyValidator(properties).assertSuccess();\n    return {\n        Address: cdk.stringToCloudFormation(properties.address),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        Instance: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.instance),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisLoadBalancerTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty>();\n    ret.addPropertyResult('address', 'Address', properties.Address != null ? cfn_parse.FromCloudFormation.getString(properties.Address) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('instance', 'Instance', properties.Instance != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Instance) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface AnalysisPacketHeaderProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly destinationAddresses?: string[];\n                                                                                                                                                                                                                                                                                                         \n        readonly destinationPortRanges?: Array<CfnNetworkInsightsAnalysis.PortRangeProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                             \n        readonly protocol?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly sourceAddresses?: string[];\n                                                                                                                                                                                                                                                                                               \n        readonly sourcePortRanges?: Array<CfnNetworkInsightsAnalysis.PortRangeProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisPacketHeaderProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisPacketHeaderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisPacketHeaderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationAddresses', cdk.listValidator(cdk.validateString))(properties.destinationAddresses));\n    errors.collect(cdk.propertyValidator('destinationPortRanges', cdk.listValidator(CfnNetworkInsightsAnalysis_PortRangePropertyValidator))(properties.destinationPortRanges));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('sourceAddresses', cdk.listValidator(cdk.validateString))(properties.sourceAddresses));\n    errors.collect(cdk.propertyValidator('sourcePortRanges', cdk.listValidator(CfnNetworkInsightsAnalysis_PortRangePropertyValidator))(properties.sourcePortRanges));\n    return errors.wrap('supplied properties not correct for \"AnalysisPacketHeaderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisPacketHeader` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisPacketHeaderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisPacketHeader` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisPacketHeaderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisPacketHeaderPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationAddresses: cdk.listMapper(cdk.stringToCloudFormation)(properties.destinationAddresses),\n        DestinationPortRanges: cdk.listMapper(cfnNetworkInsightsAnalysisPortRangePropertyToCloudFormation)(properties.destinationPortRanges),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        SourceAddresses: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceAddresses),\n        SourcePortRanges: cdk.listMapper(cfnNetworkInsightsAnalysisPortRangePropertyToCloudFormation)(properties.sourcePortRanges),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisPacketHeaderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty>();\n    ret.addPropertyResult('destinationAddresses', 'DestinationAddresses', properties.DestinationAddresses != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DestinationAddresses) : undefined);\n    ret.addPropertyResult('destinationPortRanges', 'DestinationPortRanges', properties.DestinationPortRanges != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAnalysisPortRangePropertyFromCloudFormation)(properties.DestinationPortRanges) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('sourceAddresses', 'SourceAddresses', properties.SourceAddresses != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourceAddresses) : undefined);\n    ret.addPropertyResult('sourcePortRanges', 'SourcePortRanges', properties.SourcePortRanges != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAnalysisPortRangePropertyFromCloudFormation)(properties.SourcePortRanges) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                \n    export interface AnalysisRouteTableRouteProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly natGatewayId?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly networkInterfaceId?: string;\nn        readonly origin?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly transitGatewayId?: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly vpcPeeringConnectionId?: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly destinationCidr?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly destinationPrefixListId?: string;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly egressOnlyInternetGatewayId?: string;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly gatewayId?: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly instanceId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisRouteTableRouteProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisRouteTableRouteProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisRouteTableRoutePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('natGatewayId', cdk.validateString)(properties.natGatewayId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('origin', cdk.validateString)(properties.origin));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('vpcPeeringConnectionId', cdk.validateString)(properties.vpcPeeringConnectionId));\n    errors.collect(cdk.propertyValidator('destinationCidr', cdk.validateString)(properties.destinationCidr));\n    errors.collect(cdk.propertyValidator('destinationPrefixListId', cdk.validateString)(properties.destinationPrefixListId));\n    errors.collect(cdk.propertyValidator('egressOnlyInternetGatewayId', cdk.validateString)(properties.egressOnlyInternetGatewayId));\n    errors.collect(cdk.propertyValidator('gatewayId', cdk.validateString)(properties.gatewayId));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    return errors.wrap('supplied properties not correct for \"AnalysisRouteTableRouteProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisRouteTableRoute` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisRouteTableRouteProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisRouteTableRoute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisRouteTableRoutePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisRouteTableRoutePropertyValidator(properties).assertSuccess();\n    return {\n        NatGatewayId: cdk.stringToCloudFormation(properties.natGatewayId),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        Origin: cdk.stringToCloudFormation(properties.origin),\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        VpcPeeringConnectionId: cdk.stringToCloudFormation(properties.vpcPeeringConnectionId),\n        destinationCidr: cdk.stringToCloudFormation(properties.destinationCidr),\n        destinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),\n        egressOnlyInternetGatewayId: cdk.stringToCloudFormation(properties.egressOnlyInternetGatewayId),\n        gatewayId: cdk.stringToCloudFormation(properties.gatewayId),\n        instanceId: cdk.stringToCloudFormation(properties.instanceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisRouteTableRoutePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty>();\n    ret.addPropertyResult('natGatewayId', 'NatGatewayId', properties.NatGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.NatGatewayId) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('origin', 'Origin', properties.Origin != null ? cfn_parse.FromCloudFormation.getString(properties.Origin) : undefined);\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : undefined);\n    ret.addPropertyResult('vpcPeeringConnectionId', 'VpcPeeringConnectionId', properties.VpcPeeringConnectionId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcPeeringConnectionId) : undefined);\n    ret.addPropertyResult('destinationCidr', 'destinationCidr', properties.destinationCidr != null ? cfn_parse.FromCloudFormation.getString(properties.destinationCidr) : undefined);\n    ret.addPropertyResult('destinationPrefixListId', 'destinationPrefixListId', properties.destinationPrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.destinationPrefixListId) : undefined);\n    ret.addPropertyResult('egressOnlyInternetGatewayId', 'egressOnlyInternetGatewayId', properties.egressOnlyInternetGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.egressOnlyInternetGatewayId) : undefined);\n    ret.addPropertyResult('gatewayId', 'gatewayId', properties.gatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.gatewayId) : undefined);\n    ret.addPropertyResult('instanceId', 'instanceId', properties.instanceId != null ? cfn_parse.FromCloudFormation.getString(properties.instanceId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                    \n    export interface AnalysisSecurityGroupRuleProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly cidr?: string;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly direction?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly portRange?: CfnNetworkInsightsAnalysis.PortRangeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                 \n        readonly prefixListId?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly protocol?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly securityGroupId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisSecurityGroupRuleProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisSecurityGroupRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_AnalysisSecurityGroupRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    errors.collect(cdk.propertyValidator('direction', cdk.validateString)(properties.direction));\n    errors.collect(cdk.propertyValidator('portRange', CfnNetworkInsightsAnalysis_PortRangePropertyValidator)(properties.portRange));\n    errors.collect(cdk.propertyValidator('prefixListId', cdk.validateString)(properties.prefixListId));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('securityGroupId', cdk.validateString)(properties.securityGroupId));\n    return errors.wrap('supplied properties not correct for \"AnalysisSecurityGroupRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisSecurityGroupRule` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisSecurityGroupRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.AnalysisSecurityGroupRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisAnalysisSecurityGroupRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_AnalysisSecurityGroupRulePropertyValidator(properties).assertSuccess();\n    return {\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n        Direction: cdk.stringToCloudFormation(properties.direction),\n        PortRange: cfnNetworkInsightsAnalysisPortRangePropertyToCloudFormation(properties.portRange),\n        PrefixListId: cdk.stringToCloudFormation(properties.prefixListId),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        SecurityGroupId: cdk.stringToCloudFormation(properties.securityGroupId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisAnalysisSecurityGroupRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty>();\n    ret.addPropertyResult('cidr', 'Cidr', properties.Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.Cidr) : undefined);\n    ret.addPropertyResult('direction', 'Direction', properties.Direction != null ? cfn_parse.FromCloudFormation.getString(properties.Direction) : undefined);\n    ret.addPropertyResult('portRange', 'PortRange', properties.PortRange != null ? CfnNetworkInsightsAnalysisPortRangePropertyFromCloudFormation(properties.PortRange) : undefined);\n    ret.addPropertyResult('prefixListId', 'PrefixListId', properties.PrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.PrefixListId) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('securityGroupId', 'SecurityGroupId', properties.SecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityGroupId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface ExplanationProperty {\n                                                                                                                                                                                                                                                         \n        readonly acl?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly aclRule?: CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly address?: string;\n                                                                                                                                                                                                                                                                                    \n        readonly addresses?: string[];\n                                                                                                                                                                                                                                                                                                \n        readonly attachedTo?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly availabilityZones?: string[];\n                                                                                                                                                                                                                                                           \n        readonly cidrs?: string[];\n                                                                                                                                                                                                                                                                                                          \n        readonly classicLoadBalancerListener?: CfnNetworkInsightsAnalysis.AnalysisLoadBalancerListenerProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                             \n        readonly component?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly customerGateway?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                 \n        readonly destination?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                        \n        readonly destinationVpc?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly direction?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly elasticLoadBalancerListener?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly explanationCode?: string;\n                                                                                                                                                                                                                                                                       \n        readonly ingressRouteTable?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly internetGateway?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                         \n        readonly loadBalancerArn?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly loadBalancerListenerPort?: number;\n                                                                                                                                                                                                                                                                   \n        readonly loadBalancerTarget?: CfnNetworkInsightsAnalysis.AnalysisLoadBalancerTargetProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly loadBalancerTargetGroup?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly loadBalancerTargetGroups?: Array<CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly loadBalancerTargetPort?: number;\n                                                                                                                                                                                                                                                                            \n        readonly missingComponent?: string;\n                                                                                                                                                                                                                                                                \n        readonly natGateway?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly networkInterface?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly packetField?: string;\n                                                                                                                                                                                                                                                   \n        readonly port?: number;\n                                                                                                                                                                                                                                                                \n        readonly portRanges?: Array<CfnNetworkInsightsAnalysis.PortRangeProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly prefixList?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                             \n        readonly protocols?: string[];\n                                                                                                                                                                                                                                                                \n        readonly routeTable?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                           \n        readonly routeTableRoute?: CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                      \n        readonly securityGroup?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly securityGroupRule?: CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                        \n        readonly securityGroups?: Array<CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                              \n        readonly sourceVpc?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                     \n        readonly state?: string;\n                                                                                                                                                                                                                                                       \n        readonly subnet?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                     \n        readonly subnetRouteTable?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                           \n        readonly vpc?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                     \n        readonly vpcPeeringConnection?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                      \n        readonly vpnConnection?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly vpnGateway?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly vpcEndpoint?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExplanationProperty`\n *\n * @param properties - the TypeScript properties of a `ExplanationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_ExplanationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acl', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.acl));\n    errors.collect(cdk.propertyValidator('aclRule', CfnNetworkInsightsAnalysis_AnalysisAclRulePropertyValidator)(properties.aclRule));\n    errors.collect(cdk.propertyValidator('address', cdk.validateString)(properties.address));\n    errors.collect(cdk.propertyValidator('addresses', cdk.listValidator(cdk.validateString))(properties.addresses));\n    errors.collect(cdk.propertyValidator('attachedTo', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.attachedTo));\n    errors.collect(cdk.propertyValidator('availabilityZones', cdk.listValidator(cdk.validateString))(properties.availabilityZones));\n    errors.collect(cdk.propertyValidator('cidrs', cdk.listValidator(cdk.validateString))(properties.cidrs));\n    errors.collect(cdk.propertyValidator('classicLoadBalancerListener', CfnNetworkInsightsAnalysis_AnalysisLoadBalancerListenerPropertyValidator)(properties.classicLoadBalancerListener));\n    errors.collect(cdk.propertyValidator('component', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.component));\n    errors.collect(cdk.propertyValidator('customerGateway', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.customerGateway));\n    errors.collect(cdk.propertyValidator('destination', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destinationVpc', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.destinationVpc));\n    errors.collect(cdk.propertyValidator('direction', cdk.validateString)(properties.direction));\n    errors.collect(cdk.propertyValidator('elasticLoadBalancerListener', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.elasticLoadBalancerListener));\n    errors.collect(cdk.propertyValidator('explanationCode', cdk.validateString)(properties.explanationCode));\n    errors.collect(cdk.propertyValidator('ingressRouteTable', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.ingressRouteTable));\n    errors.collect(cdk.propertyValidator('internetGateway', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.internetGateway));\n    errors.collect(cdk.propertyValidator('loadBalancerArn', cdk.validateString)(properties.loadBalancerArn));\n    errors.collect(cdk.propertyValidator('loadBalancerListenerPort', cdk.validateNumber)(properties.loadBalancerListenerPort));\n    errors.collect(cdk.propertyValidator('loadBalancerTarget', CfnNetworkInsightsAnalysis_AnalysisLoadBalancerTargetPropertyValidator)(properties.loadBalancerTarget));\n    errors.collect(cdk.propertyValidator('loadBalancerTargetGroup', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.loadBalancerTargetGroup));\n    errors.collect(cdk.propertyValidator('loadBalancerTargetGroups', cdk.listValidator(CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator))(properties.loadBalancerTargetGroups));\n    errors.collect(cdk.propertyValidator('loadBalancerTargetPort', cdk.validateNumber)(properties.loadBalancerTargetPort));\n    errors.collect(cdk.propertyValidator('missingComponent', cdk.validateString)(properties.missingComponent));\n    errors.collect(cdk.propertyValidator('natGateway', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.natGateway));\n    errors.collect(cdk.propertyValidator('networkInterface', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.networkInterface));\n    errors.collect(cdk.propertyValidator('packetField', cdk.validateString)(properties.packetField));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('portRanges', cdk.listValidator(CfnNetworkInsightsAnalysis_PortRangePropertyValidator))(properties.portRanges));\n    errors.collect(cdk.propertyValidator('prefixList', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.prefixList));\n    errors.collect(cdk.propertyValidator('protocols', cdk.listValidator(cdk.validateString))(properties.protocols));\n    errors.collect(cdk.propertyValidator('routeTable', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.routeTable));\n    errors.collect(cdk.propertyValidator('routeTableRoute', CfnNetworkInsightsAnalysis_AnalysisRouteTableRoutePropertyValidator)(properties.routeTableRoute));\n    errors.collect(cdk.propertyValidator('securityGroup', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.securityGroup));\n    errors.collect(cdk.propertyValidator('securityGroupRule', CfnNetworkInsightsAnalysis_AnalysisSecurityGroupRulePropertyValidator)(properties.securityGroupRule));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('sourceVpc', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.sourceVpc));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    errors.collect(cdk.propertyValidator('subnet', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.subnet));\n    errors.collect(cdk.propertyValidator('subnetRouteTable', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.subnetRouteTable));\n    errors.collect(cdk.propertyValidator('vpc', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.vpc));\n    errors.collect(cdk.propertyValidator('vpcPeeringConnection', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.vpcPeeringConnection));\n    errors.collect(cdk.propertyValidator('vpnConnection', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.vpnConnection));\n    errors.collect(cdk.propertyValidator('vpnGateway', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.vpnGateway));\n    errors.collect(cdk.propertyValidator('vpcEndpoint', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.vpcEndpoint));\n    return errors.wrap('supplied properties not correct for \"ExplanationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.Explanation` resource\n *\n * @param properties - the TypeScript properties of a `ExplanationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.Explanation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisExplanationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_ExplanationPropertyValidator(properties).assertSuccess();\n    return {\n        Acl: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.acl),\n        AclRule: cfnNetworkInsightsAnalysisAnalysisAclRulePropertyToCloudFormation(properties.aclRule),\n        Address: cdk.stringToCloudFormation(properties.address),\n        Addresses: cdk.listMapper(cdk.stringToCloudFormation)(properties.addresses),\n        AttachedTo: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.attachedTo),\n        AvailabilityZones: cdk.listMapper(cdk.stringToCloudFormation)(properties.availabilityZones),\n        Cidrs: cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrs),\n        ClassicLoadBalancerListener: cfnNetworkInsightsAnalysisAnalysisLoadBalancerListenerPropertyToCloudFormation(properties.classicLoadBalancerListener),\n        Component: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.component),\n        CustomerGateway: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.customerGateway),\n        Destination: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.destination),\n        DestinationVpc: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.destinationVpc),\n        Direction: cdk.stringToCloudFormation(properties.direction),\n        ElasticLoadBalancerListener: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.elasticLoadBalancerListener),\n        ExplanationCode: cdk.stringToCloudFormation(properties.explanationCode),\n        IngressRouteTable: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.ingressRouteTable),\n        InternetGateway: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.internetGateway),\n        LoadBalancerArn: cdk.stringToCloudFormation(properties.loadBalancerArn),\n        LoadBalancerListenerPort: cdk.numberToCloudFormation(properties.loadBalancerListenerPort),\n        LoadBalancerTarget: cfnNetworkInsightsAnalysisAnalysisLoadBalancerTargetPropertyToCloudFormation(properties.loadBalancerTarget),\n        LoadBalancerTargetGroup: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.loadBalancerTargetGroup),\n        LoadBalancerTargetGroups: cdk.listMapper(cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation)(properties.loadBalancerTargetGroups),\n        LoadBalancerTargetPort: cdk.numberToCloudFormation(properties.loadBalancerTargetPort),\n        MissingComponent: cdk.stringToCloudFormation(properties.missingComponent),\n        NatGateway: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.natGateway),\n        NetworkInterface: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.networkInterface),\n        PacketField: cdk.stringToCloudFormation(properties.packetField),\n        Port: cdk.numberToCloudFormation(properties.port),\n        PortRanges: cdk.listMapper(cfnNetworkInsightsAnalysisPortRangePropertyToCloudFormation)(properties.portRanges),\n        PrefixList: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.prefixList),\n        Protocols: cdk.listMapper(cdk.stringToCloudFormation)(properties.protocols),\n        RouteTable: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.routeTable),\n        RouteTableRoute: cfnNetworkInsightsAnalysisAnalysisRouteTableRoutePropertyToCloudFormation(properties.routeTableRoute),\n        SecurityGroup: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.securityGroup),\n        SecurityGroupRule: cfnNetworkInsightsAnalysisAnalysisSecurityGroupRulePropertyToCloudFormation(properties.securityGroupRule),\n        SecurityGroups: cdk.listMapper(cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation)(properties.securityGroups),\n        SourceVpc: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.sourceVpc),\n        State: cdk.stringToCloudFormation(properties.state),\n        Subnet: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.subnet),\n        SubnetRouteTable: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.subnetRouteTable),\n        Vpc: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.vpc),\n        VpcPeeringConnection: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.vpcPeeringConnection),\n        VpnConnection: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.vpnConnection),\n        VpnGateway: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.vpnGateway),\n        vpcEndpoint: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.vpcEndpoint),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisExplanationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.ExplanationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.ExplanationProperty>();\n    ret.addPropertyResult('acl', 'Acl', properties.Acl != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Acl) : undefined);\n    ret.addPropertyResult('aclRule', 'AclRule', properties.AclRule != null ? CfnNetworkInsightsAnalysisAnalysisAclRulePropertyFromCloudFormation(properties.AclRule) : undefined);\n    ret.addPropertyResult('address', 'Address', properties.Address != null ? cfn_parse.FromCloudFormation.getString(properties.Address) : undefined);\n    ret.addPropertyResult('addresses', 'Addresses', properties.Addresses != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Addresses) : undefined);\n    ret.addPropertyResult('attachedTo', 'AttachedTo', properties.AttachedTo != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.AttachedTo) : undefined);\n    ret.addPropertyResult('availabilityZones', 'AvailabilityZones', properties.AvailabilityZones != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AvailabilityZones) : undefined);\n    ret.addPropertyResult('cidrs', 'Cidrs', properties.Cidrs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Cidrs) : undefined);\n    ret.addPropertyResult('classicLoadBalancerListener', 'ClassicLoadBalancerListener', properties.ClassicLoadBalancerListener != null ? CfnNetworkInsightsAnalysisAnalysisLoadBalancerListenerPropertyFromCloudFormation(properties.ClassicLoadBalancerListener) : undefined);\n    ret.addPropertyResult('component', 'Component', properties.Component != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Component) : undefined);\n    ret.addPropertyResult('customerGateway', 'CustomerGateway', properties.CustomerGateway != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.CustomerGateway) : undefined);\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('destinationVpc', 'DestinationVpc', properties.DestinationVpc != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.DestinationVpc) : undefined);\n    ret.addPropertyResult('direction', 'Direction', properties.Direction != null ? cfn_parse.FromCloudFormation.getString(properties.Direction) : undefined);\n    ret.addPropertyResult('elasticLoadBalancerListener', 'ElasticLoadBalancerListener', properties.ElasticLoadBalancerListener != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.ElasticLoadBalancerListener) : undefined);\n    ret.addPropertyResult('explanationCode', 'ExplanationCode', properties.ExplanationCode != null ? cfn_parse.FromCloudFormation.getString(properties.ExplanationCode) : undefined);\n    ret.addPropertyResult('ingressRouteTable', 'IngressRouteTable', properties.IngressRouteTable != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.IngressRouteTable) : undefined);\n    ret.addPropertyResult('internetGateway', 'InternetGateway', properties.InternetGateway != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.InternetGateway) : undefined);\n    ret.addPropertyResult('loadBalancerArn', 'LoadBalancerArn', properties.LoadBalancerArn != null ? cfn_parse.FromCloudFormation.getString(properties.LoadBalancerArn) : undefined);\n    ret.addPropertyResult('loadBalancerListenerPort', 'LoadBalancerListenerPort', properties.LoadBalancerListenerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoadBalancerListenerPort) : undefined);\n    ret.addPropertyResult('loadBalancerTarget', 'LoadBalancerTarget', properties.LoadBalancerTarget != null ? CfnNetworkInsightsAnalysisAnalysisLoadBalancerTargetPropertyFromCloudFormation(properties.LoadBalancerTarget) : undefined);\n    ret.addPropertyResult('loadBalancerTargetGroup', 'LoadBalancerTargetGroup', properties.LoadBalancerTargetGroup != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.LoadBalancerTargetGroup) : undefined);\n    ret.addPropertyResult('loadBalancerTargetGroups', 'LoadBalancerTargetGroups', properties.LoadBalancerTargetGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation)(properties.LoadBalancerTargetGroups) : undefined);\n    ret.addPropertyResult('loadBalancerTargetPort', 'LoadBalancerTargetPort', properties.LoadBalancerTargetPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoadBalancerTargetPort) : undefined);\n    ret.addPropertyResult('missingComponent', 'MissingComponent', properties.MissingComponent != null ? cfn_parse.FromCloudFormation.getString(properties.MissingComponent) : undefined);\n    ret.addPropertyResult('natGateway', 'NatGateway', properties.NatGateway != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.NatGateway) : undefined);\n    ret.addPropertyResult('networkInterface', 'NetworkInterface', properties.NetworkInterface != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.NetworkInterface) : undefined);\n    ret.addPropertyResult('packetField', 'PacketField', properties.PacketField != null ? cfn_parse.FromCloudFormation.getString(properties.PacketField) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('portRanges', 'PortRanges', properties.PortRanges != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAnalysisPortRangePropertyFromCloudFormation)(properties.PortRanges) : undefined);\n    ret.addPropertyResult('prefixList', 'PrefixList', properties.PrefixList != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.PrefixList) : undefined);\n    ret.addPropertyResult('protocols', 'Protocols', properties.Protocols != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Protocols) : undefined);\n    ret.addPropertyResult('routeTable', 'RouteTable', properties.RouteTable != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.RouteTable) : undefined);\n    ret.addPropertyResult('routeTableRoute', 'RouteTableRoute', properties.RouteTableRoute != null ? CfnNetworkInsightsAnalysisAnalysisRouteTableRoutePropertyFromCloudFormation(properties.RouteTableRoute) : undefined);\n    ret.addPropertyResult('securityGroup', 'SecurityGroup', properties.SecurityGroup != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.SecurityGroup) : undefined);\n    ret.addPropertyResult('securityGroupRule', 'SecurityGroupRule', properties.SecurityGroupRule != null ? CfnNetworkInsightsAnalysisAnalysisSecurityGroupRulePropertyFromCloudFormation(properties.SecurityGroupRule) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation)(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('sourceVpc', 'SourceVpc', properties.SourceVpc != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.SourceVpc) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addPropertyResult('subnet', 'Subnet', properties.Subnet != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Subnet) : undefined);\n    ret.addPropertyResult('subnetRouteTable', 'SubnetRouteTable', properties.SubnetRouteTable != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.SubnetRouteTable) : undefined);\n    ret.addPropertyResult('vpc', 'Vpc', properties.Vpc != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Vpc) : undefined);\n    ret.addPropertyResult('vpcPeeringConnection', 'VpcPeeringConnection', properties.VpcPeeringConnection != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.VpcPeeringConnection) : undefined);\n    ret.addPropertyResult('vpnConnection', 'VpnConnection', properties.VpnConnection != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.VpnConnection) : undefined);\n    ret.addPropertyResult('vpnGateway', 'VpnGateway', properties.VpnGateway != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.VpnGateway) : undefined);\n    ret.addPropertyResult('vpcEndpoint', 'vpcEndpoint', properties.vpcEndpoint != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.vpcEndpoint) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                                   \n    export interface PathComponentProperty {\n                                                                                                                                                                                                                                                                      \n        readonly aclRule?: CfnNetworkInsightsAnalysis.AnalysisAclRuleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                 \n        readonly component?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly destinationVpc?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly inboundHeader?: CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly outboundHeader?: CfnNetworkInsightsAnalysis.AnalysisPacketHeaderProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly routeTableRoute?: CfnNetworkInsightsAnalysis.AnalysisRouteTableRouteProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                   \n        readonly securityGroupRule?: CfnNetworkInsightsAnalysis.AnalysisSecurityGroupRuleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly sequenceNumber?: number;\n                                                                                                                                                                                                                                                                  \n        readonly sourceVpc?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                           \n        readonly subnet?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                               \n        readonly vpc?: CfnNetworkInsightsAnalysis.AnalysisComponentProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PathComponentProperty`\n *\n * @param properties - the TypeScript properties of a `PathComponentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_PathComponentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aclRule', CfnNetworkInsightsAnalysis_AnalysisAclRulePropertyValidator)(properties.aclRule));\n    errors.collect(cdk.propertyValidator('component', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.component));\n    errors.collect(cdk.propertyValidator('destinationVpc', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.destinationVpc));\n    errors.collect(cdk.propertyValidator('inboundHeader', CfnNetworkInsightsAnalysis_AnalysisPacketHeaderPropertyValidator)(properties.inboundHeader));\n    errors.collect(cdk.propertyValidator('outboundHeader', CfnNetworkInsightsAnalysis_AnalysisPacketHeaderPropertyValidator)(properties.outboundHeader));\n    errors.collect(cdk.propertyValidator('routeTableRoute', CfnNetworkInsightsAnalysis_AnalysisRouteTableRoutePropertyValidator)(properties.routeTableRoute));\n    errors.collect(cdk.propertyValidator('securityGroupRule', CfnNetworkInsightsAnalysis_AnalysisSecurityGroupRulePropertyValidator)(properties.securityGroupRule));\n    errors.collect(cdk.propertyValidator('sequenceNumber', cdk.validateNumber)(properties.sequenceNumber));\n    errors.collect(cdk.propertyValidator('sourceVpc', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.sourceVpc));\n    errors.collect(cdk.propertyValidator('subnet', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.subnet));\n    errors.collect(cdk.propertyValidator('vpc', CfnNetworkInsightsAnalysis_AnalysisComponentPropertyValidator)(properties.vpc));\n    return errors.wrap('supplied properties not correct for \"PathComponentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.PathComponent` resource\n *\n * @param properties - the TypeScript properties of a `PathComponentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.PathComponent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisPathComponentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_PathComponentPropertyValidator(properties).assertSuccess();\n    return {\n        AclRule: cfnNetworkInsightsAnalysisAnalysisAclRulePropertyToCloudFormation(properties.aclRule),\n        Component: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.component),\n        DestinationVpc: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.destinationVpc),\n        InboundHeader: cfnNetworkInsightsAnalysisAnalysisPacketHeaderPropertyToCloudFormation(properties.inboundHeader),\n        OutboundHeader: cfnNetworkInsightsAnalysisAnalysisPacketHeaderPropertyToCloudFormation(properties.outboundHeader),\n        RouteTableRoute: cfnNetworkInsightsAnalysisAnalysisRouteTableRoutePropertyToCloudFormation(properties.routeTableRoute),\n        SecurityGroupRule: cfnNetworkInsightsAnalysisAnalysisSecurityGroupRulePropertyToCloudFormation(properties.securityGroupRule),\n        SequenceNumber: cdk.numberToCloudFormation(properties.sequenceNumber),\n        SourceVpc: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.sourceVpc),\n        Subnet: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.subnet),\n        Vpc: cfnNetworkInsightsAnalysisAnalysisComponentPropertyToCloudFormation(properties.vpc),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisPathComponentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.PathComponentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.PathComponentProperty>();\n    ret.addPropertyResult('aclRule', 'AclRule', properties.AclRule != null ? CfnNetworkInsightsAnalysisAnalysisAclRulePropertyFromCloudFormation(properties.AclRule) : undefined);\n    ret.addPropertyResult('component', 'Component', properties.Component != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Component) : undefined);\n    ret.addPropertyResult('destinationVpc', 'DestinationVpc', properties.DestinationVpc != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.DestinationVpc) : undefined);\n    ret.addPropertyResult('inboundHeader', 'InboundHeader', properties.InboundHeader != null ? CfnNetworkInsightsAnalysisAnalysisPacketHeaderPropertyFromCloudFormation(properties.InboundHeader) : undefined);\n    ret.addPropertyResult('outboundHeader', 'OutboundHeader', properties.OutboundHeader != null ? CfnNetworkInsightsAnalysisAnalysisPacketHeaderPropertyFromCloudFormation(properties.OutboundHeader) : undefined);\n    ret.addPropertyResult('routeTableRoute', 'RouteTableRoute', properties.RouteTableRoute != null ? CfnNetworkInsightsAnalysisAnalysisRouteTableRoutePropertyFromCloudFormation(properties.RouteTableRoute) : undefined);\n    ret.addPropertyResult('securityGroupRule', 'SecurityGroupRule', properties.SecurityGroupRule != null ? CfnNetworkInsightsAnalysisAnalysisSecurityGroupRulePropertyFromCloudFormation(properties.SecurityGroupRule) : undefined);\n    ret.addPropertyResult('sequenceNumber', 'SequenceNumber', properties.SequenceNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.SequenceNumber) : undefined);\n    ret.addPropertyResult('sourceVpc', 'SourceVpc', properties.SourceVpc != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.SourceVpc) : undefined);\n    ret.addPropertyResult('subnet', 'Subnet', properties.Subnet != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Subnet) : undefined);\n    ret.addPropertyResult('vpc', 'Vpc', properties.Vpc != null ? CfnNetworkInsightsAnalysisAnalysisComponentPropertyFromCloudFormation(properties.Vpc) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInsightsAnalysis {\n                                                                                                                                                                                                                                               \n    export interface PortRangeProperty {\n                                                                                                                                                                                                                                                                  \n        readonly from?: number;\n                                                                                                                                                                                                                                                               \n        readonly to?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PortRangeProperty`\n *\n * @param properties - the TypeScript properties of a `PortRangeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsAnalysis_PortRangePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('from', cdk.validateNumber)(properties.from));\n    errors.collect(cdk.propertyValidator('to', cdk.validateNumber)(properties.to));\n    return errors.wrap('supplied properties not correct for \"PortRangeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.PortRange` resource\n *\n * @param properties - the TypeScript properties of a `PortRangeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsAnalysis.PortRange` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsAnalysisPortRangePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsAnalysis_PortRangePropertyValidator(properties).assertSuccess();\n    return {\n        From: cdk.numberToCloudFormation(properties.from),\n        To: cdk.numberToCloudFormation(properties.to),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsAnalysisPortRangePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsAnalysis.PortRangeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsAnalysis.PortRangeProperty>();\n    ret.addPropertyResult('from', 'From', properties.From != null ? cfn_parse.FromCloudFormation.getNumber(properties.From) : undefined);\n    ret.addPropertyResult('to', 'To', properties.To != null ? cfn_parse.FromCloudFormation.getNumber(properties.To) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnNetworkInsightsPathProps {\n\n                                                                                                                                                                                                                                                \n    readonly destination: string;\n\n                                                                                                                                                                                                     \n    readonly protocol: string;\n\n                                                                                                                                                                                                                                      \n    readonly source: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly destinationIp?: string;\n\n                                                                                                                                                                                                                    \n    readonly destinationPort?: number;\n\n                                                                                                                                                                                                                                                          \n    readonly sourceIp?: string;\n\n                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInsightsPathProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsPathProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInsightsPathPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', cdk.validateString)(properties.destination));\n    errors.collect(cdk.propertyValidator('destinationIp', cdk.validateString)(properties.destinationIp));\n    errors.collect(cdk.propertyValidator('destinationPort', cdk.validateNumber)(properties.destinationPort));\n    errors.collect(cdk.propertyValidator('protocol', cdk.requiredValidator)(properties.protocol));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));\n    errors.collect(cdk.propertyValidator('sourceIp', cdk.validateString)(properties.sourceIp));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInsightsPathProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsPath` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInsightsPathProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInsightsPath` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInsightsPathPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInsightsPathPropsValidator(properties).assertSuccess();\n    return {\n        Destination: cdk.stringToCloudFormation(properties.destination),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        Source: cdk.stringToCloudFormation(properties.source),\n        DestinationIp: cdk.stringToCloudFormation(properties.destinationIp),\n        DestinationPort: cdk.numberToCloudFormation(properties.destinationPort),\n        SourceIp: cdk.stringToCloudFormation(properties.sourceIp),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInsightsPathPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInsightsPathProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInsightsPathProps>();\n    ret.addPropertyResult('destination', 'Destination', cfn_parse.FromCloudFormation.getString(properties.Destination));\n    ret.addPropertyResult('protocol', 'Protocol', cfn_parse.FromCloudFormation.getString(properties.Protocol));\n    ret.addPropertyResult('source', 'Source', cfn_parse.FromCloudFormation.getString(properties.Source));\n    ret.addPropertyResult('destinationIp', 'DestinationIp', properties.DestinationIp != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationIp) : undefined);\n    ret.addPropertyResult('destinationPort', 'DestinationPort', properties.DestinationPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.DestinationPort) : undefined);\n    ret.addPropertyResult('sourceIp', 'SourceIp', properties.SourceIp != null ? cfn_parse.FromCloudFormation.getString(properties.SourceIp) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNetworkInsightsPath extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInsightsPath\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInsightsPath {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInsightsPathPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInsightsPath(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrCreatedDate: string;\n\n                                                                                                                         \n    public readonly attrNetworkInsightsPathArn: string;\n\n                                                                                                \n    public readonly attrNetworkInsightsPathId: string;\n\n                                                                                                                                                                                                                                                \n    public destination: string;\n\n                                                                                                                                                                                                     \n    public protocol: string;\n\n                                                                                                                                                                                                                                      \n    public source: string;\n\n                                                                                                                                                                                                                                                                    \n    public destinationIp: string | undefined;\n\n                                                                                                                                                                                                                    \n    public destinationPort: number | undefined;\n\n                                                                                                                                                                                                                                                          \n    public sourceIp: string | undefined;\n\n                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInsightsPathProps) {\n        super(scope, id, { type: CfnNetworkInsightsPath.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'destination', this);\n        cdk.requireProperty(props, 'protocol', this);\n        cdk.requireProperty(props, 'source', this);\n        this.attrCreatedDate = cdk.Token.asString(this.getAtt('CreatedDate'));\n        this.attrNetworkInsightsPathArn = cdk.Token.asString(this.getAtt('NetworkInsightsPathArn'));\n        this.attrNetworkInsightsPathId = cdk.Token.asString(this.getAtt('NetworkInsightsPathId'));\n\n        this.destination = props.destination;\n        this.protocol = props.protocol;\n        this.source = props.source;\n        this.destinationIp = props.destinationIp;\n        this.destinationPort = props.destinationPort;\n        this.sourceIp = props.sourceIp;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NetworkInsightsPath\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInsightsPath.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destination: this.destination,\n            protocol: this.protocol,\n            source: this.source,\n            destinationIp: this.destinationIp,\n            destinationPort: this.destinationPort,\n            sourceIp: this.sourceIp,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInsightsPathPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                \nexport interface CfnNetworkInterfaceProps {\n\n                                                                                                                                                                                                                                               \n    readonly subnetId: string;\n\n                                                                                                                                                                                                                             \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                \n    readonly groupSet?: string[];\n\nn    readonly interfaceType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly ipv6AddressCount?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly ipv6Addresses?: Array<CfnNetworkInterface.InstanceIpv6AddressProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly privateIpAddress?: string;\n\nn    readonly privateIpAddresses?: Array<CfnNetworkInterface.PrivateIpAddressSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly secondaryPrivateIpAddressCount?: number;\n\nn    readonly sourceDestCheck?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInterfaceProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInterfaceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInterfacePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('groupSet', cdk.listValidator(cdk.validateString))(properties.groupSet));\n    errors.collect(cdk.propertyValidator('interfaceType', cdk.validateString)(properties.interfaceType));\n    errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));\n    errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(CfnNetworkInterface_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(CfnNetworkInterface_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));\n    errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));\n    errors.collect(cdk.propertyValidator('sourceDestCheck', cdk.validateBoolean)(properties.sourceDestCheck));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInterfaceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInterface` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInterfaceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInterface` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInterfacePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInterfacePropsValidator(properties).assertSuccess();\n    return {\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        GroupSet: cdk.listMapper(cdk.stringToCloudFormation)(properties.groupSet),\n        InterfaceType: cdk.stringToCloudFormation(properties.interfaceType),\n        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),\n        Ipv6Addresses: cdk.listMapper(cfnNetworkInterfaceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n        PrivateIpAddresses: cdk.listMapper(cfnNetworkInterfacePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),\n        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),\n        SourceDestCheck: cdk.booleanToCloudFormation(properties.sourceDestCheck),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInterfacePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInterfaceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInterfaceProps>();\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('groupSet', 'GroupSet', properties.GroupSet != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GroupSet) : undefined);\n    ret.addPropertyResult('interfaceType', 'InterfaceType', properties.InterfaceType != null ? cfn_parse.FromCloudFormation.getString(properties.InterfaceType) : undefined);\n    ret.addPropertyResult('ipv6AddressCount', 'Ipv6AddressCount', properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : undefined);\n    ret.addPropertyResult('ipv6Addresses', 'Ipv6Addresses', properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInterfaceInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : undefined);\n    ret.addPropertyResult('privateIpAddresses', 'PrivateIpAddresses', properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInterfacePrivateIpAddressSpecificationPropertyFromCloudFormation)(properties.PrivateIpAddresses) : undefined);\n    ret.addPropertyResult('secondaryPrivateIpAddressCount', 'SecondaryPrivateIpAddressCount', properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : undefined);\n    ret.addPropertyResult('sourceDestCheck', 'SourceDestCheck', properties.SourceDestCheck != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SourceDestCheck) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                \nexport class CfnNetworkInterface extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInterface\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInterface {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInterfacePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInterface(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                          \n    public readonly attrId: string;\n\n                                                                                                                                                                   \n    public readonly attrPrimaryPrivateIpAddress: string;\n\n                                                                                                                                                                                                           \n    public readonly attrSecondaryPrivateIpAddresses: string[];\n\n                                                                                                                                                                                                                                               \n    public subnetId: string;\n\n                                                                                                                                                                                                                             \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public groupSet: string[] | undefined;\n\nn    public interfaceType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public ipv6AddressCount: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public ipv6Addresses: Array<CfnNetworkInterface.InstanceIpv6AddressProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    public privateIpAddress: string | undefined;\n\nn    public privateIpAddresses: Array<CfnNetworkInterface.PrivateIpAddressSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public secondaryPrivateIpAddressCount: number | undefined;\n\nn    public sourceDestCheck: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInterfaceProps) {\n        super(scope, id, { type: CfnNetworkInterface.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'subnetId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrPrimaryPrivateIpAddress = cdk.Token.asString(this.getAtt('PrimaryPrivateIpAddress'));\n        this.attrSecondaryPrivateIpAddresses = cdk.Token.asList(this.getAtt('SecondaryPrivateIpAddresses'));\n\n        this.subnetId = props.subnetId;\n        this.description = props.description;\n        this.groupSet = props.groupSet;\n        this.interfaceType = props.interfaceType;\n        this.ipv6AddressCount = props.ipv6AddressCount;\n        this.ipv6Addresses = props.ipv6Addresses;\n        this.privateIpAddress = props.privateIpAddress;\n        this.privateIpAddresses = props.privateIpAddresses;\n        this.secondaryPrivateIpAddressCount = props.secondaryPrivateIpAddressCount;\n        this.sourceDestCheck = props.sourceDestCheck;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::NetworkInterface\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInterface.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            subnetId: this.subnetId,\n            description: this.description,\n            groupSet: this.groupSet,\n            interfaceType: this.interfaceType,\n            ipv6AddressCount: this.ipv6AddressCount,\n            ipv6Addresses: this.ipv6Addresses,\n            privateIpAddress: this.privateIpAddress,\n            privateIpAddresses: this.privateIpAddresses,\n            secondaryPrivateIpAddressCount: this.secondaryPrivateIpAddressCount,\n            sourceDestCheck: this.sourceDestCheck,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInterfacePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNetworkInterface {\n                                                                                                                                                                                                                                                                                            \n    export interface InstanceIpv6AddressProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly ipv6Address: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceIpv6AddressProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceIpv6AddressProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInterface_InstanceIpv6AddressPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.requiredValidator)(properties.ipv6Address));\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));\n    return errors.wrap('supplied properties not correct for \"InstanceIpv6AddressProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInterface.InstanceIpv6Address` resource\n *\n * @param properties - the TypeScript properties of a `InstanceIpv6AddressProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInterface.InstanceIpv6Address` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInterfaceInstanceIpv6AddressPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInterface_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();\n    return {\n        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInterfaceInstanceIpv6AddressPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInterface.InstanceIpv6AddressProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInterface.InstanceIpv6AddressProperty>();\n    ret.addPropertyResult('ipv6Address', 'Ipv6Address', cfn_parse.FromCloudFormation.getString(properties.Ipv6Address));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNetworkInterface {\n                                                                                                                                                                                                                                                                                                    \n    export interface PrivateIpAddressSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly primary: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                            \n        readonly privateIpAddress: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrivateIpAddressSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddressSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInterface_PrivateIpAddressSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('primary', cdk.requiredValidator)(properties.primary));\n    errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.requiredValidator)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    return errors.wrap('supplied properties not correct for \"PrivateIpAddressSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInterface.PrivateIpAddressSpecification` resource\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddressSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInterface.PrivateIpAddressSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInterfacePrivateIpAddressSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInterface_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Primary: cdk.booleanToCloudFormation(properties.primary),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInterfacePrivateIpAddressSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInterface.PrivateIpAddressSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInterface.PrivateIpAddressSpecificationProperty>();\n    ret.addPropertyResult('primary', 'Primary', cfn_parse.FromCloudFormation.getBoolean(properties.Primary));\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                      \nexport interface CfnNetworkInterfaceAttachmentProps {\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly deviceIndex: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly instanceId: string;\n\n                                                                                                                                                                                                                                                              \n    readonly networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly deleteOnTermination?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInterfaceAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInterfaceAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInterfaceAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('deviceIndex', cdk.requiredValidator)(properties.deviceIndex));\n    errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateString)(properties.deviceIndex));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.requiredValidator)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInterfaceAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInterfaceAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInterfaceAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInterfaceAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInterfaceAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInterfaceAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        DeviceIndex: cdk.stringToCloudFormation(properties.deviceIndex),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInterfaceAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInterfaceAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInterfaceAttachmentProps>();\n    ret.addPropertyResult('deviceIndex', 'DeviceIndex', cfn_parse.FromCloudFormation.getString(properties.DeviceIndex));\n    ret.addPropertyResult('instanceId', 'InstanceId', cfn_parse.FromCloudFormation.getString(properties.InstanceId));\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \nexport class CfnNetworkInterfaceAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInterfaceAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInterfaceAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInterfaceAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInterfaceAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public deviceIndex: string;\n\n                                                                                                                                                                                                                                                                    \n    public instanceId: string;\n\n                                                                                                                                                                                                                                                              \n    public networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    public deleteOnTermination: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInterfaceAttachmentProps) {\n        super(scope, id, { type: CfnNetworkInterfaceAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'deviceIndex', this);\n        cdk.requireProperty(props, 'instanceId', this);\n        cdk.requireProperty(props, 'networkInterfaceId', this);\n\n        this.deviceIndex = props.deviceIndex;\n        this.instanceId = props.instanceId;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.deleteOnTermination = props.deleteOnTermination;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInterfaceAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            deviceIndex: this.deviceIndex,\n            instanceId: this.instanceId,\n            networkInterfaceId: this.networkInterfaceId,\n            deleteOnTermination: this.deleteOnTermination,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInterfaceAttachmentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnNetworkInterfacePermissionProps {\n\n                                                                                                                                                                                                                             \n    readonly awsAccountId: string;\n\n                                                                                                                                                                                                                                                \n    readonly networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly permission: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNetworkInterfacePermissionProps`\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInterfacePermissionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNetworkInterfacePermissionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.requiredValidator)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('permission', cdk.requiredValidator)(properties.permission));\n    errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));\n    return errors.wrap('supplied properties not correct for \"CfnNetworkInterfacePermissionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::NetworkInterfacePermission` resource\n *\n * @param properties - the TypeScript properties of a `CfnNetworkInterfacePermissionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::NetworkInterfacePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNetworkInterfacePermissionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNetworkInterfacePermissionPropsValidator(properties).assertSuccess();\n    return {\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        Permission: cdk.stringToCloudFormation(properties.permission),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNetworkInterfacePermissionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNetworkInterfacePermissionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNetworkInterfacePermissionProps>();\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', cfn_parse.FromCloudFormation.getString(properties.AwsAccountId));\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));\n    ret.addPropertyResult('permission', 'Permission', cfn_parse.FromCloudFormation.getString(properties.Permission));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnNetworkInterfacePermission extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::NetworkInterfacePermission\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNetworkInterfacePermission {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNetworkInterfacePermissionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNetworkInterfacePermission(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                             \n    public awsAccountId: string;\n\n                                                                                                                                                                                                                                                \n    public networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                               \n    public permission: string;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnNetworkInterfacePermissionProps) {\n        super(scope, id, { type: CfnNetworkInterfacePermission.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'awsAccountId', this);\n        cdk.requireProperty(props, 'networkInterfaceId', this);\n        cdk.requireProperty(props, 'permission', this);\n\n        this.awsAccountId = props.awsAccountId;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.permission = props.permission;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNetworkInterfacePermission.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            awsAccountId: this.awsAccountId,\n            networkInterfaceId: this.networkInterfaceId,\n            permission: this.permission,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNetworkInterfacePermissionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                            \nexport interface CfnPlacementGroupProps {\n\n                                                                                                                                                                                                     \n    readonly strategy?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPlacementGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnPlacementGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPlacementGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('strategy', cdk.validateString)(properties.strategy));\n    return errors.wrap('supplied properties not correct for \"CfnPlacementGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::PlacementGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnPlacementGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::PlacementGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPlacementGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPlacementGroupPropsValidator(properties).assertSuccess();\n    return {\n        Strategy: cdk.stringToCloudFormation(properties.strategy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPlacementGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPlacementGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPlacementGroupProps>();\n    ret.addPropertyResult('strategy', 'Strategy', properties.Strategy != null ? cfn_parse.FromCloudFormation.getString(properties.Strategy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPlacementGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::PlacementGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPlacementGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPlacementGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPlacementGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                     \n    public strategy: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnPlacementGroupProps = {}) {\n        super(scope, id, { type: CfnPlacementGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.strategy = props.strategy;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPlacementGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            strategy: this.strategy,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPlacementGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                    \nexport interface CfnPrefixListProps {\n\n                                                                                                                                                                                                                                           \n    readonly addressFamily: string;\n\n                                                                                                                                                                                                                          \n    readonly maxEntries: number;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly prefixListName: string;\n\n                                                                                                                                                                                                             \n    readonly entries?: Array<CfnPrefixList.EntryProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPrefixListProps`\n *\n * @param properties - the TypeScript properties of a `CfnPrefixListProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPrefixListPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addressFamily', cdk.requiredValidator)(properties.addressFamily));\n    errors.collect(cdk.propertyValidator('addressFamily', cdk.validateString)(properties.addressFamily));\n    errors.collect(cdk.propertyValidator('entries', cdk.listValidator(CfnPrefixList_EntryPropertyValidator))(properties.entries));\n    errors.collect(cdk.propertyValidator('maxEntries', cdk.requiredValidator)(properties.maxEntries));\n    errors.collect(cdk.propertyValidator('maxEntries', cdk.validateNumber)(properties.maxEntries));\n    errors.collect(cdk.propertyValidator('prefixListName', cdk.requiredValidator)(properties.prefixListName));\n    errors.collect(cdk.propertyValidator('prefixListName', cdk.validateString)(properties.prefixListName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPrefixListProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::PrefixList` resource\n *\n * @param properties - the TypeScript properties of a `CfnPrefixListProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::PrefixList` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPrefixListPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPrefixListPropsValidator(properties).assertSuccess();\n    return {\n        AddressFamily: cdk.stringToCloudFormation(properties.addressFamily),\n        MaxEntries: cdk.numberToCloudFormation(properties.maxEntries),\n        PrefixListName: cdk.stringToCloudFormation(properties.prefixListName),\n        Entries: cdk.listMapper(cfnPrefixListEntryPropertyToCloudFormation)(properties.entries),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPrefixListPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPrefixListProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPrefixListProps>();\n    ret.addPropertyResult('addressFamily', 'AddressFamily', cfn_parse.FromCloudFormation.getString(properties.AddressFamily));\n    ret.addPropertyResult('maxEntries', 'MaxEntries', cfn_parse.FromCloudFormation.getNumber(properties.MaxEntries));\n    ret.addPropertyResult('prefixListName', 'PrefixListName', cfn_parse.FromCloudFormation.getString(properties.PrefixListName));\n    ret.addPropertyResult('entries', 'Entries', properties.Entries != null ? cfn_parse.FromCloudFormation.getArray(CfnPrefixListEntryPropertyFromCloudFormation)(properties.Entries) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPrefixList extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::PrefixList\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPrefixList {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPrefixListPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPrefixList(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                    \n    public readonly attrOwnerId: string;\n\n                                                                                                                                    \n    public readonly attrPrefixListId: string;\n\n                                                                                                                 \n    public readonly attrVersion: number;\n\n                                                                                                                                                                                                                                           \n    public addressFamily: string;\n\n                                                                                                                                                                                                                          \n    public maxEntries: number;\n\n                                                                                                                                                                                                                                                                                                               \n    public prefixListName: string;\n\n                                                                                                                                                                                                             \n    public entries: Array<CfnPrefixList.EntryProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnPrefixListProps) {\n        super(scope, id, { type: CfnPrefixList.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'addressFamily', this);\n        cdk.requireProperty(props, 'maxEntries', this);\n        cdk.requireProperty(props, 'prefixListName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrOwnerId = cdk.Token.asString(this.getAtt('OwnerId'));\n        this.attrPrefixListId = cdk.Token.asString(this.getAtt('PrefixListId'));\n        this.attrVersion = cdk.Token.asNumber(this.getAtt('Version'));\n\n        this.addressFamily = props.addressFamily;\n        this.maxEntries = props.maxEntries;\n        this.prefixListName = props.prefixListName;\n        this.entries = props.entries;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::PrefixList\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPrefixList.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            addressFamily: this.addressFamily,\n            maxEntries: this.maxEntries,\n            prefixListName: this.prefixListName,\n            entries: this.entries,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPrefixListPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPrefixList {\n                                                                                                                                                                                                                              \n    export interface EntryProperty {\n                                                                                                                                                                                                                   \n        readonly cidr: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly description?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EntryProperty`\n *\n * @param properties - the TypeScript properties of a `EntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPrefixList_EntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.requiredValidator)(properties.cidr));\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    return errors.wrap('supplied properties not correct for \"EntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::PrefixList.Entry` resource\n *\n * @param properties - the TypeScript properties of a `EntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::PrefixList.Entry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPrefixListEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPrefixList_EntryPropertyValidator(properties).assertSuccess();\n    return {\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPrefixListEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPrefixList.EntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPrefixList.EntryProperty>();\n    ret.addPropertyResult('cidr', 'Cidr', cfn_parse.FromCloudFormation.getString(properties.Cidr));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                          \nexport interface CfnRouteProps {\n\n                                                                                                                                                                                                                                                                                                  \n    readonly routeTableId: string;\n\n                                                                                                                                                                                                  \n    readonly carrierGatewayId?: string;\n\n                                                                                                                                                                                                                           \n    readonly destinationCidrBlock?: string;\n\n                                                                                                                                                                                                                               \n    readonly destinationIpv6CidrBlock?: string;\n\n                                                                                                                                                                                                                          \n    readonly egressOnlyInternetGatewayId?: string;\n\n                                                                                                                                                                                                                                           \n    readonly gatewayId?: string;\n\n                                                                                                                                                                                                   \n    readonly instanceId?: string;\n\n                                                                                                                                                                                              \n    readonly localGatewayId?: string;\n\n                                                                                                                                                                                        \n    readonly natGatewayId?: string;\n\n                                                                                                                                                                                                      \n    readonly networkInterfaceId?: string;\n\n                                                                                                                                                                                                \n    readonly transitGatewayId?: string;\n\n                                                                                                                                                                                                                                              \n    readonly vpcEndpointId?: string;\n\n                                                                                                                                                                                                             \n    readonly vpcPeeringConnectionId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('carrierGatewayId', cdk.validateString)(properties.carrierGatewayId));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('destinationIpv6CidrBlock', cdk.validateString)(properties.destinationIpv6CidrBlock));\n    errors.collect(cdk.propertyValidator('egressOnlyInternetGatewayId', cdk.validateString)(properties.egressOnlyInternetGatewayId));\n    errors.collect(cdk.propertyValidator('gatewayId', cdk.validateString)(properties.gatewayId));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('localGatewayId', cdk.validateString)(properties.localGatewayId));\n    errors.collect(cdk.propertyValidator('natGatewayId', cdk.validateString)(properties.natGatewayId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('routeTableId', cdk.requiredValidator)(properties.routeTableId));\n    errors.collect(cdk.propertyValidator('routeTableId', cdk.validateString)(properties.routeTableId));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('vpcEndpointId', cdk.validateString)(properties.vpcEndpointId));\n    errors.collect(cdk.propertyValidator('vpcPeeringConnectionId', cdk.validateString)(properties.vpcPeeringConnectionId));\n    return errors.wrap('supplied properties not correct for \"CfnRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Route` resource\n *\n * @param properties - the TypeScript properties of a `CfnRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Route` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRoutePropsValidator(properties).assertSuccess();\n    return {\n        RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),\n        CarrierGatewayId: cdk.stringToCloudFormation(properties.carrierGatewayId),\n        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),\n        DestinationIpv6CidrBlock: cdk.stringToCloudFormation(properties.destinationIpv6CidrBlock),\n        EgressOnlyInternetGatewayId: cdk.stringToCloudFormation(properties.egressOnlyInternetGatewayId),\n        GatewayId: cdk.stringToCloudFormation(properties.gatewayId),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n        LocalGatewayId: cdk.stringToCloudFormation(properties.localGatewayId),\n        NatGatewayId: cdk.stringToCloudFormation(properties.natGatewayId),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        VpcEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId),\n        VpcPeeringConnectionId: cdk.stringToCloudFormation(properties.vpcPeeringConnectionId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteProps>();\n    ret.addPropertyResult('routeTableId', 'RouteTableId', cfn_parse.FromCloudFormation.getString(properties.RouteTableId));\n    ret.addPropertyResult('carrierGatewayId', 'CarrierGatewayId', properties.CarrierGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.CarrierGatewayId) : undefined);\n    ret.addPropertyResult('destinationCidrBlock', 'DestinationCidrBlock', properties.DestinationCidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock) : undefined);\n    ret.addPropertyResult('destinationIpv6CidrBlock', 'DestinationIpv6CidrBlock', properties.DestinationIpv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationIpv6CidrBlock) : undefined);\n    ret.addPropertyResult('egressOnlyInternetGatewayId', 'EgressOnlyInternetGatewayId', properties.EgressOnlyInternetGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.EgressOnlyInternetGatewayId) : undefined);\n    ret.addPropertyResult('gatewayId', 'GatewayId', properties.GatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.GatewayId) : undefined);\n    ret.addPropertyResult('instanceId', 'InstanceId', properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : undefined);\n    ret.addPropertyResult('localGatewayId', 'LocalGatewayId', properties.LocalGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.LocalGatewayId) : undefined);\n    ret.addPropertyResult('natGatewayId', 'NatGatewayId', properties.NatGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.NatGatewayId) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : undefined);\n    ret.addPropertyResult('vpcEndpointId', 'VpcEndpointId', properties.VpcEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcEndpointId) : undefined);\n    ret.addPropertyResult('vpcPeeringConnectionId', 'VpcPeeringConnectionId', properties.VpcPeeringConnectionId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcPeeringConnectionId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::Route\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                  \n    public routeTableId: string;\n\n                                                                                                                                                                                                  \n    public carrierGatewayId: string | undefined;\n\n                                                                                                                                                                                                                           \n    public destinationCidrBlock: string | undefined;\n\n                                                                                                                                                                                                                               \n    public destinationIpv6CidrBlock: string | undefined;\n\n                                                                                                                                                                                                                          \n    public egressOnlyInternetGatewayId: string | undefined;\n\n                                                                                                                                                                                                                                           \n    public gatewayId: string | undefined;\n\n                                                                                                                                                                                                   \n    public instanceId: string | undefined;\n\n                                                                                                                                                                                              \n    public localGatewayId: string | undefined;\n\n                                                                                                                                                                                        \n    public natGatewayId: string | undefined;\n\n                                                                                                                                                                                                      \n    public networkInterfaceId: string | undefined;\n\n                                                                                                                                                                                                \n    public transitGatewayId: string | undefined;\n\n                                                                                                                                                                                                                                              \n    public vpcEndpointId: string | undefined;\n\n                                                                                                                                                                                                             \n    public vpcPeeringConnectionId: string | undefined;\n\n                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnRouteProps) {\n        super(scope, id, { type: CfnRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'routeTableId', this);\n\n        this.routeTableId = props.routeTableId;\n        this.carrierGatewayId = props.carrierGatewayId;\n        this.destinationCidrBlock = props.destinationCidrBlock;\n        this.destinationIpv6CidrBlock = props.destinationIpv6CidrBlock;\n        this.egressOnlyInternetGatewayId = props.egressOnlyInternetGatewayId;\n        this.gatewayId = props.gatewayId;\n        this.instanceId = props.instanceId;\n        this.localGatewayId = props.localGatewayId;\n        this.natGatewayId = props.natGatewayId;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.transitGatewayId = props.transitGatewayId;\n        this.vpcEndpointId = props.vpcEndpointId;\n        this.vpcPeeringConnectionId = props.vpcPeeringConnectionId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            routeTableId: this.routeTableId,\n            carrierGatewayId: this.carrierGatewayId,\n            destinationCidrBlock: this.destinationCidrBlock,\n            destinationIpv6CidrBlock: this.destinationIpv6CidrBlock,\n            egressOnlyInternetGatewayId: this.egressOnlyInternetGatewayId,\n            gatewayId: this.gatewayId,\n            instanceId: this.instanceId,\n            localGatewayId: this.localGatewayId,\n            natGatewayId: this.natGatewayId,\n            networkInterfaceId: this.networkInterfaceId,\n            transitGatewayId: this.transitGatewayId,\n            vpcEndpointId: this.vpcEndpointId,\n            vpcPeeringConnectionId: this.vpcPeeringConnectionId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRoutePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                    \nexport interface CfnRouteTableProps {\n\n                                                                                                                                                                                     \n    readonly vpcId: string;\n\n                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRouteTableProps`\n *\n * @param properties - the TypeScript properties of a `CfnRouteTableProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRouteTablePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnRouteTableProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::RouteTable` resource\n *\n * @param properties - the TypeScript properties of a `CfnRouteTableProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::RouteTable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRouteTablePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRouteTablePropsValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRouteTablePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteTableProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteTableProps>();\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRouteTable extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::RouteTable\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRouteTable {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRouteTablePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRouteTable(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                              \n    public readonly attrRouteTableId: string;\n\n                                                                                                                                                                                     \n    public vpcId: string;\n\n                                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnRouteTableProps) {\n        super(scope, id, { type: CfnRouteTable.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrRouteTableId = cdk.Token.asString(this.getAtt('RouteTableId'));\n\n        this.vpcId = props.vpcId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::RouteTable\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRouteTable.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            vpcId: this.vpcId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRouteTablePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                             \nexport interface CfnSecurityGroupProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly groupDescription: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly groupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly securityGroupEgress?: Array<CfnSecurityGroup.EgressProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                     \n    readonly securityGroupIngress?: Array<CfnSecurityGroup.IngressProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                \n    readonly vpcId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSecurityGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupDescription', cdk.requiredValidator)(properties.groupDescription));\n    errors.collect(cdk.propertyValidator('groupDescription', cdk.validateString)(properties.groupDescription));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('securityGroupEgress', cdk.listValidator(CfnSecurityGroup_EgressPropertyValidator))(properties.securityGroupEgress));\n    errors.collect(cdk.propertyValidator('securityGroupIngress', cdk.listValidator(CfnSecurityGroup_IngressPropertyValidator))(properties.securityGroupIngress));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnSecurityGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SecurityGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SecurityGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroupPropsValidator(properties).assertSuccess();\n    return {\n        GroupDescription: cdk.stringToCloudFormation(properties.groupDescription),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        SecurityGroupEgress: cdk.listMapper(cfnSecurityGroupEgressPropertyToCloudFormation)(properties.securityGroupEgress),\n        SecurityGroupIngress: cdk.listMapper(cfnSecurityGroupIngressPropertyToCloudFormation)(properties.securityGroupIngress),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroupProps>();\n    ret.addPropertyResult('groupDescription', 'GroupDescription', cfn_parse.FromCloudFormation.getString(properties.GroupDescription));\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('securityGroupEgress', 'SecurityGroupEgress', properties.SecurityGroupEgress != null ? cfn_parse.FromCloudFormation.getArray(CfnSecurityGroupEgressPropertyFromCloudFormation)(properties.SecurityGroupEgress) : undefined);\n    ret.addPropertyResult('securityGroupIngress', 'SecurityGroupIngress', properties.SecurityGroupIngress != null ? cfn_parse.FromCloudFormation.getArray(CfnSecurityGroupIngressPropertyFromCloudFormation)(properties.SecurityGroupIngress) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSecurityGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SecurityGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSecurityGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSecurityGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSecurityGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                    \n    public readonly attrGroupId: string;\n\n                                                                                                                                                                                                                                                                                               \n    public readonly attrVpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public groupDescription: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public groupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public securityGroupEgress: Array<CfnSecurityGroup.EgressProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                     \n    public securityGroupIngress: Array<CfnSecurityGroup.IngressProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    public vpcId: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnSecurityGroupProps) {\n        super(scope, id, { type: CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'groupDescription', this);\n        this.attrGroupId = cdk.Token.asString(this.getAtt('GroupId'));\n        this.attrVpcId = cdk.Token.asString(this.getAtt('VpcId'));\n\n        this.groupDescription = props.groupDescription;\n        this.groupName = props.groupName;\n        this.securityGroupEgress = props.securityGroupEgress;\n        this.securityGroupIngress = props.securityGroupIngress;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::SecurityGroup\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcId = props.vpcId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupDescription: this.groupDescription,\n            groupName: this.groupName,\n            securityGroupEgress: this.securityGroupEgress,\n            securityGroupIngress: this.securityGroupIngress,\n            tags: this.tags.renderTags(),\n            vpcId: this.vpcId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSecurityGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSecurityGroup {\nn    export interface EgressProperty {\n                                                                                                                                                                                                                                                   \n        readonly cidrIp?: string;\n                                                                                                                                                                                                                                                     \n        readonly cidrIpv6?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly destinationPrefixListId?: string;\n                                                                                                                                                                                                                                                                 \n        readonly destinationSecurityGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly fromPort?: number;\nn        readonly ipProtocol: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly toPort?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EgressProperty`\n *\n * @param properties - the TypeScript properties of a `EgressProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroup_EgressPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));\n    errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('destinationPrefixListId', cdk.validateString)(properties.destinationPrefixListId));\n    errors.collect(cdk.propertyValidator('destinationSecurityGroupId', cdk.validateString)(properties.destinationSecurityGroupId));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"EgressProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SecurityGroup.Egress` resource\n *\n * @param properties - the TypeScript properties of a `EgressProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SecurityGroup.Egress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupEgressPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroup_EgressPropertyValidator(properties).assertSuccess();\n    return {\n        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),\n        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DestinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),\n        DestinationSecurityGroupId: cdk.stringToCloudFormation(properties.destinationSecurityGroupId),\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupEgressPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroup.EgressProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroup.EgressProperty>();\n    ret.addPropertyResult('cidrIp', 'CidrIp', properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : undefined);\n    ret.addPropertyResult('cidrIpv6', 'CidrIpv6', properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('destinationPrefixListId', 'DestinationPrefixListId', properties.DestinationPrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationPrefixListId) : undefined);\n    ret.addPropertyResult('destinationSecurityGroupId', 'DestinationSecurityGroupId', properties.DestinationSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationSecurityGroupId) : undefined);\n    ret.addPropertyResult('fromPort', 'FromPort', properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : undefined);\n    ret.addPropertyResult('ipProtocol', 'IpProtocol', cfn_parse.FromCloudFormation.getString(properties.IpProtocol));\n    ret.addPropertyResult('toPort', 'ToPort', properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSecurityGroup {\nn    export interface IngressProperty {\n                                                                                                                                                                                                                                                   \n        readonly cidrIp?: string;\n                                                                                                                                                                                                                                                     \n        readonly cidrIpv6?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly fromPort?: number;\nn        readonly ipProtocol: string;\n                                                                                                                                                                                                                                                                 \n        readonly sourcePrefixListId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly sourceSecurityGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly sourceSecurityGroupName?: string;\nn        readonly sourceSecurityGroupOwnerId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly toPort?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IngressProperty`\n *\n * @param properties - the TypeScript properties of a `IngressProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroup_IngressPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));\n    errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('sourcePrefixListId', cdk.validateString)(properties.sourcePrefixListId));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroupId', cdk.validateString)(properties.sourceSecurityGroupId));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroupName', cdk.validateString)(properties.sourceSecurityGroupName));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroupOwnerId', cdk.validateString)(properties.sourceSecurityGroupOwnerId));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"IngressProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SecurityGroup.Ingress` resource\n *\n * @param properties - the TypeScript properties of a `IngressProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SecurityGroup.Ingress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupIngressPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroup_IngressPropertyValidator(properties).assertSuccess();\n    return {\n        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),\n        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),\n        Description: cdk.stringToCloudFormation(properties.description),\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),\n        SourcePrefixListId: cdk.stringToCloudFormation(properties.sourcePrefixListId),\n        SourceSecurityGroupId: cdk.stringToCloudFormation(properties.sourceSecurityGroupId),\n        SourceSecurityGroupName: cdk.stringToCloudFormation(properties.sourceSecurityGroupName),\n        SourceSecurityGroupOwnerId: cdk.stringToCloudFormation(properties.sourceSecurityGroupOwnerId),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupIngressPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroup.IngressProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroup.IngressProperty>();\n    ret.addPropertyResult('cidrIp', 'CidrIp', properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : undefined);\n    ret.addPropertyResult('cidrIpv6', 'CidrIpv6', properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('fromPort', 'FromPort', properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : undefined);\n    ret.addPropertyResult('ipProtocol', 'IpProtocol', cfn_parse.FromCloudFormation.getString(properties.IpProtocol));\n    ret.addPropertyResult('sourcePrefixListId', 'SourcePrefixListId', properties.SourcePrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePrefixListId) : undefined);\n    ret.addPropertyResult('sourceSecurityGroupId', 'SourceSecurityGroupId', properties.SourceSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupId) : undefined);\n    ret.addPropertyResult('sourceSecurityGroupName', 'SourceSecurityGroupName', properties.SourceSecurityGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupName) : undefined);\n    ret.addPropertyResult('sourceSecurityGroupOwnerId', 'SourceSecurityGroupOwnerId', properties.SourceSecurityGroupOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupOwnerId) : undefined);\n    ret.addPropertyResult('toPort', 'ToPort', properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnSecurityGroupEgressProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly groupId: string;\n\nn    readonly ipProtocol: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly cidrIp?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly cidrIpv6?: string;\n\n                                                                                                                                                                                                                                                         \n    readonly description?: string;\n\nn    readonly destinationPrefixListId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly destinationSecurityGroupId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly fromPort?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly toPort?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSecurityGroupEgressProps`\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupEgressProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroupEgressPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));\n    errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('destinationPrefixListId', cdk.validateString)(properties.destinationPrefixListId));\n    errors.collect(cdk.propertyValidator('destinationSecurityGroupId', cdk.validateString)(properties.destinationSecurityGroupId));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('groupId', cdk.requiredValidator)(properties.groupId));\n    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"CfnSecurityGroupEgressProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SecurityGroupEgress` resource\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupEgressProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SecurityGroupEgress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupEgressPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroupEgressPropsValidator(properties).assertSuccess();\n    return {\n        GroupId: cdk.stringToCloudFormation(properties.groupId),\n        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),\n        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),\n        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DestinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),\n        DestinationSecurityGroupId: cdk.stringToCloudFormation(properties.destinationSecurityGroupId),\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupEgressPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroupEgressProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroupEgressProps>();\n    ret.addPropertyResult('groupId', 'GroupId', cfn_parse.FromCloudFormation.getString(properties.GroupId));\n    ret.addPropertyResult('ipProtocol', 'IpProtocol', cfn_parse.FromCloudFormation.getString(properties.IpProtocol));\n    ret.addPropertyResult('cidrIp', 'CidrIp', properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : undefined);\n    ret.addPropertyResult('cidrIpv6', 'CidrIpv6', properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('destinationPrefixListId', 'DestinationPrefixListId', properties.DestinationPrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationPrefixListId) : undefined);\n    ret.addPropertyResult('destinationSecurityGroupId', 'DestinationSecurityGroupId', properties.DestinationSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationSecurityGroupId) : undefined);\n    ret.addPropertyResult('fromPort', 'FromPort', properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : undefined);\n    ret.addPropertyResult('toPort', 'ToPort', properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSecurityGroupEgress extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SecurityGroupEgress\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSecurityGroupEgress {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSecurityGroupEgressPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSecurityGroupEgress(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public groupId: string;\n\nn    public ipProtocol: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    public cidrIp: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public cidrIpv6: string | undefined;\n\n                                                                                                                                                                                                                                                         \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public destinationPrefixListId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    public destinationSecurityGroupId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public fromPort: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public toPort: number | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnSecurityGroupEgressProps) {\n        super(scope, id, { type: CfnSecurityGroupEgress.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'groupId', this);\n        cdk.requireProperty(props, 'ipProtocol', this);\n\n        this.groupId = props.groupId;\n        this.ipProtocol = props.ipProtocol;\n        this.cidrIp = props.cidrIp;\n        this.cidrIpv6 = props.cidrIpv6;\n        this.description = props.description;\n        this.destinationPrefixListId = props.destinationPrefixListId;\n        this.destinationSecurityGroupId = props.destinationSecurityGroupId;\n        this.fromPort = props.fromPort;\n        this.toPort = props.toPort;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSecurityGroupEgress.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupId: this.groupId,\n            ipProtocol: this.ipProtocol,\n            cidrIp: this.cidrIp,\n            cidrIpv6: this.cidrIpv6,\n            description: this.description,\n            destinationPrefixListId: this.destinationPrefixListId,\n            destinationSecurityGroupId: this.destinationSecurityGroupId,\n            fromPort: this.fromPort,\n            toPort: this.toPort,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSecurityGroupEgressPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                            \nexport interface CfnSecurityGroupIngressProps {\n\nn    readonly ipProtocol: string;\n\n                                                                                                                                                                                                                                     \n    readonly cidrIp?: string;\n\n                                                                                                                                                                                                                                       \n    readonly cidrIpv6?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly fromPort?: number;\n\nn    readonly groupId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly groupName?: string;\n\n                                                                                                                                                                                                                                               \n    readonly sourcePrefixListId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly sourceSecurityGroupId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly sourceSecurityGroupName?: string;\n\nn    readonly sourceSecurityGroupOwnerId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly toPort?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSecurityGroupIngressProps`\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupIngressProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroupIngressPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));\n    errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));\n    errors.collect(cdk.propertyValidator('sourcePrefixListId', cdk.validateString)(properties.sourcePrefixListId));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroupId', cdk.validateString)(properties.sourceSecurityGroupId));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroupName', cdk.validateString)(properties.sourceSecurityGroupName));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroupOwnerId', cdk.validateString)(properties.sourceSecurityGroupOwnerId));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"CfnSecurityGroupIngressProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SecurityGroupIngress` resource\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupIngressProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SecurityGroupIngress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupIngressPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroupIngressPropsValidator(properties).assertSuccess();\n    return {\n        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),\n        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),\n        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),\n        Description: cdk.stringToCloudFormation(properties.description),\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        GroupId: cdk.stringToCloudFormation(properties.groupId),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        SourcePrefixListId: cdk.stringToCloudFormation(properties.sourcePrefixListId),\n        SourceSecurityGroupId: cdk.stringToCloudFormation(properties.sourceSecurityGroupId),\n        SourceSecurityGroupName: cdk.stringToCloudFormation(properties.sourceSecurityGroupName),\n        SourceSecurityGroupOwnerId: cdk.stringToCloudFormation(properties.sourceSecurityGroupOwnerId),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupIngressPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroupIngressProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroupIngressProps>();\n    ret.addPropertyResult('ipProtocol', 'IpProtocol', cfn_parse.FromCloudFormation.getString(properties.IpProtocol));\n    ret.addPropertyResult('cidrIp', 'CidrIp', properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : undefined);\n    ret.addPropertyResult('cidrIpv6', 'CidrIpv6', properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('fromPort', 'FromPort', properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : undefined);\n    ret.addPropertyResult('groupId', 'GroupId', properties.GroupId != null ? cfn_parse.FromCloudFormation.getString(properties.GroupId) : undefined);\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('sourcePrefixListId', 'SourcePrefixListId', properties.SourcePrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePrefixListId) : undefined);\n    ret.addPropertyResult('sourceSecurityGroupId', 'SourceSecurityGroupId', properties.SourceSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupId) : undefined);\n    ret.addPropertyResult('sourceSecurityGroupName', 'SourceSecurityGroupName', properties.SourceSecurityGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupName) : undefined);\n    ret.addPropertyResult('sourceSecurityGroupOwnerId', 'SourceSecurityGroupOwnerId', properties.SourceSecurityGroupOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupOwnerId) : undefined);\n    ret.addPropertyResult('toPort', 'ToPort', properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSecurityGroupIngress extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SecurityGroupIngress\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSecurityGroupIngress {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSecurityGroupIngressPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSecurityGroupIngress(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public ipProtocol: string;\n\n                                                                                                                                                                                                                                     \n    public cidrIp: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public cidrIpv6: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public fromPort: number | undefined;\n\nn    public groupId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public groupName: string | undefined;\n\n                                                                                                                                                                                                                                               \n    public sourcePrefixListId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    public sourceSecurityGroupId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public sourceSecurityGroupName: string | undefined;\n\nn    public sourceSecurityGroupOwnerId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public toPort: number | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnSecurityGroupIngressProps) {\n        super(scope, id, { type: CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'ipProtocol', this);\n\n        this.ipProtocol = props.ipProtocol;\n        this.cidrIp = props.cidrIp;\n        this.cidrIpv6 = props.cidrIpv6;\n        this.description = props.description;\n        this.fromPort = props.fromPort;\n        this.groupId = props.groupId;\n        this.groupName = props.groupName;\n        this.sourcePrefixListId = props.sourcePrefixListId;\n        this.sourceSecurityGroupId = props.sourceSecurityGroupId;\n        this.sourceSecurityGroupName = props.sourceSecurityGroupName;\n        this.sourceSecurityGroupOwnerId = props.sourceSecurityGroupOwnerId;\n        this.toPort = props.toPort;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ipProtocol: this.ipProtocol,\n            cidrIp: this.cidrIp,\n            cidrIpv6: this.cidrIpv6,\n            description: this.description,\n            fromPort: this.fromPort,\n            groupId: this.groupId,\n            groupName: this.groupName,\n            sourcePrefixListId: this.sourcePrefixListId,\n            sourceSecurityGroupId: this.sourceSecurityGroupId,\n            sourceSecurityGroupName: this.sourceSecurityGroupName,\n            sourceSecurityGroupOwnerId: this.sourceSecurityGroupOwnerId,\n            toPort: this.toPort,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSecurityGroupIngressPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                  \nexport interface CfnSpotFleetProps {\n\n                                                                                                                                                                                                                                          \n    readonly spotFleetRequestConfigData: CfnSpotFleet.SpotFleetRequestConfigDataProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSpotFleetProps`\n *\n * @param properties - the TypeScript properties of a `CfnSpotFleetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('spotFleetRequestConfigData', cdk.requiredValidator)(properties.spotFleetRequestConfigData));\n    errors.collect(cdk.propertyValidator('spotFleetRequestConfigData', CfnSpotFleet_SpotFleetRequestConfigDataPropertyValidator)(properties.spotFleetRequestConfigData));\n    return errors.wrap('supplied properties not correct for \"CfnSpotFleetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet` resource\n *\n * @param properties - the TypeScript properties of a `CfnSpotFleetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleetPropsValidator(properties).assertSuccess();\n    return {\n        SpotFleetRequestConfigData: cfnSpotFleetSpotFleetRequestConfigDataPropertyToCloudFormation(properties.spotFleetRequestConfigData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleetProps>();\n    ret.addPropertyResult('spotFleetRequestConfigData', 'SpotFleetRequestConfigData', CfnSpotFleetSpotFleetRequestConfigDataPropertyFromCloudFormation(properties.SpotFleetRequestConfigData));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSpotFleet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SpotFleet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSpotFleet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSpotFleetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSpotFleet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                   \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                          \n    public spotFleetRequestConfigData: CfnSpotFleet.SpotFleetRequestConfigDataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnSpotFleetProps) {\n        super(scope, id, { type: CfnSpotFleet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'spotFleetRequestConfigData', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.spotFleetRequestConfigData = props.spotFleetRequestConfigData;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSpotFleet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            spotFleetRequestConfigData: this.spotFleetRequestConfigData,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSpotFleetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface AcceleratorCountRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                          \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AcceleratorCountRequestProperty`\n *\n * @param properties - the TypeScript properties of a `AcceleratorCountRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_AcceleratorCountRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"AcceleratorCountRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.AcceleratorCountRequest` resource\n *\n * @param properties - the TypeScript properties of a `AcceleratorCountRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.AcceleratorCountRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetAcceleratorCountRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_AcceleratorCountRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetAcceleratorCountRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.AcceleratorCountRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.AcceleratorCountRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                \n    export interface AcceleratorTotalMemoryMiBRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AcceleratorTotalMemoryMiBRequestProperty`\n *\n * @param properties - the TypeScript properties of a `AcceleratorTotalMemoryMiBRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"AcceleratorTotalMemoryMiBRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.AcceleratorTotalMemoryMiBRequest` resource\n *\n * @param properties - the TypeScript properties of a `AcceleratorTotalMemoryMiBRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.AcceleratorTotalMemoryMiBRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface BaselineEbsBandwidthMbpsRequestProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BaselineEbsBandwidthMbpsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `BaselineEbsBandwidthMbpsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"BaselineEbsBandwidthMbpsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.BaselineEbsBandwidthMbpsRequest` resource\n *\n * @param properties - the TypeScript properties of a `BaselineEbsBandwidthMbpsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.BaselineEbsBandwidthMbpsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                                     \n    export interface BlockDeviceMappingProperty {\n                                                                                                                                                                                                                                                                                       \n        readonly deviceName: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly ebs?: CfnSpotFleet.EbsBlockDeviceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly noDevice?: string;\nn        readonly virtualName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlockDeviceMappingProperty`\n *\n * @param properties - the TypeScript properties of a `BlockDeviceMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_BlockDeviceMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceName', cdk.requiredValidator)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('ebs', CfnSpotFleet_EbsBlockDevicePropertyValidator)(properties.ebs));\n    errors.collect(cdk.propertyValidator('noDevice', cdk.validateString)(properties.noDevice));\n    errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));\n    return errors.wrap('supplied properties not correct for \"BlockDeviceMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.BlockDeviceMapping` resource\n *\n * @param properties - the TypeScript properties of a `BlockDeviceMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.BlockDeviceMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetBlockDeviceMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_BlockDeviceMappingPropertyValidator(properties).assertSuccess();\n    return {\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        Ebs: cfnSpotFleetEbsBlockDevicePropertyToCloudFormation(properties.ebs),\n        NoDevice: cdk.stringToCloudFormation(properties.noDevice),\n        VirtualName: cdk.stringToCloudFormation(properties.virtualName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetBlockDeviceMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.BlockDeviceMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.BlockDeviceMappingProperty>();\n    ret.addPropertyResult('deviceName', 'DeviceName', cfn_parse.FromCloudFormation.getString(properties.DeviceName));\n    ret.addPropertyResult('ebs', 'Ebs', properties.Ebs != null ? CfnSpotFleetEbsBlockDevicePropertyFromCloudFormation(properties.Ebs) : undefined);\n    ret.addPropertyResult('noDevice', 'NoDevice', properties.NoDevice != null ? cfn_parse.FromCloudFormation.getString(properties.NoDevice) : undefined);\n    ret.addPropertyResult('virtualName', 'VirtualName', properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                  \n    export interface ClassicLoadBalancerProperty {\n                                                                                                                                                                                                                                                            \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClassicLoadBalancerProperty`\n *\n * @param properties - the TypeScript properties of a `ClassicLoadBalancerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_ClassicLoadBalancerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"ClassicLoadBalancerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.ClassicLoadBalancer` resource\n *\n * @param properties - the TypeScript properties of a `ClassicLoadBalancerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.ClassicLoadBalancer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetClassicLoadBalancerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_ClassicLoadBalancerPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetClassicLoadBalancerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.ClassicLoadBalancerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.ClassicLoadBalancerProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                                                                                         \n    export interface ClassicLoadBalancersConfigProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly classicLoadBalancers: Array<CfnSpotFleet.ClassicLoadBalancerProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClassicLoadBalancersConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ClassicLoadBalancersConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_ClassicLoadBalancersConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('classicLoadBalancers', cdk.requiredValidator)(properties.classicLoadBalancers));\n    errors.collect(cdk.propertyValidator('classicLoadBalancers', cdk.listValidator(CfnSpotFleet_ClassicLoadBalancerPropertyValidator))(properties.classicLoadBalancers));\n    return errors.wrap('supplied properties not correct for \"ClassicLoadBalancersConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.ClassicLoadBalancersConfig` resource\n *\n * @param properties - the TypeScript properties of a `ClassicLoadBalancersConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.ClassicLoadBalancersConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetClassicLoadBalancersConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_ClassicLoadBalancersConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ClassicLoadBalancers: cdk.listMapper(cfnSpotFleetClassicLoadBalancerPropertyToCloudFormation)(properties.classicLoadBalancers),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetClassicLoadBalancersConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.ClassicLoadBalancersConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.ClassicLoadBalancersConfigProperty>();\n    ret.addPropertyResult('classicLoadBalancers', 'ClassicLoadBalancers', cfn_parse.FromCloudFormation.getArray(CfnSpotFleetClassicLoadBalancerPropertyFromCloudFormation)(properties.ClassicLoadBalancers));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                      \n    export interface EbsBlockDeviceProperty {\nn        readonly deleteOnTermination?: boolean | cdk.IResolvable;\nn        readonly encrypted?: boolean | cdk.IResolvable;\nn        readonly iops?: number;\n                                                                                                                                                                                                                                                 \n        readonly snapshotId?: string;\nn        readonly volumeSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly volumeType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EbsBlockDeviceProperty`\n *\n * @param properties - the TypeScript properties of a `EbsBlockDeviceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_EbsBlockDevicePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));\n    errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"EbsBlockDeviceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.EbsBlockDevice` resource\n *\n * @param properties - the TypeScript properties of a `EbsBlockDeviceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.EbsBlockDevice` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetEbsBlockDevicePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_EbsBlockDevicePropertyValidator(properties).assertSuccess();\n    return {\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),\n        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetEbsBlockDevicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.EbsBlockDeviceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.EbsBlockDeviceProperty>();\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('snapshotId', 'SnapshotId', properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : undefined);\n    ret.addPropertyResult('volumeSize', 'VolumeSize', properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\nn    export interface FleetLaunchTemplateSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly launchTemplateId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly launchTemplateName?: string;\nn        readonly version: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FleetLaunchTemplateSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_FleetLaunchTemplateSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));\n    errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"FleetLaunchTemplateSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification` resource\n *\n * @param properties - the TypeScript properties of a `FleetLaunchTemplateSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetFleetLaunchTemplateSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_FleetLaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),\n        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetFleetLaunchTemplateSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.FleetLaunchTemplateSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.FleetLaunchTemplateSpecificationProperty>();\n    ret.addPropertyResult('launchTemplateId', 'LaunchTemplateId', properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : undefined);\n    ret.addPropertyResult('launchTemplateName', 'LaunchTemplateName', properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : undefined);\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                       \n    export interface GroupIdentifierProperty {\n                                                                                                                                                                                                                                                      \n        readonly groupId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GroupIdentifierProperty`\n *\n * @param properties - the TypeScript properties of a `GroupIdentifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_GroupIdentifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupId', cdk.requiredValidator)(properties.groupId));\n    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));\n    return errors.wrap('supplied properties not correct for \"GroupIdentifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.GroupIdentifier` resource\n *\n * @param properties - the TypeScript properties of a `GroupIdentifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.GroupIdentifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetGroupIdentifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_GroupIdentifierPropertyValidator(properties).assertSuccess();\n    return {\n        GroupId: cdk.stringToCloudFormation(properties.groupId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetGroupIdentifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.GroupIdentifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.GroupIdentifierProperty>();\n    ret.addPropertyResult('groupId', 'GroupId', cfn_parse.FromCloudFormation.getString(properties.GroupId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                              \n    export interface IamInstanceProfileSpecificationProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly arn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IamInstanceProfileSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `IamInstanceProfileSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_IamInstanceProfileSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    return errors.wrap('supplied properties not correct for \"IamInstanceProfileSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.IamInstanceProfileSpecification` resource\n *\n * @param properties - the TypeScript properties of a `IamInstanceProfileSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.IamInstanceProfileSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetIamInstanceProfileSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_IamInstanceProfileSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetIamInstanceProfileSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.IamInstanceProfileSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.IamInstanceProfileSpecificationProperty>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                          \n    export interface InstanceIpv6AddressProperty {\n                                                                                                                                                                                                                                                      \n        readonly ipv6Address: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceIpv6AddressProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceIpv6AddressProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_InstanceIpv6AddressPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.requiredValidator)(properties.ipv6Address));\n    errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));\n    return errors.wrap('supplied properties not correct for \"InstanceIpv6AddressProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.InstanceIpv6Address` resource\n *\n * @param properties - the TypeScript properties of a `InstanceIpv6AddressProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.InstanceIpv6Address` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetInstanceIpv6AddressPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();\n    return {\n        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetInstanceIpv6AddressPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.InstanceIpv6AddressProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.InstanceIpv6AddressProperty>();\n    ret.addPropertyResult('ipv6Address', 'Ipv6Address', cfn_parse.FromCloudFormation.getString(properties.Ipv6Address));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                \n    export interface InstanceNetworkInterfaceSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly associatePublicIpAddress?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly deleteOnTermination?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly deviceIndex?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly groups?: string[];\nn        readonly ipv6AddressCount?: number;\nn        readonly ipv6Addresses?: Array<CfnSpotFleet.InstanceIpv6AddressProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly networkInterfaceId?: string;\nn        readonly privateIpAddresses?: Array<CfnSpotFleet.PrivateIpAddressSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly secondaryPrivateIpAddressCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly subnetId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceNetworkInterfaceSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceNetworkInterfaceSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_InstanceNetworkInterfaceSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('associatePublicIpAddress', cdk.validateBoolean)(properties.associatePublicIpAddress));\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateNumber)(properties.deviceIndex));\n    errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));\n    errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));\n    errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(CfnSpotFleet_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(CfnSpotFleet_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));\n    errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"InstanceNetworkInterfaceSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification` resource\n *\n * @param properties - the TypeScript properties of a `InstanceNetworkInterfaceSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_InstanceNetworkInterfaceSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DeviceIndex: cdk.numberToCloudFormation(properties.deviceIndex),\n        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),\n        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),\n        Ipv6Addresses: cdk.listMapper(cfnSpotFleetInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        PrivateIpAddresses: cdk.listMapper(cfnSpotFleetPrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),\n        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty>();\n    ret.addPropertyResult('associatePublicIpAddress', 'AssociatePublicIpAddress', properties.AssociatePublicIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociatePublicIpAddress) : undefined);\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('deviceIndex', 'DeviceIndex', properties.DeviceIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.DeviceIndex) : undefined);\n    ret.addPropertyResult('groups', 'Groups', properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : undefined);\n    ret.addPropertyResult('ipv6AddressCount', 'Ipv6AddressCount', properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : undefined);\n    ret.addPropertyResult('ipv6Addresses', 'Ipv6Addresses', properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('privateIpAddresses', 'PrivateIpAddresses', properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetPrivateIpAddressSpecificationPropertyFromCloudFormation)(properties.PrivateIpAddresses) : undefined);\n    ret.addPropertyResult('secondaryPrivateIpAddressCount', 'SecondaryPrivateIpAddressCount', properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\nn    export interface InstanceRequirementsRequestProperty {\nn        readonly acceleratorCount?: CfnSpotFleet.AcceleratorCountRequestProperty | cdk.IResolvable;\nn        readonly acceleratorManufacturers?: string[];\nn        readonly acceleratorNames?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly acceleratorTotalMemoryMiB?: CfnSpotFleet.AcceleratorTotalMemoryMiBRequestProperty | cdk.IResolvable;\nn        readonly acceleratorTypes?: string[];\nn        readonly bareMetal?: string;\nn        readonly baselineEbsBandwidthMbps?: CfnSpotFleet.BaselineEbsBandwidthMbpsRequestProperty | cdk.IResolvable;\nn        readonly burstablePerformance?: string;\nn        readonly cpuManufacturers?: string[];\nn        readonly excludedInstanceTypes?: string[];\nn        readonly instanceGenerations?: string[];\nn        readonly localStorage?: string;\nn        readonly localStorageTypes?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly memoryGiBPerVCpu?: CfnSpotFleet.MemoryGiBPerVCpuRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                    \n        readonly memoryMiB?: CfnSpotFleet.MemoryMiBRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly networkInterfaceCount?: CfnSpotFleet.NetworkInterfaceCountRequestProperty | cdk.IResolvable;\nn        readonly onDemandMaxPricePercentageOverLowestPrice?: number;\nn        readonly requireHibernateSupport?: boolean | cdk.IResolvable;\nn        readonly spotMaxPricePercentageOverLowestPrice?: number;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly totalLocalStorageGb?: CfnSpotFleet.TotalLocalStorageGBRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly vCpuCount?: CfnSpotFleet.VCpuCountRangeRequestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceRequirementsRequestProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceRequirementsRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_InstanceRequirementsRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceleratorCount', CfnSpotFleet_AcceleratorCountRequestPropertyValidator)(properties.acceleratorCount));\n    errors.collect(cdk.propertyValidator('acceleratorManufacturers', cdk.listValidator(cdk.validateString))(properties.acceleratorManufacturers));\n    errors.collect(cdk.propertyValidator('acceleratorNames', cdk.listValidator(cdk.validateString))(properties.acceleratorNames));\n    errors.collect(cdk.propertyValidator('acceleratorTotalMemoryMiB', CfnSpotFleet_AcceleratorTotalMemoryMiBRequestPropertyValidator)(properties.acceleratorTotalMemoryMiB));\n    errors.collect(cdk.propertyValidator('acceleratorTypes', cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));\n    errors.collect(cdk.propertyValidator('bareMetal', cdk.validateString)(properties.bareMetal));\n    errors.collect(cdk.propertyValidator('baselineEbsBandwidthMbps', CfnSpotFleet_BaselineEbsBandwidthMbpsRequestPropertyValidator)(properties.baselineEbsBandwidthMbps));\n    errors.collect(cdk.propertyValidator('burstablePerformance', cdk.validateString)(properties.burstablePerformance));\n    errors.collect(cdk.propertyValidator('cpuManufacturers', cdk.listValidator(cdk.validateString))(properties.cpuManufacturers));\n    errors.collect(cdk.propertyValidator('excludedInstanceTypes', cdk.listValidator(cdk.validateString))(properties.excludedInstanceTypes));\n    errors.collect(cdk.propertyValidator('instanceGenerations', cdk.listValidator(cdk.validateString))(properties.instanceGenerations));\n    errors.collect(cdk.propertyValidator('localStorage', cdk.validateString)(properties.localStorage));\n    errors.collect(cdk.propertyValidator('localStorageTypes', cdk.listValidator(cdk.validateString))(properties.localStorageTypes));\n    errors.collect(cdk.propertyValidator('memoryGiBPerVCpu', CfnSpotFleet_MemoryGiBPerVCpuRequestPropertyValidator)(properties.memoryGiBPerVCpu));\n    errors.collect(cdk.propertyValidator('memoryMiB', CfnSpotFleet_MemoryMiBRequestPropertyValidator)(properties.memoryMiB));\n    errors.collect(cdk.propertyValidator('networkInterfaceCount', CfnSpotFleet_NetworkInterfaceCountRequestPropertyValidator)(properties.networkInterfaceCount));\n    errors.collect(cdk.propertyValidator('onDemandMaxPricePercentageOverLowestPrice', cdk.validateNumber)(properties.onDemandMaxPricePercentageOverLowestPrice));\n    errors.collect(cdk.propertyValidator('requireHibernateSupport', cdk.validateBoolean)(properties.requireHibernateSupport));\n    errors.collect(cdk.propertyValidator('spotMaxPricePercentageOverLowestPrice', cdk.validateNumber)(properties.spotMaxPricePercentageOverLowestPrice));\n    errors.collect(cdk.propertyValidator('totalLocalStorageGb', CfnSpotFleet_TotalLocalStorageGBRequestPropertyValidator)(properties.totalLocalStorageGb));\n    errors.collect(cdk.propertyValidator('vCpuCount', CfnSpotFleet_VCpuCountRangeRequestPropertyValidator)(properties.vCpuCount));\n    return errors.wrap('supplied properties not correct for \"InstanceRequirementsRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.InstanceRequirementsRequest` resource\n *\n * @param properties - the TypeScript properties of a `InstanceRequirementsRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.InstanceRequirementsRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetInstanceRequirementsRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_InstanceRequirementsRequestPropertyValidator(properties).assertSuccess();\n    return {\n        AcceleratorCount: cfnSpotFleetAcceleratorCountRequestPropertyToCloudFormation(properties.acceleratorCount),\n        AcceleratorManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorManufacturers),\n        AcceleratorNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorNames),\n        AcceleratorTotalMemoryMiB: cfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties.acceleratorTotalMemoryMiB),\n        AcceleratorTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),\n        BareMetal: cdk.stringToCloudFormation(properties.bareMetal),\n        BaselineEbsBandwidthMbps: cfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties.baselineEbsBandwidthMbps),\n        BurstablePerformance: cdk.stringToCloudFormation(properties.burstablePerformance),\n        CpuManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.cpuManufacturers),\n        ExcludedInstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedInstanceTypes),\n        InstanceGenerations: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceGenerations),\n        LocalStorage: cdk.stringToCloudFormation(properties.localStorage),\n        LocalStorageTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.localStorageTypes),\n        MemoryGiBPerVCpu: cfnSpotFleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties.memoryGiBPerVCpu),\n        MemoryMiB: cfnSpotFleetMemoryMiBRequestPropertyToCloudFormation(properties.memoryMiB),\n        NetworkInterfaceCount: cfnSpotFleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties.networkInterfaceCount),\n        OnDemandMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.onDemandMaxPricePercentageOverLowestPrice),\n        RequireHibernateSupport: cdk.booleanToCloudFormation(properties.requireHibernateSupport),\n        SpotMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.spotMaxPricePercentageOverLowestPrice),\n        TotalLocalStorageGB: cfnSpotFleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties.totalLocalStorageGb),\n        VCpuCount: cfnSpotFleetVCpuCountRangeRequestPropertyToCloudFormation(properties.vCpuCount),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetInstanceRequirementsRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.InstanceRequirementsRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.InstanceRequirementsRequestProperty>();\n    ret.addPropertyResult('acceleratorCount', 'AcceleratorCount', properties.AcceleratorCount != null ? CfnSpotFleetAcceleratorCountRequestPropertyFromCloudFormation(properties.AcceleratorCount) : undefined);\n    ret.addPropertyResult('acceleratorManufacturers', 'AcceleratorManufacturers', properties.AcceleratorManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorManufacturers) : undefined);\n    ret.addPropertyResult('acceleratorNames', 'AcceleratorNames', properties.AcceleratorNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorNames) : undefined);\n    ret.addPropertyResult('acceleratorTotalMemoryMiB', 'AcceleratorTotalMemoryMiB', properties.AcceleratorTotalMemoryMiB != null ? CfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties.AcceleratorTotalMemoryMiB) : undefined);\n    ret.addPropertyResult('acceleratorTypes', 'AcceleratorTypes', properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorTypes) : undefined);\n    ret.addPropertyResult('bareMetal', 'BareMetal', properties.BareMetal != null ? cfn_parse.FromCloudFormation.getString(properties.BareMetal) : undefined);\n    ret.addPropertyResult('baselineEbsBandwidthMbps', 'BaselineEbsBandwidthMbps', properties.BaselineEbsBandwidthMbps != null ? CfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties.BaselineEbsBandwidthMbps) : undefined);\n    ret.addPropertyResult('burstablePerformance', 'BurstablePerformance', properties.BurstablePerformance != null ? cfn_parse.FromCloudFormation.getString(properties.BurstablePerformance) : undefined);\n    ret.addPropertyResult('cpuManufacturers', 'CpuManufacturers', properties.CpuManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CpuManufacturers) : undefined);\n    ret.addPropertyResult('excludedInstanceTypes', 'ExcludedInstanceTypes', properties.ExcludedInstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedInstanceTypes) : undefined);\n    ret.addPropertyResult('instanceGenerations', 'InstanceGenerations', properties.InstanceGenerations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceGenerations) : undefined);\n    ret.addPropertyResult('localStorage', 'LocalStorage', properties.LocalStorage != null ? cfn_parse.FromCloudFormation.getString(properties.LocalStorage) : undefined);\n    ret.addPropertyResult('localStorageTypes', 'LocalStorageTypes', properties.LocalStorageTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LocalStorageTypes) : undefined);\n    ret.addPropertyResult('memoryGiBPerVCpu', 'MemoryGiBPerVCpu', properties.MemoryGiBPerVCpu != null ? CfnSpotFleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties.MemoryGiBPerVCpu) : undefined);\n    ret.addPropertyResult('memoryMiB', 'MemoryMiB', properties.MemoryMiB != null ? CfnSpotFleetMemoryMiBRequestPropertyFromCloudFormation(properties.MemoryMiB) : undefined);\n    ret.addPropertyResult('networkInterfaceCount', 'NetworkInterfaceCount', properties.NetworkInterfaceCount != null ? CfnSpotFleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties.NetworkInterfaceCount) : undefined);\n    ret.addPropertyResult('onDemandMaxPricePercentageOverLowestPrice', 'OnDemandMaxPricePercentageOverLowestPrice', properties.OnDemandMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandMaxPricePercentageOverLowestPrice) : undefined);\n    ret.addPropertyResult('requireHibernateSupport', 'RequireHibernateSupport', properties.RequireHibernateSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireHibernateSupport) : undefined);\n    ret.addPropertyResult('spotMaxPricePercentageOverLowestPrice', 'SpotMaxPricePercentageOverLowestPrice', properties.SpotMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotMaxPricePercentageOverLowestPrice) : undefined);\n    ret.addPropertyResult('totalLocalStorageGb', 'TotalLocalStorageGB', properties.TotalLocalStorageGB != null ? CfnSpotFleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties.TotalLocalStorageGB) : undefined);\n    ret.addPropertyResult('vCpuCount', 'VCpuCount', properties.VCpuCount != null ? CfnSpotFleetVCpuCountRangeRequestPropertyFromCloudFormation(properties.VCpuCount) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                           \n    export interface LaunchTemplateConfigProperty {\n                                                                                                                                                                                                                                                                           \n        readonly launchTemplateSpecification?: CfnSpotFleet.FleetLaunchTemplateSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                         \n        readonly overrides?: Array<CfnSpotFleet.LaunchTemplateOverridesProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_LaunchTemplateConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateSpecification', CfnSpotFleet_FleetLaunchTemplateSpecificationPropertyValidator)(properties.launchTemplateSpecification));\n    errors.collect(cdk.propertyValidator('overrides', cdk.listValidator(CfnSpotFleet_LaunchTemplateOverridesPropertyValidator))(properties.overrides));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.LaunchTemplateConfig` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.LaunchTemplateConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetLaunchTemplateConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_LaunchTemplateConfigPropertyValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateSpecification: cfnSpotFleetFleetLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplateSpecification),\n        Overrides: cdk.listMapper(cfnSpotFleetLaunchTemplateOverridesPropertyToCloudFormation)(properties.overrides),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetLaunchTemplateConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.LaunchTemplateConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.LaunchTemplateConfigProperty>();\n    ret.addPropertyResult('launchTemplateSpecification', 'LaunchTemplateSpecification', properties.LaunchTemplateSpecification != null ? CfnSpotFleetFleetLaunchTemplateSpecificationPropertyFromCloudFormation(properties.LaunchTemplateSpecification) : undefined);\n    ret.addPropertyResult('overrides', 'Overrides', properties.Overrides != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetLaunchTemplateOverridesPropertyFromCloudFormation)(properties.Overrides) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                              \n    export interface LaunchTemplateOverridesProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly availabilityZone?: string;\nn        readonly instanceRequirements?: CfnSpotFleet.InstanceRequirementsRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly spotPrice?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly subnetId?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly weightedCapacity?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateOverridesProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateOverridesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_LaunchTemplateOverridesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('instanceRequirements', CfnSpotFleet_InstanceRequirementsRequestPropertyValidator)(properties.instanceRequirements));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('spotPrice', cdk.validateString)(properties.spotPrice));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateNumber)(properties.weightedCapacity));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateOverridesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.LaunchTemplateOverrides` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateOverridesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.LaunchTemplateOverrides` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetLaunchTemplateOverridesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_LaunchTemplateOverridesPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        InstanceRequirements: cfnSpotFleetInstanceRequirementsRequestPropertyToCloudFormation(properties.instanceRequirements),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetLaunchTemplateOverridesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.LaunchTemplateOverridesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.LaunchTemplateOverridesProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('instanceRequirements', 'InstanceRequirements', properties.InstanceRequirements != null ? CfnSpotFleetInstanceRequirementsRequestPropertyFromCloudFormation(properties.InstanceRequirements) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('spotPrice', 'SpotPrice', properties.SpotPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotPrice) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('weightedCapacity', 'WeightedCapacity', properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.WeightedCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                         \n    export interface LoadBalancersConfigProperty {\n                                                                                                                                                                                                                                                                               \n        readonly classicLoadBalancersConfig?: CfnSpotFleet.ClassicLoadBalancersConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                              \n        readonly targetGroupsConfig?: CfnSpotFleet.TargetGroupsConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoadBalancersConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LoadBalancersConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_LoadBalancersConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('classicLoadBalancersConfig', CfnSpotFleet_ClassicLoadBalancersConfigPropertyValidator)(properties.classicLoadBalancersConfig));\n    errors.collect(cdk.propertyValidator('targetGroupsConfig', CfnSpotFleet_TargetGroupsConfigPropertyValidator)(properties.targetGroupsConfig));\n    return errors.wrap('supplied properties not correct for \"LoadBalancersConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.LoadBalancersConfig` resource\n *\n * @param properties - the TypeScript properties of a `LoadBalancersConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.LoadBalancersConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetLoadBalancersConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_LoadBalancersConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ClassicLoadBalancersConfig: cfnSpotFleetClassicLoadBalancersConfigPropertyToCloudFormation(properties.classicLoadBalancersConfig),\n        TargetGroupsConfig: cfnSpotFleetTargetGroupsConfigPropertyToCloudFormation(properties.targetGroupsConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetLoadBalancersConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.LoadBalancersConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.LoadBalancersConfigProperty>();\n    ret.addPropertyResult('classicLoadBalancersConfig', 'ClassicLoadBalancersConfig', properties.ClassicLoadBalancersConfig != null ? CfnSpotFleetClassicLoadBalancersConfigPropertyFromCloudFormation(properties.ClassicLoadBalancersConfig) : undefined);\n    ret.addPropertyResult('targetGroupsConfig', 'TargetGroupsConfig', properties.TargetGroupsConfig != null ? CfnSpotFleetTargetGroupsConfigPropertyFromCloudFormation(properties.TargetGroupsConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                              \n    export interface MemoryGiBPerVCpuRequestProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemoryGiBPerVCpuRequestProperty`\n *\n * @param properties - the TypeScript properties of a `MemoryGiBPerVCpuRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_MemoryGiBPerVCpuRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"MemoryGiBPerVCpuRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.MemoryGiBPerVCpuRequest` resource\n *\n * @param properties - the TypeScript properties of a `MemoryGiBPerVCpuRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.MemoryGiBPerVCpuRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_MemoryGiBPerVCpuRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.MemoryGiBPerVCpuRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.MemoryGiBPerVCpuRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                              \n    export interface MemoryMiBRequestProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                       \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemoryMiBRequestProperty`\n *\n * @param properties - the TypeScript properties of a `MemoryMiBRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_MemoryMiBRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"MemoryMiBRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.MemoryMiBRequest` resource\n *\n * @param properties - the TypeScript properties of a `MemoryMiBRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.MemoryMiBRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetMemoryMiBRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_MemoryMiBRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetMemoryMiBRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.MemoryMiBRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.MemoryMiBRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                              \n    export interface NetworkInterfaceCountRequestProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkInterfaceCountRequestProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceCountRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_NetworkInterfaceCountRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"NetworkInterfaceCountRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.NetworkInterfaceCountRequest` resource\n *\n * @param properties - the TypeScript properties of a `NetworkInterfaceCountRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.NetworkInterfaceCountRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_NetworkInterfaceCountRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.NetworkInterfaceCountRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.NetworkInterfaceCountRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                             \n    export interface PrivateIpAddressSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly primary?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly privateIpAddress: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrivateIpAddressSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddressSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_PrivateIpAddressSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.requiredValidator)(properties.privateIpAddress));\n    errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));\n    return errors.wrap('supplied properties not correct for \"PrivateIpAddressSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.PrivateIpAddressSpecification` resource\n *\n * @param properties - the TypeScript properties of a `PrivateIpAddressSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.PrivateIpAddressSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetPrivateIpAddressSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Primary: cdk.booleanToCloudFormation(properties.primary),\n        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetPrivateIpAddressSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.PrivateIpAddressSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.PrivateIpAddressSpecificationProperty>();\n    ret.addPropertyResult('primary', 'Primary', properties.Primary != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Primary) : undefined);\n    ret.addPropertyResult('privateIpAddress', 'PrivateIpAddress', cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\nn    export interface SpotCapacityRebalanceProperty {\nn        readonly replacementStrategy?: string;\nn        readonly terminationDelay?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotCapacityRebalanceProperty`\n *\n * @param properties - the TypeScript properties of a `SpotCapacityRebalanceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotCapacityRebalancePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replacementStrategy', cdk.validateString)(properties.replacementStrategy));\n    errors.collect(cdk.propertyValidator('terminationDelay', cdk.validateNumber)(properties.terminationDelay));\n    return errors.wrap('supplied properties not correct for \"SpotCapacityRebalanceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotCapacityRebalance` resource\n *\n * @param properties - the TypeScript properties of a `SpotCapacityRebalanceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotCapacityRebalance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotCapacityRebalancePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotCapacityRebalancePropertyValidator(properties).assertSuccess();\n    return {\n        ReplacementStrategy: cdk.stringToCloudFormation(properties.replacementStrategy),\n        TerminationDelay: cdk.numberToCloudFormation(properties.terminationDelay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotCapacityRebalancePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotCapacityRebalanceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotCapacityRebalanceProperty>();\n    ret.addPropertyResult('replacementStrategy', 'ReplacementStrategy', properties.ReplacementStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.ReplacementStrategy) : undefined);\n    ret.addPropertyResult('terminationDelay', 'TerminationDelay', properties.TerminationDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationDelay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\nn    export interface SpotFleetLaunchSpecificationProperty {\nn        readonly blockDeviceMappings?: Array<CfnSpotFleet.BlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly ebsOptimized?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly iamInstanceProfile?: CfnSpotFleet.IamInstanceProfileSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                     \n        readonly imageId: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly instanceRequirements?: CfnSpotFleet.InstanceRequirementsRequestProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                         \n        readonly kernelId?: string;\n                                                                                                                                                                                                                                                                            \n        readonly keyName?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly monitoring?: CfnSpotFleet.SpotFleetMonitoringProperty | cdk.IResolvable;\nn        readonly networkInterfaces?: Array<CfnSpotFleet.InstanceNetworkInterfaceSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly placement?: CfnSpotFleet.SpotPlacementProperty | cdk.IResolvable;\nn        readonly ramdiskId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly securityGroups?: Array<CfnSpotFleet.GroupIdentifierProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly spotPrice?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly subnetId?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly tagSpecifications?: Array<CfnSpotFleet.SpotFleetTagSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                     \n        readonly userData?: string;\nn        readonly weightedCapacity?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotFleetLaunchSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `SpotFleetLaunchSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotFleetLaunchSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(CfnSpotFleet_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));\n    errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));\n    errors.collect(cdk.propertyValidator('iamInstanceProfile', CfnSpotFleet_IamInstanceProfileSpecificationPropertyValidator)(properties.iamInstanceProfile));\n    errors.collect(cdk.propertyValidator('imageId', cdk.requiredValidator)(properties.imageId));\n    errors.collect(cdk.propertyValidator('imageId', cdk.validateString)(properties.imageId));\n    errors.collect(cdk.propertyValidator('instanceRequirements', CfnSpotFleet_InstanceRequirementsRequestPropertyValidator)(properties.instanceRequirements));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('kernelId', cdk.validateString)(properties.kernelId));\n    errors.collect(cdk.propertyValidator('keyName', cdk.validateString)(properties.keyName));\n    errors.collect(cdk.propertyValidator('monitoring', CfnSpotFleet_SpotFleetMonitoringPropertyValidator)(properties.monitoring));\n    errors.collect(cdk.propertyValidator('networkInterfaces', cdk.listValidator(CfnSpotFleet_InstanceNetworkInterfaceSpecificationPropertyValidator))(properties.networkInterfaces));\n    errors.collect(cdk.propertyValidator('placement', CfnSpotFleet_SpotPlacementPropertyValidator)(properties.placement));\n    errors.collect(cdk.propertyValidator('ramdiskId', cdk.validateString)(properties.ramdiskId));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(CfnSpotFleet_GroupIdentifierPropertyValidator))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('spotPrice', cdk.validateString)(properties.spotPrice));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(CfnSpotFleet_SpotFleetTagSpecificationPropertyValidator))(properties.tagSpecifications));\n    errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));\n    errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateNumber)(properties.weightedCapacity));\n    return errors.wrap('supplied properties not correct for \"SpotFleetLaunchSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetLaunchSpecification` resource\n *\n * @param properties - the TypeScript properties of a `SpotFleetLaunchSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetLaunchSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotFleetLaunchSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotFleetLaunchSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        BlockDeviceMappings: cdk.listMapper(cfnSpotFleetBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),\n        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),\n        IamInstanceProfile: cfnSpotFleetIamInstanceProfileSpecificationPropertyToCloudFormation(properties.iamInstanceProfile),\n        ImageId: cdk.stringToCloudFormation(properties.imageId),\n        InstanceRequirements: cfnSpotFleetInstanceRequirementsRequestPropertyToCloudFormation(properties.instanceRequirements),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        KernelId: cdk.stringToCloudFormation(properties.kernelId),\n        KeyName: cdk.stringToCloudFormation(properties.keyName),\n        Monitoring: cfnSpotFleetSpotFleetMonitoringPropertyToCloudFormation(properties.monitoring),\n        NetworkInterfaces: cdk.listMapper(cfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyToCloudFormation)(properties.networkInterfaces),\n        Placement: cfnSpotFleetSpotPlacementPropertyToCloudFormation(properties.placement),\n        RamdiskId: cdk.stringToCloudFormation(properties.ramdiskId),\n        SecurityGroups: cdk.listMapper(cfnSpotFleetGroupIdentifierPropertyToCloudFormation)(properties.securityGroups),\n        SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        TagSpecifications: cdk.listMapper(cfnSpotFleetSpotFleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),\n        UserData: cdk.stringToCloudFormation(properties.userData),\n        WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotFleetLaunchSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotFleetLaunchSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotFleetLaunchSpecificationProperty>();\n    ret.addPropertyResult('blockDeviceMappings', 'BlockDeviceMappings', properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : undefined);\n    ret.addPropertyResult('ebsOptimized', 'EbsOptimized', properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : undefined);\n    ret.addPropertyResult('iamInstanceProfile', 'IamInstanceProfile', properties.IamInstanceProfile != null ? CfnSpotFleetIamInstanceProfileSpecificationPropertyFromCloudFormation(properties.IamInstanceProfile) : undefined);\n    ret.addPropertyResult('imageId', 'ImageId', cfn_parse.FromCloudFormation.getString(properties.ImageId));\n    ret.addPropertyResult('instanceRequirements', 'InstanceRequirements', properties.InstanceRequirements != null ? CfnSpotFleetInstanceRequirementsRequestPropertyFromCloudFormation(properties.InstanceRequirements) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('kernelId', 'KernelId', properties.KernelId != null ? cfn_parse.FromCloudFormation.getString(properties.KernelId) : undefined);\n    ret.addPropertyResult('keyName', 'KeyName', properties.KeyName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyName) : undefined);\n    ret.addPropertyResult('monitoring', 'Monitoring', properties.Monitoring != null ? CfnSpotFleetSpotFleetMonitoringPropertyFromCloudFormation(properties.Monitoring) : undefined);\n    ret.addPropertyResult('networkInterfaces', 'NetworkInterfaces', properties.NetworkInterfaces != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyFromCloudFormation)(properties.NetworkInterfaces) : undefined);\n    ret.addPropertyResult('placement', 'Placement', properties.Placement != null ? CfnSpotFleetSpotPlacementPropertyFromCloudFormation(properties.Placement) : undefined);\n    ret.addPropertyResult('ramdiskId', 'RamdiskId', properties.RamdiskId != null ? cfn_parse.FromCloudFormation.getString(properties.RamdiskId) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetGroupIdentifierPropertyFromCloudFormation)(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('spotPrice', 'SpotPrice', properties.SpotPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotPrice) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('tagSpecifications', 'TagSpecifications', properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetSpotFleetTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : undefined);\n    ret.addPropertyResult('userData', 'UserData', properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : undefined);\n    ret.addPropertyResult('weightedCapacity', 'WeightedCapacity', properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.WeightedCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                        \n    export interface SpotFleetMonitoringProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotFleetMonitoringProperty`\n *\n * @param properties - the TypeScript properties of a `SpotFleetMonitoringProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotFleetMonitoringPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"SpotFleetMonitoringProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetMonitoring` resource\n *\n * @param properties - the TypeScript properties of a `SpotFleetMonitoringProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetMonitoring` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotFleetMonitoringPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotFleetMonitoringPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotFleetMonitoringPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotFleetMonitoringProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotFleetMonitoringProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\nn    export interface SpotFleetRequestConfigDataProperty {\nn        readonly allocationStrategy?: string;\n                                                                                                                                                                                                                                                        \n        readonly context?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly excessCapacityTerminationPolicy?: string;\nn        readonly iamFleetRole: string;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly instanceInterruptionBehavior?: string;\nn        readonly instancePoolsToUseCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly launchSpecifications?: Array<CfnSpotFleet.SpotFleetLaunchSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly launchTemplateConfigs?: Array<CfnSpotFleet.LaunchTemplateConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly loadBalancersConfig?: CfnSpotFleet.LoadBalancersConfigProperty | cdk.IResolvable;\nn        readonly onDemandAllocationStrategy?: string;\nn        readonly onDemandMaxTotalPrice?: string;\nn        readonly onDemandTargetCapacity?: number;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly replaceUnhealthyInstances?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly spotMaintenanceStrategies?: CfnSpotFleet.SpotMaintenanceStrategiesProperty | cdk.IResolvable;\nn        readonly spotMaxTotalPrice?: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly spotPrice?: string;\nn        readonly targetCapacity: number;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly targetCapacityUnitType?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly terminateInstancesWithExpiration?: boolean | cdk.IResolvable;\nn        readonly type?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly validFrom?: string;\nn        readonly validUntil?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotFleetRequestConfigDataProperty`\n *\n * @param properties - the TypeScript properties of a `SpotFleetRequestConfigDataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotFleetRequestConfigDataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));\n    errors.collect(cdk.propertyValidator('context', cdk.validateString)(properties.context));\n    errors.collect(cdk.propertyValidator('excessCapacityTerminationPolicy', cdk.validateString)(properties.excessCapacityTerminationPolicy));\n    errors.collect(cdk.propertyValidator('iamFleetRole', cdk.requiredValidator)(properties.iamFleetRole));\n    errors.collect(cdk.propertyValidator('iamFleetRole', cdk.validateString)(properties.iamFleetRole));\n    errors.collect(cdk.propertyValidator('instanceInterruptionBehavior', cdk.validateString)(properties.instanceInterruptionBehavior));\n    errors.collect(cdk.propertyValidator('instancePoolsToUseCount', cdk.validateNumber)(properties.instancePoolsToUseCount));\n    errors.collect(cdk.propertyValidator('launchSpecifications', cdk.listValidator(CfnSpotFleet_SpotFleetLaunchSpecificationPropertyValidator))(properties.launchSpecifications));\n    errors.collect(cdk.propertyValidator('launchTemplateConfigs', cdk.listValidator(CfnSpotFleet_LaunchTemplateConfigPropertyValidator))(properties.launchTemplateConfigs));\n    errors.collect(cdk.propertyValidator('loadBalancersConfig', CfnSpotFleet_LoadBalancersConfigPropertyValidator)(properties.loadBalancersConfig));\n    errors.collect(cdk.propertyValidator('onDemandAllocationStrategy', cdk.validateString)(properties.onDemandAllocationStrategy));\n    errors.collect(cdk.propertyValidator('onDemandMaxTotalPrice', cdk.validateString)(properties.onDemandMaxTotalPrice));\n    errors.collect(cdk.propertyValidator('onDemandTargetCapacity', cdk.validateNumber)(properties.onDemandTargetCapacity));\n    errors.collect(cdk.propertyValidator('replaceUnhealthyInstances', cdk.validateBoolean)(properties.replaceUnhealthyInstances));\n    errors.collect(cdk.propertyValidator('spotMaintenanceStrategies', CfnSpotFleet_SpotMaintenanceStrategiesPropertyValidator)(properties.spotMaintenanceStrategies));\n    errors.collect(cdk.propertyValidator('spotMaxTotalPrice', cdk.validateString)(properties.spotMaxTotalPrice));\n    errors.collect(cdk.propertyValidator('spotPrice', cdk.validateString)(properties.spotPrice));\n    errors.collect(cdk.propertyValidator('targetCapacity', cdk.requiredValidator)(properties.targetCapacity));\n    errors.collect(cdk.propertyValidator('targetCapacity', cdk.validateNumber)(properties.targetCapacity));\n    errors.collect(cdk.propertyValidator('targetCapacityUnitType', cdk.validateString)(properties.targetCapacityUnitType));\n    errors.collect(cdk.propertyValidator('terminateInstancesWithExpiration', cdk.validateBoolean)(properties.terminateInstancesWithExpiration));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('validFrom', cdk.validateString)(properties.validFrom));\n    errors.collect(cdk.propertyValidator('validUntil', cdk.validateString)(properties.validUntil));\n    return errors.wrap('supplied properties not correct for \"SpotFleetRequestConfigDataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetRequestConfigData` resource\n *\n * @param properties - the TypeScript properties of a `SpotFleetRequestConfigDataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetRequestConfigData` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotFleetRequestConfigDataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotFleetRequestConfigDataPropertyValidator(properties).assertSuccess();\n    return {\n        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),\n        Context: cdk.stringToCloudFormation(properties.context),\n        ExcessCapacityTerminationPolicy: cdk.stringToCloudFormation(properties.excessCapacityTerminationPolicy),\n        IamFleetRole: cdk.stringToCloudFormation(properties.iamFleetRole),\n        InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),\n        InstancePoolsToUseCount: cdk.numberToCloudFormation(properties.instancePoolsToUseCount),\n        LaunchSpecifications: cdk.listMapper(cfnSpotFleetSpotFleetLaunchSpecificationPropertyToCloudFormation)(properties.launchSpecifications),\n        LaunchTemplateConfigs: cdk.listMapper(cfnSpotFleetLaunchTemplateConfigPropertyToCloudFormation)(properties.launchTemplateConfigs),\n        LoadBalancersConfig: cfnSpotFleetLoadBalancersConfigPropertyToCloudFormation(properties.loadBalancersConfig),\n        OnDemandAllocationStrategy: cdk.stringToCloudFormation(properties.onDemandAllocationStrategy),\n        OnDemandMaxTotalPrice: cdk.stringToCloudFormation(properties.onDemandMaxTotalPrice),\n        OnDemandTargetCapacity: cdk.numberToCloudFormation(properties.onDemandTargetCapacity),\n        ReplaceUnhealthyInstances: cdk.booleanToCloudFormation(properties.replaceUnhealthyInstances),\n        SpotMaintenanceStrategies: cfnSpotFleetSpotMaintenanceStrategiesPropertyToCloudFormation(properties.spotMaintenanceStrategies),\n        SpotMaxTotalPrice: cdk.stringToCloudFormation(properties.spotMaxTotalPrice),\n        SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),\n        TargetCapacity: cdk.numberToCloudFormation(properties.targetCapacity),\n        TargetCapacityUnitType: cdk.stringToCloudFormation(properties.targetCapacityUnitType),\n        TerminateInstancesWithExpiration: cdk.booleanToCloudFormation(properties.terminateInstancesWithExpiration),\n        Type: cdk.stringToCloudFormation(properties.type),\n        ValidFrom: cdk.stringToCloudFormation(properties.validFrom),\n        ValidUntil: cdk.stringToCloudFormation(properties.validUntil),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotFleetRequestConfigDataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotFleetRequestConfigDataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotFleetRequestConfigDataProperty>();\n    ret.addPropertyResult('allocationStrategy', 'AllocationStrategy', properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : undefined);\n    ret.addPropertyResult('context', 'Context', properties.Context != null ? cfn_parse.FromCloudFormation.getString(properties.Context) : undefined);\n    ret.addPropertyResult('excessCapacityTerminationPolicy', 'ExcessCapacityTerminationPolicy', properties.ExcessCapacityTerminationPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.ExcessCapacityTerminationPolicy) : undefined);\n    ret.addPropertyResult('iamFleetRole', 'IamFleetRole', cfn_parse.FromCloudFormation.getString(properties.IamFleetRole));\n    ret.addPropertyResult('instanceInterruptionBehavior', 'InstanceInterruptionBehavior', properties.InstanceInterruptionBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInterruptionBehavior) : undefined);\n    ret.addPropertyResult('instancePoolsToUseCount', 'InstancePoolsToUseCount', properties.InstancePoolsToUseCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstancePoolsToUseCount) : undefined);\n    ret.addPropertyResult('launchSpecifications', 'LaunchSpecifications', properties.LaunchSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetSpotFleetLaunchSpecificationPropertyFromCloudFormation)(properties.LaunchSpecifications) : undefined);\n    ret.addPropertyResult('launchTemplateConfigs', 'LaunchTemplateConfigs', properties.LaunchTemplateConfigs != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetLaunchTemplateConfigPropertyFromCloudFormation)(properties.LaunchTemplateConfigs) : undefined);\n    ret.addPropertyResult('loadBalancersConfig', 'LoadBalancersConfig', properties.LoadBalancersConfig != null ? CfnSpotFleetLoadBalancersConfigPropertyFromCloudFormation(properties.LoadBalancersConfig) : undefined);\n    ret.addPropertyResult('onDemandAllocationStrategy', 'OnDemandAllocationStrategy', properties.OnDemandAllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.OnDemandAllocationStrategy) : undefined);\n    ret.addPropertyResult('onDemandMaxTotalPrice', 'OnDemandMaxTotalPrice', properties.OnDemandMaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.OnDemandMaxTotalPrice) : undefined);\n    ret.addPropertyResult('onDemandTargetCapacity', 'OnDemandTargetCapacity', properties.OnDemandTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandTargetCapacity) : undefined);\n    ret.addPropertyResult('replaceUnhealthyInstances', 'ReplaceUnhealthyInstances', properties.ReplaceUnhealthyInstances != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReplaceUnhealthyInstances) : undefined);\n    ret.addPropertyResult('spotMaintenanceStrategies', 'SpotMaintenanceStrategies', properties.SpotMaintenanceStrategies != null ? CfnSpotFleetSpotMaintenanceStrategiesPropertyFromCloudFormation(properties.SpotMaintenanceStrategies) : undefined);\n    ret.addPropertyResult('spotMaxTotalPrice', 'SpotMaxTotalPrice', properties.SpotMaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotMaxTotalPrice) : undefined);\n    ret.addPropertyResult('spotPrice', 'SpotPrice', properties.SpotPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotPrice) : undefined);\n    ret.addPropertyResult('targetCapacity', 'TargetCapacity', cfn_parse.FromCloudFormation.getNumber(properties.TargetCapacity));\n    ret.addPropertyResult('targetCapacityUnitType', 'TargetCapacityUnitType', properties.TargetCapacityUnitType != null ? cfn_parse.FromCloudFormation.getString(properties.TargetCapacityUnitType) : undefined);\n    ret.addPropertyResult('terminateInstancesWithExpiration', 'TerminateInstancesWithExpiration', properties.TerminateInstancesWithExpiration != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TerminateInstancesWithExpiration) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('validFrom', 'ValidFrom', properties.ValidFrom != null ? cfn_parse.FromCloudFormation.getString(properties.ValidFrom) : undefined);\n    ret.addPropertyResult('validUntil', 'ValidUntil', properties.ValidUntil != null ? cfn_parse.FromCloudFormation.getString(properties.ValidUntil) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                         \n    export interface SpotFleetTagSpecificationProperty {\nn        readonly resourceType?: string;\n                                                                                                                                                                                                                                                   \n        readonly tags?: cdk.CfnTag[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotFleetTagSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `SpotFleetTagSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotFleetTagSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"SpotFleetTagSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetTagSpecification` resource\n *\n * @param properties - the TypeScript properties of a `SpotFleetTagSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotFleetTagSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotFleetTagSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotFleetTagSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotFleetTagSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotFleetTagSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotFleetTagSpecificationProperty>();\n    ret.addPropertyResult('resourceType', 'ResourceType', properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                                        \n    export interface SpotMaintenanceStrategiesProperty {\nn        readonly capacityRebalance?: CfnSpotFleet.SpotCapacityRebalanceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotMaintenanceStrategiesProperty`\n *\n * @param properties - the TypeScript properties of a `SpotMaintenanceStrategiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotMaintenanceStrategiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityRebalance', CfnSpotFleet_SpotCapacityRebalancePropertyValidator)(properties.capacityRebalance));\n    return errors.wrap('supplied properties not correct for \"SpotMaintenanceStrategiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotMaintenanceStrategies` resource\n *\n * @param properties - the TypeScript properties of a `SpotMaintenanceStrategiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotMaintenanceStrategies` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotMaintenanceStrategiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotMaintenanceStrategiesPropertyValidator(properties).assertSuccess();\n    return {\n        CapacityRebalance: cfnSpotFleetSpotCapacityRebalancePropertyToCloudFormation(properties.capacityRebalance),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotMaintenanceStrategiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotMaintenanceStrategiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotMaintenanceStrategiesProperty>();\n    ret.addPropertyResult('capacityRebalance', 'CapacityRebalance', properties.CapacityRebalance != null ? CfnSpotFleetSpotCapacityRebalancePropertyFromCloudFormation(properties.CapacityRebalance) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                            \n    export interface SpotPlacementProperty {\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                       \n        readonly groupName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly tenancy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpotPlacementProperty`\n *\n * @param properties - the TypeScript properties of a `SpotPlacementProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_SpotPlacementPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));\n    return errors.wrap('supplied properties not correct for \"SpotPlacementProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotPlacement` resource\n *\n * @param properties - the TypeScript properties of a `SpotPlacementProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.SpotPlacement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetSpotPlacementPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_SpotPlacementPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        Tenancy: cdk.stringToCloudFormation(properties.tenancy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetSpotPlacementPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.SpotPlacementProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.SpotPlacementProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('tenancy', 'Tenancy', properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                               \n    export interface TargetGroupProperty {\n                                                                                                                                                                                                                                                                \n        readonly arn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetGroupProperty`\n *\n * @param properties - the TypeScript properties of a `TargetGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_TargetGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    return errors.wrap('supplied properties not correct for \"TargetGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.TargetGroup` resource\n *\n * @param properties - the TypeScript properties of a `TargetGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.TargetGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetTargetGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_TargetGroupPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetTargetGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.TargetGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.TargetGroupProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                                                                               \n    export interface TargetGroupsConfigProperty {\n                                                                                                                                                                                                                                                              \n        readonly targetGroups: Array<CfnSpotFleet.TargetGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetGroupsConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TargetGroupsConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_TargetGroupsConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('targetGroups', cdk.requiredValidator)(properties.targetGroups));\n    errors.collect(cdk.propertyValidator('targetGroups', cdk.listValidator(CfnSpotFleet_TargetGroupPropertyValidator))(properties.targetGroups));\n    return errors.wrap('supplied properties not correct for \"TargetGroupsConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.TargetGroupsConfig` resource\n *\n * @param properties - the TypeScript properties of a `TargetGroupsConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.TargetGroupsConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetTargetGroupsConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_TargetGroupsConfigPropertyValidator(properties).assertSuccess();\n    return {\n        TargetGroups: cdk.listMapper(cfnSpotFleetTargetGroupPropertyToCloudFormation)(properties.targetGroups),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetTargetGroupsConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.TargetGroupsConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.TargetGroupsConfigProperty>();\n    ret.addPropertyResult('targetGroups', 'TargetGroups', cfn_parse.FromCloudFormation.getArray(CfnSpotFleetTargetGroupPropertyFromCloudFormation)(properties.TargetGroups));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                                                    \n    export interface TotalLocalStorageGBRequestProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TotalLocalStorageGBRequestProperty`\n *\n * @param properties - the TypeScript properties of a `TotalLocalStorageGBRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_TotalLocalStorageGBRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"TotalLocalStorageGBRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.TotalLocalStorageGBRequest` resource\n *\n * @param properties - the TypeScript properties of a `TotalLocalStorageGBRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.TotalLocalStorageGBRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_TotalLocalStorageGBRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.TotalLocalStorageGBRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.TotalLocalStorageGBRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSpotFleet {\n                                                                                                                                                                                                                                                          \n    export interface VCpuCountRangeRequestProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly max?: number;\n                                                                                                                                                                                                                                                                                                        \n        readonly min?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VCpuCountRangeRequestProperty`\n *\n * @param properties - the TypeScript properties of a `VCpuCountRangeRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSpotFleet_VCpuCountRangeRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('max', cdk.validateNumber)(properties.max));\n    errors.collect(cdk.propertyValidator('min', cdk.validateNumber)(properties.min));\n    return errors.wrap('supplied properties not correct for \"VCpuCountRangeRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.VCpuCountRangeRequest` resource\n *\n * @param properties - the TypeScript properties of a `VCpuCountRangeRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SpotFleet.VCpuCountRangeRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSpotFleetVCpuCountRangeRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSpotFleet_VCpuCountRangeRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Max: cdk.numberToCloudFormation(properties.max),\n        Min: cdk.numberToCloudFormation(properties.min),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSpotFleetVCpuCountRangeRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpotFleet.VCpuCountRangeRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpotFleet.VCpuCountRangeRequestProperty>();\n    ret.addPropertyResult('max', 'Max', properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : undefined);\n    ret.addPropertyResult('min', 'Min', properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                            \nexport interface CfnSubnetProps {\n\n                                                                                                                                                                                                                                                                                                               \n    readonly cidrBlock: string;\n\n                                                                                                                                                                                                                                                                                               \n    readonly vpcId: string;\n\nn    readonly assignIpv6AddressOnCreation?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly ipv6CidrBlock?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly mapPublicIpOnLaunch?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                              \n    readonly outpostArn?: string;\n\n                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSubnetProps`\n *\n * @param properties - the TypeScript properties of a `CfnSubnetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSubnetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assignIpv6AddressOnCreation', cdk.validateBoolean)(properties.assignIpv6AddressOnCreation));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('cidrBlock', cdk.requiredValidator)(properties.cidrBlock));\n    errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));\n    errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));\n    errors.collect(cdk.propertyValidator('mapPublicIpOnLaunch', cdk.validateBoolean)(properties.mapPublicIpOnLaunch));\n    errors.collect(cdk.propertyValidator('outpostArn', cdk.validateString)(properties.outpostArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnSubnetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Subnet` resource\n *\n * @param properties - the TypeScript properties of a `CfnSubnetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Subnet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSubnetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSubnetPropsValidator(properties).assertSuccess();\n    return {\n        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        AssignIpv6AddressOnCreation: cdk.booleanToCloudFormation(properties.assignIpv6AddressOnCreation),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),\n        MapPublicIpOnLaunch: cdk.booleanToCloudFormation(properties.mapPublicIpOnLaunch),\n        OutpostArn: cdk.stringToCloudFormation(properties.outpostArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSubnetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSubnetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSubnetProps>();\n    ret.addPropertyResult('cidrBlock', 'CidrBlock', cfn_parse.FromCloudFormation.getString(properties.CidrBlock));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('assignIpv6AddressOnCreation', 'AssignIpv6AddressOnCreation', properties.AssignIpv6AddressOnCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssignIpv6AddressOnCreation) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('ipv6CidrBlock', 'Ipv6CidrBlock', properties.Ipv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock) : undefined);\n    ret.addPropertyResult('mapPublicIpOnLaunch', 'MapPublicIpOnLaunch', properties.MapPublicIpOnLaunch != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MapPublicIpOnLaunch) : undefined);\n    ret.addPropertyResult('outpostArn', 'OutpostArn', properties.OutpostArn != null ? cfn_parse.FromCloudFormation.getString(properties.OutpostArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSubnet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::Subnet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSubnet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSubnetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSubnet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                \n    public readonly attrAvailabilityZone: string;\n\n                                                                                                                                                                       \n    public readonly attrIpv6CidrBlocks: string[];\n\n                                                                                                                                                                           \n    public readonly attrNetworkAclAssociationId: string;\n\n                                                                                                                \n    public readonly attrOutpostArn: string;\n\n                                                                                                                 \n    public readonly attrVpcId: string;\n\n                                                                                                                                                                                                                                                                                                               \n    public cidrBlock: string;\n\n                                                                                                                                                                                                                                                                                               \n    public vpcId: string;\n\nn    public assignIpv6AddressOnCreation: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                    \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public ipv6CidrBlock: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public mapPublicIpOnLaunch: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                              \n    public outpostArn: string | undefined;\n\n                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnSubnetProps) {\n        super(scope, id, { type: CfnSubnet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cidrBlock', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrAvailabilityZone = cdk.Token.asString(this.getAtt('AvailabilityZone'));\n        this.attrIpv6CidrBlocks = cdk.Token.asList(this.getAtt('Ipv6CidrBlocks'));\n        this.attrNetworkAclAssociationId = cdk.Token.asString(this.getAtt('NetworkAclAssociationId'));\n        this.attrOutpostArn = cdk.Token.asString(this.getAtt('OutpostArn'));\n        this.attrVpcId = cdk.Token.asString(this.getAtt('VpcId'));\n\n        this.cidrBlock = props.cidrBlock;\n        this.vpcId = props.vpcId;\n        this.assignIpv6AddressOnCreation = props.assignIpv6AddressOnCreation;\n        this.availabilityZone = props.availabilityZone;\n        this.ipv6CidrBlock = props.ipv6CidrBlock;\n        this.mapPublicIpOnLaunch = props.mapPublicIpOnLaunch;\n        this.outpostArn = props.outpostArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::Subnet\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSubnet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cidrBlock: this.cidrBlock,\n            vpcId: this.vpcId,\n            assignIpv6AddressOnCreation: this.assignIpv6AddressOnCreation,\n            availabilityZone: this.availabilityZone,\n            ipv6CidrBlock: this.ipv6CidrBlock,\n            mapPublicIpOnLaunch: this.mapPublicIpOnLaunch,\n            outpostArn: this.outpostArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSubnetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                              \nexport interface CfnSubnetCidrBlockProps {\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly ipv6CidrBlock: string;\n\n                                                                                                                                                                                                     \n    readonly subnetId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSubnetCidrBlockProps`\n *\n * @param properties - the TypeScript properties of a `CfnSubnetCidrBlockProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSubnetCidrBlockPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.requiredValidator)(properties.ipv6CidrBlock));\n    errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"CfnSubnetCidrBlockProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SubnetCidrBlock` resource\n *\n * @param properties - the TypeScript properties of a `CfnSubnetCidrBlockProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SubnetCidrBlock` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSubnetCidrBlockPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSubnetCidrBlockPropsValidator(properties).assertSuccess();\n    return {\n        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSubnetCidrBlockPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSubnetCidrBlockProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSubnetCidrBlockProps>();\n    ret.addPropertyResult('ipv6CidrBlock', 'Ipv6CidrBlock', cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock));\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnSubnetCidrBlock extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SubnetCidrBlock\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSubnetCidrBlock {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSubnetCidrBlockPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSubnetCidrBlock(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public ipv6CidrBlock: string;\n\n                                                                                                                                                                                                     \n    public subnetId: string;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnSubnetCidrBlockProps) {\n        super(scope, id, { type: CfnSubnetCidrBlock.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'ipv6CidrBlock', this);\n        cdk.requireProperty(props, 'subnetId', this);\n\n        this.ipv6CidrBlock = props.ipv6CidrBlock;\n        this.subnetId = props.subnetId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSubnetCidrBlock.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ipv6CidrBlock: this.ipv6CidrBlock,\n            subnetId: this.subnetId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSubnetCidrBlockPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                   \nexport interface CfnSubnetNetworkAclAssociationProps {\n\n                                                                                                                                                                                                                                   \n    readonly networkAclId: string;\n\n                                                                                                                                                                                                                               \n    readonly subnetId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSubnetNetworkAclAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnSubnetNetworkAclAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSubnetNetworkAclAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('networkAclId', cdk.requiredValidator)(properties.networkAclId));\n    errors.collect(cdk.propertyValidator('networkAclId', cdk.validateString)(properties.networkAclId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"CfnSubnetNetworkAclAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SubnetNetworkAclAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnSubnetNetworkAclAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SubnetNetworkAclAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSubnetNetworkAclAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSubnetNetworkAclAssociationPropsValidator(properties).assertSuccess();\n    return {\n        NetworkAclId: cdk.stringToCloudFormation(properties.networkAclId),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSubnetNetworkAclAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSubnetNetworkAclAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSubnetNetworkAclAssociationProps>();\n    ret.addPropertyResult('networkAclId', 'NetworkAclId', cfn_parse.FromCloudFormation.getString(properties.NetworkAclId));\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSubnetNetworkAclAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SubnetNetworkAclAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSubnetNetworkAclAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSubnetNetworkAclAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSubnetNetworkAclAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                           \n    public readonly attrAssociationId: string;\n\n                                                                                                                                                                                                                                   \n    public networkAclId: string;\n\n                                                                                                                                                                                                                               \n    public subnetId: string;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnSubnetNetworkAclAssociationProps) {\n        super(scope, id, { type: CfnSubnetNetworkAclAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'networkAclId', this);\n        cdk.requireProperty(props, 'subnetId', this);\n        this.attrAssociationId = cdk.Token.asString(this.getAtt('AssociationId'));\n\n        this.networkAclId = props.networkAclId;\n        this.subnetId = props.subnetId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSubnetNetworkAclAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            networkAclId: this.networkAclId,\n            subnetId: this.subnetId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSubnetNetworkAclAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                      \nexport interface CfnSubnetRouteTableAssociationProps {\n\n                                                                                                                                                                                                                                                                                                                \n    readonly routeTableId: string;\n\n                                                                                                                                                                                                                             \n    readonly subnetId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSubnetRouteTableAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnSubnetRouteTableAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSubnetRouteTableAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('routeTableId', cdk.requiredValidator)(properties.routeTableId));\n    errors.collect(cdk.propertyValidator('routeTableId', cdk.validateString)(properties.routeTableId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"CfnSubnetRouteTableAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::SubnetRouteTableAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnSubnetRouteTableAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::SubnetRouteTableAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSubnetRouteTableAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSubnetRouteTableAssociationPropsValidator(properties).assertSuccess();\n    return {\n        RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSubnetRouteTableAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSubnetRouteTableAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSubnetRouteTableAssociationProps>();\n    ret.addPropertyResult('routeTableId', 'RouteTableId', cfn_parse.FromCloudFormation.getString(properties.RouteTableId));\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSubnetRouteTableAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::SubnetRouteTableAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSubnetRouteTableAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSubnetRouteTableAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSubnetRouteTableAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                       \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                \n    public routeTableId: string;\n\n                                                                                                                                                                                                                             \n    public subnetId: string;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnSubnetRouteTableAssociationProps) {\n        super(scope, id, { type: CfnSubnetRouteTableAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'routeTableId', this);\n        cdk.requireProperty(props, 'subnetId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.routeTableId = props.routeTableId;\n        this.subnetId = props.subnetId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSubnetRouteTableAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            routeTableId: this.routeTableId,\n            subnetId: this.subnetId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSubnetRouteTableAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnTrafficMirrorFilterProps {\n\n                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                           \n    readonly networkServices?: string[];\n\n                                                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTrafficMirrorFilterProps`\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorFilterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrafficMirrorFilterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('networkServices', cdk.listValidator(cdk.validateString))(properties.networkServices));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnTrafficMirrorFilterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorFilter` resource\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorFilterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrafficMirrorFilterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrafficMirrorFilterPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        NetworkServices: cdk.listMapper(cdk.stringToCloudFormation)(properties.networkServices),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrafficMirrorFilterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrafficMirrorFilterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrafficMirrorFilterProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('networkServices', 'NetworkServices', properties.NetworkServices != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NetworkServices) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTrafficMirrorFilter extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TrafficMirrorFilter\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTrafficMirrorFilter {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTrafficMirrorFilterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTrafficMirrorFilter(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                           \n    public networkServices: string[] | undefined;\n\n                                                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnTrafficMirrorFilterProps = {}) {\n        super(scope, id, { type: CfnTrafficMirrorFilter.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.description = props.description;\n        this.networkServices = props.networkServices;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TrafficMirrorFilter\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTrafficMirrorFilter.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            networkServices: this.networkServices,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTrafficMirrorFilterPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                              \nexport interface CfnTrafficMirrorFilterRuleProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly destinationCidrBlock: string;\n\n                                                                                                                                                                                                                                             \n    readonly ruleAction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly ruleNumber: number;\n\n                                                                                                                                                                                                                                                                  \n    readonly sourceCidrBlock: string;\n\n                                                                                                                                                                                                                            \n    readonly trafficDirection: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly trafficMirrorFilterId: string;\n\n                                                                                                                                                                                                                                              \n    readonly description?: string;\n\n                                                                                                                                                                                                                                       \n    readonly destinationPortRange?: CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty | cdk.IResolvable;\n\nn    readonly protocol?: number;\n\n                                                                                                                                                                                                                             \n    readonly sourcePortRange?: CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTrafficMirrorFilterRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorFilterRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrafficMirrorFilterRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.requiredValidator)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('destinationPortRange', CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator)(properties.destinationPortRange));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateNumber)(properties.protocol));\n    errors.collect(cdk.propertyValidator('ruleAction', cdk.requiredValidator)(properties.ruleAction));\n    errors.collect(cdk.propertyValidator('ruleAction', cdk.validateString)(properties.ruleAction));\n    errors.collect(cdk.propertyValidator('ruleNumber', cdk.requiredValidator)(properties.ruleNumber));\n    errors.collect(cdk.propertyValidator('ruleNumber', cdk.validateNumber)(properties.ruleNumber));\n    errors.collect(cdk.propertyValidator('sourceCidrBlock', cdk.requiredValidator)(properties.sourceCidrBlock));\n    errors.collect(cdk.propertyValidator('sourceCidrBlock', cdk.validateString)(properties.sourceCidrBlock));\n    errors.collect(cdk.propertyValidator('sourcePortRange', CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator)(properties.sourcePortRange));\n    errors.collect(cdk.propertyValidator('trafficDirection', cdk.requiredValidator)(properties.trafficDirection));\n    errors.collect(cdk.propertyValidator('trafficDirection', cdk.validateString)(properties.trafficDirection));\n    errors.collect(cdk.propertyValidator('trafficMirrorFilterId', cdk.requiredValidator)(properties.trafficMirrorFilterId));\n    errors.collect(cdk.propertyValidator('trafficMirrorFilterId', cdk.validateString)(properties.trafficMirrorFilterId));\n    return errors.wrap('supplied properties not correct for \"CfnTrafficMirrorFilterRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorFilterRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorFilterRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorFilterRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrafficMirrorFilterRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrafficMirrorFilterRulePropsValidator(properties).assertSuccess();\n    return {\n        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),\n        RuleAction: cdk.stringToCloudFormation(properties.ruleAction),\n        RuleNumber: cdk.numberToCloudFormation(properties.ruleNumber),\n        SourceCidrBlock: cdk.stringToCloudFormation(properties.sourceCidrBlock),\n        TrafficDirection: cdk.stringToCloudFormation(properties.trafficDirection),\n        TrafficMirrorFilterId: cdk.stringToCloudFormation(properties.trafficMirrorFilterId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DestinationPortRange: cfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyToCloudFormation(properties.destinationPortRange),\n        Protocol: cdk.numberToCloudFormation(properties.protocol),\n        SourcePortRange: cfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyToCloudFormation(properties.sourcePortRange),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrafficMirrorFilterRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrafficMirrorFilterRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrafficMirrorFilterRuleProps>();\n    ret.addPropertyResult('destinationCidrBlock', 'DestinationCidrBlock', cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));\n    ret.addPropertyResult('ruleAction', 'RuleAction', cfn_parse.FromCloudFormation.getString(properties.RuleAction));\n    ret.addPropertyResult('ruleNumber', 'RuleNumber', cfn_parse.FromCloudFormation.getNumber(properties.RuleNumber));\n    ret.addPropertyResult('sourceCidrBlock', 'SourceCidrBlock', cfn_parse.FromCloudFormation.getString(properties.SourceCidrBlock));\n    ret.addPropertyResult('trafficDirection', 'TrafficDirection', cfn_parse.FromCloudFormation.getString(properties.TrafficDirection));\n    ret.addPropertyResult('trafficMirrorFilterId', 'TrafficMirrorFilterId', cfn_parse.FromCloudFormation.getString(properties.TrafficMirrorFilterId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('destinationPortRange', 'DestinationPortRange', properties.DestinationPortRange != null ? CfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyFromCloudFormation(properties.DestinationPortRange) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getNumber(properties.Protocol) : undefined);\n    ret.addPropertyResult('sourcePortRange', 'SourcePortRange', properties.SourcePortRange != null ? CfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyFromCloudFormation(properties.SourcePortRange) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnTrafficMirrorFilterRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TrafficMirrorFilterRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTrafficMirrorFilterRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTrafficMirrorFilterRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTrafficMirrorFilterRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                            \n    public destinationCidrBlock: string;\n\n                                                                                                                                                                                                                                             \n    public ruleAction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public ruleNumber: number;\n\n                                                                                                                                                                                                                                                                  \n    public sourceCidrBlock: string;\n\n                                                                                                                                                                                                                            \n    public trafficDirection: string;\n\n                                                                                                                                                                                                                                                                    \n    public trafficMirrorFilterId: string;\n\n                                                                                                                                                                                                                                              \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public destinationPortRange: CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty | cdk.IResolvable | undefined;\n\nn    public protocol: number | undefined;\n\n                                                                                                                                                                                                                             \n    public sourcePortRange: CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnTrafficMirrorFilterRuleProps) {\n        super(scope, id, { type: CfnTrafficMirrorFilterRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'destinationCidrBlock', this);\n        cdk.requireProperty(props, 'ruleAction', this);\n        cdk.requireProperty(props, 'ruleNumber', this);\n        cdk.requireProperty(props, 'sourceCidrBlock', this);\n        cdk.requireProperty(props, 'trafficDirection', this);\n        cdk.requireProperty(props, 'trafficMirrorFilterId', this);\n\n        this.destinationCidrBlock = props.destinationCidrBlock;\n        this.ruleAction = props.ruleAction;\n        this.ruleNumber = props.ruleNumber;\n        this.sourceCidrBlock = props.sourceCidrBlock;\n        this.trafficDirection = props.trafficDirection;\n        this.trafficMirrorFilterId = props.trafficMirrorFilterId;\n        this.description = props.description;\n        this.destinationPortRange = props.destinationPortRange;\n        this.protocol = props.protocol;\n        this.sourcePortRange = props.sourcePortRange;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTrafficMirrorFilterRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinationCidrBlock: this.destinationCidrBlock,\n            ruleAction: this.ruleAction,\n            ruleNumber: this.ruleNumber,\n            sourceCidrBlock: this.sourceCidrBlock,\n            trafficDirection: this.trafficDirection,\n            trafficMirrorFilterId: this.trafficMirrorFilterId,\n            description: this.description,\n            destinationPortRange: this.destinationPortRange,\n            protocol: this.protocol,\n            sourcePortRange: this.sourcePortRange,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTrafficMirrorFilterRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTrafficMirrorFilterRule {\n                                                                                                                                                                                                                                                                         \n    export interface TrafficMirrorPortRangeProperty {\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly fromPort: number;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly toPort: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TrafficMirrorPortRangeProperty`\n *\n * @param properties - the TypeScript properties of a `TrafficMirrorPortRangeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fromPort', cdk.requiredValidator)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('toPort', cdk.requiredValidator)(properties.toPort));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"TrafficMirrorPortRangeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorFilterRule.TrafficMirrorPortRange` resource\n *\n * @param properties - the TypeScript properties of a `TrafficMirrorPortRangeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorFilterRule.TrafficMirrorPortRange` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator(properties).assertSuccess();\n    return {\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrafficMirrorFilterRule.TrafficMirrorPortRangeProperty>();\n    ret.addPropertyResult('fromPort', 'FromPort', cfn_parse.FromCloudFormation.getNumber(properties.FromPort));\n    ret.addPropertyResult('toPort', 'ToPort', cfn_parse.FromCloudFormation.getNumber(properties.ToPort));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnTrafficMirrorSessionProps {\n\n                                                                                                                                                                                                                                           \n    readonly networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly sessionNumber: number;\n\n                                                                                                                                                                                                                                           \n    readonly trafficMirrorFilterId: string;\n\n                                                                                                                                                                                                                                           \n    readonly trafficMirrorTargetId: string;\n\n                                                                                                                                                                                                                                           \n    readonly description?: string;\n\nn    readonly packetLength?: number;\n\n                                                                                                                                                                                                                                     \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly virtualNetworkId?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTrafficMirrorSessionProps`\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorSessionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrafficMirrorSessionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('packetLength', cdk.validateNumber)(properties.packetLength));\n    errors.collect(cdk.propertyValidator('sessionNumber', cdk.requiredValidator)(properties.sessionNumber));\n    errors.collect(cdk.propertyValidator('sessionNumber', cdk.validateNumber)(properties.sessionNumber));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('trafficMirrorFilterId', cdk.requiredValidator)(properties.trafficMirrorFilterId));\n    errors.collect(cdk.propertyValidator('trafficMirrorFilterId', cdk.validateString)(properties.trafficMirrorFilterId));\n    errors.collect(cdk.propertyValidator('trafficMirrorTargetId', cdk.requiredValidator)(properties.trafficMirrorTargetId));\n    errors.collect(cdk.propertyValidator('trafficMirrorTargetId', cdk.validateString)(properties.trafficMirrorTargetId));\n    errors.collect(cdk.propertyValidator('virtualNetworkId', cdk.validateNumber)(properties.virtualNetworkId));\n    return errors.wrap('supplied properties not correct for \"CfnTrafficMirrorSessionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorSession` resource\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorSessionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorSession` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrafficMirrorSessionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrafficMirrorSessionPropsValidator(properties).assertSuccess();\n    return {\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        SessionNumber: cdk.numberToCloudFormation(properties.sessionNumber),\n        TrafficMirrorFilterId: cdk.stringToCloudFormation(properties.trafficMirrorFilterId),\n        TrafficMirrorTargetId: cdk.stringToCloudFormation(properties.trafficMirrorTargetId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        PacketLength: cdk.numberToCloudFormation(properties.packetLength),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VirtualNetworkId: cdk.numberToCloudFormation(properties.virtualNetworkId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrafficMirrorSessionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrafficMirrorSessionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrafficMirrorSessionProps>();\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));\n    ret.addPropertyResult('sessionNumber', 'SessionNumber', cfn_parse.FromCloudFormation.getNumber(properties.SessionNumber));\n    ret.addPropertyResult('trafficMirrorFilterId', 'TrafficMirrorFilterId', cfn_parse.FromCloudFormation.getString(properties.TrafficMirrorFilterId));\n    ret.addPropertyResult('trafficMirrorTargetId', 'TrafficMirrorTargetId', cfn_parse.FromCloudFormation.getString(properties.TrafficMirrorTargetId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('packetLength', 'PacketLength', properties.PacketLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.PacketLength) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('virtualNetworkId', 'VirtualNetworkId', properties.VirtualNetworkId != null ? cfn_parse.FromCloudFormation.getNumber(properties.VirtualNetworkId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTrafficMirrorSession extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TrafficMirrorSession\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTrafficMirrorSession {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTrafficMirrorSessionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTrafficMirrorSession(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                           \n    public networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public sessionNumber: number;\n\n                                                                                                                                                                                                                                           \n    public trafficMirrorFilterId: string;\n\n                                                                                                                                                                                                                                           \n    public trafficMirrorTargetId: string;\n\n                                                                                                                                                                                                                                           \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public packetLength: number | undefined;\n\n                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public virtualNetworkId: number | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnTrafficMirrorSessionProps) {\n        super(scope, id, { type: CfnTrafficMirrorSession.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'networkInterfaceId', this);\n        cdk.requireProperty(props, 'sessionNumber', this);\n        cdk.requireProperty(props, 'trafficMirrorFilterId', this);\n        cdk.requireProperty(props, 'trafficMirrorTargetId', this);\n\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.sessionNumber = props.sessionNumber;\n        this.trafficMirrorFilterId = props.trafficMirrorFilterId;\n        this.trafficMirrorTargetId = props.trafficMirrorTargetId;\n        this.description = props.description;\n        this.packetLength = props.packetLength;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TrafficMirrorSession\", props.tags, { tagPropertyName: 'tags' });\n        this.virtualNetworkId = props.virtualNetworkId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTrafficMirrorSession.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            networkInterfaceId: this.networkInterfaceId,\n            sessionNumber: this.sessionNumber,\n            trafficMirrorFilterId: this.trafficMirrorFilterId,\n            trafficMirrorTargetId: this.trafficMirrorTargetId,\n            description: this.description,\n            packetLength: this.packetLength,\n            tags: this.tags.renderTags(),\n            virtualNetworkId: this.virtualNetworkId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTrafficMirrorSessionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnTrafficMirrorTargetProps {\n\n                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                              \n    readonly networkInterfaceId?: string;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly networkLoadBalancerArn?: string;\n\n                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTrafficMirrorTargetProps`\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorTargetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrafficMirrorTargetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('networkLoadBalancerArn', cdk.validateString)(properties.networkLoadBalancerArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnTrafficMirrorTargetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorTarget` resource\n *\n * @param properties - the TypeScript properties of a `CfnTrafficMirrorTargetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TrafficMirrorTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrafficMirrorTargetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrafficMirrorTargetPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        NetworkLoadBalancerArn: cdk.stringToCloudFormation(properties.networkLoadBalancerArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrafficMirrorTargetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrafficMirrorTargetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrafficMirrorTargetProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : undefined);\n    ret.addPropertyResult('networkLoadBalancerArn', 'NetworkLoadBalancerArn', properties.NetworkLoadBalancerArn != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkLoadBalancerArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTrafficMirrorTarget extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TrafficMirrorTarget\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTrafficMirrorTarget {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTrafficMirrorTargetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTrafficMirrorTarget(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                              \n    public networkInterfaceId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                     \n    public networkLoadBalancerArn: string | undefined;\n\n                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnTrafficMirrorTargetProps = {}) {\n        super(scope, id, { type: CfnTrafficMirrorTarget.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.description = props.description;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.networkLoadBalancerArn = props.networkLoadBalancerArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TrafficMirrorTarget\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTrafficMirrorTarget.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            networkInterfaceId: this.networkInterfaceId,\n            networkLoadBalancerArn: this.networkLoadBalancerArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTrafficMirrorTargetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                            \nexport interface CfnTransitGatewayProps {\n\n                                                                                                                                                                                                                                                                                                                                    \n    readonly amazonSideAsn?: number;\n\n                                                                                                                                                                                                                                                  \n    readonly associationDefaultRouteTableId?: string;\n\n                                                                                                                                                                                                                                                                                    \n    readonly autoAcceptSharedAttachments?: string;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly defaultRouteTableAssociation?: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly defaultRouteTablePropagation?: string;\n\n                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                  \n    readonly dnsSupport?: string;\n\n                                                                                                                                                                                                                                                   \n    readonly multicastSupport?: string;\n\n                                                                                                                                                                                                                                                  \n    readonly propagationDefaultRouteTableId?: string;\n\n                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                              \n    readonly transitGatewayCidrBlocks?: string[];\n\n                                                                                                                                                                                                                                                                \n    readonly vpnEcmpSupport?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amazonSideAsn', cdk.validateNumber)(properties.amazonSideAsn));\n    errors.collect(cdk.propertyValidator('associationDefaultRouteTableId', cdk.validateString)(properties.associationDefaultRouteTableId));\n    errors.collect(cdk.propertyValidator('autoAcceptSharedAttachments', cdk.validateString)(properties.autoAcceptSharedAttachments));\n    errors.collect(cdk.propertyValidator('defaultRouteTableAssociation', cdk.validateString)(properties.defaultRouteTableAssociation));\n    errors.collect(cdk.propertyValidator('defaultRouteTablePropagation', cdk.validateString)(properties.defaultRouteTablePropagation));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('dnsSupport', cdk.validateString)(properties.dnsSupport));\n    errors.collect(cdk.propertyValidator('multicastSupport', cdk.validateString)(properties.multicastSupport));\n    errors.collect(cdk.propertyValidator('propagationDefaultRouteTableId', cdk.validateString)(properties.propagationDefaultRouteTableId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayCidrBlocks', cdk.listValidator(cdk.validateString))(properties.transitGatewayCidrBlocks));\n    errors.collect(cdk.propertyValidator('vpnEcmpSupport', cdk.validateString)(properties.vpnEcmpSupport));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayPropsValidator(properties).assertSuccess();\n    return {\n        AmazonSideAsn: cdk.numberToCloudFormation(properties.amazonSideAsn),\n        AssociationDefaultRouteTableId: cdk.stringToCloudFormation(properties.associationDefaultRouteTableId),\n        AutoAcceptSharedAttachments: cdk.stringToCloudFormation(properties.autoAcceptSharedAttachments),\n        DefaultRouteTableAssociation: cdk.stringToCloudFormation(properties.defaultRouteTableAssociation),\n        DefaultRouteTablePropagation: cdk.stringToCloudFormation(properties.defaultRouteTablePropagation),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DnsSupport: cdk.stringToCloudFormation(properties.dnsSupport),\n        MulticastSupport: cdk.stringToCloudFormation(properties.multicastSupport),\n        PropagationDefaultRouteTableId: cdk.stringToCloudFormation(properties.propagationDefaultRouteTableId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TransitGatewayCidrBlocks: cdk.listMapper(cdk.stringToCloudFormation)(properties.transitGatewayCidrBlocks),\n        VpnEcmpSupport: cdk.stringToCloudFormation(properties.vpnEcmpSupport),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayProps>();\n    ret.addPropertyResult('amazonSideAsn', 'AmazonSideAsn', properties.AmazonSideAsn != null ? cfn_parse.FromCloudFormation.getNumber(properties.AmazonSideAsn) : undefined);\n    ret.addPropertyResult('associationDefaultRouteTableId', 'AssociationDefaultRouteTableId', properties.AssociationDefaultRouteTableId != null ? cfn_parse.FromCloudFormation.getString(properties.AssociationDefaultRouteTableId) : undefined);\n    ret.addPropertyResult('autoAcceptSharedAttachments', 'AutoAcceptSharedAttachments', properties.AutoAcceptSharedAttachments != null ? cfn_parse.FromCloudFormation.getString(properties.AutoAcceptSharedAttachments) : undefined);\n    ret.addPropertyResult('defaultRouteTableAssociation', 'DefaultRouteTableAssociation', properties.DefaultRouteTableAssociation != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultRouteTableAssociation) : undefined);\n    ret.addPropertyResult('defaultRouteTablePropagation', 'DefaultRouteTablePropagation', properties.DefaultRouteTablePropagation != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultRouteTablePropagation) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('dnsSupport', 'DnsSupport', properties.DnsSupport != null ? cfn_parse.FromCloudFormation.getString(properties.DnsSupport) : undefined);\n    ret.addPropertyResult('multicastSupport', 'MulticastSupport', properties.MulticastSupport != null ? cfn_parse.FromCloudFormation.getString(properties.MulticastSupport) : undefined);\n    ret.addPropertyResult('propagationDefaultRouteTableId', 'PropagationDefaultRouteTableId', properties.PropagationDefaultRouteTableId != null ? cfn_parse.FromCloudFormation.getString(properties.PropagationDefaultRouteTableId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('transitGatewayCidrBlocks', 'TransitGatewayCidrBlocks', properties.TransitGatewayCidrBlocks != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TransitGatewayCidrBlocks) : undefined);\n    ret.addPropertyResult('vpnEcmpSupport', 'VpnEcmpSupport', properties.VpnEcmpSupport != null ? cfn_parse.FromCloudFormation.getString(properties.VpnEcmpSupport) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                        \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                    \n    public amazonSideAsn: number | undefined;\n\n                                                                                                                                                                                                                                                  \n    public associationDefaultRouteTableId: string | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public autoAcceptSharedAttachments: string | undefined;\n\n                                                                                                                                                                                                                                                                                                       \n    public defaultRouteTableAssociation: string | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public defaultRouteTablePropagation: string | undefined;\n\n                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                  \n    public dnsSupport: string | undefined;\n\n                                                                                                                                                                                                                                                   \n    public multicastSupport: string | undefined;\n\n                                                                                                                                                                                                                                                  \n    public propagationDefaultRouteTableId: string | undefined;\n\n                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    public transitGatewayCidrBlocks: string[] | undefined;\n\n                                                                                                                                                                                                                                                                \n    public vpnEcmpSupport: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayProps = {}) {\n        super(scope, id, { type: CfnTransitGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.amazonSideAsn = props.amazonSideAsn;\n        this.associationDefaultRouteTableId = props.associationDefaultRouteTableId;\n        this.autoAcceptSharedAttachments = props.autoAcceptSharedAttachments;\n        this.defaultRouteTableAssociation = props.defaultRouteTableAssociation;\n        this.defaultRouteTablePropagation = props.defaultRouteTablePropagation;\n        this.description = props.description;\n        this.dnsSupport = props.dnsSupport;\n        this.multicastSupport = props.multicastSupport;\n        this.propagationDefaultRouteTableId = props.propagationDefaultRouteTableId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGateway\", props.tags, { tagPropertyName: 'tags' });\n        this.transitGatewayCidrBlocks = props.transitGatewayCidrBlocks;\n        this.vpnEcmpSupport = props.vpnEcmpSupport;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            amazonSideAsn: this.amazonSideAsn,\n            associationDefaultRouteTableId: this.associationDefaultRouteTableId,\n            autoAcceptSharedAttachments: this.autoAcceptSharedAttachments,\n            defaultRouteTableAssociation: this.defaultRouteTableAssociation,\n            defaultRouteTablePropagation: this.defaultRouteTablePropagation,\n            description: this.description,\n            dnsSupport: this.dnsSupport,\n            multicastSupport: this.multicastSupport,\n            propagationDefaultRouteTableId: this.propagationDefaultRouteTableId,\n            tags: this.tags.renderTags(),\n            transitGatewayCidrBlocks: this.transitGatewayCidrBlocks,\n            vpnEcmpSupport: this.vpnEcmpSupport,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                \nexport interface CfnTransitGatewayAttachmentProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                                        \n    readonly transitGatewayId: string;\n\n                                                                                                                                                                                                                 \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.requiredValidator)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayAttachmentProps>();\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnTransitGatewayAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                                        \n    public transitGatewayId: string;\n\n                                                                                                                                                                                                                 \n    public vpcId: string;\n\n                                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayAttachmentProps) {\n        super(scope, id, { type: CfnTransitGatewayAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'subnetIds', this);\n        cdk.requireProperty(props, 'transitGatewayId', this);\n        cdk.requireProperty(props, 'vpcId', this);\n\n        this.subnetIds = props.subnetIds;\n        this.transitGatewayId = props.transitGatewayId;\n        this.vpcId = props.vpcId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGatewayAttachment\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            subnetIds: this.subnetIds,\n            transitGatewayId: this.transitGatewayId,\n            vpcId: this.vpcId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayAttachmentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                          \nexport interface CfnTransitGatewayConnectProps {\n\n                                                                                                                                                                                                                                                         \n    readonly options: CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                              \n    readonly transportTransitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayConnectProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayConnectProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayConnectPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('options', cdk.requiredValidator)(properties.options));\n    errors.collect(cdk.propertyValidator('options', CfnTransitGatewayConnect_TransitGatewayConnectOptionsPropertyValidator)(properties.options));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transportTransitGatewayAttachmentId', cdk.requiredValidator)(properties.transportTransitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transportTransitGatewayAttachmentId', cdk.validateString)(properties.transportTransitGatewayAttachmentId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayConnectProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayConnect` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayConnectProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayConnect` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayConnectPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayConnectPropsValidator(properties).assertSuccess();\n    return {\n        Options: cfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyToCloudFormation(properties.options),\n        TransportTransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transportTransitGatewayAttachmentId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayConnectPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayConnectProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayConnectProps>();\n    ret.addPropertyResult('options', 'Options', CfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyFromCloudFormation(properties.Options));\n    ret.addPropertyResult('transportTransitGatewayAttachmentId', 'TransportTransitGatewayAttachmentId', cfn_parse.FromCloudFormation.getString(properties.TransportTransitGatewayAttachmentId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnTransitGatewayConnect extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayConnect\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayConnect {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayConnectPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayConnect(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                      \n    public readonly attrCreationTime: string;\n\n                                                                                         \n    public readonly attrState: string;\n\n                                                                                                                           \n    public readonly attrTransitGatewayAttachmentId: string;\n\n                                                                                                      \n    public readonly attrTransitGatewayId: string;\n\n                                                                                                                                                                                                                                                         \n    public options: CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                              \n    public transportTransitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayConnectProps) {\n        super(scope, id, { type: CfnTransitGatewayConnect.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'options', this);\n        cdk.requireProperty(props, 'transportTransitGatewayAttachmentId', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt('TransitGatewayAttachmentId'));\n        this.attrTransitGatewayId = cdk.Token.asString(this.getAtt('TransitGatewayId'));\n\n        this.options = props.options;\n        this.transportTransitGatewayAttachmentId = props.transportTransitGatewayAttachmentId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGatewayConnect\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayConnect.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            options: this.options,\n            transportTransitGatewayAttachmentId: this.transportTransitGatewayAttachmentId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayConnectPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTransitGatewayConnect {\n                                                                                                                                                                                                                                                                              \n    export interface TransitGatewayConnectOptionsProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly protocol?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransitGatewayConnectOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `TransitGatewayConnectOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayConnect_TransitGatewayConnectOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    return errors.wrap('supplied properties not correct for \"TransitGatewayConnectOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayConnect.TransitGatewayConnectOptions` resource\n *\n * @param properties - the TypeScript properties of a `TransitGatewayConnectOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayConnect.TransitGatewayConnectOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayConnect_TransitGatewayConnectOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayConnect.TransitGatewayConnectOptionsProperty>();\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                          \nexport interface CfnTransitGatewayMulticastDomainProps {\n\n                                                                                                                                                                                                                                                  \n    readonly transitGatewayId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly options?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayMulticastDomainProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastDomainProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayMulticastDomainPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('options', cdk.validateObject)(properties.options));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.requiredValidator)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayMulticastDomainProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastDomain` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastDomainProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastDomain` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayMulticastDomainPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayMulticastDomainPropsValidator(properties).assertSuccess();\n    return {\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        Options: cdk.objectToCloudFormation(properties.options),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayMulticastDomainPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayMulticastDomainProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayMulticastDomainProps>();\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));\n    ret.addPropertyResult('options', 'Options', properties.Options != null ? cfn_parse.FromCloudFormation.getAny(properties.Options) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \nexport class CfnTransitGatewayMulticastDomain extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayMulticastDomain\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayMulticastDomain {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayMulticastDomainPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayMulticastDomain(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                              \n    public readonly attrCreationTime: string;\n\n                                                                                               \n    public readonly attrState: string;\n\n                                                                                                                                               \n    public readonly attrTransitGatewayMulticastDomainArn: string;\n\n                                                                                                                      \n    public readonly attrTransitGatewayMulticastDomainId: string;\n\n                                                                                                                                                                                                                                                  \n    public transitGatewayId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public options: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayMulticastDomainProps) {\n        super(scope, id, { type: CfnTransitGatewayMulticastDomain.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'transitGatewayId', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrTransitGatewayMulticastDomainArn = cdk.Token.asString(this.getAtt('TransitGatewayMulticastDomainArn'));\n        this.attrTransitGatewayMulticastDomainId = cdk.Token.asString(this.getAtt('TransitGatewayMulticastDomainId'));\n\n        this.transitGatewayId = props.transitGatewayId;\n        this.options = props.options;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGatewayMulticastDomain\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayMulticastDomain.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            transitGatewayId: this.transitGatewayId,\n            options: this.options,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayMulticastDomainPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                                \nexport interface CfnTransitGatewayMulticastDomainAssociationProps {\n\n                                                                                                                                                                                                                                                                                                                \n    readonly subnetId: string;\n\n                                                                                                                                                                                                                                                                                             \n    readonly transitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                                        \n    readonly transitGatewayMulticastDomainId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayMulticastDomainAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastDomainAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayMulticastDomainAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.requiredValidator)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayMulticastDomainId', cdk.requiredValidator)(properties.transitGatewayMulticastDomainId));\n    errors.collect(cdk.propertyValidator('transitGatewayMulticastDomainId', cdk.validateString)(properties.transitGatewayMulticastDomainId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayMulticastDomainAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastDomainAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastDomainAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastDomainAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayMulticastDomainAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayMulticastDomainAssociationPropsValidator(properties).assertSuccess();\n    return {\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),\n        TransitGatewayMulticastDomainId: cdk.stringToCloudFormation(properties.transitGatewayMulticastDomainId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayMulticastDomainAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayMulticastDomainAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayMulticastDomainAssociationProps>();\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addPropertyResult('transitGatewayAttachmentId', 'TransitGatewayAttachmentId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId));\n    ret.addPropertyResult('transitGatewayMulticastDomainId', 'TransitGatewayMulticastDomainId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayMulticastDomainId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayMulticastDomainAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayMulticastDomainAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayMulticastDomainAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayMulticastDomainAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayMulticastDomainAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                         \n    public readonly attrResourceId: string;\n\n                                                                                                                       \n    public readonly attrResourceType: string;\n\n                                                                                       \n    public readonly attrState: string;\n\n                                                                                                                                                                                                                                                                                                                \n    public subnetId: string;\n\n                                                                                                                                                                                                                                                                                             \n    public transitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                                        \n    public transitGatewayMulticastDomainId: string;\n\n                                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayMulticastDomainAssociationProps) {\n        super(scope, id, { type: CfnTransitGatewayMulticastDomainAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'subnetId', this);\n        cdk.requireProperty(props, 'transitGatewayAttachmentId', this);\n        cdk.requireProperty(props, 'transitGatewayMulticastDomainId', this);\n        this.attrResourceId = cdk.Token.asString(this.getAtt('ResourceId'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n\n        this.subnetId = props.subnetId;\n        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;\n        this.transitGatewayMulticastDomainId = props.transitGatewayMulticastDomainId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayMulticastDomainAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            subnetId: this.subnetId,\n            transitGatewayAttachmentId: this.transitGatewayAttachmentId,\n            transitGatewayMulticastDomainId: this.transitGatewayMulticastDomainId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayMulticastDomainAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                    \nexport interface CfnTransitGatewayMulticastGroupMemberProps {\n\n                                                                                                                                                                                                                                                                                           \n    readonly groupIpAddress: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly transitGatewayMulticastDomainId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayMulticastGroupMemberProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastGroupMemberProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayMulticastGroupMemberPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupIpAddress', cdk.requiredValidator)(properties.groupIpAddress));\n    errors.collect(cdk.propertyValidator('groupIpAddress', cdk.validateString)(properties.groupIpAddress));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('transitGatewayMulticastDomainId', cdk.requiredValidator)(properties.transitGatewayMulticastDomainId));\n    errors.collect(cdk.propertyValidator('transitGatewayMulticastDomainId', cdk.validateString)(properties.transitGatewayMulticastDomainId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayMulticastGroupMemberProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastGroupMember` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastGroupMemberProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastGroupMember` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayMulticastGroupMemberPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayMulticastGroupMemberPropsValidator(properties).assertSuccess();\n    return {\n        GroupIpAddress: cdk.stringToCloudFormation(properties.groupIpAddress),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        TransitGatewayMulticastDomainId: cdk.stringToCloudFormation(properties.transitGatewayMulticastDomainId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayMulticastGroupMemberPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayMulticastGroupMemberProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayMulticastGroupMemberProps>();\n    ret.addPropertyResult('groupIpAddress', 'GroupIpAddress', cfn_parse.FromCloudFormation.getString(properties.GroupIpAddress));\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));\n    ret.addPropertyResult('transitGatewayMulticastDomainId', 'TransitGatewayMulticastDomainId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayMulticastDomainId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayMulticastGroupMember extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayMulticastGroupMember\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayMulticastGroupMember {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayMulticastGroupMemberPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayMulticastGroupMember(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                   \n    public readonly attrGroupMember: cdk.IResolvable;\n\n                                                                                                                                                  \n    public readonly attrGroupSource: cdk.IResolvable;\n\n                                                                                                               \n    public readonly attrMemberType: string;\n\n                                                                                         \n    public readonly attrResourceId: string;\n\n                                                                                                                       \n    public readonly attrResourceType: string;\n\n                                                                                     \n    public readonly attrSourceType: string;\n\n                                                                                     \n    public readonly attrSubnetId: string;\n\n                                                                                                                           \n    public readonly attrTransitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                           \n    public groupIpAddress: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    public networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                            \n    public transitGatewayMulticastDomainId: string;\n\n                                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayMulticastGroupMemberProps) {\n        super(scope, id, { type: CfnTransitGatewayMulticastGroupMember.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'groupIpAddress', this);\n        cdk.requireProperty(props, 'networkInterfaceId', this);\n        cdk.requireProperty(props, 'transitGatewayMulticastDomainId', this);\n        this.attrGroupMember = this.getAtt('GroupMember');\n        this.attrGroupSource = this.getAtt('GroupSource');\n        this.attrMemberType = cdk.Token.asString(this.getAtt('MemberType'));\n        this.attrResourceId = cdk.Token.asString(this.getAtt('ResourceId'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrSourceType = cdk.Token.asString(this.getAtt('SourceType'));\n        this.attrSubnetId = cdk.Token.asString(this.getAtt('SubnetId'));\n        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt('TransitGatewayAttachmentId'));\n\n        this.groupIpAddress = props.groupIpAddress;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.transitGatewayMulticastDomainId = props.transitGatewayMulticastDomainId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayMulticastGroupMember.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupIpAddress: this.groupIpAddress,\n            networkInterfaceId: this.networkInterfaceId,\n            transitGatewayMulticastDomainId: this.transitGatewayMulticastDomainId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayMulticastGroupMemberPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                    \nexport interface CfnTransitGatewayMulticastGroupSourceProps {\n\n                                                                                                                                                                                                                                                                                           \n    readonly groupIpAddress: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly transitGatewayMulticastDomainId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayMulticastGroupSourceProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastGroupSourceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayMulticastGroupSourcePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupIpAddress', cdk.requiredValidator)(properties.groupIpAddress));\n    errors.collect(cdk.propertyValidator('groupIpAddress', cdk.validateString)(properties.groupIpAddress));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));\n    errors.collect(cdk.propertyValidator('transitGatewayMulticastDomainId', cdk.requiredValidator)(properties.transitGatewayMulticastDomainId));\n    errors.collect(cdk.propertyValidator('transitGatewayMulticastDomainId', cdk.validateString)(properties.transitGatewayMulticastDomainId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayMulticastGroupSourceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastGroupSource` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayMulticastGroupSourceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayMulticastGroupSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayMulticastGroupSourcePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayMulticastGroupSourcePropsValidator(properties).assertSuccess();\n    return {\n        GroupIpAddress: cdk.stringToCloudFormation(properties.groupIpAddress),\n        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),\n        TransitGatewayMulticastDomainId: cdk.stringToCloudFormation(properties.transitGatewayMulticastDomainId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayMulticastGroupSourcePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayMulticastGroupSourceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayMulticastGroupSourceProps>();\n    ret.addPropertyResult('groupIpAddress', 'GroupIpAddress', cfn_parse.FromCloudFormation.getString(properties.GroupIpAddress));\n    ret.addPropertyResult('networkInterfaceId', 'NetworkInterfaceId', cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));\n    ret.addPropertyResult('transitGatewayMulticastDomainId', 'TransitGatewayMulticastDomainId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayMulticastDomainId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayMulticastGroupSource extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayMulticastGroupSource\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayMulticastGroupSource {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayMulticastGroupSourcePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayMulticastGroupSource(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                   \n    public readonly attrGroupMember: cdk.IResolvable;\n\n                                                                                                                                 \n    public readonly attrGroupSource: cdk.IResolvable;\n\n                                                                                                               \n    public readonly attrMemberType: string;\n\n                                                                                         \n    public readonly attrResourceId: string;\n\n                                                                                                                       \n    public readonly attrResourceType: string;\n\n                                                                                     \n    public readonly attrSourceType: string;\n\n                                                                                     \n    public readonly attrSubnetId: string;\n\n                                                                                                                           \n    public readonly attrTransitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                           \n    public groupIpAddress: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    public networkInterfaceId: string;\n\n                                                                                                                                                                                                                                                                                            \n    public transitGatewayMulticastDomainId: string;\n\n                                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayMulticastGroupSourceProps) {\n        super(scope, id, { type: CfnTransitGatewayMulticastGroupSource.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'groupIpAddress', this);\n        cdk.requireProperty(props, 'networkInterfaceId', this);\n        cdk.requireProperty(props, 'transitGatewayMulticastDomainId', this);\n        this.attrGroupMember = this.getAtt('GroupMember');\n        this.attrGroupSource = this.getAtt('GroupSource');\n        this.attrMemberType = cdk.Token.asString(this.getAtt('MemberType'));\n        this.attrResourceId = cdk.Token.asString(this.getAtt('ResourceId'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrSourceType = cdk.Token.asString(this.getAtt('SourceType'));\n        this.attrSubnetId = cdk.Token.asString(this.getAtt('SubnetId'));\n        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt('TransitGatewayAttachmentId'));\n\n        this.groupIpAddress = props.groupIpAddress;\n        this.networkInterfaceId = props.networkInterfaceId;\n        this.transitGatewayMulticastDomainId = props.transitGatewayMulticastDomainId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayMulticastGroupSource.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupIpAddress: this.groupIpAddress,\n            networkInterfaceId: this.networkInterfaceId,\n            transitGatewayMulticastDomainId: this.transitGatewayMulticastDomainId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayMulticastGroupSourcePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                              \nexport interface CfnTransitGatewayPeeringAttachmentProps {\n\n                                                                                                                                                                                                                                                                             \n    readonly peerAccountId: string;\n\n                                                                                                                                                                                                                                                    \n    readonly peerRegion: string;\n\n                                                                                                                                                                                                                                                          \n    readonly peerTransitGatewayId: string;\n\n                                                                                                                                                                                                                                                                         \n    readonly transitGatewayId: string;\n\n                                                                                                                                                                                                                                                                  \n    readonly options?: CfnTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachmentOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayPeeringAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayPeeringAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayPeeringAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('options', CfnTransitGatewayPeeringAttachment_TransitGatewayPeeringAttachmentOptionsPropertyValidator)(properties.options));\n    errors.collect(cdk.propertyValidator('peerAccountId', cdk.requiredValidator)(properties.peerAccountId));\n    errors.collect(cdk.propertyValidator('peerAccountId', cdk.validateString)(properties.peerAccountId));\n    errors.collect(cdk.propertyValidator('peerRegion', cdk.requiredValidator)(properties.peerRegion));\n    errors.collect(cdk.propertyValidator('peerRegion', cdk.validateString)(properties.peerRegion));\n    errors.collect(cdk.propertyValidator('peerTransitGatewayId', cdk.requiredValidator)(properties.peerTransitGatewayId));\n    errors.collect(cdk.propertyValidator('peerTransitGatewayId', cdk.validateString)(properties.peerTransitGatewayId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.requiredValidator)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayPeeringAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayPeeringAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayPeeringAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayPeeringAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayPeeringAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayPeeringAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        PeerAccountId: cdk.stringToCloudFormation(properties.peerAccountId),\n        PeerRegion: cdk.stringToCloudFormation(properties.peerRegion),\n        PeerTransitGatewayId: cdk.stringToCloudFormation(properties.peerTransitGatewayId),\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        Options: cfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyToCloudFormation(properties.options),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayPeeringAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayPeeringAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayPeeringAttachmentProps>();\n    ret.addPropertyResult('peerAccountId', 'PeerAccountId', cfn_parse.FromCloudFormation.getString(properties.PeerAccountId));\n    ret.addPropertyResult('peerRegion', 'PeerRegion', cfn_parse.FromCloudFormation.getString(properties.PeerRegion));\n    ret.addPropertyResult('peerTransitGatewayId', 'PeerTransitGatewayId', cfn_parse.FromCloudFormation.getString(properties.PeerTransitGatewayId));\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));\n    ret.addPropertyResult('options', 'Options', properties.Options != null ? CfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyFromCloudFormation(properties.Options) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayPeeringAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayPeeringAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayPeeringAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayPeeringAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayPeeringAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                \n    public readonly attrCreationTime: string;\n\n                                                                                                                                                                       \n    public readonly attrState: string;\n\n                                                                                                                                   \n    public readonly attrTransitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                             \n    public peerAccountId: string;\n\n                                                                                                                                                                                                                                                    \n    public peerRegion: string;\n\n                                                                                                                                                                                                                                                          \n    public peerTransitGatewayId: string;\n\n                                                                                                                                                                                                                                                                         \n    public transitGatewayId: string;\n\n                                                                                                                                                                                                                                                                  \n    public options: CfnTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachmentOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayPeeringAttachmentProps) {\n        super(scope, id, { type: CfnTransitGatewayPeeringAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'peerAccountId', this);\n        cdk.requireProperty(props, 'peerRegion', this);\n        cdk.requireProperty(props, 'peerTransitGatewayId', this);\n        cdk.requireProperty(props, 'transitGatewayId', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt('TransitGatewayAttachmentId'));\n\n        this.peerAccountId = props.peerAccountId;\n        this.peerRegion = props.peerRegion;\n        this.peerTransitGatewayId = props.peerTransitGatewayId;\n        this.transitGatewayId = props.transitGatewayId;\n        this.options = props.options;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGatewayPeeringAttachment\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayPeeringAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            peerAccountId: this.peerAccountId,\n            peerRegion: this.peerRegion,\n            peerTransitGatewayId: this.peerTransitGatewayId,\n            transitGatewayId: this.transitGatewayId,\n            options: this.options,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayPeeringAttachmentPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTransitGatewayPeeringAttachment {\n                                                                                                                                                                                                                                                        \n    export interface TransitGatewayPeeringAttachmentOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly dynamicRouting?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransitGatewayPeeringAttachmentOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `TransitGatewayPeeringAttachmentOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayPeeringAttachment_TransitGatewayPeeringAttachmentOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dynamicRouting', cdk.validateString)(properties.dynamicRouting));\n    return errors.wrap('supplied properties not correct for \"TransitGatewayPeeringAttachmentOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayPeeringAttachment.TransitGatewayPeeringAttachmentOptions` resource\n *\n * @param properties - the TypeScript properties of a `TransitGatewayPeeringAttachmentOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayPeeringAttachment.TransitGatewayPeeringAttachmentOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayPeeringAttachment_TransitGatewayPeeringAttachmentOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        DynamicRouting: cdk.stringToCloudFormation(properties.dynamicRouting),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachmentOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachmentOptionsProperty>();\n    ret.addPropertyResult('dynamicRouting', 'DynamicRouting', properties.DynamicRouting != null ? cfn_parse.FromCloudFormation.getString(properties.DynamicRouting) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnTransitGatewayRouteProps {\n\n                                                                                                                                                                                                                                                    \n    readonly transitGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                                   \n    readonly blackhole?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                \n    readonly destinationCidrBlock?: string;\n\n                                                                                                                                                                                                                                   \n    readonly transitGatewayAttachmentId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blackhole', cdk.validateBoolean)(properties.blackhole));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.requiredValidator)(properties.transitGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.validateString)(properties.transitGatewayRouteTableId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRoute` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRoute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayRoutePropsValidator(properties).assertSuccess();\n    return {\n        TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),\n        Blackhole: cdk.booleanToCloudFormation(properties.blackhole),\n        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),\n        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayRouteProps>();\n    ret.addPropertyResult('transitGatewayRouteTableId', 'TransitGatewayRouteTableId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayRouteTableId));\n    ret.addPropertyResult('blackhole', 'Blackhole', properties.Blackhole != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Blackhole) : undefined);\n    ret.addPropertyResult('destinationCidrBlock', 'DestinationCidrBlock', properties.DestinationCidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock) : undefined);\n    ret.addPropertyResult('transitGatewayAttachmentId', 'TransitGatewayAttachmentId', properties.TransitGatewayAttachmentId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                    \nexport class CfnTransitGatewayRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayRoute\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                    \n    public transitGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                                   \n    public blackhole: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                \n    public destinationCidrBlock: string | undefined;\n\n                                                                                                                                                                                                                                   \n    public transitGatewayAttachmentId: string | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayRouteProps) {\n        super(scope, id, { type: CfnTransitGatewayRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'transitGatewayRouteTableId', this);\n\n        this.transitGatewayRouteTableId = props.transitGatewayRouteTableId;\n        this.blackhole = props.blackhole;\n        this.destinationCidrBlock = props.destinationCidrBlock;\n        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            transitGatewayRouteTableId: this.transitGatewayRouteTableId,\n            blackhole: this.blackhole,\n            destinationCidrBlock: this.destinationCidrBlock,\n            transitGatewayAttachmentId: this.transitGatewayAttachmentId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayRoutePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                \nexport interface CfnTransitGatewayRouteTableProps {\n\n                                                                                                                                                                                                                                        \n    readonly transitGatewayId: string;\n\n                                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayRouteTableProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteTableProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayRouteTablePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.requiredValidator)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayRouteTableProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRouteTable` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteTableProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRouteTable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayRouteTablePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayRouteTablePropsValidator(properties).assertSuccess();\n    return {\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayRouteTablePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayRouteTableProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayRouteTableProps>();\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                      \nexport class CfnTransitGatewayRouteTable extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayRouteTable\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayRouteTable {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayRouteTablePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayRouteTable(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                        \n    public transitGatewayId: string;\n\n                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayRouteTableProps) {\n        super(scope, id, { type: CfnTransitGatewayRouteTable.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'transitGatewayId', this);\n\n        this.transitGatewayId = props.transitGatewayId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGatewayRouteTable\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayRouteTable.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            transitGatewayId: this.transitGatewayId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayRouteTablePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                      \nexport interface CfnTransitGatewayRouteTableAssociationProps {\n\n                                                                                                                                                                                                                                                                   \n    readonly transitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly transitGatewayRouteTableId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayRouteTableAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteTableAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayRouteTableAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.requiredValidator)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.requiredValidator)(properties.transitGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.validateString)(properties.transitGatewayRouteTableId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayRouteTableAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRouteTableAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteTableAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRouteTableAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayRouteTableAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayRouteTableAssociationPropsValidator(properties).assertSuccess();\n    return {\n        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),\n        TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayRouteTableAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayRouteTableAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayRouteTableAssociationProps>();\n    ret.addPropertyResult('transitGatewayAttachmentId', 'TransitGatewayAttachmentId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId));\n    ret.addPropertyResult('transitGatewayRouteTableId', 'TransitGatewayRouteTableId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayRouteTableId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayRouteTableAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayRouteTableAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayRouteTableAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayRouteTableAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayRouteTableAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                   \n    public transitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                            \n    public transitGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayRouteTableAssociationProps) {\n        super(scope, id, { type: CfnTransitGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'transitGatewayAttachmentId', this);\n        cdk.requireProperty(props, 'transitGatewayRouteTableId', this);\n\n        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;\n        this.transitGatewayRouteTableId = props.transitGatewayRouteTableId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            transitGatewayAttachmentId: this.transitGatewayAttachmentId,\n            transitGatewayRouteTableId: this.transitGatewayRouteTableId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayRouteTableAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                      \nexport interface CfnTransitGatewayRouteTablePropagationProps {\n\n                                                                                                                                                                                                                                                                   \n    readonly transitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly transitGatewayRouteTableId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayRouteTablePropagationProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteTablePropagationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayRouteTablePropagationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.requiredValidator)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));\n    errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.requiredValidator)(properties.transitGatewayRouteTableId));\n    errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.validateString)(properties.transitGatewayRouteTableId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayRouteTablePropagationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRouteTablePropagation` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRouteTablePropagationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayRouteTablePropagation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayRouteTablePropagationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayRouteTablePropagationPropsValidator(properties).assertSuccess();\n    return {\n        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),\n        TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayRouteTablePropagationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayRouteTablePropagationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayRouteTablePropagationProps>();\n    ret.addPropertyResult('transitGatewayAttachmentId', 'TransitGatewayAttachmentId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId));\n    ret.addPropertyResult('transitGatewayRouteTableId', 'TransitGatewayRouteTableId', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayRouteTableId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayRouteTablePropagation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayRouteTablePropagation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayRouteTablePropagation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayRouteTablePropagationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayRouteTablePropagation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                   \n    public transitGatewayAttachmentId: string;\n\n                                                                                                                                                                                                                                                                                \n    public transitGatewayRouteTableId: string;\n\n                                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayRouteTablePropagationProps) {\n        super(scope, id, { type: CfnTransitGatewayRouteTablePropagation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'transitGatewayAttachmentId', this);\n        cdk.requireProperty(props, 'transitGatewayRouteTableId', this);\n\n        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;\n        this.transitGatewayRouteTableId = props.transitGatewayRouteTableId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayRouteTablePropagation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            transitGatewayAttachmentId: this.transitGatewayAttachmentId,\n            transitGatewayRouteTableId: this.transitGatewayRouteTableId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayRouteTablePropagationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                      \nexport interface CfnTransitGatewayVpcAttachmentProps {\n\n                                                                                                                                                                                                                                                                                                            \n    readonly addSubnetIds?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly options?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    readonly removeSubnetIds?: string[];\n\n                                                                                                                                                                                                                                \n    readonly subnetIds?: string[];\n\n                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                              \n    readonly transitGatewayId?: string;\n\n                                                                                                                                                                                                                       \n    readonly vpcId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayVpcAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayVpcAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayVpcAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addSubnetIds', cdk.listValidator(cdk.validateString))(properties.addSubnetIds));\n    errors.collect(cdk.propertyValidator('options', cdk.validateObject)(properties.options));\n    errors.collect(cdk.propertyValidator('removeSubnetIds', cdk.listValidator(cdk.validateString))(properties.removeSubnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayVpcAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayVpcAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayVpcAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::TransitGatewayVpcAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayVpcAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayVpcAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        AddSubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.addSubnetIds),\n        Options: cdk.objectToCloudFormation(properties.options),\n        RemoveSubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.removeSubnetIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayVpcAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayVpcAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayVpcAttachmentProps>();\n    ret.addPropertyResult('addSubnetIds', 'AddSubnetIds', properties.AddSubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AddSubnetIds) : undefined);\n    ret.addPropertyResult('options', 'Options', properties.Options != null ? cfn_parse.FromCloudFormation.getAny(properties.Options) : undefined);\n    ret.addPropertyResult('removeSubnetIds', 'RemoveSubnetIds', properties.RemoveSubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RemoveSubnetIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : undefined);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                            \nexport class CfnTransitGatewayVpcAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::TransitGatewayVpcAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayVpcAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayVpcAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayVpcAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                   \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                            \n    public addSubnetIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    public options: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                        \n    public removeSubnetIds: string[] | undefined;\n\n                                                                                                                                                                                                                                \n    public subnetIds: string[] | undefined;\n\n                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                              \n    public transitGatewayId: string | undefined;\n\n                                                                                                                                                                                                                       \n    public vpcId: string | undefined;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayVpcAttachmentProps = {}) {\n        super(scope, id, { type: CfnTransitGatewayVpcAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.addSubnetIds = props.addSubnetIds;\n        this.options = props.options;\n        this.removeSubnetIds = props.removeSubnetIds;\n        this.subnetIds = props.subnetIds;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::TransitGatewayVpcAttachment\", props.tags, { tagPropertyName: 'tags' });\n        this.transitGatewayId = props.transitGatewayId;\n        this.vpcId = props.vpcId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayVpcAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            addSubnetIds: this.addSubnetIds,\n            options: this.options,\n            removeSubnetIds: this.removeSubnetIds,\n            subnetIds: this.subnetIds,\n            tags: this.tags.renderTags(),\n            transitGatewayId: this.transitGatewayId,\n            vpcId: this.vpcId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayVpcAttachmentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                      \nexport interface CfnVPCProps {\n\n                                                                                                                                                                                                     \n    readonly cidrBlock: string;\n\nn    readonly enableDnsHostnames?: boolean | cdk.IResolvable;\n\nn    readonly enableDnsSupport?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly instanceTenancy?: string;\n\n                                                                                                                                                                             \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrBlock', cdk.requiredValidator)(properties.cidrBlock));\n    errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));\n    errors.collect(cdk.propertyValidator('enableDnsHostnames', cdk.validateBoolean)(properties.enableDnsHostnames));\n    errors.collect(cdk.propertyValidator('enableDnsSupport', cdk.validateBoolean)(properties.enableDnsSupport));\n    errors.collect(cdk.propertyValidator('instanceTenancy', cdk.validateString)(properties.instanceTenancy));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnVPCProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPC` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPC` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCPropsValidator(properties).assertSuccess();\n    return {\n        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),\n        EnableDnsHostnames: cdk.booleanToCloudFormation(properties.enableDnsHostnames),\n        EnableDnsSupport: cdk.booleanToCloudFormation(properties.enableDnsSupport),\n        InstanceTenancy: cdk.stringToCloudFormation(properties.instanceTenancy),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCProps>();\n    ret.addPropertyResult('cidrBlock', 'CidrBlock', cfn_parse.FromCloudFormation.getString(properties.CidrBlock));\n    ret.addPropertyResult('enableDnsHostnames', 'EnableDnsHostnames', properties.EnableDnsHostnames != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDnsHostnames) : undefined);\n    ret.addPropertyResult('enableDnsSupport', 'EnableDnsSupport', properties.EnableDnsSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDnsSupport) : undefined);\n    ret.addPropertyResult('instanceTenancy', 'InstanceTenancy', properties.InstanceTenancy != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceTenancy) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnVPC extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPC\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPC {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPC(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                  \n    public readonly attrCidrBlock: string;\n\n                                                                                                                                                                          \n    public readonly attrCidrBlockAssociations: string[];\n\n                                                                                                                                                                  \n    public readonly attrDefaultNetworkAcl: string;\n\n                                                                                                                                                                       \n    public readonly attrDefaultSecurityGroup: string;\n\n                                                                                                                                                                    \n    public readonly attrIpv6CidrBlocks: string[];\n\n                                                                                                                                                                                                     \n    public cidrBlock: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public enableDnsHostnames: boolean | cdk.IResolvable | undefined;\n\nn    public enableDnsSupport: boolean | cdk.IResolvable | undefined;\n\nn    public instanceTenancy: string | undefined;\n\n                                                                                                                                                                             \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCProps) {\n        super(scope, id, { type: CfnVPC.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cidrBlock', this);\n        this.attrCidrBlock = cdk.Token.asString(this.getAtt('CidrBlock'));\n        this.attrCidrBlockAssociations = cdk.Token.asList(this.getAtt('CidrBlockAssociations'));\n        this.attrDefaultNetworkAcl = cdk.Token.asString(this.getAtt('DefaultNetworkAcl'));\n        this.attrDefaultSecurityGroup = cdk.Token.asString(this.getAtt('DefaultSecurityGroup'));\n        this.attrIpv6CidrBlocks = cdk.Token.asList(this.getAtt('Ipv6CidrBlocks'));\n\n        this.cidrBlock = props.cidrBlock;\n        this.enableDnsHostnames = props.enableDnsHostnames;\n        this.enableDnsSupport = props.enableDnsSupport;\n        this.instanceTenancy = props.instanceTenancy;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::VPC\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPC.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cidrBlock: this.cidrBlock,\n            enableDnsHostnames: this.enableDnsHostnames,\n            enableDnsSupport: this.enableDnsSupport,\n            instanceTenancy: this.instanceTenancy,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                        \nexport interface CfnVPCCidrBlockProps {\n\n                                                                                                                                                                                         \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly amazonProvidedIpv6CidrBlock?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly cidrBlock?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly ipv6CidrBlock?: string;\n\n                                                                                                                                                                                                                                                    \n    readonly ipv6Pool?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCCidrBlockProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCCidrBlockProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCCidrBlockPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amazonProvidedIpv6CidrBlock', cdk.validateBoolean)(properties.amazonProvidedIpv6CidrBlock));\n    errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));\n    errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));\n    errors.collect(cdk.propertyValidator('ipv6Pool', cdk.validateString)(properties.ipv6Pool));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCCidrBlockProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCCidrBlock` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCCidrBlockProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCCidrBlock` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCCidrBlockPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCCidrBlockPropsValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        AmazonProvidedIpv6CidrBlock: cdk.booleanToCloudFormation(properties.amazonProvidedIpv6CidrBlock),\n        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),\n        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),\n        Ipv6Pool: cdk.stringToCloudFormation(properties.ipv6Pool),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCCidrBlockPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCCidrBlockProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCCidrBlockProps>();\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('amazonProvidedIpv6CidrBlock', 'AmazonProvidedIpv6CidrBlock', properties.AmazonProvidedIpv6CidrBlock != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AmazonProvidedIpv6CidrBlock) : undefined);\n    ret.addPropertyResult('cidrBlock', 'CidrBlock', properties.CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.CidrBlock) : undefined);\n    ret.addPropertyResult('ipv6CidrBlock', 'Ipv6CidrBlock', properties.Ipv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock) : undefined);\n    ret.addPropertyResult('ipv6Pool', 'Ipv6Pool', properties.Ipv6Pool != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6Pool) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCCidrBlock extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCCidrBlock\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCCidrBlock {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCCidrBlockPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCCidrBlock(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                         \n    public vpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public amazonProvidedIpv6CidrBlock: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    public cidrBlock: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public ipv6CidrBlock: string | undefined;\n\n                                                                                                                                                                                                                                                    \n    public ipv6Pool: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCCidrBlockProps) {\n        super(scope, id, { type: CfnVPCCidrBlock.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'vpcId', this);\n\n        this.vpcId = props.vpcId;\n        this.amazonProvidedIpv6CidrBlock = props.amazonProvidedIpv6CidrBlock;\n        this.cidrBlock = props.cidrBlock;\n        this.ipv6CidrBlock = props.ipv6CidrBlock;\n        this.ipv6Pool = props.ipv6Pool;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCCidrBlock.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            vpcId: this.vpcId,\n            amazonProvidedIpv6CidrBlock: this.amazonProvidedIpv6CidrBlock,\n            cidrBlock: this.cidrBlock,\n            ipv6CidrBlock: this.ipv6CidrBlock,\n            ipv6Pool: this.ipv6Pool,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCCidrBlockPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                  \nexport interface CfnVPCDHCPOptionsAssociationProps {\n\n                                                                                                                                                                                                                                                                                                \n    readonly dhcpOptionsId: string;\n\n                                                                                                                                                                                                                   \n    readonly vpcId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCDHCPOptionsAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCDHCPOptionsAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCDHCPOptionsAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dhcpOptionsId', cdk.requiredValidator)(properties.dhcpOptionsId));\n    errors.collect(cdk.propertyValidator('dhcpOptionsId', cdk.validateString)(properties.dhcpOptionsId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCDHCPOptionsAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCDHCPOptionsAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCDHCPOptionsAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCDHCPOptionsAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCDHCPOptionsAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCDHCPOptionsAssociationPropsValidator(properties).assertSuccess();\n    return {\n        DhcpOptionsId: cdk.stringToCloudFormation(properties.dhcpOptionsId),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCDHCPOptionsAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCDHCPOptionsAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCDHCPOptionsAssociationProps>();\n    ret.addPropertyResult('dhcpOptionsId', 'DhcpOptionsId', cfn_parse.FromCloudFormation.getString(properties.DhcpOptionsId));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCDHCPOptionsAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCDHCPOptionsAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCDHCPOptionsAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCDHCPOptionsAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCDHCPOptionsAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                \n    public dhcpOptionsId: string;\n\n                                                                                                                                                                                                                   \n    public vpcId: string;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCDHCPOptionsAssociationProps) {\n        super(scope, id, { type: CfnVPCDHCPOptionsAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'dhcpOptionsId', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.dhcpOptionsId = props.dhcpOptionsId;\n        this.vpcId = props.vpcId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCDHCPOptionsAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            dhcpOptionsId: this.dhcpOptionsId,\n            vpcId: this.vpcId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCDHCPOptionsAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                      \nexport interface CfnVPCEndpointProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly serviceName: string;\n\n                                                                                                                                                                                                                          \n    readonly vpcId: string;\n\nn    readonly policyDocument?: any | cdk.IResolvable;\n\nn    readonly privateDnsEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                            \n    readonly routeTableIds?: string[];\n\n                                                                                                                                                                                                                                                                                            \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    readonly subnetIds?: string[];\n\n                                                                                                                                                                                                                                   \n    readonly vpcEndpointType?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('privateDnsEnabled', cdk.validateBoolean)(properties.privateDnsEnabled));\n    errors.collect(cdk.propertyValidator('routeTableIds', cdk.listValidator(cdk.validateString))(properties.routeTableIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.requiredValidator)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('vpcEndpointType', cdk.validateString)(properties.vpcEndpointType));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCEndpointPropsValidator(properties).assertSuccess();\n    return {\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n        PrivateDnsEnabled: cdk.booleanToCloudFormation(properties.privateDnsEnabled),\n        RouteTableIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.routeTableIds),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        VpcEndpointType: cdk.stringToCloudFormation(properties.vpcEndpointType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCEndpointProps>();\n    ret.addPropertyResult('serviceName', 'ServiceName', cfn_parse.FromCloudFormation.getString(properties.ServiceName));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', properties.PolicyDocument != null ? cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument) : undefined);\n    ret.addPropertyResult('privateDnsEnabled', 'PrivateDnsEnabled', properties.PrivateDnsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PrivateDnsEnabled) : undefined);\n    ret.addPropertyResult('routeTableIds', 'RouteTableIds', properties.RouteTableIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RouteTableIds) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addPropertyResult('vpcEndpointType', 'VpcEndpointType', properties.VpcEndpointType != null ? cfn_parse.FromCloudFormation.getString(properties.VpcEndpointType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCEndpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                     \n    public readonly attrCreationTimestamp: string;\n\nn    public readonly attrDnsEntries: string[];\n\n                                                                                                                                                                                                                                        \n    public readonly attrNetworkInterfaceIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public serviceName: string;\n\n                                                                                                                                                                                                                          \n    public vpcId: string;\n\nn    public policyDocument: any | cdk.IResolvable | undefined;\n\nn    public privateDnsEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    public routeTableIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    public subnetIds: string[] | undefined;\n\n                                                                                                                                                                                                                                   \n    public vpcEndpointType: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCEndpointProps) {\n        super(scope, id, { type: CfnVPCEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'serviceName', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrCreationTimestamp = cdk.Token.asString(this.getAtt('CreationTimestamp'));\n        this.attrDnsEntries = cdk.Token.asList(this.getAtt('DnsEntries'));\n        this.attrNetworkInterfaceIds = cdk.Token.asList(this.getAtt('NetworkInterfaceIds'));\n\n        this.serviceName = props.serviceName;\n        this.vpcId = props.vpcId;\n        this.policyDocument = props.policyDocument;\n        this.privateDnsEnabled = props.privateDnsEnabled;\n        this.routeTableIds = props.routeTableIds;\n        this.securityGroupIds = props.securityGroupIds;\n        this.subnetIds = props.subnetIds;\n        this.vpcEndpointType = props.vpcEndpointType;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            serviceName: this.serviceName,\n            vpcId: this.vpcId,\n            policyDocument: this.policyDocument,\n            privateDnsEnabled: this.privateDnsEnabled,\n            routeTableIds: this.routeTableIds,\n            securityGroupIds: this.securityGroupIds,\n            subnetIds: this.subnetIds,\n            vpcEndpointType: this.vpcEndpointType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCEndpointPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                  \nexport interface CfnVPCEndpointConnectionNotificationProps {\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly connectionEvents: string[];\n\n                                                                                                                                                                                                                                                                                    \n    readonly connectionNotificationArn: string;\n\n                                                                                                                                                                                                                                                    \n    readonly serviceId?: string;\n\n                                                                                                                                                                                                                                                \n    readonly vpcEndpointId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCEndpointConnectionNotificationProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointConnectionNotificationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCEndpointConnectionNotificationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionEvents', cdk.requiredValidator)(properties.connectionEvents));\n    errors.collect(cdk.propertyValidator('connectionEvents', cdk.listValidator(cdk.validateString))(properties.connectionEvents));\n    errors.collect(cdk.propertyValidator('connectionNotificationArn', cdk.requiredValidator)(properties.connectionNotificationArn));\n    errors.collect(cdk.propertyValidator('connectionNotificationArn', cdk.validateString)(properties.connectionNotificationArn));\n    errors.collect(cdk.propertyValidator('serviceId', cdk.validateString)(properties.serviceId));\n    errors.collect(cdk.propertyValidator('vpcEndpointId', cdk.validateString)(properties.vpcEndpointId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCEndpointConnectionNotificationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCEndpointConnectionNotification` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointConnectionNotificationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCEndpointConnectionNotification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCEndpointConnectionNotificationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCEndpointConnectionNotificationPropsValidator(properties).assertSuccess();\n    return {\n        ConnectionEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.connectionEvents),\n        ConnectionNotificationArn: cdk.stringToCloudFormation(properties.connectionNotificationArn),\n        ServiceId: cdk.stringToCloudFormation(properties.serviceId),\n        VPCEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCEndpointConnectionNotificationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCEndpointConnectionNotificationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCEndpointConnectionNotificationProps>();\n    ret.addPropertyResult('connectionEvents', 'ConnectionEvents', cfn_parse.FromCloudFormation.getStringArray(properties.ConnectionEvents));\n    ret.addPropertyResult('connectionNotificationArn', 'ConnectionNotificationArn', cfn_parse.FromCloudFormation.getString(properties.ConnectionNotificationArn));\n    ret.addPropertyResult('serviceId', 'ServiceId', properties.ServiceId != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceId) : undefined);\n    ret.addPropertyResult('vpcEndpointId', 'VPCEndpointId', properties.VPCEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.VPCEndpointId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCEndpointConnectionNotification extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCEndpointConnectionNotification\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCEndpointConnectionNotification {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCEndpointConnectionNotificationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCEndpointConnectionNotification(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public connectionEvents: string[];\n\n                                                                                                                                                                                                                                                                                    \n    public connectionNotificationArn: string;\n\n                                                                                                                                                                                                                                                    \n    public serviceId: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public vpcEndpointId: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCEndpointConnectionNotificationProps) {\n        super(scope, id, { type: CfnVPCEndpointConnectionNotification.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'connectionEvents', this);\n        cdk.requireProperty(props, 'connectionNotificationArn', this);\n\n        this.connectionEvents = props.connectionEvents;\n        this.connectionNotificationArn = props.connectionNotificationArn;\n        this.serviceId = props.serviceId;\n        this.vpcEndpointId = props.vpcEndpointId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCEndpointConnectionNotification.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            connectionEvents: this.connectionEvents,\n            connectionNotificationArn: this.connectionNotificationArn,\n            serviceId: this.serviceId,\n            vpcEndpointId: this.vpcEndpointId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCEndpointConnectionNotificationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                    \nexport interface CfnVPCEndpointServiceProps {\n\n                                                                                                                                                                                                                                                                                                         \n    readonly acceptanceRequired?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                            \n    readonly gatewayLoadBalancerArns?: string[];\n\n                                                                                                                                                                                                                                                                                             \n    readonly networkLoadBalancerArns?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly payerResponsibility?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCEndpointServiceProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointServiceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCEndpointServicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceptanceRequired', cdk.validateBoolean)(properties.acceptanceRequired));\n    errors.collect(cdk.propertyValidator('gatewayLoadBalancerArns', cdk.listValidator(cdk.validateString))(properties.gatewayLoadBalancerArns));\n    errors.collect(cdk.propertyValidator('networkLoadBalancerArns', cdk.listValidator(cdk.validateString))(properties.networkLoadBalancerArns));\n    errors.collect(cdk.propertyValidator('payerResponsibility', cdk.validateString)(properties.payerResponsibility));\n    return errors.wrap('supplied properties not correct for \"CfnVPCEndpointServiceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCEndpointService` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointServiceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCEndpointService` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCEndpointServicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCEndpointServicePropsValidator(properties).assertSuccess();\n    return {\n        AcceptanceRequired: cdk.booleanToCloudFormation(properties.acceptanceRequired),\n        GatewayLoadBalancerArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.gatewayLoadBalancerArns),\n        NetworkLoadBalancerArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.networkLoadBalancerArns),\n        PayerResponsibility: cdk.stringToCloudFormation(properties.payerResponsibility),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCEndpointServicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCEndpointServiceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCEndpointServiceProps>();\n    ret.addPropertyResult('acceptanceRequired', 'AcceptanceRequired', properties.AcceptanceRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AcceptanceRequired) : undefined);\n    ret.addPropertyResult('gatewayLoadBalancerArns', 'GatewayLoadBalancerArns', properties.GatewayLoadBalancerArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GatewayLoadBalancerArns) : undefined);\n    ret.addPropertyResult('networkLoadBalancerArns', 'NetworkLoadBalancerArns', properties.NetworkLoadBalancerArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NetworkLoadBalancerArns) : undefined);\n    ret.addPropertyResult('payerResponsibility', 'PayerResponsibility', properties.PayerResponsibility != null ? cfn_parse.FromCloudFormation.getString(properties.PayerResponsibility) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCEndpointService extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCEndpointService\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCEndpointService {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCEndpointServicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCEndpointService(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                         \n    public acceptanceRequired: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public gatewayLoadBalancerArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                             \n    public networkLoadBalancerArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public payerResponsibility: string | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCEndpointServiceProps = {}) {\n        super(scope, id, { type: CfnVPCEndpointService.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.acceptanceRequired = props.acceptanceRequired;\n        this.gatewayLoadBalancerArns = props.gatewayLoadBalancerArns;\n        this.networkLoadBalancerArns = props.networkLoadBalancerArns;\n        this.payerResponsibility = props.payerResponsibility;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCEndpointService.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            acceptanceRequired: this.acceptanceRequired,\n            gatewayLoadBalancerArns: this.gatewayLoadBalancerArns,\n            networkLoadBalancerArns: this.networkLoadBalancerArns,\n            payerResponsibility: this.payerResponsibility,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCEndpointServicePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                          \nexport interface CfnVPCEndpointServicePermissionsProps {\n\n                                                                                                                                                                                                                                   \n    readonly serviceId: string;\n\nn    readonly allowedPrincipals?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCEndpointServicePermissionsProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointServicePermissionsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCEndpointServicePermissionsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedPrincipals', cdk.listValidator(cdk.validateString))(properties.allowedPrincipals));\n    errors.collect(cdk.propertyValidator('serviceId', cdk.requiredValidator)(properties.serviceId));\n    errors.collect(cdk.propertyValidator('serviceId', cdk.validateString)(properties.serviceId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCEndpointServicePermissionsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCEndpointServicePermissions` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCEndpointServicePermissionsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCEndpointServicePermissions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCEndpointServicePermissionsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCEndpointServicePermissionsPropsValidator(properties).assertSuccess();\n    return {\n        ServiceId: cdk.stringToCloudFormation(properties.serviceId),\n        AllowedPrincipals: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedPrincipals),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCEndpointServicePermissionsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCEndpointServicePermissionsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCEndpointServicePermissionsProps>();\n    ret.addPropertyResult('serviceId', 'ServiceId', cfn_parse.FromCloudFormation.getString(properties.ServiceId));\n    ret.addPropertyResult('allowedPrincipals', 'AllowedPrincipals', properties.AllowedPrincipals != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedPrincipals) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCEndpointServicePermissions extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCEndpointServicePermissions\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCEndpointServicePermissions {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCEndpointServicePermissionsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCEndpointServicePermissions(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                   \n    public serviceId: string;\n\nn    public allowedPrincipals: string[] | undefined;\n\n                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCEndpointServicePermissionsProps) {\n        super(scope, id, { type: CfnVPCEndpointServicePermissions.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'serviceId', this);\n\n        this.serviceId = props.serviceId;\n        this.allowedPrincipals = props.allowedPrincipals;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCEndpointServicePermissions.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            serviceId: this.serviceId,\n            allowedPrincipals: this.allowedPrincipals,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCEndpointServicePermissionsPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                          \nexport interface CfnVPCGatewayAttachmentProps {\n\n                                                                                                                                                                                                           \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly internetGatewayId?: string;\n\n                                                                                                                                                                                                                                                                                                                                  \n    readonly vpnGatewayId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCGatewayAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCGatewayAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCGatewayAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('internetGatewayId', cdk.validateString)(properties.internetGatewayId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.validateString)(properties.vpnGatewayId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCGatewayAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCGatewayAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCGatewayAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCGatewayAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCGatewayAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCGatewayAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        InternetGatewayId: cdk.stringToCloudFormation(properties.internetGatewayId),\n        VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCGatewayAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCGatewayAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCGatewayAttachmentProps>();\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('internetGatewayId', 'InternetGatewayId', properties.InternetGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.InternetGatewayId) : undefined);\n    ret.addPropertyResult('vpnGatewayId', 'VpnGatewayId', properties.VpnGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.VpnGatewayId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnVPCGatewayAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCGatewayAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCGatewayAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCGatewayAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCGatewayAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                           \n    public vpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                \n    public internetGatewayId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                  \n    public vpnGatewayId: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCGatewayAttachmentProps) {\n        super(scope, id, { type: CfnVPCGatewayAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'vpcId', this);\n\n        this.vpcId = props.vpcId;\n        this.internetGatewayId = props.internetGatewayId;\n        this.vpnGatewayId = props.vpnGatewayId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCGatewayAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            vpcId: this.vpcId,\n            internetGatewayId: this.internetGatewayId,\n            vpnGatewayId: this.vpnGatewayId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCGatewayAttachmentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnVPCPeeringConnectionProps {\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly peerVpcId: string;\n\n                                                                                                                                                                                                         \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly peerOwnerId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly peerRegion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly peerRoleArn?: string;\n\n                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPCPeeringConnectionProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPCPeeringConnectionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPCPeeringConnectionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('peerOwnerId', cdk.validateString)(properties.peerOwnerId));\n    errors.collect(cdk.propertyValidator('peerRegion', cdk.validateString)(properties.peerRegion));\n    errors.collect(cdk.propertyValidator('peerRoleArn', cdk.validateString)(properties.peerRoleArn));\n    errors.collect(cdk.propertyValidator('peerVpcId', cdk.requiredValidator)(properties.peerVpcId));\n    errors.collect(cdk.propertyValidator('peerVpcId', cdk.validateString)(properties.peerVpcId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnVPCPeeringConnectionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPCPeeringConnection` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPCPeeringConnectionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPCPeeringConnection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPCPeeringConnectionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPCPeeringConnectionPropsValidator(properties).assertSuccess();\n    return {\n        PeerVpcId: cdk.stringToCloudFormation(properties.peerVpcId),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        PeerOwnerId: cdk.stringToCloudFormation(properties.peerOwnerId),\n        PeerRegion: cdk.stringToCloudFormation(properties.peerRegion),\n        PeerRoleArn: cdk.stringToCloudFormation(properties.peerRoleArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPCPeeringConnectionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPCPeeringConnectionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPCPeeringConnectionProps>();\n    ret.addPropertyResult('peerVpcId', 'PeerVpcId', cfn_parse.FromCloudFormation.getString(properties.PeerVpcId));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('peerOwnerId', 'PeerOwnerId', properties.PeerOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.PeerOwnerId) : undefined);\n    ret.addPropertyResult('peerRegion', 'PeerRegion', properties.PeerRegion != null ? cfn_parse.FromCloudFormation.getString(properties.PeerRegion) : undefined);\n    ret.addPropertyResult('peerRoleArn', 'PeerRoleArn', properties.PeerRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.PeerRoleArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPCPeeringConnection extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPCPeeringConnection\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPCPeeringConnection {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPCPeeringConnectionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPCPeeringConnection(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                    \n    public peerVpcId: string;\n\n                                                                                                                                                                                                         \n    public vpcId: string;\n\n                                                                                                                                                                                                                                                                                            \n    public peerOwnerId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public peerRegion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    public peerRoleArn: string | undefined;\n\n                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnVPCPeeringConnectionProps) {\n        super(scope, id, { type: CfnVPCPeeringConnection.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'peerVpcId', this);\n        cdk.requireProperty(props, 'vpcId', this);\n\n        this.peerVpcId = props.peerVpcId;\n        this.vpcId = props.vpcId;\n        this.peerOwnerId = props.peerOwnerId;\n        this.peerRegion = props.peerRegion;\n        this.peerRoleArn = props.peerRoleArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::VPCPeeringConnection\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPCPeeringConnection.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            peerVpcId: this.peerVpcId,\n            vpcId: this.vpcId,\n            peerOwnerId: this.peerOwnerId,\n            peerRegion: this.peerRegion,\n            peerRoleArn: this.peerRoleArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPCPeeringConnectionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                           \nexport interface CfnVPNConnectionProps {\n\n                                                                                                                                                                                                                                                       \n    readonly customerGatewayId: string;\n\n                                                                                                                                                                                                    \n    readonly type: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly staticRoutesOnly?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                 \n    readonly transitGatewayId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    readonly vpnGatewayId?: string;\n\n                                                                                                                                                                                                                                             \n    readonly vpnTunnelOptionsSpecifications?: Array<CfnVPNConnection.VpnTunnelOptionsSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPNConnectionProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPNConnectionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPNConnectionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customerGatewayId', cdk.requiredValidator)(properties.customerGatewayId));\n    errors.collect(cdk.propertyValidator('customerGatewayId', cdk.validateString)(properties.customerGatewayId));\n    errors.collect(cdk.propertyValidator('staticRoutesOnly', cdk.validateBoolean)(properties.staticRoutesOnly));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.validateString)(properties.vpnGatewayId));\n    errors.collect(cdk.propertyValidator('vpnTunnelOptionsSpecifications', cdk.listValidator(CfnVPNConnection_VpnTunnelOptionsSpecificationPropertyValidator))(properties.vpnTunnelOptionsSpecifications));\n    return errors.wrap('supplied properties not correct for \"CfnVPNConnectionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPNConnection` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPNConnectionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPNConnection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPNConnectionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPNConnectionPropsValidator(properties).assertSuccess();\n    return {\n        CustomerGatewayId: cdk.stringToCloudFormation(properties.customerGatewayId),\n        Type: cdk.stringToCloudFormation(properties.type),\n        StaticRoutesOnly: cdk.booleanToCloudFormation(properties.staticRoutesOnly),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),\n        VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),\n        VpnTunnelOptionsSpecifications: cdk.listMapper(cfnVPNConnectionVpnTunnelOptionsSpecificationPropertyToCloudFormation)(properties.vpnTunnelOptionsSpecifications),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPNConnectionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPNConnectionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPNConnectionProps>();\n    ret.addPropertyResult('customerGatewayId', 'CustomerGatewayId', cfn_parse.FromCloudFormation.getString(properties.CustomerGatewayId));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('staticRoutesOnly', 'StaticRoutesOnly', properties.StaticRoutesOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.StaticRoutesOnly) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('transitGatewayId', 'TransitGatewayId', properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : undefined);\n    ret.addPropertyResult('vpnGatewayId', 'VpnGatewayId', properties.VpnGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.VpnGatewayId) : undefined);\n    ret.addPropertyResult('vpnTunnelOptionsSpecifications', 'VpnTunnelOptionsSpecifications', properties.VpnTunnelOptionsSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnVPNConnectionVpnTunnelOptionsSpecificationPropertyFromCloudFormation)(properties.VpnTunnelOptionsSpecifications) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPNConnection extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPNConnection\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPNConnection {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPNConnectionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPNConnection(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                       \n    public customerGatewayId: string;\n\n                                                                                                                                                                                                    \n    public type: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public staticRoutesOnly: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                 \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    public transitGatewayId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    public vpnGatewayId: string | undefined;\n\n                                                                                                                                                                                                                                             \n    public vpnTunnelOptionsSpecifications: Array<CfnVPNConnection.VpnTunnelOptionsSpecificationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnVPNConnectionProps) {\n        super(scope, id, { type: CfnVPNConnection.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'customerGatewayId', this);\n        cdk.requireProperty(props, 'type', this);\n\n        this.customerGatewayId = props.customerGatewayId;\n        this.type = props.type;\n        this.staticRoutesOnly = props.staticRoutesOnly;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::VPNConnection\", props.tags, { tagPropertyName: 'tags' });\n        this.transitGatewayId = props.transitGatewayId;\n        this.vpnGatewayId = props.vpnGatewayId;\n        this.vpnTunnelOptionsSpecifications = props.vpnTunnelOptionsSpecifications;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPNConnection.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            customerGatewayId: this.customerGatewayId,\n            type: this.type,\n            staticRoutesOnly: this.staticRoutesOnly,\n            tags: this.tags.renderTags(),\n            transitGatewayId: this.transitGatewayId,\n            vpnGatewayId: this.vpnGatewayId,\n            vpnTunnelOptionsSpecifications: this.vpnTunnelOptionsSpecifications,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPNConnectionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnVPNConnection {\n                                                                                                                                                                                                                                                                         \n    export interface VpnTunnelOptionsSpecificationProperty {\nn        readonly preSharedKey?: string;\nn        readonly tunnelInsideCidr?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpnTunnelOptionsSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `VpnTunnelOptionsSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPNConnection_VpnTunnelOptionsSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('preSharedKey', cdk.validateString)(properties.preSharedKey));\n    errors.collect(cdk.propertyValidator('tunnelInsideCidr', cdk.validateString)(properties.tunnelInsideCidr));\n    return errors.wrap('supplied properties not correct for \"VpnTunnelOptionsSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification` resource\n *\n * @param properties - the TypeScript properties of a `VpnTunnelOptionsSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPNConnectionVpnTunnelOptionsSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPNConnection_VpnTunnelOptionsSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        PreSharedKey: cdk.stringToCloudFormation(properties.preSharedKey),\n        TunnelInsideCidr: cdk.stringToCloudFormation(properties.tunnelInsideCidr),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPNConnectionVpnTunnelOptionsSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPNConnection.VpnTunnelOptionsSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPNConnection.VpnTunnelOptionsSpecificationProperty>();\n    ret.addPropertyResult('preSharedKey', 'PreSharedKey', properties.PreSharedKey != null ? cfn_parse.FromCloudFormation.getString(properties.PreSharedKey) : undefined);\n    ret.addPropertyResult('tunnelInsideCidr', 'TunnelInsideCidr', properties.TunnelInsideCidr != null ? cfn_parse.FromCloudFormation.getString(properties.TunnelInsideCidr) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnVPNConnectionRouteProps {\n\n                                                                                                                                                                                                                                                                 \n    readonly destinationCidrBlock: string;\n\n                                                                                                                                                                                                                         \n    readonly vpnConnectionId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPNConnectionRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPNConnectionRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPNConnectionRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.requiredValidator)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));\n    errors.collect(cdk.propertyValidator('vpnConnectionId', cdk.requiredValidator)(properties.vpnConnectionId));\n    errors.collect(cdk.propertyValidator('vpnConnectionId', cdk.validateString)(properties.vpnConnectionId));\n    return errors.wrap('supplied properties not correct for \"CfnVPNConnectionRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPNConnectionRoute` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPNConnectionRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPNConnectionRoute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPNConnectionRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPNConnectionRoutePropsValidator(properties).assertSuccess();\n    return {\n        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),\n        VpnConnectionId: cdk.stringToCloudFormation(properties.vpnConnectionId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPNConnectionRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPNConnectionRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPNConnectionRouteProps>();\n    ret.addPropertyResult('destinationCidrBlock', 'DestinationCidrBlock', cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));\n    ret.addPropertyResult('vpnConnectionId', 'VpnConnectionId', cfn_parse.FromCloudFormation.getString(properties.VpnConnectionId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPNConnectionRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPNConnectionRoute\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPNConnectionRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPNConnectionRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPNConnectionRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                 \n    public destinationCidrBlock: string;\n\n                                                                                                                                                                                                                         \n    public vpnConnectionId: string;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnVPNConnectionRouteProps) {\n        super(scope, id, { type: CfnVPNConnectionRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'destinationCidrBlock', this);\n        cdk.requireProperty(props, 'vpnConnectionId', this);\n\n        this.destinationCidrBlock = props.destinationCidrBlock;\n        this.vpnConnectionId = props.vpnConnectionId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPNConnectionRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinationCidrBlock: this.destinationCidrBlock,\n            vpnConnectionId: this.vpnConnectionId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPNConnectionRoutePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                     \nexport interface CfnVPNGatewayProps {\n\n                                                                                                                                                                                                                                   \n    readonly type: string;\n\n                                                                                                                                                                                                                                                            \n    readonly amazonSideAsn?: number;\n\n                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPNGatewayProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPNGatewayProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPNGatewayPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amazonSideAsn', cdk.validateNumber)(properties.amazonSideAsn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnVPNGatewayProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPNGateway` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPNGatewayProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPNGateway` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPNGatewayPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPNGatewayPropsValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        AmazonSideAsn: cdk.numberToCloudFormation(properties.amazonSideAsn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPNGatewayPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPNGatewayProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPNGatewayProps>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('amazonSideAsn', 'AmazonSideAsn', properties.AmazonSideAsn != null ? cfn_parse.FromCloudFormation.getNumber(properties.AmazonSideAsn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPNGateway extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPNGateway\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPNGateway {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPNGatewayPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPNGateway(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                   \n    public type: string;\n\n                                                                                                                                                                                                                                                            \n    public amazonSideAsn: number | undefined;\n\n                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnVPNGatewayProps) {\n        super(scope, id, { type: CfnVPNGateway.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'type', this);\n\n        this.type = props.type;\n        this.amazonSideAsn = props.amazonSideAsn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::VPNGateway\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPNGateway.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            type: this.type,\n            amazonSideAsn: this.amazonSideAsn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPNGatewayPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnVPNGatewayRoutePropagationProps {\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly routeTableIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly vpnGatewayId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVPNGatewayRoutePropagationProps`\n *\n * @param properties - the TypeScript properties of a `CfnVPNGatewayRoutePropagationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVPNGatewayRoutePropagationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('routeTableIds', cdk.requiredValidator)(properties.routeTableIds));\n    errors.collect(cdk.propertyValidator('routeTableIds', cdk.listValidator(cdk.validateString))(properties.routeTableIds));\n    errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.requiredValidator)(properties.vpnGatewayId));\n    errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.validateString)(properties.vpnGatewayId));\n    return errors.wrap('supplied properties not correct for \"CfnVPNGatewayRoutePropagationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VPNGatewayRoutePropagation` resource\n *\n * @param properties - the TypeScript properties of a `CfnVPNGatewayRoutePropagationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VPNGatewayRoutePropagation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVPNGatewayRoutePropagationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVPNGatewayRoutePropagationPropsValidator(properties).assertSuccess();\n    return {\n        RouteTableIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.routeTableIds),\n        VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVPNGatewayRoutePropagationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVPNGatewayRoutePropagationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVPNGatewayRoutePropagationProps>();\n    ret.addPropertyResult('routeTableIds', 'RouteTableIds', cfn_parse.FromCloudFormation.getStringArray(properties.RouteTableIds));\n    ret.addPropertyResult('vpnGatewayId', 'VpnGatewayId', cfn_parse.FromCloudFormation.getString(properties.VpnGatewayId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVPNGatewayRoutePropagation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VPNGatewayRoutePropagation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVPNGatewayRoutePropagation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVPNGatewayRoutePropagationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVPNGatewayRoutePropagation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                    \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public routeTableIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    public vpnGatewayId: string;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnVPNGatewayRoutePropagationProps) {\n        super(scope, id, { type: CfnVPNGatewayRoutePropagation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'routeTableIds', this);\n        cdk.requireProperty(props, 'vpnGatewayId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.routeTableIds = props.routeTableIds;\n        this.vpnGatewayId = props.vpnGatewayId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVPNGatewayRoutePropagation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            routeTableIds: this.routeTableIds,\n            vpnGatewayId: this.vpnGatewayId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVPNGatewayRoutePropagationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                  \nexport interface CfnVolumeProps {\n\n                                                                                                                                                                                                                                    \n    readonly availabilityZone: string;\n\nn    readonly autoEnableIo?: boolean | cdk.IResolvable;\n\nn    readonly encrypted?: boolean | cdk.IResolvable;\n\nn    readonly iops?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly kmsKeyId?: string;\n\nn    readonly multiAttachEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly outpostArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly size?: number;\n\n                                                                                                                                                                                                                                                                               \n    readonly snapshotId?: string;\n\n                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                            \n    readonly throughput?: number;\n\nn    readonly volumeType?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVolumeProps`\n *\n * @param properties - the TypeScript properties of a `CfnVolumeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVolumePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoEnableIo', cdk.validateBoolean)(properties.autoEnableIo));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.requiredValidator)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('multiAttachEnabled', cdk.validateBoolean)(properties.multiAttachEnabled));\n    errors.collect(cdk.propertyValidator('outpostArn', cdk.validateString)(properties.outpostArn));\n    errors.collect(cdk.propertyValidator('size', cdk.validateNumber)(properties.size));\n    errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('throughput', cdk.validateNumber)(properties.throughput));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"CfnVolumeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::Volume` resource\n *\n * @param properties - the TypeScript properties of a `CfnVolumeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::Volume` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVolumePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVolumePropsValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        AutoEnableIO: cdk.booleanToCloudFormation(properties.autoEnableIo),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MultiAttachEnabled: cdk.booleanToCloudFormation(properties.multiAttachEnabled),\n        OutpostArn: cdk.stringToCloudFormation(properties.outpostArn),\n        Size: cdk.numberToCloudFormation(properties.size),\n        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Throughput: cdk.numberToCloudFormation(properties.throughput),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVolumePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVolumeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVolumeProps>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone));\n    ret.addPropertyResult('autoEnableIo', 'AutoEnableIO', properties.AutoEnableIO != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoEnableIO) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('multiAttachEnabled', 'MultiAttachEnabled', properties.MultiAttachEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MultiAttachEnabled) : undefined);\n    ret.addPropertyResult('outpostArn', 'OutpostArn', properties.OutpostArn != null ? cfn_parse.FromCloudFormation.getString(properties.OutpostArn) : undefined);\n    ret.addPropertyResult('size', 'Size', properties.Size != null ? cfn_parse.FromCloudFormation.getNumber(properties.Size) : undefined);\n    ret.addPropertyResult('snapshotId', 'SnapshotId', properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('throughput', 'Throughput', properties.Throughput != null ? cfn_parse.FromCloudFormation.getNumber(properties.Throughput) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVolume extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::Volume\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVolume {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVolumePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVolume(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                    \n    public availabilityZone: string;\n\nn    public autoEnableIo: boolean | cdk.IResolvable | undefined;\n\nn    public encrypted: boolean | cdk.IResolvable | undefined;\n\nn    public iops: number | undefined;\n\nn    public kmsKeyId: string | undefined;\n\nn    public multiAttachEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    public outpostArn: string | undefined;\n\nn    public size: number | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public snapshotId: string | undefined;\n\n                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    public throughput: number | undefined;\n\nn    public volumeType: string | undefined;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnVolumeProps) {\n        super(scope, id, { type: CfnVolume.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'availabilityZone', this);\n\n        this.availabilityZone = props.availabilityZone;\n        this.autoEnableIo = props.autoEnableIo;\n        this.encrypted = props.encrypted;\n        this.iops = props.iops;\n        this.kmsKeyId = props.kmsKeyId;\n        this.multiAttachEnabled = props.multiAttachEnabled;\n        this.outpostArn = props.outpostArn;\n        this.size = props.size;\n        this.snapshotId = props.snapshotId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EC2::Volume\", props.tags, { tagPropertyName: 'tags' });\n        this.throughput = props.throughput;\n        this.volumeType = props.volumeType;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::EC2::Volume\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVolume.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            availabilityZone: this.availabilityZone,\n            autoEnableIo: this.autoEnableIo,\n            encrypted: this.encrypted,\n            iops: this.iops,\n            kmsKeyId: this.kmsKeyId,\n            multiAttachEnabled: this.multiAttachEnabled,\n            outpostArn: this.outpostArn,\n            size: this.size,\n            snapshotId: this.snapshotId,\n            tags: this.tags.renderTags(),\n            throughput: this.throughput,\n            volumeType: this.volumeType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVolumePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnVolumeAttachmentProps {\n\n                                                                                                                                                                                                                                               \n    readonly device: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly instanceId: string;\n\nn    readonly volumeId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVolumeAttachmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnVolumeAttachmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVolumeAttachmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('device', cdk.requiredValidator)(properties.device));\n    errors.collect(cdk.propertyValidator('device', cdk.validateString)(properties.device));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.requiredValidator)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('volumeId', cdk.requiredValidator)(properties.volumeId));\n    errors.collect(cdk.propertyValidator('volumeId', cdk.validateString)(properties.volumeId));\n    return errors.wrap('supplied properties not correct for \"CfnVolumeAttachmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EC2::VolumeAttachment` resource\n *\n * @param properties - the TypeScript properties of a `CfnVolumeAttachmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EC2::VolumeAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVolumeAttachmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVolumeAttachmentPropsValidator(properties).assertSuccess();\n    return {\n        Device: cdk.stringToCloudFormation(properties.device),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n        VolumeId: cdk.stringToCloudFormation(properties.volumeId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVolumeAttachmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVolumeAttachmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVolumeAttachmentProps>();\n    ret.addPropertyResult('device', 'Device', cfn_parse.FromCloudFormation.getString(properties.Device));\n    ret.addPropertyResult('instanceId', 'InstanceId', cfn_parse.FromCloudFormation.getString(properties.InstanceId));\n    ret.addPropertyResult('volumeId', 'VolumeId', cfn_parse.FromCloudFormation.getString(properties.VolumeId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVolumeAttachment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EC2::VolumeAttachment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVolumeAttachment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVolumeAttachmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVolumeAttachment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                               \n    public device: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public instanceId: string;\n\nn    public volumeId: string;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnVolumeAttachmentProps) {\n        super(scope, id, { type: CfnVolumeAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'device', this);\n        cdk.requireProperty(props, 'instanceId', this);\n        cdk.requireProperty(props, 'volumeId', this);\n\n        this.device = props.device;\n        this.instanceId = props.instanceId;\n        this.volumeId = props.volumeId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVolumeAttachment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            device: this.device,\n            instanceId: this.instanceId,\n            volumeId: this.volumeId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVolumeAttachmentPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
