{
  "version": 3,
  "sources": ["instance.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport * as iam from '../../aws-iam';\n\nimport { Annotations, Aspects, Duration, Fn, IResource, Lazy, Resource, Stack, Tags } from '../../core';\nimport { Construct } from 'constructs';\nimport { InstanceRequireImdsv2Aspect } from './aspects';\nimport { CloudFormationInit } from './cfn-init';\nimport { Connections, IConnectable } from './connections';\nimport { CfnInstance } from './ec2.generated';\nimport { InstanceType } from './instance-types';\nimport { IMachineImage, OperatingSystemType } from './machine-image';\nimport { instanceBlockDeviceMappings } from './private/ebs-util';\nimport { ISecurityGroup, SecurityGroup } from './security-group';\nimport { UserData } from './user-data';\nimport { BlockDevice } from './volume';\nimport { IVpc, Subnet, SubnetSelection } from './vpc';\n\n/**\n * Name tag constant\n */\nconst NAME_TAG: string = 'Name';\n\nexport interface IInstance extends IResource, IConnectable, iam.IGrantable {\n                                                       \n  readonly instanceId: string;\n\n                                                                                        \n  readonly instanceAvailabilityZone: string;\n\n                                                                   \n  readonly instancePrivateDnsName: string;\n\n                                                                  \n  readonly instancePrivateIp: string;\n\n                                                                                                                                                                   \n  readonly instancePublicDnsName: string;\n\n                                                                                                                                                                    \n  readonly instancePublicIp: string;\n}\n\n                                        \nexport interface InstanceProps {\n\n                                                                                                                     \n  readonly keyName?: string;\n\n                                                                                                 \n  readonly vpcSubnets?: SubnetSelection;\n\n                                                                                                   \n  readonly availabilityZone?: string;\n\n                                                                                                                                                                                          \n  readonly allowAllOutbound?: boolean;\n\n                                                                                                                                                               \n  readonly resourceSignalTimeout?: Duration;\n\n                                               \n  readonly vpc: IVpc;\n\n                                                                                                         \n  readonly securityGroup?: ISecurityGroup;\n\n                                           \n  readonly instanceType: InstanceType;\n\n                              \n  readonly machineImage: IMachineImage;\n\n                                                                                                                                                                                                                 \n  readonly userData?: UserData;\n\nn  readonly userDataCausesReplacement?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly role?: iam.IRole;\n\n                                                                                 \n  readonly instanceName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n  readonly sourceDestCheck?: boolean;\n\nn  readonly blockDevices?: BlockDevice[];\n\n                                                                                                                                                                                                           \n  readonly privateIpAddress?: string;\n\n                                                                                               \n  readonly propagateTagsToVolumeOnCreation?: boolean;\n\n                                                                                                                                         \n  readonly init?: CloudFormationInit;\n\n                                                                                                                                                                              \n  readonly initOptions?: ApplyCloudFormationInitOptions;\n\n                                                                                               \n  readonly requireImdsv2?: boolean;\n}\n\n                                                \nexport class Instance extends Resource implements IInstance {\n\n                                                        \n  public readonly osType: OperatingSystemType;\n\n                                                                            \n  public readonly connections: Connections;\n\n                                                      \n  public readonly role: iam.IRole;\n\n                                                      \n  public readonly grantPrincipal: iam.IPrincipal;\n\n                                          \n  public readonly userData: UserData;\n\n                                                 \n  public readonly instance: CfnInstance;\n                           \n  public readonly instanceId: string;\n                           \n  public readonly instanceAvailabilityZone: string;\n                           \n  public readonly instancePrivateDnsName: string;\n                           \n  public readonly instancePrivateIp: string;\n                           \n  public readonly instancePublicDnsName: string;\n                           \n  public readonly instancePublicIp: string;\n\n  private readonly securityGroup: ISecurityGroup;\n  private readonly securityGroups: ISecurityGroup[] = [];\n\n  constructor(scope: Construct, id: string, props: InstanceProps) {\n    super(scope, id);\n\n    if (props.initOptions && !props.init) {\n      throw new Error('Setting \\'initOptions\\' requires that \\'init\\' is also set');\n    }\n\n    if (props.securityGroup) {\n      this.securityGroup = props.securityGroup;\n    } else {\n      this.securityGroup = new SecurityGroup(this, 'InstanceSecurityGroup', {\n        vpc: props.vpc,\n        allowAllOutbound: props.allowAllOutbound !== false,\n      });\n    }\n    this.connections = new Connections({ securityGroups: [this.securityGroup] });\n    this.securityGroups.push(this.securityGroup);\n    Tags.of(this).add(NAME_TAG, props.instanceName || this.node.path);\n\n    this.role = props.role || new iam.Role(this, 'InstanceRole', {\n      assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n    });\n    this.grantPrincipal = this.role;\n\n    const iamProfile = new iam.CfnInstanceProfile(this, 'InstanceProfile', {\n      roles: [this.role.roleName],\n    });\n\n    // use delayed evaluation\n    const imageConfig = props.machineImage.getImage(this);\n    this.userData = props.userData ?? imageConfig.userData;\n    const userDataToken = Lazy.string({ produce: () => Fn.base64(this.userData.render()) });\n    const securityGroupsToken = Lazy.list({ produce: () => this.securityGroups.map(sg => sg.securityGroupId) });\n\n    const { subnets } = props.vpc.selectSubnets(props.vpcSubnets);\n    let subnet;\n    if (props.availabilityZone) {\n      const selected = subnets.filter(sn => sn.availabilityZone === props.availabilityZone);\n      if (selected.length === 1) {\n        subnet = selected[0];\n      } else {\n        Annotations.of(this).addError(`Need exactly 1 subnet to match AZ '${props.availabilityZone}', found ${selected.length}. Use a different availabilityZone.`);\n      }\n    } else {\n      if (subnets.length > 0) {\n        subnet = subnets[0];\n      } else {\n        Annotations.of(this).addError(`Did not find any subnets matching '${JSON.stringify(props.vpcSubnets)}', please use a different selection.`);\n      }\n    }\n    if (!subnet) {\n      // We got here and we don't have a subnet because of validation errors.\n      // Invent one on the spot so the code below doesn't fail.\n      subnet = Subnet.fromSubnetAttributes(this, 'DummySubnet', {\n        subnetId: 's-notfound',\n        availabilityZone: 'az-notfound',\n      });\n    }\n\n    this.instance = new CfnInstance(this, 'Resource', {\n      imageId: imageConfig.imageId,\n      keyName: props.keyName,\n      instanceType: props.instanceType.toString(),\n      securityGroupIds: securityGroupsToken,\n      iamInstanceProfile: iamProfile.ref,\n      userData: userDataToken,\n      subnetId: subnet.subnetId,\n      availabilityZone: subnet.availabilityZone,\n      sourceDestCheck: props.sourceDestCheck,\n      blockDeviceMappings: props.blockDevices !== undefined ? instanceBlockDeviceMappings(this, props.blockDevices) : undefined,\n      privateIpAddress: props.privateIpAddress,\n      propagateTagsToVolumeOnCreation: props.propagateTagsToVolumeOnCreation,\n    });\n    this.instance.node.addDependency(this.role);\n\n    this.osType = imageConfig.osType;\n    this.node.defaultChild = this.instance;\n\n    this.instanceId = this.instance.ref;\n    this.instanceAvailabilityZone = this.instance.attrAvailabilityZone;\n    this.instancePrivateDnsName = this.instance.attrPrivateDnsName;\n    this.instancePrivateIp = this.instance.attrPrivateIp;\n    this.instancePublicDnsName = this.instance.attrPublicDnsName;\n    this.instancePublicIp = this.instance.attrPublicIp;\n\n    if (props.init) {\n      this.applyCloudFormationInit(props.init, props.initOptions);\n    }\n\n    this.applyUpdatePolicies(props);\n\n    // Trigger replacement (via new logical ID) on user data change, if specified or cfn-init is being used.\n    //\n    // This is slightly tricky -- we need to resolve the UserData string (in order to get at actual Asset hashes,\n    // instead of the Token stringifications of them ('${Token[1234]}'). However, in the case of CFN Init usage,\n    // a UserData is going to contain the logicalID of the resource itself, which means infinite recursion if we\n    // try to naively resolve. We need a recursion breaker in this.\n    const originalLogicalId = Stack.of(this).getLogicalId(this.instance);\n    let recursing = false;\n    this.instance.overrideLogicalId(Lazy.uncachedString({\n      produce: (context) => {\n        if (recursing) { return originalLogicalId; }\n        if (!(props.userDataCausesReplacement ?? props.initOptions)) { return originalLogicalId; }\n\n        const md5 = crypto.createHash('md5');\n        recursing = true;\n        try {\n          md5.update(JSON.stringify(context.resolve(this.userData.render())));\n        } finally {\n          recursing = false;\n        }\n        const digest = md5.digest('hex').substr(0, 16);\n        return `${originalLogicalId}${digest}`;\n      },\n    }));\n\n    if (props.requireImdsv2) {\n      Aspects.of(this).add(new InstanceRequireImdsv2Aspect());\n    }\n  }\n\n                                                                                                                  \n  public addSecurityGroup(securityGroup: ISecurityGroup): void {\n    this.securityGroups.push(securityGroup);\n  }\n\n                                                                                                                                                                           \n  public addUserData(...commands: string[]) {\n    this.userData.addCommands(...commands);\n  }\n\n                                                                          \n  public addToRolePolicy(statement: iam.PolicyStatement) {\n    this.role.addToPrincipalPolicy(statement);\n  }\n\n  /**\n   * Use a CloudFormation Init configuration at instance startup\n   *\n   * This does the following:\n   *\n   * - Attaches the CloudFormation Init metadata to the Instance resource.\n   * - Add commands to the instance UserData to run `cfn-init` and `cfn-signal`.\n   * - Update the instance's CreationPolicy to wait for the `cfn-signal` commands.\n   */\n  private applyCloudFormationInit(init: CloudFormationInit, options: ApplyCloudFormationInitOptions = {}) {\n    init.attach(this.instance, {\n      platform: this.osType,\n      instanceRole: this.role,\n      userData: this.userData,\n      configSets: options.configSets,\n      embedFingerprint: options.embedFingerprint,\n      printLog: options.printLog,\n      ignoreFailures: options.ignoreFailures,\n      includeRole: options.includeRole,\n      includeUrl: options.includeUrl,\n    });\n    this.waitForResourceSignal(options.timeout ?? Duration.minutes(5));\n  }\n\n  /**\n   * Wait for a single additional resource signal\n   *\n   * Add 1 to the current ResourceSignal Count and add the given timeout to the current timeout.\n   *\n   * Use this to pause the CloudFormation deployment to wait for the instances\n   * in the AutoScalingGroup to report successful startup during\n   * creation and updates. The UserData script needs to invoke `cfn-signal`\n   * with a success or failure code after it is done setting up the instance.\n   */\n  private waitForResourceSignal(timeout: Duration) {\n    const oldResourceSignal = this.instance.cfnOptions.creationPolicy?.resourceSignal;\n    this.instance.cfnOptions.creationPolicy = {\n      ...this.instance.cfnOptions.creationPolicy,\n      resourceSignal: {\n        count: (oldResourceSignal?.count ?? 0) + 1,\n        timeout: (oldResourceSignal?.timeout ? Duration.parse(oldResourceSignal?.timeout).plus(timeout) : timeout).toIsoString(),\n      },\n    };\n  }\n\n  /**\n   * Apply CloudFormation update policies for the instance\n   */\n  private applyUpdatePolicies(props: InstanceProps) {\n    if (props.resourceSignalTimeout !== undefined) {\n      this.instance.cfnOptions.creationPolicy = {\n        ...this.instance.cfnOptions.creationPolicy,\n        resourceSignal: {\n          timeout: props.resourceSignalTimeout && props.resourceSignalTimeout.toIsoString(),\n        },\n      };\n    }\n  }\n}\n\n                                                                                    \nexport interface ApplyCloudFormationInitOptions {\n                                                                     \n  readonly configSets?: string[];\n\n                                                                                                           \n  readonly timeout?: Duration;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly embedFingerprint?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly printLog?: boolean;\n\n                                                                                                                                                                                                                                 \n  readonly ignoreFailures?: boolean;\n\n                                                                                                                                                                                                                                                 \n  readonly includeUrl?: boolean;\n\n                                                                                                                                                                                            \n  readonly includeRole?: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
