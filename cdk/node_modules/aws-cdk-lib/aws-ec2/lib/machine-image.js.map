{
  "version": 3,
  "sources": ["machine-image.ts"],
  "sourcesContent": ["import * as ssm from '../../aws-ssm';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport { ContextProvider, CfnMapping, Aws, Stack, Token } from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { UserData } from './user-data';\nimport { WindowsVersion } from './windows-versions';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n                                                                                    \nexport interface IMachineImage {\n                                                             \n  getImage(scope: Construct): MachineImageConfig;\n}\n\n                                                                       \nexport abstract class MachineImage {\n                                                                                                                                                                                                                                                                                                                                                                            \n  public static latestWindows(version: WindowsVersion, props?: WindowsImageProps): IMachineImage {\n    return new WindowsImage(version, props);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n  public static latestAmazonLinux(props?: AmazonLinuxImageProps): IMachineImage {\n    return new AmazonLinuxImage(props);\n  }\n\n                                                                                                                                                                                                                                                                     \n  public static genericLinux(amiMap: Record<string, string>, props?: GenericLinuxImageProps): IMachineImage {\n    return new GenericLinuxImage(amiMap, props);\n  }\n\n                                                                                                                                                                                                                                                                       \n  public static genericWindows(amiMap: Record<string, string>, props?: GenericWindowsImageProps): IMachineImage {\n    return new GenericWindowsImage(amiMap, props);\n  }\n\nn  public static fromSSMParameter(parameterName: string, os: OperatingSystemType, userData?: UserData): IMachineImage {\n    return new GenericSSMParameterImage(parameterName, os, userData);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n  public static fromSsmParameter(parameterName: string, options?: SsmParameterImageOptions): IMachineImage {\n    return new GenericSsmParameterImage(parameterName, options);\n  }\n\nn  public static lookup(props: LookupMachineImageProps): IMachineImage {\n    return new LookupMachineImage(props);\n  }\n}\n\n                                            \nexport interface MachineImageConfig {\n                                               \n  readonly imageId: string;\n\n                                                     \n  readonly osType: OperatingSystemType;\n\n                                                \n  readonly userData: UserData;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class GenericSSMParameterImage implements IMachineImage {\n  // FIXME: this class ought to be `@deprecated` and removed from v2, but that\n  // is causing build failure right now. Ref: https://github.com/aws/jsii/issues/3025\n  // @-deprecated Use `MachineImage.fromSsmParameter()` instead\n\n                                                           \n  public readonly parameterName: string;\n\n  constructor(parameterName: string, private readonly os: OperatingSystemType, private readonly userData?: UserData) {\n    this.parameterName = parameterName;\n  }\n\n                                                             \n  public getImage(scope: Construct): MachineImageConfig {\n    const ami = ssm.StringParameter.valueForTypedStringParameter(scope, this.parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);\n    return {\n      imageId: ami,\n      osType: this.os,\n      userData: this.userData ?? (this.os === OperatingSystemType.WINDOWS ? UserData.forWindows() : UserData.forLinux()),\n    };\n  }\n}\n\n                                                  \nexport interface SsmParameterImageOptions {\n                                                                              \n  readonly os?: OperatingSystemType;\n\n                                                                                     \n  readonly userData?: UserData;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n  readonly cachedInContext?: boolean;\n}\n\n/**\n * Select the image based on a given SSM parameter\n *\n * This Machine Image automatically updates to the latest version on every\n * deployment. Be aware this will cause your instances to be replaced when a\n * new version of the image becomes available. Do not store stateful information\n * on the instance if you are using this image.\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n */\nclass GenericSsmParameterImage implements IMachineImage {\n  constructor(private readonly parameterName: string, private readonly props: SsmParameterImageOptions = {}) {\n  }\n\n  /**\n   * Return the image to use in the given context\n   */\n  public getImage(scope: Construct): MachineImageConfig {\n    const imageId = lookupImage(scope, this.props.cachedInContext, this.parameterName);\n\n    const osType = this.props.os ?? OperatingSystemType.LINUX;\n    return {\n      imageId,\n      osType,\n      userData: this.props.userData ?? (osType === OperatingSystemType.WINDOWS ? UserData.forWindows() : UserData.forLinux()),\n    };\n  }\n}\n\n                                                 \nexport interface WindowsImageProps {\n                                                                                           \n  readonly userData?: UserData;\n}\n\nnexport class WindowsImage extends GenericSSMParameterImage {\n  constructor(version: WindowsVersion, props: WindowsImageProps = {}) {\n    super('/aws/service/ami-windows-latest/' + version, OperatingSystemType.WINDOWS, props.userData);\n  }\n}\n\n                   \nexport enum AmazonLinuxCpuType {\n                               \n  ARM_64 = 'arm64',\n\n                                \n  X86_64 = 'x86_64',\n}\n\n                                        \nexport interface AmazonLinuxImageProps {\n                                                                                      \n  readonly generation?: AmazonLinuxGeneration;\n\n                                                                                \n  readonly edition?: AmazonLinuxEdition;\n\n                                                                                \n  readonly kernel?: AmazonLinuxKernel;\n\n                                                           \n  readonly virtualization?: AmazonLinuxVirt;\n\n                                                                                   \n  readonly storage?: AmazonLinuxStorage;\n\n                                                                                         \n  readonly userData?: UserData;\n\n                                                   \n  readonly cpuType?: AmazonLinuxCpuType;\n\nn  readonly cachedInContext?: boolean;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class AmazonLinuxImage extends GenericSSMParameterImage {\n                                                                                                                 \n  public static ssmParameterName(props: AmazonLinuxImageProps = {}) {\n    const generation = (props && props.generation) || AmazonLinuxGeneration.AMAZON_LINUX;\n    const edition = (props && props.edition) || AmazonLinuxEdition.STANDARD;\n    const cpu = (props && props.cpuType) || AmazonLinuxCpuType.X86_64;\n    let kernel = (props && props.kernel) || undefined;\n    let virtualization: AmazonLinuxVirt | undefined;\n    let storage: AmazonLinuxStorage | undefined;\n\n    if (generation === AmazonLinuxGeneration.AMAZON_LINUX_2022) {\n      kernel = AmazonLinuxKernel.KERNEL5_X;\n      if (props && props.storage) {\n        throw new Error('Storage parameter does not exist in smm parameter name for Amazon Linux 2022.');\n      }\n      if (props && props.virtualization) {\n        throw new Error('Virtualization parameter does not exist in smm parameter name for Amazon Linux 2022.');\n      }\n    } else {\n      virtualization = (props && props.virtualization) || AmazonLinuxVirt.HVM;\n      storage = (props && props.storage) || AmazonLinuxStorage.GENERAL_PURPOSE;\n    }\n\n    const parts: Array<string|undefined> = [\n      generation,\n      'ami',\n      edition !== AmazonLinuxEdition.STANDARD ? edition : undefined,\n      kernel,\n      virtualization,\n      cpu,\n      storage,\n    ].filter(x => x !== undefined); // Get rid of undefineds\n\n    return '/aws/service/ami-amazon-linux-latest/' + parts.join('-');\n  }\n\n  private readonly cachedInContext: boolean;\n\n  constructor(private readonly props: AmazonLinuxImageProps = {}) {\n    super(AmazonLinuxImage.ssmParameterName(props), OperatingSystemType.LINUX, props.userData);\n\n    this.cachedInContext = props.cachedInContext ?? false;\n  }\n\n                                                             \n  public getImage(scope: Construct): MachineImageConfig {\n    const imageId = lookupImage(scope, this.cachedInContext, this.parameterName);\n\n    const osType = OperatingSystemType.LINUX;\n    return {\n      imageId,\n      osType,\n      userData: this.props.userData ?? UserData.forLinux(),\n    };\n  }\n}\n\n                                                 \nexport enum AmazonLinuxGeneration {\n                             \n  AMAZON_LINUX = 'amzn',\n\n                               \n  AMAZON_LINUX_2 = 'amzn2',\n\n                                  \n  AMAZON_LINUX_2022 = 'al2022',\n}\n\n/**\n * Amazon Linux Kernel\n */\nexport enum AmazonLinuxKernel {\n                                 \n  KERNEL5_X = 'kernel-5.10',\n}\n\n                               \nexport enum AmazonLinuxEdition {\n                                 \n  STANDARD = 'standard',\n\n                                \n  MINIMAL = 'minimal',\n}\n\n                                               \nexport enum AmazonLinuxVirt {\n                                                 \n  HVM = 'hvm',\n\n                                  \n  PV = 'pv',\n}\n\nexport enum AmazonLinuxStorage {\n                                   \n  EBS = 'ebs',\n\n                                  \n  S3 = 's3',\n\n                                                            \n  GENERAL_PURPOSE = 'gp2',\n}\n\n                                                      \nexport interface GenericLinuxImageProps {\n                                                                                         \n  readonly userData?: UserData;\n}\n\n                                                        \nexport interface GenericWindowsImageProps {\n                                                                                           \n  readonly userData?: UserData;\n}\n\n                                                                                                                                                                                 \nexport class GenericLinuxImage implements IMachineImage {\n  constructor(private readonly amiMap: { [region: string]: string }, private readonly props: GenericLinuxImageProps = {}) {\n  }\n\n  public getImage(scope: Construct): MachineImageConfig {\n    const userData = this.props.userData ?? UserData.forLinux();\n    const osType = OperatingSystemType.LINUX;\n    const region = Stack.of(scope).region;\n    if (Token.isUnresolved(region)) {\n      const mapping: { [k1: string]: { [k2: string]: any } } = {};\n      for (const [rgn, ami] of Object.entries(this.amiMap)) {\n        mapping[rgn] = { ami };\n      }\n      const amiMap = new CfnMapping(scope, 'AmiMap', { mapping });\n      return {\n        imageId: amiMap.findInMap(Aws.REGION, 'ami'),\n        userData,\n        osType,\n      };\n    }\n    const imageId = region !== 'test-region' ? this.amiMap[region] : 'ami-12345';\n    if (!imageId) {\n      throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);\n    }\n    return {\n      imageId,\n      userData,\n      osType,\n    };\n  }\n}\n\n                                                                                                                                            \nexport class GenericWindowsImage implements IMachineImage {\n  constructor(private readonly amiMap: {[region: string]: string}, private readonly props: GenericWindowsImageProps = {}) {\n  }\n\n  public getImage(scope: Construct): MachineImageConfig {\n    const userData = this.props.userData ?? UserData.forWindows();\n    const osType = OperatingSystemType.WINDOWS;\n    const region = Stack.of(scope).region;\n    if (Token.isUnresolved(region)) {\n      const mapping: { [k1: string]: { [k2: string]: any } } = {};\n      for (const [rgn, ami] of Object.entries(this.amiMap)) {\n        mapping[rgn] = { ami };\n      }\n      const amiMap = new CfnMapping(scope, 'AmiMap', { mapping });\n      return {\n        imageId: amiMap.findInMap(Aws.REGION, 'ami'),\n        userData,\n        osType,\n      };\n    }\n    const imageId = region !== 'test-region' ? this.amiMap[region] : 'ami-12345';\n    if (!imageId) {\n      throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);\n    }\n    return {\n      imageId,\n      userData,\n      osType,\n    };\n  }\n}\n\n                                            \nexport enum OperatingSystemType {\n  LINUX,\n  WINDOWS,\n                                                                                                                              \n  UNKNOWN,\n}\n\nnexport class LookupMachineImage implements IMachineImage {\n  constructor(private readonly props: LookupMachineImageProps) {\n  }\n\n  public getImage(scope: Construct): MachineImageConfig {\n    // Need to know 'windows' or not before doing the query to return the right\n    // osType for the dummy value, so might as well add it to the filter.\n    const filters: Record<string, string[] | undefined> = {\n      'name': [this.props.name],\n      'state': ['available'],\n      'image-type': ['machine'],\n      'platform': this.props.windows ? ['windows'] : undefined,\n    };\n    Object.assign(filters, this.props.filters);\n\n    const value = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.AMI_PROVIDER,\n      props: {\n        owners: this.props.owners,\n        filters,\n      } as cxschema.AmiContextQuery,\n      dummyValue: 'ami-1234',\n    }).value as cxapi.AmiContextResponse;\n\n    if (typeof value !== 'string') {\n      throw new Error(`Response to AMI lookup invalid, got: ${value}`);\n    }\n\n    const osType = this.props.windows ? OperatingSystemType.WINDOWS : OperatingSystemType.LINUX;\n\n    return {\n      imageId: value,\n      osType,\n      userData: this.props.userData ?? UserData.forOperatingSystem(osType),\n    };\n  }\n}\n\n                                             \nexport interface LookupMachineImageProps {\n                                                          \n  readonly name: string;\n\n                                                                             \n  readonly owners?: string[];\n\n                                                                                                                                                                                  \n  readonly filters?: {[key: string]: string[]};\n\n                                                                 \n  readonly windows?: boolean;\n\n                                                                                                                      \n  readonly userData?: UserData;\n}\n\nfunction lookupImage(scope: Construct, cachedInContext: boolean | undefined, parameterName: string) {\n  return cachedInContext\n    ? ssm.StringParameter.valueFromLookup(scope, parameterName)\n    : ssm.StringParameter.valueForTypedStringParameter(scope, parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);\n}\n"],
  "mappings": "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",
  "names": []
}
