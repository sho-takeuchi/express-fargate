{
  "version": 3,
  "sources": ["network-acl.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnNetworkAcl, CfnNetworkAclEntry, CfnSubnetNetworkAclAssociation } from './ec2.generated';\nimport { AclCidr, AclTraffic } from './network-acl-types';\nimport { ISubnet, IVpc, SubnetSelection } from './vpc';\n\n                             \nexport interface INetworkAcl extends IResource {\n                                                               \n  readonly networkAclId: string;\n\n                                           \n  addEntry(id: string, options: CommonNetworkAclEntryOptions): NetworkAclEntry;\n}\n\n/**\n * A NetworkAclBase that is not created in this template\n *\n *\n */\nabstract class NetworkAclBase extends Resource implements INetworkAcl {\n  public abstract readonly networkAclId: string;\n\n                                           \n  public addEntry(id: string, options: CommonNetworkAclEntryOptions): NetworkAclEntry {\n    return new NetworkAclEntry(this, id, {\n      networkAcl: this,\n      ...options,\n    });\n  }\n\n}\n\n                                                \nexport interface NetworkAclProps {\n                                                                                                                                                                                                                                                           \n  readonly networkAclName?: string;\n\n                                                           \n  readonly vpc: IVpc;\n\n                                                                                                                                                                                                         \n  readonly subnetSelection?: SubnetSelection;\n}\n\n                                                                                                                                                                 \nexport class NetworkAcl extends NetworkAclBase {\n                                                             \n  public static fromNetworkAclId(scope: Construct, id: string, networkAclId: string): INetworkAcl {\n    class Import extends NetworkAclBase {\n      public readonly networkAclId = networkAclId;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                              \n  public readonly networkAclId: string;\n\n                                                                    \n  public readonly networkAclVpcId: string;\n\n  private readonly networkAcl: CfnNetworkAcl;\n  private readonly vpc: IVpc;\n\n  constructor(scope: Construct, id: string, props: NetworkAclProps) {\n    super(scope, id, {\n      physicalName: props.networkAclName,\n    });\n\n    this.vpc = props.vpc;\n\n    this.networkAcl = new CfnNetworkAcl(this, 'Resource', {\n      vpcId: props.vpc.vpcId,\n    });\n\n    this.networkAclId = this.networkAcl.ref;\n    this.networkAclVpcId = this.networkAcl.vpcId;\n\n    if (props.subnetSelection !== undefined) {\n      this.associateWithSubnet('DefaultAssociation', props.subnetSelection);\n    }\n  }\n\n                                                              \n  public associateWithSubnet(id: string, selection: SubnetSelection) {\n    const subnets = this.vpc.selectSubnets(selection);\n    for (const subnet of subnets.subnets) {\n      subnet.associateNetworkAcl(id, this);\n    }\n  }\n}\n\n                                                                 \nexport enum Action {\n                                  \n  ALLOW = 'allow',\n\n                                 \n  DENY = 'deny',\n}\n\n                                  \nexport interface INetworkAclEntry extends IResource {\n                                 \n  readonly networkAcl: INetworkAcl\n\n}\n\n/**\n * Base class for NetworkAclEntries\n *\n *\n */\nabstract class NetworkAclEntryBase extends Resource implements INetworkAclEntry {\n  public abstract readonly networkAcl: INetworkAcl;\n}\n\n                                                             \nexport enum TrafficDirection {\n                                           \n  EGRESS,\n\n                                            \n  INGRESS,\n}\n\n                                             \nexport interface CommonNetworkAclEntryOptions {\n                                                                                                                                                                                                                                                                      \n  readonly networkAclEntryName?: string;\n\n                                                 \n  readonly cidr: AclCidr;\n\n                                                              \n  readonly traffic: AclTraffic;\n\n                                                                                                                                \n  readonly direction?: TrafficDirection;\n\n                                                                                                                                                                                                                                                                                               \n  readonly ruleAction?: Action;\n\n                                                                                                                                                                                                                                         \n  readonly ruleNumber: number;\n}\n\n                                                     \nexport interface NetworkAclEntryProps extends CommonNetworkAclEntryOptions {\n                                                       \n  readonly networkAcl: INetworkAcl;\n}\n\n                                                       \nexport class NetworkAclEntry extends NetworkAclEntryBase {\n  public readonly networkAcl: INetworkAcl;\n\n  constructor(scope: Construct, id: string, props: NetworkAclEntryProps) {\n    super(scope, id, {\n      physicalName: props.networkAclEntryName,\n    });\n\n    this.networkAcl = props.networkAcl;\n\n    new CfnNetworkAclEntry(this, 'Resource', {\n      networkAclId: this.networkAcl.networkAclId,\n      ruleNumber: props.ruleNumber,\n      ruleAction: props.ruleAction ?? Action.ALLOW,\n      egress: props.direction !== undefined ? props.direction === TrafficDirection.EGRESS : undefined,\n      ...props.traffic.toTrafficConfig(),\n      ...props.cidr.toCidrConfig(),\n    });\n  }\n}\n\n                                              \nexport interface ISubnetNetworkAclAssociation extends IResource {\n                                                                               \n  readonly subnetNetworkAclAssociationAssociationId: string;\n}\n\n                                                                   \nexport interface SubnetNetworkAclAssociationProps {\n                                                                                                                                                                                                                                                                                             \n  readonly subnetNetworkAclAssociationName?: string;\n\n                                                                                     \n  readonly networkAcl: INetworkAcl;\n\n                                                 \n  readonly subnet: ISubnet;\n}\n\n/**\n * Associate a network ACL with a subnet\n *\n *\n */\nabstract class SubnetNetworkAclAssociationBase extends Resource implements ISubnetNetworkAclAssociation {\n  public abstract readonly subnetNetworkAclAssociationAssociationId: string;\n}\nexport class SubnetNetworkAclAssociation extends SubnetNetworkAclAssociationBase {\n  public static fromSubnetNetworkAclAssociationAssociationId(\n    scope: Construct, id: string,\n    subnetNetworkAclAssociationAssociationId: string): ISubnetNetworkAclAssociation {\n    class Import extends SubnetNetworkAclAssociationBase {\n      public readonly subnetNetworkAclAssociationAssociationId = subnetNetworkAclAssociationAssociationId;\n    }\n\n    return new Import(scope, id);\n  }\n                                                                               \n  public readonly subnetNetworkAclAssociationAssociationId: string;\n\n                                                               \n  public readonly networkAcl: INetworkAcl;\n\n                                                 \n  public readonly subnet: ISubnet;\n\n  private association: CfnSubnetNetworkAclAssociation;\n\n  constructor(scope: Construct, id: string, props: SubnetNetworkAclAssociationProps) {\n    super(scope, id, {\n      physicalName: props.subnetNetworkAclAssociationName,\n    });\n\n    this.association = new CfnSubnetNetworkAclAssociation(this, 'Resource', {\n      networkAclId: props.networkAcl.networkAclId,\n      subnetId: props.subnet.subnetId,\n    });\n\n    this.networkAcl = props.networkAcl;\n    this.subnet = props.subnet;\n    this.subnetNetworkAclAssociationAssociationId = this.association.attrAssociationId;\n  }\n}\n"],
  "mappings": "2TAAA,OAAA,QAAA,cAEA,gBAAA,QAAA,mBAkBA,4BAAsC,QAAA,QAAQ,CAIrC,SAAS,GAAY,QAAqC,CAC/D,MAAO,IAAI,iBAAgB,KAAM,GAAI,CACnC,WAAY,QACT,WAmBT,wBAAgC,eAAc,CAmB5C,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,oFAGtB,KAAK,IAAM,MAAM,IAEjB,KAAK,WAAa,GAAI,iBAAA,cAAc,KAAM,WAAY,CACpD,MAAO,MAAM,IAAI,QAGnB,KAAK,aAAe,KAAK,WAAW,IACpC,KAAK,gBAAkB,KAAK,WAAW,MAEnC,MAAM,kBAAoB,QAC5B,KAAK,oBAAoB,qBAAsB,MAAM,uBAhC3C,kBAAiB,MAAkB,GAAY,aAAoB,CAC/E,oBAAqB,eAAc,CAAnC,aAAA,qBACkB,KAAA,aAAe,cAGjC,MAAO,IAAI,QAAO,MAAO,IAgCpB,oBAAoB,GAAY,UAA0B,wEAC/D,KAAM,SAAU,KAAK,IAAI,cAAc,WACvC,SAAW,UAAU,SAAQ,QAC3B,OAAO,oBAAoB,GAAI,OA1CrC,QAAA,WAAA,wGAgDA,GAAY,QAAZ,AAAA,UAAY,QAAM,CAEhB,QAAA,MAAA,QAGA,QAAA,KAAA,SALU,OAAA,QAAA,QAAA,SAAA,OAAM,KAoBlB,iCAA2C,QAAA,QAAQ,EAKnD,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAE1B,kBAAA,kBAAA,OAAA,GAAA,SAGA,kBAAA,kBAAA,QAAA,GAAA,YALU,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,KAoC5B,6BAAqC,oBAAmB,CAGtD,YAAY,MAAkB,GAAY,MAA2B,QACnE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,8FAGtB,KAAK,WAAa,MAAM,WAExB,GAAI,iBAAA,mBAAmB,KAAM,WAAY,CACvC,aAAc,KAAK,WAAW,aAC9B,WAAY,MAAM,WAClB,WAAU,IAAE,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,OAAO,MACvC,OAAQ,MAAM,YAAc,OAAY,MAAM,YAAc,iBAAiB,OAAS,UACnF,MAAM,QAAQ,qBACd,MAAM,KAAK,kBAhBpB,QAAA,gBAAA,uHA4CA,6CAAuD,QAAA,QAAQ,EAG/D,yCAAiD,gCAA+B,CAqB9E,YAAY,MAAkB,GAAY,MAAuC,CAC/E,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,sHAGtB,KAAK,YAAc,GAAI,iBAAA,+BAA+B,KAAM,WAAY,CACtE,aAAc,MAAM,WAAW,aAC/B,SAAU,MAAM,OAAO,WAGzB,KAAK,WAAa,MAAM,WACxB,KAAK,OAAS,MAAM,OACpB,KAAK,yCAA2C,KAAK,YAAY,wBAhCrD,8CACZ,MAAkB,GAClB,yCAAgD,CAChD,oBAAqB,gCAA+B,CAApD,aAAA,qBACkB,KAAA,yCAA2C,0CAG7D,MAAO,IAAI,QAAO,MAAO,KAR7B,QAAA,4BAAA",
  "names": []
}
