{
  "version": 3,
  "sources": ["user-data.ts"],
  "sourcesContent": ["import { IBucket } from '../../aws-s3';\nimport { CfnElement, Fn, Resource, Stack } from '../../core';\nimport { OperatingSystemType } from './machine-image';\n\n                                                       \nexport interface LinuxUserDataOptions {\n                                                                                 \n  readonly shebang?: string;\n}\n\n                                                 \nexport interface S3DownloadOptions {\n\n                                                       \n  readonly bucket: IBucket;\n\n                                                \n  readonly bucketKey: string;\n\n                                                                                                                                 \n  readonly localFile?: string;\n\n                                                                                                   \n  readonly region?: string\n\n}\n\n                                         \nexport interface ExecuteFileOptions {\n\n                                      \n  readonly filePath: string;\n\n                                                                                                                \n  readonly arguments?: string;\n\n}\n\n                             \nexport abstract class UserData {\n                                                         \n  public static forLinux(options: LinuxUserDataOptions = {}): UserData {\n    return new LinuxUserData(options);\n  }\n\n                                                           \n  public static forWindows(): UserData {\n    return new WindowsUserData();\n  }\n\n                                                             \n  public static custom(content: string): UserData {\n    const userData = new CustomUserData();\n    userData.addCommands(content);\n    return userData;\n  }\n\n  public static forOperatingSystem(os: OperatingSystemType): UserData {\n    switch (os) {\n      case OperatingSystemType.LINUX: return UserData.forLinux();\n      case OperatingSystemType.WINDOWS: return UserData.forWindows();\n      case OperatingSystemType.UNKNOWN: throw new Error('Cannot determine UserData for unknown operating system type');\n    }\n  }\n\n                                                          \n  public abstract addCommands(...commands: string[]): void;\n\n                                                                                               \n  public abstract addOnExitCommands(...commands: string[]): void;\n\n                                                           \n  public abstract render(): string;\n\n                                                                                                                                \n  public abstract addS3DownloadCommand(params: S3DownloadOptions): string;\n\n                                                \n  public abstract addExecuteFileCommand( params: ExecuteFileOptions): void;\n\n                                                                                           \n  public abstract addSignalOnExitCommand( resource: Resource ): void;\n\n}\n\n/**\n * Linux Instance User Data\n */\nclass LinuxUserData extends UserData {\n  private readonly lines: string[] = [];\n  private readonly onExitLines: string[] = [];\n\n  constructor(private readonly props: LinuxUserDataOptions = {}) {\n    super();\n  }\n\n  public addCommands(...commands: string[]) {\n    this.lines.push(...commands);\n  }\n\n  public addOnExitCommands(...commands: string[]) {\n    this.onExitLines.push(...commands);\n  }\n\n  public render(): string {\n    const shebang = this.props.shebang ?? '#!/bin/bash';\n    return [shebang, ...(this.renderOnExitLines()), ...this.lines].join('\\n');\n  }\n\n  public addS3DownloadCommand(params: S3DownloadOptions): string {\n    const s3Path = `s3://${params.bucket.bucketName}/${params.bucketKey}`;\n    const localPath = ( params.localFile && params.localFile.length !== 0 ) ? params.localFile : `/tmp/${ params.bucketKey }`;\n    this.addCommands(\n      `mkdir -p $(dirname '${localPath}')`,\n      `aws s3 cp '${s3Path}' '${localPath}'` + (params.region !== undefined ? ` --region ${params.region}` : ''),\n    );\n\n    return localPath;\n  }\n\n  public addExecuteFileCommand( params: ExecuteFileOptions): void {\n    this.addCommands(\n      'set -e',\n      `chmod +x '${params.filePath}'`,\n      `'${params.filePath}' ${params.arguments ?? ''}`.trim(),\n    );\n  }\n\n  public addSignalOnExitCommand( resource: Resource ): void {\n    const stack = Stack.of(resource);\n    const resourceID = stack.getLogicalId(resource.node.defaultChild as CfnElement);\n    this.addOnExitCommands(`/opt/aws/bin/cfn-signal --stack ${stack.stackName} --resource ${resourceID} --region ${stack.region} -e $exitCode || echo 'Failed to send Cloudformation Signal'`);\n  }\n\n  private renderOnExitLines(): string[] {\n    if ( this.onExitLines.length > 0 ) {\n      return ['function exitTrap(){', 'exitCode=$?', ...this.onExitLines, '}', 'trap exitTrap EXIT'];\n    }\n    return [];\n  }\n}\n\n/**\n * Windows Instance User Data\n */\nclass WindowsUserData extends UserData {\n  private readonly lines: string[] = [];\n  private readonly onExitLines: string[] = [];\n\n  constructor() {\n    super();\n  }\n\n  public addCommands(...commands: string[]) {\n    this.lines.push(...commands);\n  }\n\n  public addOnExitCommands(...commands: string[]) {\n    this.onExitLines.push(...commands);\n  }\n\n  public render(): string {\n    return `<powershell>${\n      [...(this.renderOnExitLines()),\n        ...this.lines,\n        ...( this.onExitLines.length > 0 ? ['throw \"Success\"'] : [] )].join('\\n')\n    }</powershell>`;\n  }\n\n  public addS3DownloadCommand(params: S3DownloadOptions): string {\n    const localPath = ( params.localFile && params.localFile.length !== 0 ) ? params.localFile : `C:/temp/${ params.bucketKey }`;\n    this.addCommands(\n      `mkdir (Split-Path -Path '${localPath}' ) -ea 0`,\n      `Read-S3Object -BucketName '${params.bucket.bucketName}' -key '${params.bucketKey}' -file '${localPath}' -ErrorAction Stop` + (params.region !== undefined ? ` -Region ${params.region}` : ''),\n    );\n    return localPath;\n  }\n\n  public addExecuteFileCommand( params: ExecuteFileOptions): void {\n    this.addCommands(\n      `&'${params.filePath}' ${params.arguments ?? ''}`.trim(),\n      `if (!$?) { Write-Error 'Failed to execute the file \"${params.filePath}\"' -ErrorAction Stop }`,\n    );\n  }\n\n  public addSignalOnExitCommand( resource: Resource ): void {\n    const stack = Stack.of(resource);\n    const resourceID = stack.getLogicalId(resource.node.defaultChild as CfnElement);\n\n    this.addOnExitCommands(`cfn-signal --stack ${stack.stackName} --resource ${resourceID} --region ${stack.region} --success ($success.ToString().ToLower())`);\n  }\n\n  private renderOnExitLines(): string[] {\n    if ( this.onExitLines.length > 0 ) {\n      return ['trap {', '$success=($PSItem.Exception.Message -eq \"Success\")', ...this.onExitLines, 'break', '}'];\n    }\n    return [];\n  }\n}\n\n/**\n * Custom Instance User Data\n */\nclass CustomUserData extends UserData {\n  private readonly lines: string[] = [];\n\n  constructor() {\n    super();\n  }\n\n  public addCommands(...commands: string[]) {\n    this.lines.push(...commands);\n  }\n\n  public addOnExitCommands(): void {\n    throw new Error('CustomUserData does not support addOnExitCommands, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n\n  public render(): string {\n    return this.lines.join('\\n');\n  }\n\n  public addS3DownloadCommand(): string {\n    throw new Error('CustomUserData does not support addS3DownloadCommand, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n\n  public addExecuteFileCommand(): void {\n    throw new Error('CustomUserData does not support addExecuteFileCommand, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n\n  public addSignalOnExitCommand(): void {\n    throw new Error('CustomUserData does not support addSignalOnExitCommand, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n}\n\n                                                 \nexport interface MultipartBodyOptions {\n\n                                                                                                                                                                                                                                                                                                              \n  readonly contentType: string;\n\n                                                                                                                                \n  readonly transferEncoding?: string;\n\n                                                                                                   \n  readonly body?: string,\n}\n\n                                                                                         \nexport abstract class MultipartBody {\n                                               \n  public static readonly SHELL_SCRIPT = 'text/x-shellscript; charset=\"utf-8\"';\n\n                                            \n  public static readonly CLOUD_BOOTHOOK = 'text/cloud-boothook; charset=\"utf-8\"';\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n  public static fromUserData(userData: UserData, contentType?: string): MultipartBody {\n    return new MultipartBodyUserDataWrapper(userData, contentType);\n  }\n\n                                                                                                                                                                                                                                                                                                                         \n  public static fromRawBody(opts: MultipartBodyOptions): MultipartBody {\n    return new MultipartBodyRaw(opts);\n  }\n\n  public constructor() {\n  }\n\n                                                                                                                                     \n  public abstract renderBodyPart(): string[];\n}\n\n/**\n * The raw part of multi-part user data, which can be added to {@link MultipartUserData}.\n */\nclass MultipartBodyRaw extends MultipartBody {\n  public constructor(private readonly props: MultipartBodyOptions) {\n    super();\n  }\n\n  /**\n   * Render body part as the string.\n   */\n  public renderBodyPart(): string[] {\n    const result: string[] = [];\n\n    result.push(`Content-Type: ${this.props.contentType}`);\n\n    if (this.props.transferEncoding != null) {\n      result.push(`Content-Transfer-Encoding: ${this.props.transferEncoding}`);\n    }\n    // One line free after separator\n    result.push('');\n\n    if (this.props.body != null) {\n      result.push(this.props.body);\n      // The new line added after join will be consumed by encapsulating or closing boundary\n    }\n\n    return result;\n  }\n}\n\n/**\n * Wrapper for `UserData`.\n */\nclass MultipartBodyUserDataWrapper extends MultipartBody {\n  private readonly contentType: string;\n\n  public constructor(private readonly userData: UserData, contentType?: string) {\n    super();\n\n    this.contentType = contentType || MultipartBody.SHELL_SCRIPT;\n  }\n\n  /**\n   * Render body part as the string.\n   */\n  public renderBodyPart(): string[] {\n    const result: string[] = [];\n\n    result.push(`Content-Type: ${this.contentType}`);\n    result.push('Content-Transfer-Encoding: base64');\n    result.push('');\n    result.push(Fn.base64(this.userData.render()));\n\n    return result;\n  }\n}\n\n                                                         \nexport interface MultipartUserDataOptions {\n                                                                                                                                                                                                                                                                                                                  \n  readonly partsSeparator?: string;\n}\n\n                                                                                                                                                                                                                                                                                                            \nexport class MultipartUserData extends UserData {\n  private static readonly USE_PART_ERROR = 'MultipartUserData only supports this operation if it has a default UserData. Call addUserDataPart with makeDefault=true.';\n  private static readonly BOUNDRY_PATTERN = '[^a-zA-Z0-9()+,-./:=?]';\n\n  private parts: MultipartBody[] = [];\n\n  private opts: MultipartUserDataOptions;\n\n  private defaultUserData?: UserData;\n\n  constructor(opts?: MultipartUserDataOptions) {\n    super();\n\n    let partsSeparator: string;\n\n    // Validate separator\n    if (opts?.partsSeparator != null) {\n      if (new RegExp(MultipartUserData.BOUNDRY_PATTERN).test(opts!.partsSeparator)) {\n        throw new Error(`Invalid characters in separator. Separator has to match pattern ${MultipartUserData.BOUNDRY_PATTERN}`);\n      } else {\n        partsSeparator = opts!.partsSeparator;\n      }\n    } else {\n      partsSeparator = '+AWS+CDK+User+Data+Separator==';\n    }\n\n    this.opts = {\n      partsSeparator: partsSeparator,\n    };\n  }\n\n                                                  \n  public addPart(part: MultipartBody) {\n    this.parts.push(part);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n  public addUserDataPart(userData: UserData, contentType?: string, makeDefault?: boolean) {\n    this.addPart(MultipartBody.fromUserData(userData, contentType));\n    makeDefault = makeDefault ?? (this.defaultUserData === undefined ? true : false);\n    if (makeDefault) {\n      this.defaultUserData = userData;\n    }\n  }\n\n  public render(): string {\n    const boundary = this.opts.partsSeparator;\n    // Now build final MIME archive - there are few changes from MIME message which are accepted by cloud-init:\n    // - MIME RFC uses CRLF to separate lines - cloud-init is fine with LF \\n only\n    // Note: new lines matters, matters a lot.\n    var resultArchive = new Array<string>();\n    resultArchive.push(`Content-Type: multipart/mixed; boundary=\"${boundary}\"`);\n    resultArchive.push('MIME-Version: 1.0');\n\n    // Add new line, the next one will be boundary (encapsulating or closing)\n    // so this line will count into it.\n    resultArchive.push('');\n\n    // Add parts - each part starts with boundary\n    this.parts.forEach(part => {\n      resultArchive.push(`--${boundary}`);\n      resultArchive.push(...part.renderBodyPart());\n    });\n\n    // Add closing boundary\n    resultArchive.push(`--${boundary}--`);\n    resultArchive.push(''); // Force new line at the end\n\n    return resultArchive.join('\\n');\n  }\n\n  public addS3DownloadCommand(params: S3DownloadOptions): string {\n    if (this.defaultUserData) {\n      return this.defaultUserData.addS3DownloadCommand(params);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addExecuteFileCommand(params: ExecuteFileOptions): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addExecuteFileCommand(params);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addSignalOnExitCommand(resource: Resource): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addSignalOnExitCommand(resource);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addCommands(...commands: string[]): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addCommands(...commands);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addOnExitCommands(...commands: string[]): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addOnExitCommands(...commands);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
