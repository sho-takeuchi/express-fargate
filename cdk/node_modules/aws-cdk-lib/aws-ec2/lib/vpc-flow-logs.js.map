{
  "version": 3,
  "sources": ["vpc-flow-logs.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as logs from '../../aws-logs';\nimport * as s3 from '../../aws-s3';\nimport { IResource, PhysicalName, RemovalPolicy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnFlowLog } from './ec2.generated';\nimport { ISubnet, IVpc } from './vpc';\n\n                          \nexport interface IFlowLog extends IResource {\n                                                                \n  readonly flowLogId: string;\n}\n\n                                               \nexport enum FlowLogTrafficType {\n                                 \n  ACCEPT = 'ACCEPT',\n\n                                 \n  ALL = 'ALL',\n\n                                 \n  REJECT = 'REJECT'\n}\n\n                                                           \nexport enum FlowLogDestinationType {\n                                                        \n  CLOUD_WATCH_LOGS = 'cloud-watch-logs',\n\n                                            \n  S3 = 's3'\n}\n\n                                                                \nexport abstract class FlowLogResourceType {\n                                                     \n  public static fromSubnet(subnet: ISubnet): FlowLogResourceType {\n    return {\n      resourceType: 'Subnet',\n      resourceId: subnet.subnetId,\n    };\n  }\n\n                                                  \n  public static fromVpc(vpc: IVpc): FlowLogResourceType {\n    return {\n      resourceType: 'VPC',\n      resourceId: vpc.vpcId,\n    };\n  }\n\n                                                                \n  public static fromNetworkInterfaceId(id: string): FlowLogResourceType {\n    return {\n      resourceType: 'NetworkInterface',\n      resourceId: id,\n    };\n  }\n\n                                                              \n  public abstract resourceType: string;\n\n                                                                                \n  public abstract resourceId: string;\n}\n\n                                                      \nexport abstract class FlowLogDestination {\n                                                       \n  public static toCloudWatchLogs(logGroup?: logs.ILogGroup, iamRole?: iam.IRole): FlowLogDestination {\n    return new CloudWatchLogsDestination({\n      logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,\n      logGroup,\n      iamRole,\n    });\n  }\n\n                                          \n  public static toS3(bucket?: s3.IBucket, keyPrefix?: string): FlowLogDestination {\n    return new S3Destination({\n      logDestinationType: FlowLogDestinationType.S3,\n      s3Bucket: bucket,\n      keyPrefix,\n    });\n  }\n\n                                                               \n  public abstract bind(scope: Construct, flowLog: FlowLog): FlowLogDestinationConfig;\n}\n\n                                                   \nexport interface FlowLogDestinationConfig {\n                                                                                                           \n  readonly logDestinationType: FlowLogDestinationType;\n\n                                                                                                                                    \n  readonly iamRole?: iam.IRole;\n\n                                                                                                                                    \n  readonly logGroup?: logs.ILogGroup;\n\n                                                                                     \n  readonly s3Bucket?: s3.IBucket;\n\n                                                                                                \n  readonly keyPrefix?: string;\n}\n\n/**\n *\n */\nclass S3Destination extends FlowLogDestination {\n  constructor(private readonly props: FlowLogDestinationConfig) {\n    super();\n  }\n\n  public bind(scope: Construct, _flowLog: FlowLog): FlowLogDestinationConfig {\n    let s3Bucket: s3.IBucket;\n    if (this.props.s3Bucket === undefined) {\n      s3Bucket = new s3.Bucket(scope, 'Bucket', {\n        encryption: s3.BucketEncryption.UNENCRYPTED,\n        enforceSSL: true,\n        removalPolicy: RemovalPolicy.RETAIN,\n      });\n    } else {\n      s3Bucket = this.props.s3Bucket;\n    }\n    return {\n      logDestinationType: FlowLogDestinationType.S3,\n      s3Bucket,\n      keyPrefix: this.props.keyPrefix,\n    };\n  }\n}\n\n/**\n *\n */\nclass CloudWatchLogsDestination extends FlowLogDestination {\n  constructor(private readonly props: FlowLogDestinationConfig) {\n    super();\n  }\n\n  public bind(scope: Construct, _flowLog: FlowLog): FlowLogDestinationConfig {\n    let iamRole: iam.IRole;\n    let logGroup: logs.ILogGroup;\n    if (this.props.iamRole === undefined) {\n      iamRole = new iam.Role(scope, 'IAMRole', {\n        roleName: PhysicalName.GENERATE_IF_NEEDED,\n        assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),\n      });\n    } else {\n      iamRole = this.props.iamRole;\n    }\n\n    if (this.props.logGroup === undefined) {\n      logGroup = new logs.LogGroup(scope, 'LogGroup');\n    } else {\n      logGroup = this.props.logGroup;\n    }\n\n    iamRole.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        actions: [\n          'logs:CreateLogStream',\n          'logs:PutLogEvents',\n          'logs:DescribeLogStreams',\n        ],\n        effect: iam.Effect.ALLOW,\n        resources: [logGroup.logGroupArn],\n      }),\n    );\n\n    iamRole.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        effect: iam.Effect.ALLOW,\n        resources: [iamRole.roleArn],\n      }),\n    );\n\n    return {\n      logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,\n      logGroup,\n      iamRole,\n    };\n  }\n}\n\n                                                   \nexport interface FlowLogOptions {\n                                                                                                                                             \n  readonly trafficType?: FlowLogTrafficType;\n\n                                                                                                                                                                                                                                  \n  readonly destination?: FlowLogDestination;\n}\n\n                                             \nexport interface FlowLogProps extends FlowLogOptions {\n                                                                                                                                                                                                                                                    \n  readonly flowLogName?: string;\n\n                                                                      \n  readonly resourceType: FlowLogResourceType;\n}\n\n/**\n * The base class for a Flow Log\n *\n *\n */\nabstract class FlowLogBase extends Resource implements IFlowLog {\n  /**\n   * The Id of the VPC Flow Log\n   *\n   * @attribute\n   */\n  public abstract readonly flowLogId: string;\n}\n\n                                                               \nexport class FlowLog extends FlowLogBase {\n                                             \n  public static fromFlowLogId(scope: Construct, id: string, flowLogId: string): IFlowLog {\n    class Import extends FlowLogBase {\n      public flowLogId = flowLogId;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                \n  public readonly flowLogId: string;\n\n                                                      \n  public readonly bucket?: s3.IBucket;\n\n                                                                    \n  readonly keyPrefix?: string;\n\n                                                                \n  public readonly iamRole?: iam.IRole;\n\n                                                                     \n  public readonly logGroup?: logs.ILogGroup;\n\n  constructor(scope: Construct, id: string, props: FlowLogProps) {\n    super(scope, id, {\n      physicalName: props.flowLogName,\n    });\n\n    const destination = props.destination || FlowLogDestination.toCloudWatchLogs();\n\n    const destinationConfig = destination.bind(this, this);\n    this.logGroup = destinationConfig.logGroup;\n    this.bucket = destinationConfig.s3Bucket;\n    this.iamRole = destinationConfig.iamRole;\n    this.keyPrefix = destinationConfig.keyPrefix;\n\n    let logDestination: string | undefined = undefined;\n    if (this.bucket) {\n      logDestination = this.keyPrefix ? this.bucket.arnForObjects(this.keyPrefix) : this.bucket.bucketArn;\n    }\n\n    const flowLog = new CfnFlowLog(this, 'FlowLog', {\n      deliverLogsPermissionArn: this.iamRole ? this.iamRole.roleArn : undefined,\n      logDestinationType: destinationConfig.logDestinationType,\n      logGroupName: this.logGroup ? this.logGroup.logGroupName : undefined,\n      resourceId: props.resourceType.resourceId,\n      resourceType: props.resourceType.resourceType,\n      trafficType: props.trafficType\n        ? props.trafficType\n        : FlowLogTrafficType.ALL,\n      logDestination,\n    });\n\n    this.flowLogId = flowLog.ref;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
