{
  "version": 3,
  "sources": ["tarball-asset.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as ecr from '../../aws-ecr';\nimport { AssetStaging, Stack, Stage } from '../../core';\nimport { Construct } from 'constructs';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line\nimport { IAsset } from '../../assets';\n\n                                        \nexport interface TarballImageAssetProps {\n                                                                                                                                                                                                                                                                   \n  readonly tarballFile: string;\n}\n\n                                                                                                                                           \nexport class TarballImageAsset extends Construct implements IAsset {\n                                                                                                        \n  public imageUri: string;\n\n                                                     \n  public repository: ecr.IRepository;\n\n                                                                                                                                                                                                                                                                                   \n  public readonly sourceHash: string;\n\n                                                                                                                                                                                                                                      \n  public readonly assetHash: string;\n\n  constructor(scope: Construct, id: string, props: TarballImageAssetProps) {\n    super(scope, id);\n\n    if (!fs.existsSync(props.tarballFile)) {\n      throw new Error(`Cannot find file at ${props.tarballFile}`);\n    }\n\n    const stagedTarball = new AssetStaging(this, 'Staging', { sourcePath: props.tarballFile });\n\n    this.sourceHash = stagedTarball.assetHash;\n    this.assetHash = stagedTarball.assetHash;\n\n    const stage = Stage.of(this);\n    const relativePathInOutDir = stage ? path.relative(stage.assetOutdir, stagedTarball.absoluteStagedPath) : stagedTarball.absoluteStagedPath;\n\n    const stack = Stack.of(this);\n    const location = stack.synthesizer.addDockerImageAsset({\n      sourceHash: stagedTarball.assetHash,\n      executable: [\n        'sh',\n        '-c',\n        `docker load -i ${relativePathInOutDir} | sed \"s/Loaded image: //g\"`,\n      ],\n    });\n\n    this.repository = ecr.Repository.fromRepositoryName(this, 'Repository', location.repositoryName);\n    this.imageUri = location.imageUri;\n  }\n}\n\n"],
  "mappings": "wNAAA,GAAA,QAAA,MACA,KAAA,QAAA,QACA,IAAA,QAAA,iBACA,OAAA,QAAA,cACA,aAAA,QAAA,cAaA,+BAAuC,cAAA,SAAS,CAa9C,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,IAEb,oFAAI,CAAC,GAAG,WAAW,MAAM,aACvB,KAAM,IAAI,OAAM,uBAAuB,MAAM,eAG/C,KAAM,eAAgB,GAAI,QAAA,aAAa,KAAM,UAAW,CAAE,WAAY,MAAM,cAE5E,KAAK,WAAa,cAAc,UAChC,KAAK,UAAY,cAAc,UAE/B,KAAM,OAAQ,OAAA,MAAM,GAAG,MACjB,qBAAuB,MAAQ,KAAK,SAAS,MAAM,YAAa,cAAc,oBAAsB,cAAc,mBAGlH,SAAW,AADH,OAAA,MAAM,GAAG,MACA,YAAY,oBAAoB,CACrD,WAAY,cAAc,UAC1B,WAAY,CACV,KACA,KACA,kBAAkB,sDAItB,KAAK,WAAa,IAAI,WAAW,mBAAmB,KAAM,aAAc,SAAS,gBACjF,KAAK,SAAW,SAAS,UAvC7B,QAAA,kBAAA",
  "names": []
}
