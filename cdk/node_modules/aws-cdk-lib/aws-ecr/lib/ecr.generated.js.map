{
  "version": 3,
  "sources": ["ecr.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:53:56.974Z\",\"fingerprint\":\"ngvIgoP9jFpGaTs6SirP1+MhS2pfXWtHiQbh4nP5ygM=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                \nexport interface CfnPublicRepositoryProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly repositoryCatalogData?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly repositoryName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly repositoryPolicyText?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPublicRepositoryProps`\n *\n * @param properties - the TypeScript properties of a `CfnPublicRepositoryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPublicRepositoryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('repositoryCatalogData', cdk.validateObject)(properties.repositoryCatalogData));\n    errors.collect(cdk.propertyValidator('repositoryName', cdk.validateString)(properties.repositoryName));\n    errors.collect(cdk.propertyValidator('repositoryPolicyText', cdk.validateObject)(properties.repositoryPolicyText));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPublicRepositoryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::PublicRepository` resource\n *\n * @param properties - the TypeScript properties of a `CfnPublicRepositoryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::PublicRepository` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPublicRepositoryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPublicRepositoryPropsValidator(properties).assertSuccess();\n    return {\n        RepositoryCatalogData: cdk.objectToCloudFormation(properties.repositoryCatalogData),\n        RepositoryName: cdk.stringToCloudFormation(properties.repositoryName),\n        RepositoryPolicyText: cdk.objectToCloudFormation(properties.repositoryPolicyText),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPublicRepositoryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPublicRepositoryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPublicRepositoryProps>();\n    ret.addPropertyResult('repositoryCatalogData', 'RepositoryCatalogData', properties.RepositoryCatalogData != null ? cfn_parse.FromCloudFormation.getAny(properties.RepositoryCatalogData) : undefined);\n    ret.addPropertyResult('repositoryName', 'RepositoryName', properties.RepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryName) : undefined);\n    ret.addPropertyResult('repositoryPolicyText', 'RepositoryPolicyText', properties.RepositoryPolicyText != null ? cfn_parse.FromCloudFormation.getAny(properties.RepositoryPolicyText) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPublicRepository extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECR::PublicRepository\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPublicRepository {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPublicRepositoryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPublicRepository(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public repositoryCatalogData: any | cdk.IResolvable | undefined;\n\nn    public repositoryName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public repositoryPolicyText: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnPublicRepositoryProps = {}) {\n        super(scope, id, { type: CfnPublicRepository.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.repositoryCatalogData = props.repositoryCatalogData;\n        this.repositoryName = props.repositoryName;\n        this.repositoryPolicyText = props.repositoryPolicyText;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ECR::PublicRepository\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPublicRepository.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            repositoryCatalogData: this.repositoryCatalogData,\n            repositoryName: this.repositoryName,\n            repositoryPolicyText: this.repositoryPolicyText,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPublicRepositoryPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                            \nexport interface CfnRegistryPolicyProps {\n\n                                                                                                                                                                                                                       \n    readonly policyText: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRegistryPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnRegistryPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRegistryPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policyText', cdk.requiredValidator)(properties.policyText));\n    errors.collect(cdk.propertyValidator('policyText', cdk.validateObject)(properties.policyText));\n    return errors.wrap('supplied properties not correct for \"CfnRegistryPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::RegistryPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnRegistryPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::RegistryPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRegistryPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRegistryPolicyPropsValidator(properties).assertSuccess();\n    return {\n        PolicyText: cdk.objectToCloudFormation(properties.policyText),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRegistryPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRegistryPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRegistryPolicyProps>();\n    ret.addPropertyResult('policyText', 'PolicyText', cfn_parse.FromCloudFormation.getAny(properties.PolicyText));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRegistryPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECR::RegistryPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRegistryPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRegistryPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRegistryPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                       \n    public readonly attrRegistryId: string;\n\n                                                                                                                                                                                                                       \n    public policyText: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnRegistryPolicyProps) {\n        super(scope, id, { type: CfnRegistryPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'policyText', this);\n        this.attrRegistryId = cdk.Token.asString(this.getAtt('RegistryId'));\n\n        this.policyText = props.policyText;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRegistryPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            policyText: this.policyText,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRegistryPolicyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                \nexport interface CfnReplicationConfigurationProps {\n\n                                                                                                                                                                                                                                                               \n    readonly replicationConfiguration: CfnReplicationConfiguration.ReplicationConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReplicationConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnReplicationConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replicationConfiguration', cdk.requiredValidator)(properties.replicationConfiguration));\n    errors.collect(cdk.propertyValidator('replicationConfiguration', CfnReplicationConfiguration_ReplicationConfigurationPropertyValidator)(properties.replicationConfiguration));\n    return errors.wrap('supplied properties not correct for \"CfnReplicationConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnReplicationConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        ReplicationConfiguration: cfnReplicationConfigurationReplicationConfigurationPropertyToCloudFormation(properties.replicationConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationConfigurationProps>();\n    ret.addPropertyResult('replicationConfiguration', 'ReplicationConfiguration', CfnReplicationConfigurationReplicationConfigurationPropertyFromCloudFormation(properties.ReplicationConfiguration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnReplicationConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECR::ReplicationConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReplicationConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReplicationConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReplicationConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                             \n    public readonly attrRegistryId: string;\n\n                                                                                                                                                                                                                                                               \n    public replicationConfiguration: CfnReplicationConfiguration.ReplicationConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnReplicationConfigurationProps) {\n        super(scope, id, { type: CfnReplicationConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'replicationConfiguration', this);\n        this.attrRegistryId = cdk.Token.asString(this.getAtt('RegistryId'));\n\n        this.replicationConfiguration = props.replicationConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReplicationConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            replicationConfiguration: this.replicationConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReplicationConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnReplicationConfiguration {\n                                                                                                                                                                                                                                                                                 \n    export interface ReplicationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly rules: Array<CfnReplicationConfiguration.ReplicationRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationConfiguration_ReplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnReplicationConfiguration_ReplicationRulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"ReplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.ReplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.ReplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationConfigurationReplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationConfiguration_ReplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Rules: cdk.listMapper(cfnReplicationConfigurationReplicationRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationConfigurationReplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationConfiguration.ReplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationConfiguration.ReplicationConfigurationProperty>();\n    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnReplicationConfigurationReplicationRulePropertyFromCloudFormation)(properties.Rules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationConfiguration {\n                                                                                                                                                                                                                                                                                                          \n    export interface ReplicationDestinationProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly region: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly registryId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationConfiguration_ReplicationDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('region', cdk.requiredValidator)(properties.region));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    errors.collect(cdk.propertyValidator('registryId', cdk.requiredValidator)(properties.registryId));\n    errors.collect(cdk.propertyValidator('registryId', cdk.validateString)(properties.registryId));\n    return errors.wrap('supplied properties not correct for \"ReplicationDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.ReplicationDestination` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.ReplicationDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationConfigurationReplicationDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationConfiguration_ReplicationDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        Region: cdk.stringToCloudFormation(properties.region),\n        RegistryId: cdk.stringToCloudFormation(properties.registryId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationConfigurationReplicationDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationConfiguration.ReplicationDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationConfiguration.ReplicationDestinationProperty>();\n    ret.addPropertyResult('region', 'Region', cfn_parse.FromCloudFormation.getString(properties.Region));\n    ret.addPropertyResult('registryId', 'RegistryId', cfn_parse.FromCloudFormation.getString(properties.RegistryId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationConfiguration {\n                                                                                                                                                                                                                                                                                                                                                \n    export interface ReplicationRuleProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly destinations: Array<CfnReplicationConfiguration.ReplicationDestinationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly repositoryFilters?: Array<CfnReplicationConfiguration.RepositoryFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationRuleProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationConfiguration_ReplicationRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinations', cdk.requiredValidator)(properties.destinations));\n    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnReplicationConfiguration_ReplicationDestinationPropertyValidator))(properties.destinations));\n    errors.collect(cdk.propertyValidator('repositoryFilters', cdk.listValidator(CfnReplicationConfiguration_RepositoryFilterPropertyValidator))(properties.repositoryFilters));\n    return errors.wrap('supplied properties not correct for \"ReplicationRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.ReplicationRule` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.ReplicationRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationConfigurationReplicationRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationConfiguration_ReplicationRulePropertyValidator(properties).assertSuccess();\n    return {\n        Destinations: cdk.listMapper(cfnReplicationConfigurationReplicationDestinationPropertyToCloudFormation)(properties.destinations),\n        RepositoryFilters: cdk.listMapper(cfnReplicationConfigurationRepositoryFilterPropertyToCloudFormation)(properties.repositoryFilters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationConfigurationReplicationRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationConfiguration.ReplicationRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationConfiguration.ReplicationRuleProperty>();\n    ret.addPropertyResult('destinations', 'Destinations', cfn_parse.FromCloudFormation.getArray(CfnReplicationConfigurationReplicationDestinationPropertyFromCloudFormation)(properties.Destinations));\n    ret.addPropertyResult('repositoryFilters', 'RepositoryFilters', properties.RepositoryFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnReplicationConfigurationRepositoryFilterPropertyFromCloudFormation)(properties.RepositoryFilters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationConfiguration {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface RepositoryFilterProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly filter: string;\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly filterType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RepositoryFilterProperty`\n *\n * @param properties - the TypeScript properties of a `RepositoryFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationConfiguration_RepositoryFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('filter', cdk.requiredValidator)(properties.filter));\n    errors.collect(cdk.propertyValidator('filter', cdk.validateString)(properties.filter));\n    errors.collect(cdk.propertyValidator('filterType', cdk.requiredValidator)(properties.filterType));\n    errors.collect(cdk.propertyValidator('filterType', cdk.validateString)(properties.filterType));\n    return errors.wrap('supplied properties not correct for \"RepositoryFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.RepositoryFilter` resource\n *\n * @param properties - the TypeScript properties of a `RepositoryFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::ReplicationConfiguration.RepositoryFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationConfigurationRepositoryFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationConfiguration_RepositoryFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Filter: cdk.stringToCloudFormation(properties.filter),\n        FilterType: cdk.stringToCloudFormation(properties.filterType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationConfigurationRepositoryFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationConfiguration.RepositoryFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationConfiguration.RepositoryFilterProperty>();\n    ret.addPropertyResult('filter', 'Filter', cfn_parse.FromCloudFormation.getString(properties.Filter));\n    ret.addPropertyResult('filterType', 'FilterType', cfn_parse.FromCloudFormation.getString(properties.FilterType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                    \nexport interface CfnRepositoryProps {\n\n                                                                                                                                                                                                                                                                                                                \n    readonly encryptionConfiguration?: CfnRepository.EncryptionConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    readonly imageScanningConfiguration?: CfnRepository.ImageScanningConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly imageTagMutability?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly lifecyclePolicy?: CfnRepository.LifecyclePolicyProperty | cdk.IResolvable;\n\nn    readonly repositoryName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly repositoryPolicyText?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRepositoryProps`\n *\n * @param properties - the TypeScript properties of a `CfnRepositoryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRepositoryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionConfiguration', CfnRepository_EncryptionConfigurationPropertyValidator)(properties.encryptionConfiguration));\n    errors.collect(cdk.propertyValidator('imageScanningConfiguration', CfnRepository_ImageScanningConfigurationPropertyValidator)(properties.imageScanningConfiguration));\n    errors.collect(cdk.propertyValidator('imageTagMutability', cdk.validateString)(properties.imageTagMutability));\n    errors.collect(cdk.propertyValidator('lifecyclePolicy', CfnRepository_LifecyclePolicyPropertyValidator)(properties.lifecyclePolicy));\n    errors.collect(cdk.propertyValidator('repositoryName', cdk.validateString)(properties.repositoryName));\n    errors.collect(cdk.propertyValidator('repositoryPolicyText', cdk.validateObject)(properties.repositoryPolicyText));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnRepositoryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::Repository` resource\n *\n * @param properties - the TypeScript properties of a `CfnRepositoryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::Repository` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRepositoryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRepositoryPropsValidator(properties).assertSuccess();\n    return {\n        EncryptionConfiguration: cfnRepositoryEncryptionConfigurationPropertyToCloudFormation(properties.encryptionConfiguration),\n        ImageScanningConfiguration: cfnRepositoryImageScanningConfigurationPropertyToCloudFormation(properties.imageScanningConfiguration),\n        ImageTagMutability: cdk.stringToCloudFormation(properties.imageTagMutability),\n        LifecyclePolicy: cfnRepositoryLifecyclePolicyPropertyToCloudFormation(properties.lifecyclePolicy),\n        RepositoryName: cdk.stringToCloudFormation(properties.repositoryName),\n        RepositoryPolicyText: cdk.objectToCloudFormation(properties.repositoryPolicyText),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRepositoryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRepositoryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRepositoryProps>();\n    ret.addPropertyResult('encryptionConfiguration', 'EncryptionConfiguration', properties.EncryptionConfiguration != null ? CfnRepositoryEncryptionConfigurationPropertyFromCloudFormation(properties.EncryptionConfiguration) : undefined);\n    ret.addPropertyResult('imageScanningConfiguration', 'ImageScanningConfiguration', properties.ImageScanningConfiguration != null ? CfnRepositoryImageScanningConfigurationPropertyFromCloudFormation(properties.ImageScanningConfiguration) : undefined);\n    ret.addPropertyResult('imageTagMutability', 'ImageTagMutability', properties.ImageTagMutability != null ? cfn_parse.FromCloudFormation.getString(properties.ImageTagMutability) : undefined);\n    ret.addPropertyResult('lifecyclePolicy', 'LifecyclePolicy', properties.LifecyclePolicy != null ? CfnRepositoryLifecyclePolicyPropertyFromCloudFormation(properties.LifecyclePolicy) : undefined);\n    ret.addPropertyResult('repositoryName', 'RepositoryName', properties.RepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryName) : undefined);\n    ret.addPropertyResult('repositoryPolicyText', 'RepositoryPolicyText', properties.RepositoryPolicyText != null ? cfn_parse.FromCloudFormation.getAny(properties.RepositoryPolicyText) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRepository extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECR::Repository\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRepository {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRepositoryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRepository(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                       \n    public readonly attrRepositoryUri: string;\n\n                                                                                                                                                                                                                                                                                                                \n    public encryptionConfiguration: CfnRepository.EncryptionConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    public imageScanningConfiguration: CfnRepository.ImageScanningConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public imageTagMutability: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    public lifecyclePolicy: CfnRepository.LifecyclePolicyProperty | cdk.IResolvable | undefined;\n\nn    public repositoryName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public repositoryPolicyText: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnRepositoryProps = {}) {\n        super(scope, id, { type: CfnRepository.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrRepositoryUri = cdk.Token.asString(this.getAtt('RepositoryUri'));\n\n        this.encryptionConfiguration = props.encryptionConfiguration;\n        this.imageScanningConfiguration = props.imageScanningConfiguration;\n        this.imageTagMutability = props.imageTagMutability;\n        this.lifecyclePolicy = props.lifecyclePolicy;\n        this.repositoryName = props.repositoryName;\n        this.repositoryPolicyText = props.repositoryPolicyText;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ECR::Repository\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRepository.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            encryptionConfiguration: this.encryptionConfiguration,\n            imageScanningConfiguration: this.imageScanningConfiguration,\n            imageTagMutability: this.imageTagMutability,\n            lifecyclePolicy: this.lifecyclePolicy,\n            repositoryName: this.repositoryName,\n            repositoryPolicyText: this.repositoryPolicyText,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRepositoryPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRepository {\nn    export interface EncryptionConfigurationProperty {\nn        readonly encryptionType: string;\nn        readonly kmsKey?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRepository_EncryptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionType', cdk.requiredValidator)(properties.encryptionType));\n    errors.collect(cdk.propertyValidator('encryptionType', cdk.validateString)(properties.encryptionType));\n    errors.collect(cdk.propertyValidator('kmsKey', cdk.validateString)(properties.kmsKey));\n    return errors.wrap('supplied properties not correct for \"EncryptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::Repository.EncryptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::Repository.EncryptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRepositoryEncryptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRepository_EncryptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        EncryptionType: cdk.stringToCloudFormation(properties.encryptionType),\n        KmsKey: cdk.stringToCloudFormation(properties.kmsKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRepositoryEncryptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRepository.EncryptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRepository.EncryptionConfigurationProperty>();\n    ret.addPropertyResult('encryptionType', 'EncryptionType', cfn_parse.FromCloudFormation.getString(properties.EncryptionType));\n    ret.addPropertyResult('kmsKey', 'KmsKey', properties.KmsKey != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKey) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRepository {\n                                                                                                                                                                                                                                                                          \n    export interface ImageScanningConfigurationProperty {\nn        readonly scanOnPush?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageScanningConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ImageScanningConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRepository_ImageScanningConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scanOnPush', cdk.validateBoolean)(properties.scanOnPush));\n    return errors.wrap('supplied properties not correct for \"ImageScanningConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::Repository.ImageScanningConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ImageScanningConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::Repository.ImageScanningConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRepositoryImageScanningConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRepository_ImageScanningConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ScanOnPush: cdk.booleanToCloudFormation(properties.scanOnPush),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRepositoryImageScanningConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRepository.ImageScanningConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRepository.ImageScanningConfigurationProperty>();\n    ret.addPropertyResult('scanOnPush', 'ScanOnPush', properties.ScanOnPush != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ScanOnPush) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRepository {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface LifecyclePolicyProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly lifecyclePolicyText?: string;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly registryId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LifecyclePolicyProperty`\n *\n * @param properties - the TypeScript properties of a `LifecyclePolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRepository_LifecyclePolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('lifecyclePolicyText', cdk.validateString)(properties.lifecyclePolicyText));\n    errors.collect(cdk.propertyValidator('registryId', cdk.validateString)(properties.registryId));\n    return errors.wrap('supplied properties not correct for \"LifecyclePolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECR::Repository.LifecyclePolicy` resource\n *\n * @param properties - the TypeScript properties of a `LifecyclePolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECR::Repository.LifecyclePolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRepositoryLifecyclePolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRepository_LifecyclePolicyPropertyValidator(properties).assertSuccess();\n    return {\n        LifecyclePolicyText: cdk.stringToCloudFormation(properties.lifecyclePolicyText),\n        RegistryId: cdk.stringToCloudFormation(properties.registryId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRepositoryLifecyclePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRepository.LifecyclePolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRepository.LifecyclePolicyProperty>();\n    ret.addPropertyResult('lifecyclePolicyText', 'LifecyclePolicyText', properties.LifecyclePolicyText != null ? cfn_parse.FromCloudFormation.getString(properties.LifecyclePolicyText) : undefined);\n    ret.addPropertyResult('registryId', 'RegistryId', properties.RegistryId != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
