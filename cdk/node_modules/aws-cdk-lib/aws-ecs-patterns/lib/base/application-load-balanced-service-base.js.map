{
  "version": 3,
  "sources": ["application-load-balanced-service-base.ts"],
  "sourcesContent": ["import { Certificate, CertificateValidation, ICertificate } from '../../../aws-certificatemanager';\nimport { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerImage, DeploymentController, DeploymentCircuitBreaker,\n  ICluster, LogDriver, PropagatedTagSource, Secret,\n} from '../../../aws-ecs';\nimport {\n  ApplicationListener, ApplicationLoadBalancer, ApplicationProtocol, ApplicationProtocolVersion, ApplicationTargetGroup,\n  IApplicationLoadBalancer, ListenerCertificate, ListenerAction, AddApplicationTargetsProps, SslPolicy,\n} from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, IHostedZone, RecordTarget, CnameRecord } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\n\n                                                                     \nexport enum ApplicationLoadBalancedServiceRecordType {\n                                              \n  ALIAS,\n                                      \n  CNAME,\n                                              \n  NONE\n}\n\n                                                                                                                          \nexport interface ApplicationLoadBalancedServiceBaseProps {\n                                                                                                                                                                                                                                                                                                          \n  readonly cluster?: ICluster;\n\n                                                                                                                                                                                                                                                                                                                                        \n  readonly vpc?: IVpc;\n\n                                                                                                                                                                     \n  readonly taskImageOptions?: ApplicationLoadBalancedTaskImageOptions;\n\n                                                                                                      \n  readonly publicLoadBalancer?: boolean;\n\n                                                                                                                                                                                                                          \n  readonly openListener?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly desiredCount?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n  readonly certificate?: ICertificate;\n\n                                                                                                                                                                                                                         \n  readonly targetProtocol?: ApplicationProtocol;\n\n                                                                                                                                                                                                                                                                                                                                                                           \n  readonly protocol?: ApplicationProtocol;\n\n                                                                                                \n  readonly protocolVersion?: ApplicationProtocolVersion;\n\n                                                                                                              \n  readonly domainName?: string;\n\n                                                                                                                                \n  readonly domainZone?: IHostedZone;\n\n                                                                                             \n  readonly serviceName?: string;\n\n                                                                                                                                                                                                                                                                                                       \n  readonly healthCheckGracePeriod?: cdk.Duration;\n\n                                                                                                                                                                                                                                  \n  readonly maxHealthyPercent?: number;\n\n                                                                                                                                                                                                                                                  \n  readonly minHealthyPercent?: number;\n\n                                                                                                                                                                                                                                                                                                                            \n  readonly loadBalancer?: IApplicationLoadBalancer;\n\n                                                                                                                                                                                                                                                                                                    \n  readonly listenerPort?: number;\n\n                                                                                                                                                                                            \n  readonly sslPolicy?: SslPolicy;\n\n                                                                                                                                                                                                                                                 \n  readonly propagateTags?: PropagatedTagSource;\n\n                                                                                                                                                                                                                                                                                   \n  readonly enableECSManagedTags?: boolean;\n\n                                                                                                                                                                 \n  readonly cloudMapOptions?: CloudMapOptions;\n\n                                                                                                                                                                                                                         \n  readonly redirectHTTP?: boolean;\n\n                                                                                                                                                                                                                                                                                               \n  readonly recordType?: ApplicationLoadBalancedServiceRecordType;\n\n                                                                                                                                                                                                                                                                        \n  readonly deploymentController?: DeploymentController;\n\n                                                                                                                                                                         \n  readonly circuitBreaker?: DeploymentCircuitBreaker;\n\n                                                                                             \n  readonly loadBalancerName?: string;\n\n}\n\nexport interface ApplicationLoadBalancedTaskImageOptions {\n                                                                                                                                    \n  readonly image: ContainerImage;\n\n                                                                                                                   \n  readonly environment?: { [key: string]: string };\n\n                                                                                                                                        \n  readonly secrets?: { [key: string]: Secret };\n\n                                                                                    \n  readonly enableLogging?: boolean;\n\n                                                                                                  \n  readonly logDriver?: LogDriver;\n\n                                                                                                                                                                             \n  readonly executionRole?: IRole;\n\n                                                                                                                                                                                                \n  readonly taskRole?: IRole;\n\n                                                                                                           \n  readonly containerName?: string;\n\nn  readonly containerPort?: number;\n\n                                                                                                                                                                                            \n  readonly family?: string;\n\n                                                                                                   \n  readonly dockerLabels?: { [key: string]: string };\n}\n\n                                                                                                                   \nexport abstract class ApplicationLoadBalancedServiceBase extends Construct {\n\n                                                                                                                                                                   \n  public readonly desiredCount: number;\n\n                                                                                                                                                                                                                                                                   \n  public readonly internalDesiredCount?: number;\n\n                                                               \n  public get loadBalancer(): ApplicationLoadBalancer {\n    if (!this._applicationLoadBalancer) {\n      throw new Error('.loadBalancer can only be accessed if the class was constructed with an owned, not imported, load balancer');\n    }\n    return this._applicationLoadBalancer;\n  }\n\n                                              \n  public readonly listener: ApplicationListener;\n\n                                                                                  \n  public readonly redirectListener?: ApplicationListener;\n\n                                                  \n  public readonly targetGroup: ApplicationTargetGroup;\n\n                                                                                     \n  public readonly certificate?: ICertificate;\n\n                                                    \n  public readonly cluster: ICluster;\n\n  private readonly _applicationLoadBalancer?: ApplicationLoadBalancer;\n\n                                                                                           \n  constructor(scope: Construct, id: string, props: ApplicationLoadBalancedServiceBaseProps = {}) {\n    super(scope, id);\n\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    if (props.desiredCount !== undefined && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    const internetFacing = props.publicLoadBalancer ?? true;\n\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      loadBalancerName: props.loadBalancerName,\n      internetFacing,\n    };\n\n    const loadBalancer = props.loadBalancer ?? new ApplicationLoadBalancer(this, 'LB', lbProps);\n\n    if (props.certificate !== undefined && props.protocol !== undefined && props.protocol !== ApplicationProtocol.HTTPS) {\n      throw new Error('The HTTPS protocol must be used when a certificate is given');\n    }\n    const protocol = props.protocol ?? (props.certificate ? ApplicationProtocol.HTTPS : ApplicationProtocol.HTTP);\n\n    if (protocol !== ApplicationProtocol.HTTPS && props.redirectHTTP === true) {\n      throw new Error('The HTTPS protocol must be used when redirecting HTTP traffic');\n    }\n\n    const targetProps: AddApplicationTargetsProps = {\n      protocol: props.targetProtocol ?? ApplicationProtocol.HTTP,\n      protocolVersion: props.protocolVersion,\n    };\n\n    this.listener = loadBalancer.addListener('PublicListener', {\n      protocol,\n      port: props.listenerPort,\n      open: props.openListener ?? true,\n      sslPolicy: props.sslPolicy,\n    });\n    this.targetGroup = this.listener.addTargets('ECS', targetProps);\n\n    if (protocol === ApplicationProtocol.HTTPS) {\n\n      if (props.certificate !== undefined) {\n        this.certificate = props.certificate;\n      } else {\n        if (typeof props.domainName === 'undefined' || typeof props.domainZone === 'undefined') {\n          throw new Error('A domain name and zone is required when using the HTTPS protocol');\n        }\n\n        this.certificate = new Certificate(this, 'Certificate', {\n          domainName: props.domainName,\n          validation: CertificateValidation.fromDns(props.domainZone),\n        });\n      }\n    }\n    if (this.certificate !== undefined) {\n      this.listener.addCertificates('Arns', [ListenerCertificate.fromCertificateManager(this.certificate)]);\n    }\n    if (props.redirectHTTP) {\n      this.redirectListener = loadBalancer.addListener('PublicRedirectListener', {\n        protocol: ApplicationProtocol.HTTP,\n        port: 80,\n        open: props.openListener ?? true,\n        defaultAction: ListenerAction.redirect({\n          port: props.listenerPort?.toString() || '443',\n          protocol: ApplicationProtocol.HTTPS,\n          permanent: true,\n        }),\n      });\n    }\n\n    let domainName = loadBalancer.loadBalancerDnsName;\n    if (typeof props.domainName !== 'undefined') {\n      if (typeof props.domainZone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      switch (props.recordType ?? ApplicationLoadBalancedServiceRecordType.ALIAS) {\n        case ApplicationLoadBalancedServiceRecordType.ALIAS:\n          let aliasRecord = new ARecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n          });\n          domainName = aliasRecord.domainName;\n          break;\n        case ApplicationLoadBalancedServiceRecordType.CNAME:\n          let cnameRecord = new CnameRecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            domainName: loadBalancer.loadBalancerDnsName,\n          });\n          domainName = cnameRecord.domainName;\n          break;\n        case ApplicationLoadBalancedServiceRecordType.NONE:\n          // Do not create a DNS record\n          break;\n      }\n    }\n\n    if (loadBalancer instanceof ApplicationLoadBalancer) {\n      this._applicationLoadBalancer = loadBalancer;\n    }\n\n    new cdk.CfnOutput(this, 'LoadBalancerDNS', { value: loadBalancer.loadBalancerDnsName });\n    new cdk.CfnOutput(this, 'ServiceURL', { value: protocol.toLowerCase() + '://' + domainName });\n  }\n\n                                             \n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = cdk.Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n                                                              \n  protected addServiceAsTarget(service: BaseService) {\n    this.targetGroup.addTarget(service);\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
