{
  "version": 3,
  "sources": ["application-multiple-target-groups-service-base.ts"],
  "sourcesContent": ["import { Certificate, CertificateValidation, ICertificate } from '../../../aws-certificatemanager';\nimport { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerDefinition, ContainerImage, ICluster, LogDriver, PropagatedTagSource,\n  Protocol, Secret,\n} from '../../../aws-ecs';\nimport {\n  ApplicationListener,\n  ApplicationLoadBalancer,\n  ApplicationProtocol,\n  ApplicationTargetGroup, ListenerCertificate,\n  ListenerCondition,\n  SslPolicy,\n} from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, IHostedZone, RecordTarget } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport { CfnOutput, Duration, Stack } from '../../../core';\nimport { Construct } from 'constructs';\n\n                                                                                                                                          \nexport interface ApplicationMultipleTargetGroupsServiceBaseProps {\n                                                                                                                                                                                                                                                                                                               \n  readonly cluster?: ICluster;\n\n                                                                                                                                                                                                                                                                                                                                             \n  readonly vpc?: IVpc;\n\n                                                                                                                                                                   \n  readonly taskImageOptions?: ApplicationLoadBalancedTaskImageProps;\n\n                                                                                                                                                                                                                                                                                                                                                            \n  readonly desiredCount?: number;\n\n                                                                                                                                                                                                                                                                                                       \n  readonly healthCheckGracePeriod?: Duration;\n\n                                                                                             \n  readonly serviceName?: string;\n\n                                                                                                                                                                \n  readonly loadBalancers?: ApplicationLoadBalancerProps[];\n\n                                                                                                                                                                                                                                                 \n  readonly propagateTags?: PropagatedTagSource;\n\n                                                                                                                                                                                                                                                                                   \n  readonly enableECSManagedTags?: boolean;\n\n                                                                                                                                                                 \n  readonly cloudMapOptions?: CloudMapOptions;\n\n                                                                                                                                                                        \n  readonly targetGroups?: ApplicationTargetProps[];\n}\n\n                                                   \nexport interface ApplicationLoadBalancedTaskImageProps {\n                                                                                                                                    \n  readonly image: ContainerImage;\n\n                                                                                                                   \n  readonly environment?: { [key: string]: string };\n\n                                                                                                                                         \n  readonly secrets?: { [key: string]: Secret };\n\n                                                                                    \n  readonly enableLogging?: boolean;\n\n                                                                                                  \n  readonly logDriver?: LogDriver;\n\n                                                                                                                                                                             \n  readonly executionRole?: IRole;\n\n                                                                                                                                                                                                \n  readonly taskRole?: IRole;\n\n                                                                                                          \n  readonly containerName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly containerPorts?: number[];\n\n                                                                                                                                                                                            \n  readonly family?: string;\n\n                                                                                                   \n  readonly dockerLabels?: { [key: string]: string };\n}\n\n                                                            \nexport interface ApplicationTargetProps {\n                                                                                                                 \n  readonly containerPort: number;\n\n                                                                                                                                                   \n  readonly protocol?: Protocol;\n\n                                                                                                                                \n  readonly listener?: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n  readonly priority?: number;\n\n                                                                                                                                                                                                                                                                                                                                              \n  readonly hostHeader?: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n  readonly pathPattern?: string;\n}\n\n                                                             \nexport interface ApplicationLoadBalancerProps {\n                                           \n  readonly name: string;\n\n                                                                                  \n  readonly listeners: ApplicationListenerProps[];\n\n                                                                                                      \n  readonly publicLoadBalancer?: boolean;\n\n                                                                                                              \n  readonly domainName?: string;\n\n                                                                                                                                \n  readonly domainZone?: IHostedZone;\n}\n\n                                                        \nexport interface ApplicationListenerProps {\n                                      \n  readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly protocol?: ApplicationProtocol;\n\n                                                                                                                             \n  readonly port?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n  readonly certificate?: ICertificate;\n\n                                                                                                                                                                                            \n  readonly sslPolicy?: SslPolicy;\n}\n\n                                                                                                                                  \nexport abstract class ApplicationMultipleTargetGroupsServiceBase extends Construct {\n\n                                                                                                                                                                   \n  public readonly desiredCount: number;\n\n                                                                                                                                                                                                                                                                    \n  public readonly internalDesiredCount?: number;\n\n                                                                                                   \n  public readonly loadBalancer: ApplicationLoadBalancer;\n\n                                                                             \n  public readonly listener: ApplicationListener;\n\n                                                    \n  public readonly cluster: ICluster;\n\n  protected logDriver?: LogDriver;\n  protected listeners = new Array<ApplicationListener>();\n  protected targetGroups = new Array<ApplicationTargetGroup>();\n\n  private loadBalancers = new Array<ApplicationLoadBalancer>();\n\n                                                                                                   \n  constructor(scope: Construct, id: string, props: ApplicationMultipleTargetGroupsServiceBaseProps = {}) {\n    super(scope, id);\n\n    this.validateInput(props);\n\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    if (props.taskImageOptions) {\n      this.logDriver = this.createLogDriver(props.taskImageOptions.enableLogging, props.taskImageOptions.logDriver);\n    }\n\n    if (props.loadBalancers) {\n      for (const lbProps of props.loadBalancers) {\n        const lb = this.createLoadBalancer(lbProps.name, lbProps.publicLoadBalancer);\n        this.loadBalancers.push(lb);\n        const protocolType = new Set<ApplicationProtocol>();\n        for (const listenerProps of lbProps.listeners) {\n          const protocol = this.createListenerProtocol(listenerProps.protocol, listenerProps.certificate);\n          if (listenerProps.certificate !== undefined && protocol !== undefined && protocol !== ApplicationProtocol.HTTPS) {\n            throw new Error('The HTTPS protocol must be used when a certificate is given');\n          }\n          protocolType.add(protocol);\n          const listener = this.configListener(protocol, {\n            certificate: listenerProps.certificate,\n            domainName: lbProps.domainName,\n            domainZone: lbProps.domainZone,\n            listenerName: listenerProps.name,\n            loadBalancer: lb,\n            port: listenerProps.port,\n            sslPolicy: listenerProps.sslPolicy,\n          });\n          this.listeners.push(listener);\n        }\n        const domainName = this.createDomainName(lb, lbProps.domainName, lbProps.domainZone);\n        new CfnOutput(this, `LoadBalancerDNS${lb.node.id}`, { value: lb.loadBalancerDnsName });\n        for (const protocol of protocolType) {\n          new CfnOutput(this, `ServiceURL${lb.node.id}${protocol.toLowerCase()}`, { value: protocol.toLowerCase() + '://' + domainName });\n        }\n      }\n      // set up default load balancer and listener.\n      this.loadBalancer = this.loadBalancers[0];\n      this.listener = this.listeners[0];\n    } else {\n      this.loadBalancer = this.createLoadBalancer('LB');\n      const protocol = this.createListenerProtocol();\n      this.listener = this.configListener(protocol, {\n        listenerName: 'PublicListener',\n        loadBalancer: this.loadBalancer,\n      });\n      const domainName = this.createDomainName(this.loadBalancer);\n\n      new CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.loadBalancerDnsName });\n      new CfnOutput(this, 'ServiceURL', { value: protocol.toLowerCase() + '://' + domainName });\n    }\n  }\n\n                                             \n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs.\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n\n  protected findListener(name?: string): ApplicationListener {\n    if (!name) {\n      return this.listener;\n    }\n    for (const listener of this.listeners) {\n      if (listener.node.id === name) {\n        return listener;\n      }\n    }\n    throw new Error(`Listener ${name} is not defined. Did you define listener with name ${name}?`);\n  }\n\n  protected registerECSTargets(service: BaseService, container: ContainerDefinition, targets: ApplicationTargetProps[]): ApplicationTargetGroup {\n    for (const targetProps of targets) {\n      const conditions: Array<ListenerCondition> = [];\n      if (targetProps.hostHeader) {\n        conditions.push(ListenerCondition.hostHeaders([targetProps.hostHeader]));\n      }\n      if (targetProps.pathPattern) {\n        conditions.push(ListenerCondition.pathPatterns([targetProps.pathPattern]));\n      }\n\n      const targetGroup = this.findListener(targetProps.listener).addTargets(`ECSTargetGroup${container.containerName}${targetProps.containerPort}`, {\n        port: 80,\n        targets: [\n          service.loadBalancerTarget({\n            containerName: container.containerName,\n            containerPort: targetProps.containerPort,\n            protocol: targetProps.protocol,\n          }),\n        ],\n        conditions,\n        priority: targetProps.priority,\n      });\n      this.targetGroups.push(targetGroup);\n    }\n    if (this.targetGroups.length === 0) {\n      throw new Error('At least one target group should be specified.');\n    }\n    return this.targetGroups[0];\n  }\n\n  protected addPortMappingForTargets(container: ContainerDefinition, targets: ApplicationTargetProps[]) {\n    for (const target of targets) {\n      if (!container.findPortMapping(target.containerPort, target.protocol || Protocol.TCP)) {\n        container.addPortMappings({\n          containerPort: target.containerPort,\n          protocol: target.protocol,\n        });\n      }\n    }\n  }\n\n  /**\n   * Create log driver if logging is enabled.\n   */\n  private createLogDriver(enableLoggingProp?: boolean, logDriverProp?: LogDriver): LogDriver | undefined {\n    const enableLogging = enableLoggingProp ?? true;\n    const logDriver = logDriverProp ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n    return logDriver;\n  }\n\n  private configListener(protocol: ApplicationProtocol, props: ListenerConfig): ApplicationListener {\n    const listener = this.createListener(props, protocol);\n    let certificate;\n    if (protocol === ApplicationProtocol.HTTPS) {\n      certificate = this.createListenerCertificate(props.listenerName, props.certificate, props.domainName, props.domainZone);\n    } else {\n      certificate = undefined;\n    }\n    if (certificate !== undefined) {\n      listener.addCertificates(`Arns${props.listenerName}`, [ListenerCertificate.fromArn(certificate.certificateArn)]);\n    }\n\n    return listener;\n  }\n\n  private validateInput(props: ApplicationMultipleTargetGroupsServiceBaseProps) {\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n\n    if (props.desiredCount !== undefined && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    if (props.loadBalancers) {\n      if (props.loadBalancers.length === 0) {\n        throw new Error('At least one load balancer must be specified');\n      }\n      for (const lbProps of props.loadBalancers) {\n        if (lbProps.listeners.length === 0) {\n          throw new Error('At least one listener must be specified');\n        }\n      }\n    }\n  }\n\n  private createLoadBalancer(name: string, publicLoadBalancer?: boolean): ApplicationLoadBalancer {\n    const internetFacing = publicLoadBalancer ?? true;\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      internetFacing,\n    };\n\n    return new ApplicationLoadBalancer(this, name, lbProps);\n  }\n\n  private createListenerProtocol(listenerProtocol?: ApplicationProtocol, certificate?: ICertificate): ApplicationProtocol {\n    return listenerProtocol ?? (certificate ? ApplicationProtocol.HTTPS : ApplicationProtocol.HTTP);\n  }\n\n  private createListenerCertificate(listenerName: string, certificate?: ICertificate, domainName?: string, domainZone?: IHostedZone): ICertificate {\n    if (typeof domainName === 'undefined' || typeof domainZone === 'undefined') {\n      throw new Error('A domain name and zone is required when using the HTTPS protocol');\n    }\n\n    if (certificate !== undefined) {\n      return certificate;\n    } else {\n      return new Certificate(this, `Certificate${listenerName}`, {\n        domainName,\n        validation: CertificateValidation.fromDns(domainZone),\n      });\n    }\n  }\n\n  private createListener({ loadBalancer, listenerName, port, sslPolicy }: ListenerConfig, protocol?: ApplicationProtocol): ApplicationListener {\n    return loadBalancer.addListener(listenerName, {\n      protocol,\n      open: true,\n      port,\n      sslPolicy,\n    });\n  }\n\n  private createDomainName(loadBalancer: ApplicationLoadBalancer, name?: string, zone?: IHostedZone): string {\n    let domainName = loadBalancer.loadBalancerDnsName;\n    if (typeof name !== 'undefined') {\n      if (typeof zone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      const record = new ARecord(this, `DNS${loadBalancer.node.id}`, {\n        zone,\n        recordName: name,\n        target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n      });\n\n      domainName = record.domainName;\n    }\n    return domainName;\n  }\n}\n\n/**\n * Properties to configure a listener.\n */\ninterface ListenerConfig {\n  /**\n   * Name of the listener\n   */\n  readonly listenerName: string;\n\n  /**\n   * Load balancer the listener attached to\n   */\n  readonly loadBalancer: ApplicationLoadBalancer;\n\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default - Determined from protocol if known.\n   */\n  readonly port?: number;\n\n  /**\n   * Certificate for the listener\n   *\n   * @default none\n   */\n  readonly certificate?: ICertificate;\n\n  /**\n   * SSL Policy for the listener\n   *\n   * @default null\n   */\n  readonly sslPolicy?: SslPolicy;\n\n  /**\n   * The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.\n   */\n  readonly domainZone?: IHostedZone;\n}\n"],
  "mappings": "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",
  "names": []
}
