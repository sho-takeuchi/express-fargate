{
  "version": 3,
  "sources": ["network-load-balanced-service-base.ts"],
  "sourcesContent": ["import { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerImage, DeploymentController, DeploymentCircuitBreaker,\n  ICluster, LogDriver, PropagatedTagSource, Secret,\n} from '../../../aws-ecs';\nimport { INetworkLoadBalancer, NetworkListener, NetworkLoadBalancer, NetworkTargetGroup } from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, CnameRecord, IHostedZone, RecordTarget } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\n\n                                                                     \nexport enum NetworkLoadBalancedServiceRecordType {\n                                              \n  ALIAS,\n                                      \n  CNAME,\n                                              \n  NONE\n}\n\n                                                                                                                  \nexport interface NetworkLoadBalancedServiceBaseProps {\n                                                                                                                                                                                                                                                                                                          \n  readonly cluster?: ICluster;\n\n                                                                                                                                                                                                                                                                                                                                        \n  readonly vpc?: IVpc;\n\n                                                                                                                                                                \n  readonly taskImageOptions?: NetworkLoadBalancedTaskImageOptions;\n\n                                                                                                      \n  readonly publicLoadBalancer?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly desiredCount?: number;\n\n                                                                                                              \n  readonly domainName?: string;\n\n                                                                                                                                \n  readonly domainZone?: IHostedZone;\n\n                                                                                             \n  readonly serviceName?: string;\n\n                                                                                                                                                                                                                                                                                                       \n  readonly healthCheckGracePeriod?: cdk.Duration;\n\n                                                                                                                                                                                                                                  \n  readonly maxHealthyPercent?: number;\n\n                                                                                                                                                                                                                                                  \n  readonly minHealthyPercent?: number;\n\n                                                                                                                                                                                                                                                                                                                                    \n  readonly loadBalancer?: INetworkLoadBalancer;\n\n                                                                                                                         \n  readonly listenerPort?: number;\n\n                                                                                                                                                                                                                                                 \n  readonly propagateTags?: PropagatedTagSource;\n\n                                                                                                                                                                                                                                                                                   \n  readonly enableECSManagedTags?: boolean;\n\n                                                                                                                                                                 \n  readonly cloudMapOptions?: CloudMapOptions;\n\n                                                                                                                                                                                                                                                                                           \n  readonly recordType?: NetworkLoadBalancedServiceRecordType;\n\n                                                                                                                                                                                                                                                              \n  readonly deploymentController?: DeploymentController;\n\n                                                                                                                                                                         \n  readonly circuitBreaker?: DeploymentCircuitBreaker;\n}\n\nexport interface NetworkLoadBalancedTaskImageOptions {\n                                                                                                                                        \n  readonly image: ContainerImage;\n\n                                                                                                                   \n  readonly environment?: { [key: string]: string };\n\n                                                                                                                                        \n  readonly secrets?: { [key: string]: Secret };\n\n                                                                                    \n  readonly enableLogging?: boolean;\n\n                                                                                                  \n  readonly logDriver?: LogDriver;\n\n                                                                                                                                                                             \n  readonly executionRole?: IRole;\n\n                                                                                                                                                                                                \n  readonly taskRole?: IRole;\n\n                                                                                                           \n  readonly containerName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  readonly containerPort?: number;\n\n                                                                                                                                                                                            \n  readonly family?: string;\n\n                                                                                                   \n  readonly dockerLabels?: { [key: string]: string };\n}\n\n                                                                                                           \nexport abstract class NetworkLoadBalancedServiceBase extends Construct {\n                                                                                                                                                                   \n  public readonly desiredCount: number;\n\n                                                                                                                                                                                                                                                                    \n  public readonly internalDesiredCount?: number;\n\n                                                           \n  public get loadBalancer(): NetworkLoadBalancer {\n    if (!this._networkLoadBalancer) {\n      throw new Error('.loadBalancer can only be accessed if the class was constructed with an owned, not imported, load balancer');\n    }\n    return this._networkLoadBalancer;\n  }\n\n                                              \n  public readonly listener: NetworkListener;\n\n                                                  \n  public readonly targetGroup: NetworkTargetGroup;\n\n                                                    \n  public readonly cluster: ICluster;\n\n  private readonly _networkLoadBalancer?: NetworkLoadBalancer;\n                                                                                       \n  constructor(scope: Construct, id: string, props: NetworkLoadBalancedServiceBaseProps = {}) {\n    super(scope, id);\n\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    if (props.desiredCount !== undefined && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    const internetFacing = props.publicLoadBalancer ?? true;\n\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      internetFacing,\n    };\n\n    const loadBalancer = props.loadBalancer ?? new NetworkLoadBalancer(this, 'LB', lbProps);\n    const listenerPort = props.listenerPort ?? 80;\n    const targetProps = {\n      port: props.taskImageOptions?.containerPort ?? 80,\n    };\n\n    this.listener = loadBalancer.addListener('PublicListener', { port: listenerPort });\n    this.targetGroup = this.listener.addTargets('ECS', targetProps);\n\n    if (typeof props.domainName !== 'undefined') {\n      if (typeof props.domainZone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      switch (props.recordType ?? NetworkLoadBalancedServiceRecordType.ALIAS) {\n        case NetworkLoadBalancedServiceRecordType.ALIAS:\n          new ARecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n          });\n          break;\n        case NetworkLoadBalancedServiceRecordType.CNAME:\n          new CnameRecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            domainName: loadBalancer.loadBalancerDnsName,\n          });\n          break;\n        case NetworkLoadBalancedServiceRecordType.NONE:\n          // Do not create a DNS record\n          break;\n      }\n    }\n\n    if (loadBalancer instanceof NetworkLoadBalancer) {\n      this._networkLoadBalancer = loadBalancer;\n    }\n\n    if (props.loadBalancer === undefined) {\n      new cdk.CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.loadBalancerDnsName });\n    }\n  }\n\n                                             \n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = cdk.Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n                                                              \n  protected addServiceAsTarget(service: BaseService) {\n    this.targetGroup.addTarget(service);\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "qRACA,UAAA,QAAA,oBAIA,6BAAA,QAAA,uCAEA,cAAA,QAAA,wBACA,sBAAA,QAAA,gCACA,IAAA,QAAA,iBACA,aAAA,QAAA,cAGA,GAAY,sCAAZ,AAAA,UAAY,sCAAoC,CAE9C,sCAAA,sCAAA,MAAA,GAAA,QAEA,sCAAA,sCAAA,MAAA,GAAA,QAEA,sCAAA,sCAAA,KAAA,GAAA,SANU,qCAAA,QAAA,sCAAA,SAAA,qCAAoC,KAyGhD,4CAA6D,cAAA,SAAS,CA0BpE,YAAY,MAAkB,GAAY,MAA6C,GAAE,uBACvF,MAAM,MAAO,IAEb,mGAAI,MAAM,SAAW,MAAM,IACzB,KAAM,IAAI,OAAM,uFAIlB,GAFA,KAAK,QAAU,MAAM,SAAW,KAAK,kBAAkB,KAAM,MAAM,KAE/D,MAAM,eAAiB,QAAa,MAAM,aAAe,EAC3D,KAAM,IAAI,OAAM,kDAGlB,KAAK,aAAe,MAAM,cAAgB,EAC1C,KAAK,qBAAuB,MAAM,aAElC,KAAM,gBAAc,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,GAE7C,QAAU,CACd,IAAK,KAAK,QAAQ,IAClB,gBAGI,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,GAAI,8BAAA,oBAAoB,KAAM,KAAM,SACzE,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,GACrC,YAAc,CAClB,KAAI,IAAA,IAAE,MAAM,oBAAgB,MAAA,KAAA,OAAA,OAAA,GAAE,iBAAa,MAAA,KAAA,OAAA,GAAI,IAMjD,GAHA,KAAK,SAAW,aAAa,YAAY,iBAAkB,CAAE,KAAM,eACnE,KAAK,YAAc,KAAK,SAAS,WAAW,MAAO,aAE/C,MAAO,OAAM,YAAe,YAAa,CAC3C,GAAI,MAAO,OAAM,YAAe,YAC9B,KAAM,IAAI,OAAM,wFAGlB,OAAA,IAAQ,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,qCAAqC,WAC1D,sCAAqC,MACxC,GAAI,eAAA,QAAQ,KAAM,MAAO,CACvB,KAAM,MAAM,WACZ,WAAY,MAAM,WAClB,OAAQ,cAAA,aAAa,UAAU,GAAI,uBAAA,mBAAmB,iBAExD,UACG,sCAAqC,MACxC,GAAI,eAAA,YAAY,KAAM,MAAO,CAC3B,KAAM,MAAM,WACZ,WAAY,MAAM,WAClB,WAAY,aAAa,sBAE3B,UACG,sCAAqC,KAExC,OAIN,AAAI,uBAAwB,8BAAA,qBAC1B,MAAK,qBAAuB,cAG1B,MAAM,eAAiB,QACzB,GAAI,KAAI,UAAU,KAAM,kBAAmB,CAAE,MAAO,KAAK,aAAa,yBAhF/D,eAAY,CACrB,GAAI,CAAC,KAAK,qBACR,KAAM,IAAI,OAAM,8GAElB,MAAO,MAAK,qBAiFJ,kBAAkB,MAAkB,IAAU,uDAEtD,KAAM,oBAAqB,6BAA6B,IAAM,IAAI,KAAK,GAAK,KACtE,MAAQ,IAAI,MAAM,GAAG,OAC3B,MAAO,OAAM,KAAK,aAAa,qBAAkC,GAAI,WAAA,QAAQ,MAAO,mBAAoB,CAAE,MAIlG,mBAAmB,QAAoB,kEAC/C,KAAK,YAAY,UAAU,SAGnB,mBAAmB,OAAc,CACzC,MAAO,IAAI,WAAA,aAAa,CAAE,aAAc,UA1G5C,QAAA,+BAAA",
  "names": []
}
