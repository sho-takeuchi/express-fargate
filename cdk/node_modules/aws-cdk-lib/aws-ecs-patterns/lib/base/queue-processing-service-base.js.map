{
  "version": 3,
  "sources": ["queue-processing-service-base.ts"],
  "sourcesContent": ["import { ScalingInterval } from '../../../aws-applicationautoscaling';\nimport { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CapacityProviderStrategy, Cluster, ContainerImage, DeploymentController, DeploymentCircuitBreaker,\n  ICluster, LogDriver, PropagatedTagSource, Secret,\n} from '../../../aws-ecs';\nimport { IQueue, Queue } from '../../../aws-sqs';\nimport { CfnOutput, Duration, FeatureFlags, Stack } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\n\n                                                                                                          \nexport interface QueueProcessingServiceBaseProps {\n                                                                                             \n  readonly serviceName?: string;\n\n                                                                                                                                                                                                                                                                                                          \n  readonly cluster?: ICluster;\n\n                                                                                                                                                                                                                                                                                                                                        \n  readonly vpc?: IVpc;\n\n                                                     \n  readonly image: ContainerImage;\n\n                                                                                                                                                                                                                               \n  readonly command?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  readonly desiredTaskCount?: number;\n\n                                                                                    \n  readonly enableLogging?: boolean;\n\n                                                                                                                                                                                                                  \n  readonly environment?: { [key: string]: string };\n\n                                                                                                                                        \n  readonly secrets?: { [key: string]: Secret };\n\n                                                                                                                                                                                                                                                                                                                                             \n  readonly queue?: IQueue;\n\n                                                                                                                                                                                                                              \n  readonly maxReceiveCount?: number;\n\n                                                                                                                                                                                                                                                                                                                        \n  readonly visibilityTimeout?: Duration;\n\n                                                                                                                     \n  readonly retentionPeriod?: Duration;\n\n                                                                                                                                                                                                     \n  readonly maxScalingCapacity?: number\n\n                                                                                                                                                                                                   \n  readonly minScalingCapacity?: number\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly scalingSteps?: ScalingInterval[];\n\n                                                                                                  \n  readonly logDriver?: LogDriver;\n\n                                                                                                                                                                                                                                                 \n  readonly propagateTags?: PropagatedTagSource;\n\n                                                                                                                                                                                                                                                                                   \n  readonly enableECSManagedTags?: boolean;\n\n                                                                                                                                                                                           \n  readonly family?: string;\n\n                                                                                                                                                                                                                                      \n  readonly maxHealthyPercent?: number;\n\n                                                                                                                                                                                                                                                         \n  readonly minHealthyPercent?: number;\n\n                                                                                                                                                                                                                                                                        \n  readonly deploymentController?: DeploymentController;\n\n                                                                                                                                                                         \n  readonly circuitBreaker?: DeploymentCircuitBreaker;\n\n                                                                                                                    \n  readonly capacityProviderStrategies?: CapacityProviderStrategy[];\n}\n\n                                                                                                   \nexport abstract class QueueProcessingServiceBase extends Construct {\n                                                                 \n  public readonly sqsQueue: IQueue;\n\n                                                                \n  public readonly deadLetterQueue?: IQueue;\n\n                                                                \n  public readonly cluster: ICluster;\n\n  // Properties that have defaults defined. The Queue Processing Service will handle assigning undefined properties with default\n  // values so that derived classes do not need to maintain the same logic.\n\n                                                                       \n  public readonly environment: { [key: string]: string };\n\n                                                  \n  public readonly secrets?: { [key: string]: Secret };\n\n                                                                                                  \n  public readonly desiredCount: number;\n\n                                                                                \n  public readonly maxCapacity: number;\n\n                                                                                  \n  public readonly minCapacity: number;\n\n                                                                                  \n  public readonly scalingSteps: ScalingInterval[];\n                                                                           \n  public readonly logDriver?: LogDriver;\n\n                                                                                   \n  constructor(scope: Construct, id: string, props: QueueProcessingServiceBaseProps) {\n    super(scope, id);\n\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    // Create the SQS queue and it's corresponding DLQ if one is not provided\n    if (props.queue) {\n      this.sqsQueue = props.queue;\n    } else {\n      this.deadLetterQueue = new Queue(this, 'EcsProcessingDeadLetterQueue', {\n        retentionPeriod: props.retentionPeriod || Duration.days(14),\n      });\n      this.sqsQueue = new Queue(this, 'EcsProcessingQueue', {\n        visibilityTimeout: props.visibilityTimeout,\n        deadLetterQueue: {\n          queue: this.deadLetterQueue,\n          maxReceiveCount: props.maxReceiveCount || 3,\n        },\n      });\n\n      new CfnOutput(this, 'SQSDeadLetterQueue', { value: this.deadLetterQueue.queueName });\n      new CfnOutput(this, 'SQSDeadLetterQueueArn', { value: this.deadLetterQueue.queueArn });\n    }\n\n    // Setup autoscaling scaling intervals\n    const defaultScalingSteps = [{ upper: 0, change: -1 }, { lower: 100, change: +1 }, { lower: 500, change: +5 }];\n    this.scalingSteps = props.scalingSteps ?? defaultScalingSteps;\n\n    // Create log driver if logging is enabled\n    const enableLogging = props.enableLogging ?? true;\n    this.logDriver = props.logDriver ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n\n    // Add the queue name to environment variables\n    this.environment = { ...(props.environment || {}), QUEUE_NAME: this.sqsQueue.queueName };\n    this.secrets = props.secrets;\n\n    this.desiredCount = props.desiredTaskCount ?? 1;\n\n    // Determine the desired task count (minimum) and maximum scaling capacity\n    if (!FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT)) {\n      this.minCapacity = props.minScalingCapacity ?? this.desiredCount;\n      this.maxCapacity = props.maxScalingCapacity || (2 * this.desiredCount);\n    } else {\n      if (props.desiredTaskCount != null) {\n        this.minCapacity = props.minScalingCapacity ?? this.desiredCount;\n        this.maxCapacity = props.maxScalingCapacity || (2 * this.desiredCount);\n      } else {\n        this.minCapacity = props.minScalingCapacity ?? 1;\n        this.maxCapacity = props.maxScalingCapacity || 2;\n      }\n    }\n\n    if (!this.desiredCount && !this.maxCapacity) {\n      throw new Error('maxScalingCapacity must be set and greater than 0 if desiredCount is 0');\n    }\n\n    new CfnOutput(this, 'SQSQueue', { value: this.sqsQueue.queueName });\n    new CfnOutput(this, 'SQSQueueArn', { value: this.sqsQueue.queueArn });\n  }\n\n                                                                                                                                                                                                                           \n  protected configureAutoscalingForService(service: BaseService) {\n    const scalingTarget = service.autoScaleTaskCount({ maxCapacity: this.maxCapacity, minCapacity: this.minCapacity });\n    scalingTarget.scaleOnCpuUtilization('CpuScaling', {\n      targetUtilizationPercent: 50,\n    });\n    scalingTarget.scaleOnMetric('QueueMessagesVisibleScaling', {\n      metric: this.sqsQueue.metricApproximateNumberOfMessagesVisible(),\n      scalingSteps: this.scalingSteps,\n    });\n  }\n\n                                                                                                                                       \n  protected grantPermissionsToService(service: BaseService) {\n    this.sqsQueue.grantConsumeMessages(service.taskDefinition.taskRole);\n  }\n\n                                             \n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  /**\n   * Create an AWS Log Driver with the provided streamPrefix\n   *\n   * @param prefix the Cloudwatch logging prefix\n   */\n  private createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "oOAEA,UAAA,QAAA,oBAIA,UAAA,QAAA,oBACA,OAAA,QAAA,iBACA,MAAA,QAAA,mBACA,aAAA,QAAA,cAiFA,wCAAyD,cAAA,SAAS,CAkChE,YAAY,MAAkB,GAAY,MAAsC,0BAC9E,MAAM,MAAO,IAEb,+FAAI,MAAM,SAAW,MAAM,IACzB,KAAM,IAAI,OAAM,uFAElB,KAAK,QAAU,MAAM,SAAW,KAAK,kBAAkB,KAAM,MAAM,KAGnE,AAAI,MAAM,MACR,KAAK,SAAW,MAAM,MAEtB,MAAK,gBAAkB,GAAI,WAAA,MAAM,KAAM,+BAAgC,CACrE,gBAAiB,MAAM,iBAAmB,OAAA,SAAS,KAAK,MAE1D,KAAK,SAAW,GAAI,WAAA,MAAM,KAAM,qBAAsB,CACpD,kBAAmB,MAAM,kBACzB,gBAAiB,CACf,MAAO,KAAK,gBACZ,gBAAiB,MAAM,iBAAmB,KAI9C,GAAI,QAAA,UAAU,KAAM,qBAAsB,CAAE,MAAO,KAAK,gBAAgB,YACxE,GAAI,QAAA,UAAU,KAAM,wBAAyB,CAAE,MAAO,KAAK,gBAAgB,YAI7E,KAAM,qBAAsB,CAAC,CAAE,MAAO,EAAG,OAAQ,IAAM,CAAE,MAAO,IAAK,OAAQ,GAAM,CAAE,MAAO,IAAK,OAAQ,IACzG,KAAK,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,oBAG1C,KAAM,eAAa,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,GAuB7C,GAtBA,KAAK,UAAS,IAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAK,cAAgB,KAAK,mBAAmB,KAAK,KAAK,IAAM,OAG7F,KAAK,YAAc,IAAM,MAAM,aAAe,GAAK,WAAY,KAAK,SAAS,WAC7E,KAAK,QAAU,MAAM,QAErB,KAAK,aAAY,IAAG,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,EAG9C,AAAK,OAAA,aAAa,GAAG,MAAM,UAAU,MAAM,kCAIzC,AAAI,MAAM,kBAAoB,KAC5B,MAAK,YAAW,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,KAAK,aACpD,KAAK,YAAc,MAAM,oBAAuB,EAAI,KAAK,cAEzD,MAAK,YAAW,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,EAC/C,KAAK,YAAc,MAAM,oBAAsB,GARjD,MAAK,YAAW,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,KAAK,aACpD,KAAK,YAAc,MAAM,oBAAuB,EAAI,KAAK,cAWvD,CAAC,KAAK,cAAgB,CAAC,KAAK,YAC9B,KAAM,IAAI,OAAM,0EAGlB,GAAI,QAAA,UAAU,KAAM,WAAY,CAAE,MAAO,KAAK,SAAS,YACvD,GAAI,QAAA,UAAU,KAAM,cAAe,CAAE,MAAO,KAAK,SAAS,WAIlD,+BAA+B,QAAoB,kEAC3D,KAAM,eAAgB,QAAQ,mBAAmB,CAAE,YAAa,KAAK,YAAa,YAAa,KAAK,cACpG,cAAc,sBAAsB,aAAc,CAChD,yBAA0B,KAE5B,cAAc,cAAc,8BAA+B,CACzD,OAAQ,KAAK,SAAS,2CACtB,aAAc,KAAK,eAKb,0BAA0B,QAAoB,kEACtD,KAAK,SAAS,qBAAqB,QAAQ,eAAe,UAIlD,kBAAkB,MAAkB,IAAU,uDAEtD,KAAM,oBAAqB,6BAA6B,IAAM,IAAI,KAAK,GAAK,KACtE,MAAQ,OAAA,MAAM,GAAG,OACvB,MAAO,OAAM,KAAK,aAAa,qBAAkC,GAAI,WAAA,QAAQ,MAAO,mBAAoB,CAAE,MAQpG,mBAAmB,OAAc,CACvC,MAAO,IAAI,WAAA,aAAa,CAAE,aAAc,UAhI5C,QAAA,2BAAA",
  "names": []
}
