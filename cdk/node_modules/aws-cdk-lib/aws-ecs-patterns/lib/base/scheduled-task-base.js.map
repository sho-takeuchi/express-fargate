{
  "version": 3,
  "sources": ["scheduled-task-base.ts"],
  "sourcesContent": ["import { Schedule } from '../../../aws-applicationautoscaling';\nimport { ISecurityGroup, IVpc, SubnetSelection, SubnetType } from '../../../aws-ec2';\nimport { AwsLogDriver, Cluster, ContainerImage, ICluster, LogDriver, Secret, TaskDefinition } from '../../../aws-ecs';\nimport { Rule } from '../../../aws-events';\nimport { EcsTask } from '../../../aws-events-targets';\nimport { Stack } from '../../../core';\nimport { Construct } from 'constructs';\n\n                                                                                     \nexport interface ScheduledTaskBaseProps {\n                                                                                                                                                                                                                                                                                                          \n  readonly cluster?: ICluster;\n\n                                                                                                                                                                                                                                                                                                                                        \n  readonly vpc?: IVpc;\n\n                                                                                                                                                                                                                                                                                                             \n  readonly schedule: Schedule;\n\n                                                                               \n  readonly enabled?: boolean;\n\n                                                                                                                                                                                                                                                                                     \n  readonly ruleName?: string;\n\n                                                                                                                                 \n  readonly desiredTaskCount?: number;\n\n                                                                                                                                                                                       \n  readonly subnetSelection?: SubnetSelection;\n\n                                                                                                                             \n  readonly securityGroups?: ISecurityGroup[]\n}\n\nexport interface ScheduledTaskImageProps {\n                                                                                                                                        \n  readonly image: ContainerImage;\n\n                                                                                                                                                                                                                               \n  readonly command?: string[];\n\n                                                                                            \n  readonly environment?: { [key: string]: string };\n\n                                                                                                                                        \n  readonly secrets?: { [key: string]: Secret };\n\n                                                                                                  \n  readonly logDriver?: LogDriver;\n}\n\n                                                                              \nexport abstract class ScheduledTaskBase extends Construct {\n                                                                \n  public readonly cluster: ICluster;\n                                                                                                                                             \n  public readonly desiredTaskCount: number;\n\n                                                                                                                                                                                       \n  public readonly subnetSelection: SubnetSelection;\n\n                                                            \n  public readonly eventRule: Rule;\n\n  /**\n   * The security group to use for the ECS Task.\n   */\n  private readonly _securityGroups?: ISecurityGroup[];\n\n                                                                          \n  constructor(scope: Construct, id: string, props: ScheduledTaskBaseProps) {\n    super(scope, id);\n\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n    if (props.desiredTaskCount !== undefined && props.desiredTaskCount < 1) {\n      throw new Error('You must specify a desiredTaskCount greater than 0');\n    }\n    this.desiredTaskCount = props.desiredTaskCount || 1;\n    this.subnetSelection = props.subnetSelection || { subnetType: SubnetType.PRIVATE };\n    this._securityGroups = props.securityGroups;\n\n    // An EventRule that describes the event trigger (in this case a scheduled run)\n    this.eventRule = new Rule(this, 'ScheduledEventRule', {\n      schedule: props.schedule,\n      ruleName: props.ruleName,\n      enabled: props.enabled,\n    });\n  }\n\n                                                                                                                                                                                          \n  protected addTaskDefinitionToEventTarget(taskDefinition: TaskDefinition): EcsTask {\n    // Use the EcsTask as the target of the EventRule\n    const eventRuleTarget = new EcsTask( {\n      cluster: this.cluster,\n      taskDefinition,\n      taskCount: this.desiredTaskCount,\n      subnetSelection: this.subnetSelection,\n      securityGroups: this._securityGroups,\n    });\n\n    this.addTaskAsTarget(eventRuleTarget);\n\n    return eventRuleTarget;\n  }\n\n                                                                                                                                       \n  protected addTaskAsTarget(ecsTaskTarget: EcsTask) {\n    this.eventRule.addTarget(ecsTaskTarget);\n  }\n\n                                             \n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n                                                                                                                              \n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "2NACA,UAAA,QAAA,oBACA,UAAA,QAAA,oBACA,aAAA,QAAA,uBACA,qBAAA,QAAA,+BACA,OAAA,QAAA,iBACA,aAAA,QAAA,cA+CA,+BAAgD,cAAA,SAAS,CAkBvD,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,IAGb,sFADA,KAAK,QAAU,MAAM,SAAW,KAAK,kBAAkB,KAAM,MAAM,KAC/D,MAAM,mBAAqB,QAAa,MAAM,iBAAmB,EACnE,KAAM,IAAI,OAAM,sDAElB,KAAK,iBAAmB,MAAM,kBAAoB,EAClD,KAAK,gBAAkB,MAAM,iBAAmB,CAAE,WAAY,UAAA,WAAW,SACzE,KAAK,gBAAkB,MAAM,eAG7B,KAAK,UAAY,GAAI,cAAA,KAAK,KAAM,qBAAsB,CACpD,SAAU,MAAM,SAChB,SAAU,MAAM,SAChB,QAAS,MAAM,UAKT,+BAA+B,eAA8B,4EAErE,KAAM,iBAAkB,GAAI,sBAAA,QAAS,CACnC,QAAS,KAAK,QACd,eACA,UAAW,KAAK,iBAChB,gBAAiB,KAAK,gBACtB,eAAgB,KAAK,kBAGvB,YAAK,gBAAgB,iBAEd,gBAIC,gBAAgB,cAAsB,+EAC9C,KAAK,UAAU,UAAU,eAIjB,kBAAkB,MAAkB,IAAU,uDAEtD,KAAM,oBAAqB,6BAA6B,IAAM,IAAI,KAAK,GAAK,KACtE,MAAQ,OAAA,MAAM,GAAG,OACvB,MAAO,OAAM,KAAK,aAAa,qBAAkC,GAAI,WAAA,QAAQ,MAAO,mBAAoB,CAAE,MAIlG,mBAAmB,OAAc,CACzC,MAAO,IAAI,WAAA,aAAa,CAAE,aAAc,UApE5C,QAAA,kBAAA",
  "names": []
}
