{
  "version": 3,
  "sources": ["queue-processing-ecs-service.ts"],
  "sourcesContent": ["import { Ec2Service, Ec2TaskDefinition } from '../../../aws-ecs';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { QueueProcessingServiceBase, QueueProcessingServiceBaseProps } from '../base/queue-processing-service-base';\n\n                                                                    \nexport interface QueueProcessingEc2ServiceProps extends QueueProcessingServiceBaseProps {\nn  readonly cpu?: number;\n\n                                                                                                                                                                                                                                                                                                                                    \n  readonly memoryLimitMiB?: number;\n\nn  readonly memoryReservationMiB?: number;\n\n                                                                                                                                                    \n  readonly gpuCount?: number;\n\n                                                                                                    \n  readonly containerName?: string;\n}\n\n                                                          \nexport class QueueProcessingEc2Service extends QueueProcessingServiceBase {\n\n                                                   \n  public readonly service: Ec2Service;\n                                                          \n  public readonly taskDefinition: Ec2TaskDefinition;\n\n                                                                                  \n  constructor(scope: Construct, id: string, props: QueueProcessingEc2ServiceProps) {\n    super(scope, id, props);\n\n    const containerName = props.containerName ?? 'QueueProcessingContainer';\n\n    // Create a Task Definition for the container to start\n    this.taskDefinition = new Ec2TaskDefinition(this, 'QueueProcessingTaskDef', {\n      family: props.family,\n    });\n    this.taskDefinition.addContainer(containerName, {\n      image: props.image,\n      memoryLimitMiB: props.memoryLimitMiB,\n      memoryReservationMiB: props.memoryReservationMiB,\n      cpu: props.cpu,\n      gpuCount: props.gpuCount,\n      command: props.command,\n      environment: this.environment,\n      secrets: this.secrets,\n      logging: this.logDriver,\n    });\n\n    // The desiredCount should be removed from the fargate service when the feature flag is removed.\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? undefined : this.desiredCount;\n\n    // Create an ECS service with the previously defined Task Definition and configure\n    // autoscaling based on cpu utilization and number of messages visible in the SQS queue.\n    this.service = new Ec2Service(this, 'QueueProcessingService', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      serviceName: props.serviceName,\n      minHealthyPercent: props.minHealthyPercent,\n      maxHealthyPercent: props.maxHealthyPercent,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      deploymentController: props.deploymentController,\n      circuitBreaker: props.circuitBreaker,\n      capacityProviderStrategies: props.capacityProviderStrategies,\n    });\n\n    this.configureAutoscalingForService(this.service);\n    this.grantPermissionsToService(this.service);\n  }\n}\n"],
  "mappings": "mOAAA,UAAA,QAAA,oBACA,OAAA,QAAA,iBACA,MAAA,QAAA,mBAEA,gCAAA,QAAA,yCAqBA,uCAA+C,iCAAA,0BAA0B,CAQvE,YAAY,MAAkB,GAAY,MAAqC,QAC7E,MAAM,MAAO,GAAI,kGAEjB,KAAM,eAAa,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,2BAG7C,KAAK,eAAiB,GAAI,WAAA,kBAAkB,KAAM,yBAA0B,CAC1E,OAAQ,MAAM,SAEhB,KAAK,eAAe,aAAa,cAAe,CAC9C,MAAO,MAAM,MACb,eAAgB,MAAM,eACtB,qBAAsB,MAAM,qBAC5B,IAAK,MAAM,IACX,SAAU,MAAM,SAChB,QAAS,MAAM,QACf,YAAa,KAAK,YAClB,QAAS,KAAK,QACd,QAAS,KAAK,YAIhB,KAAM,cAAe,OAAA,aAAa,GAAG,MAAM,UAAU,MAAM,kCAAoC,OAAY,KAAK,aAIhH,KAAK,QAAU,GAAI,WAAA,WAAW,KAAM,yBAA0B,CAC5D,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,kBAAmB,MAAM,kBACzB,kBAAmB,MAAM,kBACzB,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,qBAAsB,MAAM,qBAC5B,eAAgB,MAAM,eACtB,2BAA4B,MAAM,6BAGpC,KAAK,+BAA+B,KAAK,SACzC,KAAK,0BAA0B,KAAK,UAjDxC,QAAA,0BAAA",
  "names": []
}
