{
  "version": 3,
  "sources": ["network-load-balanced-fargate-service.ts"],
  "sourcesContent": ["import { SubnetSelection } from '../../../aws-ec2';\nimport { FargatePlatformVersion, FargateService, FargateTaskDefinition } from '../../../aws-ecs';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { NetworkLoadBalancedServiceBase, NetworkLoadBalancedServiceBaseProps } from '../base/network-load-balanced-service-base';\n\n                                                                            \nexport interface NetworkLoadBalancedFargateServiceProps extends NetworkLoadBalancedServiceBaseProps {\n                                                                                                                                                                                                                 \n  readonly taskDefinition?: FargateTaskDefinition;\n\nn  readonly cpu?: number;\n\nn  readonly memoryLimitMiB?: number;\n\n                                                                                                              \n  readonly assignPublicIp?: boolean;\n\n                                                                                                                                                                                                          \n  readonly taskSubnets?: SubnetSelection;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly platformVersion?: FargatePlatformVersion;\n}\n\n                                                                                          \nexport class NetworkLoadBalancedFargateService extends NetworkLoadBalancedServiceBase {\n\n  public readonly assignPublicIp: boolean;\n                                                       \n  public readonly service: FargateService;\n                                                               \n  public readonly taskDefinition: FargateTaskDefinition;\n\n                                                                                          \n  constructor(scope: Construct, id: string, props: NetworkLoadBalancedFargateServiceProps = {}) {\n    super(scope, id, props);\n\n    this.assignPublicIp = props.assignPublicIp ?? false;\n\n    if (props.taskDefinition && props.taskImageOptions) {\n      throw new Error('You must specify either a taskDefinition or an image, not both.');\n    } else if (props.taskDefinition) {\n      this.taskDefinition = props.taskDefinition;\n    } else if (props.taskImageOptions) {\n      const taskImageOptions = props.taskImageOptions;\n      this.taskDefinition = new FargateTaskDefinition(this, 'TaskDef', {\n        memoryLimitMiB: props.memoryLimitMiB,\n        cpu: props.cpu,\n        executionRole: taskImageOptions.executionRole,\n        taskRole: taskImageOptions.taskRole,\n        family: taskImageOptions.family,\n      });\n\n      // Create log driver if logging is enabled\n      const enableLogging = taskImageOptions.enableLogging ?? true;\n      const logDriver = taskImageOptions.logDriver ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n\n      const containerName = taskImageOptions.containerName ?? 'web';\n      const container = this.taskDefinition.addContainer(containerName, {\n        image: taskImageOptions.image,\n        logging: logDriver,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        dockerLabels: taskImageOptions.dockerLabels,\n      });\n      container.addPortMappings({\n        containerPort: taskImageOptions.containerPort || 80,\n      });\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? this.internalDesiredCount : this.desiredCount;\n\n    this.service = new FargateService(this, 'Service', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      assignPublicIp: this.assignPublicIp,\n      serviceName: props.serviceName,\n      healthCheckGracePeriod: props.healthCheckGracePeriod,\n      minHealthyPercent: props.minHealthyPercent,\n      maxHealthyPercent: props.maxHealthyPercent,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      cloudMapOptions: props.cloudMapOptions,\n      platformVersion: props.platformVersion,\n      deploymentController: props.deploymentController,\n      circuitBreaker: props.circuitBreaker,\n      vpcSubnets: props.taskSubnets,\n    });\n    this.addServiceAsTarget(this.service);\n  }\n}\n"],
  "mappings": "2OACA,UAAA,QAAA,oBACA,OAAA,QAAA,iBACA,MAAA,QAAA,mBAEA,qCAAA,QAAA,8CAwBA,+CAAuD,sCAAA,8BAA8B,CASnF,YAAY,MAAkB,GAAY,MAAgD,GAAE,iBAC1F,MAAM,MAAO,GAAI,OAIjB,sGAFA,KAAK,eAAc,IAAG,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,GAE1C,MAAM,gBAAkB,MAAM,iBAChC,KAAM,IAAI,OAAM,mEACX,GAAI,MAAM,eACf,KAAK,eAAiB,MAAM,uBACnB,MAAM,iBAAkB,CACjC,KAAM,kBAAmB,MAAM,iBAC/B,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,UAAW,CAC/D,eAAgB,MAAM,eACtB,IAAK,MAAM,IACX,cAAe,iBAAiB,cAChC,SAAU,iBAAiB,SAC3B,OAAQ,iBAAiB,SAI3B,KAAM,eAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,GAClD,UAAS,IAAG,iBAAiB,aAAS,MAAA,KAAA,OAAA,GAAK,cAAgB,KAAK,mBAAmB,KAAK,KAAK,IAAM,OAEnG,cAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,MAQxD,AAPkB,KAAK,eAAe,aAAa,cAAe,CAChE,MAAO,iBAAiB,MACxB,QAAS,UACT,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,aAAc,iBAAiB,eAEvB,gBAAgB,CACxB,cAAe,iBAAiB,eAAiB,SAGnD,MAAM,IAAI,OAAM,oDAGlB,KAAM,cAAe,OAAA,aAAa,GAAG,MAAM,UAAU,MAAM,kCAAoC,KAAK,qBAAuB,KAAK,aAEhI,KAAK,QAAU,GAAI,WAAA,eAAe,KAAM,UAAW,CACjD,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,uBAAwB,MAAM,uBAC9B,kBAAmB,MAAM,kBACzB,kBAAmB,MAAM,kBACzB,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,gBAAiB,MAAM,gBACvB,qBAAsB,MAAM,qBAC5B,eAAgB,MAAM,eACtB,WAAY,MAAM,cAEpB,KAAK,mBAAmB,KAAK,UAlEjC,QAAA,kCAAA",
  "names": []
}
