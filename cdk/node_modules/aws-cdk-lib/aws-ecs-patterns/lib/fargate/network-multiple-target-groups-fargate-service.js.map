{
  "version": 3,
  "sources": ["network-multiple-target-groups-fargate-service.ts"],
  "sourcesContent": ["import { FargatePlatformVersion, FargateService, FargateTaskDefinition } from '../../../aws-ecs';\nimport { NetworkTargetGroup } from '../../../aws-elasticloadbalancingv2';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport {\n  NetworkMultipleTargetGroupsServiceBase,\n  NetworkMultipleTargetGroupsServiceBaseProps,\n} from '../base/network-multiple-target-groups-service-base';\n\n                                                                                    \nexport interface NetworkMultipleTargetGroupsFargateServiceProps extends NetworkMultipleTargetGroupsServiceBaseProps {\n\n                                                                                                                                                                                                               \n  readonly taskDefinition?: FargateTaskDefinition;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly cpu?: number;\n\nn  readonly memoryLimitMiB?: number;\n\n                                                                                                              \n  readonly assignPublicIp?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly platformVersion?: FargatePlatformVersion;\n}\n\n                                                                                          \nexport class NetworkMultipleTargetGroupsFargateService extends NetworkMultipleTargetGroupsServiceBase {\n\n                                                                                     \n  public readonly assignPublicIp: boolean;\n\n                                                       \n  public readonly service: FargateService;\n\n                                                               \n  public readonly taskDefinition: FargateTaskDefinition;\n\n                                                          \n  public readonly targetGroup: NetworkTargetGroup;\n\n                                                                                                  \n  constructor(scope: Construct, id: string, props: NetworkMultipleTargetGroupsFargateServiceProps = {}) {\n    super(scope, id, props);\n\n    this.assignPublicIp = props.assignPublicIp ?? false;\n\n    if (props.taskDefinition && props.taskImageOptions) {\n      throw new Error('You must specify only one of TaskDefinition or TaskImageOptions.');\n    } else if (props.taskDefinition) {\n      this.taskDefinition = props.taskDefinition;\n    } else if (props.taskImageOptions) {\n      const taskImageOptions = props.taskImageOptions;\n      this.taskDefinition = new FargateTaskDefinition(this, 'TaskDef', {\n        memoryLimitMiB: props.memoryLimitMiB,\n        cpu: props.cpu,\n        executionRole: taskImageOptions.executionRole,\n        taskRole: taskImageOptions.taskRole,\n        family: taskImageOptions.family,\n      });\n\n      const containerName = taskImageOptions.containerName ?? 'web';\n      const container = this.taskDefinition.addContainer(containerName, {\n        image: taskImageOptions.image,\n        logging: this.logDriver,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        dockerLabels: taskImageOptions.dockerLabels,\n      });\n      if (taskImageOptions.containerPorts) {\n        for (const containerPort of taskImageOptions.containerPorts) {\n          container.addPortMappings({\n            containerPort,\n          });\n        }\n      }\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n    if (!this.taskDefinition.defaultContainer) {\n      throw new Error('At least one essential container must be specified');\n    }\n    if (this.taskDefinition.defaultContainer.portMappings.length === 0) {\n      this.taskDefinition.defaultContainer.addPortMappings({\n        containerPort: 80,\n      });\n    }\n\n    this.service = this.createFargateService(props);\n    if (props.targetGroups) {\n      this.addPortMappingForTargets(this.taskDefinition.defaultContainer, props.targetGroups);\n      this.targetGroup = this.registerECSTargets(this.service, this.taskDefinition.defaultContainer, props.targetGroups);\n    } else {\n      this.targetGroup = this.listener.addTargets('ECS', {\n        targets: [this.service],\n        port: this.taskDefinition.defaultContainer.portMappings[0].containerPort,\n      });\n    }\n  }\n\n  private createFargateService(props: NetworkMultipleTargetGroupsFargateServiceProps): FargateService {\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? this.internalDesiredCount : this.desiredCount;\n\n    return new FargateService(this, 'Service', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      assignPublicIp: this.assignPublicIp,\n      serviceName: props.serviceName,\n      healthCheckGracePeriod: props.healthCheckGracePeriod,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      cloudMapOptions: props.cloudMapOptions,\n      platformVersion: props.platformVersion,\n    });\n  }\n}\n"],
  "mappings": "mPAAA,UAAA,QAAA,oBAEA,OAAA,QAAA,iBACA,MAAA,QAAA,mBAEA,8CAAA,QAAA,uDAyBA,uDAA+D,+CAAA,sCAAsC,CAenG,YAAY,MAAkB,GAAY,MAAwD,GAAE,WAClG,MAAM,MAAO,GAAI,OAIjB,8GAFA,KAAK,eAAc,IAAG,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,GAE1C,MAAM,gBAAkB,MAAM,iBAChC,KAAM,IAAI,OAAM,oEACX,GAAI,MAAM,eACf,KAAK,eAAiB,MAAM,uBACnB,MAAM,iBAAkB,CACjC,KAAM,kBAAmB,MAAM,iBAC/B,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,UAAW,CAC/D,eAAgB,MAAM,eACtB,IAAK,MAAM,IACX,cAAe,iBAAiB,cAChC,SAAU,iBAAiB,SAC3B,OAAQ,iBAAiB,SAG3B,KAAM,eAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,MAClD,UAAY,KAAK,eAAe,aAAa,cAAe,CAChE,MAAO,iBAAiB,MACxB,QAAS,KAAK,UACd,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,aAAc,iBAAiB,eAEjC,GAAI,iBAAiB,eACnB,SAAW,iBAAiB,kBAAiB,eAC3C,UAAU,gBAAgB,CACxB,oBAKN,MAAM,IAAI,OAAM,oDAElB,GAAI,CAAC,KAAK,eAAe,iBACvB,KAAM,IAAI,OAAM,sDAElB,AAAI,KAAK,eAAe,iBAAiB,aAAa,SAAW,GAC/D,KAAK,eAAe,iBAAiB,gBAAgB,CACnD,cAAe,KAInB,KAAK,QAAU,KAAK,qBAAqB,OACzC,AAAI,MAAM,aACR,MAAK,yBAAyB,KAAK,eAAe,iBAAkB,MAAM,cAC1E,KAAK,YAAc,KAAK,mBAAmB,KAAK,QAAS,KAAK,eAAe,iBAAkB,MAAM,eAErG,KAAK,YAAc,KAAK,SAAS,WAAW,MAAO,CACjD,QAAS,CAAC,KAAK,SACf,KAAM,KAAK,eAAe,iBAAiB,aAAa,GAAG,gBAKzD,qBAAqB,MAAqD,CAChF,KAAM,cAAe,OAAA,aAAa,GAAG,MAAM,UAAU,MAAM,kCAAoC,KAAK,qBAAuB,KAAK,aAEhI,MAAO,IAAI,WAAA,eAAe,KAAM,UAAW,CACzC,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,uBAAwB,MAAM,uBAC9B,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,gBAAiB,MAAM,mBAtF7B,QAAA,0CAAA",
  "names": []
}
