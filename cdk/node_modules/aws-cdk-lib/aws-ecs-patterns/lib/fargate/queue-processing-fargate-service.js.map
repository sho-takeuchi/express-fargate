{
  "version": 3,
  "sources": ["queue-processing-fargate-service.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport { FargatePlatformVersion, FargateService, FargateTaskDefinition, HealthCheck } from '../../../aws-ecs';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { QueueProcessingServiceBase, QueueProcessingServiceBaseProps } from '../base/queue-processing-service-base';\n\n                                                                        \nexport interface QueueProcessingFargateServiceProps extends QueueProcessingServiceBaseProps {\nn  readonly cpu?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly memoryLimitMiB?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly platformVersion?: FargatePlatformVersion;\n\n                                                                                                    \n  readonly containerName?: string;\n\n                                                                                                                                                                    \n  readonly healthCheck?: HealthCheck;\n\n                                                                                                                                                                                                          \n  readonly taskSubnets?: ec2.SubnetSelection;\n\n                                                                                                                                                                                                  \n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n                                                                                                                                                                                             \n  readonly assignPublicIp?: boolean;\n}\n\n                                                             \nexport class QueueProcessingFargateService extends QueueProcessingServiceBase {\n                                                       \n  public readonly service: FargateService;\n                                                               \n  public readonly taskDefinition: FargateTaskDefinition;\n\n                                                                                      \n  constructor(scope: Construct, id: string, props: QueueProcessingFargateServiceProps) {\n    super(scope, id, props);\n\n    // Create a Task Definition for the container to start\n    this.taskDefinition = new FargateTaskDefinition(this, 'QueueProcessingTaskDef', {\n      memoryLimitMiB: props.memoryLimitMiB || 512,\n      cpu: props.cpu || 256,\n      family: props.family,\n    });\n\n    const containerName = props.containerName ?? 'QueueProcessingContainer';\n\n    this.taskDefinition.addContainer(containerName, {\n      image: props.image,\n      command: props.command,\n      environment: this.environment,\n      secrets: this.secrets,\n      logging: this.logDriver,\n      healthCheck: props.healthCheck,\n    });\n\n    // The desiredCount should be removed from the fargate service when the feature flag is removed.\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? undefined : this.desiredCount;\n\n    // Create a Fargate service with the previously defined Task Definition and configure\n    // autoscaling based on cpu utilization and number of messages visible in the SQS queue.\n    this.service = new FargateService(this, 'QueueProcessingFargateService', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      serviceName: props.serviceName,\n      minHealthyPercent: props.minHealthyPercent,\n      maxHealthyPercent: props.maxHealthyPercent,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      platformVersion: props.platformVersion,\n      deploymentController: props.deploymentController,\n      securityGroups: props.securityGroups,\n      vpcSubnets: props.taskSubnets,\n      assignPublicIp: props.assignPublicIp,\n      circuitBreaker: props.circuitBreaker,\n      capacityProviderStrategies: props.capacityProviderStrategies,\n    });\n\n    this.configureAutoscalingForService(this.service);\n    this.grantPermissionsToService(this.service);\n  }\n}\n"],
  "mappings": "uOACA,UAAA,QAAA,oBACA,OAAA,QAAA,iBACA,MAAA,QAAA,mBAEA,gCAAA,QAAA,yCA8BA,2CAAmD,iCAAA,0BAA0B,CAO3E,YAAY,MAAkB,GAAY,MAAyC,QACjF,MAAM,MAAO,GAAI,sGAGjB,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,yBAA0B,CAC9E,eAAgB,MAAM,gBAAkB,IACxC,IAAK,MAAM,KAAO,IAClB,OAAQ,MAAM,SAGhB,KAAM,eAAa,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,2BAE7C,KAAK,eAAe,aAAa,cAAe,CAC9C,MAAO,MAAM,MACb,QAAS,MAAM,QACf,YAAa,KAAK,YAClB,QAAS,KAAK,QACd,QAAS,KAAK,UACd,YAAa,MAAM,cAIrB,KAAM,cAAe,OAAA,aAAa,GAAG,MAAM,UAAU,MAAM,kCAAoC,OAAY,KAAK,aAIhH,KAAK,QAAU,GAAI,WAAA,eAAe,KAAM,gCAAiC,CACvE,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,kBAAmB,MAAM,kBACzB,kBAAmB,MAAM,kBACzB,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,qBAAsB,MAAM,qBAC5B,eAAgB,MAAM,eACtB,WAAY,MAAM,YAClB,eAAgB,MAAM,eACtB,eAAgB,MAAM,eACtB,2BAA4B,MAAM,6BAGpC,KAAK,+BAA+B,KAAK,SACzC,KAAK,0BAA0B,KAAK,UApDxC,QAAA,8BAAA",
  "names": []
}
