{
  "version": 3,
  "sources": ["amis.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as ssm from '../../aws-ssm';\n\n// v2 - keep this import as a separate section to reduce merge conflict when forward merging with the v2 branch.\n// eslint-disable-next-line\nimport { Construct } from 'constructs';\n\n                                                                                                                                                                                              \nexport enum AmiHardwareType {\n\n                                                           \n  STANDARD = 'Standard',\n\n                                                      \n  GPU = 'GPU',\n\n                                                                         \n  ARM = 'ARM64',\n}\n\n\n                                             \nexport enum WindowsOptimizedVersion {\n  SERVER_2019 = '2019',\n  SERVER_2016 = '2016',\n}\n\n                                                                            \n                                                                                                                      \nexport interface EcsOptimizedAmiProps {\n                                                                                                          \n  readonly generation?: ec2.AmazonLinuxGeneration;\n\n                                                                                                  \n  readonly windowsVersion?: WindowsOptimizedVersion;\n\n                                                                                                  \n  readonly hardwareType?: AmiHardwareType;\n\nn  readonly cachedInContext?: boolean;\n}\n\n                                            \n                                                                                                                                                                                                                                                 \nexport class EcsOptimizedAmi implements ec2.IMachineImage {\n  private readonly generation?: ec2.AmazonLinuxGeneration;\n  private readonly windowsVersion?: WindowsOptimizedVersion;\n  private readonly hwType: AmiHardwareType;\n\n  private readonly amiParameterName: string;\n  private readonly cachedInContext: boolean;\n\n                                                                        \n  constructor(props?: EcsOptimizedAmiProps) {\n    this.hwType = (props && props.hardwareType) || AmiHardwareType.STANDARD;\n    if (props && props.generation) { // generation defined in the props object\n      if (props.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX && this.hwType !== AmiHardwareType.STANDARD) {\n        throw new Error('Amazon Linux does not support special hardware type. Use Amazon Linux 2 instead');\n      } else if (props.windowsVersion) {\n        throw new Error('\"windowsVersion\" and Linux image \"generation\" cannot be both set');\n      } else {\n        this.generation = props.generation;\n      }\n    } else if (props && props.windowsVersion) {\n      if (this.hwType !== AmiHardwareType.STANDARD) {\n        throw new Error('Windows Server does not support special hardware type');\n      } else {\n        this.windowsVersion = props.windowsVersion;\n      }\n    } else { // generation not defined in props object\n      // always default to Amazon Linux v2 regardless of HW\n      this.generation = ec2.AmazonLinuxGeneration.AMAZON_LINUX_2;\n    }\n\n    // set the SSM parameter name\n    this.amiParameterName = '/aws/service/ecs/optimized-ami/'\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX ? 'amazon-linux/' : '')\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 ? 'amazon-linux-2/' : '')\n      + (this.windowsVersion ? `windows_server/${this.windowsVersion}/english/full/` : '')\n      + (this.hwType === AmiHardwareType.GPU ? 'gpu/' : '')\n      + (this.hwType === AmiHardwareType.ARM ? 'arm64/' : '')\n      + 'recommended/image_id';\n\n    this.cachedInContext = props?.cachedInContext ?? false;\n  }\n\n                                         \n  public getImage(scope: Construct): ec2.MachineImageConfig {\n    const ami = lookupImage(scope, this.cachedInContext, this.amiParameterName);\n\n    const osType = this.windowsVersion ? ec2.OperatingSystemType.WINDOWS : ec2.OperatingSystemType.LINUX;\n    return {\n      imageId: ami,\n      osType,\n      userData: ec2.UserData.forOperatingSystem(osType),\n    };\n  }\n}\n\n                                                                                      \nexport interface EcsOptimizedImageOptions {\nn  readonly cachedInContext?: boolean;\n}\n\n                                                                                                        \nexport class EcsOptimizedImage implements ec2.IMachineImage {\n                                                                                                                                                                    \n  public static amazonLinux2(hardwareType = AmiHardwareType.STANDARD, options: EcsOptimizedImageOptions = {}): EcsOptimizedImage {\n    return new EcsOptimizedImage({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n      hardwareType,\n      cachedInContext: options.cachedInContext,\n    });\n  }\n\n                                                                                                       \n  public static amazonLinux(options: EcsOptimizedImageOptions = {}): EcsOptimizedImage {\n    return new EcsOptimizedImage({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n      cachedInContext: options.cachedInContext,\n    });\n  }\n\n                                                                                                                                                    \n  public static windows(windowsVersion: WindowsOptimizedVersion, options: EcsOptimizedImageOptions = {}): EcsOptimizedImage {\n    return new EcsOptimizedImage({\n      windowsVersion,\n      cachedInContext: options.cachedInContext,\n    });\n  }\n\n  private readonly generation?: ec2.AmazonLinuxGeneration;\n  private readonly windowsVersion?: WindowsOptimizedVersion;\n  private readonly hwType?: AmiHardwareType;\n\n  private readonly amiParameterName: string;\n  private readonly cachedInContext: boolean;\n\n  /**\n   * Constructs a new instance of the EcsOptimizedAmi class.\n   */\n  private constructor(props: EcsOptimizedAmiProps) {\n    this.hwType = props && props.hardwareType;\n\n    if (props.windowsVersion) {\n      this.windowsVersion = props.windowsVersion;\n    } else if (props.generation) {\n      this.generation = props.generation;\n    } else {\n      throw new Error('This error should never be thrown');\n    }\n\n    // set the SSM parameter name\n    this.amiParameterName = '/aws/service/ecs/optimized-ami/'\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX ? 'amazon-linux/' : '')\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 ? 'amazon-linux-2/' : '')\n      + (this.windowsVersion ? `windows_server/${this.windowsVersion}/english/full/` : '')\n      + (this.hwType === AmiHardwareType.GPU ? 'gpu/' : '')\n      + (this.hwType === AmiHardwareType.ARM ? 'arm64/' : '')\n      + 'recommended/image_id';\n\n    this.cachedInContext = props?.cachedInContext ?? false;\n  }\n\n                                         \n  public getImage(scope: Construct): ec2.MachineImageConfig {\n    const ami = lookupImage(scope, this.cachedInContext, this.amiParameterName);\n\n    const osType = this.windowsVersion ? ec2.OperatingSystemType.WINDOWS : ec2.OperatingSystemType.LINUX;\n    return {\n      imageId: ami,\n      osType,\n      userData: ec2.UserData.forOperatingSystem(osType),\n    };\n  }\n}\n\n/**\n * Amazon ECS variant\n */\nexport enum BottlerocketEcsVariant {\n                                  \n  AWS_ECS_1 = 'aws-ecs-1'\n\n}\n\n                                           \nexport interface BottleRocketImageProps {\n                                                                                                                                                  \n  readonly variant?: BottlerocketEcsVariant;\n\n                                                                 \n  readonly architecture?: ec2.InstanceArchitecture;\n\nn  readonly cachedInContext?: boolean;\n}\n\n                                                                               \nexport class BottleRocketImage implements ec2.IMachineImage {\n  private readonly amiParameterName: string;\n  /**\n   * Amazon ECS variant for Bottlerocket AMI\n   */\n  private readonly variant: string;\n\n  /**\n   * Instance architecture\n   */\n  private readonly architecture: ec2.InstanceArchitecture;\n\n  private readonly cachedInContext: boolean;\n\n                                                                          \n  public constructor(props: BottleRocketImageProps = {}) {\n    this.variant = props.variant ?? BottlerocketEcsVariant.AWS_ECS_1;\n    this.architecture = props.architecture ?? ec2.InstanceArchitecture.X86_64;\n\n    // set the SSM parameter name\n    this.amiParameterName = `/aws/service/bottlerocket/${this.variant}/${this.architecture}/latest/image_id`;\n\n    this.cachedInContext = props.cachedInContext ?? false;\n  }\n\n                                         \n  public getImage(scope: Construct): ec2.MachineImageConfig {\n    const ami = lookupImage(scope, this.cachedInContext, this.amiParameterName);\n\n    return {\n      imageId: ami,\n      osType: ec2.OperatingSystemType.LINUX,\n      userData: ec2.UserData.custom(''),\n    };\n  }\n}\n\nfunction lookupImage(scope: Construct, cachedInContext: boolean | undefined, parameterName: string) {\n  return cachedInContext\n    ? ssm.StringParameter.valueFromLookup(scope, parameterName)\n    : ssm.StringParameter.valueForTypedStringParameter(scope, parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);\n}\n"],
  "mappings": "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",
  "names": []
}
