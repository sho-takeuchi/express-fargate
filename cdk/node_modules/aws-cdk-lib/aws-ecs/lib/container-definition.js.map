{
  "version": 3,
  "sources": ["container-definition.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport * as ssm from '../../aws-ssm';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { NetworkMode, TaskDefinition } from './base/task-definition';\nimport { ContainerImage, ContainerImageConfig } from './container-image';\nimport { CfnTaskDefinition } from './ecs.generated';\nimport { EnvironmentFile, EnvironmentFileConfig } from './environment-file';\nimport { LinuxParameters } from './linux-parameters';\nimport { LogDriver, LogDriverConfig } from './log-drivers/log-driver';\n\n                                         \nexport abstract class Secret {\n                                                                                                                           \n  public static fromSsmParameter(parameter: ssm.IParameter): Secret {\n    return {\n      arn: parameter.parameterArn,\n      grantRead: grantee => parameter.grantRead(grantee),\n    };\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  public static fromSecretsManager(secret: secretsmanager.ISecret, field?: string): Secret {\n    return {\n      arn: field ? `${secret.secretArn}:${field}::` : secret.secretArn,\n      hasField: !!field,\n      grantRead: grantee => secret.grantRead(grantee),\n    };\n  }\n\n                                      \n  public abstract readonly arn: string;\n\n                                                               \n  public abstract readonly hasField?: boolean;\n\n                                                         \n  public abstract grantRead(grantee: iam.IGrantable): iam.Grant;\n}\n\n                                                          \nexport interface ContainerDefinitionOptions {\n                                                                                                                                                                                                                                                                                                                                                                    \n  readonly image: ContainerImage;\n\n                                                                                                                \n  readonly containerName?: string;\n\n                                                                                                                                                                                                                               \n  readonly command?: string[];\n\n                                                                                                                                  \n  readonly cpu?: number;\n\n                                                                                                                                                                                            \n  readonly disableNetworking?: boolean;\n\n                                                                                                                          \n  readonly dnsSearchDomains?: string[];\n\n                                                                                                                     \n  readonly dnsServers?: string[];\n\n                                                                                                   \n  readonly dockerLabels?: { [key: string]: string };\n\n                                                                                                                                                           \n  readonly dockerSecurityOptions?: string[];\n\n                                                                                                                                                                                                     \n  readonly entryPoint?: string[];\n\n                                                                                                                   \n  readonly environment?: { [key: string]: string };\n\n                                                                                                                                                                                                            \n  readonly environmentFiles?: EnvironmentFile[];\n\n                                                                                                                                 \n  readonly secrets?: { [key: string]: Secret };\n\n                                                                                                                                         \n  readonly startTimeout?: cdk.Duration;\n\n                                                                                                                                                               \n  readonly stopTimeout?: cdk.Duration;\n\nn  readonly essential?: boolean;\n\n                                                                                                                                                    \n  readonly extraHosts?: { [name: string]: string };\n\n                                                                                                                                                                    \n  readonly healthCheck?: HealthCheck;\n\n                                                                                                 \n  readonly hostname?: string;\n\n                                                                                                                                                                                                                                                                                                                                \n  readonly memoryLimitMiB?: number;\n\nn  readonly memoryReservationMiB?: number;\n\n                                                                                                                                                                                                                                          \n  readonly privileged?: boolean;\n\n                                                                                                                                       \n  readonly readonlyRootFilesystem?: boolean;\n\n                                                                                   \n  readonly user?: string;\n\n                                                                                                          \n  readonly workingDirectory?: string;\n\n                                                                                                                                                                \n  readonly logging?: LogDriver;\n\n                                                                                                                                                                                                                                                                                                        \n  readonly linuxParameters?: LinuxParameters;\n\n                                                                                                     \n  readonly gpuCount?: number;\n\n                                                                                                           \n  readonly portMappings?: PortMapping[];\n\n                                                                                                                            \n  readonly inferenceAcceleratorResources?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n  readonly systemControls?: SystemControl[];\n}\n\n                                                    \nexport interface ContainerDefinitionProps extends ContainerDefinitionOptions {\n                                                                                                                                       \n  readonly taskDefinition: TaskDefinition;\n}\n\n                                                                                                                              \nexport class ContainerDefinition extends Construct {\n                                                                                                                       \n  public readonly linuxParameters?: LinuxParameters;\n\n                                                                     \n  public readonly mountPoints = new Array<MountPoint>();\n\n                                                                                                                                                                            \n  public readonly portMappings = new Array<PortMapping>();\n\n                                                                                              \n  public readonly volumesFrom = new Array<VolumeFrom>();\n\n                                                             \n  public readonly ulimits = new Array<Ulimit>();\n\n                                                                                  \n  public readonly containerDependencies = new Array<ContainerDependency>();\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  public readonly essential: boolean;\n\n                                           \n  public readonly containerName: string;\n\n                                                                                         \n  public readonly memoryLimitSpecified: boolean;\n\n                                                                                         \n  public readonly taskDefinition: TaskDefinition;\n\n                                                         \n  public readonly environmentFiles?: EnvironmentFileConfig[];\n\n                                                                       \n  public readonly logDriverConfig?: LogDriverConfig;\n\n                                                                                                                               \n  public readonly referencesSecretJsonField?: boolean;\n\n  /**\n   * The inference accelerators referenced by this container.\n   */\n  private readonly inferenceAcceleratorResources: string[] = [];\n\n  /**\n   * The configured container links\n   */\n  private readonly links = new Array<string>();\n\n  private readonly imageConfig: ContainerImageConfig;\n\n  private readonly secrets?: CfnTaskDefinition.SecretProperty[];\n\n  private readonly environment: { [key: string]: string };\n\n                                                                            \n  constructor(scope: Construct, id: string, private readonly props: ContainerDefinitionProps) {\n    super(scope, id);\n    if (props.memoryLimitMiB !== undefined && props.memoryReservationMiB !== undefined) {\n      if (props.memoryLimitMiB < props.memoryReservationMiB) {\n        throw new Error('MemoryLimitMiB should not be less than MemoryReservationMiB.');\n      }\n    }\n    this.essential = props.essential ?? true;\n    this.taskDefinition = props.taskDefinition;\n    this.memoryLimitSpecified = props.memoryLimitMiB !== undefined || props.memoryReservationMiB !== undefined;\n    this.linuxParameters = props.linuxParameters;\n    this.containerName = props.containerName ?? this.node.id;\n\n    this.imageConfig = props.image.bind(this, this);\n    if (props.logging) {\n      this.logDriverConfig = props.logging.bind(this, this);\n    }\n\n    if (props.secrets) {\n      this.secrets = [];\n      for (const [name, secret] of Object.entries(props.secrets)) {\n        if (secret.hasField) {\n          this.referencesSecretJsonField = true;\n        }\n        secret.grantRead(this.taskDefinition.obtainExecutionRole());\n        this.secrets.push({\n          name,\n          valueFrom: secret.arn,\n        });\n      }\n    }\n\n    if (props.environment) {\n      this.environment = { ...props.environment };\n    } else {\n      this.environment = {};\n    }\n\n    if (props.environmentFiles) {\n      this.environmentFiles = [];\n\n      for (const environmentFile of props.environmentFiles) {\n        this.environmentFiles.push(environmentFile.bind(this));\n      }\n    }\n\n    props.taskDefinition._linkContainer(this);\n\n    if (props.portMappings) {\n      this.addPortMappings(...props.portMappings);\n    }\n\n    if (props.inferenceAcceleratorResources) {\n      this.addInferenceAcceleratorResource(...props.inferenceAcceleratorResources);\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                                  \n  public addLink(container: ContainerDefinition, alias?: string) {\n    if (this.taskDefinition.networkMode !== NetworkMode.BRIDGE) {\n      throw new Error('You must use network mode Bridge to add container links.');\n    }\n    if (alias !== undefined) {\n      this.links.push(`${container.containerName}:${alias}`);\n    } else {\n      this.links.push(`${container.containerName}`);\n    }\n  }\n\n                                                                                             \n  public addMountPoints(...mountPoints: MountPoint[]) {\n    this.mountPoints.push(...mountPoints);\n  }\n\n                                                                                                                                                           \n  public addScratch(scratch: ScratchSpace) {\n    const mountPoint = {\n      containerPath: scratch.containerPath,\n      readOnly: scratch.readOnly,\n      sourceVolume: scratch.name,\n    };\n\n    const volume = {\n      host: {\n        sourcePath: scratch.sourcePath,\n      },\n      name: scratch.name,\n    };\n\n    this.taskDefinition.addVolume(volume);\n    this.addMountPoints(mountPoint);\n  }\n\n                                                                             \n  public addPortMappings(...portMappings: PortMapping[]) {\n    this.portMappings.push(...portMappings.map(pm => {\n      if (this.taskDefinition.networkMode === NetworkMode.AWS_VPC || this.taskDefinition.networkMode === NetworkMode.HOST) {\n        if (pm.containerPort !== pm.hostPort && pm.hostPort !== undefined) {\n          throw new Error(`Host port (${pm.hostPort}) must be left out or equal to container port ${pm.containerPort} for network mode ${this.taskDefinition.networkMode}`);\n        }\n      }\n\n      if (this.taskDefinition.networkMode === NetworkMode.BRIDGE) {\n        if (pm.hostPort === undefined) {\n          pm = {\n            ...pm,\n            hostPort: 0,\n          };\n        }\n      }\n\n      return pm;\n    }));\n  }\n\n                                                                           \n  public addEnvironment(name: string, value: string) {\n    this.environment[name] = value;\n  }\n\n                                                                         \n  public addInferenceAcceleratorResource(...inferenceAcceleratorResources: string[]) {\n    this.inferenceAcceleratorResources.push(...inferenceAcceleratorResources.map(resource => {\n      for (const inferenceAccelerator of this.taskDefinition.inferenceAccelerators) {\n        if (resource === inferenceAccelerator.deviceName) {\n          return resource;\n        }\n      }\n      throw new Error(`Resource value ${resource} in container definition doesn't match any inference accelerator device name in the task definition.`);\n    }));\n  }\n\n                                                                       \n  public addUlimits(...ulimits: Ulimit[]) {\n    this.ulimits.push(...ulimits);\n  }\n\n                                                                                      \n  public addContainerDependencies(...containerDependencies: ContainerDependency[]) {\n    this.containerDependencies.push(...containerDependencies);\n  }\n\n                                                                       \n  public addVolumesFrom(...volumesFrom: VolumeFrom[]) {\n    this.volumesFrom.push(...volumesFrom);\n  }\n\n                                                                                                                  \n  public addToExecutionPolicy(statement: iam.PolicyStatement) {\n    this.taskDefinition.addToExecutionRolePolicy(statement);\n  }\n\n                                                                                    \n  public findPortMapping(containerPort: number, protocol: Protocol): PortMapping | undefined {\n    for (const portMapping of this.portMappings) {\n      const p = portMapping.protocol || Protocol.TCP;\n      const c = portMapping.containerPort;\n      if (c === containerPort && p === protocol) {\n        return portMapping;\n      }\n    }\n    return undefined;\n  }\n\n                                                                                                                                                                                    \n  public get ingressPort(): number {\n    if (this.portMappings.length === 0) {\n      throw new Error(`Container ${this.containerName} hasn't defined any ports. Call addPortMappings().`);\n    }\n    const defaultPortMapping = this.portMappings[0];\n\n    if (defaultPortMapping.hostPort !== undefined && defaultPortMapping.hostPort !== 0) {\n      return defaultPortMapping.hostPort;\n    }\n\n    if (this.taskDefinition.networkMode === NetworkMode.BRIDGE) {\n      return 0;\n    }\n    return defaultPortMapping.containerPort;\n  }\n\n                                                       \n  public get containerPort(): number {\n    if (this.portMappings.length === 0) {\n      throw new Error(`Container ${this.containerName} hasn't defined any ports. Call addPortMappings().`);\n    }\n    const defaultPortMapping = this.portMappings[0];\n    return defaultPortMapping.containerPort;\n  }\n\n                                                                                                                                                                                            \n  public renderContainerDefinition(_taskDefinition?: TaskDefinition): CfnTaskDefinition.ContainerDefinitionProperty {\n    return {\n      command: this.props.command,\n      cpu: this.props.cpu,\n      disableNetworking: this.props.disableNetworking,\n      dependsOn: cdk.Lazy.any({ produce: () => this.containerDependencies.map(renderContainerDependency) }, { omitEmptyArray: true }),\n      dnsSearchDomains: this.props.dnsSearchDomains,\n      dnsServers: this.props.dnsServers,\n      dockerLabels: this.props.dockerLabels,\n      dockerSecurityOptions: this.props.dockerSecurityOptions,\n      entryPoint: this.props.entryPoint,\n      essential: this.essential,\n      hostname: this.props.hostname,\n      image: this.imageConfig.imageName,\n      memory: this.props.memoryLimitMiB,\n      memoryReservation: this.props.memoryReservationMiB,\n      mountPoints: cdk.Lazy.any({ produce: () => this.mountPoints.map(renderMountPoint) }, { omitEmptyArray: true }),\n      name: this.containerName,\n      portMappings: cdk.Lazy.any({ produce: () => this.portMappings.map(renderPortMapping) }, { omitEmptyArray: true }),\n      privileged: this.props.privileged,\n      readonlyRootFilesystem: this.props.readonlyRootFilesystem,\n      repositoryCredentials: this.imageConfig.repositoryCredentials,\n      startTimeout: this.props.startTimeout && this.props.startTimeout.toSeconds(),\n      stopTimeout: this.props.stopTimeout && this.props.stopTimeout.toSeconds(),\n      ulimits: cdk.Lazy.any({ produce: () => this.ulimits.map(renderUlimit) }, { omitEmptyArray: true }),\n      user: this.props.user,\n      volumesFrom: cdk.Lazy.any({ produce: () => this.volumesFrom.map(renderVolumeFrom) }, { omitEmptyArray: true }),\n      workingDirectory: this.props.workingDirectory,\n      logConfiguration: this.logDriverConfig,\n      environment: this.environment && Object.keys(this.environment).length ? renderKV(this.environment, 'name', 'value') : undefined,\n      environmentFiles: this.environmentFiles && renderEnvironmentFiles(cdk.Stack.of(this).partition, this.environmentFiles),\n      secrets: this.secrets,\n      extraHosts: this.props.extraHosts && renderKV(this.props.extraHosts, 'hostname', 'ipAddress'),\n      healthCheck: this.props.healthCheck && renderHealthCheck(this.props.healthCheck),\n      links: cdk.Lazy.list({ produce: () => this.links }, { omitEmpty: true }),\n      linuxParameters: this.linuxParameters && this.linuxParameters.renderLinuxParameters(),\n      resourceRequirements: (!this.props.gpuCount && this.inferenceAcceleratorResources.length == 0 ) ? undefined :\n        renderResourceRequirements(this.props.gpuCount, this.inferenceAcceleratorResources),\n      systemControls: this.props.systemControls && renderSystemControls(this.props.systemControls),\n    };\n  }\n}\n\n                                                                                              \nexport interface HealthCheck {\n                                                                                                                                                                                                                                                                                                                                                           \n  readonly command: string[];\n\n                                                                                                                                                                             \n  readonly interval?: cdk.Duration;\n\n                                                                                                                                                                                          \n  readonly retries?: number;\n\n                                                                                                                                                                                                                                                                     \n  readonly startPeriod?: cdk.Duration;\n\n                                                                                                                                                                                                               \n  readonly timeout?: cdk.Duration;\n}\n\nfunction renderKV(env: { [key: string]: string }, keyName: string, valueName: string): any[] {\n  const ret = [];\n  for (const [key, value] of Object.entries(env)) {\n    ret.push({ [keyName]: key, [valueName]: value });\n  }\n  return ret;\n}\n\nfunction renderEnvironmentFiles(partition: string, environmentFiles: EnvironmentFileConfig[]): any[] {\n  const ret = [];\n  for (const environmentFile of environmentFiles) {\n    const s3Location = environmentFile.s3Location;\n\n    if (!s3Location) {\n      throw Error('Environment file must specify an S3 location');\n    }\n\n    ret.push({\n      type: environmentFile.fileType,\n      value: `arn:${partition}:s3:::${s3Location.bucketName}/${s3Location.objectKey}`,\n    });\n  }\n  return ret;\n}\n\nfunction renderHealthCheck(hc: HealthCheck): CfnTaskDefinition.HealthCheckProperty {\n  return {\n    command: getHealthCheckCommand(hc),\n    interval: hc.interval?.toSeconds() ?? 30,\n    retries: hc.retries ?? 3,\n    startPeriod: hc.startPeriod?.toSeconds(),\n    timeout: hc.timeout?.toSeconds() ?? 5,\n  };\n}\n\nfunction getHealthCheckCommand(hc: HealthCheck): string[] {\n  const cmd = hc.command;\n  const hcCommand = new Array<string>();\n\n  if (cmd.length === 0) {\n    throw new Error('At least one argument must be supplied for health check command.');\n  }\n\n  if (cmd.length === 1) {\n    hcCommand.push('CMD-SHELL', cmd[0]);\n    return hcCommand;\n  }\n\n  if (cmd[0] !== 'CMD' && cmd[0] !== 'CMD-SHELL') {\n    hcCommand.push('CMD');\n  }\n\n  return hcCommand.concat(cmd);\n}\n\nfunction renderResourceRequirements(gpuCount: number = 0, inferenceAcceleratorResources: string[] = []):\nCfnTaskDefinition.ResourceRequirementProperty[] | undefined {\n  const ret = [];\n  for (const resource of inferenceAcceleratorResources) {\n    ret.push({\n      type: 'InferenceAccelerator',\n      value: resource,\n    });\n  }\n  if (gpuCount > 0) {\n    ret.push({\n      type: 'GPU',\n      value: gpuCount.toString(),\n    });\n  }\n  return ret;\n}\n\n                                                                                                          \nexport interface Ulimit {\n                                                                                                                                                                                                \n  readonly name: UlimitName,\n\n                                                    \n  readonly softLimit: number,\n\n                                                    \n  readonly hardLimit: number,\n}\n\n                                             \nexport enum UlimitName {\n  CORE = 'core',\n  CPU = 'cpu',\n  DATA = 'data',\n  FSIZE = 'fsize',\n  LOCKS = 'locks',\n  MEMLOCK = 'memlock',\n  MSGQUEUE = 'msgqueue',\n  NICE = 'nice',\n  NOFILE = 'nofile',\n  NPROC = 'nproc',\n  RSS = 'rss',\n  RTPRIO = 'rtprio',\n  RTTIME = 'rttime',\n  SIGPENDING = 'sigpending',\n  STACK = 'stack'\n}\n\nfunction renderUlimit(ulimit: Ulimit): CfnTaskDefinition.UlimitProperty {\n  return {\n    name: ulimit.name,\n    softLimit: ulimit.softLimit,\n    hardLimit: ulimit.hardLimit,\n  };\n}\n                                                                                                                                                                                     \nexport interface ContainerDependency {\n                                            \n  readonly container: ContainerDefinition;\n\n                                                                                                                                                                                                                                                                                                                                                        \n  readonly condition?: ContainerDependencyCondition;\n}\n\nexport enum ContainerDependencyCondition {\n                                                                                                                                                                                      \n  START = 'START',\n\n                                                                                                                                                                                                                                 \n  COMPLETE = 'COMPLETE',\n\n                                                                                                                          \n  SUCCESS = 'SUCCESS',\n\n                                                                                                                                                                                                                                                                                  \n  HEALTHY = 'HEALTHY',\n}\n\nfunction renderContainerDependency(containerDependency: ContainerDependency): CfnTaskDefinition.ContainerDependencyProperty {\n  return {\n    containerName: containerDependency.container.containerName,\n    condition: containerDependency.condition || ContainerDependencyCondition.HEALTHY,\n  };\n}\n\n                                                                                                                    \nexport interface PortMapping {\nn  readonly containerPort: number;\n\nn  readonly hostPort?: number;\n\n                                                                                                                               \n  readonly protocol?: Protocol\n}\n\n                           \nexport enum Protocol {\n                    \n  TCP = 'tcp',\n\n                    \n  UDP = 'udp',\n}\n\nfunction renderPortMapping(pm: PortMapping): CfnTaskDefinition.PortMappingProperty {\n  return {\n    containerPort: pm.containerPort,\n    hostPort: pm.hostPort,\n    protocol: pm.protocol || Protocol.TCP,\n  };\n}\n\n                                                             \nexport interface ScratchSpace {\n                                                                          \n  readonly containerPath: string,\n                                                                                                                                                                                                                                                                            \n  readonly readOnly: boolean,\n  readonly sourcePath: string,\n                                                                                                                                           \n  readonly name: string,\n}\n\n                                                                   \nexport interface MountPoint {\n                                                                       \n  readonly containerPath: string,\n                                                                                                                                                                                                                                                    \n  readonly readOnly: boolean,\n                                                                                                                                             \n  readonly sourceVolume: string,\n}\n\nfunction renderMountPoint(mp: MountPoint): CfnTaskDefinition.MountPointProperty {\n  return {\n    containerPath: mp.containerPath,\n    readOnly: mp.readOnly,\n    sourceVolume: mp.sourceVolume,\n  };\n}\n\n                                                                                           \nexport interface VolumeFrom {\n                                                                                                           \n  readonly sourceContainer: string,\n\n                                                                                                                                                                                                                                                \n  readonly readOnly: boolean,\n}\n\nfunction renderVolumeFrom(vf: VolumeFrom): CfnTaskDefinition.VolumeFromProperty {\n  return {\n    sourceContainer: vf.sourceContainer,\n    readOnly: vf.readOnly,\n  };\n}\n\n                                                    \nexport interface SystemControl {\n                                                                          \n  readonly namespace: string;\n\n                                                                                      \n  readonly value: string;\n}\n\nfunction renderSystemControls(systemControls: SystemControl[]): CfnTaskDefinition.SystemControlProperty[] {\n  return systemControls.map(sc => ({\n    namespace: sc.namespace,\n    value: sc.value,\n  }));\n}\n"],
  "mappings": "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",
  "names": []
}
