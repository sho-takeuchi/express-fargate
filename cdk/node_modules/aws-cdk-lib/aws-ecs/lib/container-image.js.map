{
  "version": 3,
  "sources": ["container-image.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport { DockerImageAsset, TarballImageAsset } from '../../aws-ecr-assets';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition } from './container-definition';\nimport { CfnTaskDefinition } from './ecs.generated';\n\n                                                   \nexport abstract class ContainerImage {\n                                                                           \n  public static fromRegistry(name: string, props: RepositoryImageProps = {}) {\n    return new RepositoryImage(name, props);\n  }\n\n                                                        \n  public static fromEcrRepository(repository: ecr.IRepository, tag: string = 'latest') {\n    return new EcrImage(repository, tag);\n  }\n\n                                                                                                                                                                                                                                                                                                \n  public static fromAsset(directory: string, props: AssetImageProps = {}) {\n    return new AssetImage(directory, props);\n  }\n\n                                                                                                                                                                 \n  public static fromDockerImageAsset(asset: DockerImageAsset): ContainerImage {\n    return {\n      bind(_scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig {\n        asset.repository.grantPull(containerDefinition.taskDefinition.obtainExecutionRole());\n        return {\n          imageName: asset.imageUri,\n        };\n      },\n    };\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n  public static fromTarball(tarballFile: string): ContainerImage {\n    return {\n      bind(scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig {\n\n        const asset = new TarballImageAsset(scope, 'Tarball', { tarballFile });\n        asset.repository.grantPull(containerDefinition.taskDefinition.obtainExecutionRole());\n\n        return {\n          imageName: asset.imageUri,\n        };\n      },\n    };\n  }\n\n                                                                       \n  public abstract bind(scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig;\n}\n\n                                                            \nexport interface ContainerImageConfig {\n                                                           \n  readonly imageName: string;\n\n                                                                               \n  readonly repositoryCredentials?: CfnTaskDefinition.RepositoryCredentialsProperty;\n}\n\nimport { AssetImage, AssetImageProps } from './images/asset-image';\nimport { EcrImage } from './images/ecr';\nimport { RepositoryImage, RepositoryImageProps } from './images/repository';\n\n"],
  "mappings": "qNACA,iBAAA,QAAA,wBAMA,oBAAoC,OAEpB,cAAa,KAAc,MAA8B,GAAE,gFAChE,GAAI,cAAA,gBAAgB,KAAM,aAIrB,mBAAkB,WAA6B,IAAc,SAAQ,4EAC1E,GAAI,OAAA,SAAS,WAAY,WAIpB,WAAU,UAAmB,MAAyB,GAAE,2EAC7D,GAAI,eAAA,WAAW,UAAW,aAIrB,sBAAqB,MAAuB,mFACjD,CACL,KAAK,OAAmB,oBAAwC,CAC9D,aAAM,WAAW,UAAU,oBAAoB,eAAe,uBACvD,CACL,UAAW,MAAM,kBAOX,aAAY,YAAmB,CAC3C,MAAO,CACL,KAAK,MAAkB,oBAAwC,CAE7D,KAAM,OAAQ,GAAI,kBAAA,kBAAkB,MAAO,UAAW,CAAE,cACxD,aAAM,WAAW,UAAU,oBAAoB,eAAe,uBAEvD,CACL,UAAW,MAAM,aArC3B,QAAA,eAAA,oHAwDA,KAAA,eAAA,QAAA,wBACA,MAAA,QAAA,gBACA,aAAA,QAAA",
  "names": []
}
