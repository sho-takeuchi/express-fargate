{
  "version": 3,
  "sources": ["ecs.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:04:01.369Z\",\"fingerprint\":\"EyikDCitrUafJM/4XlpUorvFiOR1Qy1VR75sCQlQ4ec=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                \nexport interface CfnCapacityProviderProps {\n\n                                                                                                                                                                                                                                                            \n    readonly autoScalingGroupProvider: CfnCapacityProvider.AutoScalingGroupProviderProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCapacityProviderProps`\n *\n * @param properties - the TypeScript properties of a `CfnCapacityProviderProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityProviderPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoScalingGroupProvider', cdk.requiredValidator)(properties.autoScalingGroupProvider));\n    errors.collect(cdk.propertyValidator('autoScalingGroupProvider', CfnCapacityProvider_AutoScalingGroupProviderPropertyValidator)(properties.autoScalingGroupProvider));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnCapacityProviderProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::CapacityProvider` resource\n *\n * @param properties - the TypeScript properties of a `CfnCapacityProviderProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::CapacityProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityProviderPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityProviderPropsValidator(properties).assertSuccess();\n    return {\n        AutoScalingGroupProvider: cfnCapacityProviderAutoScalingGroupProviderPropertyToCloudFormation(properties.autoScalingGroupProvider),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityProviderPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityProviderProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityProviderProps>();\n    ret.addPropertyResult('autoScalingGroupProvider', 'AutoScalingGroupProvider', CfnCapacityProviderAutoScalingGroupProviderPropertyFromCloudFormation(properties.AutoScalingGroupProvider));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCapacityProvider extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::CapacityProvider\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCapacityProvider {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCapacityProviderPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCapacityProvider(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                            \n    public autoScalingGroupProvider: CfnCapacityProvider.AutoScalingGroupProviderProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public name: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnCapacityProviderProps) {\n        super(scope, id, { type: CfnCapacityProvider.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'autoScalingGroupProvider', this);\n\n        this.autoScalingGroupProvider = props.autoScalingGroupProvider;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ECS::CapacityProvider\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCapacityProvider.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            autoScalingGroupProvider: this.autoScalingGroupProvider,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCapacityProviderPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCapacityProvider {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface AutoScalingGroupProviderProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly autoScalingGroupArn: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly managedScaling?: CfnCapacityProvider.ManagedScalingProperty | cdk.IResolvable;\nn        readonly managedTerminationProtection?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoScalingGroupProviderProperty`\n *\n * @param properties - the TypeScript properties of a `AutoScalingGroupProviderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityProvider_AutoScalingGroupProviderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoScalingGroupArn', cdk.requiredValidator)(properties.autoScalingGroupArn));\n    errors.collect(cdk.propertyValidator('autoScalingGroupArn', cdk.validateString)(properties.autoScalingGroupArn));\n    errors.collect(cdk.propertyValidator('managedScaling', CfnCapacityProvider_ManagedScalingPropertyValidator)(properties.managedScaling));\n    errors.collect(cdk.propertyValidator('managedTerminationProtection', cdk.validateString)(properties.managedTerminationProtection));\n    return errors.wrap('supplied properties not correct for \"AutoScalingGroupProviderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::CapacityProvider.AutoScalingGroupProvider` resource\n *\n * @param properties - the TypeScript properties of a `AutoScalingGroupProviderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::CapacityProvider.AutoScalingGroupProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityProviderAutoScalingGroupProviderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityProvider_AutoScalingGroupProviderPropertyValidator(properties).assertSuccess();\n    return {\n        AutoScalingGroupArn: cdk.stringToCloudFormation(properties.autoScalingGroupArn),\n        ManagedScaling: cfnCapacityProviderManagedScalingPropertyToCloudFormation(properties.managedScaling),\n        ManagedTerminationProtection: cdk.stringToCloudFormation(properties.managedTerminationProtection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityProviderAutoScalingGroupProviderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityProvider.AutoScalingGroupProviderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityProvider.AutoScalingGroupProviderProperty>();\n    ret.addPropertyResult('autoScalingGroupArn', 'AutoScalingGroupArn', cfn_parse.FromCloudFormation.getString(properties.AutoScalingGroupArn));\n    ret.addPropertyResult('managedScaling', 'ManagedScaling', properties.ManagedScaling != null ? CfnCapacityProviderManagedScalingPropertyFromCloudFormation(properties.ManagedScaling) : undefined);\n    ret.addPropertyResult('managedTerminationProtection', 'ManagedTerminationProtection', properties.ManagedTerminationProtection != null ? cfn_parse.FromCloudFormation.getString(properties.ManagedTerminationProtection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCapacityProvider {\nn    export interface ManagedScalingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly instanceWarmupPeriod?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly maximumScalingStepSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly minimumScalingStepSize?: number;\n                                                                                                                                                                                                                                                                                                           \n        readonly status?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly targetCapacity?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ManagedScalingProperty`\n *\n * @param properties - the TypeScript properties of a `ManagedScalingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCapacityProvider_ManagedScalingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceWarmupPeriod', cdk.validateNumber)(properties.instanceWarmupPeriod));\n    errors.collect(cdk.propertyValidator('maximumScalingStepSize', cdk.validateNumber)(properties.maximumScalingStepSize));\n    errors.collect(cdk.propertyValidator('minimumScalingStepSize', cdk.validateNumber)(properties.minimumScalingStepSize));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('targetCapacity', cdk.validateNumber)(properties.targetCapacity));\n    return errors.wrap('supplied properties not correct for \"ManagedScalingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::CapacityProvider.ManagedScaling` resource\n *\n * @param properties - the TypeScript properties of a `ManagedScalingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::CapacityProvider.ManagedScaling` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCapacityProviderManagedScalingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCapacityProvider_ManagedScalingPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceWarmupPeriod: cdk.numberToCloudFormation(properties.instanceWarmupPeriod),\n        MaximumScalingStepSize: cdk.numberToCloudFormation(properties.maximumScalingStepSize),\n        MinimumScalingStepSize: cdk.numberToCloudFormation(properties.minimumScalingStepSize),\n        Status: cdk.stringToCloudFormation(properties.status),\n        TargetCapacity: cdk.numberToCloudFormation(properties.targetCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCapacityProviderManagedScalingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCapacityProvider.ManagedScalingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCapacityProvider.ManagedScalingProperty>();\n    ret.addPropertyResult('instanceWarmupPeriod', 'InstanceWarmupPeriod', properties.InstanceWarmupPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceWarmupPeriod) : undefined);\n    ret.addPropertyResult('maximumScalingStepSize', 'MaximumScalingStepSize', properties.MaximumScalingStepSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumScalingStepSize) : undefined);\n    ret.addPropertyResult('minimumScalingStepSize', 'MinimumScalingStepSize', properties.MinimumScalingStepSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinimumScalingStepSize) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addPropertyResult('targetCapacity', 'TargetCapacity', properties.TargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.TargetCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                              \nexport interface CfnClusterProps {\n\nn    readonly capacityProviders?: string[];\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly clusterName?: string;\n\nn    readonly clusterSettings?: Array<CfnCluster.ClusterSettingsProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                       \n    readonly configuration?: CfnCluster.ClusterConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly defaultCapacityProviderStrategy?: Array<CfnCluster.CapacityProviderStrategyItemProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityProviders', cdk.listValidator(cdk.validateString))(properties.capacityProviders));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('clusterSettings', cdk.listValidator(CfnCluster_ClusterSettingsPropertyValidator))(properties.clusterSettings));\n    errors.collect(cdk.propertyValidator('configuration', CfnCluster_ClusterConfigurationPropertyValidator)(properties.configuration));\n    errors.collect(cdk.propertyValidator('defaultCapacityProviderStrategy', cdk.listValidator(CfnCluster_CapacityProviderStrategyItemPropertyValidator))(properties.defaultCapacityProviderStrategy));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Cluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Cluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterPropsValidator(properties).assertSuccess();\n    return {\n        CapacityProviders: cdk.listMapper(cdk.stringToCloudFormation)(properties.capacityProviders),\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        ClusterSettings: cdk.listMapper(cfnClusterClusterSettingsPropertyToCloudFormation)(properties.clusterSettings),\n        Configuration: cfnClusterClusterConfigurationPropertyToCloudFormation(properties.configuration),\n        DefaultCapacityProviderStrategy: cdk.listMapper(cfnClusterCapacityProviderStrategyItemPropertyToCloudFormation)(properties.defaultCapacityProviderStrategy),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterProps>();\n    ret.addPropertyResult('capacityProviders', 'CapacityProviders', properties.CapacityProviders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CapacityProviders) : undefined);\n    ret.addPropertyResult('clusterName', 'ClusterName', properties.ClusterName != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterName) : undefined);\n    ret.addPropertyResult('clusterSettings', 'ClusterSettings', properties.ClusterSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnClusterClusterSettingsPropertyFromCloudFormation)(properties.ClusterSettings) : undefined);\n    ret.addPropertyResult('configuration', 'Configuration', properties.Configuration != null ? CfnClusterClusterConfigurationPropertyFromCloudFormation(properties.Configuration) : undefined);\n    ret.addPropertyResult('defaultCapacityProviderStrategy', 'DefaultCapacityProviderStrategy', properties.DefaultCapacityProviderStrategy != null ? cfn_parse.FromCloudFormation.getArray(CfnClusterCapacityProviderStrategyItemPropertyFromCloudFormation)(properties.DefaultCapacityProviderStrategy) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                       \nexport class CfnCluster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::Cluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                        \n    public readonly attrArn: string;\n\nn    public capacityProviders: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                              \n    public clusterName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public clusterSettings: Array<CfnCluster.ClusterSettingsProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    public configuration: CfnCluster.ClusterConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public defaultCapacityProviderStrategy: Array<CfnCluster.CapacityProviderStrategyItemProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterProps = {}) {\n        super(scope, id, { type: CfnCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.capacityProviders = props.capacityProviders;\n        this.clusterName = props.clusterName;\n        this.clusterSettings = props.clusterSettings;\n        this.configuration = props.configuration;\n        this.defaultCapacityProviderStrategy = props.defaultCapacityProviderStrategy;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ECS::Cluster\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            capacityProviders: this.capacityProviders,\n            clusterName: this.clusterName,\n            clusterSettings: this.clusterSettings,\n            configuration: this.configuration,\n            defaultCapacityProviderStrategy: this.defaultCapacityProviderStrategy,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface CapacityProviderStrategyItemProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly base?: number;\n                                                                                                                                                                                                                                                                                                \n        readonly capacityProvider?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly weight?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityProviderStrategyItemProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyItemProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_CapacityProviderStrategyItemPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('base', cdk.validateNumber)(properties.base));\n    errors.collect(cdk.propertyValidator('capacityProvider', cdk.validateString)(properties.capacityProvider));\n    errors.collect(cdk.propertyValidator('weight', cdk.validateNumber)(properties.weight));\n    return errors.wrap('supplied properties not correct for \"CapacityProviderStrategyItemProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Cluster.CapacityProviderStrategyItem` resource\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyItemProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Cluster.CapacityProviderStrategyItem` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterCapacityProviderStrategyItemPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_CapacityProviderStrategyItemPropertyValidator(properties).assertSuccess();\n    return {\n        Base: cdk.numberToCloudFormation(properties.base),\n        CapacityProvider: cdk.stringToCloudFormation(properties.capacityProvider),\n        Weight: cdk.numberToCloudFormation(properties.weight),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterCapacityProviderStrategyItemPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.CapacityProviderStrategyItemProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.CapacityProviderStrategyItemProperty>();\n    ret.addPropertyResult('base', 'Base', properties.Base != null ? cfn_parse.FromCloudFormation.getNumber(properties.Base) : undefined);\n    ret.addPropertyResult('capacityProvider', 'CapacityProvider', properties.CapacityProvider != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityProvider) : undefined);\n    ret.addPropertyResult('weight', 'Weight', properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                 \n    export interface ClusterConfigurationProperty {\n                                                                                                                                                                                                                                                                                                    \n        readonly executeCommandConfiguration?: CfnCluster.ExecuteCommandConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ClusterConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('executeCommandConfiguration', CfnCluster_ExecuteCommandConfigurationPropertyValidator)(properties.executeCommandConfiguration));\n    return errors.wrap('supplied properties not correct for \"ClusterConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Cluster.ClusterConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ClusterConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Cluster.ClusterConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterClusterConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ClusterConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ExecuteCommandConfiguration: cfnClusterExecuteCommandConfigurationPropertyToCloudFormation(properties.executeCommandConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterClusterConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ClusterConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ClusterConfigurationProperty>();\n    ret.addPropertyResult('executeCommandConfiguration', 'ExecuteCommandConfiguration', properties.ExecuteCommandConfiguration != null ? CfnClusterExecuteCommandConfigurationPropertyFromCloudFormation(properties.ExecuteCommandConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                    \n    export interface ClusterSettingsProperty {\n                                                                                                                                                                                                                                                                                                    \n        readonly name?: string;\nn        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ClusterSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ClusterSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Cluster.ClusterSettings` resource\n *\n * @param properties - the TypeScript properties of a `ClusterSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Cluster.ClusterSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterClusterSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ClusterSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterClusterSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ClusterSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ClusterSettingsProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                       \n    export interface ExecuteCommandConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly logConfiguration?: CfnCluster.ExecuteCommandLogConfigurationProperty | cdk.IResolvable;\nn        readonly logging?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExecuteCommandConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ExecuteCommandConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ExecuteCommandConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('logConfiguration', CfnCluster_ExecuteCommandLogConfigurationPropertyValidator)(properties.logConfiguration));\n    errors.collect(cdk.propertyValidator('logging', cdk.validateString)(properties.logging));\n    return errors.wrap('supplied properties not correct for \"ExecuteCommandConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Cluster.ExecuteCommandConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ExecuteCommandConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Cluster.ExecuteCommandConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterExecuteCommandConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ExecuteCommandConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        LogConfiguration: cfnClusterExecuteCommandLogConfigurationPropertyToCloudFormation(properties.logConfiguration),\n        Logging: cdk.stringToCloudFormation(properties.logging),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterExecuteCommandConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ExecuteCommandConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ExecuteCommandConfigurationProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('logConfiguration', 'LogConfiguration', properties.LogConfiguration != null ? CfnClusterExecuteCommandLogConfigurationPropertyFromCloudFormation(properties.LogConfiguration) : undefined);\n    ret.addPropertyResult('logging', 'Logging', properties.Logging != null ? cfn_parse.FromCloudFormation.getString(properties.Logging) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface ExecuteCommandLogConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly cloudWatchEncryptionEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly cloudWatchLogGroupName?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly s3BucketName?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly s3EncryptionEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                            \n        readonly s3KeyPrefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExecuteCommandLogConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ExecuteCommandLogConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ExecuteCommandLogConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchEncryptionEnabled', cdk.validateBoolean)(properties.cloudWatchEncryptionEnabled));\n    errors.collect(cdk.propertyValidator('cloudWatchLogGroupName', cdk.validateString)(properties.cloudWatchLogGroupName));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3EncryptionEnabled', cdk.validateBoolean)(properties.s3EncryptionEnabled));\n    errors.collect(cdk.propertyValidator('s3KeyPrefix', cdk.validateString)(properties.s3KeyPrefix));\n    return errors.wrap('supplied properties not correct for \"ExecuteCommandLogConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Cluster.ExecuteCommandLogConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ExecuteCommandLogConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Cluster.ExecuteCommandLogConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterExecuteCommandLogConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ExecuteCommandLogConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchEncryptionEnabled: cdk.booleanToCloudFormation(properties.cloudWatchEncryptionEnabled),\n        CloudWatchLogGroupName: cdk.stringToCloudFormation(properties.cloudWatchLogGroupName),\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        S3EncryptionEnabled: cdk.booleanToCloudFormation(properties.s3EncryptionEnabled),\n        S3KeyPrefix: cdk.stringToCloudFormation(properties.s3KeyPrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterExecuteCommandLogConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ExecuteCommandLogConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ExecuteCommandLogConfigurationProperty>();\n    ret.addPropertyResult('cloudWatchEncryptionEnabled', 'CloudWatchEncryptionEnabled', properties.CloudWatchEncryptionEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CloudWatchEncryptionEnabled) : undefined);\n    ret.addPropertyResult('cloudWatchLogGroupName', 'CloudWatchLogGroupName', properties.CloudWatchLogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchLogGroupName) : undefined);\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', properties.S3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.S3BucketName) : undefined);\n    ret.addPropertyResult('s3EncryptionEnabled', 'S3EncryptionEnabled', properties.S3EncryptionEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.S3EncryptionEnabled) : undefined);\n    ret.addPropertyResult('s3KeyPrefix', 'S3KeyPrefix', properties.S3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3KeyPrefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                      \nexport interface CfnClusterCapacityProviderAssociationsProps {\n\n                                                                                                                                                                                                                                                                                      \n    readonly capacityProviders: string[];\n\n                                                                                                                                                                                                                                                                                      \n    readonly cluster: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly defaultCapacityProviderStrategy: Array<CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterCapacityProviderAssociationsProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterCapacityProviderAssociationsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterCapacityProviderAssociationsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityProviders', cdk.requiredValidator)(properties.capacityProviders));\n    errors.collect(cdk.propertyValidator('capacityProviders', cdk.listValidator(cdk.validateString))(properties.capacityProviders));\n    errors.collect(cdk.propertyValidator('cluster', cdk.requiredValidator)(properties.cluster));\n    errors.collect(cdk.propertyValidator('cluster', cdk.validateString)(properties.cluster));\n    errors.collect(cdk.propertyValidator('defaultCapacityProviderStrategy', cdk.requiredValidator)(properties.defaultCapacityProviderStrategy));\n    errors.collect(cdk.propertyValidator('defaultCapacityProviderStrategy', cdk.listValidator(CfnClusterCapacityProviderAssociations_CapacityProviderStrategyPropertyValidator))(properties.defaultCapacityProviderStrategy));\n    return errors.wrap('supplied properties not correct for \"CfnClusterCapacityProviderAssociationsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::ClusterCapacityProviderAssociations` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterCapacityProviderAssociationsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::ClusterCapacityProviderAssociations` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterCapacityProviderAssociationsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterCapacityProviderAssociationsPropsValidator(properties).assertSuccess();\n    return {\n        CapacityProviders: cdk.listMapper(cdk.stringToCloudFormation)(properties.capacityProviders),\n        Cluster: cdk.stringToCloudFormation(properties.cluster),\n        DefaultCapacityProviderStrategy: cdk.listMapper(cfnClusterCapacityProviderAssociationsCapacityProviderStrategyPropertyToCloudFormation)(properties.defaultCapacityProviderStrategy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterCapacityProviderAssociationsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterCapacityProviderAssociationsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterCapacityProviderAssociationsProps>();\n    ret.addPropertyResult('capacityProviders', 'CapacityProviders', cfn_parse.FromCloudFormation.getStringArray(properties.CapacityProviders));\n    ret.addPropertyResult('cluster', 'Cluster', cfn_parse.FromCloudFormation.getString(properties.Cluster));\n    ret.addPropertyResult('defaultCapacityProviderStrategy', 'DefaultCapacityProviderStrategy', cfn_parse.FromCloudFormation.getArray(CfnClusterCapacityProviderAssociationsCapacityProviderStrategyPropertyFromCloudFormation)(properties.DefaultCapacityProviderStrategy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnClusterCapacityProviderAssociations extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::ClusterCapacityProviderAssociations\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClusterCapacityProviderAssociations {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterCapacityProviderAssociationsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClusterCapacityProviderAssociations(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                      \n    public capacityProviders: string[];\n\n                                                                                                                                                                                                                                                                                      \n    public cluster: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    public defaultCapacityProviderStrategy: Array<CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterCapacityProviderAssociationsProps) {\n        super(scope, id, { type: CfnClusterCapacityProviderAssociations.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'capacityProviders', this);\n        cdk.requireProperty(props, 'cluster', this);\n        cdk.requireProperty(props, 'defaultCapacityProviderStrategy', this);\n\n        this.capacityProviders = props.capacityProviders;\n        this.cluster = props.cluster;\n        this.defaultCapacityProviderStrategy = props.defaultCapacityProviderStrategy;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClusterCapacityProviderAssociations.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            capacityProviders: this.capacityProviders,\n            cluster: this.cluster,\n            defaultCapacityProviderStrategy: this.defaultCapacityProviderStrategy,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterCapacityProviderAssociationsPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnClusterCapacityProviderAssociations {\nn    export interface CapacityProviderStrategyProperty {\nn        readonly base?: number;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly capacityProvider: string;\nn        readonly weight?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityProviderStrategyProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterCapacityProviderAssociations_CapacityProviderStrategyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('base', cdk.validateNumber)(properties.base));\n    errors.collect(cdk.propertyValidator('capacityProvider', cdk.requiredValidator)(properties.capacityProvider));\n    errors.collect(cdk.propertyValidator('capacityProvider', cdk.validateString)(properties.capacityProvider));\n    errors.collect(cdk.propertyValidator('weight', cdk.validateNumber)(properties.weight));\n    return errors.wrap('supplied properties not correct for \"CapacityProviderStrategyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::ClusterCapacityProviderAssociations.CapacityProviderStrategy` resource\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::ClusterCapacityProviderAssociations.CapacityProviderStrategy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterCapacityProviderAssociationsCapacityProviderStrategyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterCapacityProviderAssociations_CapacityProviderStrategyPropertyValidator(properties).assertSuccess();\n    return {\n        Base: cdk.numberToCloudFormation(properties.base),\n        CapacityProvider: cdk.stringToCloudFormation(properties.capacityProvider),\n        Weight: cdk.numberToCloudFormation(properties.weight),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterCapacityProviderAssociationsCapacityProviderStrategyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty>();\n    ret.addPropertyResult('base', 'Base', properties.Base != null ? cfn_parse.FromCloudFormation.getNumber(properties.Base) : undefined);\n    ret.addPropertyResult('capacityProvider', 'CapacityProvider', cfn_parse.FromCloudFormation.getString(properties.CapacityProvider));\n    ret.addPropertyResult('weight', 'Weight', properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnPrimaryTaskSetProps {\n\n                                                                                                                                                                                                                                                                                                 \n    readonly cluster: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly service: string;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly taskSetId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPrimaryTaskSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnPrimaryTaskSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPrimaryTaskSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cluster', cdk.requiredValidator)(properties.cluster));\n    errors.collect(cdk.propertyValidator('cluster', cdk.validateString)(properties.cluster));\n    errors.collect(cdk.propertyValidator('service', cdk.requiredValidator)(properties.service));\n    errors.collect(cdk.propertyValidator('service', cdk.validateString)(properties.service));\n    errors.collect(cdk.propertyValidator('taskSetId', cdk.requiredValidator)(properties.taskSetId));\n    errors.collect(cdk.propertyValidator('taskSetId', cdk.validateString)(properties.taskSetId));\n    return errors.wrap('supplied properties not correct for \"CfnPrimaryTaskSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::PrimaryTaskSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnPrimaryTaskSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::PrimaryTaskSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPrimaryTaskSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPrimaryTaskSetPropsValidator(properties).assertSuccess();\n    return {\n        Cluster: cdk.stringToCloudFormation(properties.cluster),\n        Service: cdk.stringToCloudFormation(properties.service),\n        TaskSetId: cdk.stringToCloudFormation(properties.taskSetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPrimaryTaskSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPrimaryTaskSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPrimaryTaskSetProps>();\n    ret.addPropertyResult('cluster', 'Cluster', cfn_parse.FromCloudFormation.getString(properties.Cluster));\n    ret.addPropertyResult('service', 'Service', cfn_parse.FromCloudFormation.getString(properties.Service));\n    ret.addPropertyResult('taskSetId', 'TaskSetId', cfn_parse.FromCloudFormation.getString(properties.TaskSetId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnPrimaryTaskSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::PrimaryTaskSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPrimaryTaskSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPrimaryTaskSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPrimaryTaskSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                 \n    public cluster: string;\n\n                                                                                                                                                                                                                                                                          \n    public service: string;\n\n                                                                                                                                                                                                                                                                                                  \n    public taskSetId: string;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnPrimaryTaskSetProps) {\n        super(scope, id, { type: CfnPrimaryTaskSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cluster', this);\n        cdk.requireProperty(props, 'service', this);\n        cdk.requireProperty(props, 'taskSetId', this);\n\n        this.cluster = props.cluster;\n        this.service = props.service;\n        this.taskSetId = props.taskSetId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPrimaryTaskSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cluster: this.cluster,\n            service: this.service,\n            taskSetId: this.taskSetId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPrimaryTaskSetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                              \nexport interface CfnServiceProps {\n\nn    readonly capacityProviderStrategy?: Array<CfnService.CapacityProviderStrategyItemProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly cluster?: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly deploymentConfiguration?: CfnService.DeploymentConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                           \n    readonly deploymentController?: CfnService.DeploymentControllerProperty | cdk.IResolvable;\n\nn    readonly desiredCount?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly enableEcsManagedTags?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                         \n    readonly enableExecuteCommand?: boolean | cdk.IResolvable;\n\nn    readonly healthCheckGracePeriodSeconds?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly launchType?: string;\n\nn    readonly loadBalancers?: Array<CfnService.LoadBalancerProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly networkConfiguration?: CfnService.NetworkConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly placementConstraints?: Array<CfnService.PlacementConstraintProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly placementStrategies?: Array<CfnService.PlacementStrategyProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly platformVersion?: string;\n\nn    readonly propagateTags?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly role?: string;\n\nn    readonly schedulingStrategy?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly serviceName?: string;\n\nn    readonly serviceRegistries?: Array<CfnService.ServiceRegistryProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly taskDefinition?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnServiceProps`\n *\n * @param properties - the TypeScript properties of a `CfnServiceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnServicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityProviderStrategy', cdk.listValidator(CfnService_CapacityProviderStrategyItemPropertyValidator))(properties.capacityProviderStrategy));\n    errors.collect(cdk.propertyValidator('cluster', cdk.validateString)(properties.cluster));\n    errors.collect(cdk.propertyValidator('deploymentConfiguration', CfnService_DeploymentConfigurationPropertyValidator)(properties.deploymentConfiguration));\n    errors.collect(cdk.propertyValidator('deploymentController', CfnService_DeploymentControllerPropertyValidator)(properties.deploymentController));\n    errors.collect(cdk.propertyValidator('desiredCount', cdk.validateNumber)(properties.desiredCount));\n    errors.collect(cdk.propertyValidator('enableEcsManagedTags', cdk.validateBoolean)(properties.enableEcsManagedTags));\n    errors.collect(cdk.propertyValidator('enableExecuteCommand', cdk.validateBoolean)(properties.enableExecuteCommand));\n    errors.collect(cdk.propertyValidator('healthCheckGracePeriodSeconds', cdk.validateNumber)(properties.healthCheckGracePeriodSeconds));\n    errors.collect(cdk.propertyValidator('launchType', cdk.validateString)(properties.launchType));\n    errors.collect(cdk.propertyValidator('loadBalancers', cdk.listValidator(CfnService_LoadBalancerPropertyValidator))(properties.loadBalancers));\n    errors.collect(cdk.propertyValidator('networkConfiguration', CfnService_NetworkConfigurationPropertyValidator)(properties.networkConfiguration));\n    errors.collect(cdk.propertyValidator('placementConstraints', cdk.listValidator(CfnService_PlacementConstraintPropertyValidator))(properties.placementConstraints));\n    errors.collect(cdk.propertyValidator('placementStrategies', cdk.listValidator(CfnService_PlacementStrategyPropertyValidator))(properties.placementStrategies));\n    errors.collect(cdk.propertyValidator('platformVersion', cdk.validateString)(properties.platformVersion));\n    errors.collect(cdk.propertyValidator('propagateTags', cdk.validateString)(properties.propagateTags));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('schedulingStrategy', cdk.validateString)(properties.schedulingStrategy));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceRegistries', cdk.listValidator(CfnService_ServiceRegistryPropertyValidator))(properties.serviceRegistries));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('taskDefinition', cdk.validateString)(properties.taskDefinition));\n    return errors.wrap('supplied properties not correct for \"CfnServiceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service` resource\n *\n * @param properties - the TypeScript properties of a `CfnServiceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServicePropsValidator(properties).assertSuccess();\n    return {\n        CapacityProviderStrategy: cdk.listMapper(cfnServiceCapacityProviderStrategyItemPropertyToCloudFormation)(properties.capacityProviderStrategy),\n        Cluster: cdk.stringToCloudFormation(properties.cluster),\n        DeploymentConfiguration: cfnServiceDeploymentConfigurationPropertyToCloudFormation(properties.deploymentConfiguration),\n        DeploymentController: cfnServiceDeploymentControllerPropertyToCloudFormation(properties.deploymentController),\n        DesiredCount: cdk.numberToCloudFormation(properties.desiredCount),\n        EnableECSManagedTags: cdk.booleanToCloudFormation(properties.enableEcsManagedTags),\n        EnableExecuteCommand: cdk.booleanToCloudFormation(properties.enableExecuteCommand),\n        HealthCheckGracePeriodSeconds: cdk.numberToCloudFormation(properties.healthCheckGracePeriodSeconds),\n        LaunchType: cdk.stringToCloudFormation(properties.launchType),\n        LoadBalancers: cdk.listMapper(cfnServiceLoadBalancerPropertyToCloudFormation)(properties.loadBalancers),\n        NetworkConfiguration: cfnServiceNetworkConfigurationPropertyToCloudFormation(properties.networkConfiguration),\n        PlacementConstraints: cdk.listMapper(cfnServicePlacementConstraintPropertyToCloudFormation)(properties.placementConstraints),\n        PlacementStrategies: cdk.listMapper(cfnServicePlacementStrategyPropertyToCloudFormation)(properties.placementStrategies),\n        PlatformVersion: cdk.stringToCloudFormation(properties.platformVersion),\n        PropagateTags: cdk.stringToCloudFormation(properties.propagateTags),\n        Role: cdk.stringToCloudFormation(properties.role),\n        SchedulingStrategy: cdk.stringToCloudFormation(properties.schedulingStrategy),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        ServiceRegistries: cdk.listMapper(cfnServiceServiceRegistryPropertyToCloudFormation)(properties.serviceRegistries),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TaskDefinition: cdk.stringToCloudFormation(properties.taskDefinition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServiceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServiceProps>();\n    ret.addPropertyResult('capacityProviderStrategy', 'CapacityProviderStrategy', properties.CapacityProviderStrategy != null ? cfn_parse.FromCloudFormation.getArray(CfnServiceCapacityProviderStrategyItemPropertyFromCloudFormation)(properties.CapacityProviderStrategy) : undefined);\n    ret.addPropertyResult('cluster', 'Cluster', properties.Cluster != null ? cfn_parse.FromCloudFormation.getString(properties.Cluster) : undefined);\n    ret.addPropertyResult('deploymentConfiguration', 'DeploymentConfiguration', properties.DeploymentConfiguration != null ? CfnServiceDeploymentConfigurationPropertyFromCloudFormation(properties.DeploymentConfiguration) : undefined);\n    ret.addPropertyResult('deploymentController', 'DeploymentController', properties.DeploymentController != null ? CfnServiceDeploymentControllerPropertyFromCloudFormation(properties.DeploymentController) : undefined);\n    ret.addPropertyResult('desiredCount', 'DesiredCount', properties.DesiredCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.DesiredCount) : undefined);\n    ret.addPropertyResult('enableEcsManagedTags', 'EnableECSManagedTags', properties.EnableECSManagedTags != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableECSManagedTags) : undefined);\n    ret.addPropertyResult('enableExecuteCommand', 'EnableExecuteCommand', properties.EnableExecuteCommand != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableExecuteCommand) : undefined);\n    ret.addPropertyResult('healthCheckGracePeriodSeconds', 'HealthCheckGracePeriodSeconds', properties.HealthCheckGracePeriodSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.HealthCheckGracePeriodSeconds) : undefined);\n    ret.addPropertyResult('launchType', 'LaunchType', properties.LaunchType != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchType) : undefined);\n    ret.addPropertyResult('loadBalancers', 'LoadBalancers', properties.LoadBalancers != null ? cfn_parse.FromCloudFormation.getArray(CfnServiceLoadBalancerPropertyFromCloudFormation)(properties.LoadBalancers) : undefined);\n    ret.addPropertyResult('networkConfiguration', 'NetworkConfiguration', properties.NetworkConfiguration != null ? CfnServiceNetworkConfigurationPropertyFromCloudFormation(properties.NetworkConfiguration) : undefined);\n    ret.addPropertyResult('placementConstraints', 'PlacementConstraints', properties.PlacementConstraints != null ? cfn_parse.FromCloudFormation.getArray(CfnServicePlacementConstraintPropertyFromCloudFormation)(properties.PlacementConstraints) : undefined);\n    ret.addPropertyResult('placementStrategies', 'PlacementStrategies', properties.PlacementStrategies != null ? cfn_parse.FromCloudFormation.getArray(CfnServicePlacementStrategyPropertyFromCloudFormation)(properties.PlacementStrategies) : undefined);\n    ret.addPropertyResult('platformVersion', 'PlatformVersion', properties.PlatformVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformVersion) : undefined);\n    ret.addPropertyResult('propagateTags', 'PropagateTags', properties.PropagateTags != null ? cfn_parse.FromCloudFormation.getString(properties.PropagateTags) : undefined);\n    ret.addPropertyResult('role', 'Role', properties.Role != null ? cfn_parse.FromCloudFormation.getString(properties.Role) : undefined);\n    ret.addPropertyResult('schedulingStrategy', 'SchedulingStrategy', properties.SchedulingStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.SchedulingStrategy) : undefined);\n    ret.addPropertyResult('serviceName', 'ServiceName', properties.ServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceName) : undefined);\n    ret.addPropertyResult('serviceRegistries', 'ServiceRegistries', properties.ServiceRegistries != null ? cfn_parse.FromCloudFormation.getArray(CfnServiceServiceRegistryPropertyFromCloudFormation)(properties.ServiceRegistries) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('taskDefinition', 'TaskDefinition', properties.TaskDefinition != null ? cfn_parse.FromCloudFormation.getString(properties.TaskDefinition) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \nexport class CfnService extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::Service\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnService {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnServicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnService(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                         \n    public readonly attrName: string;\n\n                                                                                                                 \n    public readonly attrServiceArn: string;\n\nn    public capacityProviderStrategy: Array<CfnService.CapacityProviderStrategyItemProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                              \n    public cluster: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public deploymentConfiguration: CfnService.DeploymentConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                           \n    public deploymentController: CfnService.DeploymentControllerProperty | cdk.IResolvable | undefined;\n\nn    public desiredCount: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public enableEcsManagedTags: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                         \n    public enableExecuteCommand: boolean | cdk.IResolvable | undefined;\n\nn    public healthCheckGracePeriodSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public launchType: string | undefined;\n\nn    public loadBalancers: Array<CfnService.LoadBalancerProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public networkConfiguration: CfnService.NetworkConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    public placementConstraints: Array<CfnService.PlacementConstraintProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public placementStrategies: Array<CfnService.PlacementStrategyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public platformVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public propagateTags: string | undefined;\n\nn    public role: string | undefined;\n\nn    public schedulingStrategy: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public serviceName: string | undefined;\n\nn    public serviceRegistries: Array<CfnService.ServiceRegistryProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public taskDefinition: string | undefined;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnServiceProps = {}) {\n        super(scope, id, { type: CfnService.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrServiceArn = cdk.Token.asString(this.getAtt('ServiceArn'));\n\n        this.capacityProviderStrategy = props.capacityProviderStrategy;\n        this.cluster = props.cluster;\n        this.deploymentConfiguration = props.deploymentConfiguration;\n        this.deploymentController = props.deploymentController;\n        this.desiredCount = props.desiredCount;\n        this.enableEcsManagedTags = props.enableEcsManagedTags;\n        this.enableExecuteCommand = props.enableExecuteCommand;\n        this.healthCheckGracePeriodSeconds = props.healthCheckGracePeriodSeconds;\n        this.launchType = props.launchType;\n        this.loadBalancers = props.loadBalancers;\n        this.networkConfiguration = props.networkConfiguration;\n        this.placementConstraints = props.placementConstraints;\n        this.placementStrategies = props.placementStrategies;\n        this.platformVersion = props.platformVersion;\n        this.propagateTags = props.propagateTags;\n        this.role = props.role;\n        this.schedulingStrategy = props.schedulingStrategy;\n        this.serviceName = props.serviceName;\n        this.serviceRegistries = props.serviceRegistries;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ECS::Service\", props.tags, { tagPropertyName: 'tags' });\n        this.taskDefinition = props.taskDefinition;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnService.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            capacityProviderStrategy: this.capacityProviderStrategy,\n            cluster: this.cluster,\n            deploymentConfiguration: this.deploymentConfiguration,\n            deploymentController: this.deploymentController,\n            desiredCount: this.desiredCount,\n            enableEcsManagedTags: this.enableEcsManagedTags,\n            enableExecuteCommand: this.enableExecuteCommand,\n            healthCheckGracePeriodSeconds: this.healthCheckGracePeriodSeconds,\n            launchType: this.launchType,\n            loadBalancers: this.loadBalancers,\n            networkConfiguration: this.networkConfiguration,\n            placementConstraints: this.placementConstraints,\n            placementStrategies: this.placementStrategies,\n            platformVersion: this.platformVersion,\n            propagateTags: this.propagateTags,\n            role: this.role,\n            schedulingStrategy: this.schedulingStrategy,\n            serviceName: this.serviceName,\n            serviceRegistries: this.serviceRegistries,\n            tags: this.tags.renderTags(),\n            taskDefinition: this.taskDefinition,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnServicePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                  \n    export interface AwsVpcConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly assignPublicIp?: string;\nn        readonly securityGroups?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AwsVpcConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AwsVpcConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_AwsVpcConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assignPublicIp', cdk.validateString)(properties.assignPublicIp));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"AwsVpcConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.AwsVpcConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AwsVpcConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.AwsVpcConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceAwsVpcConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_AwsVpcConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AssignPublicIp: cdk.stringToCloudFormation(properties.assignPublicIp),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceAwsVpcConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.AwsVpcConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.AwsVpcConfigurationProperty>();\n    ret.addPropertyResult('assignPublicIp', 'AssignPublicIp', properties.AssignPublicIp != null ? cfn_parse.FromCloudFormation.getString(properties.AssignPublicIp) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\nn    export interface CapacityProviderStrategyItemProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly base?: number;\n                                                                                                                                                                                                                                                                                                \n        readonly capacityProvider?: string;\nn        readonly weight?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityProviderStrategyItemProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyItemProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_CapacityProviderStrategyItemPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('base', cdk.validateNumber)(properties.base));\n    errors.collect(cdk.propertyValidator('capacityProvider', cdk.validateString)(properties.capacityProvider));\n    errors.collect(cdk.propertyValidator('weight', cdk.validateNumber)(properties.weight));\n    return errors.wrap('supplied properties not correct for \"CapacityProviderStrategyItemProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.CapacityProviderStrategyItem` resource\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyItemProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.CapacityProviderStrategyItem` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceCapacityProviderStrategyItemPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_CapacityProviderStrategyItemPropertyValidator(properties).assertSuccess();\n    return {\n        Base: cdk.numberToCloudFormation(properties.base),\n        CapacityProvider: cdk.stringToCloudFormation(properties.capacityProvider),\n        Weight: cdk.numberToCloudFormation(properties.weight),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceCapacityProviderStrategyItemPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.CapacityProviderStrategyItemProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.CapacityProviderStrategyItemProperty>();\n    ret.addPropertyResult('base', 'Base', properties.Base != null ? cfn_parse.FromCloudFormation.getNumber(properties.Base) : undefined);\n    ret.addPropertyResult('capacityProvider', 'CapacityProvider', properties.CapacityProvider != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityProvider) : undefined);\n    ret.addPropertyResult('weight', 'Weight', properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\nn    export interface DeploymentCircuitBreakerProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly enable: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly rollback: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentCircuitBreakerProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentCircuitBreakerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_DeploymentCircuitBreakerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enable', cdk.requiredValidator)(properties.enable));\n    errors.collect(cdk.propertyValidator('enable', cdk.validateBoolean)(properties.enable));\n    errors.collect(cdk.propertyValidator('rollback', cdk.requiredValidator)(properties.rollback));\n    errors.collect(cdk.propertyValidator('rollback', cdk.validateBoolean)(properties.rollback));\n    return errors.wrap('supplied properties not correct for \"DeploymentCircuitBreakerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.DeploymentCircuitBreaker` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentCircuitBreakerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.DeploymentCircuitBreaker` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceDeploymentCircuitBreakerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_DeploymentCircuitBreakerPropertyValidator(properties).assertSuccess();\n    return {\n        Enable: cdk.booleanToCloudFormation(properties.enable),\n        Rollback: cdk.booleanToCloudFormation(properties.rollback),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceDeploymentCircuitBreakerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.DeploymentCircuitBreakerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.DeploymentCircuitBreakerProperty>();\n    ret.addPropertyResult('enable', 'Enable', cfn_parse.FromCloudFormation.getBoolean(properties.Enable));\n    ret.addPropertyResult('rollback', 'Rollback', cfn_parse.FromCloudFormation.getBoolean(properties.Rollback));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface DeploymentConfigurationProperty {\nn        readonly deploymentCircuitBreaker?: CfnService.DeploymentCircuitBreakerProperty | cdk.IResolvable;\nn        readonly maximumPercent?: number;\nn        readonly minimumHealthyPercent?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_DeploymentConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentCircuitBreaker', CfnService_DeploymentCircuitBreakerPropertyValidator)(properties.deploymentCircuitBreaker));\n    errors.collect(cdk.propertyValidator('maximumPercent', cdk.validateNumber)(properties.maximumPercent));\n    errors.collect(cdk.propertyValidator('minimumHealthyPercent', cdk.validateNumber)(properties.minimumHealthyPercent));\n    return errors.wrap('supplied properties not correct for \"DeploymentConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.DeploymentConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.DeploymentConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceDeploymentConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_DeploymentConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DeploymentCircuitBreaker: cfnServiceDeploymentCircuitBreakerPropertyToCloudFormation(properties.deploymentCircuitBreaker),\n        MaximumPercent: cdk.numberToCloudFormation(properties.maximumPercent),\n        MinimumHealthyPercent: cdk.numberToCloudFormation(properties.minimumHealthyPercent),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceDeploymentConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.DeploymentConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.DeploymentConfigurationProperty>();\n    ret.addPropertyResult('deploymentCircuitBreaker', 'DeploymentCircuitBreaker', properties.DeploymentCircuitBreaker != null ? CfnServiceDeploymentCircuitBreakerPropertyFromCloudFormation(properties.DeploymentCircuitBreaker) : undefined);\n    ret.addPropertyResult('maximumPercent', 'MaximumPercent', properties.MaximumPercent != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumPercent) : undefined);\n    ret.addPropertyResult('minimumHealthyPercent', 'MinimumHealthyPercent', properties.MinimumHealthyPercent != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinimumHealthyPercent) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface DeploymentControllerProperty {\nn        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentControllerProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentControllerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_DeploymentControllerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"DeploymentControllerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.DeploymentController` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentControllerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.DeploymentController` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceDeploymentControllerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_DeploymentControllerPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceDeploymentControllerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.DeploymentControllerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.DeploymentControllerProperty>();\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\nn    export interface LoadBalancerProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly containerName?: string;\nn        readonly containerPort: number;\nn        readonly loadBalancerName?: string;\nn        readonly targetGroupArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoadBalancerProperty`\n *\n * @param properties - the TypeScript properties of a `LoadBalancerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_LoadBalancerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('containerPort', cdk.requiredValidator)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('containerPort', cdk.validateNumber)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.validateString)(properties.loadBalancerName));\n    errors.collect(cdk.propertyValidator('targetGroupArn', cdk.validateString)(properties.targetGroupArn));\n    return errors.wrap('supplied properties not correct for \"LoadBalancerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.LoadBalancer` resource\n *\n * @param properties - the TypeScript properties of a `LoadBalancerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.LoadBalancer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceLoadBalancerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_LoadBalancerPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        ContainerPort: cdk.numberToCloudFormation(properties.containerPort),\n        LoadBalancerName: cdk.stringToCloudFormation(properties.loadBalancerName),\n        TargetGroupArn: cdk.stringToCloudFormation(properties.targetGroupArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceLoadBalancerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.LoadBalancerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.LoadBalancerProperty>();\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addPropertyResult('containerPort', 'ContainerPort', cfn_parse.FromCloudFormation.getNumber(properties.ContainerPort));\n    ret.addPropertyResult('loadBalancerName', 'LoadBalancerName', properties.LoadBalancerName != null ? cfn_parse.FromCloudFormation.getString(properties.LoadBalancerName) : undefined);\n    ret.addPropertyResult('targetGroupArn', 'TargetGroupArn', properties.TargetGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.TargetGroupArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                    \n    export interface NetworkConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly awsvpcConfiguration?: CfnService.AwsVpcConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_NetworkConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsvpcConfiguration', CfnService_AwsVpcConfigurationPropertyValidator)(properties.awsvpcConfiguration));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.NetworkConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.NetworkConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceNetworkConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_NetworkConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AwsvpcConfiguration: cfnServiceAwsVpcConfigurationPropertyToCloudFormation(properties.awsvpcConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceNetworkConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.NetworkConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.NetworkConfigurationProperty>();\n    ret.addPropertyResult('awsvpcConfiguration', 'AwsvpcConfiguration', properties.AwsvpcConfiguration != null ? CfnServiceAwsVpcConfigurationPropertyFromCloudFormation(properties.AwsvpcConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\nn    export interface PlacementConstraintProperty {\nn        readonly expression?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementConstraintProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementConstraintProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_PlacementConstraintPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('expression', cdk.validateString)(properties.expression));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"PlacementConstraintProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.PlacementConstraint` resource\n *\n * @param properties - the TypeScript properties of a `PlacementConstraintProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.PlacementConstraint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServicePlacementConstraintPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_PlacementConstraintPropertyValidator(properties).assertSuccess();\n    return {\n        Expression: cdk.stringToCloudFormation(properties.expression),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServicePlacementConstraintPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.PlacementConstraintProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.PlacementConstraintProperty>();\n    ret.addPropertyResult('expression', 'Expression', properties.Expression != null ? cfn_parse.FromCloudFormation.getString(properties.Expression) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface PlacementStrategyProperty {\nn        readonly field?: string;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementStrategyProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementStrategyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_PlacementStrategyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"PlacementStrategyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.PlacementStrategy` resource\n *\n * @param properties - the TypeScript properties of a `PlacementStrategyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.PlacementStrategy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServicePlacementStrategyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_PlacementStrategyPropertyValidator(properties).assertSuccess();\n    return {\n        Field: cdk.stringToCloudFormation(properties.field),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServicePlacementStrategyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.PlacementStrategyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.PlacementStrategyProperty>();\n    ret.addPropertyResult('field', 'Field', properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface ServiceRegistryProperty {\nn        readonly containerName?: string;\nn        readonly containerPort?: number;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly port?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly registryArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServiceRegistryProperty`\n *\n * @param properties - the TypeScript properties of a `ServiceRegistryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_ServiceRegistryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('containerPort', cdk.validateNumber)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('registryArn', cdk.validateString)(properties.registryArn));\n    return errors.wrap('supplied properties not correct for \"ServiceRegistryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::Service.ServiceRegistry` resource\n *\n * @param properties - the TypeScript properties of a `ServiceRegistryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::Service.ServiceRegistry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceServiceRegistryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_ServiceRegistryPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        ContainerPort: cdk.numberToCloudFormation(properties.containerPort),\n        Port: cdk.numberToCloudFormation(properties.port),\n        RegistryArn: cdk.stringToCloudFormation(properties.registryArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceServiceRegistryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.ServiceRegistryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.ServiceRegistryProperty>();\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addPropertyResult('containerPort', 'ContainerPort', properties.ContainerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerPort) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('registryArn', 'RegistryArn', properties.RegistryArn != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnTaskDefinitionProps {\n\nn    readonly containerDefinitions?: Array<CfnTaskDefinition.ContainerDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly cpu?: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly ephemeralStorage?: CfnTaskDefinition.EphemeralStorageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly executionRoleArn?: string;\n\nn    readonly family?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly inferenceAccelerators?: Array<CfnTaskDefinition.InferenceAcceleratorProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly ipcMode?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly memory?: string;\n\nn    readonly networkMode?: string;\n\nn    readonly pidMode?: string;\n\n                                                                                                                                                                                                                                                                                                                                  \n    readonly placementConstraints?: Array<CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly proxyConfiguration?: CfnTaskDefinition.ProxyConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly requiresCompatibilities?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly runtimePlatform?: CfnTaskDefinition.RuntimePlatformProperty | cdk.IResolvable;\n\nn    readonly tags?: cdk.CfnTag[];\n\nn    readonly taskRoleArn?: string;\n\nn    readonly volumes?: Array<CfnTaskDefinition.VolumeProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTaskDefinitionProps`\n *\n * @param properties - the TypeScript properties of a `CfnTaskDefinitionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinitionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerDefinitions', cdk.listValidator(CfnTaskDefinition_ContainerDefinitionPropertyValidator))(properties.containerDefinitions));\n    errors.collect(cdk.propertyValidator('cpu', cdk.validateString)(properties.cpu));\n    errors.collect(cdk.propertyValidator('ephemeralStorage', CfnTaskDefinition_EphemeralStoragePropertyValidator)(properties.ephemeralStorage));\n    errors.collect(cdk.propertyValidator('executionRoleArn', cdk.validateString)(properties.executionRoleArn));\n    errors.collect(cdk.propertyValidator('family', cdk.validateString)(properties.family));\n    errors.collect(cdk.propertyValidator('inferenceAccelerators', cdk.listValidator(CfnTaskDefinition_InferenceAcceleratorPropertyValidator))(properties.inferenceAccelerators));\n    errors.collect(cdk.propertyValidator('ipcMode', cdk.validateString)(properties.ipcMode));\n    errors.collect(cdk.propertyValidator('memory', cdk.validateString)(properties.memory));\n    errors.collect(cdk.propertyValidator('networkMode', cdk.validateString)(properties.networkMode));\n    errors.collect(cdk.propertyValidator('pidMode', cdk.validateString)(properties.pidMode));\n    errors.collect(cdk.propertyValidator('placementConstraints', cdk.listValidator(CfnTaskDefinition_TaskDefinitionPlacementConstraintPropertyValidator))(properties.placementConstraints));\n    errors.collect(cdk.propertyValidator('proxyConfiguration', CfnTaskDefinition_ProxyConfigurationPropertyValidator)(properties.proxyConfiguration));\n    errors.collect(cdk.propertyValidator('requiresCompatibilities', cdk.listValidator(cdk.validateString))(properties.requiresCompatibilities));\n    errors.collect(cdk.propertyValidator('runtimePlatform', CfnTaskDefinition_RuntimePlatformPropertyValidator)(properties.runtimePlatform));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('taskRoleArn', cdk.validateString)(properties.taskRoleArn));\n    errors.collect(cdk.propertyValidator('volumes', cdk.listValidator(CfnTaskDefinition_VolumePropertyValidator))(properties.volumes));\n    return errors.wrap('supplied properties not correct for \"CfnTaskDefinitionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition` resource\n *\n * @param properties - the TypeScript properties of a `CfnTaskDefinitionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinitionPropsValidator(properties).assertSuccess();\n    return {\n        ContainerDefinitions: cdk.listMapper(cfnTaskDefinitionContainerDefinitionPropertyToCloudFormation)(properties.containerDefinitions),\n        Cpu: cdk.stringToCloudFormation(properties.cpu),\n        EphemeralStorage: cfnTaskDefinitionEphemeralStoragePropertyToCloudFormation(properties.ephemeralStorage),\n        ExecutionRoleArn: cdk.stringToCloudFormation(properties.executionRoleArn),\n        Family: cdk.stringToCloudFormation(properties.family),\n        InferenceAccelerators: cdk.listMapper(cfnTaskDefinitionInferenceAcceleratorPropertyToCloudFormation)(properties.inferenceAccelerators),\n        IpcMode: cdk.stringToCloudFormation(properties.ipcMode),\n        Memory: cdk.stringToCloudFormation(properties.memory),\n        NetworkMode: cdk.stringToCloudFormation(properties.networkMode),\n        PidMode: cdk.stringToCloudFormation(properties.pidMode),\n        PlacementConstraints: cdk.listMapper(cfnTaskDefinitionTaskDefinitionPlacementConstraintPropertyToCloudFormation)(properties.placementConstraints),\n        ProxyConfiguration: cfnTaskDefinitionProxyConfigurationPropertyToCloudFormation(properties.proxyConfiguration),\n        RequiresCompatibilities: cdk.listMapper(cdk.stringToCloudFormation)(properties.requiresCompatibilities),\n        RuntimePlatform: cfnTaskDefinitionRuntimePlatformPropertyToCloudFormation(properties.runtimePlatform),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TaskRoleArn: cdk.stringToCloudFormation(properties.taskRoleArn),\n        Volumes: cdk.listMapper(cfnTaskDefinitionVolumePropertyToCloudFormation)(properties.volumes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinitionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinitionProps>();\n    ret.addPropertyResult('containerDefinitions', 'ContainerDefinitions', properties.ContainerDefinitions != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionContainerDefinitionPropertyFromCloudFormation)(properties.ContainerDefinitions) : undefined);\n    ret.addPropertyResult('cpu', 'Cpu', properties.Cpu != null ? cfn_parse.FromCloudFormation.getString(properties.Cpu) : undefined);\n    ret.addPropertyResult('ephemeralStorage', 'EphemeralStorage', properties.EphemeralStorage != null ? CfnTaskDefinitionEphemeralStoragePropertyFromCloudFormation(properties.EphemeralStorage) : undefined);\n    ret.addPropertyResult('executionRoleArn', 'ExecutionRoleArn', properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : undefined);\n    ret.addPropertyResult('family', 'Family', properties.Family != null ? cfn_parse.FromCloudFormation.getString(properties.Family) : undefined);\n    ret.addPropertyResult('inferenceAccelerators', 'InferenceAccelerators', properties.InferenceAccelerators != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionInferenceAcceleratorPropertyFromCloudFormation)(properties.InferenceAccelerators) : undefined);\n    ret.addPropertyResult('ipcMode', 'IpcMode', properties.IpcMode != null ? cfn_parse.FromCloudFormation.getString(properties.IpcMode) : undefined);\n    ret.addPropertyResult('memory', 'Memory', properties.Memory != null ? cfn_parse.FromCloudFormation.getString(properties.Memory) : undefined);\n    ret.addPropertyResult('networkMode', 'NetworkMode', properties.NetworkMode != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkMode) : undefined);\n    ret.addPropertyResult('pidMode', 'PidMode', properties.PidMode != null ? cfn_parse.FromCloudFormation.getString(properties.PidMode) : undefined);\n    ret.addPropertyResult('placementConstraints', 'PlacementConstraints', properties.PlacementConstraints != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionTaskDefinitionPlacementConstraintPropertyFromCloudFormation)(properties.PlacementConstraints) : undefined);\n    ret.addPropertyResult('proxyConfiguration', 'ProxyConfiguration', properties.ProxyConfiguration != null ? CfnTaskDefinitionProxyConfigurationPropertyFromCloudFormation(properties.ProxyConfiguration) : undefined);\n    ret.addPropertyResult('requiresCompatibilities', 'RequiresCompatibilities', properties.RequiresCompatibilities != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RequiresCompatibilities) : undefined);\n    ret.addPropertyResult('runtimePlatform', 'RuntimePlatform', properties.RuntimePlatform != null ? CfnTaskDefinitionRuntimePlatformPropertyFromCloudFormation(properties.RuntimePlatform) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('taskRoleArn', 'TaskRoleArn', properties.TaskRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.TaskRoleArn) : undefined);\n    ret.addPropertyResult('volumes', 'Volumes', properties.Volumes != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionVolumePropertyFromCloudFormation)(properties.Volumes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTaskDefinition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::TaskDefinition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTaskDefinition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTaskDefinitionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTaskDefinition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                        \n    public readonly attrTaskDefinitionArn: string;\n\nn    public containerDefinitions: Array<CfnTaskDefinition.ContainerDefinitionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public cpu: string | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public ephemeralStorage: CfnTaskDefinition.EphemeralStorageProperty | cdk.IResolvable | undefined;\n\nn    public executionRoleArn: string | undefined;\n\nn    public family: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public inferenceAccelerators: Array<CfnTaskDefinition.InferenceAcceleratorProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public ipcMode: string | undefined;\n\nn    public memory: string | undefined;\n\nn    public networkMode: string | undefined;\n\nn    public pidMode: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                  \n    public placementConstraints: Array<CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public proxyConfiguration: CfnTaskDefinition.ProxyConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public requiresCompatibilities: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public runtimePlatform: CfnTaskDefinition.RuntimePlatformProperty | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public taskRoleArn: string | undefined;\n\nn    public volumes: Array<CfnTaskDefinition.VolumeProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnTaskDefinitionProps = {}) {\n        super(scope, id, { type: CfnTaskDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrTaskDefinitionArn = cdk.Token.asString(this.getAtt('TaskDefinitionArn'));\n\n        this.containerDefinitions = props.containerDefinitions;\n        this.cpu = props.cpu;\n        this.ephemeralStorage = props.ephemeralStorage;\n        this.executionRoleArn = props.executionRoleArn;\n        this.family = props.family;\n        this.inferenceAccelerators = props.inferenceAccelerators;\n        this.ipcMode = props.ipcMode;\n        this.memory = props.memory;\n        this.networkMode = props.networkMode;\n        this.pidMode = props.pidMode;\n        this.placementConstraints = props.placementConstraints;\n        this.proxyConfiguration = props.proxyConfiguration;\n        this.requiresCompatibilities = props.requiresCompatibilities;\n        this.runtimePlatform = props.runtimePlatform;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ECS::TaskDefinition\", props.tags, { tagPropertyName: 'tags' });\n        this.taskRoleArn = props.taskRoleArn;\n        this.volumes = props.volumes;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTaskDefinition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            containerDefinitions: this.containerDefinitions,\n            cpu: this.cpu,\n            ephemeralStorage: this.ephemeralStorage,\n            executionRoleArn: this.executionRoleArn,\n            family: this.family,\n            inferenceAccelerators: this.inferenceAccelerators,\n            ipcMode: this.ipcMode,\n            memory: this.memory,\n            networkMode: this.networkMode,\n            pidMode: this.pidMode,\n            placementConstraints: this.placementConstraints,\n            proxyConfiguration: this.proxyConfiguration,\n            requiresCompatibilities: this.requiresCompatibilities,\n            runtimePlatform: this.runtimePlatform,\n            tags: this.tags.renderTags(),\n            taskRoleArn: this.taskRoleArn,\n            volumes: this.volumes,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTaskDefinitionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                            \n    export interface AuthorizationConfigProperty {\nn        readonly accessPointId?: string;\nn        readonly iam?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AuthorizationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AuthorizationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_AuthorizationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessPointId', cdk.validateString)(properties.accessPointId));\n    errors.collect(cdk.propertyValidator('iam', cdk.validateString)(properties.iam));\n    return errors.wrap('supplied properties not correct for \"AuthorizationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.AuthorizationConfig` resource\n *\n * @param properties - the TypeScript properties of a `AuthorizationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.AuthorizationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionAuthorizationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_AuthorizationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AccessPointId: cdk.stringToCloudFormation(properties.accessPointId),\n        IAM: cdk.stringToCloudFormation(properties.iam),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionAuthorizationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.AuthorizationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.AuthorizationConfigProperty>();\n    ret.addPropertyResult('accessPointId', 'AccessPointId', properties.AccessPointId != null ? cfn_parse.FromCloudFormation.getString(properties.AccessPointId) : undefined);\n    ret.addPropertyResult('iam', 'IAM', properties.IAM != null ? cfn_parse.FromCloudFormation.getString(properties.IAM) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface ContainerDefinitionProperty {\nn        readonly command?: string[];\nn        readonly cpu?: number;\nn        readonly dependsOn?: Array<CfnTaskDefinition.ContainerDependencyProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly disableNetworking?: boolean | cdk.IResolvable;\nn        readonly dnsSearchDomains?: string[];\nn        readonly dnsServers?: string[];\nn        readonly dockerLabels?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly dockerSecurityOptions?: string[];\nn        readonly entryPoint?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly environment?: Array<CfnTaskDefinition.KeyValuePairProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly environmentFiles?: Array<CfnTaskDefinition.EnvironmentFileProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly essential?: boolean | cdk.IResolvable;\nn        readonly extraHosts?: Array<CfnTaskDefinition.HostEntryProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly firelensConfiguration?: CfnTaskDefinition.FirelensConfigurationProperty | cdk.IResolvable;\nn        readonly healthCheck?: CfnTaskDefinition.HealthCheckProperty | cdk.IResolvable;\nn        readonly hostname?: string;\nn        readonly image?: string;\nn        readonly interactive?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly links?: string[];\nn        readonly linuxParameters?: CfnTaskDefinition.LinuxParametersProperty | cdk.IResolvable;\nn        readonly logConfiguration?: CfnTaskDefinition.LogConfigurationProperty | cdk.IResolvable;\nn        readonly memory?: number;\nn        readonly memoryReservation?: number;\nn        readonly mountPoints?: Array<CfnTaskDefinition.MountPointProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly name?: string;\nn        readonly portMappings?: Array<CfnTaskDefinition.PortMappingProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly privileged?: boolean | cdk.IResolvable;\nn        readonly pseudoTerminal?: boolean | cdk.IResolvable;\nn        readonly readonlyRootFilesystem?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                   \n        readonly repositoryCredentials?: CfnTaskDefinition.RepositoryCredentialsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly resourceRequirements?: Array<CfnTaskDefinition.ResourceRequirementProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly secrets?: Array<CfnTaskDefinition.SecretProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly startTimeout?: number;\nn        readonly stopTimeout?: number;\nn        readonly systemControls?: Array<CfnTaskDefinition.SystemControlProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly ulimits?: Array<CfnTaskDefinition.UlimitProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly user?: string;\nn        readonly volumesFrom?: Array<CfnTaskDefinition.VolumeFromProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly workingDirectory?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_ContainerDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('command', cdk.listValidator(cdk.validateString))(properties.command));\n    errors.collect(cdk.propertyValidator('cpu', cdk.validateNumber)(properties.cpu));\n    errors.collect(cdk.propertyValidator('dependsOn', cdk.listValidator(CfnTaskDefinition_ContainerDependencyPropertyValidator))(properties.dependsOn));\n    errors.collect(cdk.propertyValidator('disableNetworking', cdk.validateBoolean)(properties.disableNetworking));\n    errors.collect(cdk.propertyValidator('dnsSearchDomains', cdk.listValidator(cdk.validateString))(properties.dnsSearchDomains));\n    errors.collect(cdk.propertyValidator('dnsServers', cdk.listValidator(cdk.validateString))(properties.dnsServers));\n    errors.collect(cdk.propertyValidator('dockerLabels', cdk.hashValidator(cdk.validateString))(properties.dockerLabels));\n    errors.collect(cdk.propertyValidator('dockerSecurityOptions', cdk.listValidator(cdk.validateString))(properties.dockerSecurityOptions));\n    errors.collect(cdk.propertyValidator('entryPoint', cdk.listValidator(cdk.validateString))(properties.entryPoint));\n    errors.collect(cdk.propertyValidator('environment', cdk.listValidator(CfnTaskDefinition_KeyValuePairPropertyValidator))(properties.environment));\n    errors.collect(cdk.propertyValidator('environmentFiles', cdk.listValidator(CfnTaskDefinition_EnvironmentFilePropertyValidator))(properties.environmentFiles));\n    errors.collect(cdk.propertyValidator('essential', cdk.validateBoolean)(properties.essential));\n    errors.collect(cdk.propertyValidator('extraHosts', cdk.listValidator(CfnTaskDefinition_HostEntryPropertyValidator))(properties.extraHosts));\n    errors.collect(cdk.propertyValidator('firelensConfiguration', CfnTaskDefinition_FirelensConfigurationPropertyValidator)(properties.firelensConfiguration));\n    errors.collect(cdk.propertyValidator('healthCheck', CfnTaskDefinition_HealthCheckPropertyValidator)(properties.healthCheck));\n    errors.collect(cdk.propertyValidator('hostname', cdk.validateString)(properties.hostname));\n    errors.collect(cdk.propertyValidator('image', cdk.validateString)(properties.image));\n    errors.collect(cdk.propertyValidator('interactive', cdk.validateBoolean)(properties.interactive));\n    errors.collect(cdk.propertyValidator('links', cdk.listValidator(cdk.validateString))(properties.links));\n    errors.collect(cdk.propertyValidator('linuxParameters', CfnTaskDefinition_LinuxParametersPropertyValidator)(properties.linuxParameters));\n    errors.collect(cdk.propertyValidator('logConfiguration', CfnTaskDefinition_LogConfigurationPropertyValidator)(properties.logConfiguration));\n    errors.collect(cdk.propertyValidator('memory', cdk.validateNumber)(properties.memory));\n    errors.collect(cdk.propertyValidator('memoryReservation', cdk.validateNumber)(properties.memoryReservation));\n    errors.collect(cdk.propertyValidator('mountPoints', cdk.listValidator(CfnTaskDefinition_MountPointPropertyValidator))(properties.mountPoints));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('portMappings', cdk.listValidator(CfnTaskDefinition_PortMappingPropertyValidator))(properties.portMappings));\n    errors.collect(cdk.propertyValidator('privileged', cdk.validateBoolean)(properties.privileged));\n    errors.collect(cdk.propertyValidator('pseudoTerminal', cdk.validateBoolean)(properties.pseudoTerminal));\n    errors.collect(cdk.propertyValidator('readonlyRootFilesystem', cdk.validateBoolean)(properties.readonlyRootFilesystem));\n    errors.collect(cdk.propertyValidator('repositoryCredentials', CfnTaskDefinition_RepositoryCredentialsPropertyValidator)(properties.repositoryCredentials));\n    errors.collect(cdk.propertyValidator('resourceRequirements', cdk.listValidator(CfnTaskDefinition_ResourceRequirementPropertyValidator))(properties.resourceRequirements));\n    errors.collect(cdk.propertyValidator('secrets', cdk.listValidator(CfnTaskDefinition_SecretPropertyValidator))(properties.secrets));\n    errors.collect(cdk.propertyValidator('startTimeout', cdk.validateNumber)(properties.startTimeout));\n    errors.collect(cdk.propertyValidator('stopTimeout', cdk.validateNumber)(properties.stopTimeout));\n    errors.collect(cdk.propertyValidator('systemControls', cdk.listValidator(CfnTaskDefinition_SystemControlPropertyValidator))(properties.systemControls));\n    errors.collect(cdk.propertyValidator('ulimits', cdk.listValidator(CfnTaskDefinition_UlimitPropertyValidator))(properties.ulimits));\n    errors.collect(cdk.propertyValidator('user', cdk.validateString)(properties.user));\n    errors.collect(cdk.propertyValidator('volumesFrom', cdk.listValidator(CfnTaskDefinition_VolumeFromPropertyValidator))(properties.volumesFrom));\n    errors.collect(cdk.propertyValidator('workingDirectory', cdk.validateString)(properties.workingDirectory));\n    return errors.wrap('supplied properties not correct for \"ContainerDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ContainerDefinition` resource\n *\n * @param properties - the TypeScript properties of a `ContainerDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ContainerDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionContainerDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_ContainerDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        Command: cdk.listMapper(cdk.stringToCloudFormation)(properties.command),\n        Cpu: cdk.numberToCloudFormation(properties.cpu),\n        DependsOn: cdk.listMapper(cfnTaskDefinitionContainerDependencyPropertyToCloudFormation)(properties.dependsOn),\n        DisableNetworking: cdk.booleanToCloudFormation(properties.disableNetworking),\n        DnsSearchDomains: cdk.listMapper(cdk.stringToCloudFormation)(properties.dnsSearchDomains),\n        DnsServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.dnsServers),\n        DockerLabels: cdk.hashMapper(cdk.stringToCloudFormation)(properties.dockerLabels),\n        DockerSecurityOptions: cdk.listMapper(cdk.stringToCloudFormation)(properties.dockerSecurityOptions),\n        EntryPoint: cdk.listMapper(cdk.stringToCloudFormation)(properties.entryPoint),\n        Environment: cdk.listMapper(cfnTaskDefinitionKeyValuePairPropertyToCloudFormation)(properties.environment),\n        EnvironmentFiles: cdk.listMapper(cfnTaskDefinitionEnvironmentFilePropertyToCloudFormation)(properties.environmentFiles),\n        Essential: cdk.booleanToCloudFormation(properties.essential),\n        ExtraHosts: cdk.listMapper(cfnTaskDefinitionHostEntryPropertyToCloudFormation)(properties.extraHosts),\n        FirelensConfiguration: cfnTaskDefinitionFirelensConfigurationPropertyToCloudFormation(properties.firelensConfiguration),\n        HealthCheck: cfnTaskDefinitionHealthCheckPropertyToCloudFormation(properties.healthCheck),\n        Hostname: cdk.stringToCloudFormation(properties.hostname),\n        Image: cdk.stringToCloudFormation(properties.image),\n        Interactive: cdk.booleanToCloudFormation(properties.interactive),\n        Links: cdk.listMapper(cdk.stringToCloudFormation)(properties.links),\n        LinuxParameters: cfnTaskDefinitionLinuxParametersPropertyToCloudFormation(properties.linuxParameters),\n        LogConfiguration: cfnTaskDefinitionLogConfigurationPropertyToCloudFormation(properties.logConfiguration),\n        Memory: cdk.numberToCloudFormation(properties.memory),\n        MemoryReservation: cdk.numberToCloudFormation(properties.memoryReservation),\n        MountPoints: cdk.listMapper(cfnTaskDefinitionMountPointPropertyToCloudFormation)(properties.mountPoints),\n        Name: cdk.stringToCloudFormation(properties.name),\n        PortMappings: cdk.listMapper(cfnTaskDefinitionPortMappingPropertyToCloudFormation)(properties.portMappings),\n        Privileged: cdk.booleanToCloudFormation(properties.privileged),\n        PseudoTerminal: cdk.booleanToCloudFormation(properties.pseudoTerminal),\n        ReadonlyRootFilesystem: cdk.booleanToCloudFormation(properties.readonlyRootFilesystem),\n        RepositoryCredentials: cfnTaskDefinitionRepositoryCredentialsPropertyToCloudFormation(properties.repositoryCredentials),\n        ResourceRequirements: cdk.listMapper(cfnTaskDefinitionResourceRequirementPropertyToCloudFormation)(properties.resourceRequirements),\n        Secrets: cdk.listMapper(cfnTaskDefinitionSecretPropertyToCloudFormation)(properties.secrets),\n        StartTimeout: cdk.numberToCloudFormation(properties.startTimeout),\n        StopTimeout: cdk.numberToCloudFormation(properties.stopTimeout),\n        SystemControls: cdk.listMapper(cfnTaskDefinitionSystemControlPropertyToCloudFormation)(properties.systemControls),\n        Ulimits: cdk.listMapper(cfnTaskDefinitionUlimitPropertyToCloudFormation)(properties.ulimits),\n        User: cdk.stringToCloudFormation(properties.user),\n        VolumesFrom: cdk.listMapper(cfnTaskDefinitionVolumeFromPropertyToCloudFormation)(properties.volumesFrom),\n        WorkingDirectory: cdk.stringToCloudFormation(properties.workingDirectory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionContainerDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.ContainerDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.ContainerDefinitionProperty>();\n    ret.addPropertyResult('command', 'Command', properties.Command != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Command) : undefined);\n    ret.addPropertyResult('cpu', 'Cpu', properties.Cpu != null ? cfn_parse.FromCloudFormation.getNumber(properties.Cpu) : undefined);\n    ret.addPropertyResult('dependsOn', 'DependsOn', properties.DependsOn != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionContainerDependencyPropertyFromCloudFormation)(properties.DependsOn) : undefined);\n    ret.addPropertyResult('disableNetworking', 'DisableNetworking', properties.DisableNetworking != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableNetworking) : undefined);\n    ret.addPropertyResult('dnsSearchDomains', 'DnsSearchDomains', properties.DnsSearchDomains != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DnsSearchDomains) : undefined);\n    ret.addPropertyResult('dnsServers', 'DnsServers', properties.DnsServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DnsServers) : undefined);\n    ret.addPropertyResult('dockerLabels', 'DockerLabels', properties.DockerLabels != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.DockerLabels) : undefined);\n    ret.addPropertyResult('dockerSecurityOptions', 'DockerSecurityOptions', properties.DockerSecurityOptions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DockerSecurityOptions) : undefined);\n    ret.addPropertyResult('entryPoint', 'EntryPoint', properties.EntryPoint != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EntryPoint) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionKeyValuePairPropertyFromCloudFormation)(properties.Environment) : undefined);\n    ret.addPropertyResult('environmentFiles', 'EnvironmentFiles', properties.EnvironmentFiles != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionEnvironmentFilePropertyFromCloudFormation)(properties.EnvironmentFiles) : undefined);\n    ret.addPropertyResult('essential', 'Essential', properties.Essential != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Essential) : undefined);\n    ret.addPropertyResult('extraHosts', 'ExtraHosts', properties.ExtraHosts != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionHostEntryPropertyFromCloudFormation)(properties.ExtraHosts) : undefined);\n    ret.addPropertyResult('firelensConfiguration', 'FirelensConfiguration', properties.FirelensConfiguration != null ? CfnTaskDefinitionFirelensConfigurationPropertyFromCloudFormation(properties.FirelensConfiguration) : undefined);\n    ret.addPropertyResult('healthCheck', 'HealthCheck', properties.HealthCheck != null ? CfnTaskDefinitionHealthCheckPropertyFromCloudFormation(properties.HealthCheck) : undefined);\n    ret.addPropertyResult('hostname', 'Hostname', properties.Hostname != null ? cfn_parse.FromCloudFormation.getString(properties.Hostname) : undefined);\n    ret.addPropertyResult('image', 'Image', properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined);\n    ret.addPropertyResult('interactive', 'Interactive', properties.Interactive != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Interactive) : undefined);\n    ret.addPropertyResult('links', 'Links', properties.Links != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Links) : undefined);\n    ret.addPropertyResult('linuxParameters', 'LinuxParameters', properties.LinuxParameters != null ? CfnTaskDefinitionLinuxParametersPropertyFromCloudFormation(properties.LinuxParameters) : undefined);\n    ret.addPropertyResult('logConfiguration', 'LogConfiguration', properties.LogConfiguration != null ? CfnTaskDefinitionLogConfigurationPropertyFromCloudFormation(properties.LogConfiguration) : undefined);\n    ret.addPropertyResult('memory', 'Memory', properties.Memory != null ? cfn_parse.FromCloudFormation.getNumber(properties.Memory) : undefined);\n    ret.addPropertyResult('memoryReservation', 'MemoryReservation', properties.MemoryReservation != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemoryReservation) : undefined);\n    ret.addPropertyResult('mountPoints', 'MountPoints', properties.MountPoints != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionMountPointPropertyFromCloudFormation)(properties.MountPoints) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('portMappings', 'PortMappings', properties.PortMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionPortMappingPropertyFromCloudFormation)(properties.PortMappings) : undefined);\n    ret.addPropertyResult('privileged', 'Privileged', properties.Privileged != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Privileged) : undefined);\n    ret.addPropertyResult('pseudoTerminal', 'PseudoTerminal', properties.PseudoTerminal != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PseudoTerminal) : undefined);\n    ret.addPropertyResult('readonlyRootFilesystem', 'ReadonlyRootFilesystem', properties.ReadonlyRootFilesystem != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReadonlyRootFilesystem) : undefined);\n    ret.addPropertyResult('repositoryCredentials', 'RepositoryCredentials', properties.RepositoryCredentials != null ? CfnTaskDefinitionRepositoryCredentialsPropertyFromCloudFormation(properties.RepositoryCredentials) : undefined);\n    ret.addPropertyResult('resourceRequirements', 'ResourceRequirements', properties.ResourceRequirements != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionResourceRequirementPropertyFromCloudFormation)(properties.ResourceRequirements) : undefined);\n    ret.addPropertyResult('secrets', 'Secrets', properties.Secrets != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionSecretPropertyFromCloudFormation)(properties.Secrets) : undefined);\n    ret.addPropertyResult('startTimeout', 'StartTimeout', properties.StartTimeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartTimeout) : undefined);\n    ret.addPropertyResult('stopTimeout', 'StopTimeout', properties.StopTimeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.StopTimeout) : undefined);\n    ret.addPropertyResult('systemControls', 'SystemControls', properties.SystemControls != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionSystemControlPropertyFromCloudFormation)(properties.SystemControls) : undefined);\n    ret.addPropertyResult('ulimits', 'Ulimits', properties.Ulimits != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionUlimitPropertyFromCloudFormation)(properties.Ulimits) : undefined);\n    ret.addPropertyResult('user', 'User', properties.User != null ? cfn_parse.FromCloudFormation.getString(properties.User) : undefined);\n    ret.addPropertyResult('volumesFrom', 'VolumesFrom', properties.VolumesFrom != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionVolumeFromPropertyFromCloudFormation)(properties.VolumesFrom) : undefined);\n    ret.addPropertyResult('workingDirectory', 'WorkingDirectory', properties.WorkingDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.WorkingDirectory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface ContainerDependencyProperty {\nn        readonly condition?: string;\n                                                                                                                                                                                                                                                                         \n        readonly containerName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerDependencyProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerDependencyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_ContainerDependencyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('condition', cdk.validateString)(properties.condition));\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    return errors.wrap('supplied properties not correct for \"ContainerDependencyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ContainerDependency` resource\n *\n * @param properties - the TypeScript properties of a `ContainerDependencyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ContainerDependency` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionContainerDependencyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_ContainerDependencyPropertyValidator(properties).assertSuccess();\n    return {\n        Condition: cdk.stringToCloudFormation(properties.condition),\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionContainerDependencyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.ContainerDependencyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.ContainerDependencyProperty>();\n    ret.addPropertyResult('condition', 'Condition', properties.Condition != null ? cfn_parse.FromCloudFormation.getString(properties.Condition) : undefined);\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                \n    export interface DeviceProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly containerPath?: string;\n                                                                                                                                                                                                                                                                         \n        readonly hostPath?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly permissions?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeviceProperty`\n *\n * @param properties - the TypeScript properties of a `DeviceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_DevicePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerPath', cdk.validateString)(properties.containerPath));\n    errors.collect(cdk.propertyValidator('hostPath', cdk.validateString)(properties.hostPath));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(cdk.validateString))(properties.permissions));\n    return errors.wrap('supplied properties not correct for \"DeviceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Device` resource\n *\n * @param properties - the TypeScript properties of a `DeviceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Device` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionDevicePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_DevicePropertyValidator(properties).assertSuccess();\n    return {\n        ContainerPath: cdk.stringToCloudFormation(properties.containerPath),\n        HostPath: cdk.stringToCloudFormation(properties.hostPath),\n        Permissions: cdk.listMapper(cdk.stringToCloudFormation)(properties.permissions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionDevicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.DeviceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.DeviceProperty>();\n    ret.addPropertyResult('containerPath', 'ContainerPath', properties.ContainerPath != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerPath) : undefined);\n    ret.addPropertyResult('hostPath', 'HostPath', properties.HostPath != null ? cfn_parse.FromCloudFormation.getString(properties.HostPath) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Permissions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface DockerVolumeConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly autoprovision?: boolean | cdk.IResolvable;\nn        readonly driver?: string;\nn        readonly driverOpts?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly labels?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly scope?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DockerVolumeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DockerVolumeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_DockerVolumeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoprovision', cdk.validateBoolean)(properties.autoprovision));\n    errors.collect(cdk.propertyValidator('driver', cdk.validateString)(properties.driver));\n    errors.collect(cdk.propertyValidator('driverOpts', cdk.hashValidator(cdk.validateString))(properties.driverOpts));\n    errors.collect(cdk.propertyValidator('labels', cdk.hashValidator(cdk.validateString))(properties.labels));\n    errors.collect(cdk.propertyValidator('scope', cdk.validateString)(properties.scope));\n    return errors.wrap('supplied properties not correct for \"DockerVolumeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.DockerVolumeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DockerVolumeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.DockerVolumeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionDockerVolumeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_DockerVolumeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Autoprovision: cdk.booleanToCloudFormation(properties.autoprovision),\n        Driver: cdk.stringToCloudFormation(properties.driver),\n        DriverOpts: cdk.hashMapper(cdk.stringToCloudFormation)(properties.driverOpts),\n        Labels: cdk.hashMapper(cdk.stringToCloudFormation)(properties.labels),\n        Scope: cdk.stringToCloudFormation(properties.scope),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionDockerVolumeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.DockerVolumeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.DockerVolumeConfigurationProperty>();\n    ret.addPropertyResult('autoprovision', 'Autoprovision', properties.Autoprovision != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Autoprovision) : undefined);\n    ret.addPropertyResult('driver', 'Driver', properties.Driver != null ? cfn_parse.FromCloudFormation.getString(properties.Driver) : undefined);\n    ret.addPropertyResult('driverOpts', 'DriverOpts', properties.DriverOpts != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.DriverOpts) : undefined);\n    ret.addPropertyResult('labels', 'Labels', properties.Labels != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Labels) : undefined);\n    ret.addPropertyResult('scope', 'Scope', properties.Scope != null ? cfn_parse.FromCloudFormation.getString(properties.Scope) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                       \n    export interface EfsVolumeConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly authorizationConfig?: CfnTaskDefinition.AuthorizationConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                     \n        readonly fileSystemId: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly rootDirectory?: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly transitEncryption?: string;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly transitEncryptionPort?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EfsVolumeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EfsVolumeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_EfsVolumeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authorizationConfig', CfnTaskDefinition_AuthorizationConfigPropertyValidator)(properties.authorizationConfig));\n    errors.collect(cdk.propertyValidator('fileSystemId', cdk.requiredValidator)(properties.fileSystemId));\n    errors.collect(cdk.propertyValidator('fileSystemId', cdk.validateString)(properties.fileSystemId));\n    errors.collect(cdk.propertyValidator('rootDirectory', cdk.validateString)(properties.rootDirectory));\n    errors.collect(cdk.propertyValidator('transitEncryption', cdk.validateString)(properties.transitEncryption));\n    errors.collect(cdk.propertyValidator('transitEncryptionPort', cdk.validateNumber)(properties.transitEncryptionPort));\n    return errors.wrap('supplied properties not correct for \"EfsVolumeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.EfsVolumeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EfsVolumeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.EfsVolumeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionEfsVolumeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_EfsVolumeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AuthorizationConfig: cfnTaskDefinitionAuthorizationConfigPropertyToCloudFormation(properties.authorizationConfig),\n        FileSystemId: cdk.stringToCloudFormation(properties.fileSystemId),\n        RootDirectory: cdk.stringToCloudFormation(properties.rootDirectory),\n        TransitEncryption: cdk.stringToCloudFormation(properties.transitEncryption),\n        TransitEncryptionPort: cdk.numberToCloudFormation(properties.transitEncryptionPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionEfsVolumeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.EfsVolumeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.EfsVolumeConfigurationProperty>();\n    ret.addPropertyResult('authorizationConfig', 'AuthorizationConfig', properties.AuthorizationConfig != null ? CfnTaskDefinitionAuthorizationConfigPropertyFromCloudFormation(properties.AuthorizationConfig) : undefined);\n    ret.addPropertyResult('fileSystemId', 'FileSystemId', cfn_parse.FromCloudFormation.getString(properties.FileSystemId));\n    ret.addPropertyResult('rootDirectory', 'RootDirectory', properties.RootDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.RootDirectory) : undefined);\n    ret.addPropertyResult('transitEncryption', 'TransitEncryption', properties.TransitEncryption != null ? cfn_parse.FromCloudFormation.getString(properties.TransitEncryption) : undefined);\n    ret.addPropertyResult('transitEncryptionPort', 'TransitEncryptionPort', properties.TransitEncryptionPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransitEncryptionPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface EnvironmentFileProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly type?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentFileProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentFileProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_EnvironmentFilePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"EnvironmentFileProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.EnvironmentFile` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentFileProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.EnvironmentFile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionEnvironmentFilePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_EnvironmentFilePropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionEnvironmentFilePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.EnvironmentFileProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.EnvironmentFileProperty>();\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface EphemeralStorageProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly sizeInGiB?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EphemeralStorageProperty`\n *\n * @param properties - the TypeScript properties of a `EphemeralStorageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_EphemeralStoragePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sizeInGiB', cdk.validateNumber)(properties.sizeInGiB));\n    return errors.wrap('supplied properties not correct for \"EphemeralStorageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.EphemeralStorage` resource\n *\n * @param properties - the TypeScript properties of a `EphemeralStorageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.EphemeralStorage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionEphemeralStoragePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_EphemeralStoragePropertyValidator(properties).assertSuccess();\n    return {\n        SizeInGiB: cdk.numberToCloudFormation(properties.sizeInGiB),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionEphemeralStoragePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.EphemeralStorageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.EphemeralStorageProperty>();\n    ret.addPropertyResult('sizeInGiB', 'SizeInGiB', properties.SizeInGiB != null ? cfn_parse.FromCloudFormation.getNumber(properties.SizeInGiB) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface FirelensConfigurationProperty {\nn        readonly options?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FirelensConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `FirelensConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_FirelensConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('options', cdk.hashValidator(cdk.validateString))(properties.options));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"FirelensConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.FirelensConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `FirelensConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.FirelensConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionFirelensConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_FirelensConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Options: cdk.hashMapper(cdk.stringToCloudFormation)(properties.options),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionFirelensConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.FirelensConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.FirelensConfigurationProperty>();\n    ret.addPropertyResult('options', 'Options', properties.Options != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Options) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface HealthCheckProperty {\nn        readonly command?: string[];\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly interval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly retries?: number;\nn        readonly startPeriod?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly timeout?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HealthCheckProperty`\n *\n * @param properties - the TypeScript properties of a `HealthCheckProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_HealthCheckPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('command', cdk.listValidator(cdk.validateString))(properties.command));\n    errors.collect(cdk.propertyValidator('interval', cdk.validateNumber)(properties.interval));\n    errors.collect(cdk.propertyValidator('retries', cdk.validateNumber)(properties.retries));\n    errors.collect(cdk.propertyValidator('startPeriod', cdk.validateNumber)(properties.startPeriod));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    return errors.wrap('supplied properties not correct for \"HealthCheckProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.HealthCheck` resource\n *\n * @param properties - the TypeScript properties of a `HealthCheckProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.HealthCheck` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionHealthCheckPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_HealthCheckPropertyValidator(properties).assertSuccess();\n    return {\n        Command: cdk.listMapper(cdk.stringToCloudFormation)(properties.command),\n        Interval: cdk.numberToCloudFormation(properties.interval),\n        Retries: cdk.numberToCloudFormation(properties.retries),\n        StartPeriod: cdk.numberToCloudFormation(properties.startPeriod),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionHealthCheckPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.HealthCheckProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.HealthCheckProperty>();\n    ret.addPropertyResult('command', 'Command', properties.Command != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Command) : undefined);\n    ret.addPropertyResult('interval', 'Interval', properties.Interval != null ? cfn_parse.FromCloudFormation.getNumber(properties.Interval) : undefined);\n    ret.addPropertyResult('retries', 'Retries', properties.Retries != null ? cfn_parse.FromCloudFormation.getNumber(properties.Retries) : undefined);\n    ret.addPropertyResult('startPeriod', 'StartPeriod', properties.StartPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartPeriod) : undefined);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface HostEntryProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly hostname?: string;\n                                                                                                                                                                                                                                                                                                                  \n        readonly ipAddress?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HostEntryProperty`\n *\n * @param properties - the TypeScript properties of a `HostEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_HostEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hostname', cdk.validateString)(properties.hostname));\n    errors.collect(cdk.propertyValidator('ipAddress', cdk.validateString)(properties.ipAddress));\n    return errors.wrap('supplied properties not correct for \"HostEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.HostEntry` resource\n *\n * @param properties - the TypeScript properties of a `HostEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.HostEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionHostEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_HostEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Hostname: cdk.stringToCloudFormation(properties.hostname),\n        IpAddress: cdk.stringToCloudFormation(properties.ipAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionHostEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.HostEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.HostEntryProperty>();\n    ret.addPropertyResult('hostname', 'Hostname', properties.Hostname != null ? cfn_parse.FromCloudFormation.getString(properties.Hostname) : undefined);\n    ret.addPropertyResult('ipAddress', 'IpAddress', properties.IpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.IpAddress) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                   \n    export interface HostVolumePropertiesProperty {\nn        readonly sourcePath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HostVolumePropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `HostVolumePropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_HostVolumePropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));\n    return errors.wrap('supplied properties not correct for \"HostVolumePropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.HostVolumeProperties` resource\n *\n * @param properties - the TypeScript properties of a `HostVolumePropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.HostVolumeProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionHostVolumePropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_HostVolumePropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionHostVolumePropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.HostVolumePropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.HostVolumePropertiesProperty>();\n    ret.addPropertyResult('sourcePath', 'SourcePath', properties.SourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface InferenceAcceleratorProperty {\nn        readonly deviceName?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly deviceType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InferenceAcceleratorProperty`\n *\n * @param properties - the TypeScript properties of a `InferenceAcceleratorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_InferenceAcceleratorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('deviceType', cdk.validateString)(properties.deviceType));\n    return errors.wrap('supplied properties not correct for \"InferenceAcceleratorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.InferenceAccelerator` resource\n *\n * @param properties - the TypeScript properties of a `InferenceAcceleratorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.InferenceAccelerator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionInferenceAcceleratorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_InferenceAcceleratorPropertyValidator(properties).assertSuccess();\n    return {\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        DeviceType: cdk.stringToCloudFormation(properties.deviceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionInferenceAcceleratorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.InferenceAcceleratorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.InferenceAcceleratorProperty>();\n    ret.addPropertyResult('deviceName', 'DeviceName', properties.DeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceName) : undefined);\n    ret.addPropertyResult('deviceType', 'DeviceType', properties.DeviceType != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface KernelCapabilitiesProperty {\nn        readonly add?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly drop?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KernelCapabilitiesProperty`\n *\n * @param properties - the TypeScript properties of a `KernelCapabilitiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_KernelCapabilitiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('add', cdk.listValidator(cdk.validateString))(properties.add));\n    errors.collect(cdk.propertyValidator('drop', cdk.listValidator(cdk.validateString))(properties.drop));\n    return errors.wrap('supplied properties not correct for \"KernelCapabilitiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.KernelCapabilities` resource\n *\n * @param properties - the TypeScript properties of a `KernelCapabilitiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.KernelCapabilities` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionKernelCapabilitiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_KernelCapabilitiesPropertyValidator(properties).assertSuccess();\n    return {\n        Add: cdk.listMapper(cdk.stringToCloudFormation)(properties.add),\n        Drop: cdk.listMapper(cdk.stringToCloudFormation)(properties.drop),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionKernelCapabilitiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.KernelCapabilitiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.KernelCapabilitiesProperty>();\n    ret.addPropertyResult('add', 'Add', properties.Add != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Add) : undefined);\n    ret.addPropertyResult('drop', 'Drop', properties.Drop != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Drop) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                \n    export interface KeyValuePairProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KeyValuePairProperty`\n *\n * @param properties - the TypeScript properties of a `KeyValuePairProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_KeyValuePairPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"KeyValuePairProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.KeyValuePair` resource\n *\n * @param properties - the TypeScript properties of a `KeyValuePairProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.KeyValuePair` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionKeyValuePairPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_KeyValuePairPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionKeyValuePairPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.KeyValuePairProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.KeyValuePairProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface LinuxParametersProperty {\nn        readonly capabilities?: CfnTaskDefinition.KernelCapabilitiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly devices?: Array<CfnTaskDefinition.DeviceProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly initProcessEnabled?: boolean | cdk.IResolvable;\nn        readonly maxSwap?: number;\nn        readonly sharedMemorySize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly swappiness?: number;\nn        readonly tmpfs?: Array<CfnTaskDefinition.TmpfsProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LinuxParametersProperty`\n *\n * @param properties - the TypeScript properties of a `LinuxParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_LinuxParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capabilities', CfnTaskDefinition_KernelCapabilitiesPropertyValidator)(properties.capabilities));\n    errors.collect(cdk.propertyValidator('devices', cdk.listValidator(CfnTaskDefinition_DevicePropertyValidator))(properties.devices));\n    errors.collect(cdk.propertyValidator('initProcessEnabled', cdk.validateBoolean)(properties.initProcessEnabled));\n    errors.collect(cdk.propertyValidator('maxSwap', cdk.validateNumber)(properties.maxSwap));\n    errors.collect(cdk.propertyValidator('sharedMemorySize', cdk.validateNumber)(properties.sharedMemorySize));\n    errors.collect(cdk.propertyValidator('swappiness', cdk.validateNumber)(properties.swappiness));\n    errors.collect(cdk.propertyValidator('tmpfs', cdk.listValidator(CfnTaskDefinition_TmpfsPropertyValidator))(properties.tmpfs));\n    return errors.wrap('supplied properties not correct for \"LinuxParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.LinuxParameters` resource\n *\n * @param properties - the TypeScript properties of a `LinuxParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.LinuxParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionLinuxParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_LinuxParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Capabilities: cfnTaskDefinitionKernelCapabilitiesPropertyToCloudFormation(properties.capabilities),\n        Devices: cdk.listMapper(cfnTaskDefinitionDevicePropertyToCloudFormation)(properties.devices),\n        InitProcessEnabled: cdk.booleanToCloudFormation(properties.initProcessEnabled),\n        MaxSwap: cdk.numberToCloudFormation(properties.maxSwap),\n        SharedMemorySize: cdk.numberToCloudFormation(properties.sharedMemorySize),\n        Swappiness: cdk.numberToCloudFormation(properties.swappiness),\n        Tmpfs: cdk.listMapper(cfnTaskDefinitionTmpfsPropertyToCloudFormation)(properties.tmpfs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionLinuxParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.LinuxParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.LinuxParametersProperty>();\n    ret.addPropertyResult('capabilities', 'Capabilities', properties.Capabilities != null ? CfnTaskDefinitionKernelCapabilitiesPropertyFromCloudFormation(properties.Capabilities) : undefined);\n    ret.addPropertyResult('devices', 'Devices', properties.Devices != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionDevicePropertyFromCloudFormation)(properties.Devices) : undefined);\n    ret.addPropertyResult('initProcessEnabled', 'InitProcessEnabled', properties.InitProcessEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.InitProcessEnabled) : undefined);\n    ret.addPropertyResult('maxSwap', 'MaxSwap', properties.MaxSwap != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxSwap) : undefined);\n    ret.addPropertyResult('sharedMemorySize', 'SharedMemorySize', properties.SharedMemorySize != null ? cfn_parse.FromCloudFormation.getNumber(properties.SharedMemorySize) : undefined);\n    ret.addPropertyResult('swappiness', 'Swappiness', properties.Swappiness != null ? cfn_parse.FromCloudFormation.getNumber(properties.Swappiness) : undefined);\n    ret.addPropertyResult('tmpfs', 'Tmpfs', properties.Tmpfs != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionTmpfsPropertyFromCloudFormation)(properties.Tmpfs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                            \n    export interface LogConfigurationProperty {\nn        readonly logDriver: string;\nn        readonly options?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly secretOptions?: Array<CfnTaskDefinition.SecretProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LogConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_LogConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logDriver', cdk.requiredValidator)(properties.logDriver));\n    errors.collect(cdk.propertyValidator('logDriver', cdk.validateString)(properties.logDriver));\n    errors.collect(cdk.propertyValidator('options', cdk.hashValidator(cdk.validateString))(properties.options));\n    errors.collect(cdk.propertyValidator('secretOptions', cdk.listValidator(CfnTaskDefinition_SecretPropertyValidator))(properties.secretOptions));\n    return errors.wrap('supplied properties not correct for \"LogConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.LogConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LogConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.LogConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionLogConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_LogConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        LogDriver: cdk.stringToCloudFormation(properties.logDriver),\n        Options: cdk.hashMapper(cdk.stringToCloudFormation)(properties.options),\n        SecretOptions: cdk.listMapper(cfnTaskDefinitionSecretPropertyToCloudFormation)(properties.secretOptions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionLogConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.LogConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.LogConfigurationProperty>();\n    ret.addPropertyResult('logDriver', 'LogDriver', cfn_parse.FromCloudFormation.getString(properties.LogDriver));\n    ret.addPropertyResult('options', 'Options', properties.Options != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Options) : undefined);\n    ret.addPropertyResult('secretOptions', 'SecretOptions', properties.SecretOptions != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionSecretPropertyFromCloudFormation)(properties.SecretOptions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                             \n    export interface MountPointProperty {\n                                                                                                                                                                                                                                                                                                                                \n        readonly containerPath?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly readOnly?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly sourceVolume?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MountPointProperty`\n *\n * @param properties - the TypeScript properties of a `MountPointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_MountPointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerPath', cdk.validateString)(properties.containerPath));\n    errors.collect(cdk.propertyValidator('readOnly', cdk.validateBoolean)(properties.readOnly));\n    errors.collect(cdk.propertyValidator('sourceVolume', cdk.validateString)(properties.sourceVolume));\n    return errors.wrap('supplied properties not correct for \"MountPointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.MountPoint` resource\n *\n * @param properties - the TypeScript properties of a `MountPointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.MountPoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionMountPointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_MountPointPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerPath: cdk.stringToCloudFormation(properties.containerPath),\n        ReadOnly: cdk.booleanToCloudFormation(properties.readOnly),\n        SourceVolume: cdk.stringToCloudFormation(properties.sourceVolume),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionMountPointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.MountPointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.MountPointProperty>();\n    ret.addPropertyResult('containerPath', 'ContainerPath', properties.ContainerPath != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerPath) : undefined);\n    ret.addPropertyResult('readOnly', 'ReadOnly', properties.ReadOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReadOnly) : undefined);\n    ret.addPropertyResult('sourceVolume', 'SourceVolume', properties.SourceVolume != null ? cfn_parse.FromCloudFormation.getString(properties.SourceVolume) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface PortMappingProperty {\nn        readonly containerPort?: number;\nn        readonly hostPort?: number;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly protocol?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PortMappingProperty`\n *\n * @param properties - the TypeScript properties of a `PortMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_PortMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerPort', cdk.validateNumber)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('hostPort', cdk.validateNumber)(properties.hostPort));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    return errors.wrap('supplied properties not correct for \"PortMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.PortMapping` resource\n *\n * @param properties - the TypeScript properties of a `PortMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.PortMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionPortMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_PortMappingPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerPort: cdk.numberToCloudFormation(properties.containerPort),\n        HostPort: cdk.numberToCloudFormation(properties.hostPort),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionPortMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.PortMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.PortMappingProperty>();\n    ret.addPropertyResult('containerPort', 'ContainerPort', properties.ContainerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerPort) : undefined);\n    ret.addPropertyResult('hostPort', 'HostPort', properties.HostPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.HostPort) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface ProxyConfigurationProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly containerName: string;\nn        readonly proxyConfigurationProperties?: Array<CfnTaskDefinition.KeyValuePairProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProxyConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ProxyConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_ProxyConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerName', cdk.requiredValidator)(properties.containerName));\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('proxyConfigurationProperties', cdk.listValidator(CfnTaskDefinition_KeyValuePairPropertyValidator))(properties.proxyConfigurationProperties));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ProxyConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ProxyConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ProxyConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ProxyConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionProxyConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_ProxyConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        ProxyConfigurationProperties: cdk.listMapper(cfnTaskDefinitionKeyValuePairPropertyToCloudFormation)(properties.proxyConfigurationProperties),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionProxyConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.ProxyConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.ProxyConfigurationProperty>();\n    ret.addPropertyResult('containerName', 'ContainerName', cfn_parse.FromCloudFormation.getString(properties.ContainerName));\n    ret.addPropertyResult('proxyConfigurationProperties', 'ProxyConfigurationProperties', properties.ProxyConfigurationProperties != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskDefinitionKeyValuePairPropertyFromCloudFormation)(properties.ProxyConfigurationProperties) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface RepositoryCredentialsProperty {\nn        readonly credentialsParameter?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RepositoryCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `RepositoryCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_RepositoryCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('credentialsParameter', cdk.validateString)(properties.credentialsParameter));\n    return errors.wrap('supplied properties not correct for \"RepositoryCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.RepositoryCredentials` resource\n *\n * @param properties - the TypeScript properties of a `RepositoryCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.RepositoryCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionRepositoryCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_RepositoryCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        CredentialsParameter: cdk.stringToCloudFormation(properties.credentialsParameter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionRepositoryCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.RepositoryCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.RepositoryCredentialsProperty>();\n    ret.addPropertyResult('credentialsParameter', 'CredentialsParameter', properties.CredentialsParameter != null ? cfn_parse.FromCloudFormation.getString(properties.CredentialsParameter) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface ResourceRequirementProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly type: string;\nn        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceRequirementProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceRequirementProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_ResourceRequirementPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ResourceRequirementProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ResourceRequirement` resource\n *\n * @param properties - the TypeScript properties of a `ResourceRequirementProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.ResourceRequirement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionResourceRequirementPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_ResourceRequirementPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionResourceRequirementPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.ResourceRequirementProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.ResourceRequirementProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface RuntimePlatformProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly cpuArchitecture?: string;\n                                                                                                                                                                                                                                                                      \n        readonly operatingSystemFamily?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuntimePlatformProperty`\n *\n * @param properties - the TypeScript properties of a `RuntimePlatformProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_RuntimePlatformPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpuArchitecture', cdk.validateString)(properties.cpuArchitecture));\n    errors.collect(cdk.propertyValidator('operatingSystemFamily', cdk.validateString)(properties.operatingSystemFamily));\n    return errors.wrap('supplied properties not correct for \"RuntimePlatformProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.RuntimePlatform` resource\n *\n * @param properties - the TypeScript properties of a `RuntimePlatformProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.RuntimePlatform` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionRuntimePlatformPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_RuntimePlatformPropertyValidator(properties).assertSuccess();\n    return {\n        CpuArchitecture: cdk.stringToCloudFormation(properties.cpuArchitecture),\n        OperatingSystemFamily: cdk.stringToCloudFormation(properties.operatingSystemFamily),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionRuntimePlatformPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.RuntimePlatformProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.RuntimePlatformProperty>();\n    ret.addPropertyResult('cpuArchitecture', 'CpuArchitecture', properties.CpuArchitecture != null ? cfn_parse.FromCloudFormation.getString(properties.CpuArchitecture) : undefined);\n    ret.addPropertyResult('operatingSystemFamily', 'OperatingSystemFamily', properties.OperatingSystemFamily != null ? cfn_parse.FromCloudFormation.getString(properties.OperatingSystemFamily) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface SecretProperty {\n                                                                                                                                                                                                                                     \n        readonly name: string;\nn        readonly valueFrom: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SecretProperty`\n *\n * @param properties - the TypeScript properties of a `SecretProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_SecretPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('valueFrom', cdk.requiredValidator)(properties.valueFrom));\n    errors.collect(cdk.propertyValidator('valueFrom', cdk.validateString)(properties.valueFrom));\n    return errors.wrap('supplied properties not correct for \"SecretProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Secret` resource\n *\n * @param properties - the TypeScript properties of a `SecretProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Secret` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionSecretPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_SecretPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ValueFrom: cdk.stringToCloudFormation(properties.valueFrom),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionSecretPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.SecretProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.SecretProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('valueFrom', 'ValueFrom', cfn_parse.FromCloudFormation.getString(properties.ValueFrom));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface SystemControlProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly namespace?: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SystemControlProperty`\n *\n * @param properties - the TypeScript properties of a `SystemControlProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_SystemControlPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('namespace', cdk.validateString)(properties.namespace));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"SystemControlProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.SystemControl` resource\n *\n * @param properties - the TypeScript properties of a `SystemControlProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.SystemControl` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionSystemControlPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_SystemControlPropertyValidator(properties).assertSuccess();\n    return {\n        Namespace: cdk.stringToCloudFormation(properties.namespace),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionSystemControlPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.SystemControlProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.SystemControlProperty>();\n    ret.addPropertyResult('namespace', 'Namespace', properties.Namespace != null ? cfn_parse.FromCloudFormation.getString(properties.Namespace) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface TaskDefinitionPlacementConstraintProperty {\nn        readonly expression?: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TaskDefinitionPlacementConstraintProperty`\n *\n * @param properties - the TypeScript properties of a `TaskDefinitionPlacementConstraintProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_TaskDefinitionPlacementConstraintPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('expression', cdk.validateString)(properties.expression));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"TaskDefinitionPlacementConstraintProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint` resource\n *\n * @param properties - the TypeScript properties of a `TaskDefinitionPlacementConstraintProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionTaskDefinitionPlacementConstraintPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_TaskDefinitionPlacementConstraintPropertyValidator(properties).assertSuccess();\n    return {\n        Expression: cdk.stringToCloudFormation(properties.expression),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionTaskDefinitionPlacementConstraintPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty>();\n    ret.addPropertyResult('expression', 'Expression', properties.Expression != null ? cfn_parse.FromCloudFormation.getString(properties.Expression) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                     \n    export interface TmpfsProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly containerPath?: string;\nn        readonly mountOptions?: string[];\n                                                                                                                                                                                                                                                          \n        readonly size: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TmpfsProperty`\n *\n * @param properties - the TypeScript properties of a `TmpfsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_TmpfsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerPath', cdk.validateString)(properties.containerPath));\n    errors.collect(cdk.propertyValidator('mountOptions', cdk.listValidator(cdk.validateString))(properties.mountOptions));\n    errors.collect(cdk.propertyValidator('size', cdk.requiredValidator)(properties.size));\n    errors.collect(cdk.propertyValidator('size', cdk.validateNumber)(properties.size));\n    return errors.wrap('supplied properties not correct for \"TmpfsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Tmpfs` resource\n *\n * @param properties - the TypeScript properties of a `TmpfsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Tmpfs` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionTmpfsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_TmpfsPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerPath: cdk.stringToCloudFormation(properties.containerPath),\n        MountOptions: cdk.listMapper(cdk.stringToCloudFormation)(properties.mountOptions),\n        Size: cdk.numberToCloudFormation(properties.size),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionTmpfsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.TmpfsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.TmpfsProperty>();\n    ret.addPropertyResult('containerPath', 'ContainerPath', properties.ContainerPath != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerPath) : undefined);\n    ret.addPropertyResult('mountOptions', 'MountOptions', properties.MountOptions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.MountOptions) : undefined);\n    ret.addPropertyResult('size', 'Size', cfn_parse.FromCloudFormation.getNumber(properties.Size));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                            \n    export interface UlimitProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly hardLimit: number;\n                                                                                                                                                                                                                                                                                   \n        readonly name: string;\n                                                                                                                                                                                                                                                                                               \n        readonly softLimit: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UlimitProperty`\n *\n * @param properties - the TypeScript properties of a `UlimitProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_UlimitPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hardLimit', cdk.requiredValidator)(properties.hardLimit));\n    errors.collect(cdk.propertyValidator('hardLimit', cdk.validateNumber)(properties.hardLimit));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('softLimit', cdk.requiredValidator)(properties.softLimit));\n    errors.collect(cdk.propertyValidator('softLimit', cdk.validateNumber)(properties.softLimit));\n    return errors.wrap('supplied properties not correct for \"UlimitProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Ulimit` resource\n *\n * @param properties - the TypeScript properties of a `UlimitProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Ulimit` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionUlimitPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_UlimitPropertyValidator(properties).assertSuccess();\n    return {\n        HardLimit: cdk.numberToCloudFormation(properties.hardLimit),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SoftLimit: cdk.numberToCloudFormation(properties.softLimit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionUlimitPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.UlimitProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.UlimitProperty>();\n    ret.addPropertyResult('hardLimit', 'HardLimit', cfn_parse.FromCloudFormation.getNumber(properties.HardLimit));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('softLimit', 'SoftLimit', cfn_parse.FromCloudFormation.getNumber(properties.SoftLimit));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\nn    export interface VolumeProperty {\nn        readonly dockerVolumeConfiguration?: CfnTaskDefinition.DockerVolumeConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly efsVolumeConfiguration?: CfnTaskDefinition.EfsVolumeConfigurationProperty | cdk.IResolvable;\nn        readonly host?: CfnTaskDefinition.HostVolumePropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VolumeProperty`\n *\n * @param properties - the TypeScript properties of a `VolumeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_VolumePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dockerVolumeConfiguration', CfnTaskDefinition_DockerVolumeConfigurationPropertyValidator)(properties.dockerVolumeConfiguration));\n    errors.collect(cdk.propertyValidator('efsVolumeConfiguration', CfnTaskDefinition_EfsVolumeConfigurationPropertyValidator)(properties.efsVolumeConfiguration));\n    errors.collect(cdk.propertyValidator('host', CfnTaskDefinition_HostVolumePropertiesPropertyValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"VolumeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Volume` resource\n *\n * @param properties - the TypeScript properties of a `VolumeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.Volume` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionVolumePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_VolumePropertyValidator(properties).assertSuccess();\n    return {\n        DockerVolumeConfiguration: cfnTaskDefinitionDockerVolumeConfigurationPropertyToCloudFormation(properties.dockerVolumeConfiguration),\n        EfsVolumeConfiguration: cfnTaskDefinitionEfsVolumeConfigurationPropertyToCloudFormation(properties.efsVolumeConfiguration),\n        Host: cfnTaskDefinitionHostVolumePropertiesPropertyToCloudFormation(properties.host),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionVolumePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.VolumeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.VolumeProperty>();\n    ret.addPropertyResult('dockerVolumeConfiguration', 'DockerVolumeConfiguration', properties.DockerVolumeConfiguration != null ? CfnTaskDefinitionDockerVolumeConfigurationPropertyFromCloudFormation(properties.DockerVolumeConfiguration) : undefined);\n    ret.addPropertyResult('efsVolumeConfiguration', 'EfsVolumeConfiguration', properties.EfsVolumeConfiguration != null ? CfnTaskDefinitionEfsVolumeConfigurationPropertyFromCloudFormation(properties.EfsVolumeConfiguration) : undefined);\n    ret.addPropertyResult('host', 'Host', properties.Host != null ? CfnTaskDefinitionHostVolumePropertiesPropertyFromCloudFormation(properties.Host) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskDefinition {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface VolumeFromProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly readOnly?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly sourceContainer?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VolumeFromProperty`\n *\n * @param properties - the TypeScript properties of a `VolumeFromProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskDefinition_VolumeFromPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('readOnly', cdk.validateBoolean)(properties.readOnly));\n    errors.collect(cdk.propertyValidator('sourceContainer', cdk.validateString)(properties.sourceContainer));\n    return errors.wrap('supplied properties not correct for \"VolumeFromProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.VolumeFrom` resource\n *\n * @param properties - the TypeScript properties of a `VolumeFromProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskDefinition.VolumeFrom` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskDefinitionVolumeFromPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskDefinition_VolumeFromPropertyValidator(properties).assertSuccess();\n    return {\n        ReadOnly: cdk.booleanToCloudFormation(properties.readOnly),\n        SourceContainer: cdk.stringToCloudFormation(properties.sourceContainer),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskDefinitionVolumeFromPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskDefinition.VolumeFromProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskDefinition.VolumeFromProperty>();\n    ret.addPropertyResult('readOnly', 'ReadOnly', properties.ReadOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReadOnly) : undefined);\n    ret.addPropertyResult('sourceContainer', 'SourceContainer', properties.SourceContainer != null ? cfn_parse.FromCloudFormation.getString(properties.SourceContainer) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                              \nexport interface CfnTaskSetProps {\n\n                                                                                                                                                                                                                                                                                 \n    readonly cluster: string;\n\n                                                                                                                                                                                                                                                          \n    readonly service: string;\n\n                                                                                                                                                                                                                               \n    readonly taskDefinition: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly externalId?: string;\n\nn    readonly launchType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    readonly loadBalancers?: Array<CfnTaskSet.LoadBalancerProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                       \n    readonly networkConfiguration?: CfnTaskSet.NetworkConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                             \n    readonly platformVersion?: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly scale?: CfnTaskSet.ScaleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly serviceRegistries?: Array<CfnTaskSet.ServiceRegistryProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTaskSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnTaskSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cluster', cdk.requiredValidator)(properties.cluster));\n    errors.collect(cdk.propertyValidator('cluster', cdk.validateString)(properties.cluster));\n    errors.collect(cdk.propertyValidator('externalId', cdk.validateString)(properties.externalId));\n    errors.collect(cdk.propertyValidator('launchType', cdk.validateString)(properties.launchType));\n    errors.collect(cdk.propertyValidator('loadBalancers', cdk.listValidator(CfnTaskSet_LoadBalancerPropertyValidator))(properties.loadBalancers));\n    errors.collect(cdk.propertyValidator('networkConfiguration', CfnTaskSet_NetworkConfigurationPropertyValidator)(properties.networkConfiguration));\n    errors.collect(cdk.propertyValidator('platformVersion', cdk.validateString)(properties.platformVersion));\n    errors.collect(cdk.propertyValidator('scale', CfnTaskSet_ScalePropertyValidator)(properties.scale));\n    errors.collect(cdk.propertyValidator('service', cdk.requiredValidator)(properties.service));\n    errors.collect(cdk.propertyValidator('service', cdk.validateString)(properties.service));\n    errors.collect(cdk.propertyValidator('serviceRegistries', cdk.listValidator(CfnTaskSet_ServiceRegistryPropertyValidator))(properties.serviceRegistries));\n    errors.collect(cdk.propertyValidator('taskDefinition', cdk.requiredValidator)(properties.taskDefinition));\n    errors.collect(cdk.propertyValidator('taskDefinition', cdk.validateString)(properties.taskDefinition));\n    return errors.wrap('supplied properties not correct for \"CfnTaskSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnTaskSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskSetPropsValidator(properties).assertSuccess();\n    return {\n        Cluster: cdk.stringToCloudFormation(properties.cluster),\n        Service: cdk.stringToCloudFormation(properties.service),\n        TaskDefinition: cdk.stringToCloudFormation(properties.taskDefinition),\n        ExternalId: cdk.stringToCloudFormation(properties.externalId),\n        LaunchType: cdk.stringToCloudFormation(properties.launchType),\n        LoadBalancers: cdk.listMapper(cfnTaskSetLoadBalancerPropertyToCloudFormation)(properties.loadBalancers),\n        NetworkConfiguration: cfnTaskSetNetworkConfigurationPropertyToCloudFormation(properties.networkConfiguration),\n        PlatformVersion: cdk.stringToCloudFormation(properties.platformVersion),\n        Scale: cfnTaskSetScalePropertyToCloudFormation(properties.scale),\n        ServiceRegistries: cdk.listMapper(cfnTaskSetServiceRegistryPropertyToCloudFormation)(properties.serviceRegistries),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskSetProps>();\n    ret.addPropertyResult('cluster', 'Cluster', cfn_parse.FromCloudFormation.getString(properties.Cluster));\n    ret.addPropertyResult('service', 'Service', cfn_parse.FromCloudFormation.getString(properties.Service));\n    ret.addPropertyResult('taskDefinition', 'TaskDefinition', cfn_parse.FromCloudFormation.getString(properties.TaskDefinition));\n    ret.addPropertyResult('externalId', 'ExternalId', properties.ExternalId != null ? cfn_parse.FromCloudFormation.getString(properties.ExternalId) : undefined);\n    ret.addPropertyResult('launchType', 'LaunchType', properties.LaunchType != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchType) : undefined);\n    ret.addPropertyResult('loadBalancers', 'LoadBalancers', properties.LoadBalancers != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskSetLoadBalancerPropertyFromCloudFormation)(properties.LoadBalancers) : undefined);\n    ret.addPropertyResult('networkConfiguration', 'NetworkConfiguration', properties.NetworkConfiguration != null ? CfnTaskSetNetworkConfigurationPropertyFromCloudFormation(properties.NetworkConfiguration) : undefined);\n    ret.addPropertyResult('platformVersion', 'PlatformVersion', properties.PlatformVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformVersion) : undefined);\n    ret.addPropertyResult('scale', 'Scale', properties.Scale != null ? CfnTaskSetScalePropertyFromCloudFormation(properties.Scale) : undefined);\n    ret.addPropertyResult('serviceRegistries', 'ServiceRegistries', properties.ServiceRegistries != null ? cfn_parse.FromCloudFormation.getArray(CfnTaskSetServiceRegistryPropertyFromCloudFormation)(properties.ServiceRegistries) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTaskSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ECS::TaskSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTaskSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTaskSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTaskSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                 \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                 \n    public cluster: string;\n\n                                                                                                                                                                                                                                                          \n    public service: string;\n\n                                                                                                                                                                                                                               \n    public taskDefinition: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public externalId: string | undefined;\n\nn    public launchType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public loadBalancers: Array<CfnTaskSet.LoadBalancerProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    public networkConfiguration: CfnTaskSet.NetworkConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                             \n    public platformVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public scale: CfnTaskSet.ScaleProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    public serviceRegistries: Array<CfnTaskSet.ServiceRegistryProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnTaskSetProps) {\n        super(scope, id, { type: CfnTaskSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cluster', this);\n        cdk.requireProperty(props, 'service', this);\n        cdk.requireProperty(props, 'taskDefinition', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.cluster = props.cluster;\n        this.service = props.service;\n        this.taskDefinition = props.taskDefinition;\n        this.externalId = props.externalId;\n        this.launchType = props.launchType;\n        this.loadBalancers = props.loadBalancers;\n        this.networkConfiguration = props.networkConfiguration;\n        this.platformVersion = props.platformVersion;\n        this.scale = props.scale;\n        this.serviceRegistries = props.serviceRegistries;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTaskSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cluster: this.cluster,\n            service: this.service,\n            taskDefinition: this.taskDefinition,\n            externalId: this.externalId,\n            launchType: this.launchType,\n            loadBalancers: this.loadBalancers,\n            networkConfiguration: this.networkConfiguration,\n            platformVersion: this.platformVersion,\n            scale: this.scale,\n            serviceRegistries: this.serviceRegistries,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTaskSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTaskSet {\n                                                                                                                                                                                                                                                \n    export interface AwsVpcConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly assignPublicIp?: string;\nn        readonly securityGroups?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AwsVpcConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AwsVpcConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskSet_AwsVpcConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assignPublicIp', cdk.validateString)(properties.assignPublicIp));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"AwsVpcConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskSet.AwsVpcConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AwsVpcConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskSet.AwsVpcConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskSetAwsVpcConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskSet_AwsVpcConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AssignPublicIp: cdk.stringToCloudFormation(properties.assignPublicIp),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskSetAwsVpcConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskSet.AwsVpcConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskSet.AwsVpcConfigurationProperty>();\n    ret.addPropertyResult('assignPublicIp', 'AssignPublicIp', properties.AssignPublicIp != null ? cfn_parse.FromCloudFormation.getString(properties.AssignPublicIp) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskSet {\n                                                                                                                                                                                                                                                                             \n    export interface LoadBalancerProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly containerName?: string;\nn        readonly containerPort?: number;\nn        readonly loadBalancerName?: string;\nn        readonly targetGroupArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoadBalancerProperty`\n *\n * @param properties - the TypeScript properties of a `LoadBalancerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskSet_LoadBalancerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('containerPort', cdk.validateNumber)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.validateString)(properties.loadBalancerName));\n    errors.collect(cdk.propertyValidator('targetGroupArn', cdk.validateString)(properties.targetGroupArn));\n    return errors.wrap('supplied properties not correct for \"LoadBalancerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskSet.LoadBalancer` resource\n *\n * @param properties - the TypeScript properties of a `LoadBalancerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskSet.LoadBalancer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskSetLoadBalancerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskSet_LoadBalancerPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        ContainerPort: cdk.numberToCloudFormation(properties.containerPort),\n        LoadBalancerName: cdk.stringToCloudFormation(properties.loadBalancerName),\n        TargetGroupArn: cdk.stringToCloudFormation(properties.targetGroupArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskSetLoadBalancerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskSet.LoadBalancerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskSet.LoadBalancerProperty>();\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addPropertyResult('containerPort', 'ContainerPort', properties.ContainerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerPort) : undefined);\n    ret.addPropertyResult('loadBalancerName', 'LoadBalancerName', properties.LoadBalancerName != null ? cfn_parse.FromCloudFormation.getString(properties.LoadBalancerName) : undefined);\n    ret.addPropertyResult('targetGroupArn', 'TargetGroupArn', properties.TargetGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.TargetGroupArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskSet {\n                                                                                                                                                                                                                                                    \n    export interface NetworkConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly awsVpcConfiguration?: CfnTaskSet.AwsVpcConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskSet_NetworkConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsVpcConfiguration', CfnTaskSet_AwsVpcConfigurationPropertyValidator)(properties.awsVpcConfiguration));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskSet.NetworkConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskSet.NetworkConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskSetNetworkConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskSet_NetworkConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AwsVpcConfiguration: cfnTaskSetAwsVpcConfigurationPropertyToCloudFormation(properties.awsVpcConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskSetNetworkConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskSet.NetworkConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskSet.NetworkConfigurationProperty>();\n    ret.addPropertyResult('awsVpcConfiguration', 'AwsVpcConfiguration', properties.AwsVpcConfiguration != null ? CfnTaskSetAwsVpcConfigurationPropertyFromCloudFormation(properties.AwsVpcConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskSet {\n                                                                                                                                                                                                                                                                                                     \n    export interface ScaleProperty {\n                                                                                                                                                                                                                                      \n        readonly unit?: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly value?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScaleProperty`\n *\n * @param properties - the TypeScript properties of a `ScaleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskSet_ScalePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('unit', cdk.validateString)(properties.unit));\n    errors.collect(cdk.propertyValidator('value', cdk.validateNumber)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ScaleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskSet.Scale` resource\n *\n * @param properties - the TypeScript properties of a `ScaleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskSet.Scale` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskSetScalePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskSet_ScalePropertyValidator(properties).assertSuccess();\n    return {\n        Unit: cdk.stringToCloudFormation(properties.unit),\n        Value: cdk.numberToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskSetScalePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskSet.ScaleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskSet.ScaleProperty>();\n    ret.addPropertyResult('unit', 'Unit', properties.Unit != null ? cfn_parse.FromCloudFormation.getString(properties.Unit) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getNumber(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTaskSet {\n                                                                                                                                                                                                                                               \n    export interface ServiceRegistryProperty {\nn        readonly containerName?: string;\nn        readonly containerPort?: number;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly port?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly registryArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServiceRegistryProperty`\n *\n * @param properties - the TypeScript properties of a `ServiceRegistryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTaskSet_ServiceRegistryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('containerPort', cdk.validateNumber)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('registryArn', cdk.validateString)(properties.registryArn));\n    return errors.wrap('supplied properties not correct for \"ServiceRegistryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ECS::TaskSet.ServiceRegistry` resource\n *\n * @param properties - the TypeScript properties of a `ServiceRegistryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ECS::TaskSet.ServiceRegistry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTaskSetServiceRegistryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTaskSet_ServiceRegistryPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        ContainerPort: cdk.numberToCloudFormation(properties.containerPort),\n        Port: cdk.numberToCloudFormation(properties.port),\n        RegistryArn: cdk.stringToCloudFormation(properties.registryArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTaskSetServiceRegistryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTaskSet.ServiceRegistryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTaskSet.ServiceRegistryProperty>();\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addPropertyResult('containerPort', 'ContainerPort', properties.ContainerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerPort) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('registryArn', 'RegistryArn', properties.RegistryArn != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
