{
  "version": 3,
  "sources": ["fargate-service.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as cdk from '../../../core';\nimport { ArnFormat } from '../../../core';\nimport { Construct } from 'constructs';\nimport { BaseService, BaseServiceOptions, DeploymentControllerType, IBaseService, IService, LaunchType } from '../base/base-service';\nimport { fromServiceAtrributes } from '../base/from-service-attributes';\nimport { TaskDefinition } from '../base/task-definition';\nimport { ICluster } from '../cluster';\n\n                                                                               \nexport interface FargateServiceProps extends BaseServiceOptions {\n                                                                                                                   \n  readonly taskDefinition: TaskDefinition;\n\n                                                                                                                                                                                             \n  readonly assignPublicIp?: boolean;\n\n                                                                                                                                                                                                          \n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n                                                                                                                                                                                                                                               \n  readonly securityGroup?: ec2.ISecurityGroup;\n\n                                                                                                                                                                                                  \n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly platformVersion?: FargatePlatformVersion;\n}\n\n                                                                                       \nexport interface IFargateService extends IService {\n\n}\n\n                                                                                   \nexport interface FargateServiceAttributes {\n                                                    \n  readonly cluster: ICluster;\n\n                                                                                                       \n  readonly serviceArn?: string;\n\n                                                                                                              \n  readonly serviceName?: string;\n}\n\n                                                                                                                    \nexport class FargateService extends BaseService implements IFargateService {\n\n                                                        \n  public static fromFargateServiceArn(scope: Construct, id: string, fargateServiceArn: string): IFargateService {\n    class Import extends cdk.Resource implements IFargateService {\n      public readonly serviceArn = fargateServiceArn;\n      public readonly serviceName = cdk.Stack.of(scope).splitArn(fargateServiceArn, ArnFormat.SLASH_RESOURCE_NAME).resourceName as string;\n    }\n    return new Import(scope, id);\n  }\n\n                                                                \n  public static fromFargateServiceAttributes(scope: Construct, id: string, attrs: FargateServiceAttributes): IBaseService {\n    return fromServiceAtrributes(scope, id, attrs);\n  }\n\n                                                                       \n  constructor(scope: Construct, id: string, props: FargateServiceProps) {\n    if (!props.taskDefinition.isFargateCompatible) {\n      throw new Error('Supplied TaskDefinition is not configured for compatibility with Fargate');\n    }\n\n    if (props.securityGroup !== undefined && props.securityGroups !== undefined) {\n      throw new Error('Only one of SecurityGroup or SecurityGroups can be populated.');\n    }\n\n    if (props.taskDefinition.referencesSecretJsonField\n        && props.platformVersion\n        && SECRET_JSON_FIELD_UNSUPPORTED_PLATFORM_VERSIONS.includes(props.platformVersion)) {\n      throw new Error(`The task definition of this service uses at least one container that references a secret JSON field. This feature requires platform version ${FargatePlatformVersion.VERSION1_4} or later.`);\n    }\n    super(scope, id, {\n      ...props,\n      desiredCount: props.desiredCount,\n      launchType: LaunchType.FARGATE,\n      capacityProviderStrategies: props.capacityProviderStrategies,\n      enableECSManagedTags: props.enableECSManagedTags,\n    }, {\n      cluster: props.cluster.clusterName,\n      taskDefinition: props.deploymentController?.type === DeploymentControllerType.EXTERNAL ? undefined : props.taskDefinition.taskDefinitionArn,\n      platformVersion: props.platformVersion,\n    }, props.taskDefinition);\n\n    let securityGroups;\n    if (props.securityGroup !== undefined) {\n      securityGroups = [props.securityGroup];\n    } else if (props.securityGroups !== undefined) {\n      securityGroups = props.securityGroups;\n    }\n\n    this.configureAwsVpcNetworkingWithSecurityGroups(props.cluster.vpc, props.assignPublicIp, props.vpcSubnets, securityGroups);\n\n    this.node.addValidation({\n      validate: () => !this.taskDefinition.defaultContainer ? ['A TaskDefinition must have at least one essential container'] : [],\n    });\n  }\n}\n\n                                                                                                                                                           \nexport enum FargatePlatformVersion {\n                                                          \n  LATEST = 'LATEST',\n\n                                                                                                                                                                                                              \n  VERSION1_4 = '1.4.0',\n\n                                                                          \n  VERSION1_3 = '1.3.0',\n\n                                                                     \n  VERSION1_2 = '1.2.0',\n\n                                                                                                  \n  VERSION1_1 = '1.1.0',\n\n                                                                         \n  VERSION1_0 = '1.0.0',\n}\n\nconst SECRET_JSON_FIELD_UNSUPPORTED_PLATFORM_VERSIONS = [\n  FargatePlatformVersion.VERSION1_0,\n  FargatePlatformVersion.VERSION1_1,\n  FargatePlatformVersion.VERSION1_2,\n  FargatePlatformVersion.VERSION1_3,\n];\n"],
  "mappings": "uPACA,IAAA,QAAA,iBACA,OAAA,QAAA,iBAEA,eAAA,QAAA,wBACA,0BAAA,QAAA,mCA2CA,4BAAoC,gBAAA,WAAW,CAiB7C,YAAY,MAAkB,GAAY,MAA0B,QAClE,0EAAI,CAAC,MAAM,eAAe,oBACxB,KAAM,IAAI,OAAM,4EAGlB,GAAI,MAAM,gBAAkB,QAAa,MAAM,iBAAmB,OAChE,KAAM,IAAI,OAAM,iEAGlB,GAAI,MAAM,eAAe,2BAClB,MAAM,iBACN,gDAAgD,SAAS,MAAM,iBACpE,KAAM,IAAI,OAAM,+IAA+I,uBAAuB,wBAExL,MAAM,MAAO,GAAI,IACZ,MACH,aAAc,MAAM,aACpB,WAAY,eAAA,WAAW,QACvB,2BAA4B,MAAM,2BAClC,qBAAsB,MAAM,sBAC3B,CACD,QAAS,MAAM,QAAQ,YACvB,eAAgB,KAAA,MAAM,wBAAoB,MAAA,KAAA,OAAA,OAAA,GAAE,QAAS,eAAA,yBAAyB,SAAW,OAAY,MAAM,eAAe,kBAC1H,gBAAiB,MAAM,iBACtB,MAAM,gBAET,GAAI,gBACJ,AAAI,MAAM,gBAAkB,OAC1B,eAAiB,CAAC,MAAM,eACf,MAAM,iBAAmB,QAClC,gBAAiB,MAAM,gBAGzB,KAAK,4CAA4C,MAAM,QAAQ,IAAK,MAAM,eAAgB,MAAM,WAAY,gBAE5G,KAAK,KAAK,cAAc,CACtB,SAAU,IAAM,AAAC,KAAK,eAAe,iBAAqF,GAAlE,CAAC,uEAlD/C,uBAAsB,MAAkB,GAAY,kBAAyB,CACzF,oBAAqB,KAAI,QAAQ,CAAjC,aAAA,qBACkB,KAAA,WAAa,kBACb,KAAA,YAAc,IAAI,MAAM,GAAG,OAAO,SAAS,kBAAmB,OAAA,UAAU,qBAAqB,cAE/G,MAAO,IAAI,QAAO,MAAO,UAIb,8BAA6B,MAAkB,GAAY,MAA+B,oFAC/F,0BAAA,sBAAsB,MAAO,GAAI,QAb5C,QAAA,eAAA,oHA2DA,GAAY,wBAAZ,AAAA,UAAY,wBAAsB,CAEhC,wBAAA,OAAA,SAGA,wBAAA,WAAA,QAGA,wBAAA,WAAA,QAGA,wBAAA,WAAA,QAGA,wBAAA,WAAA,QAGA,wBAAA,WAAA,UAjBU,uBAAA,QAAA,wBAAA,SAAA,uBAAsB,KAoBlC,KAAM,iDAAkD,CACtD,uBAAuB,WACvB,uBAAuB,WACvB,uBAAuB,WACvB,uBAAuB",
  "names": []
}
