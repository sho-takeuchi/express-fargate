{
  "version": 3,
  "sources": ["repository.ts"],
  "sourcesContent": ["import * as secretsmanager from '../../../aws-secretsmanager';\nimport { Annotations, Token } from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition } from '../container-definition';\nimport { ContainerImage, ContainerImageConfig } from '../container-image';\n\n/**\n * Regex pattern to check if it is an ECR image URL.\n *\n */\nconst ECR_IMAGE_REGEX = /(^[a-zA-Z0-9][a-zA-Z0-9-_]*).dkr.ecr.([a-zA-Z0-9][a-zA-Z0-9-_]*).amazonaws.com(.cn)?\\/.*/;\n\n                                                                                \nexport interface RepositoryImageProps {\n                                                                                                                                                                                         \n  readonly credentials?: secretsmanager.ISecret;\n}\n\n                                                                                                                                                                                     \nexport class RepositoryImage extends ContainerImage {\n\n                                                                        \n  constructor(private readonly imageName: string, private readonly props: RepositoryImageProps = {}) {\n    super();\n  }\n\n  public bind(scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig {\n    // name could be a Token - in that case, skip validation altogether\n    if (!Token.isUnresolved(this.imageName) && ECR_IMAGE_REGEX.test(this.imageName)) {\n      Annotations.of(scope).addWarning(\"Proper policies need to be attached before pulling from ECR repository, or use 'fromEcrRepository'.\");\n    }\n\n    if (this.props.credentials) {\n      this.props.credentials.grantRead(containerDefinition.taskDefinition.obtainExecutionRole());\n    }\n\n    return {\n      imageName: this.imageName,\n      repositoryCredentials: this.props.credentials && {\n        credentialsParameter: this.props.credentials.secretArn,\n      },\n    };\n  }\n}\n"],
  "mappings": "yNACA,OAAA,QAAA,iBAGA,kBAAA,QAAA,sBAMM,gBAAkB,2FASxB,6BAAqC,mBAAA,cAAc,CAGjD,YAA6B,UAAoC,MAA8B,GAAE,CAC/F,QAD2B,KAAA,UAAA,UAAoC,KAAA,MAAA,8EAI1D,KAAK,MAAkB,oBAAwC,6FAEhE,CAAC,OAAA,MAAM,aAAa,KAAK,YAAc,gBAAgB,KAAK,KAAK,YACnE,OAAA,YAAY,GAAG,OAAO,WAAW,uGAG/B,KAAK,MAAM,aACb,KAAK,MAAM,YAAY,UAAU,oBAAoB,eAAe,uBAG/D,CACL,UAAW,KAAK,UAChB,sBAAuB,KAAK,MAAM,aAAe,CAC/C,qBAAsB,KAAK,MAAM,YAAY,aApBrD,QAAA,gBAAA",
  "names": []
}
