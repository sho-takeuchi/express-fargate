{
  "version": 3,
  "sources": ["gelf-log-driver.ts"],
  "sourcesContent": ["import { Duration } from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition } from '../container-definition';\nimport { BaseLogDriverProps } from './base-log-driver';\nimport { LogDriver, LogDriverConfig } from './log-driver';\nimport { ensureInRange, ensurePositiveInteger, renderCommonLogDriverOptions, stringifyOptions } from './utils';\n\n                                                                                     \nexport enum GelfCompressionType {\n  GZIP = 'gzip',\n  ZLIB = 'zlib',\n  NONE = 'none'\n}\n\n                                                                                                                                           \nexport interface GelfLogDriverProps extends BaseLogDriverProps {\n                                                                                                                                     \n  readonly address: string;\n\n                                                                                                                                                                           \n  readonly compressionType?: GelfCompressionType;\n\n                                                                                                                                                                                                                                                                                     \n  readonly compressionLevel?: number;\n\n                                                                                                                                               \n  readonly tcpMaxReconnect?: number;\n\n                                                                                                                                      \n  readonly tcpReconnectDelay?: Duration;\n}\n\n                                                                    \nexport class GelfLogDriver extends LogDriver {\n                                                                                                                                        \n  constructor(private readonly props: GelfLogDriverProps) {\n    super();\n\n    // Validation\n    if (props.compressionLevel) {\n      ensureInRange(props.compressionLevel, -1, 9);\n    }\n\n    if (props.tcpMaxReconnect) {\n      ensurePositiveInteger(props.tcpMaxReconnect);\n    }\n  }\n\n                                                                        \n  public bind(_scope: Construct, _containerDefinition: ContainerDefinition): LogDriverConfig {\n    return {\n      logDriver: 'gelf',\n      options: stringifyOptions({\n        'gelf-address': this.props.address,\n        'gelf-compression-type': this.props.compressionType,\n        'gelf-compression-level': this.props.compressionLevel,\n        'gelf-tcp-max-reconnect': this.props.tcpMaxReconnect,\n        'gelf-tcp-reconnect-delay': this.props.tcpReconnectDelay && this.props.tcpReconnectDelay.toSeconds(),\n        ...renderCommonLogDriverOptions(this.props),\n      }),\n    };\n  }\n}\n"],
  "mappings": "mPAIA,aAAA,QAAA,gBACA,QAAA,QAAA,WAGA,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAC7B,qBAAA,KAAA,OACA,qBAAA,KAAA,OACA,qBAAA,KAAA,SAHU,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,KAyB/B,2BAAmC,cAAA,SAAS,CAE1C,YAA6B,MAAyB,CACpD,QAD2B,KAAA,MAAA,4EAIvB,MAAM,kBACR,QAAA,cAAc,MAAM,iBAAkB,GAAI,GAGxC,MAAM,iBACR,QAAA,sBAAsB,MAAM,iBAKzB,KAAK,OAAmB,qBAAyC,8FAC/D,CACL,UAAW,OACX,QAAS,QAAA,iBAAiB,CACxB,eAAgB,KAAK,MAAM,QAC3B,wBAAyB,KAAK,MAAM,gBACpC,yBAA0B,KAAK,MAAM,iBACrC,yBAA0B,KAAK,MAAM,gBACrC,2BAA4B,KAAK,MAAM,mBAAqB,KAAK,MAAM,kBAAkB,eACtF,QAAA,6BAA6B,KAAK,WAzB7C,QAAA,cAAA",
  "names": []
}
