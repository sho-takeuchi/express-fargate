{
  "version": 3,
  "sources": ["splunk-log-driver.ts"],
  "sourcesContent": ["import { SecretValue } from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition, Secret } from '../container-definition';\nimport { BaseLogDriverProps } from './base-log-driver';\nimport { LogDriver, LogDriverConfig } from './log-driver';\nimport { ensureInRange, renderCommonLogDriverOptions, renderLogDriverSecretOptions, stringifyOptions } from './utils';\n\n                             \nexport enum SplunkLogFormat {\n  INLINE = 'inline',\n  JSON = 'json',\n  RAW = 'raw'\n}\n\n                                                                                                                                           \nexport interface SplunkLogDriverProps extends BaseLogDriverProps {\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly token?: SecretValue;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n  readonly secretToken?: Secret;\n\n                                                                                                                                                                                                                                                                                                                                                                     \n  readonly url: string;\n\n                                                                   \n  readonly source?: string;\n\n                                                                            \n  readonly sourceType?: string;\n\n                                                                 \n  readonly index?: string;\n\n                                                                               \n  readonly caPath?: string;\n\n                                                                                                                   \n  readonly caName?: string;\n\n                                                                                                       \n  readonly insecureSkipVerify?: string;\n\n                                                                                        \n  readonly format?: SplunkLogFormat;\n\n                                                                                                     \n  readonly verifyConnection?: boolean;\n\n                                                                                                                                              \n  readonly gzip?: boolean;\n\n                                                                                                                                                                                               \n  readonly gzipLevel?: number;\n}\n\n                                                                  \nexport class SplunkLogDriver extends LogDriver {\n                                                                                                                                            \n  constructor(private readonly props: SplunkLogDriverProps) {\n    super();\n\n    if (!props.token && !props.secretToken) {\n      throw new Error('Please provide either token or secretToken.');\n    }\n    if (props.gzipLevel) {\n      ensureInRange(props.gzipLevel, -1, 9);\n    }\n  }\n\n                                                                        \n  public bind(_scope: Construct, _containerDefinition: ContainerDefinition): LogDriverConfig {\n    const options = stringifyOptions({\n      'splunk-token': this.props.token,\n      'splunk-url': this.props.url,\n      'splunk-source': this.props.source,\n      'splunk-sourcetype': this.props.sourceType,\n      'splunk-index': this.props.index,\n      'splunk-capath': this.props.caPath,\n      'splunk-caname': this.props.caName,\n      'splunk-insecureskipverify': this.props.insecureSkipVerify,\n      'splunk-format': this.props.format,\n      'splunk-verify-connection': this.props.verifyConnection,\n      'splunk-gzip': this.props.gzip,\n      'splunk-gzip-level': this.props.gzipLevel,\n      ...renderCommonLogDriverOptions(this.props),\n    });\n\n    return {\n      logDriver: 'splunk',\n      options,\n      secretOptions: this.props.secretToken && renderLogDriverSecretOptions({ 'splunk-token': this.props.secretToken }, _containerDefinition.taskDefinition),\n    };\n  }\n}\n"],
  "mappings": "iPAIA,aAAA,QAAA,gBACA,QAAA,QAAA,WAGA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CACzB,iBAAA,OAAA,SACA,iBAAA,KAAA,OACA,iBAAA,IAAA,QAHU,gBAAA,QAAA,iBAAA,SAAA,gBAAe,KAiD3B,6BAAqC,cAAA,SAAS,CAE5C,YAA6B,MAA2B,CACtD,QAEA,GAH2B,KAAA,MAAA,8EAGvB,CAAC,MAAM,OAAS,CAAC,MAAM,YACzB,KAAM,IAAI,OAAM,+CAElB,AAAI,MAAM,WACR,QAAA,cAAc,MAAM,UAAW,GAAI,GAKhC,KAAK,OAAmB,qBAAyC,uFACtE,KAAM,SAAU,QAAA,iBAAiB,CAC/B,eAAgB,KAAK,MAAM,MAC3B,aAAc,KAAK,MAAM,IACzB,gBAAiB,KAAK,MAAM,OAC5B,oBAAqB,KAAK,MAAM,WAChC,eAAgB,KAAK,MAAM,MAC3B,gBAAiB,KAAK,MAAM,OAC5B,gBAAiB,KAAK,MAAM,OAC5B,4BAA6B,KAAK,MAAM,mBACxC,gBAAiB,KAAK,MAAM,OAC5B,2BAA4B,KAAK,MAAM,iBACvC,cAAe,KAAK,MAAM,KAC1B,oBAAqB,KAAK,MAAM,aAC7B,QAAA,6BAA6B,KAAK,SAGvC,MAAO,CACL,UAAW,SACX,QACA,cAAe,KAAK,MAAM,aAAe,QAAA,6BAA6B,CAAE,eAAgB,KAAK,MAAM,aAAe,qBAAqB,kBAlC7I,QAAA,gBAAA",
  "names": []
}
