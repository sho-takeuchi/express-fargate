{
  "version": 3,
  "sources": ["app-mesh-proxy-configuration.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { TaskDefinition } from '../base/task-definition';\nimport { CfnTaskDefinition } from '../ecs.generated';\nimport { ProxyConfiguration } from './proxy-configuration';\n\n                                                                       \nexport interface AppMeshProxyConfigurationProps {\n                                                                                                                                                                                                                                         \n  readonly ignoredUID?: number;\n\n                                                                                                                                                                                                                                          \n  readonly ignoredGID?: number;\n\n                                                                                                                                                           \n  readonly appPorts: number[];\n\n                                                                                         \n  readonly proxyIngressPort: number;\n\n                                                                                           \n  readonly proxyEgressPort: number;\n\n                                                                                                                                                 \n  readonly egressIgnoredPorts?: number[];\n\n                                                                                                                                                        \n  readonly egressIgnoredIPs?: string[];\n}\n\n                                                                                 \nexport interface AppMeshProxyConfigurationConfigProps {\n                                                                                 \n  readonly containerName: string;\n\n                                                                                                                     \n  readonly properties: AppMeshProxyConfigurationProps;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class AppMeshProxyConfiguration extends ProxyConfiguration {\n                                                                                  \n  constructor(private readonly props: AppMeshProxyConfigurationConfigProps) {\n    super();\n    if (props.properties) {\n      if (!props.properties.ignoredUID && !props.properties.ignoredGID) {\n        throw new Error('At least one of ignoredUID or ignoredGID should be specified.');\n      }\n    }\n  }\n\n                                                                                        \n  public bind(_scope: Construct, _taskDefinition: TaskDefinition): CfnTaskDefinition.ProxyConfigurationProperty {\n    const configProps = this.props.properties;\n    const configType = 'APPMESH';\n    return {\n      containerName: this.props.containerName,\n      proxyConfigurationProperties: renderProperties(configProps),\n      type: configType,\n    };\n  }\n}\n\nfunction renderProperties(props: AppMeshProxyConfigurationProps): CfnTaskDefinition.KeyValuePairProperty[] {\n  const ret = new Array<CfnTaskDefinition.KeyValuePairProperty>();\n  for (const [k, v] of Object.entries(props)) {\n    const key = String(k);\n    const value = String(v);\n    if (value !== 'undefined' && value !== '') {\n      const capitalizedKey = key.charAt(0).toUpperCase() + key.slice(1);\n      ret.push({ ['name']: capitalizedKey, ['value']: value });\n    }\n  }\n  return ret;\n}"],
  "mappings": "mOAGA,sBAAA,QAAA,yBAoCA,uCAA+C,uBAAA,kBAAkB,CAE/D,YAA6B,MAA2C,CACtE,QACA,GAF2B,KAAA,MAAA,8FAEvB,MAAM,YACJ,CAAC,MAAM,WAAW,YAAc,CAAC,MAAM,WAAW,WACpD,KAAM,IAAI,OAAM,iEAMf,KAAK,OAAmB,gBAA+B,6EAC5D,KAAM,aAAc,KAAK,MAAM,WACzB,WAAa,UACnB,MAAO,CACL,cAAe,KAAK,MAAM,cAC1B,6BAA8B,iBAAiB,aAC/C,KAAM,aAlBZ,QAAA,0BAAA,qJAuBA,0BAA0B,MAAqC,CAC7D,KAAM,KAAM,GAAI,OAChB,SAAW,CAAC,EAAG,IAAM,QAAO,QAAQ,OAAQ,CAC1C,KAAM,KAAM,OAAO,GACb,MAAQ,OAAO,GACrB,GAAI,QAAU,aAAe,QAAU,GAAI,CACzC,KAAM,gBAAiB,IAAI,OAAO,GAAG,cAAgB,IAAI,MAAM,GAC/D,IAAI,KAAK,CAAG,KAAS,eAAiB,SAG1C,MAAO",
  "names": []
}
