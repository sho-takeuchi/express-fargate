{
  "version": 3,
  "sources": ["efs-file-system.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport { ArnFormat, FeatureFlags, IResource, RemovalPolicy, Resource, Size, Stack, Tags } from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct, DependencyGroup, IDependable } from 'constructs';\nimport { AccessPoint, AccessPointOptions } from './access-point';\nimport { CfnFileSystem, CfnMountTarget } from './efs.generated';\n\n                                                                                                                                                                                                                                                                              \nexport enum LifecyclePolicy {\n                                                    \n  AFTER_7_DAYS = 'AFTER_7_DAYS',\n\n                                                     \n  AFTER_14_DAYS = 'AFTER_14_DAYS',\n\n                                                     \n  AFTER_30_DAYS = 'AFTER_30_DAYS',\n\n                                                     \n  AFTER_60_DAYS = 'AFTER_60_DAYS',\n\n                                                     \n  AFTER_90_DAYS = 'AFTER_90_DAYS'\n}\n\n/**\n * EFS Out Of Infrequent Access Policy, if a file is accessed given times, it will move back to primary\n * storage class.\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-lifecyclepolicy.html#cfn-efs-filesystem-lifecyclepolicy-transitiontoprimarystorageclass\n */\nexport enum OutOfInfrequentAccessPolicy {\n                               \n  AFTER_1_ACCESS = 'AFTER_1_ACCESS'\n}\n\n                                                                                                                       \nexport enum PerformanceMode {\n                                                                                                                                                                                                                                                    \n  GENERAL_PURPOSE = 'generalPurpose',\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n  MAX_IO = 'maxIO'\n}\n\n                                                                                                                      \nexport enum ThroughputMode {\n                                                                                                                   \n  BURSTING = 'bursting',\n\n                                                                                                                                         \n  PROVISIONED = 'provisioned'\n}\n\n                                               \nexport interface IFileSystem extends ec2.IConnectable, IResource {\n                                                                                        \n  readonly fileSystemId: string;\n\n                                                                 \n  readonly fileSystemArn: string;\n\n                                                                                                             \n  readonly mountTargetsAvailable: IDependable;\n\n                                                                                                             \n  grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;\n}\n\n                                        \nexport interface FileSystemProps {\n\n                                                  \n  readonly vpc: ec2.IVpc;\n\n                                                                                                                                                \n  readonly securityGroup?: ec2.ISecurityGroup;\n\n                                                                                                                                   \n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n                                                                                                                                                                                                                                                                                                                                  \n  readonly encrypted?: boolean;\n\n                                                                                \n  readonly fileSystemName?: string;\n\n                                                                                                                                                                                                                                  \n  readonly kmsKey?: kms.IKey;\n\n                                                                                                                                                                                                             \n  readonly lifecyclePolicy?: LifecyclePolicy;\n\n                                                                                                                                                                                                                                                    \n  readonly outOfInfrequentAccessPolicy?: OutOfInfrequentAccessPolicy;\n                                                                                                                                                                                                                                                                                                      \n  readonly performanceMode?: PerformanceMode;\n\n                                                                                                                   \n  readonly throughputMode?: ThroughputMode;\n\n                                                                                                                                                                                                               \n  readonly provisionedThroughputPerSecond?: Size;\n\n                                                                                                        \n  readonly removalPolicy?: RemovalPolicy;\n\n                                                                                                  \n  readonly enableAutomaticBackups?: boolean;\n}\n\n                                                                \nexport interface FileSystemAttributes {\n                                                      \n  readonly securityGroup: ec2.ISecurityGroup;\n\n                                                                                             \n  readonly fileSystemId?: string;\n\n                                                                                             \n  readonly fileSystemArn?: string;\n}\n\nabstract class FileSystemBase extends Resource implements IFileSystem {\n  /**\n   * The security groups/rules used to allow network connections to the file system.\n   */\n  public abstract readonly connections: ec2.Connections;\n\n  /**\n  * @attribute\n  */\n  public abstract readonly fileSystemId: string;\n  /**\n  * @attribute\n  */\n  public abstract readonly fileSystemArn: string;\n\n  /**\n   * Dependable that can be depended upon to ensure the mount targets of the filesystem are ready\n   */\n  public abstract readonly mountTargetsAvailable: IDependable;\n\n                                                                                                                                                                                                           \n  public grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: grantee,\n      actions: actions,\n      resourceArns: [this.fileSystemArn],\n    });\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class FileSystem extends FileSystemBase {\n                                                         \n  public static readonly DEFAULT_PORT: number = 2049;\n\n                                                                          \n  public static fromFileSystemAttributes(scope: Construct, id: string, attrs: FileSystemAttributes): IFileSystem {\n    return new ImportedFileSystem(scope, id, attrs);\n  }\n\n                                                                                                \n  public readonly connections: ec2.Connections;\n\n                           \n  public readonly fileSystemId: string;\n                           \n  public readonly fileSystemArn: string;\n\n  public readonly mountTargetsAvailable: IDependable;\n\n  private readonly _mountTargetsAvailable = new DependencyGroup();\n\n                                                               \n  constructor(scope: Construct, id: string, props: FileSystemProps) {\n    super(scope, id);\n\n    if (props.throughputMode === ThroughputMode.PROVISIONED && props.provisionedThroughputPerSecond === undefined) {\n      throw new Error('Property provisionedThroughputPerSecond is required when throughputMode is PROVISIONED');\n    }\n\n    // we explictly use 'undefined' to represent 'false' to maintain backwards compatibility since\n    // its considered an actual change in CloudFormations eyes, even though they have the same meaning.\n    const encrypted = props.encrypted ?? (FeatureFlags.of(this).isEnabled(\n      cxapi.EFS_DEFAULT_ENCRYPTION_AT_REST) ? true : undefined);\n\n    const filesystem = new CfnFileSystem(this, 'Resource', {\n      encrypted: encrypted,\n      kmsKeyId: props.kmsKey?.keyArn,\n      lifecyclePolicies: (\n        (props.lifecyclePolicy || props.outOfInfrequentAccessPolicy) ?\n          [{\n            transitionToIa: props.lifecyclePolicy,\n            transitionToPrimaryStorageClass: props.outOfInfrequentAccessPolicy,\n          }] : undefined),\n      performanceMode: props.performanceMode,\n      throughputMode: props.throughputMode,\n      provisionedThroughputInMibps: props.provisionedThroughputPerSecond?.toMebibytes(),\n      backupPolicy: props.enableAutomaticBackups ? { status: 'ENABLED' } : undefined,\n    });\n    filesystem.applyRemovalPolicy(props.removalPolicy);\n\n    this.fileSystemId = filesystem.ref;\n    this.fileSystemArn = filesystem.attrArn;\n\n    Tags.of(this).add('Name', props.fileSystemName || this.node.path);\n\n    const securityGroup = (props.securityGroup || new ec2.SecurityGroup(this, 'EfsSecurityGroup', {\n      vpc: props.vpc,\n    }));\n\n    this.connections = new ec2.Connections({\n      securityGroups: [securityGroup],\n      defaultPort: ec2.Port.tcp(FileSystem.DEFAULT_PORT),\n    });\n\n    const subnets = props.vpc.selectSubnets(props.vpcSubnets ?? { onePerAz: true });\n\n    // We now have to create the mount target for each of the mentioned subnet\n    let mountTargetCount = 0;\n    this.mountTargetsAvailable = [];\n    subnets.subnetIds.forEach((subnetId: string) => {\n      const mountTarget = new CfnMountTarget(this,\n        'EfsMountTarget' + (++mountTargetCount),\n        {\n          fileSystemId: this.fileSystemId,\n          securityGroups: Array.of(securityGroup.securityGroupId),\n          subnetId,\n        });\n      this._mountTargetsAvailable.add(mountTarget);\n    });\n    this.mountTargetsAvailable = this._mountTargetsAvailable;\n  }\n\n                                                         \n  public addAccessPoint(id: string, accessPointOptions: AccessPointOptions = {}): AccessPoint {\n    return new AccessPoint(this, id, {\n      fileSystem: this,\n      ...accessPointOptions,\n    });\n  }\n}\n\nclass ImportedFileSystem extends FileSystemBase {\n  /**\n   * The security groups/rules used to allow network connections to the file system.\n   */\n  public readonly connections: ec2.Connections;\n\n  /**\n   * @attribute\n   */\n  public readonly fileSystemId: string;\n\n  /**\n   * @attribute\n   */\n  public readonly fileSystemArn: string;\n\n  /**\n   * Dependable that can be depended upon to ensure the mount targets of the filesystem are ready\n   */\n  public readonly mountTargetsAvailable: IDependable;\n\n  constructor(scope: Construct, id: string, attrs: FileSystemAttributes) {\n    super(scope, id);\n\n    if (!!attrs.fileSystemId === !!attrs.fileSystemArn) {\n      throw new Error('One of fileSystemId or fileSystemArn, but not both, must be provided.');\n    }\n\n    this.fileSystemArn = attrs.fileSystemArn ?? Stack.of(scope).formatArn({\n      service: 'elasticfilesystem',\n      resource: 'file-system',\n      resourceName: attrs.fileSystemId,\n    });\n\n    const parsedArn = Stack.of(scope).splitArn(this.fileSystemArn, ArnFormat.SLASH_RESOURCE_NAME);\n\n    if (!parsedArn.resourceName) {\n      throw new Error(`Invalid FileSystem Arn ${this.fileSystemArn}`);\n    }\n\n    this.fileSystemId = attrs.fileSystemId ?? parsedArn.resourceName;\n\n    this.connections = new ec2.Connections({\n      securityGroups: [attrs.securityGroup],\n      defaultPort: ec2.Port.tcp(FileSystem.DEFAULT_PORT),\n    });\n\n    this.mountTargetsAvailable = new DependencyGroup();\n  }\n}\n"],
  "mappings": "4TAAA,IAAA,QAAA,iBACA,IAAA,QAAA,iBAEA,OAAA,QAAA,cACA,MAAA,QAAA,gBACA,aAAA,QAAA,cACA,eAAA,QAAA,kBACA,gBAAA,QAAA,mBAGA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAEzB,iBAAA,aAAA,eAGA,iBAAA,cAAA,gBAGA,iBAAA,cAAA,gBAGA,iBAAA,cAAA,gBAGA,iBAAA,cAAA,kBAdU,gBAAA,QAAA,iBAAA,SAAA,gBAAe,KAuB3B,GAAY,6BAAZ,AAAA,UAAY,6BAA2B,CAErC,6BAAA,eAAA,mBAFU,4BAAA,QAAA,6BAAA,SAAA,4BAA2B,KAMvC,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAEzB,iBAAA,gBAAA,iBAGA,iBAAA,OAAA,UALU,gBAAA,QAAA,iBAAA,SAAA,gBAAe,KAS3B,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,SAAA,WAGA,gBAAA,YAAA,gBALU,eAAA,QAAA,gBAAA,SAAA,eAAc,KA6E1B,4BAAsC,QAAA,QAAQ,CAqBrC,MAAM,WAA4B,QAAiB,CACxD,MAAO,KAAI,MAAM,eAAe,CAC9B,QACA,QACA,aAAc,CAAC,KAAK,kBAM1B,wBAAgC,eAAc,CAsB5C,YAAY,MAAkB,GAAY,MAAsB,iBAC9D,MAAM,MAAO,IAEb,GANe,KAAA,uBAAyB,GAAI,cAAA,mFAMxC,MAAM,iBAAmB,eAAe,aAAe,MAAM,iCAAmC,OAClG,KAAM,IAAI,OAAM,0FAKlB,KAAM,WAAS,IAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAK,OAAA,aAAa,GAAG,MAAM,UAC1D,MAAM,gCAAkC,GAAO,OAE3C,WAAa,GAAI,iBAAA,cAAc,KAAM,WAAY,CACrD,UACA,SAAQ,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,OACxB,kBACG,MAAM,iBAAmB,MAAM,4BAC9B,CAAC,CACC,eAAgB,MAAM,gBACtB,gCAAiC,MAAM,8BACpC,OACT,gBAAiB,MAAM,gBACvB,eAAgB,MAAM,eACtB,6BAA4B,IAAE,MAAM,kCAA8B,MAAA,KAAA,OAAA,OAAA,GAAE,cACpE,aAAc,MAAM,uBAAyB,CAAE,OAAQ,WAAc,SAEvE,WAAW,mBAAmB,MAAM,eAEpC,KAAK,aAAe,WAAW,IAC/B,KAAK,cAAgB,WAAW,QAEhC,OAAA,KAAK,GAAG,MAAM,IAAI,OAAQ,MAAM,gBAAkB,KAAK,KAAK,MAE5D,KAAM,eAAiB,MAAM,eAAiB,GAAI,KAAI,cAAc,KAAM,mBAAoB,CAC5F,IAAK,MAAM,MAGb,KAAK,YAAc,GAAI,KAAI,YAAY,CACrC,eAAgB,CAAC,eACjB,YAAa,IAAI,KAAK,IAAI,WAAW,gBAGvC,KAAM,SAAU,MAAM,IAAI,cAAa,IAAC,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,CAAE,SAAU,KAGxE,GAAI,kBAAmB,EACvB,KAAK,sBAAwB,GAC7B,QAAQ,UAAU,QAAQ,AAAC,UAAoB,CAC7C,KAAM,aAAc,GAAI,iBAAA,eAAe,KACrC,iBAAoB,GAAE,iBACtB,CACE,aAAc,KAAK,aACnB,eAAgB,MAAM,GAAG,cAAc,iBACvC,WAEJ,KAAK,uBAAuB,IAAI,eAElC,KAAK,sBAAwB,KAAK,6BA1EtB,0BAAyB,MAAkB,GAAY,MAA2B,gFACvF,GAAI,oBAAmB,MAAO,GAAI,OA6EpC,eAAe,GAAY,mBAAyC,GAAE,2FACpE,GAAI,gBAAA,YAAY,KAAM,GAAI,CAC/B,WAAY,QACT,sBAtFT,QAAA,WAAA,wGAEyB,WAAA,aAAuB,KAyFhD,gCAAiC,eAAc,CAqB7C,YAAY,MAAkB,GAAY,MAA2B,WACnE,MAAM,MAAO,IAEb,GAAI,CAAC,CAAC,MAAM,cAAiB,CAAC,CAAC,MAAM,cACnC,KAAM,IAAI,OAAM,yEAGlB,KAAK,cAAa,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,OAAA,MAAM,GAAG,OAAO,UAAU,CACpE,QAAS,oBACT,SAAU,cACV,aAAc,MAAM,eAGtB,KAAM,WAAY,OAAA,MAAM,GAAG,OAAO,SAAS,KAAK,cAAe,OAAA,UAAU,qBAEzE,GAAI,CAAC,UAAU,aACb,KAAM,IAAI,OAAM,0BAA0B,KAAK,iBAGjD,KAAK,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,UAAU,aAEpD,KAAK,YAAc,GAAI,KAAI,YAAY,CACrC,eAAgB,CAAC,MAAM,eACvB,YAAa,IAAI,KAAK,IAAI,WAAW,gBAGvC,KAAK,sBAAwB,GAAI,cAAA",
  "names": []
}
