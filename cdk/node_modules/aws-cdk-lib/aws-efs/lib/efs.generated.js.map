{
  "version": 3,
  "sources": ["efs.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:57:45.435Z\",\"fingerprint\":\"JFhErH0SNpGyPrWVsLOxjob+gygnL9aKkEmkp05jAJ4=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnAccessPointProps {\n\n                                                                                                                                                                                                                                                                                                                                                    \n    readonly fileSystemId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly accessPointTags?: Array<CfnAccessPoint.AccessPointTagProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    readonly clientToken?: string;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    readonly posixUser?: CfnAccessPoint.PosixUserProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                   \n    readonly rootDirectory?: CfnAccessPoint.RootDirectoryProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAccessPointProps`\n *\n * @param properties - the TypeScript properties of a `CfnAccessPointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessPointTags', cdk.listValidator(CfnAccessPoint_AccessPointTagPropertyValidator))(properties.accessPointTags));\n    errors.collect(cdk.propertyValidator('clientToken', cdk.validateString)(properties.clientToken));\n    errors.collect(cdk.propertyValidator('fileSystemId', cdk.requiredValidator)(properties.fileSystemId));\n    errors.collect(cdk.propertyValidator('fileSystemId', cdk.validateString)(properties.fileSystemId));\n    errors.collect(cdk.propertyValidator('posixUser', CfnAccessPoint_PosixUserPropertyValidator)(properties.posixUser));\n    errors.collect(cdk.propertyValidator('rootDirectory', CfnAccessPoint_RootDirectoryPropertyValidator)(properties.rootDirectory));\n    return errors.wrap('supplied properties not correct for \"CfnAccessPointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::AccessPoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnAccessPointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::AccessPoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPointPropsValidator(properties).assertSuccess();\n    return {\n        FileSystemId: cdk.stringToCloudFormation(properties.fileSystemId),\n        AccessPointTags: cdk.listMapper(cfnAccessPointAccessPointTagPropertyToCloudFormation)(properties.accessPointTags),\n        ClientToken: cdk.stringToCloudFormation(properties.clientToken),\n        PosixUser: cfnAccessPointPosixUserPropertyToCloudFormation(properties.posixUser),\n        RootDirectory: cfnAccessPointRootDirectoryPropertyToCloudFormation(properties.rootDirectory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPointProps>();\n    ret.addPropertyResult('fileSystemId', 'FileSystemId', cfn_parse.FromCloudFormation.getString(properties.FileSystemId));\n    ret.addPropertyResult('accessPointTags', 'AccessPointTags', properties.AccessPointTags != null ? cfn_parse.FromCloudFormation.getArray(CfnAccessPointAccessPointTagPropertyFromCloudFormation)(properties.AccessPointTags) : undefined);\n    ret.addPropertyResult('clientToken', 'ClientToken', properties.ClientToken != null ? cfn_parse.FromCloudFormation.getString(properties.ClientToken) : undefined);\n    ret.addPropertyResult('posixUser', 'PosixUser', properties.PosixUser != null ? CfnAccessPointPosixUserPropertyFromCloudFormation(properties.PosixUser) : undefined);\n    ret.addPropertyResult('rootDirectory', 'RootDirectory', properties.RootDirectory != null ? CfnAccessPointRootDirectoryPropertyFromCloudFormation(properties.RootDirectory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnAccessPoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EFS::AccessPoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAccessPoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAccessPointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAccessPoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                    \n    public readonly attrAccessPointId: string;\n\n                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    public fileSystemId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public accessPointTags: Array<CfnAccessPoint.AccessPointTagProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                    \n    public clientToken: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public posixUser: CfnAccessPoint.PosixUserProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                   \n    public rootDirectory: CfnAccessPoint.RootDirectoryProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnAccessPointProps) {\n        super(scope, id, { type: CfnAccessPoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'fileSystemId', this);\n        this.attrAccessPointId = cdk.Token.asString(this.getAtt('AccessPointId'));\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.fileSystemId = props.fileSystemId;\n        this.accessPointTags = props.accessPointTags;\n        this.clientToken = props.clientToken;\n        this.posixUser = props.posixUser;\n        this.rootDirectory = props.rootDirectory;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAccessPoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            fileSystemId: this.fileSystemId,\n            accessPointTags: this.accessPointTags,\n            clientToken: this.clientToken,\n            posixUser: this.posixUser,\n            rootDirectory: this.rootDirectory,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAccessPointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAccessPoint {\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface AccessPointTagProperty {\n                                                                                                                                                                                                                                                                              \n        readonly key?: string;\n                                                                                                                                                                                                                                                  \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessPointTagProperty`\n *\n * @param properties - the TypeScript properties of a `AccessPointTagProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPoint_AccessPointTagPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"AccessPointTagProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.AccessPointTag` resource\n *\n * @param properties - the TypeScript properties of a `AccessPointTagProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.AccessPointTag` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointAccessPointTagPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPoint_AccessPointTagPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointAccessPointTagPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPoint.AccessPointTagProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPoint.AccessPointTagProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAccessPoint {\nn    export interface CreationInfoProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly ownerGid: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly ownerUid: string;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly permissions: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CreationInfoProperty`\n *\n * @param properties - the TypeScript properties of a `CreationInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPoint_CreationInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ownerGid', cdk.requiredValidator)(properties.ownerGid));\n    errors.collect(cdk.propertyValidator('ownerGid', cdk.validateString)(properties.ownerGid));\n    errors.collect(cdk.propertyValidator('ownerUid', cdk.requiredValidator)(properties.ownerUid));\n    errors.collect(cdk.propertyValidator('ownerUid', cdk.validateString)(properties.ownerUid));\n    errors.collect(cdk.propertyValidator('permissions', cdk.requiredValidator)(properties.permissions));\n    errors.collect(cdk.propertyValidator('permissions', cdk.validateString)(properties.permissions));\n    return errors.wrap('supplied properties not correct for \"CreationInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.CreationInfo` resource\n *\n * @param properties - the TypeScript properties of a `CreationInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.CreationInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointCreationInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPoint_CreationInfoPropertyValidator(properties).assertSuccess();\n    return {\n        OwnerGid: cdk.stringToCloudFormation(properties.ownerGid),\n        OwnerUid: cdk.stringToCloudFormation(properties.ownerUid),\n        Permissions: cdk.stringToCloudFormation(properties.permissions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointCreationInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPoint.CreationInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPoint.CreationInfoProperty>();\n    ret.addPropertyResult('ownerGid', 'OwnerGid', cfn_parse.FromCloudFormation.getString(properties.OwnerGid));\n    ret.addPropertyResult('ownerUid', 'OwnerUid', cfn_parse.FromCloudFormation.getString(properties.OwnerUid));\n    ret.addPropertyResult('permissions', 'Permissions', cfn_parse.FromCloudFormation.getString(properties.Permissions));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAccessPoint {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface PosixUserProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly gid: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly secondaryGids?: string[];\n                                                                                                                                                                                                                                                                                           \n        readonly uid: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PosixUserProperty`\n *\n * @param properties - the TypeScript properties of a `PosixUserProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPoint_PosixUserPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gid', cdk.requiredValidator)(properties.gid));\n    errors.collect(cdk.propertyValidator('gid', cdk.validateString)(properties.gid));\n    errors.collect(cdk.propertyValidator('secondaryGids', cdk.listValidator(cdk.validateString))(properties.secondaryGids));\n    errors.collect(cdk.propertyValidator('uid', cdk.requiredValidator)(properties.uid));\n    errors.collect(cdk.propertyValidator('uid', cdk.validateString)(properties.uid));\n    return errors.wrap('supplied properties not correct for \"PosixUserProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.PosixUser` resource\n *\n * @param properties - the TypeScript properties of a `PosixUserProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.PosixUser` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointPosixUserPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPoint_PosixUserPropertyValidator(properties).assertSuccess();\n    return {\n        Gid: cdk.stringToCloudFormation(properties.gid),\n        SecondaryGids: cdk.listMapper(cdk.stringToCloudFormation)(properties.secondaryGids),\n        Uid: cdk.stringToCloudFormation(properties.uid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointPosixUserPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPoint.PosixUserProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPoint.PosixUserProperty>();\n    ret.addPropertyResult('gid', 'Gid', cfn_parse.FromCloudFormation.getString(properties.Gid));\n    ret.addPropertyResult('secondaryGids', 'SecondaryGids', properties.SecondaryGids != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecondaryGids) : undefined);\n    ret.addPropertyResult('uid', 'Uid', cfn_parse.FromCloudFormation.getString(properties.Uid));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAccessPoint {\nn    export interface RootDirectoryProperty {\nn        readonly creationInfo?: CfnAccessPoint.CreationInfoProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly path?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RootDirectoryProperty`\n *\n * @param properties - the TypeScript properties of a `RootDirectoryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPoint_RootDirectoryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('creationInfo', CfnAccessPoint_CreationInfoPropertyValidator)(properties.creationInfo));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    return errors.wrap('supplied properties not correct for \"RootDirectoryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.RootDirectory` resource\n *\n * @param properties - the TypeScript properties of a `RootDirectoryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::AccessPoint.RootDirectory` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointRootDirectoryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPoint_RootDirectoryPropertyValidator(properties).assertSuccess();\n    return {\n        CreationInfo: cfnAccessPointCreationInfoPropertyToCloudFormation(properties.creationInfo),\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointRootDirectoryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPoint.RootDirectoryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPoint.RootDirectoryProperty>();\n    ret.addPropertyResult('creationInfo', 'CreationInfo', properties.CreationInfo != null ? CfnAccessPointCreationInfoPropertyFromCloudFormation(properties.CreationInfo) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                    \nexport interface CfnFileSystemProps {\n\nn    readonly availabilityZoneName?: string;\n\n                                                                                                                                                                                                                                                         \n    readonly backupPolicy?: CfnFileSystem.BackupPolicyProperty | cdk.IResolvable;\n\nn    readonly bypassPolicyLockoutSafetyCheck?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly encrypted?: boolean | cdk.IResolvable;\n\nn    readonly fileSystemPolicy?: any | cdk.IResolvable;\n\nn    readonly fileSystemTags?: CfnFileSystem.ElasticFileSystemTagProperty[];\n\nn    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly lifecyclePolicies?: Array<CfnFileSystem.LifecyclePolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly performanceMode?: string;\n\nn    readonly provisionedThroughputInMibps?: number;\n\nn    readonly throughputMode?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFileSystemProps`\n *\n * @param properties - the TypeScript properties of a `CfnFileSystemProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFileSystemPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZoneName', cdk.validateString)(properties.availabilityZoneName));\n    errors.collect(cdk.propertyValidator('backupPolicy', CfnFileSystem_BackupPolicyPropertyValidator)(properties.backupPolicy));\n    errors.collect(cdk.propertyValidator('bypassPolicyLockoutSafetyCheck', cdk.validateBoolean)(properties.bypassPolicyLockoutSafetyCheck));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('fileSystemPolicy', cdk.validateObject)(properties.fileSystemPolicy));\n    errors.collect(cdk.propertyValidator('fileSystemTags', cdk.listValidator(CfnFileSystem_ElasticFileSystemTagPropertyValidator))(properties.fileSystemTags));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('lifecyclePolicies', cdk.listValidator(CfnFileSystem_LifecyclePolicyPropertyValidator))(properties.lifecyclePolicies));\n    errors.collect(cdk.propertyValidator('performanceMode', cdk.validateString)(properties.performanceMode));\n    errors.collect(cdk.propertyValidator('provisionedThroughputInMibps', cdk.validateNumber)(properties.provisionedThroughputInMibps));\n    errors.collect(cdk.propertyValidator('throughputMode', cdk.validateString)(properties.throughputMode));\n    return errors.wrap('supplied properties not correct for \"CfnFileSystemProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::FileSystem` resource\n *\n * @param properties - the TypeScript properties of a `CfnFileSystemProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::FileSystem` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFileSystemPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFileSystemPropsValidator(properties).assertSuccess();\n    return {\n        AvailabilityZoneName: cdk.stringToCloudFormation(properties.availabilityZoneName),\n        BackupPolicy: cfnFileSystemBackupPolicyPropertyToCloudFormation(properties.backupPolicy),\n        BypassPolicyLockoutSafetyCheck: cdk.booleanToCloudFormation(properties.bypassPolicyLockoutSafetyCheck),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        FileSystemPolicy: cdk.objectToCloudFormation(properties.fileSystemPolicy),\n        FileSystemTags: cdk.listMapper(cfnFileSystemElasticFileSystemTagPropertyToCloudFormation)(properties.fileSystemTags),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        LifecyclePolicies: cdk.listMapper(cfnFileSystemLifecyclePolicyPropertyToCloudFormation)(properties.lifecyclePolicies),\n        PerformanceMode: cdk.stringToCloudFormation(properties.performanceMode),\n        ProvisionedThroughputInMibps: cdk.numberToCloudFormation(properties.provisionedThroughputInMibps),\n        ThroughputMode: cdk.stringToCloudFormation(properties.throughputMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFileSystemPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFileSystemProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFileSystemProps>();\n    ret.addPropertyResult('availabilityZoneName', 'AvailabilityZoneName', properties.AvailabilityZoneName != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZoneName) : undefined);\n    ret.addPropertyResult('backupPolicy', 'BackupPolicy', properties.BackupPolicy != null ? CfnFileSystemBackupPolicyPropertyFromCloudFormation(properties.BackupPolicy) : undefined);\n    ret.addPropertyResult('bypassPolicyLockoutSafetyCheck', 'BypassPolicyLockoutSafetyCheck', properties.BypassPolicyLockoutSafetyCheck != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BypassPolicyLockoutSafetyCheck) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('fileSystemPolicy', 'FileSystemPolicy', properties.FileSystemPolicy != null ? cfn_parse.FromCloudFormation.getAny(properties.FileSystemPolicy) : undefined);\n    ret.addPropertyResult('fileSystemTags', 'FileSystemTags', properties.FileSystemTags != null ? cfn_parse.FromCloudFormation.getArray(CfnFileSystemElasticFileSystemTagPropertyFromCloudFormation)(properties.FileSystemTags) : undefined as any);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('lifecyclePolicies', 'LifecyclePolicies', properties.LifecyclePolicies != null ? cfn_parse.FromCloudFormation.getArray(CfnFileSystemLifecyclePolicyPropertyFromCloudFormation)(properties.LifecyclePolicies) : undefined);\n    ret.addPropertyResult('performanceMode', 'PerformanceMode', properties.PerformanceMode != null ? cfn_parse.FromCloudFormation.getString(properties.PerformanceMode) : undefined);\n    ret.addPropertyResult('provisionedThroughputInMibps', 'ProvisionedThroughputInMibps', properties.ProvisionedThroughputInMibps != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedThroughputInMibps) : undefined);\n    ret.addPropertyResult('throughputMode', 'ThroughputMode', properties.ThroughputMode != null ? cfn_parse.FromCloudFormation.getString(properties.ThroughputMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFileSystem extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EFS::FileSystem\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFileSystem {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFileSystemPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFileSystem(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                \n    public readonly attrArn: string;\n\n                                                                                                                             \n    public readonly attrFileSystemId: string;\n\nn    public availabilityZoneName: string | undefined;\n\n                                                                                                                                                                                                                                                         \n    public backupPolicy: CfnFileSystem.BackupPolicyProperty | cdk.IResolvable | undefined;\n\nn    public bypassPolicyLockoutSafetyCheck: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public encrypted: boolean | cdk.IResolvable | undefined;\n\nn    public fileSystemPolicy: any | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\nn    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                        \n    public lifecyclePolicies: Array<CfnFileSystem.LifecyclePolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public performanceMode: string | undefined;\n\nn    public provisionedThroughputInMibps: number | undefined;\n\nn    public throughputMode: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnFileSystemProps = {}) {\n        super(scope, id, { type: CfnFileSystem.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrFileSystemId = cdk.Token.asString(this.getAtt('FileSystemId'));\n\n        this.availabilityZoneName = props.availabilityZoneName;\n        this.backupPolicy = props.backupPolicy;\n        this.bypassPolicyLockoutSafetyCheck = props.bypassPolicyLockoutSafetyCheck;\n        this.encrypted = props.encrypted;\n        this.fileSystemPolicy = props.fileSystemPolicy;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EFS::FileSystem\", props.fileSystemTags, { tagPropertyName: 'fileSystemTags' });\n        this.kmsKeyId = props.kmsKeyId;\n        this.lifecyclePolicies = props.lifecyclePolicies;\n        this.performanceMode = props.performanceMode;\n        this.provisionedThroughputInMibps = props.provisionedThroughputInMibps;\n        this.throughputMode = props.throughputMode;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::EFS::FileSystem\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFileSystem.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            availabilityZoneName: this.availabilityZoneName,\n            backupPolicy: this.backupPolicy,\n            bypassPolicyLockoutSafetyCheck: this.bypassPolicyLockoutSafetyCheck,\n            encrypted: this.encrypted,\n            fileSystemPolicy: this.fileSystemPolicy,\n            fileSystemTags: this.tags.renderTags(),\n            kmsKeyId: this.kmsKeyId,\n            lifecyclePolicies: this.lifecyclePolicies,\n            performanceMode: this.performanceMode,\n            provisionedThroughputInMibps: this.provisionedThroughputInMibps,\n            throughputMode: this.throughputMode,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFileSystemPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFileSystem {\n                                                                                                                                                                                                                                                                                  \n    export interface BackupPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BackupPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `BackupPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFileSystem_BackupPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"BackupPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::FileSystem.BackupPolicy` resource\n *\n * @param properties - the TypeScript properties of a `BackupPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::FileSystem.BackupPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFileSystemBackupPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFileSystem_BackupPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFileSystemBackupPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFileSystem.BackupPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFileSystem.BackupPolicyProperty>();\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFileSystem {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface ElasticFileSystemTagProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly key: string;\n                                                                                                                                                                                                                                                            \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ElasticFileSystemTagProperty`\n *\n * @param properties - the TypeScript properties of a `ElasticFileSystemTagProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFileSystem_ElasticFileSystemTagPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ElasticFileSystemTagProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::FileSystem.ElasticFileSystemTag` resource\n *\n * @param properties - the TypeScript properties of a `ElasticFileSystemTagProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::FileSystem.ElasticFileSystemTag` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFileSystemElasticFileSystemTagPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFileSystem_ElasticFileSystemTagPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFileSystemElasticFileSystemTagPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFileSystem.ElasticFileSystemTagProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFileSystem.ElasticFileSystemTagProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFileSystem {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface LifecyclePolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly transitionToIa?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly transitionToPrimaryStorageClass?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LifecyclePolicyProperty`\n *\n * @param properties - the TypeScript properties of a `LifecyclePolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFileSystem_LifecyclePolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('transitionToIa', cdk.validateString)(properties.transitionToIa));\n    errors.collect(cdk.propertyValidator('transitionToPrimaryStorageClass', cdk.validateString)(properties.transitionToPrimaryStorageClass));\n    return errors.wrap('supplied properties not correct for \"LifecyclePolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::FileSystem.LifecyclePolicy` resource\n *\n * @param properties - the TypeScript properties of a `LifecyclePolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::FileSystem.LifecyclePolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFileSystemLifecyclePolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFileSystem_LifecyclePolicyPropertyValidator(properties).assertSuccess();\n    return {\n        TransitionToIA: cdk.stringToCloudFormation(properties.transitionToIa),\n        TransitionToPrimaryStorageClass: cdk.stringToCloudFormation(properties.transitionToPrimaryStorageClass),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFileSystemLifecyclePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFileSystem.LifecyclePolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFileSystem.LifecyclePolicyProperty>();\n    ret.addPropertyResult('transitionToIa', 'TransitionToIA', properties.TransitionToIA != null ? cfn_parse.FromCloudFormation.getString(properties.TransitionToIA) : undefined);\n    ret.addPropertyResult('transitionToPrimaryStorageClass', 'TransitionToPrimaryStorageClass', properties.TransitionToPrimaryStorageClass != null ? cfn_parse.FromCloudFormation.getString(properties.TransitionToPrimaryStorageClass) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnMountTargetProps {\n\n                                                                                                                                                                                                                                           \n    readonly fileSystemId: string;\n\n                                                                                                                                                                                                                                                                                                \n    readonly securityGroups: string[];\n\n                                                                                                                                                                                                                                                                                                                                                        \n    readonly subnetId: string;\n\n                                                                                                                                                                                                                                             \n    readonly ipAddress?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMountTargetProps`\n *\n * @param properties - the TypeScript properties of a `CfnMountTargetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMountTargetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fileSystemId', cdk.requiredValidator)(properties.fileSystemId));\n    errors.collect(cdk.propertyValidator('fileSystemId', cdk.validateString)(properties.fileSystemId));\n    errors.collect(cdk.propertyValidator('ipAddress', cdk.validateString)(properties.ipAddress));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.requiredValidator)(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"CfnMountTargetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EFS::MountTarget` resource\n *\n * @param properties - the TypeScript properties of a `CfnMountTargetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EFS::MountTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMountTargetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMountTargetPropsValidator(properties).assertSuccess();\n    return {\n        FileSystemId: cdk.stringToCloudFormation(properties.fileSystemId),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        IpAddress: cdk.stringToCloudFormation(properties.ipAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMountTargetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMountTargetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMountTargetProps>();\n    ret.addPropertyResult('fileSystemId', 'FileSystemId', cfn_parse.FromCloudFormation.getString(properties.FileSystemId));\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups));\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addPropertyResult('ipAddress', 'IpAddress', properties.IpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.IpAddress) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnMountTarget extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EFS::MountTarget\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMountTarget {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMountTargetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMountTarget(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                      \n    public readonly attrId: string;\n\n                                                                                                                                       \n    public readonly attrIpAddress: string;\n\n                                                                                                                                                                                                                                           \n    public fileSystemId: string;\n\n                                                                                                                                                                                                                                                                                                \n    public securityGroups: string[];\n\n                                                                                                                                                                                                                                                                                                                                                        \n    public subnetId: string;\n\n                                                                                                                                                                                                                                             \n    public ipAddress: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnMountTargetProps) {\n        super(scope, id, { type: CfnMountTarget.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'fileSystemId', this);\n        cdk.requireProperty(props, 'securityGroups', this);\n        cdk.requireProperty(props, 'subnetId', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrIpAddress = cdk.Token.asString(this.getAtt('IpAddress'));\n\n        this.fileSystemId = props.fileSystemId;\n        this.securityGroups = props.securityGroups;\n        this.subnetId = props.subnetId;\n        this.ipAddress = props.ipAddress;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMountTarget.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            fileSystemId: this.fileSystemId,\n            securityGroups: this.securityGroups,\n            subnetId: this.subnetId,\n            ipAddress: this.ipAddress,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMountTargetPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
