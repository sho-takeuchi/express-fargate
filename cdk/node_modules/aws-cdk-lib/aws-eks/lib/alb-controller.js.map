{
  "version": 3,
  "sources": ["alb-controller.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport { Construct, Node } from 'constructs';\nimport { Cluster } from './cluster';\nimport { HelmChart } from './helm-chart';\nimport { ServiceAccount } from './service-account';\n\n// v2 - keep this import as a separate section to reduce merge conflict when forward merging with the v2 branch.\n// eslint-disable-next-line\nimport { Duration, Names, Stack } from '../../core';\n\n                                                                                                                 \nexport class AlbControllerVersion {\n\n                       \n  public static readonly V2_0_0 = new AlbControllerVersion('v2.0.0', false);\n\n                       \n  public static readonly V2_0_1 = new AlbControllerVersion('v2.0.1', false);\n\n                       \n  public static readonly V2_1_0 = new AlbControllerVersion('v2.1.0', false);\n\n                       \n  public static readonly V2_1_1 = new AlbControllerVersion('v2.1.1', false);\n\n                       \n  public static readonly V2_1_2 = new AlbControllerVersion('v2.1.2', false);\n\n                       \n  public static readonly V2_1_3 = new AlbControllerVersion('v2.1.3', false);\n\n                       \n  public static readonly V2_2_0 = new AlbControllerVersion('v2.2.0', false);\n\n                       \n  public static readonly V2_2_1 = new AlbControllerVersion('v2.2.1', false);\n\n                       \n  public static readonly V2_2_2 = new AlbControllerVersion('v2.2.2', false);\n\n                       \n  public static readonly V2_2_3 = new AlbControllerVersion('v2.2.3', false);\n\n                       \n  public static readonly V2_2_4 = new AlbControllerVersion('v2.2.4', false);\n\n                       \n  public static readonly V2_3_0 = new AlbControllerVersion('v2.3.0', false);\n\n                       \n  public static readonly V2_3_1 = new AlbControllerVersion('v2.3.1', false);\n\n                                                                                                                                                                                                                                                                                     \n  public static of(version: string) {\n    return new AlbControllerVersion(version, true);\n  }\n\n  private constructor(\n    /**\n     * The version string.\n     */\n    public readonly version: string,\n    /**\n     * Whether or not its a custom version.\n     */\n    public readonly custom: boolean) {}\n}\n\n                                                                                                                                       \nexport enum AlbScheme {\n\n                                                                                                                                                                                                                                                                                                                                  \n  INTERNAL = 'internal',\n\n                                                                                                                                                                                                                   \n  INTERNET_FACING = 'internet-facing'\n}\n\n                                       \nexport interface AlbControllerOptions {\n\n                                           \n  readonly version: AlbControllerVersion;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly repository?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n  readonly policy?: any;\n\n}\n\n                                          \nexport interface AlbControllerProps extends AlbControllerOptions {\n\n                                                                                                 \n  readonly cluster: Cluster;\n}\n\n                                                                                                                                                                                                                                                              \nexport class AlbController extends Construct {\n\n                                                                                                                               \n  public static create(scope: Construct, props: AlbControllerProps) {\n    const stack = Stack.of(scope);\n    const uid = AlbController.uid(props.cluster);\n    return new AlbController(stack, uid, props);\n  }\n\n  private static uid(cluster: Cluster) {\n    return `${Names.nodeUniqueId(cluster.node)}-AlbController`;\n  }\n\n  public constructor(scope: Construct, id: string, props: AlbControllerProps) {\n    super(scope, id);\n\n    const namespace = 'kube-system';\n    const serviceAccount = new ServiceAccount(this, 'alb-sa', { namespace, name: 'aws-load-balancer-controller', cluster: props.cluster });\n\n    if (props.version.custom && !props.policy) {\n      throw new Error(\"'albControllerOptions.policy' is required when using a custom controller version\");\n    }\n\n    // https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/installation/#iam-permissions\n    const policy: any = props.policy ?? JSON.parse(fs.readFileSync(path.join(__dirname, 'addons', `alb-iam_policy-${props.version.version}.json`), 'utf8'));\n\n    for (const statement of policy.Statement) {\n      serviceAccount.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));\n    }\n\n    // https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/installation/#add-controller-to-cluster\n    const chart = new HelmChart(this, 'Resource', {\n      cluster: props.cluster,\n      chart: 'aws-load-balancer-controller',\n      repository: 'https://aws.github.io/eks-charts',\n      namespace,\n      release: 'aws-load-balancer-controller',\n\n      // latest at the time of writing. We intentionally don't\n      // want to expose this since helm here is just an implementation detail\n      // for installing a specific version of the controller itself.\n      // https://github.com/aws/eks-charts/blob/v0.0.65/stable/aws-load-balancer-controller/Chart.yaml\n      version: '1.2.7',\n\n      wait: true,\n      timeout: Duration.minutes(15),\n      values: {\n        clusterName: props.cluster.clusterName,\n        serviceAccount: {\n          create: false,\n          name: serviceAccount.serviceAccountName,\n        },\n        region: Stack.of(this).region,\n        vpcId: props.cluster.vpc.vpcId,\n        image: {\n          repository: props.repository ?? '602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-load-balancer-controller',\n          tag: props.version.version,\n        },\n      },\n    });\n\n    // the controller relies on permissions deployed using these resources.\n    Node.of(chart).addDependency(serviceAccount);\n    Node.of(chart).addDependency(props.cluster.openIdConnectProvider);\n    Node.of(chart).addDependency(props.cluster.awsAuth);\n  }\n}\n"],
  "mappings": "sQAAA,GAAA,QAAA,MACA,KAAA,QAAA,QACA,IAAA,QAAA,iBACA,aAAA,QAAA,cAEA,aAAA,QAAA,gBACA,kBAAA,QAAA,qBAIA,OAAA,QAAA,cAGA,0BAAiC,CA8C/B,YAIkB,QAIA,OAAe,CAJf,KAAA,QAAA,QAIA,KAAA,OAAA,aAZJ,IAAG,QAAe,CAC9B,MAAO,IAAI,sBAAqB,QAAS,KA3C7C,QAAA,qBAAA,sIAGyB,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAG5C,qBAAA,OAAS,GAAI,sBAAqB,SAAU,IAmBrE,GAAY,WAAZ,AAAA,UAAY,WAAS,CAGnB,WAAA,SAAA,WAGA,WAAA,gBAAA,oBANU,UAAA,QAAA,WAAA,SAAA,UAAS,KA+BrB,2BAAmC,cAAA,SAAS,CAa1C,YAAmB,MAAkB,GAAY,MAAyB,WACxE,MAAM,MAAO,0EAEb,KAAM,WAAY,cACZ,eAAiB,GAAI,mBAAA,eAAe,KAAM,SAAU,CAAE,UAAW,KAAM,+BAAgC,QAAS,MAAM,UAE5H,GAAI,MAAM,QAAQ,QAAU,CAAC,MAAM,OACjC,KAAM,IAAI,OAAM,oFAIlB,KAAM,QAAM,IAAQ,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,KAAK,MAAM,GAAG,aAAa,KAAK,KAAK,UAAW,SAAU,kBAAkB,MAAM,QAAQ,gBAAiB,SAE/I,SAAW,aAAa,QAAO,UAC7B,eAAe,qBAAqB,IAAI,gBAAgB,SAAS,YAInE,KAAM,OAAQ,GAAI,cAAA,UAAU,KAAM,WAAY,CAC5C,QAAS,MAAM,QACf,MAAO,+BACP,WAAY,mCACZ,UACA,QAAS,+BAMT,QAAS,QAET,KAAM,GACN,QAAS,OAAA,SAAS,QAAQ,IAC1B,OAAQ,CACN,YAAa,MAAM,QAAQ,YAC3B,eAAgB,CACd,OAAQ,GACR,KAAM,eAAe,oBAEvB,OAAQ,OAAA,MAAM,GAAG,MAAM,OACvB,MAAO,MAAM,QAAQ,IAAI,MACzB,MAAO,CACL,WAAU,IAAE,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,mFAChC,IAAK,MAAM,QAAQ,YAMzB,aAAA,KAAK,GAAG,OAAO,cAAc,gBAC7B,aAAA,KAAK,GAAG,OAAO,cAAc,MAAM,QAAQ,uBAC3C,aAAA,KAAK,GAAG,OAAO,cAAc,MAAM,QAAQ,eA7D/B,QAAO,MAAkB,MAAyB,uEAC9D,KAAM,OAAQ,OAAA,MAAM,GAAG,OACjB,IAAM,cAAc,IAAI,MAAM,SACpC,MAAO,IAAI,eAAc,MAAO,IAAK,aAGxB,KAAI,QAAgB,CACjC,MAAO,GAAG,OAAA,MAAM,aAAa,QAAQ,uBAVzC,QAAA,cAAA",
  "names": []
}
