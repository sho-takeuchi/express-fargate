{
  "version": 3,
  "sources": ["eks.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:03:10.780Z\",\"fingerprint\":\"0yIYQXMmhH4dpI4Tx/c3EzBxNREc6vnAsk8HPJWFSKU=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                          \nexport interface CfnAddonProps {\n\n                                                                                                                                                                                    \n    readonly addonName: string;\n\n                                                                                                                                                                                       \n    readonly clusterName: string;\n\n                                                                                                                                                                                          \n    readonly addonVersion?: string;\n\n                                                                                                                                                                                                                                                                       \n    readonly resolveConflicts?: string;\n\nn    readonly serviceAccountRoleArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAddonProps`\n *\n * @param properties - the TypeScript properties of a `CfnAddonProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAddonPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addonName', cdk.requiredValidator)(properties.addonName));\n    errors.collect(cdk.propertyValidator('addonName', cdk.validateString)(properties.addonName));\n    errors.collect(cdk.propertyValidator('addonVersion', cdk.validateString)(properties.addonVersion));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.requiredValidator)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('resolveConflicts', cdk.validateString)(properties.resolveConflicts));\n    errors.collect(cdk.propertyValidator('serviceAccountRoleArn', cdk.validateString)(properties.serviceAccountRoleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAddonProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Addon` resource\n *\n * @param properties - the TypeScript properties of a `CfnAddonProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Addon` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAddonPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAddonPropsValidator(properties).assertSuccess();\n    return {\n        AddonName: cdk.stringToCloudFormation(properties.addonName),\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        AddonVersion: cdk.stringToCloudFormation(properties.addonVersion),\n        ResolveConflicts: cdk.stringToCloudFormation(properties.resolveConflicts),\n        ServiceAccountRoleArn: cdk.stringToCloudFormation(properties.serviceAccountRoleArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAddonPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAddonProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAddonProps>();\n    ret.addPropertyResult('addonName', 'AddonName', cfn_parse.FromCloudFormation.getString(properties.AddonName));\n    ret.addPropertyResult('clusterName', 'ClusterName', cfn_parse.FromCloudFormation.getString(properties.ClusterName));\n    ret.addPropertyResult('addonVersion', 'AddonVersion', properties.AddonVersion != null ? cfn_parse.FromCloudFormation.getString(properties.AddonVersion) : undefined);\n    ret.addPropertyResult('resolveConflicts', 'ResolveConflicts', properties.ResolveConflicts != null ? cfn_parse.FromCloudFormation.getString(properties.ResolveConflicts) : undefined);\n    ret.addPropertyResult('serviceAccountRoleArn', 'ServiceAccountRoleArn', properties.ServiceAccountRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceAccountRoleArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAddon extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EKS::Addon\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAddon {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAddonPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAddon(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                        \n    public readonly attrArn: string;\n\n                                                                                                                                                                                    \n    public addonName: string;\n\n                                                                                                                                                                                       \n    public clusterName: string;\n\n                                                                                                                                                                                          \n    public addonVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                       \n    public resolveConflicts: string | undefined;\n\nn    public serviceAccountRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnAddonProps) {\n        super(scope, id, { type: CfnAddon.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'addonName', this);\n        cdk.requireProperty(props, 'clusterName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.addonName = props.addonName;\n        this.clusterName = props.clusterName;\n        this.addonVersion = props.addonVersion;\n        this.resolveConflicts = props.resolveConflicts;\n        this.serviceAccountRoleArn = props.serviceAccountRoleArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EKS::Addon\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAddon.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            addonName: this.addonName,\n            clusterName: this.clusterName,\n            addonVersion: this.addonVersion,\n            resolveConflicts: this.resolveConflicts,\n            serviceAccountRoleArn: this.serviceAccountRoleArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAddonPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                              \nexport interface CfnClusterProps {\n\nn    readonly resourcesVpcConfig: CfnCluster.ResourcesVpcConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                     \n    readonly encryptionConfig?: Array<CfnCluster.EncryptionConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    readonly kubernetesNetworkConfig?: CfnCluster.KubernetesNetworkConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                          \n    readonly logging?: CfnCluster.LoggingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                    \n    readonly name?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                      \n    readonly version?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionConfig', cdk.listValidator(CfnCluster_EncryptionConfigPropertyValidator))(properties.encryptionConfig));\n    errors.collect(cdk.propertyValidator('kubernetesNetworkConfig', CfnCluster_KubernetesNetworkConfigPropertyValidator)(properties.kubernetesNetworkConfig));\n    errors.collect(cdk.propertyValidator('logging', CfnCluster_LoggingPropertyValidator)(properties.logging));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('resourcesVpcConfig', cdk.requiredValidator)(properties.resourcesVpcConfig));\n    errors.collect(cdk.propertyValidator('resourcesVpcConfig', CfnCluster_ResourcesVpcConfigPropertyValidator)(properties.resourcesVpcConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterPropsValidator(properties).assertSuccess();\n    return {\n        ResourcesVpcConfig: cfnClusterResourcesVpcConfigPropertyToCloudFormation(properties.resourcesVpcConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        EncryptionConfig: cdk.listMapper(cfnClusterEncryptionConfigPropertyToCloudFormation)(properties.encryptionConfig),\n        KubernetesNetworkConfig: cfnClusterKubernetesNetworkConfigPropertyToCloudFormation(properties.kubernetesNetworkConfig),\n        Logging: cfnClusterLoggingPropertyToCloudFormation(properties.logging),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterProps>();\n    ret.addPropertyResult('resourcesVpcConfig', 'ResourcesVpcConfig', CfnClusterResourcesVpcConfigPropertyFromCloudFormation(properties.ResourcesVpcConfig));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('encryptionConfig', 'EncryptionConfig', properties.EncryptionConfig != null ? cfn_parse.FromCloudFormation.getArray(CfnClusterEncryptionConfigPropertyFromCloudFormation)(properties.EncryptionConfig) : undefined);\n    ret.addPropertyResult('kubernetesNetworkConfig', 'KubernetesNetworkConfig', properties.KubernetesNetworkConfig != null ? CfnClusterKubernetesNetworkConfigPropertyFromCloudFormation(properties.KubernetesNetworkConfig) : undefined);\n    ret.addPropertyResult('logging', 'Logging', properties.Logging != null ? CfnClusterLoggingPropertyFromCloudFormation(properties.Logging) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCluster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EKS::Cluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                                                                  \n    public readonly attrCertificateAuthorityData: string;\n\nn    public readonly attrClusterSecurityGroupId: string;\n\n                                                                                                                                                   \n    public readonly attrEncryptionConfigKeyArn: string;\n\n                                                                                                                                                                                                 \n    public readonly attrEndpoint: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public readonly attrKubernetesNetworkConfigServiceIpv6Cidr: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly attrOpenIdConnectIssuerUrl: string;\n\nn    public resourcesVpcConfig: CfnCluster.ResourcesVpcConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public roleArn: string;\n\n                                                                                                                                                                                                                     \n    public encryptionConfig: Array<CfnCluster.EncryptionConfigProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                    \n    public kubernetesNetworkConfig: CfnCluster.KubernetesNetworkConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                          \n    public logging: CfnCluster.LoggingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                    \n    public name: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                      \n    public version: string | undefined;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterProps) {\n        super(scope, id, { type: CfnCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'resourcesVpcConfig', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCertificateAuthorityData = cdk.Token.asString(this.getAtt('CertificateAuthorityData'));\n        this.attrClusterSecurityGroupId = cdk.Token.asString(this.getAtt('ClusterSecurityGroupId'));\n        this.attrEncryptionConfigKeyArn = cdk.Token.asString(this.getAtt('EncryptionConfigKeyArn'));\n        this.attrEndpoint = cdk.Token.asString(this.getAtt('Endpoint'));\n        this.attrKubernetesNetworkConfigServiceIpv6Cidr = cdk.Token.asString(this.getAtt('KubernetesNetworkConfig.ServiceIpv6Cidr'));\n        this.attrOpenIdConnectIssuerUrl = cdk.Token.asString(this.getAtt('OpenIdConnectIssuerUrl'));\n\n        this.resourcesVpcConfig = props.resourcesVpcConfig;\n        this.roleArn = props.roleArn;\n        this.encryptionConfig = props.encryptionConfig;\n        this.kubernetesNetworkConfig = props.kubernetesNetworkConfig;\n        this.logging = props.logging;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EKS::Cluster\", props.tags, { tagPropertyName: 'tags' });\n        this.version = props.version;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resourcesVpcConfig: this.resourcesVpcConfig,\n            roleArn: this.roleArn,\n            encryptionConfig: this.encryptionConfig,\n            kubernetesNetworkConfig: this.kubernetesNetworkConfig,\n            logging: this.logging,\n            name: this.name,\n            tags: this.tags.renderTags(),\n            version: this.version,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface ClusterLoggingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly enabledTypes?: Array<CfnCluster.LoggingTypeConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterLoggingProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterLoggingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ClusterLoggingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabledTypes', cdk.listValidator(CfnCluster_LoggingTypeConfigPropertyValidator))(properties.enabledTypes));\n    return errors.wrap('supplied properties not correct for \"ClusterLoggingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster.ClusterLogging` resource\n *\n * @param properties - the TypeScript properties of a `ClusterLoggingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster.ClusterLogging` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterClusterLoggingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ClusterLoggingPropertyValidator(properties).assertSuccess();\n    return {\n        EnabledTypes: cdk.listMapper(cfnClusterLoggingTypeConfigPropertyToCloudFormation)(properties.enabledTypes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterClusterLoggingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ClusterLoggingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ClusterLoggingProperty>();\n    ret.addPropertyResult('enabledTypes', 'EnabledTypes', properties.EnabledTypes != null ? cfn_parse.FromCloudFormation.getArray(CfnClusterLoggingTypeConfigPropertyFromCloudFormation)(properties.EnabledTypes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                        \n    export interface EncryptionConfigProperty {\n                                                                                                                                                                                                                                                                \n        readonly provider?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly resources?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionConfigProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_EncryptionConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('provider', cdk.validateObject)(properties.provider));\n    errors.collect(cdk.propertyValidator('resources', cdk.listValidator(cdk.validateString))(properties.resources));\n    return errors.wrap('supplied properties not correct for \"EncryptionConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster.EncryptionConfig` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster.EncryptionConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterEncryptionConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_EncryptionConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Provider: cdk.objectToCloudFormation(properties.provider),\n        Resources: cdk.listMapper(cdk.stringToCloudFormation)(properties.resources),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterEncryptionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.EncryptionConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.EncryptionConfigProperty>();\n    ret.addPropertyResult('provider', 'Provider', properties.Provider != null ? cfn_parse.FromCloudFormation.getAny(properties.Provider) : undefined);\n    ret.addPropertyResult('resources', 'Resources', properties.Resources != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Resources) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                       \n    export interface KubernetesNetworkConfigProperty {\nn        readonly ipFamily?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly serviceIpv4Cidr?: string;\nn        readonly serviceIpv6Cidr?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KubernetesNetworkConfigProperty`\n *\n * @param properties - the TypeScript properties of a `KubernetesNetworkConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_KubernetesNetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipFamily', cdk.validateString)(properties.ipFamily));\n    errors.collect(cdk.propertyValidator('serviceIpv4Cidr', cdk.validateString)(properties.serviceIpv4Cidr));\n    errors.collect(cdk.propertyValidator('serviceIpv6Cidr', cdk.validateString)(properties.serviceIpv6Cidr));\n    return errors.wrap('supplied properties not correct for \"KubernetesNetworkConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster.KubernetesNetworkConfig` resource\n *\n * @param properties - the TypeScript properties of a `KubernetesNetworkConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster.KubernetesNetworkConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterKubernetesNetworkConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_KubernetesNetworkConfigPropertyValidator(properties).assertSuccess();\n    return {\n        IpFamily: cdk.stringToCloudFormation(properties.ipFamily),\n        ServiceIpv4Cidr: cdk.stringToCloudFormation(properties.serviceIpv4Cidr),\n        ServiceIpv6Cidr: cdk.stringToCloudFormation(properties.serviceIpv6Cidr),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterKubernetesNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.KubernetesNetworkConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.KubernetesNetworkConfigProperty>();\n    ret.addPropertyResult('ipFamily', 'IpFamily', properties.IpFamily != null ? cfn_parse.FromCloudFormation.getString(properties.IpFamily) : undefined);\n    ret.addPropertyResult('serviceIpv4Cidr', 'ServiceIpv4Cidr', properties.ServiceIpv4Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceIpv4Cidr) : undefined);\n    ret.addPropertyResult('serviceIpv6Cidr', 'ServiceIpv6Cidr', properties.ServiceIpv6Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceIpv6Cidr) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\nn    export interface LoggingProperty {\n                                                                                                                                                                                                                                                                             \n        readonly clusterLogging?: CfnCluster.ClusterLoggingProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_LoggingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterLogging', CfnCluster_ClusterLoggingPropertyValidator)(properties.clusterLogging));\n    return errors.wrap('supplied properties not correct for \"LoggingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster.Logging` resource\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster.Logging` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterLoggingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_LoggingPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterLogging: cfnClusterClusterLoggingPropertyToCloudFormation(properties.clusterLogging),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterLoggingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.LoggingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.LoggingProperty>();\n    ret.addPropertyResult('clusterLogging', 'ClusterLogging', properties.ClusterLogging != null ? CfnClusterClusterLoggingPropertyFromCloudFormation(properties.ClusterLogging) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface LoggingTypeConfigProperty {\n                                                                                                                                                                                                                                               \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingTypeConfigProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingTypeConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_LoggingTypeConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"LoggingTypeConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster.LoggingTypeConfig` resource\n *\n * @param properties - the TypeScript properties of a `LoggingTypeConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster.LoggingTypeConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterLoggingTypeConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_LoggingTypeConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterLoggingTypeConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.LoggingTypeConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.LoggingTypeConfigProperty>();\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\nn    export interface ResourcesVpcConfigProperty {\nn        readonly endpointPrivateAccess?: boolean | cdk.IResolvable;\nn        readonly endpointPublicAccess?: boolean | cdk.IResolvable;\nn        readonly publicAccessCidrs?: string[];\nn        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly subnetIds: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcesVpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcesVpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ResourcesVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointPrivateAccess', cdk.validateBoolean)(properties.endpointPrivateAccess));\n    errors.collect(cdk.propertyValidator('endpointPublicAccess', cdk.validateBoolean)(properties.endpointPublicAccess));\n    errors.collect(cdk.propertyValidator('publicAccessCidrs', cdk.listValidator(cdk.validateString))(properties.publicAccessCidrs));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"ResourcesVpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Cluster.ResourcesVpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `ResourcesVpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Cluster.ResourcesVpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterResourcesVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ResourcesVpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointPrivateAccess: cdk.booleanToCloudFormation(properties.endpointPrivateAccess),\n        EndpointPublicAccess: cdk.booleanToCloudFormation(properties.endpointPublicAccess),\n        PublicAccessCidrs: cdk.listMapper(cdk.stringToCloudFormation)(properties.publicAccessCidrs),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterResourcesVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ResourcesVpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ResourcesVpcConfigProperty>();\n    ret.addPropertyResult('endpointPrivateAccess', 'EndpointPrivateAccess', properties.EndpointPrivateAccess != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EndpointPrivateAccess) : undefined);\n    ret.addPropertyResult('endpointPublicAccess', 'EndpointPublicAccess', properties.EndpointPublicAccess != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EndpointPublicAccess) : undefined);\n    ret.addPropertyResult('publicAccessCidrs', 'PublicAccessCidrs', properties.PublicAccessCidrs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PublicAccessCidrs) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnFargateProfileProps {\n\n                                                                                                                                                                                                                                                    \n    readonly clusterName: string;\n\nn    readonly podExecutionRoleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly selectors: Array<CfnFargateProfile.SelectorProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly fargateProfileName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly subnets?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFargateProfileProps`\n *\n * @param properties - the TypeScript properties of a `CfnFargateProfileProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFargateProfilePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterName', cdk.requiredValidator)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('fargateProfileName', cdk.validateString)(properties.fargateProfileName));\n    errors.collect(cdk.propertyValidator('podExecutionRoleArn', cdk.requiredValidator)(properties.podExecutionRoleArn));\n    errors.collect(cdk.propertyValidator('podExecutionRoleArn', cdk.validateString)(properties.podExecutionRoleArn));\n    errors.collect(cdk.propertyValidator('selectors', cdk.requiredValidator)(properties.selectors));\n    errors.collect(cdk.propertyValidator('selectors', cdk.listValidator(CfnFargateProfile_SelectorPropertyValidator))(properties.selectors));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnFargateProfileProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::FargateProfile` resource\n *\n * @param properties - the TypeScript properties of a `CfnFargateProfileProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::FargateProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFargateProfilePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFargateProfilePropsValidator(properties).assertSuccess();\n    return {\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        PodExecutionRoleArn: cdk.stringToCloudFormation(properties.podExecutionRoleArn),\n        Selectors: cdk.listMapper(cfnFargateProfileSelectorPropertyToCloudFormation)(properties.selectors),\n        FargateProfileName: cdk.stringToCloudFormation(properties.fargateProfileName),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFargateProfilePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFargateProfileProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFargateProfileProps>();\n    ret.addPropertyResult('clusterName', 'ClusterName', cfn_parse.FromCloudFormation.getString(properties.ClusterName));\n    ret.addPropertyResult('podExecutionRoleArn', 'PodExecutionRoleArn', cfn_parse.FromCloudFormation.getString(properties.PodExecutionRoleArn));\n    ret.addPropertyResult('selectors', 'Selectors', cfn_parse.FromCloudFormation.getArray(CfnFargateProfileSelectorPropertyFromCloudFormation)(properties.Selectors));\n    ret.addPropertyResult('fargateProfileName', 'FargateProfileName', properties.FargateProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.FargateProfileName) : undefined);\n    ret.addPropertyResult('subnets', 'Subnets', properties.Subnets != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Subnets) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFargateProfile extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EKS::FargateProfile\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFargateProfile {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFargateProfilePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFargateProfile(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                    \n    public clusterName: string;\n\nn    public podExecutionRoleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    public selectors: Array<CfnFargateProfile.SelectorProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    public fargateProfileName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n    public subnets: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnFargateProfileProps) {\n        super(scope, id, { type: CfnFargateProfile.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clusterName', this);\n        cdk.requireProperty(props, 'podExecutionRoleArn', this);\n        cdk.requireProperty(props, 'selectors', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.clusterName = props.clusterName;\n        this.podExecutionRoleArn = props.podExecutionRoleArn;\n        this.selectors = props.selectors;\n        this.fargateProfileName = props.fargateProfileName;\n        this.subnets = props.subnets;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EKS::FargateProfile\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFargateProfile.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clusterName: this.clusterName,\n            podExecutionRoleArn: this.podExecutionRoleArn,\n            selectors: this.selectors,\n            fargateProfileName: this.fargateProfileName,\n            subnets: this.subnets,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFargateProfilePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFargateProfile {\n                                                                                                                                                                                                                        \n    export interface LabelProperty {\n                                                                                                                                                                                                                       \n        readonly key: string;\n                                                                                                                                                                                                                           \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LabelProperty`\n *\n * @param properties - the TypeScript properties of a `LabelProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFargateProfile_LabelPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"LabelProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::FargateProfile.Label` resource\n *\n * @param properties - the TypeScript properties of a `LabelProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::FargateProfile.Label` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFargateProfileLabelPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFargateProfile_LabelPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFargateProfileLabelPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFargateProfile.LabelProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFargateProfile.LabelProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFargateProfile {\n                                                                                                                                                                                                                                                                 \n    export interface SelectorProperty {\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly labels?: Array<CfnFargateProfile.LabelProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly namespace: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SelectorProperty`\n *\n * @param properties - the TypeScript properties of a `SelectorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFargateProfile_SelectorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('labels', cdk.listValidator(CfnFargateProfile_LabelPropertyValidator))(properties.labels));\n    errors.collect(cdk.propertyValidator('namespace', cdk.requiredValidator)(properties.namespace));\n    errors.collect(cdk.propertyValidator('namespace', cdk.validateString)(properties.namespace));\n    return errors.wrap('supplied properties not correct for \"SelectorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::FargateProfile.Selector` resource\n *\n * @param properties - the TypeScript properties of a `SelectorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::FargateProfile.Selector` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFargateProfileSelectorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFargateProfile_SelectorPropertyValidator(properties).assertSuccess();\n    return {\n        Labels: cdk.listMapper(cfnFargateProfileLabelPropertyToCloudFormation)(properties.labels),\n        Namespace: cdk.stringToCloudFormation(properties.namespace),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFargateProfileSelectorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFargateProfile.SelectorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFargateProfile.SelectorProperty>();\n    ret.addPropertyResult('labels', 'Labels', properties.Labels != null ? cfn_parse.FromCloudFormation.getArray(CfnFargateProfileLabelPropertyFromCloudFormation)(properties.Labels) : undefined);\n    ret.addPropertyResult('namespace', 'Namespace', cfn_parse.FromCloudFormation.getString(properties.Namespace));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                  \nexport interface CfnNodegroupProps {\n\n                                                                                                                                                                                                                           \n    readonly clusterName: string;\n\nn    readonly nodeRole: string;\n\nn    readonly subnets: string[];\n\nn    readonly amiType?: string;\n\n                                                                                                                                                                                                                     \n    readonly capacityType?: string;\n\nn    readonly diskSize?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly forceUpdateEnabled?: boolean | cdk.IResolvable;\n\nn    readonly instanceTypes?: string[];\n\n                                                                                                                                                                                                                                                           \n    readonly labels?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly launchTemplate?: CfnNodegroup.LaunchTemplateSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    readonly nodegroupName?: string;\n\nn    readonly releaseVersion?: string;\n\nn    readonly remoteAccess?: CfnNodegroup.RemoteAccessProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                          \n    readonly scalingConfig?: CfnNodegroup.ScalingConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly tags?: any;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly taints?: Array<CfnNodegroup.TaintProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly updateConfig?: CfnNodegroup.UpdateConfigProperty | cdk.IResolvable;\n\nn    readonly version?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNodegroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnNodegroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNodegroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amiType', cdk.validateString)(properties.amiType));\n    errors.collect(cdk.propertyValidator('capacityType', cdk.validateString)(properties.capacityType));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.requiredValidator)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('diskSize', cdk.validateNumber)(properties.diskSize));\n    errors.collect(cdk.propertyValidator('forceUpdateEnabled', cdk.validateBoolean)(properties.forceUpdateEnabled));\n    errors.collect(cdk.propertyValidator('instanceTypes', cdk.listValidator(cdk.validateString))(properties.instanceTypes));\n    errors.collect(cdk.propertyValidator('labels', cdk.validateObject)(properties.labels));\n    errors.collect(cdk.propertyValidator('launchTemplate', CfnNodegroup_LaunchTemplateSpecificationPropertyValidator)(properties.launchTemplate));\n    errors.collect(cdk.propertyValidator('nodeRole', cdk.requiredValidator)(properties.nodeRole));\n    errors.collect(cdk.propertyValidator('nodeRole', cdk.validateString)(properties.nodeRole));\n    errors.collect(cdk.propertyValidator('nodegroupName', cdk.validateString)(properties.nodegroupName));\n    errors.collect(cdk.propertyValidator('releaseVersion', cdk.validateString)(properties.releaseVersion));\n    errors.collect(cdk.propertyValidator('remoteAccess', CfnNodegroup_RemoteAccessPropertyValidator)(properties.remoteAccess));\n    errors.collect(cdk.propertyValidator('scalingConfig', CfnNodegroup_ScalingConfigPropertyValidator)(properties.scalingConfig));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('taints', cdk.listValidator(CfnNodegroup_TaintPropertyValidator))(properties.taints));\n    errors.collect(cdk.propertyValidator('updateConfig', CfnNodegroup_UpdateConfigPropertyValidator)(properties.updateConfig));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnNodegroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Nodegroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnNodegroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Nodegroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNodegroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNodegroupPropsValidator(properties).assertSuccess();\n    return {\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        NodeRole: cdk.stringToCloudFormation(properties.nodeRole),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n        AmiType: cdk.stringToCloudFormation(properties.amiType),\n        CapacityType: cdk.stringToCloudFormation(properties.capacityType),\n        DiskSize: cdk.numberToCloudFormation(properties.diskSize),\n        ForceUpdateEnabled: cdk.booleanToCloudFormation(properties.forceUpdateEnabled),\n        InstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceTypes),\n        Labels: cdk.objectToCloudFormation(properties.labels),\n        LaunchTemplate: cfnNodegroupLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplate),\n        NodegroupName: cdk.stringToCloudFormation(properties.nodegroupName),\n        ReleaseVersion: cdk.stringToCloudFormation(properties.releaseVersion),\n        RemoteAccess: cfnNodegroupRemoteAccessPropertyToCloudFormation(properties.remoteAccess),\n        ScalingConfig: cfnNodegroupScalingConfigPropertyToCloudFormation(properties.scalingConfig),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Taints: cdk.listMapper(cfnNodegroupTaintPropertyToCloudFormation)(properties.taints),\n        UpdateConfig: cfnNodegroupUpdateConfigPropertyToCloudFormation(properties.updateConfig),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNodegroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNodegroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNodegroupProps>();\n    ret.addPropertyResult('clusterName', 'ClusterName', cfn_parse.FromCloudFormation.getString(properties.ClusterName));\n    ret.addPropertyResult('nodeRole', 'NodeRole', cfn_parse.FromCloudFormation.getString(properties.NodeRole));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addPropertyResult('amiType', 'AmiType', properties.AmiType != null ? cfn_parse.FromCloudFormation.getString(properties.AmiType) : undefined);\n    ret.addPropertyResult('capacityType', 'CapacityType', properties.CapacityType != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityType) : undefined);\n    ret.addPropertyResult('diskSize', 'DiskSize', properties.DiskSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.DiskSize) : undefined);\n    ret.addPropertyResult('forceUpdateEnabled', 'ForceUpdateEnabled', properties.ForceUpdateEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ForceUpdateEnabled) : undefined);\n    ret.addPropertyResult('instanceTypes', 'InstanceTypes', properties.InstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceTypes) : undefined);\n    ret.addPropertyResult('labels', 'Labels', properties.Labels != null ? cfn_parse.FromCloudFormation.getAny(properties.Labels) : undefined);\n    ret.addPropertyResult('launchTemplate', 'LaunchTemplate', properties.LaunchTemplate != null ? CfnNodegroupLaunchTemplateSpecificationPropertyFromCloudFormation(properties.LaunchTemplate) : undefined);\n    ret.addPropertyResult('nodegroupName', 'NodegroupName', properties.NodegroupName != null ? cfn_parse.FromCloudFormation.getString(properties.NodegroupName) : undefined);\n    ret.addPropertyResult('releaseVersion', 'ReleaseVersion', properties.ReleaseVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ReleaseVersion) : undefined);\n    ret.addPropertyResult('remoteAccess', 'RemoteAccess', properties.RemoteAccess != null ? CfnNodegroupRemoteAccessPropertyFromCloudFormation(properties.RemoteAccess) : undefined);\n    ret.addPropertyResult('scalingConfig', 'ScalingConfig', properties.ScalingConfig != null ? CfnNodegroupScalingConfigPropertyFromCloudFormation(properties.ScalingConfig) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('taints', 'Taints', properties.Taints != null ? cfn_parse.FromCloudFormation.getArray(CfnNodegroupTaintPropertyFromCloudFormation)(properties.Taints) : undefined);\n    ret.addPropertyResult('updateConfig', 'UpdateConfig', properties.UpdateConfig != null ? CfnNodegroupUpdateConfigPropertyFromCloudFormation(properties.UpdateConfig) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNodegroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EKS::Nodegroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNodegroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNodegroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNodegroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                 \n    public readonly attrArn: string;\n\n                                                                                                                                  \n    public readonly attrClusterName: string;\n\n                                                                                                                               \n    public readonly attrNodegroupName: string;\n\n                                                                                                                                                                                                                           \n    public clusterName: string;\n\nn    public nodeRole: string;\n\nn    public subnets: string[];\n\nn    public amiType: string | undefined;\n\n                                                                                                                                                                                                                     \n    public capacityType: string | undefined;\n\nn    public diskSize: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public forceUpdateEnabled: boolean | cdk.IResolvable | undefined;\n\nn    public instanceTypes: string[] | undefined;\n\n                                                                                                                                                                                                                                                           \n    public labels: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public launchTemplate: CfnNodegroup.LaunchTemplateSpecificationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                 \n    public nodegroupName: string | undefined;\n\nn    public releaseVersion: string | undefined;\n\nn    public remoteAccess: CfnNodegroup.RemoteAccessProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public scalingConfig: CfnNodegroup.ScalingConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public taints: Array<CfnNodegroup.TaintProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                            \n    public updateConfig: CfnNodegroup.UpdateConfigProperty | cdk.IResolvable | undefined;\n\nn    public version: string | undefined;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnNodegroupProps) {\n        super(scope, id, { type: CfnNodegroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clusterName', this);\n        cdk.requireProperty(props, 'nodeRole', this);\n        cdk.requireProperty(props, 'subnets', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrClusterName = cdk.Token.asString(this.getAtt('ClusterName'));\n        this.attrNodegroupName = cdk.Token.asString(this.getAtt('NodegroupName'));\n\n        this.clusterName = props.clusterName;\n        this.nodeRole = props.nodeRole;\n        this.subnets = props.subnets;\n        this.amiType = props.amiType;\n        this.capacityType = props.capacityType;\n        this.diskSize = props.diskSize;\n        this.forceUpdateEnabled = props.forceUpdateEnabled;\n        this.instanceTypes = props.instanceTypes;\n        this.labels = props.labels;\n        this.launchTemplate = props.launchTemplate;\n        this.nodegroupName = props.nodegroupName;\n        this.releaseVersion = props.releaseVersion;\n        this.remoteAccess = props.remoteAccess;\n        this.scalingConfig = props.scalingConfig;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::EKS::Nodegroup\", props.tags, { tagPropertyName: 'tags' });\n        this.taints = props.taints;\n        this.updateConfig = props.updateConfig;\n        this.version = props.version;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNodegroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clusterName: this.clusterName,\n            nodeRole: this.nodeRole,\n            subnets: this.subnets,\n            amiType: this.amiType,\n            capacityType: this.capacityType,\n            diskSize: this.diskSize,\n            forceUpdateEnabled: this.forceUpdateEnabled,\n            instanceTypes: this.instanceTypes,\n            labels: this.labels,\n            launchTemplate: this.launchTemplate,\n            nodegroupName: this.nodegroupName,\n            releaseVersion: this.releaseVersion,\n            remoteAccess: this.remoteAccess,\n            scalingConfig: this.scalingConfig,\n            tags: this.tags.renderTags(),\n            taints: this.taints,\n            updateConfig: this.updateConfig,\n            version: this.version,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNodegroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNodegroup {\nn    export interface LaunchTemplateSpecificationProperty {\n                                                                                                                                                                                                                                                                          \n        readonly id?: string;\n                                                                                                                                                                                                                                                                              \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNodegroup_LaunchTemplateSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.LaunchTemplateSpecification` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.LaunchTemplateSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNodegroupLaunchTemplateSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNodegroup_LaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNodegroupLaunchTemplateSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNodegroup.LaunchTemplateSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNodegroup.LaunchTemplateSpecificationProperty>();\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNodegroup {\n                                                                                                                                                                                                                                                                                           \n    export interface RemoteAccessProperty {\nn        readonly ec2SshKey: string;\nn        readonly sourceSecurityGroups?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RemoteAccessProperty`\n *\n * @param properties - the TypeScript properties of a `RemoteAccessProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNodegroup_RemoteAccessPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ec2SshKey', cdk.requiredValidator)(properties.ec2SshKey));\n    errors.collect(cdk.propertyValidator('ec2SshKey', cdk.validateString)(properties.ec2SshKey));\n    errors.collect(cdk.propertyValidator('sourceSecurityGroups', cdk.listValidator(cdk.validateString))(properties.sourceSecurityGroups));\n    return errors.wrap('supplied properties not correct for \"RemoteAccessProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.RemoteAccess` resource\n *\n * @param properties - the TypeScript properties of a `RemoteAccessProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.RemoteAccess` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNodegroupRemoteAccessPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNodegroup_RemoteAccessPropertyValidator(properties).assertSuccess();\n    return {\n        Ec2SshKey: cdk.stringToCloudFormation(properties.ec2SshKey),\n        SourceSecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceSecurityGroups),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNodegroupRemoteAccessPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNodegroup.RemoteAccessProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNodegroup.RemoteAccessProperty>();\n    ret.addPropertyResult('ec2SshKey', 'Ec2SshKey', cfn_parse.FromCloudFormation.getString(properties.Ec2SshKey));\n    ret.addPropertyResult('sourceSecurityGroups', 'SourceSecurityGroups', properties.SourceSecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourceSecurityGroups) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNodegroup {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface ScalingConfigProperty {\nn        readonly desiredSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly maxSize?: number;\n                                                                                                                                                                                                                                                                                             \n        readonly minSize?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScalingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ScalingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNodegroup_ScalingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('desiredSize', cdk.validateNumber)(properties.desiredSize));\n    errors.collect(cdk.propertyValidator('maxSize', cdk.validateNumber)(properties.maxSize));\n    errors.collect(cdk.propertyValidator('minSize', cdk.validateNumber)(properties.minSize));\n    return errors.wrap('supplied properties not correct for \"ScalingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.ScalingConfig` resource\n *\n * @param properties - the TypeScript properties of a `ScalingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.ScalingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNodegroupScalingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNodegroup_ScalingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        DesiredSize: cdk.numberToCloudFormation(properties.desiredSize),\n        MaxSize: cdk.numberToCloudFormation(properties.maxSize),\n        MinSize: cdk.numberToCloudFormation(properties.minSize),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNodegroupScalingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNodegroup.ScalingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNodegroup.ScalingConfigProperty>();\n    ret.addPropertyResult('desiredSize', 'DesiredSize', properties.DesiredSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.DesiredSize) : undefined);\n    ret.addPropertyResult('maxSize', 'MaxSize', properties.MaxSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxSize) : undefined);\n    ret.addPropertyResult('minSize', 'MinSize', properties.MinSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinSize) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNodegroup {\n                                                                                                                                                                                                                                                       \n    export interface TaintProperty {\n                                                                                                                                                                                                                            \n        readonly effect?: string;\n                                                                                                                                                                                                                      \n        readonly key?: string;\n                                                                                                                                                                                                                          \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TaintProperty`\n *\n * @param properties - the TypeScript properties of a `TaintProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNodegroup_TaintPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('effect', cdk.validateString)(properties.effect));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TaintProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.Taint` resource\n *\n * @param properties - the TypeScript properties of a `TaintProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.Taint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNodegroupTaintPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNodegroup_TaintPropertyValidator(properties).assertSuccess();\n    return {\n        Effect: cdk.stringToCloudFormation(properties.effect),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNodegroupTaintPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNodegroup.TaintProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNodegroup.TaintProperty>();\n    ret.addPropertyResult('effect', 'Effect', properties.Effect != null ? cfn_parse.FromCloudFormation.getString(properties.Effect) : undefined);\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnNodegroup {\n                                                                                                                                                                                                                                                     \n    export interface UpdateConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly maxUnavailable?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly maxUnavailablePercentage?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UpdateConfigProperty`\n *\n * @param properties - the TypeScript properties of a `UpdateConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNodegroup_UpdateConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxUnavailable', cdk.validateNumber)(properties.maxUnavailable));\n    errors.collect(cdk.propertyValidator('maxUnavailablePercentage', cdk.validateNumber)(properties.maxUnavailablePercentage));\n    return errors.wrap('supplied properties not correct for \"UpdateConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.UpdateConfig` resource\n *\n * @param properties - the TypeScript properties of a `UpdateConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EKS::Nodegroup.UpdateConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNodegroupUpdateConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNodegroup_UpdateConfigPropertyValidator(properties).assertSuccess();\n    return {\n        MaxUnavailable: cdk.numberToCloudFormation(properties.maxUnavailable),\n        MaxUnavailablePercentage: cdk.numberToCloudFormation(properties.maxUnavailablePercentage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNodegroupUpdateConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNodegroup.UpdateConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNodegroup.UpdateConfigProperty>();\n    ret.addPropertyResult('maxUnavailable', 'MaxUnavailable', properties.MaxUnavailable != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxUnavailable) : undefined);\n    ret.addPropertyResult('maxUnavailablePercentage', 'MaxUnavailablePercentage', properties.MaxUnavailablePercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxUnavailablePercentage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
