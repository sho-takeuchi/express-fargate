{
  "version": 3,
  "sources": ["fargate-profile.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport { Annotations, CustomResource, ITaggable, Lazy, TagManager, TagType } from '../../core';\nimport { Construct } from 'constructs';\nimport { Cluster } from './cluster';\nimport { FARGATE_PROFILE_RESOURCE_TYPE } from './cluster-resource-handler/consts';\nimport { ClusterResourceProvider } from './cluster-resource-provider';\n\n                                                     \nexport interface FargateProfileOptions {\n                                                                           \n  readonly fargateProfileName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n  readonly podExecutionRole?: iam.IRole;\n\n                                                                                                                                                                                                                                                                                       \n  readonly selectors: Selector[];\n\n                                                                                                                                                                                                                                                             \n  readonly vpc?: ec2.IVpc;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n  readonly subnetSelection?: ec2.SubnetSelection;\n}\n\n                                                        \nexport interface FargateProfileProps extends FargateProfileOptions {\n                                                                                                          \n  readonly cluster: Cluster;\n}\n\n                                    \nexport interface Selector {\n                                                                                                                                                                                                                                                                                  \n  readonly namespace: string;\n\n                                                                                                                                                                                                                                                              \n  readonly labels?: { [key: string]: string };\n}\n\nnexport class FargateProfile extends Construct implements ITaggable {\n\n                                                                                                 \n  public readonly fargateProfileArn: string;\n\n                                                                      \n  public readonly fargateProfileName: string;\n\n                               \n  public readonly tags: TagManager;\n\n                                                                                                                                                                                                                                                                                   \n  public readonly podExecutionRole: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: FargateProfileProps) {\n    super(scope, id);\n\n    const provider = ClusterResourceProvider.getOrCreate(this, {\n      adminRole: props.cluster.adminRole,\n      onEventLayer: props.cluster.onEventLayer,\n    });\n\n    this.podExecutionRole = props.podExecutionRole ?? new iam.Role(this, 'PodExecutionRole', {\n      assumedBy: new iam.ServicePrincipal('eks-fargate-pods.amazonaws.com'),\n      managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonEKSFargatePodExecutionRolePolicy')],\n    });\n\n    this.podExecutionRole.grantPassRole(props.cluster.adminRole);\n\n    if (props.subnetSelection && !props.vpc) {\n      Annotations.of(this).addWarning('Vpc must be defined to use a custom subnet selection. All private subnets belonging to the EKS cluster will be used by default');\n    }\n\n    let subnets: string[] | undefined;\n    if (props.vpc) {\n      const selection: ec2.SubnetSelection = props.subnetSelection ?? { subnetType: ec2.SubnetType.PRIVATE };\n      subnets = props.vpc.selectSubnets(selection).subnetIds;\n    }\n\n    if (props.selectors.length < 1) {\n      throw new Error('Fargate profile requires at least one selector');\n    }\n\n    if (props.selectors.length > 5) {\n      throw new Error('Fargate profile supports up to five selectors');\n    }\n\n    this.tags = new TagManager(TagType.MAP, 'AWS::EKS::FargateProfile');\n\n    const resource = new CustomResource(this, 'Resource', {\n      serviceToken: provider.serviceToken,\n      resourceType: FARGATE_PROFILE_RESOURCE_TYPE,\n      properties: {\n        AssumeRoleArn: props.cluster.adminRole.roleArn,\n        Config: {\n          clusterName: props.cluster.clusterName,\n          fargateProfileName: props.fargateProfileName,\n          podExecutionRoleArn: this.podExecutionRole.roleArn,\n          selectors: props.selectors,\n          subnets,\n          tags: Lazy.any({ produce: () => this.tags.renderTags() }),\n        },\n      },\n    });\n\n    this.fargateProfileArn = resource.getAttString('fargateProfileArn');\n    this.fargateProfileName = resource.ref;\n\n    // Fargate profiles must be created sequentially. If other profile(s) already\n    // exist on the same cluster, create a dependency to force sequential creation.\n    const clusterFargateProfiles = props.cluster._attachFargateProfile(this);\n    if (clusterFargateProfiles.length > 1) {\n      const previousProfile = clusterFargateProfiles[clusterFargateProfiles.length - 2];\n      resource.node.addDependency(previousProfile);\n    }\n\n    // map the fargate pod execution role to the relevant groups in rbac\n    // see https://github.com/aws/aws-cdk/issues/7981\n    props.cluster.awsAuth.addRoleMapping(this.podExecutionRole, {\n      username: 'system:node:{{SessionName}}',\n      groups: [\n        'system:bootstrappers',\n        'system:nodes',\n        'system:node-proxier',\n      ],\n    });\n  }\n}\n"],
  "mappings": "qNAAA,IAAA,QAAA,iBACA,IAAA,QAAA,iBACA,OAAA,QAAA,cACA,aAAA,QAAA,cAEA,SAAA,QAAA,qCACA,4BAAA,QAAA,+BAoCA,4BAAoC,cAAA,SAAS,CAc3C,YAAY,MAAkB,GAAY,MAA0B,WAClE,MAAM,MAAO,2EAEb,KAAM,UAAW,4BAAA,wBAAwB,YAAY,KAAM,CACzD,UAAW,MAAM,QAAQ,UACzB,aAAc,MAAM,QAAQ,eAG9B,KAAK,iBAAgB,IAAG,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,GAAI,KAAI,KAAK,KAAM,mBAAoB,CACvF,UAAW,GAAI,KAAI,iBAAiB,kCACpC,gBAAiB,CAAC,IAAI,cAAc,yBAAyB,6CAG/D,KAAK,iBAAiB,cAAc,MAAM,QAAQ,WAE9C,MAAM,iBAAmB,CAAC,MAAM,KAClC,OAAA,YAAY,GAAG,MAAM,WAAW,kIAGlC,GAAI,SACJ,GAAI,MAAM,IAAK,CACb,KAAM,WAAS,IAAwB,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,CAAE,WAAY,IAAI,WAAW,SAC7F,QAAU,MAAM,IAAI,cAAc,WAAW,UAG/C,GAAI,MAAM,UAAU,OAAS,EAC3B,KAAM,IAAI,OAAM,kDAGlB,GAAI,MAAM,UAAU,OAAS,EAC3B,KAAM,IAAI,OAAM,iDAGlB,KAAK,KAAO,GAAI,QAAA,WAAW,OAAA,QAAQ,IAAK,4BAExC,KAAM,UAAW,GAAI,QAAA,eAAe,KAAM,WAAY,CACpD,aAAc,SAAS,aACvB,aAAc,SAAA,8BACd,WAAY,CACV,cAAe,MAAM,QAAQ,UAAU,QACvC,OAAQ,CACN,YAAa,MAAM,QAAQ,YAC3B,mBAAoB,MAAM,mBAC1B,oBAAqB,KAAK,iBAAiB,QAC3C,UAAW,MAAM,UACjB,QACA,KAAM,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,KAAK,mBAKhD,KAAK,kBAAoB,SAAS,aAAa,qBAC/C,KAAK,mBAAqB,SAAS,IAInC,KAAM,wBAAyB,MAAM,QAAQ,sBAAsB,MACnE,GAAI,uBAAuB,OAAS,EAAG,CACrC,KAAM,iBAAkB,uBAAuB,uBAAuB,OAAS,GAC/E,SAAS,KAAK,cAAc,iBAK9B,MAAM,QAAQ,QAAQ,eAAe,KAAK,iBAAkB,CAC1D,SAAU,8BACV,OAAQ,CACN,uBACA,eACA,0BAnFR,QAAA,eAAA",
  "names": []
}
