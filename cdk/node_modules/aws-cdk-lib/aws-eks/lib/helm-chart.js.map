{
  "version": 3,
  "sources": ["helm-chart.ts"],
  "sourcesContent": ["import { Asset } from '../../aws-s3-assets';\nimport { CustomResource, Duration, Names, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { ICluster } from './cluster';\nimport { KubectlProvider } from './kubectl-provider';\n\n                              \n\nexport interface HelmChartOptions {\n                                                                                                                                                             \n  readonly chart?: string;\n\n                                                                                                                                                  \n  readonly release?: string;\n\n                                                                                                                        \n  readonly version?: string;\n\n                                                                                                                                                                                                                            \n  readonly repository?: string;\n\n                                                                                                                                                           \n  readonly chartAsset?: Asset;\n\n                                                                                      \n  readonly namespace?: string;\n\n                                                                                                         \n  readonly values?: {[key: string]: any};\n\n                                                                                                                                                                                                                                                                                                   \n  readonly wait?: boolean;\n\n                                                                                                                                      \n  readonly timeout?: Duration;\n\n                                                                 \n  readonly createNamespace?: boolean;\n}\n\n                                 \nexport interface HelmChartProps extends HelmChartOptions {\n                                                                                                              \n  readonly cluster: ICluster;\n}\n\n                                                                                                                                               \nexport class HelmChart extends Construct {\n                                                  \n  public static readonly RESOURCE_TYPE = 'Custom::AWSCDK-EKS-HelmChart';\n\n  constructor(scope: Construct, id: string, props: HelmChartProps) {\n    super(scope, id);\n\n    const stack = Stack.of(this);\n\n    const provider = KubectlProvider.getOrCreate(this, props.cluster);\n\n    const timeout = props.timeout?.toSeconds();\n    if (timeout && timeout > 900) {\n      throw new Error('Helm chart timeout cannot be higher than 15 minutes.');\n    }\n\n    if (!props.chart && !props.chartAsset) {\n      throw new Error(\"Either 'chart' or 'chartAsset' must be specified to install a helm chart\");\n    }\n\n    if (props.chartAsset && (props.repository || props.version)) {\n      throw new Error(\n        \"Neither 'repository' nor 'version' can be used when configuring 'chartAsset'\",\n      );\n    }\n\n    // default not to wait\n    const wait = props.wait ?? false;\n    // default to create new namespace\n    const createNamespace = props.createNamespace ?? true;\n\n    props.chartAsset?.grantRead(provider.handlerRole);\n\n    new CustomResource(this, 'Resource', {\n      serviceToken: provider.serviceToken,\n      resourceType: HelmChart.RESOURCE_TYPE,\n      properties: {\n        ClusterName: props.cluster.clusterName,\n        RoleArn: provider.roleArn, // TODO: bake into the provider's environment\n        Release: props.release ?? Names.uniqueId(this).slice(-53).toLowerCase(), // Helm has a 53 character limit for the name\n        Chart: props.chart,\n        ChartAssetURL: props.chartAsset?.s3ObjectUrl,\n        Version: props.version,\n        Wait: wait || undefined, // props are stringified so we encode \u201Cfalse\u201D as undefined\n        Timeout: timeout ? `${timeout.toString()}s` : undefined, // Helm v3 expects duration instead of integer\n        Values: (props.values ? stack.toJsonString(props.values) : undefined),\n        Namespace: props.namespace ?? 'default',\n        Repository: props.repository,\n        CreateNamespace: createNamespace || undefined,\n      },\n    });\n  }\n}\n"],
  "mappings": "gNACA,OAAA,QAAA,cACA,aAAA,QAAA,cAEA,mBAAA,QAAA,sBA2CA,uBAA+B,cAAA,SAAS,CAItC,YAAY,MAAkB,GAAY,MAAqB,0BAC7D,MAAM,MAAO,sEAEb,KAAM,OAAQ,OAAA,MAAM,GAAG,MAEjB,SAAW,mBAAA,gBAAgB,YAAY,KAAM,MAAM,SAEnD,QAAO,IAAG,MAAM,WAAO,MAAA,KAAA,OAAA,OAAA,GAAE,YAC/B,GAAI,SAAW,QAAU,IACvB,KAAM,IAAI,OAAM,wDAGlB,GAAI,CAAC,MAAM,OAAS,CAAC,MAAM,WACzB,KAAM,IAAI,OAAM,4EAGlB,GAAI,MAAM,YAAe,OAAM,YAAc,MAAM,SACjD,KAAM,IAAI,OACR,gFAKJ,KAAM,MAAI,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,GAErB,gBAAe,IAAG,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,GAEjD,AAAA,IAAA,MAAM,cAAU,MAAA,KAAA,QAAA,GAAE,UAAU,SAAS,aAErC,GAAI,QAAA,eAAe,KAAM,WAAY,CACnC,aAAc,SAAS,aACvB,aAAc,UAAU,cACxB,WAAY,CACV,YAAa,MAAM,QAAQ,YAC3B,QAAS,SAAS,QAClB,QAAO,IAAE,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,OAAA,MAAM,SAAS,MAAM,MAAM,KAAK,cAC1D,MAAO,MAAM,MACb,cAAa,IAAE,MAAM,cAAU,MAAA,KAAA,OAAA,OAAA,GAAE,YACjC,QAAS,MAAM,QACf,KAAM,MAAQ,OACd,QAAS,QAAU,GAAG,QAAQ,cAAgB,OAC9C,OAAS,MAAM,OAAS,MAAM,aAAa,MAAM,QAAU,OAC3D,UAAS,IAAE,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,UAC9B,WAAY,MAAM,WAClB,gBAAiB,iBAAmB,WAhD5C,QAAA,UAAA,qGAEyB,UAAA,cAAgB",
  "names": []
}
