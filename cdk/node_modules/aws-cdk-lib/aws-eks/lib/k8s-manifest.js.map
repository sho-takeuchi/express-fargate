{
  "version": 3,
  "sources": ["k8s-manifest.ts"],
  "sourcesContent": ["import { CustomResource, Stack } from '../../core';\nimport { Construct, Node } from 'constructs';\nimport { AlbScheme } from './alb-controller';\nimport { ICluster } from './cluster';\nimport { KubectlProvider } from './kubectl-provider';\n\nconst PRUNE_LABEL_PREFIX = 'aws.cdk.eks/prune-';\n\n                                            \nexport interface KubernetesManifestOptions {\nn  readonly prune?: boolean;\n\n                                                                                                        \n  readonly skipValidation?: boolean;\n\n                                                                                                                                                                             \n  readonly ingressAlb?: boolean;\n\n                                                                                                                                                                                   \n  readonly ingressAlbScheme?: AlbScheme;\n\n}\n\n                                            \nexport interface KubernetesManifestProps extends KubernetesManifestOptions {\n                                                                                                         \n  readonly cluster: ICluster;\n\nn  readonly manifest: Record<string, any>[];\n\n                                                                                                                                                                                                                                                                                                           \n  readonly overwrite?: boolean;\n}\n\n                                                                                                                                                                                                                                            \nexport class KubernetesManifest extends Construct {\n                                                  \n  public static readonly RESOURCE_TYPE = 'Custom::AWSCDK-EKS-KubernetesResource';\n\n  constructor(scope: Construct, id: string, props: KubernetesManifestProps) {\n    super(scope, id);\n\n    const stack = Stack.of(this);\n    const provider = KubectlProvider.getOrCreate(this, props.cluster);\n\n    const prune = props.prune ?? props.cluster.prune;\n    const pruneLabel = prune\n      ? this.injectPruneLabel(props.manifest)\n      : undefined;\n\n    if (props.ingressAlb ?? false) {\n      this.injectIngressAlbAnnotations(props.manifest, props.ingressAlbScheme ?? AlbScheme.INTERNAL);\n    }\n\n    const customResource = new CustomResource(this, 'Resource', {\n      serviceToken: provider.serviceToken,\n      resourceType: KubernetesManifest.RESOURCE_TYPE,\n      properties: {\n        // `toJsonString` enables embedding CDK tokens in the manifest and will\n        // render a CloudFormation-compatible JSON string (similar to\n        // StepFunctions, CloudWatch Dashboards etc).\n        Manifest: stack.toJsonString(props.manifest),\n        ClusterName: props.cluster.clusterName,\n        RoleArn: provider.roleArn, // TODO: bake into provider's environment\n        PruneLabel: pruneLabel,\n        Overwrite: props.overwrite,\n        SkipValidation: props.skipValidation,\n      },\n    });\n\n    this.node.defaultChild = customResource.node.defaultChild;\n  }\n\n  /**\n   * Injects a generated prune label to all resources in this manifest. The\n   * label name will be `awscdk.eks/manifest-ADDR` where `ADDR` is the address\n   * of the construct in the construct tree.\n   *\n   * @returns the label name\n   */\n  private injectPruneLabel(manifest: Record<string, any>[]): string {\n    // max label name is 64 chars and addrs is always 42.\n    const pruneLabel = PRUNE_LABEL_PREFIX + Node.of(this).addr;\n\n    for (const resource of manifest) {\n      // skip resource if it's not an object or if it does not have a \"kind\"\n      if (typeof(resource) !== 'object' || !resource.kind) {\n        continue;\n      }\n\n      if (!resource.metadata) {\n        resource.metadata = {};\n      }\n\n      if (!resource.metadata.labels) {\n        resource.metadata.labels = {};\n      }\n\n      resource.metadata.labels = {\n        [pruneLabel]: '',\n        ...resource.metadata.labels,\n      };\n    }\n\n    return pruneLabel;\n  }\n\n  /**\n   * Inject the necessary ingress annontations if possible (and requested).\n   *\n   * @see https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/\n   */\n  private injectIngressAlbAnnotations(manifest: Record<string, any>[], scheme: AlbScheme) {\n\n    for (const resource of manifest) {\n\n      // skip resource if it's not an object or if it does not have a \"kind\"\n      if (typeof(resource) !== 'object' || !resource.kind) {\n        continue;\n      }\n\n      if (resource.kind === 'Ingress') {\n        resource.metadata.annotations = {\n          'kubernetes.io/ingress.class': 'alb',\n          'alb.ingress.kubernetes.io/scheme': scheme,\n          ...resource.metadata.annotations,\n        };\n      }\n    }\n\n  }\n}\n"],
  "mappings": "yNAAA,OAAA,QAAA,cACA,aAAA,QAAA,cACA,iBAAA,QAAA,oBAEA,mBAAA,QAAA,sBAEM,mBAAqB,qBA+B3B,gCAAwC,cAAA,SAAS,CAI/C,YAAY,MAAkB,GAAY,MAA8B,cACtE,MAAM,MAAO,+EAEb,KAAM,OAAQ,OAAA,MAAM,GAAG,MACjB,SAAW,mBAAA,gBAAgB,YAAY,KAAM,MAAM,SAGnD,WAAa,AADR,KAAG,MAAM,SAAK,MAAA,KAAA,OAAA,GAAI,MAAM,QAAQ,OAEvC,KAAK,iBAAiB,MAAM,UAC5B,OAEJ,AAAA,KAAI,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,KACtB,KAAK,4BAA4B,MAAM,SAAQ,IAAE,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,iBAAA,UAAU,UAGvF,KAAM,gBAAiB,GAAI,QAAA,eAAe,KAAM,WAAY,CAC1D,aAAc,SAAS,aACvB,aAAc,mBAAmB,cACjC,WAAY,CAIV,SAAU,MAAM,aAAa,MAAM,UACnC,YAAa,MAAM,QAAQ,YAC3B,QAAS,SAAS,QAClB,WAAY,WACZ,UAAW,MAAM,UACjB,eAAgB,MAAM,kBAI1B,KAAK,KAAK,aAAe,eAAe,KAAK,aAUvC,iBAAiB,SAA+B,CAEtD,KAAM,YAAa,mBAAqB,aAAA,KAAK,GAAG,MAAM,KAEtD,SAAW,YAAY,UAErB,AAAI,MAAO,WAAc,UAAY,CAAC,SAAS,MAI1C,UAAS,UACZ,UAAS,SAAW,IAGjB,SAAS,SAAS,QACrB,UAAS,SAAS,OAAS,IAG7B,SAAS,SAAS,OAAS,EACxB,YAAa,MACX,SAAS,SAAS,SAIzB,MAAO,YAQD,4BAA4B,SAAiC,OAAiB,CAEpF,SAAW,YAAY,UAGrB,AAAI,MAAO,WAAc,UAAY,CAAC,SAAS,MAI3C,SAAS,OAAS,WACpB,UAAS,SAAS,YAAc,CAC9B,8BAA+B,MAC/B,mCAAoC,UACjC,SAAS,SAAS,eA1F/B,QAAA,mBAAA,gIAEyB,mBAAA,cAAgB",
  "names": []
}
