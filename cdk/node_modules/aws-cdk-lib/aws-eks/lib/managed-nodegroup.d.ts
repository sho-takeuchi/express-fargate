import { InstanceType, ISecurityGroup, SubnetSelection } from '../../aws-ec2';
import { IRole } from '../../aws-iam';
import { IResource, Resource } from '../../core';
import { Construct } from 'constructs';
import { ICluster } from './cluster';
/**
 * NodeGroup interface.
 *
 * @stability stable
 */
export interface INodegroup extends IResource {
    /**
     * Name of the nodegroup.
     *
     * @stability stable
     * @attribute true
     */
    readonly nodegroupName: string;
}
/**
 * The AMI type for your node group.
 *
 * GPU instance types should use the `AL2_x86_64_GPU` AMI type, which uses the
 * Amazon EKS-optimized Linux AMI with GPU support. Non-GPU instances should use the `AL2_x86_64` AMI type, which
 * uses the Amazon EKS-optimized Linux AMI.
 *
 * @stability stable
 */
export declare enum NodegroupAmiType {
    /**
     * Amazon Linux 2 (x86-64).
     *
     * @stability stable
     */
    AL2_X86_64 = "AL2_x86_64",
    /**
     * Amazon Linux 2 with GPU support.
     *
     * @stability stable
     */
    AL2_X86_64_GPU = "AL2_x86_64_GPU",
    /**
     * Amazon Linux 2 (ARM-64).
     *
     * @stability stable
     */
    AL2_ARM_64 = "AL2_ARM_64",
    /**
     * Bottlerocket Linux(ARM-64).
     *
     * @stability stable
     */
    BOTTLEROCKET_ARM_64 = "BOTTLEROCKET_ARM_64",
    /**
     * Bottlerocket(x86-64).
     *
     * @stability stable
     */
    BOTTLEROCKET_X86_64 = "BOTTLEROCKET_x86_64"
}
/**
 * Capacity type of the managed node group.
 *
 * @stability stable
 */
export declare enum CapacityType {
    /**
     * spot instances.
     *
     * @stability stable
     */
    SPOT = "SPOT",
    /**
     * on-demand instances.
     *
     * @stability stable
     */
    ON_DEMAND = "ON_DEMAND"
}
/**
 * The remote access (SSH) configuration to use with your node group.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-eks-nodegroup-remoteaccess.html
 * @stability stable
 */
export interface NodegroupRemoteAccess {
    /**
     * The Amazon EC2 SSH key that provides access for SSH communication with the worker nodes in the managed node group.
     *
     * @stability stable
     */
    readonly sshKeyName: string;
    /**
     * The security groups that are allowed SSH access (port 22) to the worker nodes.
     *
     * If you specify an Amazon EC2 SSH
     * key but do not specify a source security group when you create a managed node group, then port 22 on the worker
     * nodes is opened to the internet (0.0.0.0/0).
     *
     * @default - port 22 on the worker nodes is opened to the internet (0.0.0.0/0)
     * @stability stable
     */
    readonly sourceSecurityGroups?: ISecurityGroup[];
}
/**
 * Launch template property specification.
 *
 * @stability stable
 */
export interface LaunchTemplateSpec {
    /**
     * The Launch template ID.
     *
     * @stability stable
     */
    readonly id: string;
    /**
     * The launch template version to be used (optional).
     *
     * @default - the default version of the launch template
     * @stability stable
     */
    readonly version?: string;
}
/**
 * Effect types of kubernetes node taint.
 *
 * @stability stable
 */
export declare enum TaintEffect {
    /**
     * NoSchedule.
     *
     * @stability stable
     */
    NO_SCHEDULE = "NO_SCHEDULE",
    /**
     * PreferNoSchedule.
     *
     * @stability stable
     */
    PREFER_NO_SCHEDULE = "PREFER_NO_SCHEDULE",
    /**
     * NoExecute.
     *
     * @stability stable
     */
    NO_EXECUTE = "NO_EXECUTE"
}
/**
 * Taint interface.
 *
 * @stability stable
 */
export interface TaintSpec {
    /**
     * Effect type.
     *
     * @default - None
     * @stability stable
     */
    readonly effect?: TaintEffect;
    /**
     * Taint key.
     *
     * @default - None
     * @stability stable
     */
    readonly key?: string;
    /**
     * Taint value.
     *
     * @default - None
     * @stability stable
     */
    readonly value?: string;
}
/**
 * The Nodegroup Options for addNodeGroup() method.
 *
 * @stability stable
 */
export interface NodegroupOptions {
    /**
     * Name of the Nodegroup.
     *
     * @default - resource ID
     * @stability stable
     */
    readonly nodegroupName?: string;
    /**
     * The subnets to use for the Auto Scaling group that is created for your node group.
     *
     * By specifying the
     * SubnetSelection, the selected subnets will automatically apply required tags i.e.
     * `kubernetes.io/cluster/CLUSTER_NAME` with a value of `shared`, where `CLUSTER_NAME` is replaced with
     * the name of your cluster.
     *
     * @default - private subnets
     * @stability stable
     */
    readonly subnets?: SubnetSelection;
    /**
     * The AMI type for your node group.
     *
     * If you explicitly specify the launchTemplate with custom AMI, do not specify this property, or
     * the node group deployment will fail. In other cases, you will need to specify correct amiType for the nodegroup.
     *
     * @default - auto-determined from the instanceTypes property when launchTemplateSpec property is not specified
     * @stability stable
     */
    readonly amiType?: NodegroupAmiType;
    /**
     * The root device disk size (in GiB) for your node group instances.
     *
     * @default 20
     * @stability stable
     */
    readonly diskSize?: number;
    /**
     * The current number of worker nodes that the managed node group should maintain.
     *
     * If not specified,
     * the nodewgroup will initially create `minSize` instances.
     *
     * @default 2
     * @stability stable
     */
    readonly desiredSize?: number;
    /**
     * The maximum number of worker nodes that the managed node group can scale out to.
     *
     * Managed node groups can support up to 100 nodes by default.
     *
     * @default - desiredSize
     * @stability stable
     */
    readonly maxSize?: number;
    /**
     * The minimum number of worker nodes that the managed node group can scale in to.
     *
     * This number must be greater than or equal to zero.
     *
     * @default 1
     * @stability stable
     */
    readonly minSize?: number;
    /**
     * Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue.
     *
     * If an update fails because pods could not be drained, you can force the update after it fails to terminate the old
     * node whether or not any pods are
     * running on the node.
     *
     * @default true
     * @stability stable
     */
    readonly forceUpdate?: boolean;
    /**
     * The instance types to use for your node group.
     *
     * @default t3.medium will be used according to the cloudformation document.
     * @see - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-nodegroup.html#cfn-eks-nodegroup-instancetypes
     * @stability stable
     */
    readonly instanceTypes?: InstanceType[];
    /**
     * The Kubernetes labels to be applied to the nodes in the node group when they are created.
     *
     * @default - None
     * @stability stable
     */
    readonly labels?: {
        [name: string]: string;
    };
    /**
     * The Kubernetes taints to be applied to the nodes in the node group when they are created.
     *
     * @default - None
     * @stability stable
     */
    readonly taints?: TaintSpec[];
    /**
     * The IAM role to associate with your node group.
     *
     * The Amazon EKS worker node kubelet daemon
     * makes calls to AWS APIs on your behalf. Worker nodes receive permissions for these API calls through
     * an IAM instance profile and associated policies. Before you can launch worker nodes and register them
     * into a cluster, you must create an IAM role for those worker nodes to use when they are launched.
     *
     * @default - None. Auto-generated if not specified.
     * @stability stable
     */
    readonly nodeRole?: IRole;
    /**
     * The AMI version of the Amazon EKS-optimized AMI to use with your node group (for example, `1.14.7-YYYYMMDD`).
     *
     * @default - The latest available AMI version for the node group's current Kubernetes version is used.
     * @stability stable
     */
    readonly releaseVersion?: string;
    /**
     * The remote access (SSH) configuration to use with your node group.
     *
     * Disabled by default, however, if you
     * specify an Amazon EC2 SSH key but do not specify a source security group when you create a managed node group,
     * then port 22 on the worker nodes is opened to the internet (0.0.0.0/0)
     *
     * @default - disabled
     * @stability stable
     */
    readonly remoteAccess?: NodegroupRemoteAccess;
    /**
     * The metadata to apply to the node group to assist with categorization and organization.
     *
     * Each tag consists of
     * a key and an optional value, both of which you define. Node group tags do not propagate to any other resources
     * associated with the node group, such as the Amazon EC2 instances or subnets.
     *
     * @default - None
     * @stability stable
     */
    readonly tags?: {
        [name: string]: string;
    };
    /**
     * Launch template specification used for the nodegroup.
     *
     * @default - no launch template
     * @see - https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html
     * @stability stable
     */
    readonly launchTemplateSpec?: LaunchTemplateSpec;
    /**
     * The capacity type of the nodegroup.
     *
     * @default - ON_DEMAND
     * @stability stable
     */
    readonly capacityType?: CapacityType;
}
/**
 * NodeGroup properties interface.
 *
 * @stability stable
 */
export interface NodegroupProps extends NodegroupOptions {
    /**
     * Cluster resource.
     *
     * @stability stable
     */
    readonly cluster: ICluster;
}
/**
 * The Nodegroup resource class.
 *
 * @stability stable
 */
export declare class Nodegroup extends Resource implements INodegroup {
    /**
     * Import the Nodegroup from attributes.
     *
     * @stability stable
     */
    static fromNodegroupName(scope: Construct, id: string, nodegroupName: string): INodegroup;
    /**
     * ARN of the nodegroup.
     *
     * @stability stable
     * @attribute true
     */
    readonly nodegroupArn: string;
    /**
     * Nodegroup name.
     *
     * @stability stable
     * @attribute true
     */
    readonly nodegroupName: string;
    /**
     * the Amazon EKS cluster resource.
     *
     * @stability stable
     * @attribute ClusterName
     */
    readonly cluster: ICluster;
    /**
     * IAM role of the instance profile for the nodegroup.
     *
     * @stability stable
     */
    readonly role: IRole;
    private readonly desiredSize;
    private readonly maxSize;
    private readonly minSize;
    /**
     * @stability stable
     */
    constructor(scope: Construct, id: string, props: NodegroupProps);
}
