{
  "version": 3,
  "sources": ["elasticache.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:30.553Z\",\"fingerprint\":\"7W2c2gtqUGiQ2Ng73LYzNoLkHas4K+ykm2U1LCQmCeA=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                   \nexport interface CfnCacheClusterProps {\n\nn    readonly cacheNodeType: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly engine: string;\n\nn    readonly numCacheNodes: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly autoMinorVersionUpgrade?: boolean | cdk.IResolvable;\n\nn    readonly azMode?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly cacheParameterGroupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly cacheSecurityGroupNames?: string[];\n\nn    readonly cacheSubnetGroupName?: string;\n\nn    readonly clusterName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly engineVersion?: string;\n\n                                                                                                                                                                                                                                                                     \n    readonly logDeliveryConfigurations?: Array<CfnCacheCluster.LogDeliveryConfigurationRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly notificationTopicArn?: string;\n\n                                                                                                                                                                                                                                                              \n    readonly port?: number;\n\nn    readonly preferredAvailabilityZone?: string;\n\nn    readonly preferredAvailabilityZones?: string[];\n\nn    readonly preferredMaintenanceWindow?: string;\n\nn    readonly snapshotArns?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly snapshotName?: string;\n\nn    readonly snapshotRetentionLimit?: number;\n\nn    readonly snapshotWindow?: string;\n\n                                                                                                                                                                                                                                     \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly vpcSecurityGroupIds?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCacheClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnCacheClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCacheClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('azMode', cdk.validateString)(properties.azMode));\n    errors.collect(cdk.propertyValidator('autoMinorVersionUpgrade', cdk.validateBoolean)(properties.autoMinorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('cacheNodeType', cdk.requiredValidator)(properties.cacheNodeType));\n    errors.collect(cdk.propertyValidator('cacheNodeType', cdk.validateString)(properties.cacheNodeType));\n    errors.collect(cdk.propertyValidator('cacheParameterGroupName', cdk.validateString)(properties.cacheParameterGroupName));\n    errors.collect(cdk.propertyValidator('cacheSecurityGroupNames', cdk.listValidator(cdk.validateString))(properties.cacheSecurityGroupNames));\n    errors.collect(cdk.propertyValidator('cacheSubnetGroupName', cdk.validateString)(properties.cacheSubnetGroupName));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('engine', cdk.requiredValidator)(properties.engine));\n    errors.collect(cdk.propertyValidator('engine', cdk.validateString)(properties.engine));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('logDeliveryConfigurations', cdk.listValidator(CfnCacheCluster_LogDeliveryConfigurationRequestPropertyValidator))(properties.logDeliveryConfigurations));\n    errors.collect(cdk.propertyValidator('notificationTopicArn', cdk.validateString)(properties.notificationTopicArn));\n    errors.collect(cdk.propertyValidator('numCacheNodes', cdk.requiredValidator)(properties.numCacheNodes));\n    errors.collect(cdk.propertyValidator('numCacheNodes', cdk.validateNumber)(properties.numCacheNodes));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('preferredAvailabilityZone', cdk.validateString)(properties.preferredAvailabilityZone));\n    errors.collect(cdk.propertyValidator('preferredAvailabilityZones', cdk.listValidator(cdk.validateString))(properties.preferredAvailabilityZones));\n    errors.collect(cdk.propertyValidator('preferredMaintenanceWindow', cdk.validateString)(properties.preferredMaintenanceWindow));\n    errors.collect(cdk.propertyValidator('snapshotArns', cdk.listValidator(cdk.validateString))(properties.snapshotArns));\n    errors.collect(cdk.propertyValidator('snapshotName', cdk.validateString)(properties.snapshotName));\n    errors.collect(cdk.propertyValidator('snapshotRetentionLimit', cdk.validateNumber)(properties.snapshotRetentionLimit));\n    errors.collect(cdk.propertyValidator('snapshotWindow', cdk.validateString)(properties.snapshotWindow));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcSecurityGroupIds', cdk.listValidator(cdk.validateString))(properties.vpcSecurityGroupIds));\n    return errors.wrap('supplied properties not correct for \"CfnCacheClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnCacheClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCacheClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCacheClusterPropsValidator(properties).assertSuccess();\n    return {\n        CacheNodeType: cdk.stringToCloudFormation(properties.cacheNodeType),\n        Engine: cdk.stringToCloudFormation(properties.engine),\n        NumCacheNodes: cdk.numberToCloudFormation(properties.numCacheNodes),\n        AutoMinorVersionUpgrade: cdk.booleanToCloudFormation(properties.autoMinorVersionUpgrade),\n        AZMode: cdk.stringToCloudFormation(properties.azMode),\n        CacheParameterGroupName: cdk.stringToCloudFormation(properties.cacheParameterGroupName),\n        CacheSecurityGroupNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.cacheSecurityGroupNames),\n        CacheSubnetGroupName: cdk.stringToCloudFormation(properties.cacheSubnetGroupName),\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        LogDeliveryConfigurations: cdk.listMapper(cfnCacheClusterLogDeliveryConfigurationRequestPropertyToCloudFormation)(properties.logDeliveryConfigurations),\n        NotificationTopicArn: cdk.stringToCloudFormation(properties.notificationTopicArn),\n        Port: cdk.numberToCloudFormation(properties.port),\n        PreferredAvailabilityZone: cdk.stringToCloudFormation(properties.preferredAvailabilityZone),\n        PreferredAvailabilityZones: cdk.listMapper(cdk.stringToCloudFormation)(properties.preferredAvailabilityZones),\n        PreferredMaintenanceWindow: cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),\n        SnapshotArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.snapshotArns),\n        SnapshotName: cdk.stringToCloudFormation(properties.snapshotName),\n        SnapshotRetentionLimit: cdk.numberToCloudFormation(properties.snapshotRetentionLimit),\n        SnapshotWindow: cdk.stringToCloudFormation(properties.snapshotWindow),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcSecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcSecurityGroupIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCacheClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCacheClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCacheClusterProps>();\n    ret.addPropertyResult('cacheNodeType', 'CacheNodeType', cfn_parse.FromCloudFormation.getString(properties.CacheNodeType));\n    ret.addPropertyResult('engine', 'Engine', cfn_parse.FromCloudFormation.getString(properties.Engine));\n    ret.addPropertyResult('numCacheNodes', 'NumCacheNodes', cfn_parse.FromCloudFormation.getNumber(properties.NumCacheNodes));\n    ret.addPropertyResult('autoMinorVersionUpgrade', 'AutoMinorVersionUpgrade', properties.AutoMinorVersionUpgrade != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoMinorVersionUpgrade) : undefined);\n    ret.addPropertyResult('azMode', 'AZMode', properties.AZMode != null ? cfn_parse.FromCloudFormation.getString(properties.AZMode) : undefined);\n    ret.addPropertyResult('cacheParameterGroupName', 'CacheParameterGroupName', properties.CacheParameterGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CacheParameterGroupName) : undefined);\n    ret.addPropertyResult('cacheSecurityGroupNames', 'CacheSecurityGroupNames', properties.CacheSecurityGroupNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CacheSecurityGroupNames) : undefined);\n    ret.addPropertyResult('cacheSubnetGroupName', 'CacheSubnetGroupName', properties.CacheSubnetGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CacheSubnetGroupName) : undefined);\n    ret.addPropertyResult('clusterName', 'ClusterName', properties.ClusterName != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterName) : undefined);\n    ret.addPropertyResult('engineVersion', 'EngineVersion', properties.EngineVersion != null ? cfn_parse.FromCloudFormation.getString(properties.EngineVersion) : undefined);\n    ret.addPropertyResult('logDeliveryConfigurations', 'LogDeliveryConfigurations', properties.LogDeliveryConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnCacheClusterLogDeliveryConfigurationRequestPropertyFromCloudFormation)(properties.LogDeliveryConfigurations) : undefined);\n    ret.addPropertyResult('notificationTopicArn', 'NotificationTopicArn', properties.NotificationTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationTopicArn) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('preferredAvailabilityZone', 'PreferredAvailabilityZone', properties.PreferredAvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredAvailabilityZone) : undefined);\n    ret.addPropertyResult('preferredAvailabilityZones', 'PreferredAvailabilityZones', properties.PreferredAvailabilityZones != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PreferredAvailabilityZones) : undefined);\n    ret.addPropertyResult('preferredMaintenanceWindow', 'PreferredMaintenanceWindow', properties.PreferredMaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow) : undefined);\n    ret.addPropertyResult('snapshotArns', 'SnapshotArns', properties.SnapshotArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SnapshotArns) : undefined);\n    ret.addPropertyResult('snapshotName', 'SnapshotName', properties.SnapshotName != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotName) : undefined);\n    ret.addPropertyResult('snapshotRetentionLimit', 'SnapshotRetentionLimit', properties.SnapshotRetentionLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.SnapshotRetentionLimit) : undefined);\n    ret.addPropertyResult('snapshotWindow', 'SnapshotWindow', properties.SnapshotWindow != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotWindow) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcSecurityGroupIds', 'VpcSecurityGroupIds', properties.VpcSecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcSecurityGroupIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnCacheCluster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::CacheCluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCacheCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCacheClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCacheCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public readonly attrConfigurationEndpointAddress: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public readonly attrConfigurationEndpointPort: string;\n\n                                                                                                                                                       \n    public readonly attrRedisEndpointAddress: string;\n\n                                                                                                                                                    \n    public readonly attrRedisEndpointPort: string;\n\nn    public cacheNodeType: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    public engine: string;\n\nn    public numCacheNodes: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    public autoMinorVersionUpgrade: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public azMode: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public cacheParameterGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public cacheSecurityGroupNames: string[] | undefined;\n\nn    public cacheSubnetGroupName: string | undefined;\n\nn    public clusterName: string | undefined;\n\nn    public engineVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public logDeliveryConfigurations: Array<CfnCacheCluster.LogDeliveryConfigurationRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    public notificationTopicArn: string | undefined;\n\n                                                                                                                                                                                                                                                              \n    public port: number | undefined;\n\nn    public preferredAvailabilityZone: string | undefined;\n\nn    public preferredAvailabilityZones: string[] | undefined;\n\nn    public preferredMaintenanceWindow: string | undefined;\n\nn    public snapshotArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public snapshotName: string | undefined;\n\nn    public snapshotRetentionLimit: number | undefined;\n\nn    public snapshotWindow: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    public vpcSecurityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnCacheClusterProps) {\n        super(scope, id, { type: CfnCacheCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cacheNodeType', this);\n        cdk.requireProperty(props, 'engine', this);\n        cdk.requireProperty(props, 'numCacheNodes', this);\n        this.attrConfigurationEndpointAddress = cdk.Token.asString(this.getAtt('ConfigurationEndpoint.Address'));\n        this.attrConfigurationEndpointPort = cdk.Token.asString(this.getAtt('ConfigurationEndpoint.Port'));\n        this.attrRedisEndpointAddress = cdk.Token.asString(this.getAtt('RedisEndpoint.Address'));\n        this.attrRedisEndpointPort = cdk.Token.asString(this.getAtt('RedisEndpoint.Port'));\n\n        this.cacheNodeType = props.cacheNodeType;\n        this.engine = props.engine;\n        this.numCacheNodes = props.numCacheNodes;\n        this.autoMinorVersionUpgrade = props.autoMinorVersionUpgrade;\n        this.azMode = props.azMode;\n        this.cacheParameterGroupName = props.cacheParameterGroupName;\n        this.cacheSecurityGroupNames = props.cacheSecurityGroupNames;\n        this.cacheSubnetGroupName = props.cacheSubnetGroupName;\n        this.clusterName = props.clusterName;\n        this.engineVersion = props.engineVersion;\n        this.logDeliveryConfigurations = props.logDeliveryConfigurations;\n        this.notificationTopicArn = props.notificationTopicArn;\n        this.port = props.port;\n        this.preferredAvailabilityZone = props.preferredAvailabilityZone;\n        this.preferredAvailabilityZones = props.preferredAvailabilityZones;\n        this.preferredMaintenanceWindow = props.preferredMaintenanceWindow;\n        this.snapshotArns = props.snapshotArns;\n        this.snapshotName = props.snapshotName;\n        this.snapshotRetentionLimit = props.snapshotRetentionLimit;\n        this.snapshotWindow = props.snapshotWindow;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ElastiCache::CacheCluster\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcSecurityGroupIds = props.vpcSecurityGroupIds;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::ElastiCache::CacheCluster\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCacheCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cacheNodeType: this.cacheNodeType,\n            engine: this.engine,\n            numCacheNodes: this.numCacheNodes,\n            autoMinorVersionUpgrade: this.autoMinorVersionUpgrade,\n            azMode: this.azMode,\n            cacheParameterGroupName: this.cacheParameterGroupName,\n            cacheSecurityGroupNames: this.cacheSecurityGroupNames,\n            cacheSubnetGroupName: this.cacheSubnetGroupName,\n            clusterName: this.clusterName,\n            engineVersion: this.engineVersion,\n            logDeliveryConfigurations: this.logDeliveryConfigurations,\n            notificationTopicArn: this.notificationTopicArn,\n            port: this.port,\n            preferredAvailabilityZone: this.preferredAvailabilityZone,\n            preferredAvailabilityZones: this.preferredAvailabilityZones,\n            preferredMaintenanceWindow: this.preferredMaintenanceWindow,\n            snapshotArns: this.snapshotArns,\n            snapshotName: this.snapshotName,\n            snapshotRetentionLimit: this.snapshotRetentionLimit,\n            snapshotWindow: this.snapshotWindow,\n            tags: this.tags.renderTags(),\n            vpcSecurityGroupIds: this.vpcSecurityGroupIds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCacheClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCacheCluster {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface CloudWatchLogsDestinationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly logGroup: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchLogsDestinationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsDestinationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCacheCluster_CloudWatchLogsDestinationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroup', cdk.requiredValidator)(properties.logGroup));\n    errors.collect(cdk.propertyValidator('logGroup', cdk.validateString)(properties.logGroup));\n    return errors.wrap('supplied properties not correct for \"CloudWatchLogsDestinationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.CloudWatchLogsDestinationDetails` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsDestinationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.CloudWatchLogsDestinationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCacheClusterCloudWatchLogsDestinationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCacheCluster_CloudWatchLogsDestinationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroup: cdk.stringToCloudFormation(properties.logGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCacheClusterCloudWatchLogsDestinationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCacheCluster.CloudWatchLogsDestinationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCacheCluster.CloudWatchLogsDestinationDetailsProperty>();\n    ret.addPropertyResult('logGroup', 'LogGroup', cfn_parse.FromCloudFormation.getString(properties.LogGroup));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCacheCluster {\n                                                                                                                                                                                                                                                                                                                             \n    export interface DestinationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly cloudWatchLogsDetails?: CfnCacheCluster.CloudWatchLogsDestinationDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly kinesisFirehoseDetails?: CfnCacheCluster.KinesisFirehoseDestinationDetailsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCacheCluster_DestinationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogsDetails', CfnCacheCluster_CloudWatchLogsDestinationDetailsPropertyValidator)(properties.cloudWatchLogsDetails));\n    errors.collect(cdk.propertyValidator('kinesisFirehoseDetails', CfnCacheCluster_KinesisFirehoseDestinationDetailsPropertyValidator)(properties.kinesisFirehoseDetails));\n    return errors.wrap('supplied properties not correct for \"DestinationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.DestinationDetails` resource\n *\n * @param properties - the TypeScript properties of a `DestinationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.DestinationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCacheClusterDestinationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCacheCluster_DestinationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogsDetails: cfnCacheClusterCloudWatchLogsDestinationDetailsPropertyToCloudFormation(properties.cloudWatchLogsDetails),\n        KinesisFirehoseDetails: cfnCacheClusterKinesisFirehoseDestinationDetailsPropertyToCloudFormation(properties.kinesisFirehoseDetails),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCacheClusterDestinationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCacheCluster.DestinationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCacheCluster.DestinationDetailsProperty>();\n    ret.addPropertyResult('cloudWatchLogsDetails', 'CloudWatchLogsDetails', properties.CloudWatchLogsDetails != null ? CfnCacheClusterCloudWatchLogsDestinationDetailsPropertyFromCloudFormation(properties.CloudWatchLogsDetails) : undefined);\n    ret.addPropertyResult('kinesisFirehoseDetails', 'KinesisFirehoseDetails', properties.KinesisFirehoseDetails != null ? CfnCacheClusterKinesisFirehoseDestinationDetailsPropertyFromCloudFormation(properties.KinesisFirehoseDetails) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCacheCluster {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface KinesisFirehoseDestinationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly deliveryStream: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisFirehoseDestinationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseDestinationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCacheCluster_KinesisFirehoseDestinationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deliveryStream', cdk.requiredValidator)(properties.deliveryStream));\n    errors.collect(cdk.propertyValidator('deliveryStream', cdk.validateString)(properties.deliveryStream));\n    return errors.wrap('supplied properties not correct for \"KinesisFirehoseDestinationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.KinesisFirehoseDestinationDetails` resource\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseDestinationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.KinesisFirehoseDestinationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCacheClusterKinesisFirehoseDestinationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCacheCluster_KinesisFirehoseDestinationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        DeliveryStream: cdk.stringToCloudFormation(properties.deliveryStream),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCacheClusterKinesisFirehoseDestinationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCacheCluster.KinesisFirehoseDestinationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCacheCluster.KinesisFirehoseDestinationDetailsProperty>();\n    ret.addPropertyResult('deliveryStream', 'DeliveryStream', cfn_parse.FromCloudFormation.getString(properties.DeliveryStream));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCacheCluster {\n                                                                                                                                                                                                                                                                                              \n    export interface LogDeliveryConfigurationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly destinationDetails: CfnCacheCluster.DestinationDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly destinationType: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly logFormat: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly logType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogDeliveryConfigurationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `LogDeliveryConfigurationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCacheCluster_LogDeliveryConfigurationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationDetails', cdk.requiredValidator)(properties.destinationDetails));\n    errors.collect(cdk.propertyValidator('destinationDetails', CfnCacheCluster_DestinationDetailsPropertyValidator)(properties.destinationDetails));\n    errors.collect(cdk.propertyValidator('destinationType', cdk.requiredValidator)(properties.destinationType));\n    errors.collect(cdk.propertyValidator('destinationType', cdk.validateString)(properties.destinationType));\n    errors.collect(cdk.propertyValidator('logFormat', cdk.requiredValidator)(properties.logFormat));\n    errors.collect(cdk.propertyValidator('logFormat', cdk.validateString)(properties.logFormat));\n    errors.collect(cdk.propertyValidator('logType', cdk.requiredValidator)(properties.logType));\n    errors.collect(cdk.propertyValidator('logType', cdk.validateString)(properties.logType));\n    return errors.wrap('supplied properties not correct for \"LogDeliveryConfigurationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.LogDeliveryConfigurationRequest` resource\n *\n * @param properties - the TypeScript properties of a `LogDeliveryConfigurationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::CacheCluster.LogDeliveryConfigurationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCacheClusterLogDeliveryConfigurationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCacheCluster_LogDeliveryConfigurationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationDetails: cfnCacheClusterDestinationDetailsPropertyToCloudFormation(properties.destinationDetails),\n        DestinationType: cdk.stringToCloudFormation(properties.destinationType),\n        LogFormat: cdk.stringToCloudFormation(properties.logFormat),\n        LogType: cdk.stringToCloudFormation(properties.logType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCacheClusterLogDeliveryConfigurationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCacheCluster.LogDeliveryConfigurationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCacheCluster.LogDeliveryConfigurationRequestProperty>();\n    ret.addPropertyResult('destinationDetails', 'DestinationDetails', CfnCacheClusterDestinationDetailsPropertyFromCloudFormation(properties.DestinationDetails));\n    ret.addPropertyResult('destinationType', 'DestinationType', cfn_parse.FromCloudFormation.getString(properties.DestinationType));\n    ret.addPropertyResult('logFormat', 'LogFormat', cfn_parse.FromCloudFormation.getString(properties.LogFormat));\n    ret.addPropertyResult('logType', 'LogType', cfn_parse.FromCloudFormation.getString(properties.LogType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnGlobalReplicationGroupProps {\n\n                                                                                                                                                                                                                                                                       \n    readonly members: Array<CfnGlobalReplicationGroup.GlobalReplicationGroupMemberProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly automaticFailoverEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                              \n    readonly cacheNodeType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly cacheParameterGroupName?: string;\n\n                                                                                                                                                                                                                                                        \n    readonly engineVersion?: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly globalNodeGroupCount?: number;\n\n                                                                                                                                                                                                                                                                                       \n    readonly globalReplicationGroupDescription?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly globalReplicationGroupIdSuffix?: string;\n\n                                                                                                                                                                                                                                                                                  \n    readonly regionalConfigurations?: Array<CfnGlobalReplicationGroup.RegionalConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGlobalReplicationGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnGlobalReplicationGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGlobalReplicationGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('automaticFailoverEnabled', cdk.validateBoolean)(properties.automaticFailoverEnabled));\n    errors.collect(cdk.propertyValidator('cacheNodeType', cdk.validateString)(properties.cacheNodeType));\n    errors.collect(cdk.propertyValidator('cacheParameterGroupName', cdk.validateString)(properties.cacheParameterGroupName));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('globalNodeGroupCount', cdk.validateNumber)(properties.globalNodeGroupCount));\n    errors.collect(cdk.propertyValidator('globalReplicationGroupDescription', cdk.validateString)(properties.globalReplicationGroupDescription));\n    errors.collect(cdk.propertyValidator('globalReplicationGroupIdSuffix', cdk.validateString)(properties.globalReplicationGroupIdSuffix));\n    errors.collect(cdk.propertyValidator('members', cdk.requiredValidator)(properties.members));\n    errors.collect(cdk.propertyValidator('members', cdk.listValidator(CfnGlobalReplicationGroup_GlobalReplicationGroupMemberPropertyValidator))(properties.members));\n    errors.collect(cdk.propertyValidator('regionalConfigurations', cdk.listValidator(CfnGlobalReplicationGroup_RegionalConfigurationPropertyValidator))(properties.regionalConfigurations));\n    return errors.wrap('supplied properties not correct for \"CfnGlobalReplicationGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnGlobalReplicationGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGlobalReplicationGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGlobalReplicationGroupPropsValidator(properties).assertSuccess();\n    return {\n        Members: cdk.listMapper(cfnGlobalReplicationGroupGlobalReplicationGroupMemberPropertyToCloudFormation)(properties.members),\n        AutomaticFailoverEnabled: cdk.booleanToCloudFormation(properties.automaticFailoverEnabled),\n        CacheNodeType: cdk.stringToCloudFormation(properties.cacheNodeType),\n        CacheParameterGroupName: cdk.stringToCloudFormation(properties.cacheParameterGroupName),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        GlobalNodeGroupCount: cdk.numberToCloudFormation(properties.globalNodeGroupCount),\n        GlobalReplicationGroupDescription: cdk.stringToCloudFormation(properties.globalReplicationGroupDescription),\n        GlobalReplicationGroupIdSuffix: cdk.stringToCloudFormation(properties.globalReplicationGroupIdSuffix),\n        RegionalConfigurations: cdk.listMapper(cfnGlobalReplicationGroupRegionalConfigurationPropertyToCloudFormation)(properties.regionalConfigurations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGlobalReplicationGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGlobalReplicationGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGlobalReplicationGroupProps>();\n    ret.addPropertyResult('members', 'Members', cfn_parse.FromCloudFormation.getArray(CfnGlobalReplicationGroupGlobalReplicationGroupMemberPropertyFromCloudFormation)(properties.Members));\n    ret.addPropertyResult('automaticFailoverEnabled', 'AutomaticFailoverEnabled', properties.AutomaticFailoverEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutomaticFailoverEnabled) : undefined);\n    ret.addPropertyResult('cacheNodeType', 'CacheNodeType', properties.CacheNodeType != null ? cfn_parse.FromCloudFormation.getString(properties.CacheNodeType) : undefined);\n    ret.addPropertyResult('cacheParameterGroupName', 'CacheParameterGroupName', properties.CacheParameterGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CacheParameterGroupName) : undefined);\n    ret.addPropertyResult('engineVersion', 'EngineVersion', properties.EngineVersion != null ? cfn_parse.FromCloudFormation.getString(properties.EngineVersion) : undefined);\n    ret.addPropertyResult('globalNodeGroupCount', 'GlobalNodeGroupCount', properties.GlobalNodeGroupCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.GlobalNodeGroupCount) : undefined);\n    ret.addPropertyResult('globalReplicationGroupDescription', 'GlobalReplicationGroupDescription', properties.GlobalReplicationGroupDescription != null ? cfn_parse.FromCloudFormation.getString(properties.GlobalReplicationGroupDescription) : undefined);\n    ret.addPropertyResult('globalReplicationGroupIdSuffix', 'GlobalReplicationGroupIdSuffix', properties.GlobalReplicationGroupIdSuffix != null ? cfn_parse.FromCloudFormation.getString(properties.GlobalReplicationGroupIdSuffix) : undefined);\n    ret.addPropertyResult('regionalConfigurations', 'RegionalConfigurations', properties.RegionalConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnGlobalReplicationGroupRegionalConfigurationPropertyFromCloudFormation)(properties.RegionalConfigurations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnGlobalReplicationGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::GlobalReplicationGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGlobalReplicationGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGlobalReplicationGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGlobalReplicationGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                             \n    public readonly attrGlobalReplicationGroupId: string;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                       \n    public members: Array<CfnGlobalReplicationGroup.GlobalReplicationGroupMemberProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public automaticFailoverEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                              \n    public cacheNodeType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n    public cacheParameterGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                        \n    public engineVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public globalNodeGroupCount: number | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public globalReplicationGroupDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public globalReplicationGroupIdSuffix: string | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public regionalConfigurations: Array<CfnGlobalReplicationGroup.RegionalConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnGlobalReplicationGroupProps) {\n        super(scope, id, { type: CfnGlobalReplicationGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'members', this);\n        this.attrGlobalReplicationGroupId = cdk.Token.asString(this.getAtt('GlobalReplicationGroupId'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.members = props.members;\n        this.automaticFailoverEnabled = props.automaticFailoverEnabled;\n        this.cacheNodeType = props.cacheNodeType;\n        this.cacheParameterGroupName = props.cacheParameterGroupName;\n        this.engineVersion = props.engineVersion;\n        this.globalNodeGroupCount = props.globalNodeGroupCount;\n        this.globalReplicationGroupDescription = props.globalReplicationGroupDescription;\n        this.globalReplicationGroupIdSuffix = props.globalReplicationGroupIdSuffix;\n        this.regionalConfigurations = props.regionalConfigurations;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGlobalReplicationGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            members: this.members,\n            automaticFailoverEnabled: this.automaticFailoverEnabled,\n            cacheNodeType: this.cacheNodeType,\n            cacheParameterGroupName: this.cacheParameterGroupName,\n            engineVersion: this.engineVersion,\n            globalNodeGroupCount: this.globalNodeGroupCount,\n            globalReplicationGroupDescription: this.globalReplicationGroupDescription,\n            globalReplicationGroupIdSuffix: this.globalReplicationGroupIdSuffix,\n            regionalConfigurations: this.regionalConfigurations,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGlobalReplicationGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnGlobalReplicationGroup {\n                                                                                                                                                                                                                                                                                                                                                                            \n    export interface GlobalReplicationGroupMemberProperty {\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly replicationGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly replicationGroupRegion?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly role?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GlobalReplicationGroupMemberProperty`\n *\n * @param properties - the TypeScript properties of a `GlobalReplicationGroupMemberProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGlobalReplicationGroup_GlobalReplicationGroupMemberPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replicationGroupId', cdk.validateString)(properties.replicationGroupId));\n    errors.collect(cdk.propertyValidator('replicationGroupRegion', cdk.validateString)(properties.replicationGroupRegion));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    return errors.wrap('supplied properties not correct for \"GlobalReplicationGroupMemberProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup.GlobalReplicationGroupMember` resource\n *\n * @param properties - the TypeScript properties of a `GlobalReplicationGroupMemberProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup.GlobalReplicationGroupMember` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGlobalReplicationGroupGlobalReplicationGroupMemberPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGlobalReplicationGroup_GlobalReplicationGroupMemberPropertyValidator(properties).assertSuccess();\n    return {\n        ReplicationGroupId: cdk.stringToCloudFormation(properties.replicationGroupId),\n        ReplicationGroupRegion: cdk.stringToCloudFormation(properties.replicationGroupRegion),\n        Role: cdk.stringToCloudFormation(properties.role),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGlobalReplicationGroupGlobalReplicationGroupMemberPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGlobalReplicationGroup.GlobalReplicationGroupMemberProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGlobalReplicationGroup.GlobalReplicationGroupMemberProperty>();\n    ret.addPropertyResult('replicationGroupId', 'ReplicationGroupId', properties.ReplicationGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationGroupId) : undefined);\n    ret.addPropertyResult('replicationGroupRegion', 'ReplicationGroupRegion', properties.ReplicationGroupRegion != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationGroupRegion) : undefined);\n    ret.addPropertyResult('role', 'Role', properties.Role != null ? cfn_parse.FromCloudFormation.getString(properties.Role) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGlobalReplicationGroup {\n                                                                                                                                                                                                                                                                       \n    export interface RegionalConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                           \n        readonly replicationGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly replicationGroupRegion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly reshardingConfigurations?: Array<CfnGlobalReplicationGroup.ReshardingConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RegionalConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `RegionalConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGlobalReplicationGroup_RegionalConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replicationGroupId', cdk.validateString)(properties.replicationGroupId));\n    errors.collect(cdk.propertyValidator('replicationGroupRegion', cdk.validateString)(properties.replicationGroupRegion));\n    errors.collect(cdk.propertyValidator('reshardingConfigurations', cdk.listValidator(CfnGlobalReplicationGroup_ReshardingConfigurationPropertyValidator))(properties.reshardingConfigurations));\n    return errors.wrap('supplied properties not correct for \"RegionalConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup.RegionalConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `RegionalConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup.RegionalConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGlobalReplicationGroupRegionalConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGlobalReplicationGroup_RegionalConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ReplicationGroupId: cdk.stringToCloudFormation(properties.replicationGroupId),\n        ReplicationGroupRegion: cdk.stringToCloudFormation(properties.replicationGroupRegion),\n        ReshardingConfigurations: cdk.listMapper(cfnGlobalReplicationGroupReshardingConfigurationPropertyToCloudFormation)(properties.reshardingConfigurations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGlobalReplicationGroupRegionalConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGlobalReplicationGroup.RegionalConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGlobalReplicationGroup.RegionalConfigurationProperty>();\n    ret.addPropertyResult('replicationGroupId', 'ReplicationGroupId', properties.ReplicationGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationGroupId) : undefined);\n    ret.addPropertyResult('replicationGroupRegion', 'ReplicationGroupRegion', properties.ReplicationGroupRegion != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationGroupRegion) : undefined);\n    ret.addPropertyResult('reshardingConfigurations', 'ReshardingConfigurations', properties.ReshardingConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnGlobalReplicationGroupReshardingConfigurationPropertyFromCloudFormation)(properties.ReshardingConfigurations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGlobalReplicationGroup {\n                                                                                                                                                                                                                                                                                                                                                                  \n    export interface ReshardingConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly nodeGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly preferredAvailabilityZones?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReshardingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ReshardingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGlobalReplicationGroup_ReshardingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nodeGroupId', cdk.validateString)(properties.nodeGroupId));\n    errors.collect(cdk.propertyValidator('preferredAvailabilityZones', cdk.listValidator(cdk.validateString))(properties.preferredAvailabilityZones));\n    return errors.wrap('supplied properties not correct for \"ReshardingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup.ReshardingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ReshardingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::GlobalReplicationGroup.ReshardingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGlobalReplicationGroupReshardingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGlobalReplicationGroup_ReshardingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        NodeGroupId: cdk.stringToCloudFormation(properties.nodeGroupId),\n        PreferredAvailabilityZones: cdk.listMapper(cdk.stringToCloudFormation)(properties.preferredAvailabilityZones),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGlobalReplicationGroupReshardingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGlobalReplicationGroup.ReshardingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGlobalReplicationGroup.ReshardingConfigurationProperty>();\n    ret.addPropertyResult('nodeGroupId', 'NodeGroupId', properties.NodeGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.NodeGroupId) : undefined);\n    ret.addPropertyResult('preferredAvailabilityZones', 'PreferredAvailabilityZones', properties.PreferredAvailabilityZones != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PreferredAvailabilityZones) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnParameterGroupProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly cacheParameterGroupFamily: string;\n\n                                                                                                                                                                                                                                                   \n    readonly description: string;\n\nn    readonly properties?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnParameterGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnParameterGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnParameterGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cacheParameterGroupFamily', cdk.requiredValidator)(properties.cacheParameterGroupFamily));\n    errors.collect(cdk.propertyValidator('cacheParameterGroupFamily', cdk.validateString)(properties.cacheParameterGroupFamily));\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('properties', cdk.hashValidator(cdk.validateString))(properties.properties));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnParameterGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ParameterGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnParameterGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ParameterGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnParameterGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnParameterGroupPropsValidator(properties).assertSuccess();\n    return {\n        CacheParameterGroupFamily: cdk.stringToCloudFormation(properties.cacheParameterGroupFamily),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Properties: cdk.hashMapper(cdk.stringToCloudFormation)(properties.properties),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnParameterGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnParameterGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnParameterGroupProps>();\n    ret.addPropertyResult('cacheParameterGroupFamily', 'CacheParameterGroupFamily', cfn_parse.FromCloudFormation.getString(properties.CacheParameterGroupFamily));\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('properties', 'Properties', properties.Properties != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Properties) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnParameterGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::ParameterGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnParameterGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnParameterGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnParameterGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public cacheParameterGroupFamily: string;\n\n                                                                                                                                                                                                                                                   \n    public description: string;\n\nn    public properties: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnParameterGroupProps) {\n        super(scope, id, { type: CfnParameterGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cacheParameterGroupFamily', this);\n        cdk.requireProperty(props, 'description', this);\n\n        this.cacheParameterGroupFamily = props.cacheParameterGroupFamily;\n        this.description = props.description;\n        this.properties = props.properties;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ElastiCache::ParameterGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnParameterGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cacheParameterGroupFamily: this.cacheParameterGroupFamily,\n            description: this.description,\n            properties: this.properties,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnParameterGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnReplicationGroupProps {\n\n                                                                                                                                                                                                                                                                          \n    readonly replicationGroupDescription: string;\n\nn    readonly atRestEncryptionEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly authToken?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly automaticFailoverEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly autoMinorVersionUpgrade?: boolean | cdk.IResolvable;\n\nn    readonly cacheNodeType?: string;\n\nn    readonly cacheParameterGroupName?: string;\n\n                                                                                                                                                                                                                                                                                               \n    readonly cacheSecurityGroupNames?: string[];\n\nn    readonly cacheSubnetGroupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly dataTieringEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly engine?: string;\n\nn    readonly engineVersion?: string;\n\n                                                                                                                                                                                                                                                  \n    readonly globalReplicationGroupId?: string;\n\n                                                                                                                                                                                                                                                                \n    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly logDeliveryConfigurations?: Array<CfnReplicationGroup.LogDeliveryConfigurationRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly multiAzEnabled?: boolean | cdk.IResolvable;\n\nn    readonly nodeGroupConfiguration?: Array<CfnReplicationGroup.NodeGroupConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly notificationTopicArn?: string;\n\nn    readonly numCacheClusters?: number;\n\nn    readonly numNodeGroups?: number;\n\n                                                                                                                                                                                                                                                                                \n    readonly port?: number;\n\nn    readonly preferredCacheClusterAZs?: string[];\n\nn    readonly preferredMaintenanceWindow?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly primaryClusterId?: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly replicasPerNodeGroup?: number;\n\nn    readonly replicationGroupId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly securityGroupIds?: string[];\n\nn    readonly snapshotArns?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly snapshotName?: string;\n\nn    readonly snapshotRetentionLimit?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly snapshottingClusterId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly snapshotWindow?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n\nn    readonly transitEncryptionEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly userGroupIds?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReplicationGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnReplicationGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('atRestEncryptionEnabled', cdk.validateBoolean)(properties.atRestEncryptionEnabled));\n    errors.collect(cdk.propertyValidator('authToken', cdk.validateString)(properties.authToken));\n    errors.collect(cdk.propertyValidator('autoMinorVersionUpgrade', cdk.validateBoolean)(properties.autoMinorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('automaticFailoverEnabled', cdk.validateBoolean)(properties.automaticFailoverEnabled));\n    errors.collect(cdk.propertyValidator('cacheNodeType', cdk.validateString)(properties.cacheNodeType));\n    errors.collect(cdk.propertyValidator('cacheParameterGroupName', cdk.validateString)(properties.cacheParameterGroupName));\n    errors.collect(cdk.propertyValidator('cacheSecurityGroupNames', cdk.listValidator(cdk.validateString))(properties.cacheSecurityGroupNames));\n    errors.collect(cdk.propertyValidator('cacheSubnetGroupName', cdk.validateString)(properties.cacheSubnetGroupName));\n    errors.collect(cdk.propertyValidator('dataTieringEnabled', cdk.validateBoolean)(properties.dataTieringEnabled));\n    errors.collect(cdk.propertyValidator('engine', cdk.validateString)(properties.engine));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('globalReplicationGroupId', cdk.validateString)(properties.globalReplicationGroupId));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('logDeliveryConfigurations', cdk.listValidator(CfnReplicationGroup_LogDeliveryConfigurationRequestPropertyValidator))(properties.logDeliveryConfigurations));\n    errors.collect(cdk.propertyValidator('multiAzEnabled', cdk.validateBoolean)(properties.multiAzEnabled));\n    errors.collect(cdk.propertyValidator('nodeGroupConfiguration', cdk.listValidator(CfnReplicationGroup_NodeGroupConfigurationPropertyValidator))(properties.nodeGroupConfiguration));\n    errors.collect(cdk.propertyValidator('notificationTopicArn', cdk.validateString)(properties.notificationTopicArn));\n    errors.collect(cdk.propertyValidator('numCacheClusters', cdk.validateNumber)(properties.numCacheClusters));\n    errors.collect(cdk.propertyValidator('numNodeGroups', cdk.validateNumber)(properties.numNodeGroups));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('preferredCacheClusterAZs', cdk.listValidator(cdk.validateString))(properties.preferredCacheClusterAZs));\n    errors.collect(cdk.propertyValidator('preferredMaintenanceWindow', cdk.validateString)(properties.preferredMaintenanceWindow));\n    errors.collect(cdk.propertyValidator('primaryClusterId', cdk.validateString)(properties.primaryClusterId));\n    errors.collect(cdk.propertyValidator('replicasPerNodeGroup', cdk.validateNumber)(properties.replicasPerNodeGroup));\n    errors.collect(cdk.propertyValidator('replicationGroupDescription', cdk.requiredValidator)(properties.replicationGroupDescription));\n    errors.collect(cdk.propertyValidator('replicationGroupDescription', cdk.validateString)(properties.replicationGroupDescription));\n    errors.collect(cdk.propertyValidator('replicationGroupId', cdk.validateString)(properties.replicationGroupId));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('snapshotArns', cdk.listValidator(cdk.validateString))(properties.snapshotArns));\n    errors.collect(cdk.propertyValidator('snapshotName', cdk.validateString)(properties.snapshotName));\n    errors.collect(cdk.propertyValidator('snapshotRetentionLimit', cdk.validateNumber)(properties.snapshotRetentionLimit));\n    errors.collect(cdk.propertyValidator('snapshotWindow', cdk.validateString)(properties.snapshotWindow));\n    errors.collect(cdk.propertyValidator('snapshottingClusterId', cdk.validateString)(properties.snapshottingClusterId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('transitEncryptionEnabled', cdk.validateBoolean)(properties.transitEncryptionEnabled));\n    errors.collect(cdk.propertyValidator('userGroupIds', cdk.listValidator(cdk.validateString))(properties.userGroupIds));\n    return errors.wrap('supplied properties not correct for \"CfnReplicationGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnReplicationGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationGroupPropsValidator(properties).assertSuccess();\n    return {\n        ReplicationGroupDescription: cdk.stringToCloudFormation(properties.replicationGroupDescription),\n        AtRestEncryptionEnabled: cdk.booleanToCloudFormation(properties.atRestEncryptionEnabled),\n        AuthToken: cdk.stringToCloudFormation(properties.authToken),\n        AutomaticFailoverEnabled: cdk.booleanToCloudFormation(properties.automaticFailoverEnabled),\n        AutoMinorVersionUpgrade: cdk.booleanToCloudFormation(properties.autoMinorVersionUpgrade),\n        CacheNodeType: cdk.stringToCloudFormation(properties.cacheNodeType),\n        CacheParameterGroupName: cdk.stringToCloudFormation(properties.cacheParameterGroupName),\n        CacheSecurityGroupNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.cacheSecurityGroupNames),\n        CacheSubnetGroupName: cdk.stringToCloudFormation(properties.cacheSubnetGroupName),\n        DataTieringEnabled: cdk.booleanToCloudFormation(properties.dataTieringEnabled),\n        Engine: cdk.stringToCloudFormation(properties.engine),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        GlobalReplicationGroupId: cdk.stringToCloudFormation(properties.globalReplicationGroupId),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        LogDeliveryConfigurations: cdk.listMapper(cfnReplicationGroupLogDeliveryConfigurationRequestPropertyToCloudFormation)(properties.logDeliveryConfigurations),\n        MultiAZEnabled: cdk.booleanToCloudFormation(properties.multiAzEnabled),\n        NodeGroupConfiguration: cdk.listMapper(cfnReplicationGroupNodeGroupConfigurationPropertyToCloudFormation)(properties.nodeGroupConfiguration),\n        NotificationTopicArn: cdk.stringToCloudFormation(properties.notificationTopicArn),\n        NumCacheClusters: cdk.numberToCloudFormation(properties.numCacheClusters),\n        NumNodeGroups: cdk.numberToCloudFormation(properties.numNodeGroups),\n        Port: cdk.numberToCloudFormation(properties.port),\n        PreferredCacheClusterAZs: cdk.listMapper(cdk.stringToCloudFormation)(properties.preferredCacheClusterAZs),\n        PreferredMaintenanceWindow: cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),\n        PrimaryClusterId: cdk.stringToCloudFormation(properties.primaryClusterId),\n        ReplicasPerNodeGroup: cdk.numberToCloudFormation(properties.replicasPerNodeGroup),\n        ReplicationGroupId: cdk.stringToCloudFormation(properties.replicationGroupId),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SnapshotArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.snapshotArns),\n        SnapshotName: cdk.stringToCloudFormation(properties.snapshotName),\n        SnapshotRetentionLimit: cdk.numberToCloudFormation(properties.snapshotRetentionLimit),\n        SnapshottingClusterId: cdk.stringToCloudFormation(properties.snapshottingClusterId),\n        SnapshotWindow: cdk.stringToCloudFormation(properties.snapshotWindow),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TransitEncryptionEnabled: cdk.booleanToCloudFormation(properties.transitEncryptionEnabled),\n        UserGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.userGroupIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationGroupProps>();\n    ret.addPropertyResult('replicationGroupDescription', 'ReplicationGroupDescription', cfn_parse.FromCloudFormation.getString(properties.ReplicationGroupDescription));\n    ret.addPropertyResult('atRestEncryptionEnabled', 'AtRestEncryptionEnabled', properties.AtRestEncryptionEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AtRestEncryptionEnabled) : undefined);\n    ret.addPropertyResult('authToken', 'AuthToken', properties.AuthToken != null ? cfn_parse.FromCloudFormation.getString(properties.AuthToken) : undefined);\n    ret.addPropertyResult('automaticFailoverEnabled', 'AutomaticFailoverEnabled', properties.AutomaticFailoverEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutomaticFailoverEnabled) : undefined);\n    ret.addPropertyResult('autoMinorVersionUpgrade', 'AutoMinorVersionUpgrade', properties.AutoMinorVersionUpgrade != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoMinorVersionUpgrade) : undefined);\n    ret.addPropertyResult('cacheNodeType', 'CacheNodeType', properties.CacheNodeType != null ? cfn_parse.FromCloudFormation.getString(properties.CacheNodeType) : undefined);\n    ret.addPropertyResult('cacheParameterGroupName', 'CacheParameterGroupName', properties.CacheParameterGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CacheParameterGroupName) : undefined);\n    ret.addPropertyResult('cacheSecurityGroupNames', 'CacheSecurityGroupNames', properties.CacheSecurityGroupNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CacheSecurityGroupNames) : undefined);\n    ret.addPropertyResult('cacheSubnetGroupName', 'CacheSubnetGroupName', properties.CacheSubnetGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CacheSubnetGroupName) : undefined);\n    ret.addPropertyResult('dataTieringEnabled', 'DataTieringEnabled', properties.DataTieringEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTieringEnabled) : undefined);\n    ret.addPropertyResult('engine', 'Engine', properties.Engine != null ? cfn_parse.FromCloudFormation.getString(properties.Engine) : undefined);\n    ret.addPropertyResult('engineVersion', 'EngineVersion', properties.EngineVersion != null ? cfn_parse.FromCloudFormation.getString(properties.EngineVersion) : undefined);\n    ret.addPropertyResult('globalReplicationGroupId', 'GlobalReplicationGroupId', properties.GlobalReplicationGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.GlobalReplicationGroupId) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('logDeliveryConfigurations', 'LogDeliveryConfigurations', properties.LogDeliveryConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnReplicationGroupLogDeliveryConfigurationRequestPropertyFromCloudFormation)(properties.LogDeliveryConfigurations) : undefined);\n    ret.addPropertyResult('multiAzEnabled', 'MultiAZEnabled', properties.MultiAZEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MultiAZEnabled) : undefined);\n    ret.addPropertyResult('nodeGroupConfiguration', 'NodeGroupConfiguration', properties.NodeGroupConfiguration != null ? cfn_parse.FromCloudFormation.getArray(CfnReplicationGroupNodeGroupConfigurationPropertyFromCloudFormation)(properties.NodeGroupConfiguration) : undefined);\n    ret.addPropertyResult('notificationTopicArn', 'NotificationTopicArn', properties.NotificationTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationTopicArn) : undefined);\n    ret.addPropertyResult('numCacheClusters', 'NumCacheClusters', properties.NumCacheClusters != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumCacheClusters) : undefined);\n    ret.addPropertyResult('numNodeGroups', 'NumNodeGroups', properties.NumNodeGroups != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumNodeGroups) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('preferredCacheClusterAZs', 'PreferredCacheClusterAZs', properties.PreferredCacheClusterAZs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PreferredCacheClusterAZs) : undefined);\n    ret.addPropertyResult('preferredMaintenanceWindow', 'PreferredMaintenanceWindow', properties.PreferredMaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow) : undefined);\n    ret.addPropertyResult('primaryClusterId', 'PrimaryClusterId', properties.PrimaryClusterId != null ? cfn_parse.FromCloudFormation.getString(properties.PrimaryClusterId) : undefined);\n    ret.addPropertyResult('replicasPerNodeGroup', 'ReplicasPerNodeGroup', properties.ReplicasPerNodeGroup != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReplicasPerNodeGroup) : undefined);\n    ret.addPropertyResult('replicationGroupId', 'ReplicationGroupId', properties.ReplicationGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.ReplicationGroupId) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('snapshotArns', 'SnapshotArns', properties.SnapshotArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SnapshotArns) : undefined);\n    ret.addPropertyResult('snapshotName', 'SnapshotName', properties.SnapshotName != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotName) : undefined);\n    ret.addPropertyResult('snapshotRetentionLimit', 'SnapshotRetentionLimit', properties.SnapshotRetentionLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.SnapshotRetentionLimit) : undefined);\n    ret.addPropertyResult('snapshottingClusterId', 'SnapshottingClusterId', properties.SnapshottingClusterId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshottingClusterId) : undefined);\n    ret.addPropertyResult('snapshotWindow', 'SnapshotWindow', properties.SnapshotWindow != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotWindow) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('transitEncryptionEnabled', 'TransitEncryptionEnabled', properties.TransitEncryptionEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TransitEncryptionEnabled) : undefined);\n    ret.addPropertyResult('userGroupIds', 'UserGroupIds', properties.UserGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.UserGroupIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnReplicationGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::ReplicationGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReplicationGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReplicationGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReplicationGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly attrConfigurationEndPointAddress: string;\n\n                                                                                                                                        \n    public readonly attrConfigurationEndPointPort: string;\n\n                                                                                                                                    \n    public readonly attrPrimaryEndPointAddress: string;\n\n                                                                                                                                                            \n    public readonly attrPrimaryEndPointPort: string;\n\n                                                                                                                                                                                                                                                          \n    public readonly attrReadEndPointAddresses: string;\n\n                                                                                                                                                                                                                                                   \n    public readonly attrReadEndPointAddressesList: string[];\n\n                                                                                                                                                                                                                                          \n    public readonly attrReadEndPointPorts: string;\n\n                                                                                                                                                                                                                                             \n    public readonly attrReadEndPointPortsList: string[];\n\n                                                                                                                 \n    public readonly attrReaderEndPointAddress: string;\n\n                                                                                                                \n    public readonly attrReaderEndPointPort: string;\n\n                                                                                                                                                                                                                                                                          \n    public replicationGroupDescription: string;\n\nn    public atRestEncryptionEnabled: boolean | cdk.IResolvable | undefined;\n\nn    public authToken: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public automaticFailoverEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public autoMinorVersionUpgrade: boolean | cdk.IResolvable | undefined;\n\nn    public cacheNodeType: string | undefined;\n\nn    public cacheParameterGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                               \n    public cacheSecurityGroupNames: string[] | undefined;\n\nn    public cacheSubnetGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public dataTieringEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                  \n    public engine: string | undefined;\n\nn    public engineVersion: string | undefined;\n\n                                                                                                                                                                                                                                                  \n    public globalReplicationGroupId: string | undefined;\n\n                                                                                                                                                                                                                                                                \n    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public logDeliveryConfigurations: Array<CfnReplicationGroup.LogDeliveryConfigurationRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public multiAzEnabled: boolean | cdk.IResolvable | undefined;\n\nn    public nodeGroupConfiguration: Array<CfnReplicationGroup.NodeGroupConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public notificationTopicArn: string | undefined;\n\nn    public numCacheClusters: number | undefined;\n\nn    public numNodeGroups: number | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public port: number | undefined;\n\nn    public preferredCacheClusterAZs: string[] | undefined;\n\nn    public preferredMaintenanceWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public primaryClusterId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public replicasPerNodeGroup: number | undefined;\n\nn    public replicationGroupId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public securityGroupIds: string[] | undefined;\n\nn    public snapshotArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    public snapshotName: string | undefined;\n\nn    public snapshotRetentionLimit: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    public snapshottingClusterId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public snapshotWindow: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\nn    public transitEncryptionEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public userGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnReplicationGroupProps) {\n        super(scope, id, { type: CfnReplicationGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'replicationGroupDescription', this);\n        this.attrConfigurationEndPointAddress = cdk.Token.asString(this.getAtt('ConfigurationEndPoint.Address'));\n        this.attrConfigurationEndPointPort = cdk.Token.asString(this.getAtt('ConfigurationEndPoint.Port'));\n        this.attrPrimaryEndPointAddress = cdk.Token.asString(this.getAtt('PrimaryEndPoint.Address'));\n        this.attrPrimaryEndPointPort = cdk.Token.asString(this.getAtt('PrimaryEndPoint.Port'));\n        this.attrReadEndPointAddresses = cdk.Token.asString(this.getAtt('ReadEndPoint.Addresses'));\n        this.attrReadEndPointAddressesList = cdk.Token.asList(this.getAtt('ReadEndPoint.Addresses.List'));\n        this.attrReadEndPointPorts = cdk.Token.asString(this.getAtt('ReadEndPoint.Ports'));\n        this.attrReadEndPointPortsList = cdk.Token.asList(this.getAtt('ReadEndPoint.Ports.List'));\n        this.attrReaderEndPointAddress = cdk.Token.asString(this.getAtt('ReaderEndPoint.Address'));\n        this.attrReaderEndPointPort = cdk.Token.asString(this.getAtt('ReaderEndPoint.Port'));\n\n        this.replicationGroupDescription = props.replicationGroupDescription;\n        this.atRestEncryptionEnabled = props.atRestEncryptionEnabled;\n        this.authToken = props.authToken;\n        this.automaticFailoverEnabled = props.automaticFailoverEnabled;\n        this.autoMinorVersionUpgrade = props.autoMinorVersionUpgrade;\n        this.cacheNodeType = props.cacheNodeType;\n        this.cacheParameterGroupName = props.cacheParameterGroupName;\n        this.cacheSecurityGroupNames = props.cacheSecurityGroupNames;\n        this.cacheSubnetGroupName = props.cacheSubnetGroupName;\n        this.dataTieringEnabled = props.dataTieringEnabled;\n        this.engine = props.engine;\n        this.engineVersion = props.engineVersion;\n        this.globalReplicationGroupId = props.globalReplicationGroupId;\n        this.kmsKeyId = props.kmsKeyId;\n        this.logDeliveryConfigurations = props.logDeliveryConfigurations;\n        this.multiAzEnabled = props.multiAzEnabled;\n        this.nodeGroupConfiguration = props.nodeGroupConfiguration;\n        this.notificationTopicArn = props.notificationTopicArn;\n        this.numCacheClusters = props.numCacheClusters;\n        this.numNodeGroups = props.numNodeGroups;\n        this.port = props.port;\n        this.preferredCacheClusterAZs = props.preferredCacheClusterAZs;\n        this.preferredMaintenanceWindow = props.preferredMaintenanceWindow;\n        this.primaryClusterId = props.primaryClusterId;\n        this.replicasPerNodeGroup = props.replicasPerNodeGroup;\n        this.replicationGroupId = props.replicationGroupId;\n        this.securityGroupIds = props.securityGroupIds;\n        this.snapshotArns = props.snapshotArns;\n        this.snapshotName = props.snapshotName;\n        this.snapshotRetentionLimit = props.snapshotRetentionLimit;\n        this.snapshottingClusterId = props.snapshottingClusterId;\n        this.snapshotWindow = props.snapshotWindow;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ElastiCache::ReplicationGroup\", props.tags, { tagPropertyName: 'tags' });\n        this.transitEncryptionEnabled = props.transitEncryptionEnabled;\n        this.userGroupIds = props.userGroupIds;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::ElastiCache::ReplicationGroup\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReplicationGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            replicationGroupDescription: this.replicationGroupDescription,\n            atRestEncryptionEnabled: this.atRestEncryptionEnabled,\n            authToken: this.authToken,\n            automaticFailoverEnabled: this.automaticFailoverEnabled,\n            autoMinorVersionUpgrade: this.autoMinorVersionUpgrade,\n            cacheNodeType: this.cacheNodeType,\n            cacheParameterGroupName: this.cacheParameterGroupName,\n            cacheSecurityGroupNames: this.cacheSecurityGroupNames,\n            cacheSubnetGroupName: this.cacheSubnetGroupName,\n            dataTieringEnabled: this.dataTieringEnabled,\n            engine: this.engine,\n            engineVersion: this.engineVersion,\n            globalReplicationGroupId: this.globalReplicationGroupId,\n            kmsKeyId: this.kmsKeyId,\n            logDeliveryConfigurations: this.logDeliveryConfigurations,\n            multiAzEnabled: this.multiAzEnabled,\n            nodeGroupConfiguration: this.nodeGroupConfiguration,\n            notificationTopicArn: this.notificationTopicArn,\n            numCacheClusters: this.numCacheClusters,\n            numNodeGroups: this.numNodeGroups,\n            port: this.port,\n            preferredCacheClusterAZs: this.preferredCacheClusterAZs,\n            preferredMaintenanceWindow: this.preferredMaintenanceWindow,\n            primaryClusterId: this.primaryClusterId,\n            replicasPerNodeGroup: this.replicasPerNodeGroup,\n            replicationGroupId: this.replicationGroupId,\n            securityGroupIds: this.securityGroupIds,\n            snapshotArns: this.snapshotArns,\n            snapshotName: this.snapshotName,\n            snapshotRetentionLimit: this.snapshotRetentionLimit,\n            snapshottingClusterId: this.snapshottingClusterId,\n            snapshotWindow: this.snapshotWindow,\n            tags: this.tags.renderTags(),\n            transitEncryptionEnabled: this.transitEncryptionEnabled,\n            userGroupIds: this.userGroupIds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReplicationGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnReplicationGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface CloudWatchLogsDestinationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly logGroup: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchLogsDestinationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsDestinationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationGroup_CloudWatchLogsDestinationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroup', cdk.requiredValidator)(properties.logGroup));\n    errors.collect(cdk.propertyValidator('logGroup', cdk.validateString)(properties.logGroup));\n    return errors.wrap('supplied properties not correct for \"CloudWatchLogsDestinationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.CloudWatchLogsDestinationDetails` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsDestinationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.CloudWatchLogsDestinationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationGroupCloudWatchLogsDestinationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationGroup_CloudWatchLogsDestinationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroup: cdk.stringToCloudFormation(properties.logGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationGroupCloudWatchLogsDestinationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationGroup.CloudWatchLogsDestinationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationGroup.CloudWatchLogsDestinationDetailsProperty>();\n    ret.addPropertyResult('logGroup', 'LogGroup', cfn_parse.FromCloudFormation.getString(properties.LogGroup));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationGroup {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface DestinationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly cloudWatchLogsDetails?: CfnReplicationGroup.CloudWatchLogsDestinationDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly kinesisFirehoseDetails?: CfnReplicationGroup.KinesisFirehoseDestinationDetailsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationGroup_DestinationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogsDetails', CfnReplicationGroup_CloudWatchLogsDestinationDetailsPropertyValidator)(properties.cloudWatchLogsDetails));\n    errors.collect(cdk.propertyValidator('kinesisFirehoseDetails', CfnReplicationGroup_KinesisFirehoseDestinationDetailsPropertyValidator)(properties.kinesisFirehoseDetails));\n    return errors.wrap('supplied properties not correct for \"DestinationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.DestinationDetails` resource\n *\n * @param properties - the TypeScript properties of a `DestinationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.DestinationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationGroupDestinationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationGroup_DestinationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogsDetails: cfnReplicationGroupCloudWatchLogsDestinationDetailsPropertyToCloudFormation(properties.cloudWatchLogsDetails),\n        KinesisFirehoseDetails: cfnReplicationGroupKinesisFirehoseDestinationDetailsPropertyToCloudFormation(properties.kinesisFirehoseDetails),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationGroupDestinationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationGroup.DestinationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationGroup.DestinationDetailsProperty>();\n    ret.addPropertyResult('cloudWatchLogsDetails', 'CloudWatchLogsDetails', properties.CloudWatchLogsDetails != null ? CfnReplicationGroupCloudWatchLogsDestinationDetailsPropertyFromCloudFormation(properties.CloudWatchLogsDetails) : undefined);\n    ret.addPropertyResult('kinesisFirehoseDetails', 'KinesisFirehoseDetails', properties.KinesisFirehoseDetails != null ? CfnReplicationGroupKinesisFirehoseDestinationDetailsPropertyFromCloudFormation(properties.KinesisFirehoseDetails) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface KinesisFirehoseDestinationDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly deliveryStream: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisFirehoseDestinationDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseDestinationDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationGroup_KinesisFirehoseDestinationDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deliveryStream', cdk.requiredValidator)(properties.deliveryStream));\n    errors.collect(cdk.propertyValidator('deliveryStream', cdk.validateString)(properties.deliveryStream));\n    return errors.wrap('supplied properties not correct for \"KinesisFirehoseDestinationDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.KinesisFirehoseDestinationDetails` resource\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseDestinationDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.KinesisFirehoseDestinationDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationGroupKinesisFirehoseDestinationDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationGroup_KinesisFirehoseDestinationDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        DeliveryStream: cdk.stringToCloudFormation(properties.deliveryStream),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationGroupKinesisFirehoseDestinationDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationGroup.KinesisFirehoseDestinationDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationGroup.KinesisFirehoseDestinationDetailsProperty>();\n    ret.addPropertyResult('deliveryStream', 'DeliveryStream', cfn_parse.FromCloudFormation.getString(properties.DeliveryStream));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationGroup {\n                                                                                                                                                                                                                                                                                                  \n    export interface LogDeliveryConfigurationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly destinationDetails: CfnReplicationGroup.DestinationDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly destinationType: string;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly logFormat: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly logType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogDeliveryConfigurationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `LogDeliveryConfigurationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationGroup_LogDeliveryConfigurationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationDetails', cdk.requiredValidator)(properties.destinationDetails));\n    errors.collect(cdk.propertyValidator('destinationDetails', CfnReplicationGroup_DestinationDetailsPropertyValidator)(properties.destinationDetails));\n    errors.collect(cdk.propertyValidator('destinationType', cdk.requiredValidator)(properties.destinationType));\n    errors.collect(cdk.propertyValidator('destinationType', cdk.validateString)(properties.destinationType));\n    errors.collect(cdk.propertyValidator('logFormat', cdk.requiredValidator)(properties.logFormat));\n    errors.collect(cdk.propertyValidator('logFormat', cdk.validateString)(properties.logFormat));\n    errors.collect(cdk.propertyValidator('logType', cdk.requiredValidator)(properties.logType));\n    errors.collect(cdk.propertyValidator('logType', cdk.validateString)(properties.logType));\n    return errors.wrap('supplied properties not correct for \"LogDeliveryConfigurationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.LogDeliveryConfigurationRequest` resource\n *\n * @param properties - the TypeScript properties of a `LogDeliveryConfigurationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.LogDeliveryConfigurationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationGroupLogDeliveryConfigurationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationGroup_LogDeliveryConfigurationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationDetails: cfnReplicationGroupDestinationDetailsPropertyToCloudFormation(properties.destinationDetails),\n        DestinationType: cdk.stringToCloudFormation(properties.destinationType),\n        LogFormat: cdk.stringToCloudFormation(properties.logFormat),\n        LogType: cdk.stringToCloudFormation(properties.logType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationGroupLogDeliveryConfigurationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationGroup.LogDeliveryConfigurationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationGroup.LogDeliveryConfigurationRequestProperty>();\n    ret.addPropertyResult('destinationDetails', 'DestinationDetails', CfnReplicationGroupDestinationDetailsPropertyFromCloudFormation(properties.DestinationDetails));\n    ret.addPropertyResult('destinationType', 'DestinationType', cfn_parse.FromCloudFormation.getString(properties.DestinationType));\n    ret.addPropertyResult('logFormat', 'LogFormat', cfn_parse.FromCloudFormation.getString(properties.LogFormat));\n    ret.addPropertyResult('logType', 'LogType', cfn_parse.FromCloudFormation.getString(properties.LogType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReplicationGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface NodeGroupConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly nodeGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly primaryAvailabilityZone?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly replicaAvailabilityZones?: string[];\n                                                                                                                                                                                                                                                                                                                                      \n        readonly replicaCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly slots?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NodeGroupConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NodeGroupConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReplicationGroup_NodeGroupConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nodeGroupId', cdk.validateString)(properties.nodeGroupId));\n    errors.collect(cdk.propertyValidator('primaryAvailabilityZone', cdk.validateString)(properties.primaryAvailabilityZone));\n    errors.collect(cdk.propertyValidator('replicaAvailabilityZones', cdk.listValidator(cdk.validateString))(properties.replicaAvailabilityZones));\n    errors.collect(cdk.propertyValidator('replicaCount', cdk.validateNumber)(properties.replicaCount));\n    errors.collect(cdk.propertyValidator('slots', cdk.validateString)(properties.slots));\n    return errors.wrap('supplied properties not correct for \"NodeGroupConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NodeGroupConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReplicationGroupNodeGroupConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReplicationGroup_NodeGroupConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        NodeGroupId: cdk.stringToCloudFormation(properties.nodeGroupId),\n        PrimaryAvailabilityZone: cdk.stringToCloudFormation(properties.primaryAvailabilityZone),\n        ReplicaAvailabilityZones: cdk.listMapper(cdk.stringToCloudFormation)(properties.replicaAvailabilityZones),\n        ReplicaCount: cdk.numberToCloudFormation(properties.replicaCount),\n        Slots: cdk.stringToCloudFormation(properties.slots),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReplicationGroupNodeGroupConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReplicationGroup.NodeGroupConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReplicationGroup.NodeGroupConfigurationProperty>();\n    ret.addPropertyResult('nodeGroupId', 'NodeGroupId', properties.NodeGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.NodeGroupId) : undefined);\n    ret.addPropertyResult('primaryAvailabilityZone', 'PrimaryAvailabilityZone', properties.PrimaryAvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.PrimaryAvailabilityZone) : undefined);\n    ret.addPropertyResult('replicaAvailabilityZones', 'ReplicaAvailabilityZones', properties.ReplicaAvailabilityZones != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ReplicaAvailabilityZones) : undefined);\n    ret.addPropertyResult('replicaCount', 'ReplicaCount', properties.ReplicaCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReplicaCount) : undefined);\n    ret.addPropertyResult('slots', 'Slots', properties.Slots != null ? cfn_parse.FromCloudFormation.getString(properties.Slots) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnSecurityGroupProps {\n\n                                                                                                                                                                                                                                             \n    readonly description: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSecurityGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSecurityGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::SecurityGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::SecurityGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroupPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroupProps>();\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSecurityGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::SecurityGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSecurityGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSecurityGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSecurityGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                             \n    public description: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnSecurityGroupProps) {\n        super(scope, id, { type: CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'description', this);\n\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ElastiCache::SecurityGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSecurityGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnSecurityGroupIngressProps {\n\n                                                                                                                                                                                                                                                                              \n    readonly cacheSecurityGroupName: string;\n\n                                                                                                                                                                                                                                                                                         \n    readonly ec2SecurityGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly ec2SecurityGroupOwnerId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSecurityGroupIngressProps`\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupIngressProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityGroupIngressPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cacheSecurityGroupName', cdk.requiredValidator)(properties.cacheSecurityGroupName));\n    errors.collect(cdk.propertyValidator('cacheSecurityGroupName', cdk.validateString)(properties.cacheSecurityGroupName));\n    errors.collect(cdk.propertyValidator('ec2SecurityGroupName', cdk.requiredValidator)(properties.ec2SecurityGroupName));\n    errors.collect(cdk.propertyValidator('ec2SecurityGroupName', cdk.validateString)(properties.ec2SecurityGroupName));\n    errors.collect(cdk.propertyValidator('ec2SecurityGroupOwnerId', cdk.validateString)(properties.ec2SecurityGroupOwnerId));\n    return errors.wrap('supplied properties not correct for \"CfnSecurityGroupIngressProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::SecurityGroupIngress` resource\n *\n * @param properties - the TypeScript properties of a `CfnSecurityGroupIngressProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::SecurityGroupIngress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityGroupIngressPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityGroupIngressPropsValidator(properties).assertSuccess();\n    return {\n        CacheSecurityGroupName: cdk.stringToCloudFormation(properties.cacheSecurityGroupName),\n        EC2SecurityGroupName: cdk.stringToCloudFormation(properties.ec2SecurityGroupName),\n        EC2SecurityGroupOwnerId: cdk.stringToCloudFormation(properties.ec2SecurityGroupOwnerId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityGroupIngressPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityGroupIngressProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityGroupIngressProps>();\n    ret.addPropertyResult('cacheSecurityGroupName', 'CacheSecurityGroupName', cfn_parse.FromCloudFormation.getString(properties.CacheSecurityGroupName));\n    ret.addPropertyResult('ec2SecurityGroupName', 'EC2SecurityGroupName', cfn_parse.FromCloudFormation.getString(properties.EC2SecurityGroupName));\n    ret.addPropertyResult('ec2SecurityGroupOwnerId', 'EC2SecurityGroupOwnerId', properties.EC2SecurityGroupOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.EC2SecurityGroupOwnerId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSecurityGroupIngress extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::SecurityGroupIngress\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSecurityGroupIngress {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSecurityGroupIngressPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSecurityGroupIngress(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                              \n    public cacheSecurityGroupName: string;\n\n                                                                                                                                                                                                                                                                                         \n    public ec2SecurityGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    public ec2SecurityGroupOwnerId: string | undefined;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnSecurityGroupIngressProps) {\n        super(scope, id, { type: CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'cacheSecurityGroupName', this);\n        cdk.requireProperty(props, 'ec2SecurityGroupName', this);\n\n        this.cacheSecurityGroupName = props.cacheSecurityGroupName;\n        this.ec2SecurityGroupName = props.ec2SecurityGroupName;\n        this.ec2SecurityGroupOwnerId = props.ec2SecurityGroupOwnerId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cacheSecurityGroupName: this.cacheSecurityGroupName,\n            ec2SecurityGroupName: this.ec2SecurityGroupName,\n            ec2SecurityGroupOwnerId: this.ec2SecurityGroupOwnerId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSecurityGroupIngressPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                \nexport interface CfnSubnetGroupProps {\n\n                                                                                                                                                                                                                                        \n    readonly description: string;\n\n                                                                                                                                                                                                                                         \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly cacheSubnetGroupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSubnetGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnSubnetGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSubnetGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cacheSubnetGroupName', cdk.validateString)(properties.cacheSubnetGroupName));\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSubnetGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::SubnetGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnSubnetGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::SubnetGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSubnetGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSubnetGroupPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        CacheSubnetGroupName: cdk.stringToCloudFormation(properties.cacheSubnetGroupName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSubnetGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSubnetGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSubnetGroupProps>();\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('cacheSubnetGroupName', 'CacheSubnetGroupName', properties.CacheSubnetGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CacheSubnetGroupName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSubnetGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::SubnetGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSubnetGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSubnetGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSubnetGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                        \n    public description: string;\n\n                                                                                                                                                                                                                                         \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public cacheSubnetGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnSubnetGroupProps) {\n        super(scope, id, { type: CfnSubnetGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'description', this);\n        cdk.requireProperty(props, 'subnetIds', this);\n\n        this.description = props.description;\n        this.subnetIds = props.subnetIds;\n        this.cacheSubnetGroupName = props.cacheSubnetGroupName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ElastiCache::SubnetGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSubnetGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            subnetIds: this.subnetIds,\n            cacheSubnetGroupName: this.cacheSubnetGroupName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSubnetGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                \nexport interface CfnUserProps {\n\n                                                                                                                                                                                                             \n    readonly engine: string;\n\n                                                                                                                                                                                           \n    readonly userId: string;\n\n                                                                                                                                                                                                   \n    readonly userName: string;\n\n                                                                                                                                                                                                                           \n    readonly accessString?: string;\n\n                                                                                                                                                                                                                                       \n    readonly noPasswordRequired?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                          \n    readonly passwords?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessString', cdk.validateString)(properties.accessString));\n    errors.collect(cdk.propertyValidator('engine', cdk.requiredValidator)(properties.engine));\n    errors.collect(cdk.propertyValidator('engine', cdk.validateString)(properties.engine));\n    errors.collect(cdk.propertyValidator('noPasswordRequired', cdk.validateBoolean)(properties.noPasswordRequired));\n    errors.collect(cdk.propertyValidator('passwords', cdk.listValidator(cdk.validateString))(properties.passwords));\n    errors.collect(cdk.propertyValidator('userId', cdk.requiredValidator)(properties.userId));\n    errors.collect(cdk.propertyValidator('userId', cdk.validateString)(properties.userId));\n    errors.collect(cdk.propertyValidator('userName', cdk.requiredValidator)(properties.userName));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::User` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPropsValidator(properties).assertSuccess();\n    return {\n        Engine: cdk.stringToCloudFormation(properties.engine),\n        UserId: cdk.stringToCloudFormation(properties.userId),\n        UserName: cdk.stringToCloudFormation(properties.userName),\n        AccessString: cdk.stringToCloudFormation(properties.accessString),\n        NoPasswordRequired: cdk.booleanToCloudFormation(properties.noPasswordRequired),\n        Passwords: cdk.listMapper(cdk.stringToCloudFormation)(properties.passwords),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();\n    ret.addPropertyResult('engine', 'Engine', cfn_parse.FromCloudFormation.getString(properties.Engine));\n    ret.addPropertyResult('userId', 'UserId', cfn_parse.FromCloudFormation.getString(properties.UserId));\n    ret.addPropertyResult('userName', 'UserName', cfn_parse.FromCloudFormation.getString(properties.UserName));\n    ret.addPropertyResult('accessString', 'AccessString', properties.AccessString != null ? cfn_parse.FromCloudFormation.getString(properties.AccessString) : undefined);\n    ret.addPropertyResult('noPasswordRequired', 'NoPasswordRequired', properties.NoPasswordRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NoPasswordRequired) : undefined);\n    ret.addPropertyResult('passwords', 'Passwords', properties.Passwords != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Passwords) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \nexport class CfnUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::User\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                                                    \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                             \n    public engine: string;\n\n                                                                                                                                                                                           \n    public userId: string;\n\n                                                                                                                                                                                                   \n    public userName: string;\n\n                                                                                                                                                                                                                           \n    public accessString: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public noPasswordRequired: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                          \n    public passwords: string[] | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProps) {\n        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'engine', this);\n        cdk.requireProperty(props, 'userId', this);\n        cdk.requireProperty(props, 'userName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.engine = props.engine;\n        this.userId = props.userId;\n        this.userName = props.userName;\n        this.accessString = props.accessString;\n        this.noPasswordRequired = props.noPasswordRequired;\n        this.passwords = props.passwords;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            engine: this.engine,\n            userId: this.userId,\n            userName: this.userName,\n            accessString: this.accessString,\n            noPasswordRequired: this.noPasswordRequired,\n            passwords: this.passwords,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                          \nexport interface CfnUserGroupProps {\n\n                                                                                                                                                                                                                       \n    readonly engine: string;\n\n                                                                                                                                                                                                                \n    readonly userGroupId: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly userIds?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('engine', cdk.requiredValidator)(properties.engine));\n    errors.collect(cdk.propertyValidator('engine', cdk.validateString)(properties.engine));\n    errors.collect(cdk.propertyValidator('userGroupId', cdk.requiredValidator)(properties.userGroupId));\n    errors.collect(cdk.propertyValidator('userGroupId', cdk.validateString)(properties.userGroupId));\n    errors.collect(cdk.propertyValidator('userIds', cdk.listValidator(cdk.validateString))(properties.userIds));\n    return errors.wrap('supplied properties not correct for \"CfnUserGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElastiCache::UserGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElastiCache::UserGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserGroupPropsValidator(properties).assertSuccess();\n    return {\n        Engine: cdk.stringToCloudFormation(properties.engine),\n        UserGroupId: cdk.stringToCloudFormation(properties.userGroupId),\n        UserIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.userIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserGroupProps>();\n    ret.addPropertyResult('engine', 'Engine', cfn_parse.FromCloudFormation.getString(properties.Engine));\n    ret.addPropertyResult('userGroupId', 'UserGroupId', cfn_parse.FromCloudFormation.getString(properties.UserGroupId));\n    ret.addPropertyResult('userIds', 'UserIds', properties.UserIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.UserIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnUserGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElastiCache::UserGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrArn: string;\n\n                                                                                                                                                \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                       \n    public engine: string;\n\n                                                                                                                                                                                                                \n    public userGroupId: string;\n\n                                                                                                                                                                                                                                                                               \n    public userIds: string[] | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnUserGroupProps) {\n        super(scope, id, { type: CfnUserGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'engine', this);\n        cdk.requireProperty(props, 'userGroupId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.engine = props.engine;\n        this.userGroupId = props.userGroupId;\n        this.userIds = props.userIds;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            engine: this.engine,\n            userGroupId: this.userGroupId,\n            userIds: this.userIds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserGroupPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
