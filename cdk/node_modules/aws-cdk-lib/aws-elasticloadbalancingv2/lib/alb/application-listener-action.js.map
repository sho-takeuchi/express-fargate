{
  "version": 3,
  "sources": ["application-listener-action.ts"],
  "sourcesContent": ["import { Duration, SecretValue, Tokenization } from '../../../core';\nimport { IConstruct } from 'constructs';\nimport { CfnListener } from '../elasticloadbalancingv2.generated';\nimport { IListenerAction } from '../shared/listener-action';\nimport { IApplicationListener } from './application-listener';\nimport { IApplicationTargetGroup } from './application-target-group';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\nnexport class ListenerAction implements IListenerAction {\n                                                                                                                                                                                                                                                 \n  public static authenticateOidc(options: AuthenticateOidcOptions): ListenerAction {\n    return new ListenerAction({\n      type: 'authenticate-oidc',\n      authenticateOidcConfig: {\n        authorizationEndpoint: options.authorizationEndpoint,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret.toString(),\n        issuer: options.issuer,\n        tokenEndpoint: options.tokenEndpoint,\n        userInfoEndpoint: options.userInfoEndpoint,\n        authenticationRequestExtraParams: options.authenticationRequestExtraParams,\n        onUnauthenticatedRequest: options.onUnauthenticatedRequest,\n        scope: options.scope,\n        sessionCookieName: options.sessionCookieName,\n        sessionTimeout: options.sessionTimeout?.toSeconds().toString(),\n      },\n    }, options.next);\n  }\n\n                                                                                                                                                                                     \n  public static forward(targetGroups: IApplicationTargetGroup[], options: ForwardOptions = {}): ListenerAction {\n    if (targetGroups.length === 0) {\n      throw new Error('Need at least one targetGroup in a ListenerAction.forward()');\n    }\n    if (targetGroups.length === 1 && options.stickinessDuration === undefined) {\n      // Render a \"simple\" action for backwards compatibility with old templates\n      return new TargetGroupListenerAction(targetGroups, {\n        type: 'forward',\n        targetGroupArn: targetGroups[0].targetGroupArn,\n      });\n    }\n\n    return new TargetGroupListenerAction(targetGroups, {\n      type: 'forward',\n      forwardConfig: {\n        targetGroups: targetGroups.map(g => ({ targetGroupArn: g.targetGroupArn })),\n        targetGroupStickinessConfig: options.stickinessDuration ? {\n          durationSeconds: options.stickinessDuration.toSeconds(),\n          enabled: true,\n        } : undefined,\n      },\n    });\n  }\n\n                                                                                                                                                                                                                    \n  public static weightedForward(targetGroups: WeightedTargetGroup[], options: ForwardOptions = {}): ListenerAction {\n    if (targetGroups.length === 0) {\n      throw new Error('Need at least one targetGroup in a ListenerAction.weightedForward()');\n    }\n\n    return new TargetGroupListenerAction(targetGroups.map(g => g.targetGroup), {\n      type: 'forward',\n      forwardConfig: {\n        targetGroups: targetGroups.map(g => ({ targetGroupArn: g.targetGroup.targetGroupArn, weight: g.weight })),\n        targetGroupStickinessConfig: options.stickinessDuration ? {\n          durationSeconds: options.stickinessDuration.toSeconds(),\n          enabled: true,\n        } : undefined,\n      },\n    });\n  }\n\n                                                                                                                                                                               \n  public static fixedResponse(statusCode: number, options: FixedResponseOptions = {}): ListenerAction {\n    return new ListenerAction({\n      type: 'fixed-response',\n      fixedResponseConfig: {\n        statusCode: Tokenization.stringifyNumber(statusCode),\n        contentType: options.contentType,\n        messageBody: options.messageBody,\n      },\n    });\n  }\n\nn  public static redirect(options: RedirectOptions): ListenerAction {\n    if ([options.host, options.path, options.port, options.protocol, options.query].findIndex(x => x !== undefined) === -1) {\n      throw new Error('To prevent redirect loops, set at least one of \\'protocol\\', \\'host\\', \\'port\\', \\'path\\', or \\'query\\'.');\n    }\n\n    return new ListenerAction({\n      type: 'redirect',\n      redirectConfig: {\n        statusCode: options.permanent ? 'HTTP_301' : 'HTTP_302',\n        host: options.host,\n        path: options.path,\n        port: options.port,\n        protocol: options.protocol,\n        query: options.query,\n      },\n    });\n  }\n\n                                                                                                                                                                                                                                                                           \n  protected constructor(private readonly actionJson: CfnListener.ActionProperty, protected readonly next?: ListenerAction) {\n  }\n\n                                                 \n  public renderActions(): CfnListener.ActionProperty[] {\n    return this.renumber([this.actionJson, ...this.next?.renderActions() ?? []]);\n  }\n\n                                                                   \n  public bind(scope: Construct, listener: IApplicationListener, associatingConstruct?: IConstruct) {\n    // Empty on purpose\n    Array.isArray(scope);\n    Array.isArray(listener);\n    Array.isArray(associatingConstruct);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                      \n  protected renumber(actions: CfnListener.ActionProperty[]): CfnListener.ActionProperty[] {\n    if (actions.length < 2) { return actions; }\n\n    return actions.map((action, i) => ({ ...action, order: i + 1 }));\n  }\n}\n\n                                                 \nexport interface ForwardOptions {\n                                                                                                                                                                 \n  readonly stickinessDuration?: Duration;\n}\n\n                                                \nexport interface WeightedTargetGroup {\n                                 \n  readonly targetGroup: IApplicationTargetGroup;\n\n                                                                                             \n  readonly weight?: number;\n}\n\n                                                       \nexport interface FixedResponseOptions {\n                                                                                                                                                                                                 \n  readonly contentType?: string;\n\n                                                               \n  readonly messageBody?: string;\n}\n\nnexport interface RedirectOptions {\n                                                                                                                                                \n  readonly host?: string;\n\n                                                                                                                                                                                                      \n  readonly path?: string;\n\n                                                                                                                       \n  readonly port?: string;\n\n                                                                                                                                                                                                                         \n  readonly protocol?: string;\n\n                                                                                                                                                                                                                                                \n  readonly query?: string;\n\n                                                                                                                                                \n  readonly permanent?: boolean;\n}\n\n                                                         \nexport interface AuthenticateOidcOptions {\n                                            \n  readonly next: ListenerAction;\n\n                                                                                                                                                           \n  readonly authenticationRequestExtraParams?: Record<string, string>;\n\n                                                                                                                                                  \n  readonly authorizationEndpoint: string;\n\n                                                 \n  readonly clientId: string;\n\n                                             \n  readonly clientSecret: SecretValue;\n\n                                                                                                                                                  \n  readonly issuer: string;\n\n                                                                                                                     \n  readonly onUnauthenticatedRequest?: UnauthenticatedAction;\n\n                                                                                                                                                                                                                                   \n  readonly scope?: string;\n\n                                                                                                                          \n  readonly sessionCookieName?: string;\n\n                                                                                                        \n  readonly sessionTimeout?: Duration;\n\n                                                                                                                                          \n  readonly tokenEndpoint: string;\n\n                                                                                                                                              \n  readonly userInfoEndpoint: string;\n}\n\n                                                   \nexport enum UnauthenticatedAction {\n                                                       \n  DENY = 'deny',\n\n                                                                 \n  ALLOW = 'allow',\n\n                                                                        \n  AUTHENTICATE = 'authenticate',\n}\n\n/**\n * Listener Action that calls \"registerListener\" on TargetGroups\n */\nclass TargetGroupListenerAction extends ListenerAction {\n  constructor(private readonly targetGroups: IApplicationTargetGroup[], actionJson: CfnListener.ActionProperty) {\n    super(actionJson);\n  }\n\n  public bind(_scope: Construct, listener: IApplicationListener, associatingConstruct?: IConstruct) {\n    for (const tg of this.targetGroups) {\n      tg.registerListener(listener, associatingConstruct);\n    }\n  }\n}\n"],
  "mappings": "sPAAA,OAAA,QAAA,iBAYA,oBAA2B,CAgGzB,YAAuC,WAA2D,KAAqB,CAAhF,KAAA,WAAA,WAA2D,KAAA,KAAA,qMA9FpF,kBAAiB,QAAgC,+GACtD,GAAI,gBAAe,CACxB,KAAM,oBACN,uBAAwB,CACtB,sBAAuB,QAAQ,sBAC/B,SAAU,QAAQ,SAClB,aAAc,QAAQ,aAAa,WACnC,OAAQ,QAAQ,OAChB,cAAe,QAAQ,cACvB,iBAAkB,QAAQ,iBAC1B,iCAAkC,QAAQ,iCAC1C,yBAA0B,QAAQ,yBAClC,MAAO,QAAQ,MACf,kBAAmB,QAAQ,kBAC3B,eAAc,IAAE,QAAQ,kBAAc,MAAA,KAAA,OAAA,OAAA,GAAE,YAAY,aAErD,QAAQ,YAIC,SAAQ,aAAyC,QAA0B,GAAE,CACzF,0FAAI,aAAa,SAAW,EAC1B,KAAM,IAAI,OAAM,+DAElB,MAAI,cAAa,SAAW,GAAK,QAAQ,qBAAuB,OAEvD,GAAI,2BAA0B,aAAc,CACjD,KAAM,UACN,eAAgB,aAAa,GAAG,iBAI7B,GAAI,2BAA0B,aAAc,CACjD,KAAM,UACN,cAAe,CACb,aAAc,aAAa,IAAI,GAAM,EAAE,eAAgB,EAAE,kBACzD,4BAA6B,QAAQ,mBAAqB,CACxD,gBAAiB,QAAQ,mBAAmB,YAC5C,QAAS,IACP,gBAMI,iBAAgB,aAAqC,QAA0B,GAAE,CAC7F,0FAAI,aAAa,SAAW,EAC1B,KAAM,IAAI,OAAM,uEAGlB,MAAO,IAAI,2BAA0B,aAAa,IAAI,GAAK,EAAE,aAAc,CACzE,KAAM,UACN,cAAe,CACb,aAAc,aAAa,IAAI,GAAM,EAAE,eAAgB,EAAE,YAAY,eAAgB,OAAQ,EAAE,UAC/F,4BAA6B,QAAQ,mBAAqB,CACxD,gBAAiB,QAAQ,mBAAmB,YAC5C,QAAS,IACP,gBAMI,eAAc,WAAoB,QAAgC,GAAE,qGACzE,GAAI,gBAAe,CACxB,KAAM,iBACN,oBAAqB,CACnB,WAAY,OAAA,aAAa,gBAAgB,YACzC,YAAa,QAAQ,YACrB,YAAa,QAAQ,qBAMb,UAAS,QAAwB,CAC7C,2FAAI,CAAC,QAAQ,KAAM,QAAQ,KAAM,QAAQ,KAAM,QAAQ,SAAU,QAAQ,OAAO,UAAU,GAAK,IAAM,UAAe,GAClH,KAAM,IAAI,OAAM,kGAGlB,MAAO,IAAI,gBAAe,CACxB,KAAM,WACN,eAAgB,CACd,WAAY,QAAQ,UAAY,WAAa,WAC7C,KAAM,QAAQ,KACd,KAAM,QAAQ,KACd,KAAM,QAAQ,KACd,SAAU,QAAQ,SAClB,MAAO,QAAQ,SAUd,eAAa,WAClB,MAAO,MAAK,SAAS,CAAC,KAAK,WAAY,GAAA,IAAA,IAAG,KAAK,QAAI,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAa,MAAA,KAAA,OAAA,GAAM,KAInE,KAAK,MAAkB,SAAgC,qBAAiC,+FAE7F,MAAM,QAAQ,OACd,MAAM,QAAQ,UACd,MAAM,QAAQ,sBAIN,SAAS,QAAqC,CACtD,MAAI,SAAQ,OAAS,EAAY,QAE1B,QAAQ,IAAI,CAAC,OAAQ,IAAO,KAAK,OAAQ,MAAO,EAAI,MApH/D,QAAA,eAAA,uIA6MA,GAAY,uBAAZ,AAAA,UAAY,uBAAqB,CAE/B,uBAAA,KAAA,OAGA,uBAAA,MAAA,QAGA,uBAAA,aAAA,iBARU,sBAAA,QAAA,uBAAA,SAAA,sBAAqB,KAcjC,uCAAwC,eAAc,CACpD,YAA6B,aAAyC,WAAsC,CAC1G,MAAM,YADqB,KAAA,aAAA,aAItB,KAAK,OAAmB,SAAgC,qBAAiC,CAC9F,SAAW,MAAM,MAAK,aACpB,GAAG,iBAAiB,SAAU",
  "names": []
}
