{
  "version": 3,
  "sources": ["application-listener.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport { Duration, IResource, Lazy, Resource, Token } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { BaseListener, BaseListenerLookupOptions } from '../shared/base-listener';\nimport { HealthCheck } from '../shared/base-target-group';\nimport { ApplicationProtocol, ApplicationProtocolVersion, TargetGroupLoadBalancingAlgorithmType, IpAddressType, SslPolicy } from '../shared/enums';\nimport { IListenerCertificate, ListenerCertificate } from '../shared/listener-certificate';\nimport { determineProtocolAndPort } from '../shared/util';\nimport { ListenerAction } from './application-listener-action';\nimport { ApplicationListenerCertificate } from './application-listener-certificate';\nimport { ApplicationListenerRule, FixedResponse, RedirectResponse } from './application-listener-rule';\nimport { IApplicationLoadBalancer } from './application-load-balancer';\nimport { ApplicationTargetGroup, IApplicationLoadBalancerTarget, IApplicationTargetGroup } from './application-target-group';\nimport { ListenerCondition } from './conditions';\n\n                                                      \nexport interface BaseApplicationListenerProps {\n                                                                                        \n  readonly protocol?: ApplicationProtocol;\n\n                                                                                                                             \n  readonly port?: number;\n\n                                                                                                                                                        \n  readonly certificateArns?: string[];\n\n                                                                                                                                                                            \n  readonly certificates?: IListenerCertificate[];\n\n                                                                                                                                                         \n  readonly sslPolicy?: SslPolicy;\n\n                                                                                                                                                                                                                                                                                                                                                   \n  readonly defaultTargetGroups?: IApplicationTargetGroup[];\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n  readonly defaultAction?: ListenerAction;\n\nn  readonly open?: boolean;\n}\n\n                                                                   \nexport interface ApplicationListenerProps extends BaseApplicationListenerProps {\n                                                             \n  readonly loadBalancer: IApplicationLoadBalancer;\n}\n\n                                                 \nexport interface ApplicationListenerLookupOptions extends BaseListenerLookupOptions {\n                                                                                               \n  readonly listenerArn?: string;\n\n                                                                                                           \n  readonly listenerProtocol?: ApplicationProtocol;\n}\n\n                                                                                              \nexport class ApplicationListener extends BaseListener implements IApplicationListener {\n                                                \n  public static fromLookup(scope: Construct, id: string, options: ApplicationListenerLookupOptions): IApplicationListener {\n    if (Token.isUnresolved(options.listenerArn)) {\n      throw new Error('All arguments to look up a load balancer listener must be concrete (no Tokens)');\n    }\n\n    let listenerProtocol: cxschema.LoadBalancerListenerProtocol | undefined;\n    switch (options.listenerProtocol) {\n      case ApplicationProtocol.HTTP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.HTTP; break;\n      case ApplicationProtocol.HTTPS: listenerProtocol = cxschema.LoadBalancerListenerProtocol.HTTPS; break;\n    }\n\n    const props = BaseListener._queryContextProvider(scope, {\n      userOptions: options,\n      loadBalancerType: cxschema.LoadBalancerType.APPLICATION,\n      listenerArn: options.listenerArn,\n      listenerProtocol,\n    });\n\n    return new LookedUpApplicationListener(scope, id, props);\n  }\n\n                                            \n  public static fromApplicationListenerAttributes(scope: Construct, id: string, attrs: ApplicationListenerAttributes): IApplicationListener {\n    return new ImportedApplicationListener(scope, id, attrs);\n  }\n\n                                                               \n  public readonly connections: ec2.Connections;\n\n                                                               \n  public readonly loadBalancer: IApplicationLoadBalancer;\n\n  /**\n   * ARNs of certificates added to this listener\n   */\n  private readonly certificateArns: string[];\n\n  /**\n   * Listener protocol for this listener.\n   */\n  private readonly protocol: ApplicationProtocol;\n\n  constructor(scope: Construct, id: string, props: ApplicationListenerProps) {\n    const [protocol, port] = determineProtocolAndPort(props.protocol, props.port);\n    if (protocol === undefined || port === undefined) {\n      throw new Error('At least one of \\'port\\' or \\'protocol\\' is required');\n    }\n\n    super(scope, id, {\n      loadBalancerArn: props.loadBalancer.loadBalancerArn,\n      certificates: Lazy.any({ produce: () => this.certificateArns.map(certificateArn => ({ certificateArn })) }, { omitEmptyArray: true }),\n      protocol,\n      port,\n      sslPolicy: props.sslPolicy,\n    });\n\n    this.loadBalancer = props.loadBalancer;\n    this.protocol = protocol;\n    this.certificateArns = [];\n\n    // Attach certificates\n    if (props.certificateArns && props.certificateArns.length > 0) {\n      this.addCertificateArns('ListenerCertificate', props.certificateArns);\n    }\n    if (props.certificates && props.certificates.length > 0) {\n      this.addCertificates('DefaultCertificates', props.certificates);\n    }\n\n    // This listener edits the securitygroup of the load balancer,\n    // but adds its own default port.\n    this.connections = new ec2.Connections({\n      securityGroups: props.loadBalancer.connections.securityGroups,\n      defaultPort: ec2.Port.tcp(port),\n    });\n\n    if (props.defaultAction && props.defaultTargetGroups) {\n      throw new Error('Specify at most one of \\'defaultAction\\' and \\'defaultTargetGroups\\'');\n    }\n\n    if (props.defaultAction) {\n      this.setDefaultAction(props.defaultAction);\n    }\n\n    if (props.defaultTargetGroups) {\n      this.setDefaultAction(ListenerAction.forward(props.defaultTargetGroups));\n    }\n\n    if (props.open !== false) {\n      this.connections.allowDefaultPortFrom(ec2.Peer.anyIpv4(), `Allow from anyone on port ${port}`);\n      if (this.loadBalancer.ipAddressType === IpAddressType.DUAL_STACK) {\n        this.connections.allowDefaultPortFrom(ec2.Peer.anyIpv6(), `Allow from anyone on port ${port}`);\n      }\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                                 \n  public addCertificateArns(id: string, arns: string[]): void {\n    this.addCertificates(id, arns.map(ListenerCertificate.fromArn));\n  }\n\n                                                                                                                                                                                                                                                                            \n  public addCertificates(id: string, certificates: IListenerCertificate[]): void {\n    const additionalCerts = [...certificates];\n\n    if (this.certificateArns.length === 0 && additionalCerts.length > 0) {\n      const first = additionalCerts.splice(0, 1)[0];\n      this.certificateArns.push(first.certificateArn);\n    }\n\n    // Only one certificate can be specified per resource, even though\n    // `certificates` is of type Array\n    for (let i = 0; i < additionalCerts.length; i++) {\n      new ApplicationListenerCertificate(this, `${id}${i + 1}`, {\n        listener: this,\n        certificates: [additionalCerts[i]],\n      });\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n  public addAction(id: string, props: AddApplicationActionProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      //\n      // TargetGroup.registerListener is called inside ApplicationListenerRule.\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      // New default target with these targetgroups\n      this.setDefaultAction(props.action);\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n  public addTargetGroups(id: string, props: AddApplicationTargetGroupsProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      //\n      // TargetGroup.registerListener is called inside ApplicationListenerRule.\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      // New default target with these targetgroups\n      this.setDefaultAction(ListenerAction.forward(props.targetGroups));\n    }\n  }\n\nn  public addTargets(id: string, props: AddApplicationTargetsProps): ApplicationTargetGroup {\n    if (!this.loadBalancer.vpc) {\n      // eslint-disable-next-line max-len\n      throw new Error('Can only call addTargets() when using a constructed Load Balancer or an imported Load Balancer with specified vpc; construct a new TargetGroup and use addTargetGroup');\n    }\n\n    const group = new ApplicationTargetGroup(this, id + 'Group', {\n      vpc: this.loadBalancer.vpc,\n      ...props,\n    });\n\n    this.addTargetGroups(id, {\n      targetGroups: [group],\n      ...props,\n    });\n\n    return group;\n  }\n\n                                                                                     \n  public addFixedResponse(id: string, props: AddFixedResponseProps) {\n    checkAddRuleProps(props);\n\n    const fixedResponse: FixedResponse = {\n      statusCode: props.statusCode,\n      contentType: props.contentType,\n      messageBody: props.messageBody,\n    };\n\n    /**\n     * NOTE - Copy/pasted from `application-listener-rule.ts#validateFixedResponse`.\n     * This was previously a deprecated, exported function, which caused issues with jsii's strip-deprecated functionality.\n     * Inlining the duplication functionality in v2 only (for now).\n     */\n    if (fixedResponse.statusCode && !/^(2|4|5)\\d\\d$/.test(fixedResponse.statusCode)) {\n      throw new Error('`statusCode` must be 2XX, 4XX or 5XX.');\n    }\n\n    if (fixedResponse.messageBody && fixedResponse.messageBody.length > 1024) {\n      throw new Error('`messageBody` cannot have more than 1024 characters.');\n    }\n\n    if (props.priority) {\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        fixedResponse,\n        ...props,\n      });\n    } else {\n      this.setDefaultAction(ListenerAction.fixedResponse(Token.asNumber(props.statusCode), {\n        contentType: props.contentType,\n        messageBody: props.messageBody,\n      }));\n    }\n  }\n\n                                                                                        \n  public addRedirectResponse(id: string, props: AddRedirectResponseProps) {\n    checkAddRuleProps(props);\n    const redirectResponse = {\n      host: props.host,\n      path: props.path,\n      port: props.port,\n      protocol: props.protocol,\n      query: props.query,\n      statusCode: props.statusCode,\n    };\n\n    /**\n     * NOTE - Copy/pasted from `application-listener-rule.ts#validateRedirectResponse`.\n     * This was previously a deprecated, exported function, which caused issues with jsii's strip-deprecated functionality.\n     * Inlining the duplication functionality in v2 only (for now).\n     */\n    if (redirectResponse.protocol && !/^(HTTPS?|#\\{protocol\\})$/i.test(redirectResponse.protocol)) {\n      throw new Error('`protocol` must be HTTP, HTTPS, or #{protocol}.');\n    }\n\n    if (!redirectResponse.statusCode || !/^HTTP_30[12]$/.test(redirectResponse.statusCode)) {\n      throw new Error('`statusCode` must be HTTP_301 or HTTP_302.');\n    }\n\n    if (props.priority) {\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        redirectResponse,\n        ...props,\n      });\n    } else {\n      this.setDefaultAction(ListenerAction.redirect({\n        host: props.host,\n        path: props.path,\n        port: props.port,\n        protocol: props.protocol,\n        query: props.query,\n        permanent: props.statusCode === 'HTTP_301',\n      }));\n    }\n  }\n\n                                                                                                                                                                   \n  public registerConnectable(connectable: ec2.IConnectable, portRange: ec2.Port): void {\n    connectable.connections.allowFrom(this.loadBalancer, portRange, 'Load balancer to target');\n  }\n\n                                        \n  protected validateListener(): string[] {\n    const errors = super.validateListener();\n    if (this.protocol === ApplicationProtocol.HTTPS && this.certificateArns.length === 0) {\n      errors.push('HTTPS Listener needs at least one certificate (call addCertificates)');\n    }\n    return errors;\n  }\n\n  /**\n   * Wrapper for _setDefaultAction which does a type-safe bind\n   */\n  private setDefaultAction(action: ListenerAction) {\n    action.bind(this, this);\n    this._setDefaultAction(action);\n  }\n}\n\n                                                       \nexport interface IApplicationListener extends IResource, ec2.IConnectable {\n                                                    \n  readonly listenerArn: string;\n\n                                                                                                        \n  addCertificateArns(id: string, arns: string[]): void;\n\n                                                               \n  addCertificates(id: string, certificates: IListenerCertificate[]): void;\n\n                                                                                                                                                                                                                            \n  addTargetGroups(id: string, props: AddApplicationTargetGroupsProps): void;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n  addTargets(id: string, props: AddApplicationTargetsProps): ApplicationTargetGroup;\n\n                                                                                                                                                                   \n  registerConnectable(connectable: ec2.IConnectable, portRange: ec2.Port): void;\n}\n\n                                                       \nexport interface ApplicationListenerAttributes {\n                                    \n  readonly listenerArn: string;\n\n                                                                                                                                          \n  readonly securityGroupId?: string;\n\n                                                                                     \n  readonly securityGroup?: ec2.ISecurityGroup;\n\n                                                                     \n  readonly defaultPort?: number;\n\n                                                                                                                                                                                                                                                                                                  \n  readonly securityGroupAllowsAllOutbound?: boolean;\n}\n\nabstract class ExternalApplicationListener extends Resource implements IApplicationListener {\n  /**\n   * Connections object.\n   */\n  public abstract readonly connections: ec2.Connections;\n\n  /**\n   * ARN of the listener\n   */\n  public abstract readonly listenerArn: string;\n\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n  }\n\n  /**\n   * Register that a connectable that has been added to this load balancer.\n   *\n   * Don't call this directly. It is called by ApplicationTargetGroup.\n   */\n  public registerConnectable(connectable: ec2.IConnectable, portRange: ec2.Port): void {\n    this.connections.allowTo(connectable, portRange, 'Load balancer to target');\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   * @deprecated use `addCertificates()`\n   */\n  public addCertificateArns(id: string, arns: string[]): void {\n    this.addCertificates(id, arns.map(ListenerCertificate.fromArn));\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   */\n  public addCertificates(id: string, certificates: IListenerCertificate[]): void {\n    new ApplicationListenerCertificate(this, id, {\n      listener: this,\n      certificates,\n    });\n  }\n\n  /**\n   * Load balance incoming requests to the given target groups.\n   *\n   * It's possible to add conditions to the TargetGroups added in this way.\n   * At least one TargetGroup must be added without conditions.\n   */\n  public addTargetGroups(id: string, props: AddApplicationTargetGroupsProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      new ApplicationListenerRule(this, id, {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      throw new Error('Cannot add default Target Groups to imported ApplicationListener');\n    }\n  }\n\n  /**\n   * Load balance incoming requests to the given load balancing targets.\n   *\n   * This method implicitly creates an ApplicationTargetGroup for the targets\n   * involved.\n   *\n   * It's possible to add conditions to the targets added in this way. At least\n   * one set of targets must be added without conditions.\n   *\n   * @returns The newly created target group\n   */\n  public addTargets(_id: string, _props: AddApplicationTargetsProps): ApplicationTargetGroup {\n    // eslint-disable-next-line max-len\n    throw new Error('Can only call addTargets() when using a constructed ApplicationListener; construct a new TargetGroup and use addTargetGroup.');\n  }\n}\n\n/**\n * An imported application listener.\n */\nclass ImportedApplicationListener extends ExternalApplicationListener {\n  public readonly listenerArn: string;\n  public readonly connections: ec2.Connections;\n\n  constructor(scope: Construct, id: string, props: ApplicationListenerAttributes) {\n    super(scope, id);\n\n    this.listenerArn = props.listenerArn;\n    const defaultPort = props.defaultPort !== undefined ? ec2.Port.tcp(props.defaultPort) : undefined;\n\n    let securityGroup: ec2.ISecurityGroup;\n    if (props.securityGroup) {\n      securityGroup = props.securityGroup;\n    } else if (props.securityGroupId) {\n      securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroup', props.securityGroupId, {\n        allowAllOutbound: props.securityGroupAllowsAllOutbound,\n      });\n    } else {\n      throw new Error('Either `securityGroup` or `securityGroupId` must be specified to import an application listener.');\n    }\n\n    this.connections = new ec2.Connections({\n      securityGroups: [securityGroup],\n      defaultPort,\n    });\n  }\n}\n\nclass LookedUpApplicationListener extends ExternalApplicationListener {\n  public readonly listenerArn: string;\n  public readonly connections: ec2.Connections;\n\n  constructor(scope: Construct, id: string, props: cxapi.LoadBalancerListenerContextResponse) {\n    super(scope, id);\n\n    this.listenerArn = props.listenerArn;\n    this.connections = new ec2.Connections({\n      defaultPort: ec2.Port.tcp(props.listenerPort),\n    });\n\n    for (const securityGroupId of props.securityGroupIds) {\n      const securityGroup = ec2.SecurityGroup.fromLookupById(this, `SecurityGroup-${securityGroupId}`, securityGroupId);\n      this.connections.addSecurityGroup(securityGroup);\n    }\n  }\n}\n\n                                                                  \nexport interface AddRuleProps {\n                                                                                                                                                                                                                                                                                                                                      \n  readonly priority?: number;\n\n                                                                                                                                                                                                            \n  readonly conditions?: ListenerCondition[];\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly hostHeader?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly pathPattern?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly pathPatterns?: string[];\n}\n\n                                                                 \nexport interface AddApplicationTargetGroupsProps extends AddRuleProps {\n                                                     \n  readonly targetGroups: IApplicationTargetGroup[];\n}\n\n                                                           \nexport interface AddApplicationActionProps extends AddRuleProps {\n                                  \n  readonly action: ListenerAction;\n}\n\n                                                          \nexport interface AddApplicationTargetsProps extends AddRuleProps {\n                                                                                     \n  readonly protocol?: ApplicationProtocol;\n\n                                                                                                \n  readonly protocolVersion?: ApplicationProtocolVersion;\n\n                                                                                                                          \n  readonly port?: number;\n\n                                                                                                                                                                                                                                             \n  readonly slowStart?: Duration;\n\n                                                                                                                                                                                                                                                                                                                 \n  readonly stickinessCookieDuration?: Duration;\n\nn  readonly stickinessCookieName?: string;\n\n                                                                                                                                                                                            \n  readonly targets?: IApplicationLoadBalancerTarget[];\n\n                                                                                                                                                                                                                                                                                                  \n  readonly targetGroupName?: string;\n\n                                                                                                                                                                                   \n  readonly deregistrationDelay?: Duration;\n\n                                                                              \n  readonly healthCheck?: HealthCheck;\n\n                                                                                                                     \n  readonly loadBalancingAlgorithmType?: TargetGroupLoadBalancingAlgorithmType;\n\n}\n\n                                                                                                                              \nexport interface AddFixedResponseProps extends AddRuleProps, FixedResponse {\n}\n\n                                                                                                                                 \nexport interface AddRedirectResponseProps extends AddRuleProps, RedirectResponse {\n}\n\nfunction checkAddRuleProps(props: AddRuleProps) {\n  const conditionsCount = props.conditions?.length || 0;\n  const hasAnyConditions = conditionsCount !== 0 ||\n    props.hostHeader !== undefined || props.pathPattern !== undefined || props.pathPatterns !== undefined;\n  const hasPriority = props.priority !== undefined;\n  if (hasAnyConditions !== hasPriority) {\n    throw new Error('Setting \\'conditions\\', \\'pathPattern\\' or \\'hostHeader\\' also requires \\'priority\\', and vice versa');\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
