{
  "version": 3,
  "sources": ["conditions.ts"],
  "sourcesContent": ["                                                  \nexport abstract class ListenerCondition {\n                                                                                                            \n  public static hostHeaders(values: string[]): ListenerCondition {\n    return new HostHeaderListenerCondition(values);\n  }\n\n                                                                                                                                          \n  public static httpHeader(name: string, values: string[]): ListenerCondition {\n    return new HttpHeaderListenerCondition(name, values);\n  }\n\n                                                                                                                  \n  public static httpRequestMethods(values: string[]): ListenerCondition {\n    return new HttpRequestMethodListenerCondition(values);\n  }\n\n                                                                                                    \n  public static pathPatterns(values: string[]): ListenerCondition {\n    return new PathPatternListenerCondition(values);\n  }\n\n                                                                                                                   \n  public static queryStrings(values: QueryStringCondition[]): ListenerCondition {\n    return new QueryStringListenerCondition(values);\n  }\n\n                                                                                              \n  public static sourceIps(values: string[]): ListenerCondition {\n    return new SourceIpListenerCondition(values);\n  }\n\n                                                                   \n  public abstract renderRawCondition(): any;\n}\n\n                                                                \nexport interface QueryStringCondition {\n                                                                                                    \n  readonly key?: string;\n\n                                                         \n  readonly value: string;\n}\n\n/**\n * Host header config of the listener rule condition\n */\nclass HostHeaderListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'host-header',\n      hostHeaderConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * HTTP header config of the listener rule condition\n */\nclass HttpHeaderListenerCondition extends ListenerCondition {\n  constructor(public readonly name: string, public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'http-header',\n      httpHeaderConfig: {\n        httpHeaderName: this.name,\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * HTTP reqeust method config of the listener rule condition\n */\nclass HttpRequestMethodListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'http-request-method',\n      httpRequestMethodConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * Path pattern config of the listener rule condition\n */\nclass PathPatternListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n    if (values && values.length > 5) {\n      throw new Error(\"A rule can only have '5' condition values\");\n    }\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'path-pattern',\n      pathPatternConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * Query string config of the listener rule condition\n */\nclass QueryStringListenerCondition extends ListenerCondition {\n  constructor(public readonly values: QueryStringCondition[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'query-string',\n      queryStringConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * Source ip config of the listener rule condition\n */\nclass SourceIpListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'source-ip',\n      sourceIpConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n"],
  "mappings": "6JACA,uBAAuC,OAEvB,aAAY,OAAgB,CACxC,MAAO,IAAI,6BAA4B,cAI3B,YAAW,KAAc,OAAgB,CACrD,MAAO,IAAI,6BAA4B,KAAM,cAIjC,oBAAmB,OAAgB,CAC/C,MAAO,IAAI,oCAAmC,cAIlC,cAAa,OAAgB,CACzC,MAAO,IAAI,8BAA6B,cAI5B,cAAa,OAA8B,CACvD,MAAO,IAAI,8BAA6B,cAI5B,WAAU,OAAgB,CACtC,MAAO,IAAI,2BAA0B,SA5BzC,QAAA,kBAAA,gJA+CA,yCAA0C,kBAAiB,CACzD,YAA4B,OAAgB,CAC1C,QAD0B,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,cACP,iBAAkB,CAChB,OAAQ,KAAK,UASrB,yCAA0C,kBAAiB,CACzD,YAA4B,KAA8B,OAAgB,CACxE,QAD0B,KAAA,KAAA,KAA8B,KAAA,OAAA,OAInD,oBAAkB,CACvB,MAAO,CACL,MAAO,cACP,iBAAkB,CAChB,eAAgB,KAAK,KACrB,OAAQ,KAAK,UASrB,gDAAiD,kBAAiB,CAChE,YAA4B,OAAgB,CAC1C,QAD0B,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,sBACP,wBAAyB,CACvB,OAAQ,KAAK,UASrB,0CAA2C,kBAAiB,CAC1D,YAA4B,OAAgB,CAC1C,QACA,GAF0B,KAAA,OAAA,OAEtB,QAAU,OAAO,OAAS,EAC5B,KAAM,IAAI,OAAM,6CAIb,oBAAkB,CACvB,MAAO,CACL,MAAO,eACP,kBAAmB,CACjB,OAAQ,KAAK,UASrB,0CAA2C,kBAAiB,CAC1D,YAA4B,OAA8B,CACxD,QAD0B,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,eACP,kBAAmB,CACjB,OAAQ,KAAK,UASrB,uCAAwC,kBAAiB,CACvD,YAA4B,OAAgB,CAC1C,QAD0B,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,YACP,eAAgB,CACd,OAAQ,KAAK",
  "names": []
}
