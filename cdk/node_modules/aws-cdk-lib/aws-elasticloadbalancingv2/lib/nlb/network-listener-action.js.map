{
  "version": 3,
  "sources": ["network-listener-action.ts"],
  "sourcesContent": ["import { Duration } from '../../../core';\nimport { CfnListener } from '../elasticloadbalancingv2.generated';\nimport { IListenerAction } from '../shared/listener-action';\nimport { INetworkListener } from './network-listener';\nimport { INetworkTargetGroup } from './network-target-group';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class NetworkListenerAction implements IListenerAction {\n                                                     \n  public static forward(targetGroups: INetworkTargetGroup[], options: NetworkForwardOptions = {}): NetworkListenerAction {\n    if (targetGroups.length === 0) {\n      throw new Error('Need at least one targetGroup in a NetworkListenerAction.forward()');\n    }\n    if (targetGroups.length === 1 && options.stickinessDuration === undefined) {\n      // Render a \"simple\" action for backwards compatibility with old templates\n      return new TargetGroupListenerAction(targetGroups, {\n        type: 'forward',\n        targetGroupArn: targetGroups[0].targetGroupArn,\n      });\n    }\n\n    return new TargetGroupListenerAction(targetGroups, {\n      type: 'forward',\n      forwardConfig: {\n        targetGroups: targetGroups.map(g => ({ targetGroupArn: g.targetGroupArn })),\n        targetGroupStickinessConfig: options.stickinessDuration ? {\n          durationSeconds: options.stickinessDuration.toSeconds(),\n          enabled: true,\n        } : undefined,\n      },\n    });\n  }\n\n                                                                                    \n  public static weightedForward(targetGroups: NetworkWeightedTargetGroup[], options: NetworkForwardOptions = {}): NetworkListenerAction {\n    if (targetGroups.length === 0) {\n      throw new Error('Need at least one targetGroup in a NetworkListenerAction.weightedForward()');\n    }\n\n    return new TargetGroupListenerAction(targetGroups.map(g => g.targetGroup), {\n      type: 'forward',\n      forwardConfig: {\n        targetGroups: targetGroups.map(g => ({ targetGroupArn: g.targetGroup.targetGroupArn, weight: g.weight })),\n        targetGroupStickinessConfig: options.stickinessDuration ? {\n          durationSeconds: options.stickinessDuration.toSeconds(),\n          enabled: true,\n        } : undefined,\n      },\n    });\n  }\n\n                                                                                                                                                                                                                                                                                  \n  protected constructor(private readonly actionJson: CfnListener.ActionProperty, protected readonly next?: NetworkListenerAction) {\n  }\n\n                                                 \n  public renderActions(): CfnListener.ActionProperty[] {\n    return this.renumber([this.actionJson, ...this.next?.renderActions() ?? []]);\n  }\n\n                                                                   \n  public bind(scope: Construct, listener: INetworkListener) {\n    // Empty on purpose\n    Array.isArray(scope);\n    Array.isArray(listener);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                             \n  protected renumber(actions: CfnListener.ActionProperty[]): CfnListener.ActionProperty[] {\n    if (actions.length < 2) { return actions; }\n\n    return actions.map((action, i) => ({ ...action, order: i + 1 }));\n  }\n}\n\n                                                        \nexport interface NetworkForwardOptions {\n                                                                                                                                                                 \n  readonly stickinessDuration?: Duration;\n}\n\n                                                \nexport interface NetworkWeightedTargetGroup {\n                                 \n  readonly targetGroup: INetworkTargetGroup;\n\n                                                                                             \n  readonly weight?: number;\n}\n\n/**\n * Listener Action that calls \"registerListener\" on TargetGroups\n */\nclass TargetGroupListenerAction extends NetworkListenerAction {\n  constructor(private readonly targetGroups: INetworkTargetGroup[], actionJson: CfnListener.ActionProperty) {\n    super(actionJson);\n  }\n\n  public bind(_scope: Construct, listener: INetworkListener) {\n    for (const tg of this.targetGroups) {\n      tg.registerListener(listener);\n    }\n  }\n}\n"],
  "mappings": "+NAWA,2BAAkC,CA6ChC,YAAuC,WAA2D,KAA4B,CAAvF,KAAA,WAAA,WAA2D,KAAA,KAAA,4MA3CpF,SAAQ,aAAqC,QAAiC,GAAE,CAC5F,iGAAI,aAAa,SAAW,EAC1B,KAAM,IAAI,OAAM,sEAElB,MAAI,cAAa,SAAW,GAAK,QAAQ,qBAAuB,OAEvD,GAAI,2BAA0B,aAAc,CACjD,KAAM,UACN,eAAgB,aAAa,GAAG,iBAI7B,GAAI,2BAA0B,aAAc,CACjD,KAAM,UACN,cAAe,CACb,aAAc,aAAa,IAAI,GAAM,EAAE,eAAgB,EAAE,kBACzD,4BAA6B,QAAQ,mBAAqB,CACxD,gBAAiB,QAAQ,mBAAmB,YAC5C,QAAS,IACP,gBAMI,iBAAgB,aAA4C,QAAiC,GAAE,CAC3G,iGAAI,aAAa,SAAW,EAC1B,KAAM,IAAI,OAAM,8EAGlB,MAAO,IAAI,2BAA0B,aAAa,IAAI,GAAK,EAAE,aAAc,CACzE,KAAM,UACN,cAAe,CACb,aAAc,aAAa,IAAI,GAAM,EAAE,eAAgB,EAAE,YAAY,eAAgB,OAAQ,EAAE,UAC/F,4BAA6B,QAAQ,mBAAqB,CACxD,gBAAiB,QAAQ,mBAAmB,YAC5C,QAAS,IACP,UAUH,eAAa,WAClB,MAAO,MAAK,SAAS,CAAC,KAAK,WAAY,GAAA,IAAA,IAAG,KAAK,QAAI,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAa,MAAA,KAAA,OAAA,GAAM,KAInE,KAAK,MAAkB,SAA0B,2FAEtD,MAAM,QAAQ,OACd,MAAM,QAAQ,UAIN,SAAS,QAAqC,CACtD,MAAI,SAAQ,OAAS,EAAY,QAE1B,QAAQ,IAAI,CAAC,OAAQ,IAAO,KAAK,OAAQ,MAAO,EAAI,MAhE/D,QAAA,sBAAA,4JAsFA,uCAAwC,sBAAqB,CAC3D,YAA6B,aAAqC,WAAsC,CACtG,MAAM,YADqB,KAAA,aAAA,aAItB,KAAK,OAAmB,SAA0B,CACvD,SAAW,MAAM,MAAK,aACpB,GAAG,iBAAiB",
  "names": []
}
