{
  "version": 3,
  "sources": ["network-listener.ts"],
  "sourcesContent": ["import * as cxschema from '../../../cloud-assembly-schema';\nimport { Duration, IResource, Resource } from '../../../core';\nimport { Construct } from 'constructs';\nimport { BaseListener, BaseListenerLookupOptions } from '../shared/base-listener';\nimport { HealthCheck } from '../shared/base-target-group';\nimport { AlpnPolicy, Protocol, SslPolicy } from '../shared/enums';\nimport { IListenerCertificate } from '../shared/listener-certificate';\nimport { validateNetworkProtocol } from '../shared/util';\nimport { NetworkListenerAction } from './network-listener-action';\nimport { INetworkLoadBalancer } from './network-load-balancer';\nimport { INetworkLoadBalancerTarget, INetworkTargetGroup, NetworkTargetGroup } from './network-target-group';\n\n                                                  \nexport interface BaseNetworkListenerProps {\n                                                                     \n  readonly port: number;\n\n                                                                                                                                                                                                                                                                                                                                                   \n  readonly defaultTargetGroups?: INetworkTargetGroup[];\n\n                                                                                                                                                                                                                                                                                                                                                  \n  readonly defaultAction?: NetworkListenerAction;\n\n                                                                                                                                                \n  readonly protocol?: Protocol;\n\n                                                                                                                                                                            \n  readonly certificates?: IListenerCertificate[];\n\n                                                                                    \n  readonly sslPolicy?: SslPolicy;\n\n\n                                                                                                                                                                                                                                                                                                                                                                          \n  readonly alpnPolicy?: AlpnPolicy;\n}\n\n                                                                                                                                                                        \nexport interface INetworkListenerCertificateProps extends IListenerCertificate {\n}\n\n                                                                        \nexport interface NetworkListenerProps extends BaseNetworkListenerProps {\n                                                             \n  readonly loadBalancer: INetworkLoadBalancer;\n}\n\n                                                     \nexport interface NetworkListenerLookupOptions extends BaseListenerLookupOptions {\n                                                                                                   \n  readonly listenerProtocol?: Protocol;\n}\n\n                                                                                          \nexport class NetworkListener extends BaseListener implements INetworkListener {\n                                            \n  public static fromLookup(scope: Construct, id: string, options: NetworkListenerLookupOptions): INetworkListener {\n    let listenerProtocol: cxschema.LoadBalancerListenerProtocol | undefined;\n    if (options.listenerProtocol) {\n      validateNetworkProtocol(options.listenerProtocol);\n\n      switch (options.listenerProtocol) {\n        case Protocol.TCP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.TCP; break;\n        case Protocol.UDP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.UDP; break;\n        case Protocol.TCP_UDP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.TCP_UDP; break;\n        case Protocol.TLS: listenerProtocol = cxschema.LoadBalancerListenerProtocol.TLS; break;\n      }\n    }\n\n    const props = BaseListener._queryContextProvider(scope, {\n      userOptions: options,\n      listenerProtocol: listenerProtocol,\n      loadBalancerType: cxschema.LoadBalancerType.NETWORK,\n    });\n\n    class LookedUp extends Resource implements INetworkListener {\n      public listenerArn = props.listenerArn;\n    }\n\n    return new LookedUp(scope, id);\n  }\n\n                                            \n  public static fromNetworkListenerArn(scope: Construct, id: string, networkListenerArn: string): INetworkListener {\n    class Import extends Resource implements INetworkListener {\n      public listenerArn = networkListenerArn;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                               \n  public readonly loadBalancer: INetworkLoadBalancer;\n\n  /**\n   * the protocol of the listener\n   */\n  private readonly protocol: Protocol;\n\n  constructor(scope: Construct, id: string, props: NetworkListenerProps) {\n    const certs = props.certificates || [];\n    const proto = props.protocol || (certs.length > 0 ? Protocol.TLS : Protocol.TCP);\n\n    validateNetworkProtocol(proto);\n\n    if (proto === Protocol.TLS && certs.filter(v => v != null).length === 0) {\n      throw new Error('When the protocol is set to TLS, you must specify certificates');\n    }\n\n    if (proto !== Protocol.TLS && certs.length > 0) {\n      throw new Error('Protocol must be TLS when certificates have been specified');\n    }\n\n    if (proto !== Protocol.TLS && props.alpnPolicy) {\n      throw new Error('Protocol must be TLS when alpnPolicy have been specified');\n    }\n\n    super(scope, id, {\n      loadBalancerArn: props.loadBalancer.loadBalancerArn,\n      protocol: proto,\n      port: props.port,\n      sslPolicy: props.sslPolicy,\n      certificates: props.certificates,\n      alpnPolicy: props.alpnPolicy ? [props.alpnPolicy] : undefined,\n    });\n\n    this.loadBalancer = props.loadBalancer;\n    this.protocol = proto;\n\n    if (props.defaultAction && props.defaultTargetGroups) {\n      throw new Error('Specify at most one of \\'defaultAction\\' and \\'defaultTargetGroups\\'');\n    }\n\n    if (props.defaultAction) {\n      this.setDefaultAction(props.defaultAction);\n    }\n\n    if (props.defaultTargetGroups) {\n      this.setDefaultAction(NetworkListenerAction.forward(props.defaultTargetGroups));\n    }\n  }\n\n                                                                                                                                                                                                                                              \n  public addTargetGroups(_id: string, ...targetGroups: INetworkTargetGroup[]): void {\n    this.setDefaultAction(NetworkListenerAction.forward(targetGroups));\n  }\n\n                                                                                                                                                                                                                                             \n  public addAction(_id: string, props: AddNetworkActionProps): void {\n    this.setDefaultAction(props.action);\n  }\n\nn  public addTargets(id: string, props: AddNetworkTargetsProps): NetworkTargetGroup {\n    if (!this.loadBalancer.vpc) {\n      // eslint-disable-next-line max-len\n      throw new Error('Can only call addTargets() when using a constructed Load Balancer or imported Load Balancer with specified VPC; construct a new TargetGroup and use addTargetGroup');\n    }\n\n    const group = new NetworkTargetGroup(this, id + 'Group', {\n      deregistrationDelay: props.deregistrationDelay,\n      healthCheck: props.healthCheck,\n      port: props.port,\n      protocol: props.protocol ?? this.protocol,\n      proxyProtocolV2: props.proxyProtocolV2,\n      preserveClientIp: props.preserveClientIp,\n      targetGroupName: props.targetGroupName,\n      targets: props.targets,\n      vpc: this.loadBalancer.vpc,\n    });\n\n    this.addTargetGroups(id, group);\n\n    return group;\n  }\n\n  /**\n   * Wrapper for _setDefaultAction which does a type-safe bind\n   */\n  private setDefaultAction(action: NetworkListenerAction) {\n    action.bind(this, this);\n    this._setDefaultAction(action);\n  }\n}\n\n                                                       \nexport interface INetworkListener extends IResource {\n                                                    \n  readonly listenerArn: string;\n}\n\n                                                           \nexport interface AddNetworkActionProps {\n                                  \n  readonly action: NetworkListenerAction;\n}\n\n                                                                  \nexport interface AddNetworkTargetsProps {\n                                                                                                                          \n  readonly port: number;\n\n                                                                                                                                         \n  readonly protocol?: Protocol;\n\n                                                                                                                                                                                                                                                         \n  readonly targets?: INetworkLoadBalancerTarget[];\n\n                                                                                                                                                                                                                                                                                                  \n  readonly targetGroupName?: string;\n\n                                                                                                                                                                                   \n  readonly deregistrationDelay?: Duration;\n\n                                                                                                \n  readonly proxyProtocolV2?: boolean;\n\n                                                                                                                                                                                                        \n  readonly preserveClientIp?: boolean;\n\n                                                                              \n  readonly healthCheck?: HealthCheck;\n}\n"],
  "mappings": "yNAAA,SAAA,QAAA,kCACA,OAAA,QAAA,iBAEA,gBAAA,QAAA,2BAEA,QAAA,QAAA,mBAEA,OAAA,QAAA,kBACA,0BAAA,QAAA,6BAEA,uBAAA,QAAA,0BA4CA,6BAAqC,iBAAA,YAAY,CA6C/C,YAAY,MAAkB,GAAY,MAA2B,4FACnE,KAAM,OAAQ,MAAM,cAAgB,GAC9B,MAAQ,MAAM,UAAa,OAAM,OAAS,EAAI,QAAA,SAAS,IAAM,QAAA,SAAS,KAI5E,GAFA,OAAA,wBAAwB,OAEpB,QAAU,QAAA,SAAS,KAAO,MAAM,OAAO,GAAK,GAAK,MAAM,SAAW,EACpE,KAAM,IAAI,OAAM,kEAGlB,GAAI,QAAU,QAAA,SAAS,KAAO,MAAM,OAAS,EAC3C,KAAM,IAAI,OAAM,8DAGlB,GAAI,QAAU,QAAA,SAAS,KAAO,MAAM,WAClC,KAAM,IAAI,OAAM,4DAGlB,MAAM,MAAO,GAAI,CACf,gBAAiB,MAAM,aAAa,gBACpC,SAAU,MACV,KAAM,MAAM,KACZ,UAAW,MAAM,UACjB,aAAc,MAAM,aACpB,WAAY,MAAM,WAAa,CAAC,MAAM,YAAc,SAMtD,GAHA,KAAK,aAAe,MAAM,aAC1B,KAAK,SAAW,MAEZ,MAAM,eAAiB,MAAM,oBAC/B,KAAM,IAAI,OAAM,oEAGlB,AAAI,MAAM,eACR,KAAK,iBAAiB,MAAM,eAG1B,MAAM,qBACR,KAAK,iBAAiB,0BAAA,sBAAsB,QAAQ,MAAM,4BAlFhD,YAAW,MAAkB,GAAY,QAAqC,sGAC1F,GAAI,kBACJ,GAAI,QAAQ,iBAGV,OAFA,OAAA,wBAAwB,QAAQ,kBAExB,QAAQ,sBACT,SAAA,SAAS,IAAK,iBAAmB,SAAS,6BAA6B,IAAK,UAC5E,SAAA,SAAS,IAAK,iBAAmB,SAAS,6BAA6B,IAAK,UAC5E,SAAA,SAAS,QAAS,iBAAmB,SAAS,6BAA6B,QAAS,UACpF,SAAA,SAAS,IAAK,iBAAmB,SAAS,6BAA6B,IAAK,MAIrF,KAAM,OAAQ,gBAAA,aAAa,sBAAsB,MAAO,CACtD,YAAa,QACb,iBACA,iBAAkB,SAAS,iBAAiB,UAG9C,sBAAuB,QAAA,QAAQ,CAA/B,aAAA,qBACS,KAAA,YAAc,MAAM,aAG7B,MAAO,IAAI,UAAS,MAAO,UAIf,wBAAuB,MAAkB,GAAY,mBAA0B,CAC3F,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACS,KAAA,YAAc,oBAGvB,MAAO,IAAI,QAAO,MAAO,IAuDpB,gBAAgB,OAAgB,aAAmC,kGACxE,KAAK,iBAAiB,0BAAA,sBAAsB,QAAQ,eAI/C,UAAU,IAAa,MAA4B,6FACxD,KAAK,iBAAiB,MAAM,QAIvB,WAAW,GAAY,MAA6B,QACzD,gGAAI,CAAC,KAAK,aAAa,IAErB,KAAM,IAAI,OAAM,sKAGlB,KAAM,OAAQ,GAAI,wBAAA,mBAAmB,KAAM,GAAK,QAAS,CACvD,oBAAqB,MAAM,oBAC3B,YAAa,MAAM,YACnB,KAAM,MAAM,KACZ,SAAQ,IAAE,MAAM,YAAQ,MAAA,KAAA,OAAA,GAAI,KAAK,SACjC,gBAAiB,MAAM,gBACvB,iBAAkB,MAAM,iBACxB,gBAAiB,MAAM,gBACvB,QAAS,MAAM,QACf,IAAK,KAAK,aAAa,MAGzB,YAAK,gBAAgB,GAAI,OAElB,MAMD,iBAAiB,OAA6B,CACpD,OAAO,KAAK,KAAM,MAClB,KAAK,kBAAkB,SA/H3B,QAAA,gBAAA",
  "names": []
}
