{
  "version": 3,
  "sources": ["network-load-balancer.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as ec2 from '../../../aws-ec2';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport { Resource } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { NetworkELBMetrics } from '../elasticloadbalancingv2-canned-metrics.generated';\nimport { BaseLoadBalancer, BaseLoadBalancerLookupOptions, BaseLoadBalancerProps, ILoadBalancerV2 } from '../shared/base-load-balancer';\nimport { BaseNetworkListenerProps, NetworkListener } from './network-listener';\n\n                                                 \nexport interface NetworkLoadBalancerProps extends BaseLoadBalancerProps {\n                                                                                                 \n  readonly crossZoneEnabled?: boolean;\n}\n\n                                                            \nexport interface NetworkLoadBalancerAttributes {\n                                         \n  readonly loadBalancerArn: string;\n\n                                                                                                                                                      \n  readonly loadBalancerCanonicalHostedZoneId?: string;\n\n                                                                                                                                      \n  readonly loadBalancerDnsName?: string;\n\n                                                                                                                                                                  \n  readonly vpc?: ec2.IVpc;\n}\n\n                                                        \nexport interface NetworkLoadBalancerLookupOptions extends BaseLoadBalancerLookupOptions {\n}\n\n                                                                                                       \nexport class NetworkLoadBalancer extends BaseLoadBalancer implements INetworkLoadBalancer {\n                                                    \n  public static fromLookup(scope: Construct, id: string, options: NetworkLoadBalancerLookupOptions): INetworkLoadBalancer {\n    const props = BaseLoadBalancer._queryContextProvider(scope, {\n      userOptions: options,\n      loadBalancerType: cxschema.LoadBalancerType.NETWORK,\n    });\n\n    return new LookedUpNetworkLoadBalancer(scope, id, props);\n  }\n\n  public static fromNetworkLoadBalancerAttributes(scope: Construct, id: string, attrs: NetworkLoadBalancerAttributes): INetworkLoadBalancer {\n    class Import extends Resource implements INetworkLoadBalancer {\n      public readonly loadBalancerArn = attrs.loadBalancerArn;\n      public readonly vpc?: ec2.IVpc = attrs.vpc;\n      public addListener(lid: string, props: BaseNetworkListenerProps): NetworkListener {\n        return new NetworkListener(this, lid, {\n          loadBalancer: this,\n          ...props,\n        });\n      }\n\n      public get loadBalancerCanonicalHostedZoneId(): string {\n        if (attrs.loadBalancerCanonicalHostedZoneId) { return attrs.loadBalancerCanonicalHostedZoneId; }\n        // eslint-disable-next-line max-len\n        throw new Error(`'loadBalancerCanonicalHostedZoneId' was not provided when constructing Network Load Balancer ${this.node.path} from attributes`);\n      }\n\n      public get loadBalancerDnsName(): string {\n        if (attrs.loadBalancerDnsName) { return attrs.loadBalancerDnsName; }\n        // eslint-disable-next-line max-len\n        throw new Error(`'loadBalancerDnsName' was not provided when constructing Network Load Balancer ${this.node.path} from attributes`);\n      }\n    }\n\n    return new Import(scope, id, { environmentFromArn: attrs.loadBalancerArn });\n  }\n\n  constructor(scope: Construct, id: string, props: NetworkLoadBalancerProps) {\n    super(scope, id, props, {\n      type: 'network',\n    });\n\n    if (props.crossZoneEnabled) { this.setAttribute('load_balancing.cross_zone.enabled', 'true'); }\n  }\n\n                                                                                                   \n  public addListener(id: string, props: BaseNetworkListenerProps): NetworkListener {\n    return new NetworkListener(this, id, {\n      loadBalancer: this,\n      ...props,\n    });\n  }\n\n                                                                                                                       \n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/NetworkELB',\n      metricName,\n      dimensions: { LoadBalancer: this.loadBalancerFullName },\n      ...props,\n    }).attachTo(this);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                             \n  public metricActiveFlowCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.activeFlowCountAverage, props);\n  }\n\n                                                                                                                                   \n  public metricConsumedLCUs(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.consumedLcUsAverage, {\n      statistic: 'Sum',\n      ...props,\n    });\n  }\n\n                                                                                                                                                                                        \n  public metricHealthyHostCount(props?: cloudwatch.MetricOptions) {\n    return this.metric('HealthyHostCount', {\n      statistic: 'Average',\n      ...props,\n    });\n  }\n\n                                                                                                                                                                                            \n  public metricUnHealthyHostCount(props?: cloudwatch.MetricOptions) {\n    return this.metric('UnHealthyHostCount', {\n      statistic: 'Average',\n      ...props,\n    });\n  }\n\n                                                                                                                                                                 \n  public metricNewFlowCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.newFlowCountSum, props);\n  }\n\n                                                                                                                                          \n  public metricProcessedBytes(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.processedBytesSum, props);\n  }\n\n                                                                                                                                                                                                                     \n  public metricTcpClientResetCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.tcpClientResetCountSum, props);\n  }\n\n                                                                                                                              \n  public metricTcpElbResetCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.tcpElbResetCountSum, props);\n  }\n\n                                                                                                                                                                                                                     \n  public metricTcpTargetResetCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.tcpTargetResetCountSum, props);\n  }\n\n  private cannedMetric(\n    fn: (dims: { LoadBalancer: string }) => cloudwatch.MetricProps,\n    props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...fn({ LoadBalancer: this.loadBalancerFullName }),\n      ...props,\n    }).attachTo(this);\n  }\n}\n\n                                  \nexport interface INetworkLoadBalancer extends ILoadBalancerV2, ec2.IVpcEndpointServiceLoadBalancer {\n\n                                                                              \n  readonly vpc?: ec2.IVpc;\n\n                                                                                                   \n  addListener(id: string, props: BaseNetworkListenerProps): NetworkListener;\n}\n\nclass LookedUpNetworkLoadBalancer extends Resource implements INetworkLoadBalancer {\n  public readonly loadBalancerCanonicalHostedZoneId: string;\n  public readonly loadBalancerDnsName: string;\n  public readonly loadBalancerArn: string;\n  public readonly vpc?: ec2.IVpc;\n\n  constructor(scope: Construct, id: string, props: cxapi.LoadBalancerContextResponse) {\n    super(scope, id, { environmentFromArn: props.loadBalancerArn });\n\n    this.loadBalancerArn = props.loadBalancerArn;\n    this.loadBalancerCanonicalHostedZoneId = props.loadBalancerCanonicalHostedZoneId;\n    this.loadBalancerDnsName = props.loadBalancerDnsName;\n\n    this.vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n      vpcId: props.vpcId,\n    });\n  }\n\n  public addListener(lid: string, props: BaseNetworkListenerProps): NetworkListener {\n    return new NetworkListener(this, lid, {\n      loadBalancer: this,\n      ...props,\n    });\n  }\n}\n"],
  "mappings": "6NAAA,WAAA,QAAA,2BACA,IAAA,QAAA,oBACA,SAAA,QAAA,kCACA,OAAA,QAAA,iBAGA,kDAAA,QAAA,sDACA,qBAAA,QAAA,gCACA,mBAAA,QAAA,sBA4BA,iCAAyC,sBAAA,gBAAgB,CAsCvD,YAAY,MAAkB,GAAY,MAA+B,CACvE,MAAM,MAAO,GAAI,MAAO,CACtB,KAAM,2GAGJ,MAAM,kBAAoB,KAAK,aAAa,oCAAqC,cAzCzE,YAAW,MAAkB,GAAY,QAAyC,0GAC9F,KAAM,OAAQ,qBAAA,iBAAiB,sBAAsB,MAAO,CAC1D,YAAa,QACb,iBAAkB,SAAS,iBAAiB,UAG9C,MAAO,IAAI,6BAA4B,MAAO,GAAI,aAGtC,mCAAkC,MAAkB,GAAY,MAAoC,qGAChH,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,gBAAkB,MAAM,gBACxB,KAAA,IAAiB,MAAM,IAChC,YAAY,IAAa,MAA+B,CAC7D,MAAO,IAAI,oBAAA,gBAAgB,KAAM,IAAK,CACpC,aAAc,QACX,WAII,oCAAiC,CAC1C,GAAI,MAAM,kCAAqC,MAAO,OAAM,kCAE5D,KAAM,IAAI,OAAM,gGAAgG,KAAK,KAAK,2BAGjH,sBAAmB,CAC5B,GAAI,MAAM,oBAAuB,MAAO,OAAM,oBAE9C,KAAM,IAAI,OAAM,kFAAkF,KAAK,KAAK,yBAIhH,MAAO,IAAI,QAAO,MAAO,GAAI,CAAE,mBAAoB,MAAM,kBAYpD,YAAY,GAAY,MAA+B,uGACrD,GAAI,oBAAA,gBAAgB,KAAM,GAAI,CACnC,aAAc,QACX,QAKA,OAAO,WAAoB,MAAgC,gFACzD,GAAI,YAAW,OAAO,CAC3B,UAAW,iBACX,WACA,WAAY,CAAE,aAAc,KAAK,yBAC9B,QACF,SAAS,MAIP,sBAAsB,MAAgC,gFACpD,KAAK,aAAa,kDAAA,kBAAkB,uBAAwB,OAI9D,mBAAmB,MAAgC,gFACjD,KAAK,aAAa,kDAAA,kBAAkB,oBAAqB,CAC9D,UAAW,SACR,QAKA,uBAAuB,MAAgC,CAC5D,MAAO,MAAK,OAAO,mBAAoB,CACrC,UAAW,aACR,QAKA,yBAAyB,MAAgC,CAC9D,MAAO,MAAK,OAAO,qBAAsB,CACvC,UAAW,aACR,QAKA,mBAAmB,MAAgC,gFACjD,KAAK,aAAa,kDAAA,kBAAkB,gBAAiB,OAIvD,qBAAqB,MAAgC,gFACnD,KAAK,aAAa,kDAAA,kBAAkB,kBAAmB,OAIzD,0BAA0B,MAAgC,gFACxD,KAAK,aAAa,kDAAA,kBAAkB,uBAAwB,OAI9D,uBAAuB,MAAgC,gFACrD,KAAK,aAAa,kDAAA,kBAAkB,oBAAqB,OAI3D,0BAA0B,MAAgC,gFACxD,KAAK,aAAa,kDAAA,kBAAkB,uBAAwB,OAG7D,aACN,GACA,MAAgC,CAChC,MAAO,IAAI,YAAW,OAAO,IACxB,GAAG,CAAE,aAAc,KAAK,0BACxB,QACF,SAAS,OA5HhB,QAAA,oBAAA,sJA0IA,yCAA0C,QAAA,QAAQ,CAMhD,YAAY,MAAkB,GAAY,MAAwC,CAChF,MAAM,MAAO,GAAI,CAAE,mBAAoB,MAAM,kBAE7C,KAAK,gBAAkB,MAAM,gBAC7B,KAAK,kCAAoC,MAAM,kCAC/C,KAAK,oBAAsB,MAAM,oBAEjC,KAAK,IAAM,IAAI,IAAI,WAAW,KAAM,MAAO,CACzC,MAAO,MAAM,QAIV,YAAY,IAAa,MAA+B,CAC7D,MAAO,IAAI,oBAAA,gBAAgB,KAAM,IAAK,CACpC,aAAc,QACX",
  "names": []
}
