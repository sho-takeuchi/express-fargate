{
  "version": 3,
  "sources": ["base-target-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as cdk from '../../../core';\nimport { Construct, DependencyGroup, IConstruct, IDependable } from 'constructs';\nimport { CfnTargetGroup } from '../elasticloadbalancingv2.generated';\nimport { Protocol, TargetType } from './enums';\nimport { Attributes, renderAttributes } from './util';\n\n                                                                         \nexport interface BaseTargetGroupProps {\n                                                                                                                                                                                                                                                                                                     \n  readonly targetGroupName?: string;\n\n                                                                                                                                       \n  readonly vpc?: ec2.IVpc;\n\n                                                                                                                                                                   \n  readonly deregistrationDelay?: cdk.Duration;\n\n                                                                      \n  readonly healthCheck?: HealthCheck;\n\n                                                                                                                                                                                                                                                                                                                                 \n  readonly targetType?: TargetType;\n}\n\n                                                    \nexport interface HealthCheck {\n\n                                                                                                                                                                                                                                                                                                             \n  readonly enabled?: boolean;\n\n                                                                                                                                          \n  readonly interval?: cdk.Duration;\n\n                                                                                                                         \n  readonly path?: string;\n\n                                                                                                                                     \n  readonly port?: string;\n\n                                                                                                                                                                                                                                                                                                                                                            \n  readonly protocol?: Protocol;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly timeout?: cdk.Duration;\n\n                                                                                                                                                                                                                                                                               \n  readonly healthyThresholdCount?: number;\n\n                                                                                                                                                                                                                                                                                              \n  readonly unhealthyThresholdCount?: number;\n\n                                                                                                                                                                                                                                                                        \n  readonly healthyGrpcCodes?: string;\n\n                                                                                                                                                                                                                                                                                                                              \n  readonly healthyHttpCodes?: string;\n}\n\n                                               \nexport abstract class TargetGroupBase extends Construct implements ITargetGroup {\n                                            \n  public readonly targetGroupArn: string;\n\n                                                  \n  public readonly targetGroupFullName: string;\n\n                                             \n  public readonly targetGroupName: string;\n\n                                                                          \n  public readonly targetGroupLoadBalancerArns: string[];\n\n                                                                                                                                                                                                          \n  public abstract readonly firstLoadBalancerFullName: string;\n\n                                                                  \n                                                                                                                  \n  public readonly loadBalancerArns: string;\n\n  public healthCheck: HealthCheck;\n\n                                                                         \n  protected readonly defaultPort: number;\n\n                                                                                                 \n  protected readonly loadBalancerAttachedDependencies = new DependencyGroup();\n\n                                                                                  \n  protected targetType?: TargetType;\n\n  /**\n   * Attributes of this target group\n   */\n  private readonly attributes: Attributes = {};\n\n  /**\n   * The JSON objects returned by the directly registered members of this target group\n   */\n  private readonly targetsJson = new Array<CfnTargetGroup.TargetDescriptionProperty>();\n\n  /**\n   * The target group VPC\n   *\n   * @default - Required if adding instances instead of Lambdas to TargetGroup\n   */\n  private vpc?: ec2.IVpc;\n\n  /**\n   * The target group resource\n   */\n  private readonly resource: CfnTargetGroup;\n\n  constructor(scope: Construct, id: string, baseProps: BaseTargetGroupProps, additionalProps: any) {\n    super(scope, id);\n\n    if (baseProps.deregistrationDelay !== undefined) {\n      this.setAttribute('deregistration_delay.timeout_seconds', baseProps.deregistrationDelay.toSeconds().toString());\n    }\n\n    this.healthCheck = baseProps.healthCheck || {};\n    this.vpc = baseProps.vpc;\n    this.targetType = baseProps.targetType;\n\n    this.resource = new CfnTargetGroup(this, 'Resource', {\n      name: baseProps.targetGroupName,\n      targetGroupAttributes: cdk.Lazy.any({ produce: () => renderAttributes(this.attributes) }, { omitEmptyArray: true }),\n      targetType: cdk.Lazy.string({ produce: () => this.targetType }),\n      targets: cdk.Lazy.any({ produce: () => this.targetsJson }, { omitEmptyArray: true }),\n      vpcId: cdk.Lazy.string({ produce: () => this.vpc && this.targetType !== TargetType.LAMBDA ? this.vpc.vpcId : undefined }),\n\n      // HEALTH CHECK\n      healthCheckEnabled: cdk.Lazy.any({ produce: () => this.healthCheck?.enabled }),\n      healthCheckIntervalSeconds: cdk.Lazy.number({\n        produce: () => this.healthCheck?.interval?.toSeconds(),\n      }),\n      healthCheckPath: cdk.Lazy.string({ produce: () => this.healthCheck?.path }),\n      healthCheckPort: cdk.Lazy.string({ produce: () => this.healthCheck?.port }),\n      healthCheckProtocol: cdk.Lazy.string({ produce: () => this.healthCheck?.protocol }),\n      healthCheckTimeoutSeconds: cdk.Lazy.number({\n        produce: () => this.healthCheck?.timeout?.toSeconds(),\n      }),\n      healthyThresholdCount: cdk.Lazy.number({ produce: () => this.healthCheck?.healthyThresholdCount }),\n      unhealthyThresholdCount: cdk.Lazy.number({ produce: () => this.healthCheck?.unhealthyThresholdCount }),\n      matcher: cdk.Lazy.any({\n        produce: () => this.healthCheck?.healthyHttpCodes !== undefined || this.healthCheck?.healthyGrpcCodes !== undefined ? {\n          grpcCode: this.healthCheck.healthyGrpcCodes,\n          httpCode: this.healthCheck.healthyHttpCodes,\n        } : undefined,\n      }),\n\n      ...additionalProps,\n    });\n\n    this.targetGroupLoadBalancerArns = this.resource.attrLoadBalancerArns;\n    this.targetGroupArn = this.resource.ref;\n    this.targetGroupFullName = this.resource.attrTargetGroupFullName;\n    this.loadBalancerArns = this.resource.attrLoadBalancerArns.toString();\n    this.targetGroupName = this.resource.attrTargetGroupName;\n    this.defaultPort = additionalProps.port;\n\n    this.node.addValidation({ validate: () => this.validateTargetGroup() });\n  }\n\n                                                                                                                          \n  public get loadBalancerAttached(): IDependable {\n    return this.loadBalancerAttachedDependencies;\n  }\n\n                                                            \n  public configureHealthCheck(healthCheck: HealthCheck) {\n    this.healthCheck = healthCheck;\n  }\n\n                                                                                                                                                                                                             \n  public setAttribute(key: string, value: string | undefined) {\n    this.attributes[key] = value;\n  }\n\n                                                                               \n  protected addLoadBalancerTarget(props: LoadBalancerTargetProps) {\n    if (this.targetType !== undefined && this.targetType !== props.targetType) {\n      throw new Error(`Already have a of type '${this.targetType}', adding '${props.targetType}'; make all targets the same type.`);\n    }\n    this.targetType = props.targetType;\n\n    if (this.targetType === TargetType.LAMBDA && this.targetsJson.length >= 1) {\n      throw new Error('TargetGroup can only contain one LAMBDA target. Create a new TargetGroup.');\n    }\n\n    if (props.targetJson) {\n      this.targetsJson.push(props.targetJson);\n    }\n  }\n\n  protected validateTargetGroup(): string[] {\n    const ret = new Array<string>();\n\n    if (this.targetType === undefined && this.targetsJson.length === 0) {\n      cdk.Annotations.of(this).addWarning(\"When creating an empty TargetGroup, you should specify a 'targetType' (this warning may become an error in the future).\");\n    }\n\n    if (this.targetType !== TargetType.LAMBDA && this.vpc === undefined) {\n      ret.push(\"'vpc' is required for a non-Lambda TargetGroup\");\n    }\n\n    return ret;\n  }\n}\n\n                                                           \nexport interface TargetGroupAttributes {\n                                        \n  readonly targetGroupArn: string;\n\n                                                                                                                                         \n  readonly defaultPort?: string;\n\n                                                                                                         \n  readonly loadBalancerArns?: string;\n}\n\n                                                                                                               \nexport interface TargetGroupImportProps extends TargetGroupAttributes {\n}\n\n                         \nexport interface ITargetGroup extends IConstruct {\n                                             \n  readonly targetGroupName: string;\n\n                                        \n  readonly targetGroupArn: string;\n\n                                                                                                                  \n  readonly loadBalancerArns: string;\n\n                                                                                       \n  readonly loadBalancerAttached: IDependable;\n}\n\n                                                        \nexport interface LoadBalancerTargetProps {\n                                            \n  readonly targetType: TargetType;\n\n                                                                                                                                                                 \n  readonly targetJson?: any;\n}\n\n/**\n * Extract the full load balancer name (used for metrics) from the listener ARN:\n *\n * Turns\n *\n *     arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2\n *\n * Into\n *\n *     app/my-load-balancer/50dc6c495c0c9188\n */\nexport function loadBalancerNameFromListenerArn(listenerArn: string) {\n  const arnParts = cdk.Fn.split('/', listenerArn);\n  return `${cdk.Fn.select(1, arnParts)}/${cdk.Fn.select(2, arnParts)}/${cdk.Fn.select(3, arnParts)}`;\n}\n"],
  "mappings": "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",
  "names": []
}
